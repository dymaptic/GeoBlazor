# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Main Branch Release Build

on:
  push:
    branches: [ "main", "gh-action-testing" ]

jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
        # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Setup Nuget
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'

      # This script queries nuget for the current version, and increments the build number by one
    - name: Bump Version
      shell: pwsh
      run: |
        ./bumpVersion.ps1 -publish
        
      # Loads all NuGet dependencies
    - name: Restore dependencies
      run: dotnet restore ./src/dymaptic.GeoBlazor.Core/dymaptic.GeoBlazor.Core.csproj

    - name: Update NPM
      uses: actions/setup-node@v4
      with:
        node-version: '>=22.11.0'
        check-latest: 'true'
    
      # This step will install the NPM dependencies and build the JS files with ESBuild
    - name: Generate JS
      shell: pwsh
      run: |
        cd ./src/dymaptic.GeoBlazor.Core
        ./esBuild.ps1 -c Release
        cd ../..
    
      # GenerateDocs - this will generate the XML for intellisense in the Nuget package
      # This step also creates the NuGet package
    - name: Build Core
      run: dotnet build ./src/dymaptic.GeoBlazor.Core/dymaptic.GeoBlazor.Core.csproj --no-restore /p:GenerateDocs=true /p:PipelineBuild=true -c Release
    
      # xmllint is a dependency of the copy steps below
    - name: Install xmllint
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y libxml2-utils
    
      # This step will copy the version number from the Directory.Build.props file to an environment variable
    - name: Copy Build Versions
      run: |
        CORE_VERSION=$(xmllint --xpath "//PropertyGroup/CoreVersion/text()" ./Directory.Build.props)
        echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV

      # Verify that the JS files are present in the output directory
    - name: Verify JS Files and Assets
      shell: pwsh
      continue-on-error: false
      run: |
        $nugetPath = "./src/dymaptic.GeoBlazor.Core/bin/Release/dymaptic.GeoBlazor.Core.${{env.CORE_VERSION}}.nupkg"
        $extractPath = "./src/dymaptic.GeoBlazor.Core/bin/Release/extract"
        $jsFilePath = "staticwebassets/js/arcGisJsInterop.js"
        Expand-Archive -Path $nugetPath -Force -DestinationPath $extractPath
        $contents = Get-ChildItem -Path $extractPath -Recurse
        $fileExists = $contents -match [regex]::Escape($jsFilePath)
        if ($fileExists) {
            Write-Output "JS file exists"
        } else {
            Write-Error "JS file does not exist"
            Exit 1
        }
        
      # This step will copy the PR description to an environment variable
    - name: Copy PR Release Notes
      run: |
        PR_DESCRIPTION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc" | \
        jq -r '.[0].body')
        DESC_PLUS_EOF="${PR_DESCRIPTION}"
        echo "PR_DESCRIPTION<<EOF" >> $GITHUB_ENV
        echo "$DESC_PLUS_EOF" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
      # Copies the nuget package to the artifacts directory
    - name: Upload nuget artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: .core-nuget
        path: ./src/dymaptic.GeoBlazor.Core/bin/Release/dymaptic.GeoBlazor.Core.*.nupkg
    
      # Creates a GitHub Release based on the Version and the PR description
    - name: Create Release
      # Only run this step if the branch is main
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        body: "${{env.PR_DESCRIPTION}}"
        tag_name: "v${{env.CORE_VERSION}}"
        generate_release_notes: true
        prerelease: false
        files: |
          ./src/dymaptic.GeoBlazor.Core/bin/Release/dymaptic.GeoBlazor.Core.*.nupkg
  
  # This step will publish the Pro NuGet package to NuGet.org
  nuget-push:
    # Only run this step if the branch is main
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4.1.8
      with:
        name: .core-nuget          
    - name: Publish Core to Nuget
      run: dotnet nuget push ./dymaptic.GeoBlazor.Core.*.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate