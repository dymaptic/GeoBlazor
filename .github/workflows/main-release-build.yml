# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Main Branch Release Build

on:
  push:
    branches: [ "main" ]

jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
    - name: Generate Github App token
      uses: actions/create-github-app-token@v2
      id: app-token
      with:
        app-id: ${{ secrets.SUBMODULE_APP_ID }}
        private-key: ${{ secrets.SUBMODULE_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        repositories: 'GeoBlazor'
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ steps.app-token.outputs.token }}
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Update NPM
      uses: actions/setup-node@v4
      with:
        node-version: '>=22.11.0'
        check-latest: 'true'
      
      # This runs the main GeoBlazor build script
    - name: Build GeoBlazor
      shell: pwsh
      run: |
        ./GeoBlazorBuild.ps1 -pkg -pub -c "Release"
        
      # xmllint is a dependency of the copy steps below
    - name: Install xmllint
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y libxml2-utils
    
      # This step will copy the version number from the Directory.Build.props file to an environment variable
    - name: Copy Build Version
      run: |
        CORE_VERSION=$(xmllint --xpath "//PropertyGroup/CoreVersion/text()" ./Directory.Build.props)
        echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV
        
      # This step will copy the PR description to an environment variable
    - name: Copy PR Release Notes
      run: |
        PR_DESCRIPTION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc" | \
        jq -r '.[0].body')
        DESC_PLUS_EOF="${PR_DESCRIPTION}"
        echo "PR_DESCRIPTION<<EOF" >> $GITHUB_ENV
        echo "$DESC_PLUS_EOF" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
      # Copies the nuget package to the artifacts directory
    - name: Upload nuget artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: .core-nuget
        path: ./src/dymaptic.GeoBlazor.Core/bin/Release/dymaptic.GeoBlazor.Core.*.nupkg
    
      # Creates a GitHub Release based on the Version and the PR description
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{env.PR_DESCRIPTION}}
        tag_name: "v${{env.CORE_VERSION}}"
        generate_release_notes: true
        prerelease: false
        files: |
          ./src/dymaptic.GeoBlazor.Core/bin/Release/dymaptic.GeoBlazor.Core.*.nupkg
  
  # This step will publish the Pro NuGet package to NuGet.org
  nuget-push:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4.1.8
      with:
        name: .core-nuget          
    - name: Publish Core to Nuget
      run: dotnet nuget push ./dymaptic.GeoBlazor.Core.*.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate