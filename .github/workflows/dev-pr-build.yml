# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Develop Branch PR Build

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
        # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Setup Nuget
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'

    - name: Bump Version
      shell: pwsh
      run: |
        ./bumpVersion.ps1
        
    - name: Restore dependencies
      run: dotnet restore ./src/dymaptic.GeoBlazor.Core/dymaptic.GeoBlazor.Core.csproj
        
    - name: Update NPM
      uses: actions/setup-node@v4
      with:
        node-version: '>=22.11.0'
        check-latest: 'true'
          
    # This step will install the NPM dependencies and build the JS files with ESBuild
    # The assetCopy.ps1 script will copy the ArcGIS Asset files to the correct location
    - name: Copy Assets and Generate JS
      shell: pwsh
      run: |
        cd ./src/dymaptic.GeoBlazor.Core
        npm install
        npm run releaseBuild
        ./assetCopy.ps1
        cd ../..
    
    - name: Build Core
      run: dotnet build ./src/dymaptic.GeoBlazor.Core/dymaptic.GeoBlazor.Core.csproj --no-restore /p:OptOutFromCoreEsBuild=false /p:GenerateDocs=true -c Release

    - name: Add & Commit
      continue-on-error: true
      run: |
        git config --global user.name "dymaptic"
        git config --global user.email "geoblazor@dymaptic.com"
        git add .
        git commit -m "Pipeline Build Commit of Version Bump"
        git push