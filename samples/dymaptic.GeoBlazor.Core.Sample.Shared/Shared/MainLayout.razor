@using System.Text.Json.Serialization
@inherits LayoutComponentBase

<PageTitle>GeoBlazor Samples</PageTitle>
@if (JsRuntime.GetType().Name.Contains("WebView"))
{
    // in MAUI or other Hybrid apps, we can inject the styles directly into the body
    @if (_isDarkMode)
    {
        <link href="_content/dymaptic.GeoBlazor.Core/assets/esri/themes/dark/main.css" rel="stylesheet" />
    }
    else
    {
        <link href="_content/dymaptic.GeoBlazor.Core/assets/esri/themes/light/main.css" rel="stylesheet" />
    }
    // load the GeoBlazor styles after the theme so they apply last
    <link href="_content/dymaptic.GeoBlazor.Core.Sample.Shared/css/site.css" rel="stylesheet"/>
}
else
{
    // in Blazor WebAssembly or Server, we use the HeadContent component
    // which we place before the GeoBlazor styles
    <HeadContent>
        @if (_isDarkMode)
        {
            <link href="_content/dymaptic.GeoBlazor.Core/assets/esri/themes/dark/main.css" rel="stylesheet" />
        }
        else
        {
            <link href="_content/dymaptic.GeoBlazor.Core/assets/esri/themes/light/main.css" rel="stylesheet" />
        }
    </HeadContent>
}

<div class="page">
    <div class="side-bar">
        <NavMenu SearchText="@_searchText" EnterKeyPressed="_enterKeyPressed" />
    </div>

        <main>
            <div class="top-row px-4">
                <div class="search-input-wrap">
                    <input type="search" id="search-input"
                           placeholder="Search for sample..."
                           @oninput="UpdateSearchFilter"
                           @onkeyup="SearchFilterKeyUp" />
                    <label for="search-input" class="search-label">
                        <img src="/_content/dymaptic.GeoBlazor.Core.Sample.Shared/images/search.svg" alt="Search" />
                    </label>
                </div>
                @{
                    string? apiKey = Configuration["ArcGISApiKey"];
                    string? loggedIn = Configuration["LoggedIn"];
                    string? clientId = Configuration["ClientId"];
                }
                @if (string.IsNullOrWhiteSpace(apiKey))
                {
                    <label>Enter ArcGIS API Key:<input id="api-key-field" type="text" @bind="ApiKey" /></label>
                    <button id="api-key-go" @onclick="StateHasChanged">GO</button>

                    if (!string.IsNullOrWhiteSpace(clientId))
                    {
                        <span>&nbsp;OR&nbsp;</span>
                        <button @onclick="LoginToArcGis">Login to ArcGIS</button>
                    }
                }
                else if ((loggedIn != "true") && !string.IsNullOrWhiteSpace(clientId))
                {
                    <button @onclick="LoginToArcGis">Login to ArcGIS</button>
                }
            </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [Inject]
    public required IConfiguration Configuration { get; set; }
    
    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    
    [Inject]
    public required HttpClient HttpClient { get; set; }
    
    [Inject]
    public required IJSRuntime JsRuntime { get; set; }
    
    [CascadingParameter(Name="PageRouteData")]
    public required RouteData RouteData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string uri = NavigationManager.Uri;
        if (uri.Contains("code="))
        {
            string code = uri[(uri.IndexOf("code=", StringComparison.OrdinalIgnoreCase) + 5)..];
            string callbackUri = uri[..uri.IndexOf("?", StringComparison.Ordinal)];
            HttpResponseMessage response = await HttpClient.PostAsync("https://www.arcgis.com/sharing/rest/oauth2/token/",
                new FormUrlEncodedContent(new Dictionary<string, string>
                {
                    ["client_id"] = Configuration["ClientId"]!,
                    ["grant_type"] = "authorization_code",
                    ["redirect_uri"] = callbackUri,
                    ["code"] = code
                }));
            TokenResponse? tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            Configuration["ArcGISApiKey"] = tokenResponse?.AccessToken.Trim('.');
            Configuration["LoggedIn"] = "true";
            NavigationManager.NavigateTo(callbackUri);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (string.IsNullOrEmpty(ApiKey))
        {
            string localStorageCopy = await JsRuntime.InvokeAsync<string>("loadApiKeyFromLocalStorage");
            if (!string.IsNullOrWhiteSpace(localStorageCopy))
            {
                Configuration["ArcGISApiKey"] = localStorageCopy;
                StateHasChanged();
            }
        }

        if (firstRender)
        {
            _isDarkMode = await JsRuntime.InvokeAsync<bool>("isDarkMode");
            StateHasChanged();
        }
    }

    private string ApiKey
    {
        get => Configuration["ArcGISApiKey"] ?? string.Empty;
        set
        {
            Configuration["ArcGISApiKey"] = value;
            if (JsRuntime is IJSInProcessRuntime)
            {
                JsRuntime.InvokeVoidAsync("saveApiKeyToLocalStorage", value);
            }

            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private void LoginToArcGis()
    {
        string callback = NavigationManager.Uri;
        string loginUrl = $"https://www.arcgis.com/sharing/rest/oauth2/authorize?client_id={Configuration["ClientId"]}" +
            $"&response_type=code&expiration=3600&redirect_uri={callback}";
        NavigationManager.NavigateTo(loginUrl);
    }
    
    private void UpdateSearchFilter(ChangeEventArgs arg)
    {
        _searchText = arg.Value?.ToString() ?? string.Empty;
    }

    private void SearchFilterKeyUp(KeyboardEventArgs arg)
    {
        if (arg.Key.Equals("Enter"))
        {
            _enterKeyPressed = true;
        }
    }

    private record TokenResponse([property: JsonPropertyName("access_token")] string AccessToken);
    private bool _isDarkMode;
    private string _searchText = string.Empty;
    private bool _enterKeyPressed;
}