@page "/bingmaps-layer"
<PageTitle>BingMapsLayer</PageTitle>
<h1>Bing Maps Layer</h1>
<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-BingMapsLayer.html">ArcGIS API for JavaScript Reference</a>
    <a class="btn btn-primary" target="_blank" href="https://www.microsoft.com/en-us/maps/bing-maps/choose-your-bing-maps-api">Bing Maps API</a>
</div>
<p class="instructions">
    A simple demo displaying a Bing Maps Layer. You can generate a free Bing Maps Key <a target="_blank" href="https://www.bingmapsportal.com/">here</a>.
</p>

<div class="spaced-row">
    <label>Enter a valid Bing Maps Key:</label>
    <input type="text" id="bing-maps-key-field" @bind="_bingMapsKey" />
</div>

<div class="spaced-row">
    <button @onclick="AddRemoveLayer" type="button" class="btn btn-accent">
        @(_bingMapsLayer is null ? "Add Bing Maps Basemap Layer" : "Remove Bing Maps Layer")
    </button>
    <div class="form-group">
        <label>Select an Imagery Style</label>
        <select @onchange="OnStyleChanged">
            @foreach (BingImageryStyle style in Enum.GetValues(typeof(BingImageryStyle)).Cast<BingImageryStyle>())
            {
                <option value="@style" selected="@(style == _style)">@style</option>
            }
        </select>
    </div>
</div>

<MapView @ref="_view" OnViewRendered="OnViewRendered"
         Longitude="-107.95166" Latitude="43.18083" Zoom="4" Class="map-view">
    <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
</MapView>

@code {
    private void OnViewRendered()
    {
        _viewRendered = true;
    }

    private async Task AddRemoveLayer()
    {
        if (!string.IsNullOrEmpty(_bingMapsKey) && _viewRendered)
        {
            if (_bingMapsLayer is null)
            {
                _bingMapsLayer = new BingMapsLayer(_bingMapsKey, _style);
                await _view!.AddLayer(_bingMapsLayer, true);
            }
            else
            {
                await _view!.RemoveLayer(_bingMapsLayer, true);
                _bingMapsLayer = null;
            }
        }
    }
    
    private async Task OnStyleChanged(ChangeEventArgs a)
    {
        _style = Enum.Parse<BingImageryStyle>(a.Value!.ToString()!, true);
        if (_bingMapsLayer is not null)
        {
            await AddRemoveLayer();
            await AddRemoveLayer();
        }
    }

    private string? _bingMapsKey;

    private MapView? _view;

    private bool _viewRendered;
    private BingImageryStyle _style = BingImageryStyle.Aerial;
    private BingMapsLayer? _bingMapsLayer;

}