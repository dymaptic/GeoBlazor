@page "/widgets"

<PageTitle>Widgets</PageTitle>
<h1>Widgets</h1>

<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-widget.html">ArcGIS API for JavaScript Reference</a>
    <a class="btn btn-primary" target="_blank" href="https://www.arcgis.com/home/item.html?id=c50de463235e4161b206d000587af18b">Navigation BaseMap</a>
</div>
<p class="instructions">
    Use the checkboxes to toggle various widgets on/off. Notice that Widgets can be placed on top of the map,
    or outside the map, as in the case of the Basemap Gallery.
</p>
<div class="control-row">
    <div id="control-set">
        <div class="form-group">
            <label>Locator: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(LocateWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Search: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(SearchWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Basemap Toggle: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(BasemapToggleWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Basemap Gallery: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(BasemapGalleryWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Legend: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(LegendWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Scale Bar: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(ScaleBarWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Home: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(HomeWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Compass: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(CompassWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Bookmarks: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(BookmarksWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Distance Measurement: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(MeasurementWidget)))"></label>
        </div>
        <div class="form-group">
            <label>Area Measurement 2D: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(AreaMeasurement2DWidget)))"></label>
        </div>
        <div id="gallery-box"></div>
    </div>
</div>
<button @onclick="@(() => MapView!.Refresh())">Refresh</button>

<MapView @ref="MapView" Longitude="-40" Latitude="28" Zoom="2" Class="map-view">
    <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisNavigation" />
        </Basemap>
    </Map>
    @if (_showLocate)
    {
        <LocateWidget RotationEnabled="false" Scale="1500"
                      Position="OverlayPosition.TopLeft" />
    }
    @if (_showSearch)
    {
        <SearchWidget Position="OverlayPosition.TopRight" />
    }
    @if (_showBasemapToggle)
    {
        <BasemapToggleWidget NextBasemapStyle="BasemapStyleName.ArcgisImagery"
                             Position="OverlayPosition.BottomRight" />
    }
    @if (_showBasemapGallery)
    {
        <BasemapGalleryWidget ContainerId="gallery-box" />
    }
    @if (_showScaleBar)
    {
        <ScaleBarWidget Position="OverlayPosition.BottomLeft" />
    }
    @if (_showLegend)
    {
        <LegendWidget Position="OverlayPosition.TopRight" />
    }
    @if (_showHome)
    {
        <HomeWidget Position="OverlayPosition.TopLeft" />
    }
    @if (_showCompass)
    {
        <CompassWidget Position="OverlayPosition.TopLeft" />
    }
    @if (_showDistanceMeasurement)
    {
        <MeasurementWidget ActiveTool="ActiveTool.Distance" Label="asdasdasdsds" LinearUnit="LengthUnit.NauticalMiles" Position="OverlayPosition.TopLeft" />
    }
    @if (_showAreaMeasurement)
    {
        <MeasurementWidget ActiveTool="ActiveTool.Area" Label="Test Area" AreaUnit="AreaUnit.SquareMeters" Position="OverlayPosition.TopLeft" />
    }
    @if (_showBookmarks)
    {
        <BookmarksWidget Position="OverlayPosition.TopRight" @ref="_bookmarkWidget" DragEnabled="true">
            <BookmarkVisibleElements AddBookmarkButton="true" EditBookmarkButton="true" />
        </BookmarksWidget>
    }
</MapView>

@code {
    private MapView? MapView { get; set; }

    private void ToggleWidget(string widgetTypeName)
    {
        switch (widgetTypeName)
        {
            case nameof(LocateWidget):
                _showLocate = !_showLocate;
                break;
            case nameof(SearchWidget):
                _showSearch = !_showSearch;
                break;
            case nameof(BasemapToggleWidget):
                _showBasemapToggle = !_showBasemapToggle;
                break;
            case nameof(BasemapGalleryWidget):
                _showBasemapGallery = !_showBasemapGallery;
                break;
            case nameof(LegendWidget):
                _showLegend = !_showLegend;
                break;
            case nameof(ScaleBarWidget):
                _showScaleBar = !_showScaleBar;
                break;
            case nameof(HomeWidget):
                _showHome = !_showHome;
                break;
            case nameof(CompassWidget):
                _showCompass = !_showCompass;
                break;
            case nameof(MeasurementWidget):
                _showDistanceMeasurement = !_showDistanceMeasurement;
                break;
            case nameof(AreaMeasurement2DWidget):
                _showAreaMeasurement = !_showAreaMeasurement;
                break;
            case nameof(BookmarksWidget):
                _showBookmarks = !_showBookmarks;
                break;
        }
    }
#pragma warning disable BL0005
    protected override void OnAfterRender(bool firstRender)
    {
        if (_showBookmarks)
        {
            _bookmarkWidget!.Bookmarks = _bookmarks;
        }
    }
#pragma warning restore BL0005

    private readonly List<Bookmark> _bookmarks = new List<Bookmark>()
    {
        new Bookmark("Angeles National Forest",
            thumbnail: "/_content/dymaptic.GeoBlazor.Core.Sample.Shared/images/Blazor-API-60px.png",
            viewpoint: new Viewpoint(new Extent(-13092887.54677721, -13139131.948889678,
                4090610.189673263, 4047767.23531948, spatialReference: new SpatialReference(102100)))),
        new Bookmark("Crystal Lake",
            viewpoint: new Viewpoint(new Extent(-13114291.451169826, -13125852.551697943,
                4077614.8487296384, 4066904.1101411926, spatialReference: new SpatialReference(102100)))),
        new Bookmark("Mt. Waterman",
            viewpoint: new Viewpoint(new Extent(-13183855.195875114, -13185668.186639601,
                4067515.260976006, 4066176.418652561, spatialReference: new SpatialReference(102100))))
    };

    private bool _showSearch;
    private bool _showLocate;
    private bool _showBasemapToggle;
    private bool _showBasemapGallery;
    private bool _showScaleBar;
    private bool _showLegend;
    private bool _showHome;
    private bool _showCompass;
    private bool _showDistanceMeasurement;
    private bool _showAreaMeasurement;
    private bool _showBookmarks;

    private BookmarksWidget? _bookmarkWidget;
}