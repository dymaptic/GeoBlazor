@page "/many-graphics"

<PageTitle>Many Graphics</PageTitle>
<h1>Many Graphics</h1>
<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html">ArcGIS API for JavaScript</a>
</div>
<p class="instructions">
    GeoBlazor can support a large number of geometries, such as the graphics generated and shown in this example.
    Use the input fields and buttons to test various graphic sizes and chunk sizes.
    In order to get performant rendering of your graphics, be sure to always call <code>MapView.AddGraphics(IEnumerable&lt;Graphic&gt;)</code> or <code>GraphicsLayer.Add(IEnumerable&lt;Graphic&gt;)</code>,
    rather than trying to add all the graphics individually.
    Chunk sizes are set by default to 200 (Server, WASM) and 100 (MAUI) based on internal testing.
</p>

<label>Number of Graphics: <input disabled="@_generating" @bind="_numberOfGraphics" @bind:after="SetGraphics" /></label>
<label>Chunk Size: <input disabled="@_generating" @bind="_chunkSize" /></label>

<MapView @ref="_view" Style="height: 600px; width: 100%;" GraphicSerializationChunkSize="_chunkSize">
    <Extent Xmin="-41525513" Ymin="4969181" Xmax="-36687355" Ymax="9024624">
        <SpatialReference Wkid="102100" />
    </Extent>
    <Map>
        <GraphicsLayer @ref="_graphicsLayer" />
        <OpenStreetMapLayer />
    </Map>
</MapView>
<button disabled="@_generating" @onclick="AddGraphicsToView">Add Graphics To View</button>
<button disabled="@_generating" @onclick="AddGraphicsToLayer">Add Graphics To Layer</button>
<button @onclick="ClearGraphics">Clear Graphics</button>
<label>
    Select Geometry Type:
    <select disabled="@_generating" @bind="_geometryType" @bind:after="SetGraphics">
        <option value="Point">Point</option>
        <option value="Polyline">Polyline</option>
        <option value="Polygon">Polygon</option>
    </select>
</label>

@code {

    protected override void OnInitialized()
    {
        SetGraphics();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _chunkSize = _view?.IsMaui == true ? 100 : 200;
        }
    }

    private void SetGraphics()
    {
        _graphics.Clear();
        for (var i = 0; i < _numberOfGraphics; i++)
        {
            _graphics.Add(GenerateGraphic());
        }
    }

    private async Task AddGraphicsToView()
    {
        _generating = true;
        StateHasChanged();
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        await _view!.AddGraphics(_graphics, _cts.Token);
        await InvokeAsync(() =>
        {
            _generating = false;
            StateHasChanged();
        });
    }

    private async Task AddGraphicsToLayer()
    {
        _generating = true;
        StateHasChanged();
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        await _graphicsLayer!.Add(_graphics, _cts.Token);
        await InvokeAsync(() =>
        {
            _generating = false;
            StateHasChanged();
        });
    }

    private async Task ClearGraphics()
    {
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        await _graphicsLayer!.Clear();
        await _view!.ClearGraphics();
        _generating = false;
        StateHasChanged();
    }

    private Graphic GenerateGraphic()
    {
        switch (_geometryType)
        {
            case "Polyline":
                return new Graphic(GeneratePolyline(), GenerateSimpleLine(), GeneratePopupTemplate(),
                    GenerateAttributes());
            case "Polygon":
                return new Graphic(GeneratePolygon(), GenerateSimpleFill(), GeneratePopupTemplate(),
                    GenerateAttributes());
            default:
                return new Graphic(GeneratePoint(), GenerateSimpleMarker(), GeneratePopupTemplate(),
                    GenerateAttributes());
        }
    }

    private Point GeneratePoint()
    {
        return new Point(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0);
    }

    private Polyline GeneratePolyline()
    {
        return new Polyline(new MapPath[]
        {
            new(new MapPoint(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0), new MapPoint(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0))
        });
    }

    private Polygon GeneratePolygon()
    {
        return new Polygon(new MapPath[]
        {
            new(new MapPoint(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0), new MapPoint(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0), new MapPoint(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0), new MapPoint(_random.NextDouble() * 40 + -10.0, _random.NextDouble() * 20 + 40.0))
        });
    }

    private Symbol GenerateSimpleMarker()
    {
        return new SimpleMarkerSymbol(new Outline(new MapColor("green")),
            new MapColor("red"), 10);
    }

    private Symbol GenerateSimpleLine()
    {
        return new SimpleLineSymbol(new MapColor("blue"), 2, SimpleLineSymbolStyle.Solid);
    }

    private Symbol GenerateSimpleFill()
    {
        return new SimpleFillSymbol(new Outline(new MapColor("purple")),
            new MapColor("yellow"));
    }

    private PopupTemplate GeneratePopupTemplate()
    {
        return new PopupTemplate("Test", "Test Content<br/>{testString}<br/>{testNumber}", new[] { "*" });
    }

    private AttributesDictionary GenerateAttributes()
    {
        return new AttributesDictionary(new Dictionary<string, object?> { { "testString", "test" }, { "testNumber", 123 } });
    }

    private readonly Random _random = new();
    private MapView? _view;
    private GraphicsLayer? _graphicsLayer;
    private int _numberOfGraphics = 10_000;
    private int _chunkSize = 200;
    private CancellationTokenSource _cts = new();
    private string _geometryType = "Point";
    private readonly List<Graphic> _graphics = new();
    private bool _generating;
}