@page "/imagery-tile-layer"
@using dymaptic.GeoBlazor.Core.Extensions
@using dymaptic.GeoBlazor.Core.Functions

<h3>Imagery Tile Layers</h3>

<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/sample-code/layers-imagerytilelayer/">ArcGIS API for JavaScript</a>
    <a class="btn btn-primary" target="_blank" href="https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer">World Elevation Terrain 3D</a>
</div>
<p class="instructions">
    Demonstrates an <code>ImageryTileLayer</code> blended with an <code>ImageryLayer</code>
</p>

<MapView class="map-view" @ref="_mapView"
         Center="@(new Point(84, 31))"
         Zoom="4">
    <Constraints SnapToZoom="false" />
    <Map>
        <ImageryTileLayer @ref="_layer"
                          Url="https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer"
                          Title="World Elevation ImageryTileLayer"
                          BlendMode="BlendMode.DestinationIn" />
        <TileLayer Url="https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer"
                   ListMode="ListMode.HideChildren" />
    </Map>
    <LayerListWidget OnListItemCreatedHandler="OnListItemCreated"
                     Position="OverlayPosition.TopRight" />
</MapView>
<SliderWidget ContainerId="value-slider"
              Min="0"
              Max="5000"
              Values="@([120, 3068])"
              StepInterval="10"
              SnapOnClickEnabled="false"
              @ref="_slider"
              ValueChanged="OnSliderChanged"
              MapView="_mapView">
    <SliderVisibleElements Labels="true" RangeLabels="true" />
</SliderWidget>

<div id="rendererDiv" class="esri-widget" style="display: block;">
    <h3 class="esri-widget__heading">Stretch Rendering Parameters</h3>

    <label class="esri-feature-form__label">Select stretch type</label>
    <select id="stretchType" @onchange="ToggleStretchType" class="esri-input esri-select">
        <option value="@StretchType.MinMax" selected>min-max</option>
        <option value="@StretchType.StandardDeviation">standard deviation</option>
    </select>
    <br />
    <label id="sliderLabel" class="esri-feature-form__label">
        @_stretchType.ToString().ToKebabCase() value:
    </label>
    <div id="value-slider" class="slider"></div>
    <input type="checkbox" checked @onchange="ToggleBlendMode" />
    <label>Toggle blendMode</label>
</div>


@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_layer!.Renderer == null)
        {
            await _layer.Load();

            await _layer.SetRenderer(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                new MapColor(0, 0, 0, 0), new MapColor(0, 0, 0, 1)),
                stretchType: _stretchType, 
                statistics: [new RasterBandStatistics(Min: 120, Max: 3068, Avg: 400, Stddev: 700)]));
            _layer.LayerChanged = true;
            _rasterInfo = await _layer.GetServiceRasterInfo();
            StateHasChanged();
        }
    }

    private async Task OnSliderChanged(double[] values)
    {
        await UpdateRenderer(values);
    }

    private async Task UpdateRenderer(double[] values)
    {
        var bandStat = _rasterInfo!.Statistics!.First();
        RasterStretchRenderer newRenderer;
        switch (_stretchType)
        {
            case StretchType.MinMax:
                newRenderer = new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(0, 0, 0, 0), new MapColor(0, 0, 0, 1)),
                    stretchType: _stretchType, 
                    statistics: [new RasterBandStatistics(bandStat.Avg, Max: values[1], Min: values[0], Stddev: bandStat.Stddev)]);

                break;
            default:
                newRenderer = new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(0, 0, 0, 0), new MapColor(0, 0, 0, 1)),
                    stretchType: _stretchType, 
                    statistics: [new RasterBandStatistics(bandStat.Avg, Max: bandStat.Max, Min: bandStat.Min, 
                        Stddev: bandStat.Stddev)],
                numberOfStandardDeviations: (int)values[0]);

                break;
        }
        
        await _layer!.SetRenderer(newRenderer);
    }

    private async Task ToggleBlendMode(ChangeEventArgs e)
    {
        if (e.Value is true)
        {
            await _layer!.SetProperty(nameof(ImageryTileLayer.BlendMode), BlendMode.DestinationIn);
        }
        else
        {
            await _layer!.SetProperty(nameof(ImageryTileLayer.BlendMode), BlendMode.Normal);
        }
    }
    
    private async Task ToggleStretchType(ChangeEventArgs e)
    {
        _stretchType = (StretchType)Enum.Parse(typeof(StretchType), e.Value?.ToString()!);

        switch (_stretchType)
        {
            case StretchType.MinMax:
                await _slider!.SetMax(5000);
                await _slider.SetMin(0);
                await _slider.SetStepInterval(10);
                await _slider.SetValues([120, 3068]);

                break;
            case StretchType.StandardDeviation:
                await _slider!.SetMax(3);
                await _slider.SetMin(1);
                await _slider.SetStepInterval(1);
                await _slider.SetValues([1]);

                break;
        }
        
        await UpdateRenderer(_slider!.Values!.ToArray());
    }
    
    private async Task<ListItem> OnListItemCreated(ListItem listItem)
    {
        if (listItem.LayerId == _layer?.Id)
        {
            await listItem.SetPanel(new ListItemPanelWidget(open: true, icon: "esri-icon-maps", containerId: "rendererDiv"));
        }
        return listItem;
    }

    private ImageryTileLayer? _layer;
    private StretchType _stretchType = StretchType.MinMax;
    private SliderWidget? _slider;
    private RasterInfo? _rasterInfo;
    private MapView? _mapView;
}
