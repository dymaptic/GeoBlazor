@page "/Bookmarks"

<PageTitle>Bookmarks and Bookmarks Widget</PageTitle>
<h1>Bookmarks Widget</h1>

<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html">ArcGIS API for JavaScript Reference</a>
    <a class="btn btn-primary" target="_blank" href="https://developers.arcgis.com/javascript/latest/sample-code/widgets-bookmarks/">Bookmarks Sample</a>
</div>

<p class="instructions">
    Sample demonstrates the use of the Bookmarks widget and Bookmark actions.
    This follows the ESRI sample, but the Timeline Widget is included with GeoBlazor pro.
</p>
<MapView Class="map-view" 
         OnLayerViewCreate="OnLayerViewCreate"
         OnViewRendered="OnViewRendered">
    <WebMap>
        <PortalItem PortalItemId="70b726074af04a7e9839d8a07f64c039" />
    </WebMap>
    <ExpandWidget Expanded="true" Position="OverlayPosition.TopRight">
        <BookmarksWidget  @ref="_bookmarksWidget" OnBookmarkSelect="OnBookmarkClick"
                          DragEnabled="true">
            <BookmarksVisibleElements EditBookmarkButton="true"
                                      AddBookmarkButton="true" />
        </BookmarksWidget>
    </ExpandWidget>

</MapView>

<h2>Bookmarks</h2>
<p><em>Only updates on Adding new bookmarks to demonstrate Reactive Binding to Collection Event.</em></p>
<ul>
    @foreach (Bookmark bookmark in _bookmarksWidget?.Bookmarks ?? [])
    {
        <li>@bookmark.Name</li>
    }
</ul>


@code {

    private void OnLayerViewCreate(LayerViewCreateEvent evt)
    {
        if (evt.Layer is not FeatureLayer) return;
        _layerView = evt.LayerView as FeatureLayerView;
    }
    
    private async Task OnViewRendered()
    {
        if (!_handlerRegistered)
        {
            _handlerRegistered = true;
            // Register a reactive listener for the "bookmarks.after-add" event on the bookmarks collection
            await _bookmarksWidget!.AddReactiveListener<object>("bookmarks.after-add", 
                HandleBookmarkAddedEvent);
            await HandleBookmarkAddedEvent(new());
        }
    }

    private async Task HandleBookmarkAddedEvent(object _)
    {
        // Call GetBookmarks to refresh the list of bookmarks from JavaScript
        IReadOnlyList<Bookmark> __ = await _bookmarksWidget!.GetBookmarks() ?? [];
        await InvokeAsync(StateHasChanged);
    }

    private void OnBookmarkClick(BookmarkSelectEvent eventArgs)
    {
        if (_layerView is null) return;

        var hurricaneName = eventArgs.Bookmark.Name;

        var featureEffect = new FeatureEffect([new Effect("grayscale(100%) opacity(30%)")],
            null, new FeatureFilter(where: $"Name = '{hurricaneName!.ToUpper()}'"));
        _ = _layerView.SetFeatureEffect(featureEffect);
    }
    
    private FeatureLayerView? _layerView;
    private BookmarksWidget? _bookmarksWidget;
    private bool _handlerRegistered;
}