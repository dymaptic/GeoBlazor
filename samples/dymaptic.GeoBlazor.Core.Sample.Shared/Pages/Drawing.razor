@page "/drawing"

<PageTitle>Map</PageTitle>
<h1>Drawing</h1>
<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/add-a-point-line-and-polygon/">ArcGIS API for JavaScript Reference</a>
    <a class="btn btn-primary" target="_blank" href="https://www.arcgis.com/home/item.html?id=716b600dbbac433faa4bec9220c76b3a">Imagery with Labels BaseMap</a>
</div>
<p class="instructions">
    Toggle each section below, then use the "Draw" button to add a graphic. To move a graphic, change the value in the
    latitude/logitude fields. Click "Remove" to clear the graphic from the map.
</p>
<div id="control-set">
    <div class="form-group">
        <label class="draw-label" @onclick="@(() => _showPointSection = !_showPointSection)">
            Draw a Point
            <span class="oi @(_showPointSection ? "oi-chevron-top" : "oi-chevron-bottom")"></span>
        </label>
        <div class="@(_showPointSection ? "" : "collapse")">
            <label>Longitude:<input type="number" step="0.01" value="@_pointLong"
                                    @onchange="SetPointLong" /></label>
            <label>Latitude:<input type="number" step="0.01" value="@_pointLat"
                                   @onchange="SetPointLat" /></label>
            <button class="btn btn-primary" @onclick="DrawPoint">@(_showPoint ? "Remove" : "Draw")</button>
        </div>
    </div>
    <div class="form-group">
        <label class="draw-label" @onclick="@(() => _showLineSection = !_showLineSection)">
            Draw a Line
            <span class="oi @(_showLineSection ? "oi-chevron-top" : "oi-chevron-bottom")"></span>
        </label>
        <div class="@(_showLineSection ? "" : "collapse")">
            <table class="table">
                <colgroup>
                    <col style="width: 2rem;" />
                    <col style="width: 10rem;" />
                    <col style="width: 10rem;" />
                </colgroup>
                <thead>
                    <tr>
                        <th>Point</th>
                        <th>Longitude</th>
                        <th>Latitude</th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < mapPath.Count; i++)
                    {
                        int index = i;
                        MapPoint path = mapPath[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>
                                <input type="number" step="0.01" value="@path[0]"
                                       @onchange="c => SetLinePath(c, index, 0)" />
                            </td>
                            <td>
                                <input type="number" step="0.01" value="@path[1]"
                                       @onchange="c => SetLinePath(c, index, 1)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-primary" @onclick="DrawLine">@(_showLine ? "Remove" : "Draw")</button>
            <button class="btn btn-secondary" @onclick="AddPoint">Add Pt</button>
            <button class="btn btn-danger" @onclick="RemovePoint">Remove Pt</button>
        </div>
    </div>
    <div class="form-group">
        <label class="draw-label" @onclick="@(() => _showPolygonSection = !_showPolygonSection)">
            Draw a Polygon
            <span class="oi @(_showPolygonSection ? "oi-chevron-top" : "oi-chevron-bottom")"></span>
        </label>
        <div class="@(_showPolygonSection ? "" : "collapse")">
            <table class="table">
                <thead>
                    <tr>
                        <th>Point</th>
                        <th>Longitude</th>
                        <th>Latitude</th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < mapRings.Count; i++)
                    {
                        int index = i;
                        MapPoint path = mapRings[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>
                                <input type="number" step="0.01" value="@path[0]"
                                       @onchange="c => SetRingPath(c, index, 0)" />
                            </td>
                            <td>
                                <input type="number" step="0.01" value="@path[1]"
                                       @onchange="c => SetRingPath(c, index, 1)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-primary" @onclick="DrawPolygon">@(_showPolygon ? "Remove" : "Draw")</button>
            <button class="btn btn-secondary" @onclick="AddPolygonPoint">Add Pt</button>
            <button class="btn btn-danger" @onclick="RemovePolygonPoint">Remove Pt</button>
            <h3>Click on Polygon to see Popup!</h3>
        </div>
    </div>
</div>

<MapView Longitude="_longitude" Latitude="_latitude" Zoom="11" Class="map-view">
    <Map>
        <Basemap>
            <PortalItem PortalItemId="716b600dbbac433faa4bec9220c76b3a" />
        </Basemap>
        <GraphicsLayer @ref="_graphicsLayer" />
    </Map>
</MapView>

<br />
<button class="btn btn-info" @onclick="GetPoint">Get Point Data</button>
<button class="btn btn-info" @onclick="GetPolyLine">Get Polyline Data</button>
<button class="btn btn-info" @onclick="GetPolygon">Get Polygon Data</button>
@_geometry


@code
{
    private async Task DrawPoint()
    {
        _showPoint = !_showPoint;

        if (_showPoint)
        {
            await _graphicsLayer!.Add(_pointGraphic);
        }
        else
        {
            await _graphicsLayer!.Remove(_pointGraphic);
        }
    }

    private async Task DrawLine()
    {
        _showLine = !_showLine;
        
        if (_showLine)
        {
            await _graphicsLayer!.Add(_polylineGraphic);
        }
        else
        {
            await _graphicsLayer!.Remove(_polylineGraphic);
        }
    }

    private void AddPoint()
    {
        mapPath.Add(new MapPoint(mapPath[0][0] + 0.01, mapPath[0][1] + 0.01));
    }

    private void RemovePoint()
    {
        mapPath.RemoveAt(mapPath.Count - 1);
    }

    private void DrawPolygon()
    {
        _showPolygon = !_showPolygon;
        
        if (_showPolygon)
        {
            _graphicsLayer!.Add(_polygonGraphic);
        }
        else
        {
            _graphicsLayer!.Remove(_polygonGraphic);
        }
    }

    private void AddPolygonPoint()
    {
        mapRings.Add(new MapPoint(mapRings[0][0] + 0.01, mapRings[0][1] + 0.01));
    }

    private void RemovePolygonPoint()
    {
        mapRings.RemoveAt(mapRings.Count - 1);
    }

    private async Task GetPoint()
    {
        if (_pointGraphic is null) return;

        Geometry? geometry = await _pointGraphic.GetGeometry();
        _geometry = JsonSerializer.Serialize(geometry);
    }

    private async Task GetPolyLine()
    {
        if (_polylineGraphic is null) return;

        Geometry? geometry = await _polylineGraphic.GetGeometry();
        _geometry = JsonSerializer.Serialize(geometry);
    }

    private async Task GetPolygon()
    {
        if (_polygonGraphic is null) return;

        Geometry? geometry = await _polygonGraphic.GetGeometry();
        _geometry = JsonSerializer.Serialize(geometry);
    }

    private async Task SetPointLong(ChangeEventArgs args)
    {
        _pointLong = Convert.ToDouble(args.Value);
        await _pointGraphic.SetGeometry(new Point(_pointLong, _pointLat));
    }
    
    private async Task SetPointLat(ChangeEventArgs args)
    {
        _pointLat = Convert.ToDouble(args.Value);
        await _pointGraphic.SetGeometry(new Point(_pointLong, _pointLat));
    }

    private async Task SetLinePath(ChangeEventArgs args, int i, int j)
    {
        mapPath[i][j] = Convert.ToDouble(args.Value);
        await _polylineGraphic.SetGeometry(new Polyline([mapPath]));
    }
    
    private async Task SetRingPath(ChangeEventArgs args, int i, int j)
    {
        mapRings[i][j] = Convert.ToDouble(args.Value);
        await _polygonGraphic.SetGeometry(new Polygon([mapRings]));
    }

    private bool _showPointSection;
    private bool _showLineSection;
    private bool _showPolygonSection;
    private Graphic _polygonGraphic = new(new Polygon([ mapRings ]),
        new SimpleFillSymbol(new Outline(new MapColor(255, 255, 255), 1),
            new MapColor(81, 46, 132, 0.8)));
    private Graphic _pointGraphic = new(new Point(_pointLong, _pointLat),
        new SimpleMarkerSymbol(new Outline(new MapColor(255, 255, 255), 1), 
            new MapColor(81, 46, 132)));
    private Graphic _polylineGraphic = new(new Polyline([mapPath]), 
        new SimpleLineSymbol(new MapColor("white"), 2));
    private GraphicsLayer? _graphicsLayer;
    private string? _geometry;
    private readonly double _latitude = 34.027;
    private readonly double _longitude = -118.805;
    private static double _pointLat = 34.027;
    private static double _pointLong = -118.805;
    private bool _showPoint;
    private bool _showLine;
    private bool _showPolygon;

    private static readonly MapPath mapPath = new(new MapPoint(-118.821527826096, 34.0139576938577),
        new MapPoint(-118.814893761649, 34.0080602407843),
        new MapPoint(-118.808878330345, 34.0016642996246));

    private static readonly MapPath mapRings = new(new MapPoint(-118.818984489994, 34.0137559967283),
        new MapPoint(-118.806796597377, 34.0215816298725),
        new MapPoint(-118.791432890735, 34.0163883241613),
        new MapPoint(-118.79596686535, 34.008564864635),
        new MapPoint(-118.808558110679, 34.0035027131376));
    private readonly AttributesDictionary _graphicAttributes = new(new Dictionary<string, object?>
    {
        { "Name", "Sample Polygon" },
        { "Description", "This is where you can describe the polygon." }
    });

}