@page "/"
@rendermode InteractiveServer

<PageTitle>GeoBlazor Token Refresh Sample</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">GeoBlazor Token Refresh Sample</h1>

            <!-- Documentation Section -->
            <div class="documentation-section mb-4">
                <p><strong>Token Authentication Process</strong></p>
                <p>
                    <strong>
                        This sample demonstrates how to implement automatic token refresh in GeoBlazor applications
                        using server-side authentication with ArcGIS Portal or ArcGIS Online.
                    </strong>
                    For end-to-end setup and guidance, see the GeoBlazor docs:
                    <a href="https://docs.geoblazor.com/pages/appTokenRefresh.html" target="_blank">
                        Token Refresh (App Authentication)
                    </a>.
                </p>

                <p><strong>1. Configuration Setup</strong></p>
                <p>
                    Configure your ArcGIS authentication settings in <code>appsettings.json</code> or user secrets:
                </p>

                <div class="alert alert-info">
                    <strong>Effective Server Configuration (from IConfiguration)</strong>
                    <pre><code>@_currentConfig</code></pre>
                </div>

                <div class="alert alert-warning">
                    <strong>Portal vs ArcGIS Online Configuration</strong>
                    <ul>
                        <li><strong>ArcGIS Online:</strong> Set <code>ArcGISPortalUrl</code> to <code>https://www.arcgis.com</code> (or leave it empty to use the default). Do <em>not</em> add <code>/portal</code>.</li>
                        <li><strong>Enterprise Portal:</strong> Set <code>ArcGISPortalUrl</code> to your portal host. You may include or omit <code>/portal</code> — both are accepted and normalized. Examples: <code>https://your-server</code> or <code>https://your-server/portal</code>. Trailing slashes are optional.</li>
                    </ul>
                </div>

                <p><strong>2. Authentication Flow</strong></p>
                <p>
                    The authentication process involves two pieces working together:
                </p>

                <p><strong>ArcGisAuthService (this sample)</strong></p>
                <ul>
                    <li>🧩 <em>Your</em> service in this sample app</li>
                    <li>Makes HTTP requests to the ArcGIS REST API using client credentials</li>
                    <li>Caches tokens locally and manages token expiration/refresh</li>
                    <li>Calls <code>AuthenticationManager.RegisterToken(...)</code> when a token is obtained</li>
                </ul>

                <p><strong>AuthenticationManager (built into GeoBlazor)</strong></p>
                <ul>
                    <li>📦 Provided by the GeoBlazor NuGet package — you use it; you don’t implement it</li>
                    <li>Bridges C# and the ArcGIS Maps SDK for JavaScript under the hood</li>
                    <li>Registers tokens with ArcGIS Identity Manager and tracks authentication state</li>
                    <li>No changes required in this sample — it’s injected and used as a dependency</li>
                </ul>

                <div class="alert alert-primary">
                    <strong>Ready to Test?</strong>
                    <p class="mb-2">Choose which render mode demonstration you'd like to see:</p>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card border-primary">
                                <div class="card-body">
                                    <h6 class="card-title">🖥️ InteractiveServer Mode</h6>
                                    <p class="card-text small">Server-side execution over SignalR. Best for fast first render and secure token handling.</p>
                                    <a href="/map-server" class="btn btn-primary btn-sm">View Server Mode Demo</a>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-success">
                                <div class="card-body">
                                    <h6 class="card-title">💻 InteractiveWebAssembly Mode</h6>
                                    <p class="card-text small">Pure client-side execution. Best for rich interactivity and offline capability.</p>
                                    <a href="/map-webassembly" class="btn btn-success btn-sm">View WebAssembly Demo</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <p>
                        Once your tokens are configured and working, navigate to the one of the map pages
                        to see the fully authenticated GeoBlazor map in action!
                    </p>
                    <ul>
                        <li>Automatic token refresh keeps your map sessions active</li>
                        <li>Secure server-side authentication protects your credentials</li>
                        <li>Seamless integration with ArcGIS Portal or ArcGIS Online</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] public required IConfiguration Configuration { get; set; }

    private string _currentConfig = "";

    protected override void OnInitialized()
    {
        // Build a safe, readable snapshot of relevant settings
        var configView = new
        {
            Logging = new
            {
                LogLevel = new
                {
                    Default = Configuration["Logging:LogLevel:Default"] ?? "Information",
                    MicrosoftAspNetCore = Configuration["Logging:LogLevel:Microsoft.AspNetCore"] ?? "Warning"
                }
            },
            ArcGISAppId = Configuration["ArcGISAppId"] ?? "(not set)",
            ArcGISClientSecret = Mask(Configuration["ArcGISClientSecret"]),
            ArcGISPortalUrl = Configuration["ArcGISPortalUrl"] ?? "(default: https://www.arcgis.com)",
            ArcGISAppTokenCacheFile = Configuration["ArcGISAppTokenCacheFile"] ?? "(not set)",
            ArcGISTokenExpirationMinutes = Configuration["ArcGISTokenExpirationMinutes"] ?? "1440",
            GeoBlazor = new
            {
                RegistrationKey = Mask(Configuration["GeoBlazor:RegistrationKey"])
            }
        };

        _currentConfig = System.Text.Json.JsonSerializer.Serialize(
        configView,
        new System.Text.Json.JsonSerializerOptions { WriteIndented = true }
        );
    }

    private static string? Mask(string? value, int keepLeft = 4, int keepRight = 2)
    {
        if (string.IsNullOrEmpty(value)) return value;
        if (value.Length <= keepLeft + keepRight) return new string('*', value.Length);
        return value.Substring(0, keepLeft) + new string('*', value.Length - keepLeft - keepRight) + value.Substring(value.Length - keepRight);
    }
}
