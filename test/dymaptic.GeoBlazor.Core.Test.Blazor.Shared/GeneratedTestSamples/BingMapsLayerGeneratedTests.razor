@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("temporibus")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("quia",
                            5422811.8384))"
                        MaxScale="@(36474223.7027)"
                        MinScale="@(12039.5059)"
                        RefreshInterval="@(901.2964)"
                        FullExtent="@(new Extent(64.6749,
                                -155.5422,
                                -35.8562,
                                -87.0184,
                                338.0627,
                                723.7473,
                                431.5621,
                                489.0664,
                            new SpatialReference(1,
                                    "reprehenderit",
                                    "culpa",
                                    "consequuntur"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.7255)"
                        PersistenceEnabled="@(true)"
                        Region="@("velit")"
                        Title="@("laudantium ipsa voluptates")"
                        VisibilityTimeExtent="@(new TimeExtent(new DateTime(2014, 4, 5, 21, 37, 16),
                                new DateTime(2018, 6, 11, 21, 51, 2)))">
                        <TileInfo 
                            Dpi="@(757.2730)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "molestiae",
                                    9.6277,
                                    4816852.6296),
                            new LOD(5,
                                    "in",
                                    48.1832,
                                    15541197.8597)])"
                            Origin="@(new Point(-101.3069,
                                    55.5727,
                                    14.3617,
                                    45.7805,
                                    969.9749,
                                new SpatialReference(5,
                                        "dolor",
                                        "voluptatem",
                                        "voluptas"),
                                    true,
                                    true,
                                    882.8205))"
                            Size="@([5])">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("corporis")"
                                Wkt="@("asperiores")"
                                Wkt2="@("necessitatibus")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(3)"
                            ImageCoordinateSystem="@("quia")"
                            Wkt="@("quo")"
                            Wkt2="@("eum")">
                        </SpatialReference>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Normal;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "non",
                    "id",
                    "exercitationem");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(440.0996,
                    TileInfoFormat.Tiff,
                [new LOD(5,
                        "eaque",
                        56.4565,
                        9138778.3526),
                new LOD(3,
                        "cumque",
                        62.8380,
                        33480485.6273)],
                new Point(42.1089,
                        1.5152,
                        -145.9968,
                        -70.2642,
                        896.7672,
                    new SpatialReference(3,
                            "sed",
                            "aut",
                            "laboriosam"),
                        true,
                        true,
                        890.9066),
                    [2],
                new SpatialReference(1,
                        "et",
                        "et",
                        "provident"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
    }
}
