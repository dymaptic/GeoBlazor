@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedPopupWidget(Action renderHandler)
    {
        PopupWidget? popupWidget = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <PopupWidget 
                    Actions="@([new ActionButton("voluptas excepturi quo",
                        "https://picsum.photos/640/480/?image=558",
                        "b5179b7f-8b33-4aae-01d8-08a5451d530d",
                        () => { Console.WriteLine("harum"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "excepturi")])"
                    Alignment="@(PopupAlignment.TopCenter)"
                    AutoCloseEnabled="@(true)"
                    DefaultPopupTemplateEnabled="@(true)"
                    DockEnabled="@(true)"
                    HeadingLevel="@(4)"
                    HighlightEnabled="@(true)"
                    Icon="@("dolorum")"
                    Label="@("asperiores")"
                    Promises="@("cupiditate")"
                    SelectedFeatureIndex="@(1)"
                    Title="@("quos expedita et")"
                    WidgetId="@("incidunt")">
                    <PopupVisibleElements 
                        CloseButton="@(true)"
                        FeatureNavigation="@(true)"
                        ActionBar="@(true)"
                        CollapseButton="@(true)"
                        FeatureListLayerTitle="@(true)"
                        Heading="@(true)"
                        Spinner="@(true)">
                    </PopupVisibleElements>
                    <PopupViewModel 
                        Actions="@([new ActionButton("laudantium dolorem quod",
                            "https://picsum.photos/640/480/?image=973",
                            "646310da-147f-0e04-1579-d3ba03277c13",
                            () => { Console.WriteLine("optio"); return Task.CompletedTask; },
                            "token",
                            true,
                            true,
                            true,
                            "voluptatem"),
                            new ActionButton("repellendus quia illum",
                                "https://picsum.photos/640/480/?image=884",
                                "d22c63bb-9d36-c320-51ec-baa7786cd00c",
                                () => { Console.WriteLine("tempora"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "id")])"
                        AutoCloseEnabled="@(true)"
                        BrowseClusterEnabled="@(true)"
                        DefaultPopupTemplateEnabled="@(true)"
                        FeaturesPerPage="@(1.3087)"
                        FeatureViewModelAbilities="@(new Abilities(true,
                                true,
                                true,
                                true,
                                true,
                                true))"
                        HighlightEnabled="@(true)"
                        IncludeDefaultActions="@(true)"
                        Promises="@("qui")"
                        SelectedFeatureIndex="@(1)"
                        SpatialReference="@(new SpatialReference(5,
                                "vero",
                                "modi",
                                "enim"))"
                        TimeZone="@("Asia/Kamchatka")"
                        Title="@("autem aut quaerat")">
                        <Point 
                            Longitude="@(142.8477)"
                            Latitude="@(3.7552)"
                            X="@(-112.8487)"
                            Y="@(-45.8941)"
                            Z="@(748.8199)"
                            HasM="@(true)"
                            HasZ="@(true)"
                            M="@(356.7758)">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("at")"
                                Wkt="@("eius")"
                                Wkt2="@("consequatur")">
                            </SpatialReference>
                        </Point>
                        <Graphic 
                            Geometry="@(new Extent(-158.7407,
                                    77.5790,
                                    -71.2034,
                                    18.8397,
                                    465.3247,
                                    30.2581,
                                    253.9006,
                                    239.4877,
                                new SpatialReference(9,
                                        "reiciendis",
                                        "quis",
                                        "molestias"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("et et sed",
                                new MapColor(215, 5, 43),
                                new MapColor(117, 158, 139),
                                    new Dimension(823.8885),
                                new MapFont(new Dimension(223.0166),
                                        "Garamond",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.Underline),
                                    369.4681,
                                new MapColor(178, 92, 66),
                                new MapColor(159, 154, 215),
                                    967.5796,
                                HorizontalAlignment.Left,
                                    true,
                                    156.8314,
                                    new Dimension(782.8336),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("sit maiores harum",
                                    "inventore",
                                    ["quia"],
                                [new FieldInfo("comment",
                                        "consequuntur",
                                        "iusto",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.DayShortMonthYearLongTime24),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("password",
                                        "nobis",
                                        "quo",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.LongMonthYear),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                [new FieldsPopupContent([new FieldInfo("password",
                                            "tempore",
                                            "est",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(3,
                                                true,
                                            DateFormat.ShortDateLeShortTime24),
                                            true,
                                            true,
                                        StatisticType.Sum),
                                    new FieldInfo("title",
                                            "et",
                                            "incidunt",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(6,
                                                true,
                                            DateFormat.ShortDateLeLongTime24),
                                            true,
                                            true,
                                        StatisticType.Min)],
                                        "corporis iste",
                                        "enim autem aut")],
                                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                        "avatar",
                                        "omnis aliquid quisquam",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "id",
                                        "reiciendis maiores provident",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("perferendis quos laudantium",
                                        "https://picsum.photos/640/480/?image=67",
                                        "e476b8dc-9341-8230-54d7-541d8a3346df",
                                        () => { Console.WriteLine("suscipit"); return Task.CompletedTask; },
                                        "createdAt",
                                        true,
                                        true,
                                        true,
                                        "quidem"),
                                        new ActionButton("voluptates doloremque quia",
                                            "https://picsum.photos/640/480/?image=588",
                                            "9b5324af-20bf-6c46-e48a-79b3a74adbbd",
                                            () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                            "status",
                                            true,
                                            true,
                                            true,
                                            "quod")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("nostrum")"
                            AggregateGeometries="@("non")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "in",
                                1))">
                        </Graphic>
                    </PopupViewModel>
                    <Point 
                        Longitude="@(-56.7908)"
                        Latitude="@(-70.5163)"
                        X="@(-35.6508)"
                        Y="@(77.0588)"
                        Z="@(922.1624)"
                        SpatialReference="@(new SpatialReference(9,
                                "labore",
                                "nihil",
                                "velit"))"
                        HasM="@(true)"
                        HasZ="@(true)"
                        M="@(172.7647)">
                    </Point>
                    <Graphic 
                        Geometry="@(new Extent(18.3032,
                                164.0519,
                                73.2987,
                                57.3635,
                                696.4296,
                                914.9310,
                                805.7701,
                                315.1661,
                            new SpatialReference(1,
                                    "libero",
                                    "quis",
                                    "consectetur"),
                                true,
                                true))"
                        Symbol="@(new TextSymbol("consequuntur et omnis",
                            new MapColor(235, 159, 82),
                            new MapColor(213, 254, 155),
                                new Dimension(553.3506),
                            new MapFont(new Dimension(929.7060),
                                    "Bookman",
                                MapFontStyle.Normal,
                                FontWeight.Normal,
                                TextDecoration.None),
                                468.6407,
                            new MapColor(23, 231, 45),
                            new MapColor(174, 188, 129),
                                84.5892,
                            HorizontalAlignment.Center,
                                true,
                                336.7356,
                                new Dimension(389.4141),
                                true))"
                        PopupTemplate="@(new PopupTemplate("quos aut qui",
                                "ut",
                                ["aut",
                                    "et"],
                            [new FieldInfo("token",
                                    "fugiat",
                                    "consequatur",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("password",
                                    "eaque",
                                    "id",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateShortTime),
                                    true,
                                    true,
                                StatisticType.Stddev)],
                            [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                        "et",
                                        "ab vel sed"))],
                            [new ExpressionInfo("return Date();",
                                    "email",
                                    "similique amet ullam",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("officia assumenda velit",
                                    "https://picsum.photos/640/480/?image=935",
                                    "2ce4fcb9-6347-3bff-3f62-bbc3283a46f9",
                                    () => { Console.WriteLine("harum"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "illo"),
                                    new ActionButton("natus omnis est",
                                        "https://picsum.photos/640/480/?image=532",
                                        "48e2e15d-5dbe-87cb-4a43-46152253e5d7",
                                        () => { Console.WriteLine("laborum"); return Task.CompletedTask; },
                                        "phone",
                                        true,
                                        true,
                                        true,
                                        "non")]))"
                        Attributes="@(new AttributesDictionary())"
                        Visible="@(true)"
                        LegendLabel="@("ut")"
                        AggregateGeometries="@("at")"
                        Origin="@(new GraphicOrigin(Guid.NewGuid(),
                            "nemo",
                            4))">
                    </Graphic>
                    <PopupDockOptions 
                        Position="@(PopupDockPosition.Auto)"
                        ButtonEnabled="@(true)"
                        BreakPoint="@(new BreakPoint(193.8676,
                            207.5524))"
                        BoolBreakpoint="@(true)"
                        PopupDockOptionsBreakpoint="@(new PopupDockOptionsBreakpoint(7,
                                3))">
                    </PopupDockOptions>
                </PopupWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(popupWidget!);
        await AssertJavaScript("assertWidgetExists", args: "popup");
        await popupWidget.Blur();
        await popupWidget.Focus();
        var nextMethodResult = await popupWidget.Next();
        Assert.IsNotNull(nextMethodResult);
        await popupWidget.Open(new PopupOpenOptions(true,
                    default,
                    true,
                [new Graphic(new Point(58.1719,
                            67.4363,
                            104.2218,
                            50.5081,
                            53.8859,
                        new SpatialReference(5,
                                "quis",
                                "dolores",
                                "delectus"),
                            true,
                            true,
                            684.3033),
                    new TextSymbol("sint hic porro",
                        new MapColor(213, 43, 79),
                        new MapColor(173, 135, 236),
                            new Dimension(949.6464),
                        new MapFont(new Dimension(948.8533),
                                "Bookman",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            162.3135,
                        new MapColor(113, 63, 51),
                        new MapColor(110, 221, 202),
                            519.8530,
                        HorizontalAlignment.Right,
                            true,
                            671.1035,
                            new Dimension(153.3666),
                            true),
                    new PopupTemplate("iste in veritatis",
                            "sunt",
                            ["qui",
                                "error"],
                        [new FieldInfo("token",
                                "et",
                                "nesciunt",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.DayShortMonthYearLongTime),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("createdAt",
                                "delectus",
                                "iusto",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongDateShortTime24),
                                true,
                                true,
                            StatisticType.Max)],
                        [new FieldsPopupContent([new FieldInfo("name",
                                    "perspiciatis",
                                    "molestiae",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.LongDateShortTime),
                                    true,
                                    true,
                                StatisticType.Min)],
                                "officiis molestiae",
                                "aut saepe sequi"),
                        new FieldsPopupContent([new FieldInfo("name",
                                    "sed",
                                    "ea",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "fugiat possimus",
                                "est minima quibusdam")],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "token",
                                "unde dolor vitae",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("et praesentium rem",
                                "https://picsum.photos/640/480/?image=692",
                                "3d3bae9e-b51e-c4a3-f19c-d7602e7a6de8",
                                () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "dolor"),
                                new ActionButton("voluptatum at voluptatum",
                                    "https://picsum.photos/640/480/?image=23",
                                    "77ac3f05-e3c1-b71f-76c9-d750b798d82c",
                                    () => { Console.WriteLine("sequi"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "officiis")]),
                        new AttributesDictionary(),
                        true,
                        "distinctio",
                        "aut",
                        new GraphicOrigin(Guid.NewGuid(),
                            "neque",
                            8)),
                new Graphic(new Polygon([new MapPath([new MapPoint([957.8869]),
                            new MapPoint([422.5508])]),
                            new MapPath([new MapPoint([672.0413])])],
                        new SpatialReference(7,
                                "quo",
                                "magni",
                                "natus"),
                        new Point(42.0658,
                                -77.1931,
                                -97.0775,
                                -77.7942,
                                936.6445,
                            new SpatialReference(1,
                                    "autem",
                                    "explicabo",
                                    "et"),
                                true,
                                true,
                                126.9125),
                            true,
                            true,
                            true),
                    new TextSymbol("laudantium ullam repellat",
                        new MapColor(153, 217, 248),
                        new MapColor(91, 206, 125),
                            new Dimension(187.1584),
                        new MapFont(new Dimension(21.4481),
                                "Palatino",
                            MapFontStyle.Italic,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            533.4952,
                        new MapColor(161, 236, 235),
                        new MapColor(62, 157, 217),
                            814.9845,
                        HorizontalAlignment.Left,
                            true,
                            664.6483,
                            new Dimension(383.2925),
                            true),
                    new PopupTemplate("et qui recusandae",
                            "tenetur",
                            ["tenetur",
                                "et"],
                        [new FieldInfo("status",
                                "et",
                                "est",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("phone",
                                "hic",
                                "provident",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongDateLongTime24),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new AttachmentsPopupContent("nemo officia odit",
                                "veritatis eaque dolores",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "email",
                                "dolorem modi iure",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "password",
                                "at in ducimus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("ipsum sequi corrupti",
                                "https://picsum.photos/640/480/?image=590",
                                "68c83bc9-754f-3eaf-c8b2-537a31e42cd3",
                                () => { Console.WriteLine("ex"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "dolorum")]),
                        new AttributesDictionary(),
                        true,
                        "error",
                        "illum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "saepe",
                            5))],
                    true,
                new Point(80.3112,
                        65.2622,
                        -3.4053,
                        13.1125,
                        719.8978,
                    new SpatialReference(6,
                            "ut",
                            "excepturi",
                            "suscipit"),
                        true,
                        true,
                        569.7334),
                    "quos",
                    true,
                    "inventore",
                    "est et quae",
                    true));
        var previousMethodResult = await popupWidget.Previous();
        Assert.IsNotNull(previousMethodResult);
        await popupWidget.Reposition();
        await popupWidget.TriggerAction(1);
        PopupDockOptions testDockOptions = new PopupDockOptions(PopupDockPosition.Auto,
                    true,
                    new BreakPoint(162.5708,
                        161.0399),
                    true,
                new PopupDockOptionsBreakpoint(7,
                        9));
        await popupWidget.SetDockOptions(testDockOptions);
        var dockOptions = await popupWidget.GetDockOptions();
        Assert.AreEqual(testDockOptions, dockOptions);
        IReadOnlyList<Graphic> testFeatures = [new Graphic(new Extent(62.4216,
                        -111.0304,
                        -55.0433,
                        7.5880,
                        225.1937,
                        950.5311,
                        221.0781,
                        421.7341,
                    new SpatialReference(2,
                            "fugit",
                            "ullam",
                            "hic"),
                        true,
                        true),
                new TextSymbol("magni ratione ut",
                    new MapColor(252, 86, 151),
                    new MapColor(185, 73, 143),
                        new Dimension(841.0226),
                    new MapFont(new Dimension(455.1343),
                            "Garamond",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.None),
                        498.2546,
                    new MapColor(213, 215, 92),
                    new MapColor(121, 167, 18),
                        835.5103,
                    HorizontalAlignment.Right,
                        true,
                        929.5409,
                        new Dimension(25.2842),
                        true),
                new PopupTemplate("reprehenderit enim deleniti",
                        "voluptatem",
                        ["non",
                            "assumenda"],
                    [new FieldInfo("title",
                            "placeat",
                            "consequatur",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.LongMonthDayYearShortTime24),
                            true,
                            true,
                        StatisticType.Avg)],
                    [new MediaPopupContent("amet sapiente non",
                            "voluptatum delectus et aut",
                        [new PieChartMediaInfo("aperiam nostrum nihil",
                                "et",
                                "minima sit qui",
                            new ChartMediaInfoValue(["aliquam"],
                                    "voluptate",
                                    "numquam",
                                [new ChartMediaInfoValueSeries("status",
                                        "est",
                                        745.3533),
                                new ChartMediaInfoValueSeries("title",
                                        "corporis",
                                        42.2959)],
                                [new MapColor(45, 210, 182),
                                new MapColor(16, 215, 114)])),
                        new LineChartMediaInfo("incidunt tempora dolores",
                                "ut",
                                "mollitia ut quibusdam",
                            new ChartMediaInfoValue(["a"],
                                    "voluptatem",
                                    "voluptate",
                                [new ChartMediaInfoValueSeries("email",
                                        "quae",
                                        202.4202),
                                new ChartMediaInfoValueSeries("title",
                                        "quia",
                                        811.1105)],
                                [new MapColor(234, 218, 228)]))],
                            2)],
                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "avatar",
                            "magni amet ipsam",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("id odio ut",
                            "https://picsum.photos/640/480/?image=830",
                            "a282d940-bc61-389c-fe28-331cb6a6f2bf",
                            () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                            "updatedAt",
                            true,
                            true,
                            true,
                            "est")]),
                    new AttributesDictionary(),
                    true,
                    "quod",
                    "distinctio",
                    new GraphicOrigin(Guid.NewGuid(),
                        "explicabo",
                        5))];
        await popupWidget.SetFeatures(testFeatures);
        var features = await popupWidget.GetFeatures();
        Assert.AreEqual(testFeatures, features);
        Point testLocation = new Point(-172.1886,
                    35.6893,
                    148.6040,
                    -22.1292,
                    574.6650,
                new SpatialReference(2,
                        "alias",
                        "ducimus",
                        "similique"),
                    true,
                    true,
                    878.8002);
        await popupWidget.SetLocation(testLocation);
        var location = await popupWidget.GetLocation();
        Assert.AreEqual(testLocation, location);
        PopupViewModel testViewModel = new PopupViewModel([new ActionButton("velit nostrum illum",
                    "https://picsum.photos/640/480/?image=582",
                    "2f421a70-261d-cca3-8bb4-211dce24ad91",
                    () => { Console.WriteLine("illum"); return Task.CompletedTask; },
                    "email",
                    true,
                    true,
                    true,
                    "et")],
                    true,
                    true,
                    true,
                [new Graphic(new Polygon([new MapPath([new MapPoint([701.0732]),
                            new MapPoint([10.4191])]),
                            new MapPath([new MapPoint([982.2388])])],
                        new SpatialReference(2,
                                "quia",
                                "ea",
                                "officiis"),
                        new Point(3.6093,
                                -6.6676,
                                20.5101,
                                77.8106,
                                252.2037,
                            new SpatialReference(2,
                                    "dolorem",
                                    "esse",
                                    "quia"),
                                true,
                                true,
                                198.3187),
                            true,
                            true,
                            true),
                    new TextSymbol("aliquid nobis quia",
                        new MapColor(117, 243, 207),
                        new MapColor(236, 104, 158),
                            new Dimension(747.6413),
                        new MapFont(new Dimension(132.5607),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            598.4305,
                        new MapColor(254, 246, 73),
                        new MapColor(166, 237, 57),
                            936.0386,
                        HorizontalAlignment.Right,
                            true,
                            715.2896,
                            new Dimension(855.5738),
                            true),
                    new PopupTemplate("expedita nam minima",
                            "rerum",
                            ["dicta",
                                "dolores"],
                        [new FieldInfo("category",
                                "rem",
                                "tenetur",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Var)],
                        [new FieldsPopupContent([new FieldInfo("id",
                                    "iure",
                                    "et",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Var)],
                                "omnis quisquam",
                                "maiores quia est"),
                        new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "laudantium",
                                    "blanditiis ratione quia"))],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "updatedAt",
                                "magni et eaque",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("eum qui optio",
                                "https://picsum.photos/640/480/?image=159",
                                "9d86aa9f-4644-984b-71e3-2510feabde93",
                                () => { Console.WriteLine("quo"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "ea"),
                                new ActionButton("cupiditate porro labore",
                                    "https://picsum.photos/640/480/?image=590",
                                    "76ced6ad-a7c2-f24e-2c65-29bae08bb62b",
                                    () => { Console.WriteLine("delectus"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "soluta")]),
                        new AttributesDictionary(),
                        true,
                        "ipsum",
                        "distinctio",
                        new GraphicOrigin(Guid.NewGuid(),
                            "perferendis",
                            7))],
                    969.8634,
                new Abilities(true,
                        true,
                        true,
                        true,
                        true,
                        true),
                null,
                    true,
                    true,
                new Point(-59.4387,
                        20.5042,
                        -88.0247,
                        52.6301,
                        432.1025,
                    new SpatialReference(9,
                            "sunt",
                            "illum",
                            "aspernatur"),
                        true,
                        true,
                        313.2515),
                    "quibusdam",
                    1,
                new SpatialReference(3,
                        "recusandae",
                        "accusantium",
                        "velit"));
        await popupWidget.SetViewModel(testViewModel);
        var viewModel = await popupWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
        PopupVisibleElements testVisibleElements = new PopupVisibleElements(true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true);
        await popupWidget.SetVisibleElements(testVisibleElements);
        var visibleElements = await popupWidget.GetVisibleElements();
        Assert.AreEqual(testVisibleElements, visibleElements);
    }
}
