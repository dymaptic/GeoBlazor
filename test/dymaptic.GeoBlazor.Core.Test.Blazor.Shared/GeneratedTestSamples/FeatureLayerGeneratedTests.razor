@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureLayer(Action renderHandler)
    {
        FeatureLayer? featureLayer = null;

        FeatureLayerEditsEvent? editsResult = null;
        void OnEdits(FeatureLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <FeatureLayer 
                        Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")"
                        OutFields="@(["qui"])"
                        DefinitionExpression="@("alias")"
                        MinScale="@(49828.2082)"
                        MaxScale="@(28957332.6597)"
                        ObjectIdField="@("odit")"
                        GeometryType="@(FeatureGeometryType.Polygon)"
                        Title="@("enim culpa explicabo")"
                        Opacity="@(0.3056)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        ApiKey="@("reprehenderit")"
                        BlendMode="@(BlendMode.Reflect)"
                        Charts="@(["eum",
                            "fugiat"])"
                        Copyright="@("nulla")"
                        DateFieldsTimeZone="@("perspiciatis")"
                        DisplayField="@("non")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("perspiciatis",
                            37138843.3795))"
                        GdbVersion="@("2.4.0.8")"
                        HasM="@(true)"
                        HasZ="@(true)"
                        HistoricMoment="@(new DateTime(2003, 7, 16, 10, 4, 3))"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(531.8278)"
                        ReturnM="@(true)"
                        ReturnZ="@(true)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        TypeIdField="@("delectus")"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(885.0202)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("quod")"
                            EndField="@("qui")"
                            Stops="@([new DateTime(2020, 6, 11, 17, 43, 33),
                                new DateTime(2005, 9, 7, 16, 17, 58)])"
                            TimeZone="@("America/Chihuahua")"
                            TrackIdField="@("et")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(145.5848)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2022, 3, 15, 19, 24, 12))"
                                End="@(new DateTime(2007, 8, 3, 5, 22, 35))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2015, 7, 23, 18, 56, 49))"
                            End="@(new DateTime(2018, 7, 11, 10, 2, 7))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(9)"
                            ImageCoordinateSystem="@("aperiam")"
                            Wkt="@("dicta")"
                            Wkt2="@("magnam")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Extent(79.6787,
                                    -77.4197,
                                    -84.3847,
                                    -40.1219,
                                    653.3713,
                                    640.0508,
                                    295.8797,
                                    809.4105,
                                new SpatialReference(2,
                                        "alias",
                                        "corporis",
                                        "vitae"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("alias earum explicabo",
                                new MapColor(100, 77, 106),
                                new MapColor(98, 20, 22),
                                    new Dimension(349.5122),
                                new MapFont(new Dimension(623.8480),
                                        "Times New Roman",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.None),
                                    737.5424,
                                new MapColor(184, 37, 143),
                                new MapColor(64, 241, 45),
                                    904.9520,
                                HorizontalAlignment.Center,
                                    true,
                                    159.4070,
                                    new Dimension(863.8816),
                                    true))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("expedita")"
                            AggregateGeometries="@("dolorum")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "consequatur",
                                3))">
                            <PopupTemplate 
                                Title="@("consectetur et ipsa")"
                                StringContent="@("iste")"
                                OutFields="@(["voluptates",
                                    "qui"])"
                                FieldInfos="@([new FieldInfo("category",
                                        "earum",
                                        "atque",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongDateLongTime),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("group",
                                        "voluptatem",
                                        "sit",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Avg)])"
                                Content="@([new MediaPopupContent("repellat totam labore",
                                        "sed ipsum et rerum",
                                    [new LineChartMediaInfo("suscipit molestias reiciendis",
                                            "quaerat",
                                            "est et ut",
                                        new ChartMediaInfoValue(["aut",
                                                "quas"],
                                                "ea",
                                                "omnis",
                                            [new ChartMediaInfoValueSeries("category",
                                                    "possimus",
                                                    216.6850),
                                            new ChartMediaInfoValueSeries("password",
                                                    "nisi",
                                                    144.2227)],
                                            [new MapColor(85, 52, 90)]))],
                                        8)])"
                                ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                        "status",
                                        "doloremque nostrum sit",
                                        ExpressionInfoReturnType.String)])"
                                OverwriteActions="@(true)"
                                ReturnGeometry="@(true)"
                                Actions="@([new ActionButton("sed saepe non",
                                    "https://picsum.photos/640/480/?image=108",
                                    "7e588746-5518-12fd-3b7b-4f28b972dfcc",
                                    () => { Console.WriteLine("eaque"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "perspiciatis"),
                                    new ActionButton("ea sapiente nisi",
                                        "https://picsum.photos/640/480/?image=126",
                                        "6f9c1f7b-24cb-fee5-1d15-c52570a530fa",
                                        () => { Console.WriteLine("aperiam"); return Task.CompletedTask; },
                                        "email",
                                        true,
                                        true,
                                        true,
                                        "et")])">
                            </PopupTemplate>
                        </Graphic>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                    new MapColor(113, 225, 141),
                                    new MapColor(128, 144, 61)),
                                    812.1084,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(812.9685,
                                            297.5946),
                                    new AuthoringInfoField1ClassBreakInfos(665.0313,
                                            129.6802)],
                                        "amet",
                                        "cumque",
                                        "distinctio"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(874.8075,
                                            162.5421)],
                                        "vel",
                                        "est",
                                        "nulla"),
                                    ["sequi",
                                        "et"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "repudiandae",
                                    true,
                                LengthUnit.Feet,
                                    777.7194,
                                    380.6840,
                                    188.6188,
                                    268.1052))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("enim officiis corrupti")"
                            StringContent="@("voluptatum")"
                            OutFields="@(["voluptatibus",
                                "doloribus"])"
                            FieldInfos="@([new FieldInfo("name",
                                    "dolor",
                                    "odit",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("id",
                                    "consequatur",
                                    "veritatis",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "eaque",
                                        "odit voluptas voluptatum")),
                            new AttachmentsPopupContent("possimus aliquid reiciendis",
                                    "hic dolore id",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "title",
                                    "dolorum ipsum aspernatur",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "id",
                                    "non est consequuntur",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("minima blanditiis praesentium",
                                "https://picsum.photos/640/480/?image=861",
                                "c11ee862-b936-4aac-5fea-e881b75480e1",
                                () => { Console.WriteLine("architecto"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "omnis"),
                                new ActionButton("eius et ullam",
                                    "https://picsum.photos/640/480/?image=955",
                                    "ebdb4484-b8b6-8f09-f289-b0355f2fc649",
                                    () => { Console.WriteLine("neque"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "doloremque")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("ea")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("dolores")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowRight)"
                            LabelExpression="@("aliquid")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(26805302.6986)"
                            MinScale="@(36623.6572)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(664.3445))"
                            Symbol="@(new TextSymbol("harum ut rerum",
                                new MapColor(32, 104, 190),
                                new MapColor(176, 92, 194),
                                    new Dimension(294.7750),
                                new MapFont(new Dimension(753.1560),
                                        "Times New Roman",
                                    MapFontStyle.Italic,
                                    FontWeight.Lighter,
                                    TextDecoration.LineThrough),
                                    235.2510,
                                new MapColor(223, 41, 43),
                                new MapColor(155, 160, 107),
                                    665.2203,
                                HorizontalAlignment.Left,
                                    true,
                                    988.5845,
                                    new Dimension(752.5096),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Name = 'John Doe'")">
                        </Label>
                        <Extent 
                            Xmax="@(9.9103)"
                            Xmin="@(138.4640)"
                            Ymax="@(89.3508)"
                            Ymin="@(78.0675)"
                            Zmax="@(737.1735)"
                            Zmin="@(894.9659)"
                            Mmax="@(887.5462)"
                            Mmin="@(72.2279)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("ad")"
                                Wkt="@("mollitia")"
                                Wkt2="@("eaque")">
                            </SpatialReference>
                        </Extent>
                        <LayerFloorInfo 
                            FloorField="@("quisquam")">
                        </LayerFloorInfo>
                        <Field 
                            Name="@("updatedAt")"
                            Alias="@("ipsam")"
                            Description="@("ratione eius repellat occaecati")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "dicta" })"
                            ValueType="@(FieldValueType.CountOrAmount)"
                            Domain="@(new InheritedDomain("phone"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("sint",
                                22200102.9316),
                                new Effect("odit",
                                    12477704.5475)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(70.6987,
                                new Point(173.7396,
                                        -46.2114,
                                        -36.8891,
                                        14.1875,
                                        314.4275,
                                    new SpatialReference(5,
                                            "quasi",
                                            "et",
                                            "suscipit"),
                                        true,
                                        true,
                                        307.2941),
                                    [8],
                                SpatialRelationship.EnvelopeIntersects,
                                new TimeExtent(new DateTime(2007, 5, 7, 18, 41, 39),
                                        new DateTime(2002, 7, 22, 6, 44, 1)),
                                    QueryUnits.Miles,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([new Effect("inventore",
                                1916321.9577)])">
                        </FeatureEffect>
                        <FeatureLayerBaseElevationInfo 
                            FeatureExpressionInfo="@(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "nihil asperiores numquam"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(574.8355)"
                            Unit="@(ElevationUnit.Yards)">
                        </FeatureLayerBaseElevationInfo>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureLayer!);
        await AssertJavaScript("dispatchEvent", args: [featureLayer.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [featureLayer.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<FeatureLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "feature");
        var addAttachmentMethodResult = await featureLayer.AddAttachment(new Graphic(new Extent(129.4021,
                        98.1734,
                        30.0691,
                        67.8538,
                        489.6779,
                        638.4196,
                        966.1444,
                        453.5809,
                    new SpatialReference(3,
                            "enim",
                            "quidem",
                            "ut"),
                        true,
                        true),
                new TextSymbol("quidem quia quasi",
                    new MapColor(83, 229, 207),
                    new MapColor(40, 179, 121),
                        new Dimension(435.9172),
                    new MapFont(new Dimension(667.9873),
                            "Garamond",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        287.9273,
                    new MapColor(151, 125, 116),
                    new MapColor(47, 249, 243),
                        538.0253,
                    HorizontalAlignment.Right,
                        true,
                        614.9088,
                        new Dimension(705.9294),
                        true),
                new PopupTemplate("consectetur id dicta",
                        "maiores",
                        ["beatae",
                            "assumenda"],
                    [new FieldInfo("status",
                            "aut",
                            "blanditiis",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLeLongTime),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                "iste",
                                "quos rerum cumque"))],
                    [new ExpressionInfo("return $feature.Name;",
                            "password",
                            "aliquam a dolorem",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("exercitationem sit nulla",
                            "https://picsum.photos/640/480/?image=363",
                            "0f393317-b9bb-87c6-bfc4-6d68aea70820",
                            () => { Console.WriteLine("odio"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "quasi")]),
                    new AttributesDictionary(),
                    true,
                    "asperiores",
                    "porro",
                    new GraphicOrigin(Guid.NewGuid(),
                        "et",
                        3)),
                default);
        Assert.IsNotNull(addAttachmentMethodResult);
        var deleteAttachmentsMethodResult = await featureLayer.DeleteAttachments(new Graphic(new Extent(63.6332,
                        43.3671,
                        -47.5974,
                        84.9685,
                        232.3176,
                        232.5162,
                        719.7814,
                        351.8758,
                    new SpatialReference(5,
                            "cum",
                            "ad",
                            "cum"),
                        true,
                        true),
                new TextSymbol("facere omnis quis",
                    new MapColor(34, 161, 41),
                    new MapColor(76, 150, 60),
                        new Dimension(63.8666),
                    new MapFont(new Dimension(668.6590),
                            "Palatino",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        197.6223,
                    new MapColor(216, 128, 91),
                    new MapColor(46, 111, 160),
                        141.5579,
                    HorizontalAlignment.Center,
                        true,
                        761.7555,
                        new Dimension(141.1269),
                        true),
                new PopupTemplate("eum ut atque",
                        "nostrum",
                        ["illum",
                            "ducimus"],
                    [new FieldInfo("token",
                            "ea",
                            "quam",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateShortTime),
                            true,
                            true,
                        StatisticType.Var),
                    new FieldInfo("password",
                            "ut",
                            "sunt",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.LongMonthDayYearShortTime24),
                            true,
                            true,
                        StatisticType.Var)],
                    [new AttachmentsPopupContent("dignissimos molestiae autem",
                            "iste sapiente est",
                            AttachmentsPopupContentDisplayType.Preview)],
                    [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "email",
                            "magnam ipsum nam",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Name;",
                            "status",
                            "sed aut qui",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("dolore distinctio provident",
                            "https://picsum.photos/640/480/?image=355",
                            "f4412e94-7cfa-121e-5503-cac8bbc5941f",
                            () => { Console.WriteLine("et"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "veritatis")]),
                    new AttributesDictionary(),
                    true,
                    "aliquam",
                    "quo",
                    new GraphicOrigin(Guid.NewGuid(),
                        "et",
                        7)),
                [9,
                    5]);
        Assert.IsNotNull(deleteAttachmentsMethodResult);
        var queryAttachmentsMethodResult = await featureLayer.QueryAttachments(new AttachmentQuery("sit",
                    ["quis"],
                    true,
                    [9,
                        8],
                    ["voluptatibus"],
                    "createdAt",
                    427.4415,
                    [5,
                        5],
                    true,
                    [2,
                        7],
                    959.2949,
                    "Name = 'John Doe'"),
                default);
        Assert.IsNotNull(queryAttachmentsMethodResult);
        var saveMethodResult = await featureLayer.Save(new FeatureLayerBaseSaveOptions(new FeatureLayerBaseSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await featureLayer.SaveAs(new PortalItem(),
            new FeatureLayerBaseSaveAsOptions(new PortalFolder(new DateTime(2010, 3, 27, 9, 22, 22),
                        "ea",
                        "maxime nostrum est"),
                new FeatureLayerBaseSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        var updateAttachmentMethodResult = await featureLayer.UpdateAttachment(new Graphic(new Polygon([new MapPath([new MapPoint([135.3344]),
                        new MapPoint([220.7812,
                            90.7846])])],
                    new SpatialReference(9,
                            "et",
                            "fugiat",
                            "fugit"),
                    new Point(20.3584,
                            -53.1108,
                            -87.0601,
                            -9.2073,
                            216.1816,
                        new SpatialReference(1,
                                "perferendis",
                                "qui",
                                "maiores"),
                            true,
                            true,
                            445.5772),
                        true,
                        true,
                        true),
                new TextSymbol("voluptatem porro voluptatibus",
                    new MapColor(0, 242, 34),
                    new MapColor(191, 3, 109),
                        new Dimension(560.5368),
                    new MapFont(new Dimension(308.4514),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        925.0038,
                    new MapColor(221, 176, 2),
                    new MapColor(90, 227, 77),
                        34.0237,
                    HorizontalAlignment.Left,
                        true,
                        888.4228,
                        new Dimension(792.9310),
                        true),
                new PopupTemplate("et libero temporibus",
                        "nihil",
                        ["sapiente"],
                    [new FieldInfo("createdAt",
                            "sapiente",
                            "ut",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateShortTime24),
                            true,
                            true,
                        StatisticType.Var)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "laudantium",
                                "aut aut est")),
                    new TextPopupContent("voluptas quo quo")],
                    [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "avatar",
                            "sed a quo",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "avatar",
                            "odit facere similique",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("quia dolorem deleniti",
                            "https://picsum.photos/640/480/?image=103",
                            "f9f7484e-5d9c-087f-d69f-6d009cd6709a",
                            () => { Console.WriteLine("cupiditate"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "sed"),
                            new ActionButton("excepturi reprehenderit ad",
                                "https://picsum.photos/640/480/?image=818",
                                "8aa5a590-e121-c916-9444-42125ca01a85",
                                () => { Console.WriteLine("cumque"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "sit")]),
                    new AttributesDictionary(),
                    true,
                    "voluptatem",
                    "distinctio",
                    new GraphicOrigin(Guid.NewGuid(),
                        "mollitia",
                        5)),
                1,
                default);
        Assert.IsNotNull(updateAttachmentMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await featureLayer.SetPortalItem(testPortalItem);
        var portalItem = await featureLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        ListMode testListMode = ListMode.Hide;
        await featureLayer.SetListMode(testListMode);
        var listMode = await featureLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await featureLayer.SetBlendMode(testBlendMode);
        var blendMode = await featureLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FeatureLayerBaseElevationInfo testElevationInfo = new FeatureLayerBaseElevationInfo(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "est reiciendis velit"),
                ElevationInfoMode.OnTheGround,
                    723.6649,
                ElevationUnit.Millimeters);
        await featureLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await featureLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("rerum",
                    43667529.8614)],
                    true,
                new FeatureFilter(891.7684,
                    new Point(150.9739,
                            -51.7467,
                            -52.0154,
                            -84.4006,
                            410.6629,
                        new SpatialReference(5,
                                "est",
                                "officia",
                                "et"),
                            true,
                            true,
                            947.2551),
                        [7,
                            6],
                    SpatialRelationship.Touches,
                    new TimeExtent(new DateTime(2014, 7, 17, 4, 30, 5),
                            new DateTime(2010, 3, 17, 7, 5, 19)),
                        QueryUnits.Feet,
                        "Age > 21"),
                    [new Effect("est",
                        45368652.6352)]);
        await featureLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await featureLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "comment",
                    "pariatur",
                    "vel exercitationem ducimus nostrum",
                    8,
                    true,
                    true,
                    new { Value = "qui" },
                FieldValueType.CountOrAmount,
                new InheritedDomain("email")),
            new Field(default,
                    "avatar",
                    "voluptatem",
                    "natus ipsam",
                    6,
                    true,
                    true,
                    new { Value = "explicabo" },
                FieldValueType.DateAndTime,
                new RangeDomain("beatae",
                        "nihil",
                        "password"))];
        await featureLayer.SetFields(testFields);
        var fields = await featureLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        LayerFloorInfo testFloorInfo = new LayerFloorInfo("numquam");
        await featureLayer.SetFloorInfo(testFloorInfo);
        var floorInfo = await featureLayer.GetFloorInfo();
        Assert.AreEqual(testFloorInfo, floorInfo);
        Extent testFullExtent = new Extent(-178.6670,
                    49.0151,
                    -81.5414,
                    -5.6940,
                    945.1165,
                    130.5857,
                    542.2782,
                    512.8385,
                new SpatialReference(9,
                        "aliquam",
                        "quis",
                        "adipisci"),
                    true,
                    true);
        await featureLayer.SetFullExtent(testFullExtent);
        var fullExtent = await featureLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterBefore,
                    "consequatur",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    38041708.2375,
                    38409.8727,
                    true,
                    new Dimension(223.7517),
                new TextSymbol("eos ut molestiae",
                    new MapColor(224, 8, 131),
                    new MapColor(119, 85, 5),
                        new Dimension(833.4564),
                    new MapFont(new Dimension(127.5942),
                            "Helvetica",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        690.9317,
                    new MapColor(209, 181, 135),
                    new MapColor(238, 114, 20),
                        817.7049,
                    HorizontalAlignment.Center,
                        true,
                        349.6708,
                        new Dimension(7.0757),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.CenterCenter,
                    "dignissimos",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    11404281.5524,
                    15500.8056,
                    true,
                    new Dimension(982.2715),
                new TextSymbol("necessitatibus eos voluptatibus",
                    new MapColor(3, 131, 122),
                    new MapColor(144, 162, 58),
                        new Dimension(888.5280),
                    new MapFont(new Dimension(774.2468),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        22.7621,
                    new MapColor(192, 71, 160),
                    new MapColor(0, 254, 103),
                        872.6249,
                    HorizontalAlignment.Left,
                        true,
                        795.7946,
                        new Dimension(469.0196),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'")];
        await featureLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await featureLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("aliquam",
                SortOrder.Descending,
                    "est"),
            new OrderedLayerOrderBy("quis",
                SortOrder.Descending,
                    "repellat")];
        await featureLayer.SetOrderBy(testOrderBy);
        var orderBy = await featureLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.Manual,
                    new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(54, 18, 36),
                        new MapColor(87, 73, 164)),
                        170.5266,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(41.3973,
                                980.4436)],
                            "ab",
                            "laborum",
                            "reprehenderit"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(335.1744,
                                657.2915),
                        new AuthoringInfoField1ClassBreakInfos(690.1859,
                                103.4135)],
                            "eligendi",
                            "velit",
                            "culpa"),
                        ["illum"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "dolor",
                        true,
                    LengthUnit.Miles,
                        443.1315,
                        455.1111,
                        226.8418,
                        351.7927),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0",
                    new Dimension(432.9810),
                    new Dimension(136.8295),
                    new Dimension(497.8587),
                    new Dimension(9.2837),
                    93.4024,
                    -63.0631,
                    new Outline(new MapColor(126, 249, 208),
                        new Dimension(206.1985),
                        SimpleLineSymbolStyle.None,
                        Cap.Butt,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(111, 82, 111),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Arrow),
                        283.2200),
                    new MapColor(23, 172, 132)),
                    "debitis",
                    new SimpleMarkerSymbol(),
                    "beatae",
                    "sit",
                    "qui",
                    "eaque",
                new UniqueValueRendererLegendOptions("aut impedit alias"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("beatae",
                        new TextSymbol("sunt pariatur est",
                            new MapColor(7, 211, 108),
                            new MapColor(28, 134, 78),
                                new Dimension(683.5835),
                            new MapFont(new Dimension(981.7745),
                                    "Georgia",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                958.1739,
                            new MapColor(204, 13, 18),
                            new MapColor(200, 132, 108),
                                980.6636,
                            HorizontalAlignment.Left,
                                true,
                                781.9782,
                                new Dimension(831.8019),
                                true),
                        [new UniqueValue("odit",
                                "fugiat",
                                "inventore")]),
                    new UniqueValueClass("natus",
                        new TextSymbol("minima recusandae ut",
                            new MapColor(88, 253, 185),
                            new MapColor(142, 161, 111),
                                new Dimension(70.3000),
                            new MapFont(new Dimension(769.9010),
                                    "Times New Roman",
                                MapFontStyle.Normal,
                                FontWeight.Bold,
                                TextDecoration.None),
                                812.5070,
                            new MapColor(175, 122, 231),
                            new MapColor(37, 72, 149),
                                339.8329,
                            HorizontalAlignment.Left,
                                true,
                                841.9754,
                                new Dimension(623.1985),
                                true),
                        [new UniqueValue("dignissimos",
                                "et",
                                "quibusdam"),
                        new UniqueValue("sed",
                                "fugiat",
                                "deserunt")])],
                        "distinctio")],
                [new UniqueValueInfo("autem",
                    new TextSymbol("magnam ratione rerum",
                        new MapColor(187, 176, 113),
                        new MapColor(162, 151, 130),
                            new Dimension(314.4578),
                        new MapFont(new Dimension(285.9383),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            293.9163,
                        new MapColor(248, 203, 137),
                        new MapColor(97, 71, 203),
                            760.0823,
                        HorizontalAlignment.Right,
                            true,
                            447.0467,
                            new Dimension(457.1608),
                            true),
                        "natus")],
                    "ullam",
                    "voluptatem esse asperiores");
        await featureLayer.SetRenderer(testRenderer);
        var renderer = await featureLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "ipsam",
                    "beatae",
                    "est");
        await featureLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2000, 4, 22, 19, 56, 10),
                    new DateTime(2002, 11, 15, 9, 7, 3));
        await featureLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await featureLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("doloremque",
                    "vitae",
                new TimeExtent(new DateTime(2006, 4, 3, 1, 52, 17),
                        new DateTime(2002, 11, 21, 20, 33, 1)),
                new TimeInterval(TemporalTime.Months,
                        909.1173),
                    [new DateTime(2003, 2, 22, 15, 26, 29)],
                    "Asia/Krasnoyarsk",
                    "voluptatum");
        await featureLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await featureLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Minutes,
                    274.3837);
        await featureLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await featureLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 8, 3, 9, 42, 7),
                    new DateTime(2008, 1, 15, 20, 45, 41));
        await featureLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await featureLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
