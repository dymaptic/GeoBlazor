@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedSliderWidget(Action renderHandler)
    {
        SliderWidget? sliderWidget = null;

        SliderMaxChangeEvent? maxChangeResult = null;
        void OnMaxChange(SliderMaxChangeEvent result)
        {
            maxChangeResult = result;
        }
        SliderMaxClickEvent? maxClickResult = null;
        void OnMaxClick(SliderMaxClickEvent result)
        {
            maxClickResult = result;
        }
        SliderMinChangeEvent? minChangeResult = null;
        void OnMinChange(SliderMinChangeEvent result)
        {
            minChangeResult = result;
        }
        SliderMinClickEvent? minClickResult = null;
        void OnMinClick(SliderMinClickEvent result)
        {
            minClickResult = result;
        }
        SliderSegmentClickEvent? segmentClickResult = null;
        void OnSegmentClick(SliderSegmentClickEvent result)
        {
            segmentClickResult = result;
        }
        SliderSegmentDragEvent? segmentDragResult = null;
        void OnSegmentDrag(SliderSegmentDragEvent result)
        {
            segmentDragResult = result;
        }
        SliderThumbChangeEvent? thumbChangeResult = null;
        void OnThumbChange(SliderThumbChangeEvent result)
        {
            thumbChangeResult = result;
        }
        SliderThumbClickEvent? thumbClickResult = null;
        void OnThumbClick(SliderThumbClickEvent result)
        {
            thumbClickResult = result;
        }
        SliderThumbDragEvent? thumbDragResult = null;
        void OnThumbDrag(SliderThumbDragEvent result)
        {
            thumbDragResult = result;
        }
        SliderTickClickEvent? tickClickResult = null;
        void OnTickClick(SliderTickClickEvent result)
        {
            tickClickResult = result;
        }
        SliderTrackClickEvent? trackClickResult = null;
        void OnTrackClick(SliderTrackClickEvent result)
        {
            trackClickResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <SliderWidget 
                    ContainerId="@("adipisci")"
                    Disabled="@(true)"
                    DraggableSegmentsEnabled="@(true)"
                    EffectiveMax="@(609.3892)"
                    EffectiveMin="@(352.7130)"
                    Label="@("voluptatem")"
                    LabelInputsEnabled="@(true)"
                    Layout="@(SliderLayout.Horizontal)"
                    Max="@(42.4009)"
                    Min="@(977.8720)"
                    Precision="@(689.6173)"
                    RangeLabelInputsEnabled="@(true)"
                    SnapOnClickEnabled="@(true)"
                    Steps="@([189.6594])"
                    StepInterval="@(604.7569)"
                    SyncedSegmentsEnabled="@(true)"
                    ThumbsConstrained="@(true)"
                    Values="@([353.8442,
                        419.7618])"
                    InputFormatFunction="@(new SliderLabelFormatter("velit"))"
                    InputParseFunction="@(new InputParser("porro"))"
                    LabelFormatFunction="@(new SliderLabelFormatter("laudantium"))"
                    Visible="@(true)"
                    Icon="@("minima")"
                    WidgetId="@("qui")"
                    OnMaxChange="OnMaxChange"
                    OnMaxClick="OnMaxClick"
                    OnMinChange="OnMinChange"
                    OnMinClick="OnMinClick"
                    OnSegmentClick="OnSegmentClick"
                    OnSegmentDrag="OnSegmentDrag"
                    OnThumbChange="OnThumbChange"
                    OnThumbClick="OnThumbClick"
                    OnThumbDrag="OnThumbDrag"
                    OnTickClick="OnTickClick"
                    OnTrackClick="OnTrackClick">
                    <SliderVisibleElements 
                        Labels="@(true)"
                        RangeLabels="@(true)">
                    </SliderVisibleElements>
                    <SliderViewModel 
                        EffectiveMax="@(963.3812)"
                        EffectiveMin="@(708.9228)"
                        InputFormatFunction="@(new SliderLabelFormatter("voluptatum"))"
                        InputParseFunction="@(new InputParser("sunt"))"
                        LabelFormatFunction="@(new SliderLabelFormatter("eum"))"
                        Max="@(154.5543)"
                        Min="@(807.8994)"
                        Precision="@(267.4045)"
                        ThumbsConstrained="@(true)"
                        Values="@([791.2439,
                            43.5669])">
                    </SliderViewModel>
                    <TickConfig 
                        Mode="@(TickConfigMode.Percent)"
                        DoubleCollectionValues="@([126.2948])"
                        DoubleValues="@(828.9581)"
                        LabelFormatFunction="@(new SliderLabelFormatter("repellat"))"
                        LabelsVisible="@(true)">
                    </TickConfig>
                </SliderWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(sliderWidget!);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "max-change"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "max-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "min-change"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "min-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "segment-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "segment-drag"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "thumb-change"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "thumb-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "thumb-drag"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "tick-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "track-click"]);
        int tries = 100;
        while (tries > 0 &&
            (maxChangeResult is null || 
            maxClickResult is null || 
            minChangeResult is null || 
            minClickResult is null || 
            segmentClickResult is null || 
            segmentDragResult is null || 
            thumbChangeResult is null || 
            thumbClickResult is null || 
            thumbDragResult is null || 
            tickClickResult is null || 
            trackClickResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<SliderMaxChangeEvent>(maxChangeResult);
        Assert.IsInstanceOfType<SliderMaxClickEvent>(maxClickResult);
        Assert.IsInstanceOfType<SliderMinChangeEvent>(minChangeResult);
        Assert.IsInstanceOfType<SliderMinClickEvent>(minClickResult);
        Assert.IsInstanceOfType<SliderSegmentClickEvent>(segmentClickResult);
        Assert.IsInstanceOfType<SliderSegmentDragEvent>(segmentDragResult);
        Assert.IsInstanceOfType<SliderThumbChangeEvent>(thumbChangeResult);
        Assert.IsInstanceOfType<SliderThumbClickEvent>(thumbClickResult);
        Assert.IsInstanceOfType<SliderThumbDragEvent>(thumbDragResult);
        Assert.IsInstanceOfType<SliderTickClickEvent>(tickClickResult);
        Assert.IsInstanceOfType<SliderTrackClickEvent>(trackClickResult);
        await AssertJavaScript("assertWidgetExists", args: "slider");
        SliderLayout testLayout = SliderLayout.HorizontalReversed;
        await sliderWidget.SetLayout(testLayout);
        var layout = await sliderWidget.GetLayout();
        Assert.AreEqual(testLayout, layout);
        IReadOnlyList<TickConfig> testTickConfigs = [new TickConfig(TickConfigMode.Position,
                    [808.3390,
                        492.3187],
                    561.2420,
                new SliderLabelFormatter("placeat"),
                    true,
                null)];
        await sliderWidget.SetTickConfigs(testTickConfigs);
        var tickConfigs = await sliderWidget.GetTickConfigs();
        Assert.AreEqual(testTickConfigs, tickConfigs);
        SliderVisibleElements testVisibleElements = new SliderVisibleElements(true,
                    true);
        await sliderWidget.SetVisibleElements(testVisibleElements);
        var visibleElements = await sliderWidget.GetVisibleElements();
        Assert.AreEqual(testVisibleElements, visibleElements);
        SliderViewModel testViewModel = new SliderViewModel(403.1238,
                    823.9323,
                new SliderLabelFormatter("dolorum"),
                new InputParser("minima"),
                new SliderLabelFormatter("omnis"),
                    460.6519,
                    807.1987,
                    515.0056,
                    true,
                    [306.5214]);
        await sliderWidget.SetViewModel(testViewModel);
        var viewModel = await sliderWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
    }
}
