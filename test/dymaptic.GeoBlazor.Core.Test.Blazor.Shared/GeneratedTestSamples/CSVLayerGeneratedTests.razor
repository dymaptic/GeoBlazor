@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("et doloremque ullam")"
                        Copyright="@("voluptatum")"
                        Opacity="@(0.4356)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Lighter)"
                        DefinitionExpression="@("ab")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("sed")"
                        Effect="@(new Effect("voluptatem",
                            4101452.5622))"
                        GeometryType="@("est")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("nulla")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("natus")"
                        MaxScale="@(42888710.2467)"
                        MinScale="@(12099.7766)"
                        ObjectIdField="@("minus")"
                        OutFields="@(["sint",
                            "et"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(262.0284)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(821.3192)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("rerum")"
                            EndField="@("adipisci")"
                            Stops="@([new DateTime(2017, 9, 14, 16, 55, 41)])"
                            TimeZone="@("Etc/UTC")"
                            TrackIdField="@("vel")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Hours)"
                                Value="@(940.5321)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2018, 8, 6, 10, 40, 1))"
                                End="@(new DateTime(2008, 6, 25, 9, 47, 58))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2017, 6, 22, 1, 29, 9))"
                            End="@(new DateTime(2012, 11, 8, 6, 53, 49))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(7)"
                            ImageCoordinateSystem="@("repellat")"
                            Wkt="@("adipisci")"
                            Wkt2="@("tempora")">
                        </SpatialReference>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Manual,
                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                    new MapColor(30, 237, 169),
                                    new MapColor(202, 138, 131)),
                                    754.3055,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(448.5633,
                                            23.8662),
                                    new AuthoringInfoField1ClassBreakInfos(461.4713,
                                            699.5553)],
                                        "illo",
                                        "earum",
                                        "quia"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(141.6299,
                                            532.5140)],
                                        "ut",
                                        "quo",
                                        "voluptas"),
                                    ["at",
                                        "et"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "odit",
                                    true,
                                LengthUnit.Millimeters,
                                    123.0348,
                                    980.8901,
                                    549.9661,
                                    385.0162))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("quasi impedit quaerat")"
                            StringContent="@("vel")"
                            OutFields="@(["voluptas"])"
                            FieldInfos="@([new FieldInfo("group",
                                    "numquam",
                                    "vero",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("comment",
                                        "quis",
                                        "dolorem",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.DayShortMonthYear),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                    "qui unde impedit voluptas",
                                    "possimus quia facere"),
                            new TextPopupContent("similique quia ut")])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "category",
                                    "aut vitae accusantium",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("ab ducimus reprehenderit",
                                "https://picsum.photos/640/480/?image=708",
                                "5cddbb95-e984-f131-b982-3ea6b532f0c1",
                                () => { Console.WriteLine("quas"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "libero"),
                                new ActionButton("quia sed et",
                                    "https://picsum.photos/640/480/?image=95",
                                    "42c509c1-a271-0024-3383-f130c5a1cbd7",
                                    () => { Console.WriteLine("perspiciatis"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "impedit")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("ducimus")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("repudiandae")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowStart)"
                            LabelExpression="@("et")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(8258633.9240)"
                            MinScale="@(20350.4795)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(307.4868))"
                            Symbol="@(new TextSymbol("rerum rerum odit",
                                new MapColor(122, 191, 20),
                                new MapColor(161, 167, 131),
                                    new Dimension(850.2898),
                                new MapFont(new Dimension(259.0077),
                                        "Garamond",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    392.0952,
                                new MapColor(117, 224, 109),
                                new MapColor(93, 127, 128),
                                    749.2010,
                                HorizontalAlignment.Center,
                                    true,
                                    413.2771,
                                    new Dimension(578.0785),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Country = 'Canada'")">
                        </Label>
                        <Extent 
                            Xmax="@(143.3005)"
                            Xmin="@(-111.7603)"
                            Ymax="@(-38.4297)"
                            Ymin="@(-35.8071)"
                            Zmax="@(867.0551)"
                            Zmin="@(138.7728)"
                            Mmax="@(582.9526)"
                            Mmin="@(121.2202)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("numquam")"
                                Wkt="@("quasi")"
                                Wkt2="@("assumenda")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("phone")"
                            Alias="@("earum")"
                            Description="@("inventore cumque qui quis")"
                            Length="@(6)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "quos" })"
                            ValueType="@(FieldValueType.UniqueIdentifier)"
                            Domain="@(new InheritedDomain("id"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("eligendi",
                                4076892.0091),
                                new Effect("modi",
                                    37866768.8618)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(577.6107,
                                new Polyline([new MapPath([new MapPoint([785.3369,
                                            207.9910]),
                                        new MapPoint([490.2959,
                                            125.0154])]),
                                        new MapPath([new MapPoint([959.3151])])],
                                    new SpatialReference(4,
                                            "aliquid",
                                            "expedita",
                                            "quia"),
                                        true,
                                        true),
                                    [3],
                                SpatialRelationship.IndexIntersects,
                                new TimeExtent(new DateTime(2011, 5, 2, 13, 32, 31),
                                        new DateTime(2001, 9, 27, 8, 15, 21)),
                                    QueryUnits.UsNauticalMiles,
                                    "Street = '123 Main St.'"))"
                            IncludedEffect="@([new Effect("rerum",
                                40116058.0516)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "at eveniet consequuntur"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(849.9394)"
                            Unit="@(ElevationUnit.Decimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["facilis",
                    "voluptatem"],
                    ["updatedAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("name");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("id",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([897.5827,
                                418.5731])]),
                            new MapPath([new MapPoint([353.9488])])],
                        new SpatialReference(9,
                                "officia",
                                "harum",
                                "iusto"),
                            true,
                            true),
                    new TextSymbol("ut repudiandae aut",
                        new MapColor(220, 252, 231),
                        new MapColor(139, 253, 253),
                            new Dimension(324.2713),
                        new MapFont(new Dimension(550.1637),
                                "Palatino",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.LineThrough),
                            994.1516,
                        new MapColor(126, 168, 210),
                        new MapColor(24, 92, 169),
                            123.0431,
                        HorizontalAlignment.Center,
                            true,
                            696.5313,
                            new Dimension(277.0141),
                            true),
                    new PopupTemplate("ut fuga dolorem",
                            "omnis",
                            ["ut",
                                "dolorem"],
                        [new FieldInfo("title",
                                "temporibus",
                                "at",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("id",
                                "sint",
                                "corrupti",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new AttachmentsPopupContent("deserunt sed aut",
                                "delectus dicta",
                                AttachmentsPopupContentDisplayType.Preview),
                        new TextPopupContent("vitae nemo ut")],
                        [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "title",
                                "molestias ex molestiae",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "name",
                                "quos consectetur quidem",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("soluta alias facere",
                                "https://picsum.photos/640/480/?image=747",
                                "893cbdd7-0ed9-31d0-b70e-10b8f37cc736",
                                () => { Console.WriteLine("impedit"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "doloremque")]),
                        new AttributesDictionary(),
                        true,
                        "mollitia",
                        "natus",
                        new GraphicOrigin(Guid.NewGuid(),
                            "velit",
                            8))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([9],
                    true,
                    400.7584,
                    782.3858,
                    "5.6.5.0",
                new Extent(-154.4929,
                        159.3997,
                        80.4036,
                        40.9500,
                        527.9729,
                        186.6480,
                        739.9538,
                        968.1700,
                    new SpatialReference(5,
                            "ut",
                            "quidem",
                            "quo"),
                        true,
                        true),
                    5,
                    ["expedita"],
                    "eum",
                    new DateTime(2013, 4, 3, 13, 32, 45),
                    293.9745,
                    3,
                    "odit",
                    4),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([3],
                    true,
                    758.4153,
                    901.3190,
                    "1.9.6.9",
                new Extent(-19.2712,
                        -43.0190,
                        2.4059,
                        -83.7533,
                        243.8842,
                        372.0170,
                        88.5897,
                        199.9146,
                    new SpatialReference(8,
                            "ut",
                            "quisquam",
                            "nihil"),
                        true,
                        true),
                    8,
                    ["tempore"],
                    "est",
                    new DateTime(2005, 1, 3, 2, 6, 30),
                    84.5220,
                    4,
                    "quia",
                    3),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([7,
                    2],
                    true,
                    636.1693,
                    288.9052,
                    "3.6.5.0",
                new Polygon([new MapPath([new MapPoint([219.6492,
                            195.5135])]),
                        new MapPath([new MapPoint([864.6917,
                                221.6863]),
                            new MapPoint([813.2072,
                                998.0867])])],
                    new SpatialReference(2,
                            "aut",
                            "in",
                            "blanditiis"),
                    new Point(-36.6814,
                            57.3763,
                            -17.4890,
                            -82.9909,
                            897.4170,
                        new SpatialReference(5,
                                "sint",
                                "aut",
                                "eius"),
                            true,
                            true,
                            432.0232),
                        true,
                        true,
                        true),
                    9,
                    ["aut"],
                    "omnis",
                    new DateTime(2004, 7, 12, 4, 52, 49),
                    79.1456,
                    3,
                    "neque",
                    3),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([4],
                    true,
                    470.2022,
                    553.0731,
                    "9.9.3.4",
                new Polyline([new MapPath([new MapPoint([598.5565])]),
                        new MapPath([new MapPoint([830.5327,
                                23.7264])])],
                    new SpatialReference(6,
                            "ut",
                            "expedita",
                            "laudantium"),
                        true,
                        true),
                    9,
                    ["et"],
                    "fuga",
                    new DateTime(2020, 11, 16, 9, 30, 55),
                    510.1475,
                    4,
                    "alias",
                    8),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SourceOut;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                        "cum qui quia"),
                ElevationInfoMode.RelativeToGround,
                    285.8304,
                ElevationUnit.Miles);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("tenetur",
                    31991550.5274)],
                    true,
                new FeatureFilter(79.6192,
                    new Polygon([new MapPath([new MapPoint([53.4821])]),
                            new MapPath([new MapPoint([538.6124,
                                    218.5244])])],
                        new SpatialReference(1,
                                "assumenda",
                                "velit",
                                "necessitatibus"),
                        new Point(-151.6131,
                                31.4523,
                                -163.9474,
                                -75.5242,
                                393.4252,
                            new SpatialReference(5,
                                    "in",
                                    "illum",
                                    "quod"),
                                true,
                                true,
                                115.5104),
                            true,
                            true,
                            true),
                        [2],
                    SpatialRelationship.Crosses,
                    new TimeExtent(new DateTime(2006, 6, 23, 21, 33, 58),
                            new DateTime(2013, 10, 6, 3, 6, 0)),
                        QueryUnits.NauticalMiles,
                        "PostalCode = 'M5V 1J9'"),
                    [new Effect("reprehenderit",
                        9538157.7704),
                        new Effect("quia",
                            16177175.8379)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "avatar",
                    "soluta",
                    "dignissimos in necessitatibus",
                    8,
                    true,
                    true,
                    new { Value = "id" },
                FieldValueType.LocationOrPlaceName,
                new InheritedDomain("updatedAt")),
            new Field(default,
                    "token",
                    "enim",
                    "saepe eaque sit",
                    1,
                    true,
                    true,
                    new { Value = "qui" },
                FieldValueType.DateAndTime,
                new InheritedDomain("password"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(138.8199,
                    82.3690,
                    73.6209,
                    -46.4922,
                    547.1792,
                    678.8859,
                    333.8318,
                    406.4102,
                new SpatialReference(2,
                        "sed",
                        "eos",
                        "tempora"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterLeft,
                    "facilis",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    13409064.3882,
                    11920.6491,
                    true,
                    new Dimension(214.8464),
                new TextSymbol("nesciunt voluptatibus eos",
                    new MapColor(168, 136, 82),
                    new MapColor(135, 8, 120),
                        new Dimension(307.6282),
                    new MapFont(new Dimension(933.2749),
                            "Times New Roman",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        823.8658,
                    new MapColor(31, 135, 45),
                    new MapColor(33, 113, 216),
                        377.3140,
                    HorizontalAlignment.Left,
                        true,
                        848.2757,
                        new Dimension(203.2278),
                        true),
                    true,
                    "Province = 'Ontario'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("repellat",
                SortOrder.Descending,
                    "nostrum")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.StandardDeviation,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(171, 39, 238),
                        new MapColor(141, 223, 216)),
                        784.6506,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(435.9580,
                                779.0280)],
                            "pariatur",
                            "eveniet",
                            "assumenda"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(251.0091,
                                327.1111),
                        new AuthoringInfoField1ClassBreakInfos(395.5113,
                                886.3566)],
                            "numquam",
                            "et",
                            "quaerat"),
                        ["magni"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "enim",
                        true,
                    LengthUnit.Miles,
                        197.8682,
                        823.7386,
                        377.8107,
                        221.2538),
                new PictureFillSymbol("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1",
                    new Dimension(482.0143),
                    new Dimension(880.8360),
                    new Dimension(142.5538),
                    new Dimension(674.4780),
                    142.2803,
                    -32.8174,
                    new Outline(new MapColor(244, 222, 158),
                        new Dimension(295.5623),
                        SimpleLineSymbolStyle.ShortDashDotDot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(30, 64, 12),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Circle),
                        755.5861),
                    new MapColor(247, 210, 19)),
                    "enim",
                    new SimpleMarkerSymbol(),
                    "expedita",
                    "reiciendis",
                    "autem",
                    "eos",
                new UniqueValueRendererLegendOptions("eum doloremque qui"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("eligendi",
                        new TextSymbol("sit totam consectetur",
                            new MapColor(206, 5, 37),
                            new MapColor(12, 119, 254),
                                new Dimension(169.4237),
                            new MapFont(new Dimension(362.3526),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.Underline),
                                585.1977,
                            new MapColor(226, 207, 114),
                            new MapColor(162, 55, 249),
                                769.5497,
                            HorizontalAlignment.Center,
                                true,
                                785.3041,
                                new Dimension(292.4765),
                                true),
                        [new UniqueValue("repudiandae",
                                "facilis",
                                "velit")]),
                    new UniqueValueClass("quidem",
                        new TextSymbol("ipsa necessitatibus qui",
                            new MapColor(59, 99, 27),
                            new MapColor(29, 10, 161),
                                new Dimension(939.4798),
                            new MapFont(new Dimension(833.7704),
                                    "Bookman",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                205.3241,
                            new MapColor(97, 96, 129),
                            new MapColor(218, 126, 52),
                                93.0298,
                            HorizontalAlignment.Center,
                                true,
                                155.8479,
                                new Dimension(337.3768),
                                true),
                        [new UniqueValue("quis",
                                "qui",
                                "nesciunt"),
                        new UniqueValue("id",
                                "aut",
                                "est")])],
                        "cum"),
                new UniqueValueGroup([new UniqueValueClass("id",
                        new TextSymbol("illum incidunt sapiente",
                            new MapColor(170, 181, 49),
                            new MapColor(104, 169, 119),
                                new Dimension(180.3465),
                            new MapFont(new Dimension(107.0682),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Bold,
                                TextDecoration.None),
                                200.2465,
                            new MapColor(98, 155, 124),
                            new MapColor(51, 233, 132),
                                414.8531,
                            HorizontalAlignment.Right,
                                true,
                                934.6087,
                                new Dimension(696.5744),
                                true),
                        [new UniqueValue("qui",
                                "accusantium",
                                "nemo"),
                        new UniqueValue("quisquam",
                                "sint",
                                "eum")]),
                    new UniqueValueClass("aut",
                        new TextSymbol("fugiat molestias quia",
                            new MapColor(249, 67, 117),
                            new MapColor(77, 15, 126),
                                new Dimension(68.2365),
                            new MapFont(new Dimension(752.5816),
                                    "Courier New",
                                MapFontStyle.Normal,
                                FontWeight.Bold,
                                TextDecoration.None),
                                789.7448,
                            new MapColor(25, 167, 123),
                            new MapColor(238, 164, 63),
                                536.0728,
                            HorizontalAlignment.Center,
                                true,
                                417.2854,
                                new Dimension(224.7234),
                                true),
                        [new UniqueValue("voluptatibus",
                                "recusandae",
                                "deleniti"),
                        new UniqueValue("sunt",
                                "eligendi",
                                "doloremque")])],
                        "debitis")],
                [new UniqueValueInfo("dolorem",
                    new TextSymbol("iste ducimus saepe",
                        new MapColor(203, 62, 82),
                        new MapColor(217, 174, 102),
                            new Dimension(144.1793),
                        new MapFont(new Dimension(694.6359),
                                "Arial",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            209.5566,
                        new MapColor(60, 89, 162),
                        new MapColor(154, 198, 40),
                            747.0745,
                        HorizontalAlignment.Left,
                            true,
                            993.3809,
                            new Dimension(376.6405),
                            true),
                        "reiciendis"),
                new UniqueValueInfo("non",
                    new TextSymbol("blanditiis omnis aspernatur",
                        new MapColor(32, 240, 151),
                        new MapColor(69, 233, 232),
                            new Dimension(831.2792),
                        new MapFont(new Dimension(356.2550),
                                "Verdana",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            931.3578,
                        new MapColor(240, 96, 82),
                        new MapColor(56, 41, 104),
                            69.5487,
                        HorizontalAlignment.Center,
                            true,
                            883.1501,
                            new Dimension(428.5232),
                            true),
                        "ipsam")],
                    "voluptatibus",
                    "cupiditate recusandae velit");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "suscipit",
                    "non",
                    "ut");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2005, 5, 7, 10, 58, 41),
                    new DateTime(2007, 3, 3, 2, 4, 15));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("voluptatem",
                    "eius",
                new TimeExtent(new DateTime(2007, 4, 21, 5, 5, 12),
                        new DateTime(2005, 1, 12, 5, 18, 32)),
                new TimeInterval(TemporalTime.Days,
                        142.2974),
                    [new DateTime(2003, 2, 15, 10, 35, 47)],
                    "Asia/Tbilisi",
                    "culpa");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    603.7596);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 2, 20, 7, 54, 24),
                    new DateTime(2006, 8, 10, 10, 36, 39));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
