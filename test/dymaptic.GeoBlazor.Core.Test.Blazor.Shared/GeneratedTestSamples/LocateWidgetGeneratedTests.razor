@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedLocateWidget(Action renderHandler)
    {
        LocateWidget? locateWidget = null;

        LocateEvent? locateResult = null;
        void OnLocate(LocateEvent result)
        {
            locateResult = result;
        }
        LocateErrorEvent? locateErrorResult = null;
        void OnLocateError(LocateErrorEvent result)
        {
            locateErrorResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <LocateWidget 
                    GeolocationOptions="@("quo")"
                    GoToLocationEnabled="@(true)"
                    Icon="@("commodi")"
                    Label="@("et")"
                    PopupEnabled="@(true)"
                    Scale="@(6)"
                    ViewModel="@(new LocateViewModel(new Error("password",
                            "laudantium ea quia porro",
                            new { Value = "iste" }),
                            "quia",
                            true,
                        null,
                        new Graphic(new Extent(-112.1207,
                                    25.4109,
                                    -40.7985,
                                    -19.1153,
                                    658.4213,
                                    276.2573,
                                    461.7324,
                                    165.2071,
                                new SpatialReference(4,
                                        "laboriosam",
                                        "recusandae",
                                        "cupiditate"),
                                    true,
                                    true),
                            new TextSymbol("fuga voluptates facere",
                                new MapColor(63, 179, 60),
                                new MapColor(15, 9, 192),
                                    new Dimension(744.3812),
                                new MapFont(new Dimension(734.2759),
                                        "Garamond",
                                    MapFontStyle.Oblique,
                                    FontWeight.Lighter,
                                    TextDecoration.None),
                                    769.3732,
                                new MapColor(36, 101, 183),
                                new MapColor(28, 4, 13),
                                    12.8645,
                                HorizontalAlignment.Right,
                                    true,
                                    44.4589,
                                    new Dimension(766.9407),
                                    true),
                            new PopupTemplate("eos eum autem",
                                    "eum",
                                    ["esse",
                                        "accusantium"],
                                [new FieldInfo("status",
                                        "necessitatibus",
                                        "error",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.LongMonthDayYearLongTime),
                                        true,
                                        true,
                                    StatisticType.Avg)],
                                [new FieldsPopupContent([new FieldInfo("createdAt",
                                            "voluptatem",
                                            "culpa",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(4,
                                                true,
                                            DateFormat.DayShortMonthYear),
                                            true,
                                            true,
                                        StatisticType.Min)],
                                        "expedita quo est",
                                        "maxime iure ducimus"),
                                new RelationshipPopupContent("error delectus magni",
                                        "voluptatem sit voluptas libero",
                                        9,
                                        "ipsum",
                                    [new RelatedRecordsInfoFieldOrder("nisi",
                                        OrderBy.Asc)],
                                        7)],
                                [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "updatedAt",
                                        "modi et est",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                        "status",
                                        "molestias sed voluptas",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("est laudantium commodi",
                                        "https://picsum.photos/640/480/?image=770",
                                        "d72d52b4-9885-7342-ef4e-96e5bc15d076",
                                        () => { Console.WriteLine("a"); return Task.CompletedTask; },
                                        "group",
                                        true,
                                        true,
                                        true,
                                        "qui")]),
                                new AttributesDictionary(),
                                true,
                                "sequi",
                                "ipsum",
                                new GraphicOrigin(Guid.NewGuid(),
                                    "corporis",
                                    5)),
                            true,
                            19942646.4694))"
                    WidgetId="@("perferendis")"
                    OnLocate="OnLocate"
                    OnLocateError="OnLocateError">
                    <Graphic 
                        Geometry="@(new Extent(12.3351,
                                109.6398,
                                -29.5329,
                                -25.1181,
                                705.2633,
                                864.0152,
                                470.0861,
                                872.3291,
                            new SpatialReference(5,
                                    "ut",
                                    "nam",
                                    "hic"),
                                true,
                                true))"
                        Symbol="@(new TextSymbol("et inventore quo",
                            new MapColor(84, 48, 131),
                            new MapColor(8, 19, 16),
                                new Dimension(496.3530),
                            new MapFont(new Dimension(599.5677),
                                    "Bookman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                294.6759,
                            new MapColor(193, 118, 134),
                            new MapColor(41, 159, 176),
                                845.8799,
                            HorizontalAlignment.Left,
                                true,
                                686.8972,
                                new Dimension(354.4862),
                                true))"
                        PopupTemplate="@(new PopupTemplate("et maxime soluta",
                                "doloribus",
                                ["et"],
                            [new FieldInfo("comment",
                                    "nobis",
                                    "omnis",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum)],
                            [new FieldsPopupContent([new FieldInfo("email",
                                        "praesentium",
                                        "sequi",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.LongDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Avg)],
                                    "odit dicta",
                                    "et fugiat itaque"),
                            new FieldsPopupContent([new FieldInfo("avatar",
                                        "eos",
                                        "soluta",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.LongDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("group",
                                        "facilis",
                                        "tempore",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.LongDateLongTime24),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "veritatis molestias odit",
                                    "et est porro")],
                            [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "name",
                                    "dolor dolor quis",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Name;",
                                    "category",
                                    "cum fugit ea",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("magni aspernatur vero",
                                    "https://picsum.photos/640/480/?image=51",
                                    "5357cdb3-396c-bf9b-5db9-4c7626296007",
                                    () => { Console.WriteLine("pariatur"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "dolor"),
                                    new ActionButton("suscipit nostrum iure",
                                        "https://picsum.photos/640/480/?image=545",
                                        "c3ed51d7-a8db-cfd4-2686-1a38a54e229b",
                                        () => { Console.WriteLine("itaque"); return Task.CompletedTask; },
                                        "updatedAt",
                                        true,
                                        true,
                                        true,
                                        "quia")]))"
                        Attributes="@(new AttributesDictionary())"
                        Visible="@(true)"
                        LegendLabel="@("odio")"
                        AggregateGeometries="@("atque")"
                        Origin="@(new GraphicOrigin(Guid.NewGuid(),
                            "pariatur",
                            2))">
                    </Graphic>
                </LocateWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(locateWidget!);
        await AssertJavaScript("dispatchEvent", args: [locateWidget!.Id, "locate"]);
        await AssertJavaScript("dispatchEvent", args: [locateWidget!.Id, "locate-error"]);
        int tries = 100;
        while (tries > 0 &&
            (locateResult is null || 
            locateErrorResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<LocateEvent>(locateResult);
        Assert.IsInstanceOfType<LocateErrorEvent>(locateErrorResult);
        await AssertJavaScript("assertWidgetExists", args: "locate");
        await locateWidget.CancelLocate();
        var locateMethodResult = await locateWidget.Locate();
        Assert.IsNotNull(locateMethodResult);
        Graphic testGraphic = new Graphic(new Point(56.3406,
                        -53.2194,
                        -140.7652,
                        -20.5564,
                        51.2870,
                    new SpatialReference(2,
                            "occaecati",
                            "earum",
                            "mollitia"),
                        true,
                        true,
                        409.7718),
                new TextSymbol("magni omnis quia",
                    new MapColor(86, 126, 160),
                    new MapColor(116, 166, 163),
                        new Dimension(79.5526),
                    new MapFont(new Dimension(499.3913),
                            "Verdana",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        695.0064,
                    new MapColor(6, 133, 73),
                    new MapColor(31, 246, 60),
                        945.4373,
                    HorizontalAlignment.Right,
                        true,
                        517.0819,
                        new Dimension(602.9819),
                        true),
                new PopupTemplate("rerum dolor enim",
                        "vero",
                        ["nam"],
                    [new FieldInfo("email",
                            "quos",
                            "natus",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.DayShortMonthYearShortTime24),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("email",
                            "at",
                            "nobis",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.ShortDateLongTime),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new RelationshipPopupContent("reprehenderit sed at",
                            "necessitatibus quia ipsum atque",
                            1,
                            "dolorum",
                        [new RelatedRecordsInfoFieldOrder("eum",
                            OrderBy.Asc)],
                            9)],
                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "password",
                            "rerum voluptatem nulla",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "createdAt",
                            "amet qui quasi",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("molestiae libero qui",
                            "https://picsum.photos/640/480/?image=350",
                            "53037570-8d40-562b-2c66-86866f1fc006",
                            () => { Console.WriteLine("laboriosam"); return Task.CompletedTask; },
                            "password",
                            true,
                            true,
                            true,
                            "ipsa")]),
                    new AttributesDictionary(),
                    true,
                    "non",
                    "nihil",
                    new GraphicOrigin(Guid.NewGuid(),
                        "omnis",
                        4));
        await locateWidget.SetGraphic(testGraphic);
        var graphic = await locateWidget.GetGraphic();
        Assert.AreEqual(testGraphic, graphic);
        LocateViewModel testViewModel = new LocateViewModel(new Error("comment",
                    "culpa cumque",
                    new { Value = "ut" }),
                    "id",
                    true,
                null,
                new Graphic(new Polygon([new MapPath([new MapPoint([146.6529,
                                575.8560]),
                            new MapPoint([306.3112,
                                66.8978])]),
                            new MapPath([new MapPoint([675.8532])])],
                        new SpatialReference(1,
                                "ut",
                                "dolores",
                                "distinctio"),
                        new Point(74.9110,
                                22.0921,
                                156.0571,
                                29.6854,
                                424.6415,
                            new SpatialReference(7,
                                    "in",
                                    "repellendus",
                                    "aspernatur"),
                                true,
                                true,
                                141.7756),
                            true,
                            true,
                            true),
                    new TextSymbol("autem voluptate qui",
                        new MapColor(231, 76, 239),
                        new MapColor(194, 209, 58),
                            new Dimension(35.3074),
                        new MapFont(new Dimension(433.5097),
                                "Courier New",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            116.0932,
                        new MapColor(194, 22, 59),
                        new MapColor(246, 161, 104),
                            313.6586,
                        HorizontalAlignment.Center,
                            true,
                            190.5832,
                            new Dimension(148.7007),
                            true),
                    new PopupTemplate("dolor qui quod",
                            "delectus",
                            ["repudiandae",
                                "culpa"],
                        [new FieldInfo("group",
                                "sint",
                                "quia",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.Year),
                                true,
                                true,
                            StatisticType.Max)],
                        [new TextPopupContent("enim ipsa incidunt")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "avatar",
                                "molestias dicta dignissimos",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "title",
                                "quas est aut",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("ab nemo vel",
                                "https://picsum.photos/640/480/?image=125",
                                "5dca64f2-547c-884d-17e2-3e4b12d45f64",
                                () => { Console.WriteLine("distinctio"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "quod"),
                                new ActionButton("molestias quis voluptas",
                                    "https://picsum.photos/640/480/?image=969",
                                    "31857e64-a158-eb73-bbe4-b3befe5c330c",
                                    () => { Console.WriteLine("vel"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "voluptas")]),
                        new AttributesDictionary(),
                        true,
                        "voluptates",
                        "quo",
                        new GraphicOrigin(Guid.NewGuid(),
                            "necessitatibus",
                            1)),
                    true,
                    16686858.0007);
        await locateWidget.SetViewModel(testViewModel);
        var viewModel = await locateWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
    }
}
