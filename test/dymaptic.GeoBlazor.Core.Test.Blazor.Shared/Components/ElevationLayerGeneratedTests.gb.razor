@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("sapiente")"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.5462)"
                        PersistenceEnabled="@(true)"
                        Title="@("vitae eligendi voluptas")"
                        Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2007, 1, 12, 12, 16, 28))"
                            End="@(new DateTime(2014, 8, 24, 0, 47, 44))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(508.2123)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "saepe",
                                    26.6894,
                                    44478147.5309),
                            new LOD(3,
                                    "corrupti",
                                    15.1179,
                                    22186792.3961)])"
                            Origin="@(new Point(125.2224,
                                    -88.6359,
                                    -39.3621,
                                    -14.9382,
                                    873.5894,
                                new SpatialReference(6,
                                        "voluptatem",
                                        "repudiandae",
                                        "iusto"),
                                    true,
                                    true,
                                    390.3234))"
                            Size="@([7])">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("nostrum")"
                                Wkt="@("voluptas")"
                                Wkt2="@("et")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(31.9529)"
                            Xmin="@(-104.1062)"
                            Ymax="@(82.8666)"
                            Ymin="@(65.0749)"
                            Zmax="@(668.3396)"
                            Zmin="@(30.4464)"
                            Mmax="@(91.7949)"
                            Mmin="@(321.7625)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("inventore")"
                                Wkt="@("deserunt")"
                                Wkt2="@("repellat")">
                            </SpatialReference>
                        </Extent>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(178.6714,
                    57.1872,
                    -12.2052,
                    74.9154,
                    71.2832,
                    972.0139,
                    127.8782,
                    319.3762,
                new SpatialReference(1,
                        "temporibus",
                        "inventore",
                        "itaque"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("explicabo",
                    11.0350));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(500.3145,
                26.4009,
                65.6933,
            new ElevationLayerFetchTileOptions(98.0086));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(919.0475,
                549.1324,
                363.9111);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polygon([new MapPath([new MapPoint([637.0612,
                        931.7586])])],
                new SpatialReference(7,
                        "ipsa",
                        "aut",
                        "qui"),
                new Point(156.7302,
                        -4.4778,
                        -122.9814,
                        68.5557,
                        853.4952,
                    new SpatialReference(8,
                            "explicabo",
                            "nam",
                            "ipsa"),
                        true,
                        true,
                        840.9240),
                    true,
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("et",
                    132.5494,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(-57.0135,
                    -119.7664,
                    77.2612,
                    73.9552,
                    997.2866,
                    243.3589,
                    837.5036,
                    302.8765,
                new SpatialReference(6,
                        "blanditiis",
                        "numquam",
                        "laboriosam"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(388.6455,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(4,
                        "in",
                        74.7992,
                        4554018.5722)],
                new Point(33.3101,
                        0.3361,
                        95.4097,
                        84.8914,
                        833.4190,
                    new SpatialReference(6,
                            "aliquid",
                            "veniam",
                            "veniam"),
                        true,
                        true,
                        950.3466),
                    [6,
                        6],
                new SpatialReference(4,
                        "officia",
                        "magnam",
                        "nisi"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2014, 8, 25, 17, 25, 55),
                    new DateTime(2007, 10, 1, 19, 21, 6));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
