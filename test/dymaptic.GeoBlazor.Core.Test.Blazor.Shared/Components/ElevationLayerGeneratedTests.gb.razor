@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("ducimus")"
                        FullExtent="@(new Extent(48.6645,
                                -107.8178,
                                62.8964,
                                -46.9434,
                                194.6053,
                                524.8190,
                                564.3945,
                                78.5610,
                            new SpatialReference(3,
                                    "amet",
                                    "culpa",
                                    "expedita"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.9279)"
                        PersistenceEnabled="@(true)"
                        Title="@("nulla voluptatem ut")"
                        Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 2, 15, 14, 34, 6))"
                            End="@(new DateTime(2005, 8, 11, 8, 46, 19))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(547.4829)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "omnis",
                                    61.8127,
                                    26394412.3829),
                            new LOD(7,
                                    "eveniet",
                                    19.2694,
                                    21662843.1342),
                            new LOD(4,
                                    "et",
                                    1.3881,
                                    32893401.4503),
                            new LOD(6,
                                    "corporis",
                                    77.5212,
                                    9936994.4999)])"
                            Origin="@(new Point(-142.6890,
                                    26.4199,
                                    117.3605,
                                    -60.3922,
                                    902.2501,
                                new SpatialReference(4,
                                        "necessitatibus",
                                        "velit",
                                        "error"),
                                    true,
                                    true,
                                    976.7201))"
                            Size="@([6,
                                1])"
                            SpatialReference="@(new SpatialReference(8,
                                    "explicabo",
                                    "id",
                                    "et"))">
                        </TileInfo>
                        <PortalItem />
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(128.2974,
                    -165.5518,
                    -51.2340,
                    -68.3893,
                    668.8590,
                    760.7787,
                    431.7373,
                    385.5727,
                new SpatialReference(6,
                        "cumque",
                        "sint",
                        "cupiditate"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("ipsam",
                    538.8697));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(106.1833,
                552.9805,
                618.9187,
            new ElevationLayerFetchTileOptions(300.7633));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(316.0440,
                113.4181,
                872.5223);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Extent(-113.2099,
                    -52.5444,
                    -54.9056,
                    78.7106,
                    628.8874,
                    883.2027,
                    998.6401,
                    575.6207,
                new SpatialReference(9,
                        "aut",
                        "ducimus",
                        "velit"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("qui",
                    827.1320,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(77.0874,
                    -41.8530,
                    73.7099,
                    -60.8464,
                    322.2602,
                    922.9730,
                    756.1004,
                    796.2066,
                new SpatialReference(9,
                        "aliquam",
                        "id",
                        "qui"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(324.0387,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(1,
                        "et",
                        71.0854,
                        33273143.7880)],
                new Point(-22.3120,
                        70.3326,
                        155.8684,
                        -47.0559,
                        540.1877,
                    new SpatialReference(8,
                            "cupiditate",
                            "qui",
                            "voluptatem"),
                        true,
                        true,
                        895.7815),
                    [3,
                        7,
                        3,
                        8],
                new SpatialReference(3,
                        "est",
                        "ab",
                        "velit"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 1, 4, 10, 43, 9),
                    new DateTime(2003, 1, 7, 18, 32, 2));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
