@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("ex")"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.6401)"
                        PersistenceEnabled="@(true)"
                        Title="@("nesciunt alias aut")"
                        Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2017, 6, 17, 12, 27, 4))"
                            End="@(new DateTime(2015, 5, 17, 6, 19, 48))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(988.0742)"
                            Format="@(TileInfoFormat.Emf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "nobis",
                                    21.7695,
                                    31656959.2732),
                            new LOD(5,
                                    "qui",
                                    80.8493,
                                    19341047.7712)])"
                            Origin="@(new Point(-11.8856,
                                    39.9453,
                                    42.7536,
                                    -63.6758,
                                    864.2215,
                                new SpatialReference(8,
                                        "ipsa",
                                        "non",
                                        "autem"),
                                    true,
                                    true,
                                    838.3186))"
                            Size="@([3,
                                2])">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("dolores")"
                                Wkt="@("aperiam")"
                                Wkt2="@("asperiores")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-7.9481)"
                            Xmin="@(134.0426)"
                            Ymax="@(-87.2666)"
                            Ymin="@(-43.8871)"
                            Zmax="@(992.9356)"
                            Zmin="@(482.6220)"
                            Mmax="@(413.7623)"
                            Mmin="@(933.9224)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("impedit")"
                                Wkt="@("rerum")"
                                Wkt2="@("iure")">
                            </SpatialReference>
                        </Extent>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(96.6617,
                    -0.9740,
                    -9.5032,
                    54.0470,
                    774.5108,
                    684.0376,
                    215.5010,
                    90.7436,
                new SpatialReference(4,
                        "et",
                        "optio",
                        "molestiae"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("tenetur",
                    460.8980));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(200.4839,
                692.4130,
                729.7979,
            new ElevationLayerFetchTileOptions(815.3549));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(104.7950,
                284.0552,
                554.5607);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Extent(-42.3444,
                    -42.0347,
                    -17.0555,
                    63.3405,
                    649.8376,
                    537.8982,
                    498.7179,
                    926.8731,
                new SpatialReference(1,
                        "corporis",
                        "quas",
                        "odio"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("quia",
                    796.2582,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(98.0468,
                    -86.1940,
                    -59.3242,
                    -35.4860,
                    408.9319,
                    729.7784,
                    399.2846,
                    422.4792,
                new SpatialReference(6,
                        "culpa",
                        "ducimus",
                        "sit"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(971.2606,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(4,
                        "atque",
                        5.6751,
                        47609565.3802)],
                new Point(40.4063,
                        5.9591,
                        89.1858,
                        6.8109,
                        519.8365,
                    new SpatialReference(4,
                            "voluptate",
                            "nesciunt",
                            "praesentium"),
                        true,
                        true,
                        481.0192),
                    [9],
                new SpatialReference(4,
                        "officia",
                        "harum",
                        "quia"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2014, 4, 1, 17, 35, 10),
                    new DateTime(2020, 7, 22, 5, 25, 34));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
