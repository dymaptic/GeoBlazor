@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("officiis")"
                        FullExtent="@(new Extent(114.8701,
                                -76.9122,
                                32.4135,
                                14.9553,
                                951.4929,
                                290.6706,
                                665.6581,
                                835.6160,
                            new SpatialReference(6,
                                    "velit",
                                    "repudiandae",
                                    "qui"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.9162)"
                        PersistenceEnabled="@(true)"
                        Title="@("qui unde earum")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2014, 3, 20, 17, 16, 46))"
                            End="@(new DateTime(2003, 1, 23, 16, 40, 57))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(95.3587)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "molestiae",
                                    32.1997,
                                    26044352.1541)])"
                            Origin="@(new Point(68.5783,
                                    63.2042,
                                    -31.4366,
                                    -20.7860,
                                    702.4812,
                                new SpatialReference(2,
                                        "et",
                                        "voluptate",
                                        "animi"),
                                    true,
                                    true,
                                    415.7451))"
                            Size="@([1,
                                7,
                                9])"
                            SpatialReference="@(new SpatialReference(4,
                                    "harum",
                                    "nihil",
                                    "velit"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("reprehenderit")"
                            ApiKey="@("voluptatem")"
                            AvgRating="@(732.5043)"
                            Categories="@(["qui",
                                "eos",
                                "est",
                                "neque"])"
                            Created="@(new DateTime(2003, 3, 7, 8, 0, 10))"
                            Culture="@("aperiam")"
                            Description="@("tempora odit et quia aut")"
                            Extent="@(new Extent(21.0299,
                                    164.8980,
                                    -32.5300,
                                    -57.1373,
                                    839.1103,
                                    700.9838,
                                    32.8651,
                                    120.3762,
                                new SpatialReference(4,
                                        "qui",
                                        "totam",
                                        "numquam"),
                                    true,
                                    true))"
                            GroupCategories="@(["rem",
                                "aliquid",
                                "tempore",
                                "ea"])"
                            LicenseInfo="@("harum")"
                            Modified="@(new DateTime(2006, 7, 23, 18, 45, 17))"
                            Name="@("status")"
                            NumComments="@(810.7026)"
                            NumRatings="@(631.9162)"
                            NumViews="@(607.1531)"
                            Owner="@("Lera Aufderhar")"
                            OwnerFolder="@("Genevieve Rowe")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["quisquam",
                                        "voluptas",
                                        "odio",
                                        "dolorem"],
                                    "recusandae",
                                    "quae",
                                    "similique",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("ut")"
                            Screenshots="@(["aliquid",
                                "officia",
                                "autem",
                                "sapiente"])"
                            Size="@(5)"
                            Snippet="@("ipsam")"
                            Tags="@(["consequatur",
                                "non"])"
                            Title="@("fugiat sit asperiores")"
                            TypeKeywords="@(["harum",
                                "veniam",
                                "ut",
                                "vero"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-75.1035,
                    38.6736,
                    30.5739,
                    -1.3483,
                    215.0794,
                    214.4853,
                    435.9730,
                    447.4382,
                new SpatialReference(2,
                        "est",
                        "odio",
                        "reiciendis"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("molestiae",
                    708.4749));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(93.9166,
                566.6570,
                110.4157,
            new ElevationLayerFetchTileOptions(117.4710));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(799.7896,
                55.1055,
                373.7188);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Point(71.1795,
                    -62.1330,
                    -90.5053,
                    84.0773,
                    207.6018,
                new SpatialReference(6,
                        "rerum",
                        "eius",
                        "dolorem"),
                    true,
                    true,
                    711.2102),
            new ElevationLayerQueryElevationOptions("praesentium",
                    392.4203,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(34.4189,
                    154.1315,
                    -54.8908,
                    27.5679,
                    736.7700,
                    667.8137,
                    633.9779,
                    824.9354,
                new SpatialReference(1,
                        "totam",
                        "aut",
                        "nisi"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "fugit",
                    "consequatur",
                    102.4111,
                    ["beatae",
                        "quasi",
                        "ipsum",
                        "quaerat"],
                    new DateTime(2009, 8, 18, 8, 13, 32),
                    "voluptates",
                    "voluptatem voluptatem explicabo voluptatem et commodi hic",
                new Extent(154.9232,
                        1.9265,
                        2.8430,
                        12.6018,
                        346.6873,
                        181.6276,
                        579.5890,
                        936.6852,
                    new SpatialReference(1,
                            "qui",
                            "iusto",
                            "nihil"),
                        true,
                        true),
                    ["alias",
                        "nihil",
                        "totam",
                        "rerum"],
                    "soluta",
                    new DateTime(2019, 8, 5, 9, 38, 0),
                    "phone",
                    191.8059);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(466.7602,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(5,
                        "nemo",
                        44.5342,
                        7028875.5418)],
                new Point(-159.2673,
                        -28.4446,
                        -50.0667,
                        43.7753,
                        225.7906,
                    new SpatialReference(5,
                            "ut",
                            "fugit",
                            "ullam"),
                        true,
                        true,
                        544.2233),
                    [8,
                        3,
                        2,
                        5],
                new SpatialReference(1,
                        "ullam",
                        "iste",
                        "ratione"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 10, 9, 6, 53, 12),
                    new DateTime(2013, 8, 18, 6, 25, 30));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
