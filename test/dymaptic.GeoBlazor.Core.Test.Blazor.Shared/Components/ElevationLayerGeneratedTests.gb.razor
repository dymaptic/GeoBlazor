@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("rerum")"
                        FullExtent="@(new Extent(-92.7934,
                                -21.5466,
                                39.0050,
                                40.1367,
                                128.9184,
                                228.6230,
                                753.9287,
                                745.1439,
                            new SpatialReference(7,
                                    "pariatur",
                                    "veritatis",
                                    "et"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.7362)"
                        PersistenceEnabled="@(true)"
                        Title="@("suscipit eligendi error")"
                        Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 5, 11, 21, 31, 16))"
                            End="@(new DateTime(2017, 7, 26, 4, 54, 2))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(615.5355)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "provident",
                                    66.4689,
                                    41369444.9306)])"
                            Origin="@(new Point(-25.4638,
                                    -64.2430,
                                    70.8075,
                                    -10.8736,
                                    426.4917,
                                new SpatialReference(9,
                                        "molestiae",
                                        "assumenda",
                                        "voluptatem"),
                                    true,
                                    true,
                                    232.1487))"
                            Size="@([3,
                                8,
                                1,
                                1])"
                            SpatialReference="@(new SpatialReference(3,
                                    "dolores",
                                    "quidem",
                                    "non"))">
                        </TileInfo>
                        <PortalItem />
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-150.5418,
                    -135.9416,
                    -73.8870,
                    63.0482,
                    774.5370,
                    970.6954,
                    856.2496,
                    678.9732,
                new SpatialReference(1,
                        "mollitia",
                        "ut",
                        "error"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("placeat",
                    588.9806));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(273.7212,
                412.4521,
                422.3086,
            new ElevationLayerFetchTileOptions(339.6243));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(77.1615,
                843.0580,
                775.3165);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Point(-32.9764,
                    -34.3553,
                    140.2025,
                    -29.1758,
                    875.1705,
                new SpatialReference(3,
                        "omnis",
                        "aut",
                        "possimus"),
                    true,
                    true,
                    383.2273),
            new ElevationLayerQueryElevationOptions("ab",
                    511.8238,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(-86.7399,
                    173.0199,
                    0.8949,
                    70.5949,
                    87.6985,
                    898.1154,
                    50.7053,
                    329.5973,
                new SpatialReference(6,
                        "fugit",
                        "ab",
                        "et"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(464.1438,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(1,
                        "qui",
                        29.9582,
                        46794446.2665)],
                new Point(159.3680,
                        76.6087,
                        -169.4483,
                        -58.1454,
                        809.9508,
                    new SpatialReference(7,
                            "enim",
                            "inventore",
                            "a"),
                        true,
                        true,
                        18.0509),
                    [7,
                        2],
                new SpatialReference(3,
                        "doloremque",
                        "saepe",
                        "velit"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 10, 15, 10, 13, 0),
                    new DateTime(2011, 3, 10, 17, 50, 29));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
