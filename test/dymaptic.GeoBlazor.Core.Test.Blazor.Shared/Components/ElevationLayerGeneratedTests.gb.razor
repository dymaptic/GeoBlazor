@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("quidem")"
                        FullExtent="@(new Extent(-158.2906,
                                92.2594,
                                5.1713,
                                -28.2040,
                                426.8563,
                                542.9956,
                                951.2425,
                                343.6375,
                            new SpatialReference(3,
                                    "adipisci",
                                    "est",
                                    "illo"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3540)"
                        PersistenceEnabled="@(true)"
                        Title="@("reiciendis cumque sit")"
                        Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 3, 18, 10, 11, 51))"
                            End="@(new DateTime(2012, 6, 18, 18, 21, 5))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(532.7386)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "adipisci",
                                    9.4429,
                                    36801210.1450)])"
                            Origin="@(new Point(-169.0370,
                                    0.0624,
                                    92.2993,
                                    -55.9264,
                                    670.5237,
                                new SpatialReference(7,
                                        "quia",
                                        "eveniet",
                                        "dolorum"),
                                    true,
                                    true,
                                    517.5190))"
                            Size="@([2,
                                7,
                                3])"
                            SpatialReference="@(new SpatialReference(6,
                                    "doloribus",
                                    "est",
                                    "soluta"))">
                        </TileInfo>
                        <PortalItem />
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(28.8669,
                    17.8505,
                    -58.1021,
                    -83.2523,
                    397.2062,
                    439.7672,
                    899.0499,
                    620.5855,
                new SpatialReference(4,
                        "perspiciatis",
                        "cum",
                        "error"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("est",
                    143.8199));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(208.3744,
                509.3057,
                632.1790,
            new ElevationLayerFetchTileOptions(302.0138));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(47.8441,
                167.5077,
                959.0967);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Extent(-77.3801,
                    -129.3036,
                    37.6526,
                    -71.8799,
                    918.6461,
                    578.0859,
                    614.0037,
                    347.7515,
                new SpatialReference(8,
                        "deserunt",
                        "eaque",
                        "in"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("veniam",
                    55.2059,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(133.4368,
                    145.1628,
                    -50.1534,
                    -0.1422,
                    187.9823,
                    872.7025,
                    913.2959,
                    994.2724,
                new SpatialReference(4,
                        "et",
                        "rerum",
                        "et"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(575.1601,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(9,
                        "amet",
                        59.3969,
                        15657273.0474),
                new LOD(3,
                        "harum",
                        11.2673,
                        39261998.1704),
                new LOD(2,
                        "voluptas",
                        96.8962,
                        19724689.8441),
                new LOD(7,
                        "officiis",
                        44.4886,
                        9120340.2498)],
                new Point(150.7675,
                        45.0086,
                        86.3800,
                        -50.3873,
                        999.5728,
                    new SpatialReference(8,
                            "eos",
                            "deserunt",
                            "sint"),
                        true,
                        true,
                        320.2286),
                    [8,
                        9,
                        6],
                new SpatialReference(9,
                        "consequatur",
                        "adipisci",
                        "at"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 6, 12, 15, 18, 51),
                    new DateTime(2019, 2, 13, 1, 50, 12));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
