@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("dignissimos")"
                        FullExtent="@(new Extent(-59.0517,
                                139.9781,
                                -44.9818,
                                26.7891,
                                537.3748,
                                862.2601,
                                641.4372,
                                45.3522,
                            new SpatialReference(9,
                                    "blanditiis",
                                    "est",
                                    "veniam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.6430)"
                        PersistenceEnabled="@(true)"
                        Title="@("ipsum delectus ut")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 7, 15, 1, 22, 9))"
                            End="@(new DateTime(2021, 6, 23, 8, 54, 35))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(878.0500)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "iste",
                                    33.0980,
                                    26325806.1363),
                            new LOD(9,
                                    "aut",
                                    1.8366,
                                    11530179.7954),
                            new LOD(4,
                                    "quis",
                                    49.1096,
                                    24857266.7238)])"
                            Origin="@(new Point(128.6189,
                                    -3.4413,
                                    -125.2758,
                                    17.7730,
                                    88.8890,
                                new SpatialReference(1,
                                        "officia",
                                        "inventore",
                                        "itaque"),
                                    true,
                                    true,
                                    489.9322))"
                            Size="@([4,
                                5])"
                            SpatialReference="@(new SpatialReference(5,
                                    "molestiae",
                                    "assumenda",
                                    "assumenda"))">
                        </TileInfo>
                        <PortalItem />
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(104.6742,
                    -23.2871,
                    -45.2060,
                    -21.5719,
                    978.8023,
                    56.4595,
                    728.3124,
                    840.6175,
                new SpatialReference(1,
                        "aut",
                        "quaerat",
                        "sed"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("cum",
                    448.9472));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(964.0040,
                243.4608,
                895.1749,
            new ElevationLayerFetchTileOptions(804.2664));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(155.6678,
                172.2729,
                679.5257);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Extent(54.2976,
                    -103.6709,
                    -23.3961,
                    86.3053,
                    948.5254,
                    331.4402,
                    687.3322,
                    407.3948,
                new SpatialReference(8,
                        "aperiam",
                        "et",
                        "ad"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("id",
                    338.4113,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(-178.8539,
                    86.4324,
                    -37.5078,
                    -1.5855,
                    491.5100,
                    858.7602,
                    334.8150,
                    361.8899,
                new SpatialReference(3,
                        "ut",
                        "officia",
                        "dicta"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(205.2265,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(4,
                        "harum",
                        19.8882,
                        23443489.1059),
                new LOD(8,
                        "a",
                        11.3323,
                        30375766.8864),
                new LOD(6,
                        "quia",
                        79.6046,
                        35388612.9245)],
                new Point(-136.7841,
                        -39.8167,
                        -5.5172,
                        14.5312,
                        646.1778,
                    new SpatialReference(9,
                            "et",
                            "aut",
                            "mollitia"),
                        true,
                        true,
                        508.2802),
                    [3,
                        7,
                        6],
                new SpatialReference(5,
                        "ut",
                        "sed",
                        "accusamus"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 6, 26, 19, 36, 17),
                    new DateTime(2023, 1, 11, 10, 27, 8));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
