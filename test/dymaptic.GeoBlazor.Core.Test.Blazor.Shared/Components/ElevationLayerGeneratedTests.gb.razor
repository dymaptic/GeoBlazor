@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("labore")"
                        FullExtent="@(new Extent(134.3242,
                                -70.7200,
                                80.5809,
                                -58.8268,
                                19.3602,
                                583.8657,
                                650.5324,
                                494.1121,
                            new SpatialReference(5,
                                    "et",
                                    "voluptatem",
                                    "ea"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3382)"
                        PersistenceEnabled="@(true)"
                        Title="@("iure porro hic")"
                        Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2018, 8, 10, 14, 53, 11))"
                            End="@(new DateTime(2023, 3, 8, 19, 57, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(996.8129)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "harum",
                                    4.1983,
                                    41334977.1633),
                            new LOD(9,
                                    "omnis",
                                    72.0418,
                                    22509520.5207)])"
                            Origin="@(new Point(-158.3390,
                                    25.1854,
                                    43.2601,
                                    69.2477,
                                    315.8671,
                                new SpatialReference(7,
                                        "expedita",
                                        "illum",
                                        "voluptatem"),
                                    true,
                                    true,
                                    72.5665))"
                            Size="@([1,
                                3])"
                            SpatialReference="@(new SpatialReference(2,
                                    "dignissimos",
                                    "ea",
                                    "consequatur"))">
                        </TileInfo>
                        <PortalItem />
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-150.1911,
                    38.6097,
                    2.8102,
                    47.4753,
                    580.6527,
                    88.7721,
                    430.6317,
                    481.7277,
                new SpatialReference(4,
                        "aut",
                        "laboriosam",
                        "et"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("quo",
                    410.6505));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(770.2547,
                366.4770,
                780.5156,
            new ElevationLayerFetchTileOptions(318.8551));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(693.4568,
                584.3258,
                735.3250);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Extent(-39.4579,
                    78.1013,
                    87.7789,
                    86.7908,
                    906.7335,
                    398.8930,
                    229.0035,
                    876.4910,
                new SpatialReference(4,
                        "reprehenderit",
                        "in",
                        "non"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("voluptatem",
                    228.2273,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(-29.5702,
                    -14.7603,
                    75.2843,
                    81.1591,
                    999.9801,
                    657.6031,
                    173.5167,
                    495.8541,
                new SpatialReference(7,
                        "placeat",
                        "doloremque",
                        "cupiditate"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(78.9307,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(9,
                        "autem",
                        99.9193,
                        39446261.1858),
                new LOD(9,
                        "optio",
                        90.9543,
                        39681429.3137),
                new LOD(3,
                        "quia",
                        2.7330,
                        34598341.2071)],
                new Point(155.6280,
                        29.6607,
                        141.1633,
                        -74.7039,
                        717.1701,
                    new SpatialReference(6,
                            "consequatur",
                            "possimus",
                            "quam"),
                        true,
                        true,
                        155.2777),
                    [8,
                        5],
                new SpatialReference(4,
                        "tenetur",
                        "dolorem",
                        "est"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 4, 19, 7, 0, 1),
                    new DateTime(2011, 11, 25, 2, 54, 30));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
