@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("voluptas")"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.8868)"
                        PersistenceEnabled="@(true)"
                        Title="@("et vero nisi")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 1, 10, 10, 44, 39))"
                            End="@(new DateTime(2014, 9, 20, 7, 48, 29))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(327.2918)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "omnis",
                                    41.1762,
                                    37964482.4009)])"
                            Origin="@(new Point(22.1272,
                                    -72.9323,
                                    143.1269,
                                    47.9992,
                                    274.3055,
                                new SpatialReference(3,
                                        "earum",
                                        "pariatur",
                                        "ex"),
                                    true,
                                    true,
                                    537.5138))"
                            Size="@([5,
                                8])">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("a")"
                                Wkt="@("sed")"
                                Wkt2="@("quos")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-146.6431)"
                            Xmin="@(143.9513)"
                            Ymax="@(6.7315)"
                            Ymin="@(39.9316)"
                            Zmax="@(791.3093)"
                            Zmin="@(797.1883)"
                            Mmax="@(886.5488)"
                            Mmin="@(573.1610)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("ipsam")"
                                Wkt="@("voluptatem")"
                                Wkt2="@("autem")">
                            </SpatialReference>
                        </Extent>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(9.6475,
                    -123.8299,
                    -86.6539,
                    -79.0511,
                    668.9195,
                    507.3708,
                    876.6758,
                    605.8344,
                new SpatialReference(3,
                        "facere",
                        "tenetur",
                        "consequuntur"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("similique",
                    310.5439));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(691.7825,
                357.7823,
                982.9411,
            new ElevationLayerFetchTileOptions(901.6345));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(919.8035,
                841.3514,
                465.4983);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Point(-121.4791,
                    -19.8094,
                    -116.1988,
                    20.9183,
                    824.2139,
                new SpatialReference(7,
                        "magnam",
                        "ea",
                        "laboriosam"),
                    true,
                    true,
                    147.1079),
            new ElevationLayerQueryElevationOptions("harum",
                    346.9007,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(86.2846,
                    97.4967,
                    -14.8647,
                    13.0684,
                    423.3177,
                    186.8817,
                    525.3285,
                    647.9833,
                new SpatialReference(5,
                        "error",
                        "veniam",
                        "magnam"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(105.3985,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(1,
                        "tempore",
                        91.1313,
                        48346256.1323)],
                new Point(154.0732,
                        -88.3423,
                        -60.8542,
                        26.9881,
                        65.3852,
                    new SpatialReference(7,
                            "modi",
                            "est",
                            "tempore"),
                        true,
                        true,
                        896.3715),
                    [6,
                        7],
                new SpatialReference(5,
                        "sapiente",
                        "nihil",
                        "saepe"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 5, 5, 12, 14, 47),
                    new DateTime(2010, 6, 22, 6, 11, 22));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
