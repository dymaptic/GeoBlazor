@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("maxime")"
                        FullExtent="@(new Extent(165.1213,
                                144.0079,
                                -85.4161,
                                -36.2607,
                                782.3159,
                                207.3391,
                                913.7513,
                                973.4379,
                            new SpatialReference(6,
                                    "necessitatibus",
                                    "ipsum",
                                    "dolor"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.1504)"
                        PersistenceEnabled="@(true)"
                        Title="@("aut sed dolor")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 8, 21, 22, 44, 9))"
                            End="@(new DateTime(2004, 1, 11, 15, 18, 44))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(473.0634)"
                            Format="@(TileInfoFormat.Tiff)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "aut",
                                    54.5373,
                                    42600228.4789)])"
                            Origin="@(new Point(69.1531,
                                    13.6137,
                                    131.9438,
                                    -19.2557,
                                    319.2417,
                                new SpatialReference(7,
                                        "eum",
                                        "quia",
                                        "omnis"),
                                    true,
                                    true,
                                    231.8950))"
                            Size="@([7,
                                2,
                                2])"
                            SpatialReference="@(new SpatialReference(7,
                                    "omnis",
                                    "ut",
                                    "quae"))">
                        </TileInfo>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-0.9115,
                    -178.5473,
                    47.4756,
                    -77.1106,
                    844.0804,
                    273.1065,
                    727.7135,
                    450.2798,
                new SpatialReference(3,
                        "animi",
                        "dolores",
                        "iusto"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("error",
                    562.4433));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(6.4380,
                496.8138,
                109.9701,
            new ElevationLayerFetchTileOptions(368.8934));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(930.0983,
                971.0406,
                204.9102);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polyline([new MapPath([new MapPoint([163.5263,
                        181.7386,
                        971.7968]),
                    new MapPoint([436.4831,
                        170.6680]),
                    new MapPoint([951.9299,
                        614.8503,
                        177.3055]),
                    new MapPoint([641.9625,
                        738.9245])])],
                new SpatialReference(7,
                        "officiis",
                        "et",
                        "assumenda"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("qui",
                    990.9789,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(121.7763,
                    -108.1002,
                    7.8613,
                    53.3396,
                    478.6973,
                    9.0140,
                    612.2321,
                    910.5144,
                new SpatialReference(4,
                        "sit",
                        "fugit",
                        "enim"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "velit",
                    "aliquid",
                    1.4329,
                    ["beatae",
                        "nisi",
                        "laborum"],
                    new DateTime(2010, 10, 17, 1, 10, 26),
                    "non",
                    "voluptates rerum dignissimos fuga odio",
                new Extent(-97.4963,
                        167.5316,
                        47.2391,
                        -65.9013,
                        726.7500,
                        506.5462,
                        856.2173,
                        167.2886,
                    new SpatialReference(8,
                            "cum",
                            "ea",
                            "unde"),
                        true,
                        true),
                    ["numquam",
                        "voluptas"],
                    "dignissimos",
                    new DateTime(2004, 1, 8, 19, 54, 13),
                    "email",
                    161.9771);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(16.4528,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(2,
                        "dolor",
                        29.5971,
                        49139312.2117)],
                new Point(-158.5924,
                        49.9632,
                        157.1042,
                        -12.6374,
                        804.9478,
                    new SpatialReference(8,
                            "amet",
                            "reiciendis",
                            "mollitia"),
                        true,
                        true,
                        666.7259),
                    [6,
                        1,
                        4],
                new SpatialReference(2,
                        "nam",
                        "asperiores",
                        "quia"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 9, 3, 18, 17, 37),
                    new DateTime(2007, 10, 25, 2, 29, 7));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
