@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("dolorem")"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.5277)"
                        PersistenceEnabled="@(true)"
                        Title="@("corrupti et ad")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2002, 8, 7, 5, 41, 15))"
                            End="@(new DateTime(2017, 10, 24, 0, 16, 50))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(437.9825)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "atque",
                                    28.5127,
                                    44952811.3747),
                            new LOD(4,
                                    "aliquid",
                                    99.1074,
                                    17558186.4596)])"
                            Origin="@(new Point(70.7336,
                                    -1.3896,
                                    -53.6221,
                                    16.4559,
                                    966.0464,
                                new SpatialReference(3,
                                        "alias",
                                        "perspiciatis",
                                        "ducimus"),
                                    true,
                                    true,
                                    287.9722))"
                            Size="@([9])">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("autem")"
                                Wkt="@("asperiores")"
                                Wkt2="@("repellendus")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-124.7533)"
                            Xmin="@(-42.4763)"
                            Ymax="@(30.6301)"
                            Ymin="@(-72.1690)"
                            Zmax="@(833.8966)"
                            Zmin="@(499.2187)"
                            Mmax="@(522.8958)"
                            Mmin="@(744.4920)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(3)"
                                ImageCoordinateSystem="@("officiis")"
                                Wkt="@("quibusdam")"
                                Wkt2="@("facilis")">
                            </SpatialReference>
                        </Extent>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-6.7854,
                    -158.6000,
                    15.8644,
                    79.2390,
                    408.4361,
                    17.5242,
                    696.7326,
                    521.3964,
                new SpatialReference(3,
                        "necessitatibus",
                        "consequatur",
                        "aut"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("facilis",
                    562.5905));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(64.4254,
                825.2166,
                167.2869,
            new ElevationLayerFetchTileOptions(482.4256));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(114.0385,
                881.3783,
                265.9236);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polyline([new MapPath([new MapPoint([447.3584,
                        355.7935])]),
                    new MapPath([new MapPoint([492.8435,
                            729.3745]),
                        new MapPoint([788.3497])])],
                new SpatialReference(4,
                        "et",
                        "fugit",
                        "sunt"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("et",
                    475.8376,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(-176.3953,
                    -39.3048,
                    85.1876,
                    -44.5843,
                    145.9888,
                    668.1364,
                    331.4355,
                    27.0343,
                new SpatialReference(3,
                        "blanditiis",
                        "id",
                        "eaque"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(97.0696,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(1,
                        "omnis",
                        87.5703,
                        4102354.4490)],
                new Point(55.9702,
                        -23.3704,
                        -65.8784,
                        67.0673,
                        379.3682,
                    new SpatialReference(6,
                            "consequuntur",
                            "modi",
                            "et"),
                        true,
                        true,
                        653.1134),
                    [4],
                new SpatialReference(2,
                        "a",
                        "delectus",
                        "ex"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 5, 1, 14, 54, 34),
                    new DateTime(2009, 6, 8, 11, 56, 27));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
