@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("deleniti")"
                        FullExtent="@(new Extent(-148.0904,
                                -33.7743,
                                -52.7581,
                                -74.8275,
                                21.9488,
                                833.2774,
                                649.4997,
                                297.2123,
                            new SpatialReference(1,
                                    "adipisci",
                                    "vitae",
                                    "voluptates"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.0914)"
                        PersistenceEnabled="@(true)"
                        Title="@("quia in voluptas")"
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                        <TimeExtent 
                            Start="@(new DateTime(2019, 7, 5, 13, 39, 30))"
                            End="@(new DateTime(2002, 6, 24, 5, 13, 41))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(730.2211)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "nam",
                                    85.8613,
                                    10542200.8223),
                            new LOD(7,
                                    "occaecati",
                                    18.2370,
                                    32460871.2559),
                            new LOD(9,
                                    "dolorem",
                                    26.9907,
                                    37685056.7487)])"
                            Origin="@(new Point(49.4792,
                                    85.0075,
                                    88.5614,
                                    44.5559,
                                    176.3701,
                                new SpatialReference(5,
                                        "sed",
                                        "inventore",
                                        "sapiente"),
                                    true,
                                    true,
                                    212.9329))"
                            Size="@([6,
                                1])"
                            SpatialReference="@(new SpatialReference(7,
                                    "nisi",
                                    "inventore",
                                    "aut"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("ipsum")"
                            ApiKey="@("et")"
                            AvgRating="@(866.6571)"
                            Categories="@(["animi",
                                "quia",
                                "nisi",
                                "molestias"])"
                            Created="@(new DateTime(2014, 9, 27, 22, 16, 18))"
                            Culture="@("eaque")"
                            Description="@("rem alias laborum et aspernatur et")"
                            Extent="@(new Extent(113.7332,
                                    49.8909,
                                    -52.4796,
                                    -53.0624,
                                    494.9078,
                                    230.6194,
                                    149.6964,
                                    273.3502,
                                new SpatialReference(1,
                                        "est",
                                        "enim",
                                        "alias"),
                                    true,
                                    true))"
                            GroupCategories="@(["voluptas",
                                "similique",
                                "veniam"])"
                            LicenseInfo="@("temporibus")"
                            Modified="@(new DateTime(2020, 4, 11, 13, 7, 29))"
                            Name="@("phone")"
                            NumComments="@(994.7762)"
                            NumRatings="@(859.4068)"
                            NumViews="@(509.3272)"
                            Owner="@("Osborne Herman")"
                            OwnerFolder="@("Brycen Parisian")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Anonymous,
                                    ["non",
                                        "magnam",
                                        "in",
                                        "labore"],
                                    "sed",
                                    "beatae",
                                    "facere",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("rerum")"
                            Screenshots="@(["quos",
                                "quo",
                                "a"])"
                            Size="@(4)"
                            Snippet="@("quo")"
                            Tags="@(["et",
                                "mollitia"])"
                            Title="@("labore aut voluptatem")"
                            TypeKeywords="@(["incidunt",
                                "earum",
                                "est"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-145.3643,
                    -76.7131,
                    78.9035,
                    -0.9203,
                    620.1033,
                    642.4994,
                    296.4909,
                    269.3659,
                new SpatialReference(3,
                        "quod",
                        "sint",
                        "officiis"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("voluptatem",
                    54.7696));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(897.9039,
                582.1730,
                775.8360,
            new ElevationLayerFetchTileOptions(200.6752));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(483.4136,
                686.2835,
                924.8718);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polyline([new MapPath([new MapPoint([376.6139,
                        284.2678,
                        553.7474]),
                    new MapPoint([708.9207,
                        367.5975,
                        688.4011,
                        281.5838]),
                    new MapPoint([335.6641,
                        781.6485,
                        246.2452,
                        880.0708])]),
                    new MapPath([new MapPoint([404.0077,
                            550.2759,
                            289.3496]),
                        new MapPoint([745.2830,
                            880.8401,
                            634.5477,
                            694.1713])])],
                new SpatialReference(4,
                        "labore",
                        "incidunt",
                        "magnam"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("expedita",
                    303.5927,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(-20.5260,
                    -15.2752,
                    -78.0447,
                    29.9508,
                    976.4810,
                    994.3402,
                    416.6560,
                    154.6237,
                new SpatialReference(8,
                        "dolor",
                        "quis",
                        "reiciendis"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "cupiditate",
                    "qui",
                    4.9139,
                    ["perferendis",
                        "a",
                        "culpa"],
                    new DateTime(2004, 5, 15, 22, 27, 20),
                    "tempora",
                    "sunt natus itaque voluptatum vero quasi asperiores",
                new Extent(-28.3453,
                        -81.9310,
                        72.4388,
                        -19.7766,
                        857.0758,
                        208.6530,
                        35.1990,
                        551.6283,
                    new SpatialReference(1,
                            "reiciendis",
                            "architecto",
                            "sit"),
                        true,
                        true),
                    ["nobis",
                        "a"],
                    "at",
                    new DateTime(2011, 11, 13, 20, 56, 21),
                    "status",
                    722.9691);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(275.9395,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(8,
                        "totam",
                        56.0818,
                        44307169.2961)],
                new Point(-68.4374,
                        -11.1422,
                        154.5409,
                        29.1603,
                        781.1602,
                    new SpatialReference(9,
                            "voluptas",
                            "quis",
                            "corrupti"),
                        true,
                        true,
                        301.0606),
                    [1,
                        9,
                        9,
                        9],
                new SpatialReference(4,
                        "magnam",
                        "et",
                        "enim"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 4, 20, 14, 57, 24),
                    new DateTime(2020, 4, 19, 10, 21, 58));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
