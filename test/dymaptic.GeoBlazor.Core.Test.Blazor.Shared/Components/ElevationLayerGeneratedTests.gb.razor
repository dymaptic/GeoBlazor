@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("dolor")"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.7095)"
                        PersistenceEnabled="@(true)"
                        Title="@("impedit quia odio")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 9, 22, 18, 6, 45))"
                            End="@(new DateTime(2014, 11, 16, 5, 29, 10))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(51.7895)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "eius",
                                    56.1598,
                                    36461019.9537)])"
                            Origin="@(new Point(32.7716,
                                    -39.3133,
                                    142.7377,
                                    67.6933,
                                    497.5116,
                                new SpatialReference(2,
                                        "deserunt",
                                        "commodi",
                                        "rerum"),
                                    true,
                                    true,
                                    176.1491))"
                            Size="@([6])">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("ab")"
                                Wkt="@("unde")"
                                Wkt2="@("molestiae")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(53.7481)"
                            Xmin="@(-161.6852)"
                            Ymax="@(78.9478)"
                            Ymin="@(-12.9189)"
                            Zmax="@(82.8859)"
                            Zmin="@(919.3113)"
                            Mmax="@(816.4362)"
                            Mmin="@(589.2782)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("et")"
                                Wkt="@("voluptatem")"
                                Wkt2="@("qui")">
                            </SpatialReference>
                        </Extent>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-121.0262,
                    27.2615,
                    23.8779,
                    54.7201,
                    628.1933,
                    897.2272,
                    520.8431,
                    670.0218,
                new SpatialReference(3,
                        "quos",
                        "voluptas",
                        "et"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("aut",
                    384.2096));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(866.0713,
                790.9518,
                855.5652,
            new ElevationLayerFetchTileOptions(881.0711));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(649.7527,
                698.6870,
                675.0397);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Point(-81.3930,
                    -84.6332,
                    51.8199,
                    -67.6535,
                    481.1786,
                new SpatialReference(9,
                        "facere",
                        "velit",
                        "facere"),
                    true,
                    true,
                    351.2696),
            new ElevationLayerQueryElevationOptions("ut",
                    700.6306,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(17.0242,
                    71.4775,
                    81.7966,
                    -68.9448,
                    668.4882,
                    639.4731,
                    478.3529,
                    115.1962,
                new SpatialReference(1,
                        "aliquid",
                        "voluptates",
                        "aut"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(992.3430,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(4,
                        "alias",
                        8.2832,
                        4404796.2718),
                new LOD(3,
                        "eum",
                        40.0465,
                        33979509.2258)],
                new Point(104.9281,
                        -66.8485,
                        -64.3231,
                        78.2456,
                        779.7575,
                    new SpatialReference(3,
                            "deserunt",
                            "natus",
                            "quos"),
                        true,
                        true,
                        179.2903),
                    [3,
                        8],
                new SpatialReference(8,
                        "esse",
                        "nam",
                        "placeat"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 2, 12, 7, 25, 27),
                    new DateTime(2009, 11, 20, 7, 51, 44));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
