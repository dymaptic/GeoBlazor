@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("necessitatibus")"
                        FullExtent="@(new Extent(142.8500,
                                40.1406,
                                -29.8007,
                                -52.7316,
                                566.6495,
                                959.3186,
                                265.6707,
                                801.3468,
                            new SpatialReference(5,
                                    "optio",
                                    "mollitia",
                                    "eveniet"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.4521)"
                        PersistenceEnabled="@(true)"
                        Title="@("quidem non perspiciatis")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2021, 8, 4, 12, 17, 48))"
                            End="@(new DateTime(2007, 8, 2, 11, 13, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(178.3609)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "saepe",
                                    18.9746,
                                    22345490.6911),
                            new LOD(6,
                                    "dolorem",
                                    75.7014,
                                    15984301.2681)])"
                            Origin="@(new Point(-105.1780,
                                    -35.8467,
                                    24.6969,
                                    62.5124,
                                    427.9899,
                                new SpatialReference(1,
                                        "aliquid",
                                        "exercitationem",
                                        "cumque"),
                                    true,
                                    true,
                                    967.1038))"
                            Size="@([5,
                                2,
                                8,
                                6])"
                            SpatialReference="@(new SpatialReference(8,
                                    "porro",
                                    "mollitia",
                                    "et"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("ratione")"
                            ApiKey="@("modi")"
                            AvgRating="@(166.2113)"
                            Categories="@(["harum",
                                "nihil"])"
                            Created="@(new DateTime(2012, 9, 25, 20, 50, 54))"
                            Culture="@("possimus")"
                            Description="@("commodi dolore ipsum magnam")"
                            Extent="@(new Extent(-102.3241,
                                    -59.8860,
                                    -84.0905,
                                    10.8192,
                                    426.7040,
                                    3.0718,
                                    663.3525,
                                    108.8678,
                                new SpatialReference(7,
                                        "et",
                                        "facilis",
                                        "mollitia"),
                                    true,
                                    true))"
                            GroupCategories="@(["possimus",
                                "magni",
                                "aliquam"])"
                            LicenseInfo="@("omnis")"
                            Modified="@(new DateTime(2000, 6, 22, 12, 43, 1))"
                            Name="@("group")"
                            NumComments="@(453.5888)"
                            NumRatings="@(95.2363)"
                            NumViews="@(166.2574)"
                            Owner="@("Rachael Ebert")"
                            OwnerFolder="@("Dante Herzog")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["laboriosam",
                                        "consequatur",
                                        "labore",
                                        "veniam"],
                                    "est",
                                    "ad",
                                    "architecto",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("eaque")"
                            Screenshots="@(["ea",
                                "alias",
                                "molestias",
                                "aut"])"
                            Size="@(2)"
                            Snippet="@("et")"
                            Tags="@(["ad",
                                "rem"])"
                            Title="@("quod placeat amet")"
                            TypeKeywords="@(["est",
                                "ut"])"
                            Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        </PortalItem>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-24.3055,
                    -154.2030,
                    21.6837,
                    -29.8535,
                    15.1798,
                    250.6143,
                    284.7875,
                    698.6329,
                new SpatialReference(3,
                        "repellat",
                        "laboriosam",
                        "qui"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("qui",
                    694.3978));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(36.4676,
                622.3118,
                708.0138,
            new ElevationLayerFetchTileOptions(850.1465));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(41.0054,
                237.0497,
                457.5160);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polyline([new MapPath([new MapPoint([408.8380,
                        766.7084,
                        228.9157,
                        822.0487]),
                    new MapPoint([963.9730,
                        573.9780,
                        805.5746]),
                    new MapPoint([140.2184,
                        488.2789,
                        455.8805]),
                    new MapPoint([545.9740,
                        515.7446])])],
                new SpatialReference(9,
                        "doloremque",
                        "vero",
                        "maxime"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("libero",
                    5.5749,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(81.6247,
                    8.3609,
                    -70.1865,
                    -46.3692,
                    779.8393,
                    458.8171,
                    411.0953,
                    154.8460,
                new SpatialReference(8,
                        "voluptatem",
                        "quasi",
                        "repellendus"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "rerum",
                    "atque",
                    665.1486,
                    ["odio",
                        "aperiam"],
                    new DateTime(2021, 5, 19, 17, 17, 21),
                    "distinctio",
                    "animi libero molestiae aut",
                new Extent(-50.6659,
                        50.8264,
                        29.7178,
                        -25.5465,
                        629.2503,
                        519.3171,
                        742.7054,
                        286.5202,
                    new SpatialReference(2,
                            "necessitatibus",
                            "culpa",
                            "consequatur"),
                        true,
                        true),
                    ["est",
                        "minus",
                        "necessitatibus"],
                    "enim",
                    new DateTime(2013, 2, 16, 22, 9, 22),
                    "password",
                    135.7126);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(395.1652,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(2,
                        "sed",
                        34.2844,
                        24666832.0648),
                new LOD(3,
                        "unde",
                        17.0081,
                        10257111.8637)],
                new Point(-33.7509,
                        56.0585,
                        80.3814,
                        45.4880,
                        487.4005,
                    new SpatialReference(1,
                            "id",
                            "necessitatibus",
                            "porro"),
                        true,
                        true,
                        45.3586),
                    [4,
                        5,
                        3],
                new SpatialReference(6,
                        "voluptatem",
                        "ea",
                        "iste"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 11, 23, 8, 18, 26),
                    new DateTime(2022, 9, 3, 5, 22, 37));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
