@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("consequatur")"
                        FullExtent="@(new Extent(4.2330,
                                36.0369,
                                -62.1981,
                                85.1466,
                                723.9111,
                                140.3870,
                                526.8955,
                                301.0606,
                            new SpatialReference(2,
                                    "non",
                                    "vero",
                                    "aliquid"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.1285)"
                        PersistenceEnabled="@(true)"
                        Title="@("in ex molestiae")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2009, 3, 6, 17, 29, 40))"
                            End="@(new DateTime(2002, 10, 22, 9, 1, 4))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(636.3798)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "atque",
                                    65.9943,
                                    49216420.9615)])"
                            Origin="@(new Point(81.4399,
                                    -60.1009,
                                    -146.4235,
                                    -3.9875,
                                    205.9261,
                                new SpatialReference(6,
                                        "quisquam",
                                        "delectus",
                                        "incidunt"),
                                    true,
                                    true,
                                    569.9606))"
                            Size="@([5,
                                2])"
                            SpatialReference="@(new SpatialReference(6,
                                    "nesciunt",
                                    "earum",
                                    "sit"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("voluptas")"
                            ApiKey="@("incidunt")"
                            AvgRating="@(280.2991)"
                            Categories="@(["nulla",
                                "deleniti"])"
                            Created="@(new DateTime(2018, 8, 9, 15, 50, 48))"
                            Culture="@("corrupti")"
                            Description="@("rem autem sed amet")"
                            Extent="@(new Extent(25.0675,
                                    -153.4792,
                                    47.8098,
                                    20.6503,
                                    420.3556,
                                    902.6918,
                                    979.5161,
                                    860.3135,
                                new SpatialReference(8,
                                        "earum",
                                        "tenetur",
                                        "dolorem"),
                                    true,
                                    true))"
                            GroupCategories="@(["autem",
                                "tempore",
                                "non"])"
                            LicenseInfo="@("exercitationem")"
                            Modified="@(new DateTime(2015, 5, 21, 12, 50, 9))"
                            Name="@("createdAt")"
                            NumComments="@(399.8593)"
                            NumRatings="@(67.1455)"
                            NumViews="@(649.0310)"
                            Owner="@("Deron Little")"
                            OwnerFolder="@("Reese Jacobs")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["a",
                                        "nostrum"],
                                    "in",
                                    "laboriosam",
                                    "laudantium",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("molestiae")"
                            Screenshots="@(["eius",
                                "laboriosam",
                                "vero"])"
                            Size="@(1)"
                            Snippet="@("omnis")"
                            Tags="@(["itaque",
                                "et"])"
                            Title="@("ipsa ut non")"
                            TypeKeywords="@(["cupiditate",
                                "aliquam",
                                "cum"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(143.1569,
                    -131.1950,
                    45.4464,
                    -74.3919,
                    97.5243,
                    976.7803,
                    554.4993,
                    370.4337,
                new SpatialReference(7,
                        "consequatur",
                        "optio",
                        "repudiandae"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("ex",
                    166.4678));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(274.7970,
                504.5112,
                869.5620,
            new ElevationLayerFetchTileOptions(815.7440));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(977.0926,
                827.9918,
                505.7825);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Extent(-3.8020,
                    -160.6284,
                    53.1227,
                    33.3457,
                    376.2119,
                    898.7981,
                    685.3839,
                    444.1045,
                new SpatialReference(1,
                        "fugiat",
                        "pariatur",
                        "voluptatem"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("alias",
                    949.3369,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(31.5836,
                    140.2631,
                    56.8132,
                    79.0934,
                    779.0184,
                    649.6603,
                    161.9361,
                    471.0304,
                new SpatialReference(6,
                        "iste",
                        "odio",
                        "optio"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "distinctio",
                    "dolorem",
                    317.4239,
                    ["odio",
                        "perspiciatis",
                        "et"],
                    new DateTime(2005, 8, 6, 0, 28, 23),
                    "quia",
                    "vero exercitationem quis aut sint ipsum veritatis",
                new Extent(-177.9988,
                        48.6454,
                        -35.5781,
                        53.6042,
                        525.9052,
                        974.7798,
                        718.9300,
                        842.9570,
                    new SpatialReference(8,
                            "numquam",
                            "ducimus",
                            "quas"),
                        true,
                        true),
                    ["earum",
                        "repellat",
                        "itaque",
                        "sapiente"],
                    "praesentium",
                    new DateTime(2000, 7, 11, 7, 8, 12),
                    "group",
                    523.1183);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(345.2866,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(9,
                        "consequatur",
                        54.2736,
                        33711487.5754),
                new LOD(9,
                        "ea",
                        85.8351,
                        8733965.1789),
                new LOD(4,
                        "suscipit",
                        23.8300,
                        26117523.8208)],
                new Point(68.9942,
                        22.9905,
                        158.4523,
                        70.2208,
                        772.0578,
                    new SpatialReference(8,
                            "beatae",
                            "placeat",
                            "impedit"),
                        true,
                        true,
                        544.5487),
                    [2,
                        6],
                new SpatialReference(5,
                        "aspernatur",
                        "rerum",
                        "velit"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 2, 8, 14, 28, 13),
                    new DateTime(2022, 4, 26, 2, 18, 54));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
