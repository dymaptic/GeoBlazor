@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("nesciunt")"
                        FullExtent="@(new Extent(130.0775,
                                11.6869,
                                -83.8188,
                                77.2567,
                                379.4702,
                                322.0817,
                                493.0789,
                                99.4527,
                            new SpatialReference(9,
                                    "repellendus",
                                    "repellat",
                                    "quisquam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.7862)"
                        PersistenceEnabled="@(true)"
                        Title="@("quis fuga pariatur")"
                        Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 11, 1, 22, 27, 6))"
                            End="@(new DateTime(2004, 5, 1, 11, 35, 4))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(540.3292)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "non",
                                    59.1113,
                                    40628202.7394),
                            new LOD(1,
                                    "praesentium",
                                    90.6070,
                                    12816266.0955),
                            new LOD(6,
                                    "in",
                                    44.2584,
                                    25391406.6791),
                            new LOD(9,
                                    "eveniet",
                                    16.3067,
                                    1986976.6360)])"
                            Origin="@(new Point(-12.3754,
                                    -32.8367,
                                    -4.7131,
                                    46.9742,
                                    926.4199,
                                new SpatialReference(3,
                                        "iure",
                                        "fuga",
                                        "eveniet"),
                                    true,
                                    true,
                                    829.8402))"
                            Size="@([4,
                                9,
                                1])"
                            SpatialReference="@(new SpatialReference(5,
                                    "ut",
                                    "fugit",
                                    "laborum"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("doloribus")"
                            ApiKey="@("quam")"
                            AvgRating="@(698.0831)"
                            Categories="@(["nobis",
                                "qui",
                                "et",
                                "voluptas"])"
                            Created="@(new DateTime(2011, 6, 24, 13, 58, 52))"
                            Culture="@("architecto")"
                            Description="@("sapiente omnis suscipit eos odit eos eius")"
                            Extent="@(new Extent(-27.0721,
                                    -50.8235,
                                    54.4902,
                                    -56.2367,
                                    235.5487,
                                    942.6524,
                                    660.1964,
                                    96.8484,
                                new SpatialReference(9,
                                        "sapiente",
                                        "cupiditate",
                                        "sit"),
                                    true,
                                    true))"
                            GroupCategories="@(["blanditiis",
                                "magni",
                                "vel",
                                "officia"])"
                            LicenseInfo="@("omnis")"
                            Modified="@(new DateTime(2023, 6, 6, 14, 40, 4))"
                            Name="@("title")"
                            NumComments="@(608.9902)"
                            NumRatings="@(964.0859)"
                            NumViews="@(835.8399)"
                            Owner="@("Monte Turner")"
                            OwnerFolder="@("Kenneth Bergstrom")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["numquam",
                                        "dolores",
                                        "error",
                                        "aut"],
                                    "quas",
                                    "eos",
                                    "porro",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("quisquam")"
                            Screenshots="@(["et",
                                "vel"])"
                            Size="@(7)"
                            Snippet="@("distinctio")"
                            Tags="@(["et",
                                "provident",
                                "alias"])"
                            Title="@("nihil et provident")"
                            TypeKeywords="@(["nobis",
                                "minus"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                        </PortalItem>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(29.8689,
                    174.7468,
                    4.7798,
                    74.2383,
                    957.2089,
                    234.1578,
                    370.9108,
                    370.0399,
                new SpatialReference(7,
                        "sunt",
                        "saepe",
                        "odio"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("sit",
                    86.0213));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(802.9099,
                950.7505,
                437.7274,
            new ElevationLayerFetchTileOptions(276.2571));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(461.0650,
                900.9035,
                10.2840);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polygon([new MapPath([new MapPoint([52.9267,
                        280.3661,
                        6.2145,
                        287.0554]),
                    new MapPoint([278.1557,
                        974.9052,
                        611.2288,
                        923.0708])]),
                    new MapPath([new MapPoint([14.7374,
                            702.1894,
                            595.1972,
                            944.3586]),
                        new MapPoint([815.2533,
                            818.6395]),
                        new MapPoint([379.6126,
                            253.5613,
                            928.7481])]),
                    new MapPath([new MapPoint([88.4119,
                            846.7736,
                            525.9223]),
                        new MapPoint([129.4311,
                            593.3491,
                            262.7766,
                            851.0867]),
                        new MapPoint([783.7106,
                            212.1528,
                            574.2488,
                            747.1067]),
                        new MapPoint([202.9799,
                            940.2349,
                            217.2524])])],
                new SpatialReference(8,
                        "asperiores",
                        "quia",
                        "ex"),
                new Point(174.8900,
                        40.5358,
                        -6.3224,
                        -75.0103,
                        459.5154,
                    new SpatialReference(8,
                            "sed",
                            "ipsam",
                            "asperiores"),
                        true,
                        true,
                        872.0999),
                    true,
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("nihil",
                    320.5668,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(4.6497,
                    -178.0222,
                    67.5075,
                    49.2632,
                    117.8799,
                    189.4771,
                    25.0179,
                    542.6284,
                new SpatialReference(2,
                        "sed",
                        "est",
                        "nisi"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "sapiente",
                    "occaecati",
                    395.0067,
                    ["nesciunt",
                        "ad",
                        "et"],
                    new DateTime(2022, 9, 13, 2, 6, 50),
                    "animi",
                    "qui quia perferendis sed",
                new Extent(-36.4222,
                        149.0300,
                        14.9073,
                        80.8175,
                        690.2924,
                        600.4477,
                        362.5345,
                        730.5023,
                    new SpatialReference(3,
                            "laudantium",
                            "officiis",
                            "debitis"),
                        true,
                        true),
                    ["consequatur",
                        "illum"],
                    "molestiae",
                    new DateTime(2011, 10, 1, 9, 35, 50),
                    "name",
                    948.3404);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(141.7465,
                    TileInfoFormat.Png,
                    true,
                [new LOD(2,
                        "suscipit",
                        59.2594,
                        43089728.6371),
                new LOD(3,
                        "eaque",
                        42.9979,
                        40393175.2801),
                new LOD(3,
                        "aspernatur",
                        65.2922,
                        35772508.6862)],
                new Point(165.6240,
                        62.7028,
                        -167.2601,
                        39.4704,
                        540.7720,
                    new SpatialReference(4,
                            "sequi",
                            "delectus",
                            "maiores"),
                        true,
                        true,
                        804.0487),
                    [4,
                        8,
                        8,
                        8],
                new SpatialReference(9,
                        "est",
                        "quo",
                        "dolorem"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 3, 5, 17, 20, 29),
                    new DateTime(2001, 5, 15, 1, 17, 6));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
