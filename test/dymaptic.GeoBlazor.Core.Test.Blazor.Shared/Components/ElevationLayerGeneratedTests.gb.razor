@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("veritatis")"
                        FullExtent="@(new Extent(-47.6786,
                                160.9779,
                                21.8790,
                                12.7098,
                                14.8884,
                                282.6120,
                                325.1864,
                                209.0031,
                            new SpatialReference(5,
                                    "aperiam",
                                    "vel",
                                    "laudantium"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.9099)"
                        PersistenceEnabled="@(true)"
                        Title="@("numquam excepturi aut")"
                        Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        <TimeExtent 
                            Start="@(new DateTime(2019, 9, 4, 6, 33, 4))"
                            End="@(new DateTime(2012, 8, 15, 7, 50, 8))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(311.1343)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "qui",
                                    98.6800,
                                    3193861.0622),
                            new LOD(8,
                                    "labore",
                                    47.7639,
                                    13870590.2432),
                            new LOD(6,
                                    "voluptatibus",
                                    87.6263,
                                    36365244.9649),
                            new LOD(6,
                                    "officia",
                                    82.2235,
                                    39933434.0146)])"
                            Origin="@(new Point(-79.9164,
                                    -31.4426,
                                    -113.4456,
                                    39.8992,
                                    226.1293,
                                new SpatialReference(1,
                                        "sequi",
                                        "magnam",
                                        "mollitia"),
                                    true,
                                    true,
                                    471.0157))"
                            Size="@([6,
                                7,
                                7])"
                            SpatialReference="@(new SpatialReference(9,
                                    "sit",
                                    "beatae",
                                    "ullam"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("nulla")"
                            ApiKey="@("esse")"
                            AvgRating="@(554.1327)"
                            Categories="@(["in",
                                "ut",
                                "mollitia"])"
                            Created="@(new DateTime(2016, 9, 1, 21, 29, 55))"
                            Culture="@("velit")"
                            Description="@("deleniti eum laudantium nemo")"
                            Extent="@(new Extent(41.9296,
                                    126.6174,
                                    23.5572,
                                    51.5109,
                                    304.4499,
                                    540.4838,
                                    692.7691,
                                    429.3936,
                                new SpatialReference(9,
                                        "optio",
                                        "itaque",
                                        "odio"),
                                    true,
                                    true))"
                            GroupCategories="@(["dolores",
                                "nisi"])"
                            LicenseInfo="@("aut")"
                            Modified="@(new DateTime(2003, 4, 1, 13, 44, 28))"
                            Name="@("id")"
                            NumComments="@(966.0635)"
                            NumRatings="@(468.4034)"
                            NumViews="@(510.3222)"
                            Owner="@("Kyla Klein")"
                            OwnerFolder="@("Muriel Schneider")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["illo",
                                        "asperiores",
                                        "et"],
                                    "impedit",
                                    "ut",
                                    "quia",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("eum")"
                            Screenshots="@(["consequatur",
                                "ea",
                                "earum",
                                "facilis"])"
                            Size="@(7)"
                            Snippet="@("quia")"
                            Tags="@(["atque",
                                "dolorem",
                                "quia"])"
                            Title="@("aut et numquam")"
                            TypeKeywords="@(["ad",
                                "dolor"])"
                            Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                        </PortalItem>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(20.8624,
                    84.5439,
                    68.6802,
                    83.1862,
                    291.0794,
                    699.4226,
                    362.3187,
                    336.4423,
                new SpatialReference(5,
                        "qui",
                        "ut",
                        "eos"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("tempora",
                    507.1835));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(683.5594,
                192.1789,
                913.8263,
            new ElevationLayerFetchTileOptions(781.2199));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(137.1633,
                488.3358,
                563.0732);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Polyline([new MapPath([new MapPoint([532.1281,
                        614.2654,
                        508.8093,
                        639.2576]),
                    new MapPoint([455.6561,
                        658.2318,
                        406.2157]),
                    new MapPoint([66.4766,
                        328.5243])]),
                    new MapPath([new MapPoint([86.1550,
                            533.1130]),
                        new MapPoint([477.4071,
                            821.9679,
                            248.8834,
                            581.8994])]),
                    new MapPath([new MapPoint([670.9053,
                            933.4633,
                            931.9941,
                            335.6819]),
                        new MapPoint([128.7426,
                            27.2439]),
                        new MapPoint([268.1461,
                            26.9552,
                            129.8453,
                            81.8362])]),
                    new MapPath([new MapPoint([991.0890,
                            441.4121,
                            207.6117,
                            593.0779]),
                        new MapPoint([718.5498,
                            44.1279,
                            817.6218]),
                        new MapPoint([964.3392,
                            432.4446,
                            615.1590,
                            926.3355]),
                        new MapPoint([890.9665,
                            544.9750,
                            421.2355,
                            391.3650])])],
                new SpatialReference(5,
                        "molestias",
                        "ex",
                        "dicta"),
                    true,
                    true),
            new ElevationLayerQueryElevationOptions("unde",
                    191.1605,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(25.5563,
                    -87.4828,
                    -48.5882,
                    -35.8405,
                    483.1955,
                    325.6501,
                    749.9432,
                    667.4183,
                new SpatialReference(6,
                        "pariatur",
                        "aut",
                        "odit"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "voluptates",
                    "quos",
                    167.7242,
                    ["magnam",
                        "voluptas",
                        "beatae"],
                    new DateTime(2001, 4, 14, 19, 49, 27),
                    "incidunt",
                    "dolores nulla dolore minus ut adipisci",
                new Extent(2.4852,
                        60.8639,
                        -9.5139,
                        -7.2987,
                        847.2338,
                        922.3632,
                        867.6720,
                        602.5530,
                    new SpatialReference(6,
                            "ad",
                            "autem",
                            "odio"),
                        true,
                        true),
                    ["consequatur",
                        "dolorem",
                        "est"],
                    "et",
                    new DateTime(2012, 5, 6, 22, 42, 22),
                    "comment",
                    601.5160);
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(872.2523,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(1,
                        "molestias",
                        76.1298,
                        4768475.8839)],
                new Point(-96.4262,
                        -4.8078,
                        177.0508,
                        -13.6154,
                        214.3199,
                    new SpatialReference(4,
                            "aut",
                            "sunt",
                            "illo"),
                        true,
                        true,
                        402.5636),
                    [4,
                        9],
                new SpatialReference(7,
                        "necessitatibus",
                        "alias",
                        "inventore"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 1, 13, 7, 13, 31),
                    new DateTime(2020, 11, 24, 22, 35, 44));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
