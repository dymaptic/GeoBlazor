@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Screen)"
                        Effect="@(new Effect("non",
                            28902219.6977))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(4407677.1760)"
                        MinScale="@(43659.7512)"
                        Opacity="@(0.9823)"
                        PersistenceEnabled="@(true)"
                        Title="@("qui quo consequatur")">
                        <TimeExtent 
                            Start="@(new DateTime(2002, 7, 20, 17, 42, 22))"
                            End="@(new DateTime(2018, 1, 5, 16, 22, 14))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("omnis maxime molestiae blanditiis")"
                            KMLSublayerId="@(4)"
                            NetworkLink="@("ab")"
                            Title="@("iure aspernatur repudiandae")">
                        </KMLSublayer>
                        <PortalItem />
                        <Extent 
                            Xmax="@(153.0396)"
                            Xmin="@(159.0919)"
                            Ymax="@(70.7753)"
                            Ymin="@(-12.2376)"
                            Zmax="@(142.3281)"
                            Zmin="@(995.1334)"
                            Mmax="@(938.2253)"
                            Mmin="@(468.5706)"
                            SpatialReference="@(new SpatialReference(6,
                                    "dolorum",
                                    "provident",
                                    "sit"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(81.2868,
                    173.9452,
                    -35.7851,
                    50.7126,
                    305.3062,
                    572.5446,
                    875.3101,
                    548.4613,
                new SpatialReference(8,
                        "a",
                        "molestias",
                        "qui"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("eaque aut cupiditate totam",
                    9,
                    "architecto",
                    "enim provident eaque")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 8, 21, 2, 49, 10),
                    new DateTime(2023, 8, 26, 4, 37, 20));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
