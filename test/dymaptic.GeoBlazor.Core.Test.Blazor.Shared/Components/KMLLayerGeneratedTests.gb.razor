@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Normal)"
                        Effect="@(new Effect("soluta",
                            27555641.3183))"
                        FullExtent="@(new Extent(155.4768,
                                163.9118,
                                -13.2137,
                                -79.7740,
                                496.2490,
                                115.2738,
                                49.9802,
                                552.6744,
                            new SpatialReference(9,
                                    "sunt",
                                    "tempore",
                                    "voluptatem"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(15971703.8819)"
                        MinScale="@(29283.1525)"
                        Opacity="@(0.9123)"
                        PersistenceEnabled="@(true)"
                        Title="@("quo omnis quia")">
                        <TimeExtent 
                            Start="@(new DateTime(2012, 1, 5, 4, 23, 24))"
                            End="@(new DateTime(2000, 2, 12, 19, 57, 24))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("ut dolorum aliquam molestiae earum nihil")"
                            KMLSublayerId="@(8)"
                            NetworkLink="@("rerum")"
                            Title="@("molestiae possimus omnis")">
                        </KMLSublayer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("voluptatem")"
                            ApiKey="@("iste")"
                            AvgRating="@(197.8627)"
                            Categories="@(["est",
                                "asperiores"])"
                            Created="@(new DateTime(2014, 3, 24, 11, 57, 21))"
                            Culture="@("in")"
                            Description="@("rerum esse animi autem deleniti")"
                            Extent="@(new Extent(83.9569,
                                    151.7907,
                                    -82.0575,
                                    11.7730,
                                    602.9525,
                                    425.5684,
                                    903.2538,
                                    45.6234,
                                new SpatialReference(8,
                                        "iure",
                                        "sit",
                                        "earum"),
                                    true,
                                    true))"
                            GroupCategories="@(["doloremque",
                                "sapiente"])"
                            LicenseInfo="@("sed")"
                            Modified="@(new DateTime(2009, 5, 16, 15, 29, 39))"
                            Name="@("name")"
                            NumComments="@(461.7509)"
                            NumRatings="@(819.4311)"
                            NumViews="@(16.5961)"
                            Owner="@("Christian Jacobi")"
                            OwnerFolder="@("Nicola Mosciski")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Anonymous,
                                    ["dolores",
                                        "a",
                                        "eius",
                                        "eaque"],
                                    "et",
                                    "modi",
                                    "rerum",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("velit")"
                            Screenshots="@(["quos",
                                "incidunt",
                                "praesentium",
                                "est"])"
                            Size="@(4)"
                            Snippet="@("voluptatibus")"
                            Tags="@(["voluptatibus",
                                "amet"])"
                            Title="@("reiciendis laudantium voluptas")"
                            TypeKeywords="@(["ut",
                                "et",
                                "dolores",
                                "doloremque"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                        </PortalItem>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "dolor",
                    "nam",
                    522.7579,
                    ["qui",
                        "ut"],
                    new DateTime(2015, 1, 14, 10, 2, 30),
                    "incidunt",
                    "provident consectetur eum nulla",
                new Extent(-156.0280,
                        134.6349,
                        -9.4856,
                        36.7212,
                        843.8380,
                        248.6152,
                        367.4299,
                        814.5816,
                    new SpatialReference(5,
                            "sed",
                            "quo",
                            "cumque"),
                        true,
                        true),
                    ["amet",
                        "sequi"],
                    "eos",
                    new DateTime(2005, 10, 12, 8, 46, 22),
                    "category",
                    278.4685);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Lighter;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(23.4705,
                    -81.5719,
                    10.6368,
                    45.5857,
                    50.6084,
                    582.5933,
                    722.7459,
                    588.2139,
                new SpatialReference(8,
                        "incidunt",
                        "placeat",
                        "nemo"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("qui aut aliquam aut",
                    7,
                    "rerum",
                    "nihil aspernatur nisi"),
            new KMLSublayer("iste consectetur asperiores at ut dolorem qui",
                    7,
                    "quia",
                    "corrupti in et"),
            new KMLSublayer("et mollitia provident consectetur iste exercitationem suscipit",
                    9,
                    "porro",
                    "a aliquid et"),
            new KMLSublayer("beatae incidunt corporis doloremque",
                    3,
                    "voluptatum",
                    "ipsam omnis nemo")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2014, 11, 25, 3, 15, 30),
                    new DateTime(2017, 6, 12, 22, 26, 35));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
