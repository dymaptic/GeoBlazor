@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.SourceAtop)"
                        Effect="@(new Effect("omnis",
                            754416.2446))"
                        FullExtent="@(new Extent(138.7258,
                                -51.6144,
                                76.1840,
                                5.6769,
                                476.2922,
                                597.2320,
                                644.6945,
                                26.6011,
                            new SpatialReference(2,
                                    "assumenda",
                                    "est",
                                    "earum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(38683950.0205)"
                        MinScale="@(29688.1894)"
                        Opacity="@(0.6379)"
                        PersistenceEnabled="@(true)"
                        Title="@("voluptas assumenda eos")">
                        <TimeExtent 
                            Start="@(new DateTime(2016, 3, 26, 18, 43, 20))"
                            End="@(new DateTime(2022, 5, 4, 18, 35, 41))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("illum autem voluptates laudantium nihil adipisci")"
                            KMLSublayerId="@(1)"
                            NetworkLink="@("autem")"
                            Title="@("rerum eveniet at")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.SourceIn;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(25.3183,
                    -141.7136,
                    -65.3995,
                    73.6643,
                    826.0870,
                    897.7511,
                    547.1007,
                    881.7143,
                new SpatialReference(8,
                        "occaecati",
                        "neque",
                        "autem"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("facere laborum ipsam ut ipsum aut",
                    5,
                    "quia",
                    "et dolorem veritatis"),
            new KMLSublayer("et ipsum aut et molestias deserunt aut",
                    6,
                    "eum",
                    "est voluptatem sed"),
            new KMLSublayer("et ipsa esse pariatur error",
                    5,
                    "ex",
                    "ut sapiente qui")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 9, 27, 2, 45, 14),
                    new DateTime(2005, 11, 21, 1, 30, 17));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
