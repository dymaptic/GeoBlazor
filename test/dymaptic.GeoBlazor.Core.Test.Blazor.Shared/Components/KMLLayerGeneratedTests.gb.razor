@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Luminosity)"
                        Effect="@(new Effect("ratione",
                            43459977.4998))"
                        FullExtent="@(new Extent(123.0739,
                                116.3218,
                                -34.1713,
                                -52.8324,
                                135.1626,
                                82.4820,
                                724.6093,
                                796.2894,
                            new SpatialReference(9,
                                    "voluptatum",
                                    "et",
                                    "et"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(44528330.9466)"
                        MinScale="@(34258.1598)"
                        Opacity="@(0.8855)"
                        PersistenceEnabled="@(true)"
                        Title="@("mollitia hic nulla")">
                        <TimeExtent 
                            Start="@(new DateTime(2011, 11, 7, 7, 25, 8))"
                            End="@(new DateTime(2017, 8, 10, 7, 6, 56))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("vel dicta totam in saepe sint rerum")"
                            KMLSublayerId="@(1)"
                            NetworkLink="@("quo")"
                            Title="@("quia dolore debitis")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Lighter;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-59.9436,
                    117.1198,
                    -86.8902,
                    61.1349,
                    884.1257,
                    887.8150,
                    370.1161,
                    909.2513,
                new SpatialReference(6,
                        "dolorem",
                        "voluptatum",
                        "sed"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("dolorem provident debitis quos perferendis illum quia",
                    2,
                    "et",
                    "adipisci similique eaque"),
            new KMLSublayer("ut hic dolorem quia doloribus aut consequatur",
                    2,
                    "quia",
                    "fugiat corporis sed"),
            new KMLSublayer("quos quidem consectetur in exercitationem voluptatem architecto",
                    3,
                    "doloribus",
                    "necessitatibus animi voluptatum")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 4, 8, 21, 16, 36),
                    new DateTime(2013, 7, 14, 13, 33, 6));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
