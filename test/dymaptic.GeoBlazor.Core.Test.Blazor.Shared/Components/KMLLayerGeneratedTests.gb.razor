@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Reflect)"
                        Effect="@(new Effect("aspernatur",
                            26013767.0759))"
                        FullExtent="@(new Extent(73.8621,
                                11.8804,
                                81.3125,
                                -11.7514,
                                344.3025,
                                700.0782,
                                998.1960,
                                76.9035,
                            new SpatialReference(2,
                                    "ipsum",
                                    "quibusdam",
                                    "ducimus"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(32362521.8156)"
                        MinScale="@(35480.2574)"
                        Opacity="@(0.8152)"
                        PersistenceEnabled="@(true)"
                        Title="@("facere dignissimos ea")">
                        <TimeExtent 
                            Start="@(new DateTime(2017, 11, 22, 10, 16, 20))"
                            End="@(new DateTime(2017, 6, 18, 0, 34, 25))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("aliquam explicabo et facilis soluta dicta et")"
                            KMLSublayerId="@(3)"
                            NetworkLink="@("alias")"
                            Title="@("ipsum corporis dolor")">
                        </KMLSublayer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("sit")"
                            ApiKey="@("qui")"
                            AvgRating="@(732.3576)"
                            Categories="@(["aspernatur",
                                "dolor",
                                "tempore",
                                "dolorem"])"
                            Created="@(new DateTime(2021, 3, 23, 7, 24, 12))"
                            Culture="@("iusto")"
                            Description="@("amet quo sit tempore optio incidunt non")"
                            Extent="@(new Extent(116.0452,
                                    162.3848,
                                    -88.0200,
                                    63.8989,
                                    201.0755,
                                    888.2361,
                                    604.3393,
                                    714.3994,
                                new SpatialReference(2,
                                        "tempore",
                                        "quisquam",
                                        "velit"),
                                    true,
                                    true))"
                            GroupCategories="@(["ut",
                                "aut"])"
                            LicenseInfo="@("maiores")"
                            Modified="@(new DateTime(2010, 2, 6, 4, 42, 1))"
                            Name="@("title")"
                            NumComments="@(690.0733)"
                            NumRatings="@(949.1701)"
                            NumViews="@(322.7501)"
                            Owner="@("Johnny Grant")"
                            OwnerFolder="@("Cecilia Schoen")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["qui",
                                        "incidunt"],
                                    "nesciunt",
                                    "corrupti",
                                    "ex",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("nemo")"
                            Screenshots="@(["non",
                                "qui",
                                "omnis",
                                "at"])"
                            Size="@(5)"
                            Snippet="@("veniam")"
                            Tags="@(["consequatur",
                                "voluptatum"])"
                            Title="@("facere aut laborum")"
                            TypeKeywords="@(["corporis",
                                "dicta",
                                "tempora",
                                "suscipit"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        </PortalItem>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "dolorem",
                    "totam",
                    390.5614,
                    ["tempora",
                        "non",
                        "non"],
                    new DateTime(2003, 8, 24, 18, 32, 21),
                    "sed",
                    "cupiditate doloremque nobis consequatur",
                new Extent(42.9795,
                        109.6324,
                        -69.6777,
                        53.2141,
                        247.3715,
                        851.8699,
                        203.5454,
                        665.0430,
                    new SpatialReference(8,
                            "sunt",
                            "est",
                            "dolorum"),
                        true,
                        true),
                    ["a",
                        "delectus",
                        "quae",
                        "deserunt"],
                    "fuga",
                    new DateTime(2004, 6, 9, 1, 54, 12),
                    "title",
                    666.4791);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-66.5556,
                    -169.2362,
                    65.0823,
                    10.3749,
                    986.2323,
                    134.1785,
                    453.2647,
                    56.2493,
                new SpatialReference(5,
                        "et",
                        "voluptatum",
                        "dolorum"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("dolores officia molestiae ipsam voluptas",
                    5,
                    "qui",
                    "perferendis quibusdam earum"),
            new KMLSublayer("molestias natus autem soluta voluptatibus",
                    1,
                    "omnis",
                    "voluptatem ea dolorum"),
            new KMLSublayer("optio et delectus dicta eos molestias consequuntur",
                    2,
                    "sit",
                    "aut et aliquid"),
            new KMLSublayer("aut quibusdam numquam mollitia quaerat enim soluta",
                    5,
                    "quo",
                    "aliquid doloribus quibusdam")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 2, 19, 21, 58, 56),
                    new DateTime(2002, 8, 7, 10, 45, 13));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
