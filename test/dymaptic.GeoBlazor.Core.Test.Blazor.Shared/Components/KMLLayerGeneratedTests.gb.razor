@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Saturation)"
                        Effect="@(new Effect("ex",
                            3743008.8832))"
                        FullExtent="@(new Extent(59.3075,
                                42.3211,
                                -45.5661,
                                71.7468,
                                829.1308,
                                791.3726,
                                956.8453,
                                548.1058,
                            new SpatialReference(5,
                                    "et",
                                    "autem",
                                    "provident"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(431512.3203)"
                        MinScale="@(10437.5865)"
                        Opacity="@(0.1672)"
                        PersistenceEnabled="@(true)"
                        Title="@("aliquid ut rerum")">
                        <TimeExtent 
                            Start="@(new DateTime(2014, 5, 12, 7, 5, 41))"
                            End="@(new DateTime(2020, 7, 17, 22, 17, 26))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("culpa quo velit exercitationem fugiat esse sit")"
                            KMLSublayerId="@(9)"
                            NetworkLink="@("mollitia")"
                            Title="@("officiis soluta autem")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Darken;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-108.0924,
                    -125.5420,
                    -9.9309,
                    42.8057,
                    495.0729,
                    173.8980,
                    642.6888,
                    291.8203,
                new SpatialReference(3,
                        "quo",
                        "in",
                        "et"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("ea sit facilis blanditiis est",
                    5,
                    "eos",
                    "omnis provident sed"),
            new KMLSublayer("facere voluptatem voluptatibus tenetur",
                    9,
                    "est",
                    "aut unde velit"),
            new KMLSublayer("sed et maiores provident consequuntur et",
                    3,
                    "itaque",
                    "quidem aut inventore"),
            new KMLSublayer("quis dolore magnam quidem",
                    2,
                    "magnam",
                    "quae cupiditate quo")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 6, 15, 6, 28, 47),
                    new DateTime(2001, 8, 14, 14, 46, 33));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
