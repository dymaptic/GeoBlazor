@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Effect="@(new Effect("nisi",
                            10420810.7896))"
                        FullExtent="@(new Extent(-166.2951,
                                44.8369,
                                0.0962,
                                -18.5792,
                                572.0840,
                                273.2327,
                                223.0893,
                                405.6240,
                            new SpatialReference(9,
                                    "optio",
                                    "sunt",
                                    "quod"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(23341662.4683)"
                        MinScale="@(6939.0820)"
                        Opacity="@(0.4199)"
                        PersistenceEnabled="@(true)"
                        Title="@("sint rerum qui")">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 8, 11, 0, 40, 15))"
                            End="@(new DateTime(2008, 1, 20, 15, 37, 1))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("hic dolorum facere ipsam dolores quia")"
                            KMLSublayerId="@(5)"
                            NetworkLink="@("est")"
                            Title="@("neque ut doloribus")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Plus;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-72.4879,
                    11.4768,
                    -5.4303,
                    21.3641,
                    397.0786,
                    6.1479,
                    201.4382,
                    373.0710,
                new SpatialReference(2,
                        "repellat",
                        "vel",
                        "porro"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("quisquam dolores eum ut et",
                    9,
                    "quas",
                    "voluptates consequuntur quia")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 10, 1, 6, 18, 5),
                    new DateTime(2001, 4, 11, 4, 48, 11));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
