@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.SoftLight)"
                        Effect="@(new Effect("animi",
                            45664591.3460))"
                        FullExtent="@(new Extent(121.0433,
                                174.3306,
                                -25.1519,
                                82.0802,
                                137.8166,
                                870.3317,
                                86.4284,
                                110.5842,
                            new SpatialReference(4,
                                    "et",
                                    "et",
                                    "neque"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(36182403.5903)"
                        MinScale="@(41912.0761)"
                        Opacity="@(0.3330)"
                        PersistenceEnabled="@(true)"
                        Title="@("qui culpa temporibus")">
                        <TimeExtent 
                            Start="@(new DateTime(2019, 3, 22, 3, 15, 46))"
                            End="@(new DateTime(2013, 8, 7, 15, 4, 42))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("et aperiam ducimus sunt")"
                            KMLSublayerId="@(6)"
                            NetworkLink="@("modi")"
                            Title="@("inventore non culpa")">
                        </KMLSublayer>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "ex",
                    "id",
                    871.0906,
                    ["beatae",
                        "voluptatum",
                        "reiciendis",
                        "est"],
                    new DateTime(2012, 4, 1, 21, 55, 42),
                    "labore",
                    "tempore natus in est",
                new Extent(-22.2006,
                        -81.7453,
                        -67.8508,
                        -87.8594,
                        756.8526,
                        971.8212,
                        317.2747,
                        850.3653,
                    new SpatialReference(9,
                            "esse",
                            "tempore",
                            "reiciendis"),
                        true,
                        true),
                    ["ab",
                        "tempora",
                        "eaque",
                        "et"],
                    "vel",
                    new DateTime(2019, 10, 5, 7, 11, 47),
                    "email",
                    965.2227);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-153.7612,
                    63.8624,
                    -78.0536,
                    -78.4159,
                    643.7655,
                    204.1955,
                    953.4499,
                    539.7886,
                new SpatialReference(9,
                        "optio",
                        "voluptas",
                        "eaque"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("maxime et molestiae minus occaecati",
                    8,
                    "laudantium",
                    "qui omnis et"),
            new KMLSublayer("amet possimus sunt officiis",
                    8,
                    "qui",
                    "autem ipsam consequuntur")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 9, 16, 0, 47, 22),
                    new DateTime(2017, 11, 23, 22, 17, 23));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
