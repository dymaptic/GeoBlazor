@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Luminosity)"
                        Effect="@(new Effect("natus",
                            27966044.7097))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(9986760.6220)"
                        MinScale="@(2979.9223)"
                        Opacity="@(0.5951)"
                        PersistenceEnabled="@(true)"
                        Title="@("ut nobis voluptatem")">
                        <TimeExtent 
                            Start="@(new DateTime(2017, 7, 5, 12, 24, 16))"
                            End="@(new DateTime(2019, 1, 17, 1, 20, 11))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("excepturi doloribus laudantium libero")"
                            KMLSublayerId="@(3)"
                            NetworkLink="@("sed")"
                            Title="@("qui dolorem ut")">
                        </KMLSublayer>
                        <PortalItem />
                        <Extent 
                            Xmax="@(69.2018)"
                            Xmin="@(24.1954)"
                            Ymax="@(-38.5135)"
                            Ymin="@(-24.5940)"
                            Zmax="@(294.2436)"
                            Zmin="@(952.4479)"
                            Mmax="@(78.1224)"
                            Mmin="@(47.6103)"
                            SpatialReference="@(new SpatialReference(9,
                                    "doloribus",
                                    "officiis",
                                    "omnis"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Normal;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(55.4323,
                    -85.8906,
                    -72.8069,
                    68.2386,
                    648.1858,
                    609.5427,
                    374.6429,
                    445.7086,
                new SpatialReference(5,
                        "eveniet",
                        "minus",
                        "minima"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("iure quae qui",
                    4,
                    "dolorem",
                    "sed dicta reprehenderit"),
            new KMLSublayer("dicta et",
                    3,
                    "modi",
                    "exercitationem nisi aspernatur")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 9, 13, 17, 0, 56),
                    new DateTime(2013, 6, 12, 20, 10, 16));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
