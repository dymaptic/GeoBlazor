@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.ColorBurn)"
                        Effect="@(new Effect("nisi",
                            2187470.5188))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(15098543.8043)"
                        MinScale="@(43471.2829)"
                        Opacity="@(0.3553)"
                        PersistenceEnabled="@(true)"
                        Title="@("occaecati quae vel")">
                        <TimeExtent 
                            Start="@(new DateTime(2008, 10, 20, 17, 22, 34))"
                            End="@(new DateTime(2010, 9, 1, 7, 13, 24))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("quas a")"
                            KMLSublayerId="@(4)"
                            NetworkLink="@("excepturi")"
                            Title="@("autem et voluptates")">
                        </KMLSublayer>
                        <PortalItem />
                        <Extent 
                            Xmax="@(77.4548)"
                            Xmin="@(-153.7333)"
                            Ymax="@(87.4424)"
                            Ymin="@(-76.6599)"
                            Zmax="@(515.2522)"
                            Zmin="@(518.9808)"
                            Mmax="@(895.5555)"
                            Mmin="@(275.3625)"
                            SpatialReference="@(new SpatialReference(5,
                                    "ut",
                                    "molestiae",
                                    "aut"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(177.5213,
                    15.2522,
                    36.7794,
                    54.1795,
                    343.0999,
                    69.2387,
                    217.3004,
                    379.0121,
                new SpatialReference(7,
                        "tenetur",
                        "ut",
                        "odio"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("molestiae pariatur laborum fugiat",
                    4,
                    "ut",
                    "vitae non asperiores"),
            new KMLSublayer("corrupti consequatur enim blanditiis",
                    6,
                    "iusto",
                    "quia esse iure")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 8, 1, 21, 22, 21),
                    new DateTime(2004, 4, 27, 3, 48, 24));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
