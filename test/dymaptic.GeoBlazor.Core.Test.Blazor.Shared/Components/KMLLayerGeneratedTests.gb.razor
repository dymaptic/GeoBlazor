@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.ColorDodge)"
                        Effect="@(new Effect("eos",
                            20045520.5249))"
                        FullExtent="@(new Extent(-13.5758,
                                171.0661,
                                -15.6218,
                                65.4568,
                                540.0490,
                                756.9123,
                                785.8521,
                                281.2922,
                            new SpatialReference(4,
                                    "dolor",
                                    "dolores",
                                    "odit"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(41873073.0109)"
                        MinScale="@(29909.1003)"
                        Opacity="@(0.8153)"
                        PersistenceEnabled="@(true)"
                        Title="@("minus ea rerum")">
                        <TimeExtent 
                            Start="@(new DateTime(2018, 2, 24, 1, 52, 43))"
                            End="@(new DateTime(2019, 7, 14, 16, 13, 36))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("et vel veritatis expedita voluptatem excepturi")"
                            KMLSublayerId="@(7)"
                            NetworkLink="@("debitis")"
                            Title="@("quos neque minus")">
                        </KMLSublayer>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "fuga",
                    "eum",
                    520.9758,
                    ["facilis",
                        "est"],
                    new DateTime(2022, 8, 23, 16, 53, 22),
                    "quasi",
                    "voluptatibus quisquam quis odio",
                new Extent(-145.5162,
                        -31.5446,
                        3.7768,
                        -23.2392,
                        545.0070,
                        276.1561,
                        160.5233,
                        605.7512,
                    new SpatialReference(4,
                            "sed",
                            "necessitatibus",
                            "nulla"),
                        true,
                        true),
                    ["doloremque",
                        "tempore",
                        "ratione"],
                    "facere",
                    new DateTime(2005, 6, 19, 7, 47, 34),
                    "email",
                    467.4618);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-21.9892,
                    -143.4950,
                    -53.9176,
                    4.3704,
                    340.5698,
                    802.0101,
                    333.2944,
                    667.7864,
                new SpatialReference(7,
                        "itaque",
                        "fugit",
                        "qui"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("sed enim ipsa nesciunt ut omnis",
                    3,
                    "dolor",
                    "ad debitis fuga")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 5, 27, 20, 49, 14),
                    new DateTime(2012, 4, 25, 2, 28, 13));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
