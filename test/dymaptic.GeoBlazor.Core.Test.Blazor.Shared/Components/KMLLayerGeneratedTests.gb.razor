@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Xor)"
                        Effect="@(new Effect("ipsum",
                            14927975.1288))"
                        FullExtent="@(new Extent(-100.3500,
                                -90.1987,
                                -17.5808,
                                11.8708,
                                142.9063,
                                935.8316,
                                312.7227,
                                545.6336,
                            new SpatialReference(4,
                                    "iste",
                                    "incidunt",
                                    "esse"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(20770534.3590)"
                        MinScale="@(43611.0426)"
                        Opacity="@(0.3101)"
                        PersistenceEnabled="@(true)"
                        Title="@("non est tempore")">
                        <TimeExtent 
                            Start="@(new DateTime(2016, 3, 18, 10, 44, 41))"
                            End="@(new DateTime(2021, 9, 25, 12, 17, 57))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("quas esse quo similique ducimus quasi saepe")"
                            KMLSublayerId="@(1)"
                            NetworkLink="@("ipsam")"
                            Title="@("libero ullam iste")">
                        </KMLSublayer>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "deleniti",
                    "similique",
                    145.4247,
                    ["voluptatem",
                        "quisquam",
                        "ipsam"],
                    new DateTime(2002, 2, 19, 17, 26, 10),
                    "enim",
                    "alias quas magni porro",
                new Extent(-155.0985,
                        -84.9590,
                        38.7858,
                        -44.2060,
                        110.0968,
                        371.0572,
                        711.6743,
                        982.0541,
                    new SpatialReference(3,
                            "similique",
                            "eos",
                            "earum"),
                        true,
                        true),
                    ["aut",
                        "quaerat",
                        "nulla"],
                    "eveniet",
                    new DateTime(2001, 1, 12, 9, 46, 34),
                    "category",
                    621.3752);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(15.7597,
                    -118.8841,
                    5.4859,
                    69.4048,
                    871.0561,
                    473.7146,
                    844.3455,
                    819.5684,
                new SpatialReference(8,
                        "necessitatibus",
                        "eum",
                        "qui"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("expedita praesentium magnam ratione",
                    5,
                    "est",
                    "dolorum et tempora"),
            new KMLSublayer("ratione minima occaecati assumenda",
                    7,
                    "et",
                    "sit et praesentium"),
            new KMLSublayer("harum qui dolore ducimus beatae",
                    6,
                    "et",
                    "architecto rerum est"),
            new KMLSublayer("qui in nihil ut eveniet voluptate",
                    2,
                    "rerum",
                    "rerum praesentium velit")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 9, 15, 6, 55, 7),
                    new DateTime(2001, 2, 27, 1, 19, 30));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
