@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("culpa",
                            32811285.6867))"
                        FullExtent="@(new Extent(-110.9239,
                                -1.7919,
                                -40.4086,
                                -70.1370,
                                843.8940,
                                641.3759,
                                387.3903,
                                257.5071,
                            new SpatialReference(4,
                                    "odio",
                                    "sed",
                                    "exercitationem"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(2360135.1843)"
                        MinScale="@(2894.4456)"
                        Opacity="@(0.8254)"
                        PersistenceEnabled="@(true)"
                        Title="@("sed repellendus voluptate")">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 10, 27, 3, 4, 45))"
                            End="@(new DateTime(2019, 6, 14, 9, 39, 45))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("consequatur est dolore iusto ex ut")"
                            KMLSublayerId="@(2)"
                            NetworkLink="@("delectus")"
                            Title="@("praesentium hic enim")">
                        </KMLSublayer>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "atque",
                    "aut",
                    49.7475,
                    ["ratione",
                        "officia",
                        "laborum",
                        "repudiandae"],
                    new DateTime(2013, 1, 8, 19, 16, 56),
                    "et",
                    "voluptatum deleniti fugiat non adipisci",
                new Extent(-42.7280,
                        118.1692,
                        35.1548,
                        1.4909,
                        52.5928,
                        870.5552,
                        240.4222,
                        296.8491,
                    new SpatialReference(9,
                            "id",
                            "enim",
                            "autem"),
                        true,
                        true),
                    ["facere",
                        "vel",
                        "eum"],
                    "illum",
                    new DateTime(2015, 2, 17, 6, 50, 21),
                    "createdAt",
                    130.6799);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(43.3250,
                    -57.7556,
                    -10.7565,
                    42.8997,
                    657.3622,
                    349.8904,
                    948.5470,
                    780.2298,
                new SpatialReference(5,
                        "sunt",
                        "est",
                        "modi"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("est aliquid molestiae dolorem ducimus aut",
                    1,
                    "provident",
                    "quo atque sint")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 8, 15, 5, 40, 52),
                    new DateTime(2017, 5, 18, 4, 0, 11));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
