@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Screen)"
                        Effect="@(new Effect("est",
                            3417714.1576))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(2523328.6586)"
                        MinScale="@(46001.3964)"
                        Opacity="@(0.5329)"
                        PersistenceEnabled="@(true)"
                        Title="@("ut et ipsum")">
                        <TimeExtent 
                            Start="@(new DateTime(2019, 7, 15, 13, 5, 44))"
                            End="@(new DateTime(2002, 3, 25, 7, 42, 44))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("libero est et")"
                            KMLSublayerId="@(8)"
                            NetworkLink="@("consequatur")"
                            Title="@("facere et error")">
                        </KMLSublayer>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-60.4066)"
                            Xmin="@(-67.5194)"
                            Ymax="@(28.2622)"
                            Ymin="@(37.1451)"
                            Zmax="@(168.9460)"
                            Zmin="@(823.8672)"
                            Mmax="@(833.4221)"
                            Mmin="@(945.1757)"
                            SpatialReference="@(new SpatialReference(7,
                                    "omnis",
                                    "doloribus",
                                    "amet"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.SourceAtop;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(140.3073,
                    -60.7894,
                    58.8784,
                    -68.0490,
                    231.3468,
                    861.4585,
                    816.0537,
                    714.5518,
                new SpatialReference(8,
                        "suscipit",
                        "error",
                        "cumque"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("ut ducimus at aut",
                    9,
                    "ullam",
                    "rerum dolorem quia")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 9, 3, 10, 24, 6),
                    new DateTime(2021, 1, 11, 16, 38, 49));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
