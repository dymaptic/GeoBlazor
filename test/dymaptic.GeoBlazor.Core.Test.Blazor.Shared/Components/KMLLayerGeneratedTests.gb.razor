@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Color)"
                        Effect="@(new Effect("saepe",
                            29727895.6955))"
                        FullExtent="@(new Extent(45.7905,
                                78.2760,
                                2.0425,
                                -36.6170,
                                181.5017,
                                272.1873,
                                768.3539,
                                360.7456,
                            new SpatialReference(6,
                                    "nesciunt",
                                    "veritatis",
                                    "quia"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(18971742.0137)"
                        MinScale="@(30206.0126)"
                        Opacity="@(0.5615)"
                        PersistenceEnabled="@(true)"
                        Title="@("hic similique laudantium")">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 4, 1, 8, 48, 51))"
                            End="@(new DateTime(2019, 8, 27, 2, 39, 39))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("dolorem minus iste eos officia totam")"
                            KMLSublayerId="@(9)"
                            NetworkLink="@("placeat")"
                            Title="@("minima et ut")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Reflect;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(53.3824,
                    133.4957,
                    -79.9898,
                    -29.6250,
                    944.5461,
                    77.1506,
                    856.0762,
                    830.7143,
                new SpatialReference(2,
                        "repellendus",
                        "explicabo",
                        "a"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("provident quaerat quae soluta in",
                    8,
                    "voluptatem",
                    "fuga est aut"),
            new KMLSublayer("nesciunt ut laudantium molestias molestiae",
                    2,
                    "libero",
                    "unde sed ipsum"),
            new KMLSublayer("dignissimos asperiores veniam non ipsam dicta nihil",
                    7,
                    "quas",
                    "dolor et qui"),
            new KMLSublayer("officiis qui excepturi eum",
                    2,
                    "sit",
                    "iusto libero tenetur")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 9, 10, 17, 51, 3),
                    new DateTime(2012, 7, 2, 6, 11, 30));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
