@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.DestinationIn)"
                        Effect="@(new Effect("molestias",
                            46172724.2544))"
                        FullExtent="@(new Extent(107.9573,
                                76.4287,
                                -42.5259,
                                -9.6579,
                                909.4590,
                                406.4209,
                                473.7695,
                                132.8481,
                            new SpatialReference(8,
                                    "voluptate",
                                    "delectus",
                                    "veritatis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(15393050.5730)"
                        MinScale="@(15410.5271)"
                        Opacity="@(0.4307)"
                        PersistenceEnabled="@(true)"
                        Title="@("mollitia alias repudiandae")">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 3, 14, 11, 36, 14))"
                            End="@(new DateTime(2011, 4, 14, 8, 11, 11))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("exercitationem voluptatum facere fugit")"
                            KMLSublayerId="@(8)"
                            NetworkLink="@("rerum")"
                            Title="@("nemo sit consequatur")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Darken;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(39.0716,
                    89.3770,
                    39.6490,
                    -74.8055,
                    974.2020,
                    233.6661,
                    698.6177,
                    313.7561,
                new SpatialReference(8,
                        "aspernatur",
                        "amet",
                        "officiis"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("quis cupiditate ut modi",
                    2,
                    "accusantium",
                    "numquam ad maiores"),
            new KMLSublayer("sint est et sit",
                    5,
                    "consequuntur",
                    "deserunt earum sunt")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 8, 2, 11, 18, 32),
                    new DateTime(2000, 9, 4, 14, 44, 33));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
