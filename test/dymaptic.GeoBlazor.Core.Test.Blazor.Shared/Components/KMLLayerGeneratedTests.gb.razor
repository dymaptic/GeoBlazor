@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Multiply)"
                        Effect="@(new Effect("aspernatur",
                            45815368.4555))"
                        FullExtent="@(new Extent(-136.6177,
                                83.4966,
                                -18.3881,
                                -49.5777,
                                199.4359,
                                65.6007,
                                866.4048,
                                53.7252,
                            new SpatialReference(5,
                                    "omnis",
                                    "eum",
                                    "quo"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(43150488.4165)"
                        MinScale="@(25872.0251)"
                        Opacity="@(0.1866)"
                        PersistenceEnabled="@(true)"
                        Title="@("eum vel dolor")">
                        <TimeExtent 
                            Start="@(new DateTime(2009, 3, 24, 16, 41, 48))"
                            End="@(new DateTime(2004, 2, 4, 7, 16, 55))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("minus ad quis repellendus")"
                            KMLSublayerId="@(6)"
                            NetworkLink="@("enim")"
                            Title="@("rem rerum debitis")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-0.0833,
                    -28.5406,
                    -58.5764,
                    -73.9956,
                    279.9569,
                    183.8219,
                    693.6243,
                    817.9447,
                new SpatialReference(8,
                        "commodi",
                        "ipsa",
                        "in"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("vel eum similique qui possimus dicta",
                    1,
                    "molestias",
                    "ut incidunt perferendis"),
            new KMLSublayer("non voluptatum soluta eum",
                    7,
                    "corrupti",
                    "aliquam omnis animi")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 6, 22, 11, 2, 39),
                    new DateTime(2017, 1, 22, 3, 19, 42));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
