@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.HardLight)"
                        Effect="@(new Effect("dignissimos",
                            43014820.9444))"
                        FullExtent="@(new Extent(140.2326,
                                -1.0748,
                                53.2213,
                                23.0011,
                                274.9711,
                                564.5183,
                                653.0718,
                                290.2897,
                            new SpatialReference(8,
                                    "consequatur",
                                    "dolor",
                                    "rerum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(22594326.3300)"
                        MinScale="@(14107.0424)"
                        Opacity="@(0.2772)"
                        PersistenceEnabled="@(true)"
                        Title="@("et facilis consequuntur")">
                        <TimeExtent 
                            Start="@(new DateTime(2016, 4, 24, 3, 19, 15))"
                            End="@(new DateTime(2005, 11, 11, 1, 19, 4))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("natus soluta ut tempore")"
                            KMLSublayerId="@(2)"
                            NetworkLink="@("id")"
                            Title="@("aut neque facilis")">
                        </KMLSublayer>
                        <PortalItem />
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Minus;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-137.8307,
                    -6.1990,
                    36.4459,
                    34.7178,
                    977.3412,
                    324.3505,
                    161.1262,
                    676.6412,
                new SpatialReference(2,
                        "saepe",
                        "error",
                        "quo"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("natus similique minus sunt itaque ea ea",
                    1,
                    "eius",
                    "soluta voluptatem tempore"),
            new KMLSublayer("et et veniam doloremque magni",
                    5,
                    "pariatur",
                    "omnis est voluptatem")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 5, 14, 20, 21, 39),
                    new DateTime(2002, 4, 1, 9, 57, 22));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
