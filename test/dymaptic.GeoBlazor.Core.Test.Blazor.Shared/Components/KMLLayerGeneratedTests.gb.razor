@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("quam",
                            22853155.5986))"
                        FullExtent="@(new Extent(-149.9872,
                                -8.9923,
                                68.3690,
                                -9.6325,
                                49.8510,
                                510.2347,
                                417.4805,
                                996.4281,
                            new SpatialReference(5,
                                    "recusandae",
                                    "quaerat",
                                    "dignissimos"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(28741980.2285)"
                        MinScale="@(48535.7104)"
                        Opacity="@(0.3255)"
                        PersistenceEnabled="@(true)"
                        Title="@("necessitatibus cum pariatur")">
                        <TimeExtent 
                            Start="@(new DateTime(2011, 7, 18, 22, 2, 52))"
                            End="@(new DateTime(2002, 4, 3, 13, 11, 21))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("perspiciatis laboriosam nemo totam odio laudantium quis")"
                            KMLSublayerId="@(6)"
                            NetworkLink="@("est")"
                            Title="@("minima magnam sit")">
                        </KMLSublayer>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "sunt",
                    "eos",
                    72.0751,
                    ["laborum",
                        "quis"],
                    new DateTime(2002, 3, 17, 11, 33, 17),
                    "sunt",
                    "rem et velit laudantium expedita dolorum sit",
                new Extent(-157.5519,
                        35.8102,
                        -28.9334,
                        34.4170,
                        655.3501,
                        104.8702,
                        574.6702,
                        903.2864,
                    new SpatialReference(5,
                            "molestiae",
                            "debitis",
                            "nemo"),
                        true,
                        true),
                    ["ea",
                        "illum",
                        "magni",
                        "sed"],
                    "et",
                    new DateTime(2015, 7, 19, 1, 12, 6),
                    "comment",
                    428.8990);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.DestinationAtop;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-52.3419,
                    -20.3069,
                    -6.1193,
                    67.8114,
                    607.5059,
                    97.7173,
                    3.8011,
                    271.6760,
                new SpatialReference(7,
                        "eos",
                        "est",
                        "nemo"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("nam veritatis id itaque",
                    1,
                    "quibusdam",
                    "et aspernatur ex"),
            new KMLSublayer("consequatur dicta qui eos in occaecati",
                    5,
                    "quibusdam",
                    "possimus non rerum")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 6, 2, 6, 19, 39),
                    new DateTime(2000, 4, 4, 5, 44, 11));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
