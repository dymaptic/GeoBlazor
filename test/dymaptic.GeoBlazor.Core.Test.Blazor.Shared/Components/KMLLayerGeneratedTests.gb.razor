@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.ColorBurn)"
                        Effect="@(new Effect("nemo",
                            31248783.3075))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(8544984.7447)"
                        MinScale="@(47717.1819)"
                        Opacity="@(0.5996)"
                        PersistenceEnabled="@(true)"
                        Title="@("libero assumenda qui")">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 7, 1, 18, 16, 9))"
                            End="@(new DateTime(2007, 6, 14, 19, 34, 39))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("illum quia")"
                            KMLSublayerId="@(5)"
                            NetworkLink="@("similique")"
                            Title="@("dolorem facere inventore")">
                        </KMLSublayer>
                        <PortalItem />
                        <Extent 
                            Xmax="@(28.2147)"
                            Xmin="@(136.2261)"
                            Ymax="@(-39.0603)"
                            Ymin="@(13.3441)"
                            Zmax="@(207.0145)"
                            Zmin="@(176.3310)"
                            Mmax="@(951.4446)"
                            Mmin="@(396.0344)"
                            SpatialReference="@(new SpatialReference(3,
                                    "commodi",
                                    "error",
                                    "repudiandae"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem();
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.VividLight;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-41.8790,
                    111.5207,
                    -57.3584,
                    45.6265,
                    304.3592,
                    434.8314,
                    873.9879,
                    538.1931,
                new SpatialReference(7,
                        "quas",
                        "et",
                        "qui"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("est ipsam",
                    6,
                    "et",
                    "ullam ex nihil"),
            new KMLSublayer("rerum quasi",
                    5,
                    "earum",
                    "dolorum modi aut")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 7, 12, 0, 43, 42),
                    new DateTime(2008, 5, 9, 14, 16, 25));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
