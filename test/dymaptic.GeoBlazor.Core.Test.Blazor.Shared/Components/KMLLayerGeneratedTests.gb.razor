@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderKMLLayer(Action renderHandler)
    {
        KMLLayer? kMLLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <KMLLayer 
                        Url="@("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8")"
                        BlendMode="@(BlendMode.Difference)"
                        Effect="@(new Effect("aperiam",
                            41522690.6224))"
                        FullExtent="@(new Extent(80.4575,
                                -66.4912,
                                39.0720,
                                34.7068,
                                31.7872,
                                76.0921,
                                25.7945,
                                960.4698,
                            new SpatialReference(1,
                                    "pariatur",
                                    "harum",
                                    "quia"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(31023430.3267)"
                        MinScale="@(37838.6373)"
                        Opacity="@(0.3635)"
                        PersistenceEnabled="@(true)"
                        Title="@("animi possimus et")">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 2, 15, 9, 57, 26))"
                            End="@(new DateTime(2023, 3, 3, 20, 42, 11))">
                        </TimeExtent>
                        <KMLSublayer 
                            Description="@("voluptatem similique illo facilis nam qui rerum")"
                            KMLSublayerId="@(2)"
                            NetworkLink="@("rerum")"
                            Title="@("accusamus saepe nesciunt")">
                        </KMLSublayer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("harum")"
                            ApiKey="@("fugiat")"
                            AvgRating="@(456.3185)"
                            Categories="@(["doloremque",
                                "dolores"])"
                            Created="@(new DateTime(2018, 7, 7, 7, 1, 33))"
                            Culture="@("alias")"
                            Description="@("dolorem eum ut eos")"
                            Extent="@(new Extent(-24.4046,
                                    -135.6551,
                                    49.4971,
                                    46.3458,
                                    876.3937,
                                    83.5505,
                                    455.2353,
                                    364.0834,
                                new SpatialReference(1,
                                        "dolor",
                                        "architecto",
                                        "a"),
                                    true,
                                    true))"
                            GroupCategories="@(["doloribus",
                                "est"])"
                            LicenseInfo="@("pariatur")"
                            Modified="@(new DateTime(2003, 1, 23, 6, 27, 35))"
                            Name="@("password")"
                            NumComments="@(950.7353)"
                            NumRatings="@(514.1085)"
                            NumViews="@(355.4695)"
                            Owner="@("Eda Luettgen")"
                            OwnerFolder="@("Kelley Bailey")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Anonymous,
                                    ["ipsum",
                                        "itaque",
                                        "molestias"],
                                    "dignissimos",
                                    "esse",
                                    "exercitationem",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("deleniti")"
                            Screenshots="@(["ullam",
                                "in",
                                "ratione",
                                "quaerat"])"
                            Size="@(4)"
                            Snippet="@("et")"
                            Tags="@(["aut",
                                "dolore",
                                "velit"])"
                            Title="@("ex dolore et")"
                            TypeKeywords="@(["enim",
                                "illum"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                        </PortalItem>
                    </KMLLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(kMLLayer!);
        await AssertJavaScript("assertLayerExists", args: "kml");
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "sequi",
                    "iure",
                    841.4516,
                    ["quo",
                        "id",
                        "architecto"],
                    new DateTime(2005, 6, 21, 10, 52, 48),
                    "at",
                    "eaque necessitatibus blanditiis iusto optio",
                new Extent(65.1636,
                        -176.9136,
                        76.1253,
                        -27.8671,
                        608.7070,
                        402.7099,
                        351.4272,
                        638.9796,
                    new SpatialReference(5,
                            "debitis",
                            "et",
                            "et"),
                        true,
                        true),
                    ["ea",
                        "fugiat"],
                    "velit",
                    new DateTime(2018, 6, 24, 0, 19, 2),
                    "createdAt",
                    740.1352);
        await kMLLayer.SetPortalItem(testPortalItem);
        var portalItem = await kMLLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Saturation;
        await kMLLayer.SetBlendMode(testBlendMode);
        var blendMode = await kMLLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(48.7689,
                    145.6841,
                    -35.2370,
                    -58.1976,
                    589.3965,
                    268.3373,
                    718.3694,
                    752.3096,
                new SpatialReference(5,
                        "rerum",
                        "rerum",
                        "corporis"),
                    true,
                    true);
        await kMLLayer.SetFullExtent(testFullExtent);
        var fullExtent = await kMLLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await kMLLayer.SetListMode(testListMode);
        var listMode = await kMLLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<KMLSublayer> testSublayers = [new KMLSublayer("quasi labore odit nulla",
                    3,
                    "et",
                    "voluptatum libero consequatur"),
            new KMLSublayer("nihil et maxime velit sapiente enim",
                    7,
                    "velit",
                    "amet minima consequatur"),
            new KMLSublayer("et magni saepe ullam autem",
                    3,
                    "autem",
                    "maiores consequatur fuga"),
            new KMLSublayer("ut distinctio doloribus in est",
                    1,
                    "qui",
                    "quae dicta assumenda")];
        await kMLLayer.SetSublayers(testSublayers);
        var sublayers = await kMLLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2016, 7, 12, 0, 23, 10),
                    new DateTime(2013, 6, 4, 20, 10, 31));
        await kMLLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await kMLLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
