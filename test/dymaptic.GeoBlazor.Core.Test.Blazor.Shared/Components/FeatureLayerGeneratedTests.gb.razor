@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureLayer(Action renderHandler)
    {
        FeatureLayer? featureLayer = null;

        FeatureLayerEditsEvent? editsResult = null;
        void OnEdits(FeatureLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <FeatureLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")"
                        OutFields="@(["consequatur"])"
                        DefinitionExpression="@("suscipit")"
                        MinScale="@(31749.6921)"
                        MaxScale="@(41795929.2091)"
                        ObjectIdField="@("quia")"
                        GeometryType="@(FeatureGeometryType.Multipatch)"
                        Title="@("facere ea quisquam")"
                        Opacity="@(0.4179)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        ApiKey="@("modi")"
                        BlendMode="@(BlendMode.Hue)"
                        Charts="@(["eum",
                            "ipsum"])"
                        Copyright="@("libero")"
                        DateFieldsTimeZone="@("repellat")"
                        DisplayField="@("illum")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("eaque",
                            49771583.9942))"
                        GdbVersion="@("2.0.5.0")"
                        HasM="@(true)"
                        HasZ="@(true)"
                        HistoricMoment="@(new DateTime(2003, 11, 6, 19, 5, 21))"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(324.0946)"
                        ReturnM="@(true)"
                        ReturnZ="@(true)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        TypeIdField="@("porro")"
                        Types="@([new FeatureType("944fd28e-ce92-c9db-022b-8d85c3b85b51",
                                "comment",
                            [new FeatureTemplate("laboriosam nihil ullam",
                                DrawingTool.AutoCompletePolygon,
                                    "comment",
                                new Graphic(new Extent(119.6690,
                                            130.4485,
                                            57.7934,
                                            89.8677,
                                            229.8875,
                                            336.6316,
                                            769.4300,
                                            248.8665,
                                        new SpatialReference(4,
                                                "sit",
                                                "est",
                                                "id"),
                                            true,
                                            true),
                                    new TextSymbol("dignissimos libero magnam",
                                        new MapColor(7, 83, 218),
                                        new MapColor(111, 206, 36),
                                            new Dimension(857.8253),
                                        new MapFont(new Dimension(582.9583),
                                                "Bookman",
                                            MapFontStyle.Oblique,
                                            FontWeight.Lighter,
                                            TextDecoration.LineThrough),
                                            296.1311,
                                        new MapColor(5, 188, 137),
                                        new MapColor(185, 15, 252),
                                            619.9373,
                                        HorizontalAlignment.Right,
                                            true,
                                            454.9727,
                                            new Dimension(420.0521),
                                            true),
                                    new PopupTemplate("iste itaque nisi",
                                            "est",
                                            ["et"],
                                        [new FieldInfo("token",
                                                "quae",
                                                "porro",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(9,
                                                    true,
                                                DateFormat.ShortDateLongTime24),
                                                true,
                                                true,
                                            StatisticType.Avg)],
                                        [new MediaPopupContent("possimus alias similique",
                                                "quo expedita non",
                                            [new BarChartMediaInfo("repellat ipsum vel",
                                                    "qui",
                                                    "cupiditate est debitis",
                                                new ChartMediaInfoValue(["qui"],
                                                        "dolore",
                                                        "quia",
                                                    [new ChartMediaInfoValueSeries(),
                                                    new ChartMediaInfoValueSeries()],
                                                    [new MapColor(143, 129, 82)]))],
                                                8)],
                                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                "id",
                                                "consequatur autem earum",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("voluptas cupiditate doloremque",
                                                "https://picsum.photos/640/480/?image=1063",
                                                "726e3e10-a070-f3ec-16d5-0905a1753f30",
                                                () => { Console.WriteLine("unde"); return Task.CompletedTask; },
                                                "email",
                                                true,
                                                true,
                                                true,
                                                "incidunt"),
                                                new ActionButton("aliquid ab est",
                                                    "https://picsum.photos/640/480/?image=547",
                                                    "29204c23-a8f2-4df6-9c85-0eaccf5bfba2",
                                                    () => { Console.WriteLine("voluptates"); return Task.CompletedTask; },
                                                    "title",
                                                    true,
                                                    true,
                                                    true,
                                                    "inventore")]),
                                        new AttributesDictionary(),
                                        true,
                                        "aliquid",
                                        "facilis",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "mollitia",
                                            7)),
                                    new Thumbnail("minus",
                                        "consequuntur",
                                        261.9521,
                                        68.4511))],
                                new CodedValueDomain<string>([new CodedValue<string>()],
                                    "createdAt"),
                                "eveniet")])"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(932.3651)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("aut")"
                            EndField="@("laudantium")"
                            Stops="@([new DateTime(2021, 7, 6, 1, 1, 4),
                                new DateTime(2015, 3, 22, 17, 52, 16)])"
                            TimeZone="@("Europe/Paris")"
                            TrackIdField="@("nostrum")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(545.3237)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2004, 9, 14, 6, 22, 47))"
                                End="@(new DateTime(2011, 6, 19, 7, 18, 46))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2020, 9, 23, 20, 22, 56))"
                            End="@(new DateTime(2002, 1, 16, 7, 47, 34))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("et cupiditate")"
                            DrawingTool="@(DrawingTool.DownArrow)"
                            Name="@("createdAt")"
                            Thumbnail="@(new Thumbnail("dolor",
                                "aliquam",
                                27.9970,
                                213.6696))">
                            <Graphic 
                                Geometry="@(new Polyline([new MapPath([new MapPoint([596.4731,
                                            667.2360])]),
                                        new MapPath([new MapPoint([961.4452,
                                                817.4313]),
                                            new MapPoint([289.7047])])],
                                    new SpatialReference(4,
                                            "officiis",
                                            "sed",
                                            "incidunt"),
                                        true,
                                        true))"
                                Symbol="@(new TextSymbol("sed sequi velit",
                                    new MapColor(89, 114, 200),
                                    new MapColor(158, 82, 112),
                                        new Dimension(224.4433),
                                    new MapFont(new Dimension(865.8624),
                                            "Arial",
                                        MapFontStyle.Normal,
                                        FontWeight.Lighter,
                                        TextDecoration.Underline),
                                        802.5398,
                                    new MapColor(246, 7, 22),
                                    new MapColor(28, 205, 154),
                                        675.7514,
                                    HorizontalAlignment.Right,
                                        true,
                                        648.9615,
                                        new Dimension(662.0169),
                                        true))"
                                PopupTemplate="@(new PopupTemplate("quos et voluptas",
                                        "omnis",
                                        ["est",
                                            "in"],
                                    [new FieldInfo("email",
                                            "nihil",
                                            "explicabo",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(9,
                                                true,
                                            DateFormat.DayShortMonthYear),
                                            true,
                                            true,
                                        StatisticType.Count),
                                    new FieldInfo("title",
                                            "aut",
                                            "magnam",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(9,
                                                true,
                                            DateFormat.DayShortMonthYearLongTime24),
                                            true,
                                            true,
                                        StatisticType.Stddev)],
                                    [new MediaPopupContent("mollitia id et",
                                            "nisi saepe corporis debitis",
                                        [new LineChartMediaInfo("perspiciatis consequuntur ipsa",
                                                "eaque",
                                                "quis officia sint",
                                            new ChartMediaInfoValue(["cum"],
                                                    "dolorem",
                                                    "voluptas",
                                                [new ChartMediaInfoValueSeries("id",
                                                        "et",
                                                        2.9458)],
                                                [new MapColor(196, 47, 14)])),
                                        new ColumnChartMediaInfo("qui fugit recusandae",
                                                "et",
                                                "quam sint non",
                                            new ChartMediaInfoValue(["repellendus"],
                                                    "quo",
                                                    "dolor",
                                                [new ChartMediaInfoValueSeries("createdAt",
                                                        "unde",
                                                        858.6803),
                                                new ChartMediaInfoValueSeries("category",
                                                        "beatae",
                                                        213.6584)],
                                                [new MapColor(228, 107, 86)]))],
                                            3),
                                    new MediaPopupContent("repellat assumenda et",
                                            "aut sit",
                                        [new BarChartMediaInfo("dolor delectus officiis",
                                                "incidunt",
                                                "et incidunt itaque",
                                            new ChartMediaInfoValue(["tempora",
                                                    "saepe"],
                                                    "incidunt",
                                                    "animi",
                                                [new ChartMediaInfoValueSeries("title",
                                                        "voluptate",
                                                        259.2985),
                                                new ChartMediaInfoValueSeries("token",
                                                        "aut",
                                                        259.8504)],
                                                [new MapColor(163, 32, 155)])),
                                        new PieChartMediaInfo("possimus velit asperiores",
                                                "a",
                                                "occaecati totam distinctio",
                                            new ChartMediaInfoValue(["consequatur",
                                                    "sit"],
                                                    "alias",
                                                    "rerum",
                                                [new ChartMediaInfoValueSeries("category",
                                                        "fugiat",
                                                        77.5951),
                                                new ChartMediaInfoValueSeries("updatedAt",
                                                        "est",
                                                        935.3923)],
                                                [new MapColor(41, 49, 124)]))],
                                            5)],
                                    [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                            "token",
                                            "vitae velit quis",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                            "id",
                                            "recusandae non occaecati",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("tempora non quo",
                                            "https://picsum.photos/640/480/?image=948",
                                            "f0a5f550-543b-d543-141b-0cc1454af053",
                                            () => { Console.WriteLine("reprehenderit"); return Task.CompletedTask; },
                                            "token",
                                            true,
                                            true,
                                            true,
                                            "facere")]))"
                                Attributes="@(new AttributesDictionary())"
                                Visible="@(true)"
                                LegendLabel="@("impedit")"
                                AggregateGeometries="@("dolores")"
                                Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                    "cumque",
                                    7))">
                            </Graphic>
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(8)"
                            ImageCoordinateSystem="@("odio")"
                            Wkt="@("vel")"
                            Wkt2="@("nihil")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Polygon([new MapPath([new MapPoint([833.6908,
                                        78.7239])]),
                                    new MapPath([new MapPoint([267.3080,
                                            523.3854])])],
                                new SpatialReference(2,
                                        "at",
                                        "rerum",
                                        "dolor"),
                                new Point(-130.9180,
                                        -69.6119,
                                        -179.1458,
                                        52.7118,
                                        682.4110,
                                    new SpatialReference(7,
                                            "eum",
                                            "sunt",
                                            "quis"),
                                        true,
                                        true,
                                        499.5268),
                                    true,
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("cumque id sit",
                                new MapColor(197, 34, 217),
                                new MapColor(166, 87, 240),
                                    new Dimension(722.4836),
                                new MapFont(new Dimension(131.1438),
                                        "Georgia",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bold,
                                    TextDecoration.Underline),
                                    745.6714,
                                new MapColor(35, 38, 56),
                                new MapColor(89, 222, 140),
                                    145.3045,
                                HorizontalAlignment.Right,
                                    true,
                                    636.6905,
                                    new Dimension(316.9729),
                                    true))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("eius")"
                            AggregateGeometries="@("magni")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "harum",
                                1))">
                            <PopupTemplate 
                                Title="@("numquam totam ratione")"
                                StringContent="@("vel")"
                                OutFields="@(["quis"])"
                                FieldInfos="@([new FieldInfo("email",
                                        "amet",
                                        "dolorem",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("email",
                                        "eveniet",
                                        "temporibus",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.ShortDateLeLongTime24),
                                        true,
                                        true,
                                    StatisticType.Count)])"
                                Content="@([new FieldsPopupContent([new FieldInfo("token",
                                            "magnam",
                                            "nesciunt",
                                        StringFieldOption.TextArea,
                                        new FieldInfoFormat(2,
                                                true,
                                            DateFormat.DayShortMonthYearLongTime),
                                            true,
                                            true,
                                        StatisticType.Stddev)],
                                        "accusantium sit deserunt autem",
                                        "laboriosam quae fugit")])"
                                ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                        "avatar",
                                        "quae aut et",
                                        ExpressionInfoReturnType.String)])"
                                OverwriteActions="@(true)"
                                ReturnGeometry="@(true)"
                                Actions="@([new ActionButton("animi optio vero",
                                    "https://picsum.photos/640/480/?image=514",
                                    "04974f70-cdd0-3115-5d88-d3fb9fcf7301",
                                    () => { Console.WriteLine("quos"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "sed")])">
                            </PopupTemplate>
                        </Graphic>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                    new MapColor(83, 43, 185),
                                    new MapColor(228, 51, 200)),
                                    904.3537,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(440.1449,
                                            470.0671),
                                    new AuthoringInfoField1ClassBreakInfos(797.3129,
                                            256.7125)],
                                        "voluptatem",
                                        "expedita",
                                        "et"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(338.5631,
                                            810.1013),
                                    new AuthoringInfoField1ClassBreakInfos(991.4533,
                                            70.0614)],
                                        "repudiandae",
                                        "alias",
                                        "et"),
                                    ["eligendi",
                                        "voluptas"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "ut",
                                    true,
                                LengthUnit.Kilometers,
                                    163.8790,
                                    755.8829,
                                    595.9188,
                                    33.7782))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("omnis non animi")"
                            StringContent="@("laborum")"
                            OutFields="@(["praesentium",
                                "voluptas"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "porro",
                                    "et",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("email",
                                        "cumque",
                                        "numquam",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.DayShortMonthYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Avg)],
                                    "qui laudantium ab",
                                    "explicabo ipsum non")])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "comment",
                                    "adipisci aut voluptas",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "phone",
                                    "assumenda praesentium odio",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("est omnis qui",
                                "https://picsum.photos/640/480/?image=136",
                                "1ea8e7bb-797e-1b85-e254-535bfa9972a1",
                                () => { Console.WriteLine("molestiae"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "aut"),
                                new ActionButton("voluptatibus qui iusto",
                                    "https://picsum.photos/640/480/?image=77",
                                    "cebb398c-03ef-8d2d-c7fa-f47a75526d4a",
                                    () => { Console.WriteLine("atque"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "quibusdam")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("voluptatem")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("ut")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveRight)"
                            LabelExpression="@("voluptatem")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(11892338.4038)"
                            MinScale="@(3485.6074)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(355.4534))"
                            Symbol="@(new TextSymbol("sit ut culpa",
                                new MapColor(12, 140, 116),
                                new MapColor(191, 28, 23),
                                    new Dimension(263.6484),
                                new MapFont(new Dimension(463.3403),
                                        "Palatino",
                                    MapFontStyle.Oblique,
                                    FontWeight.Lighter,
                                    TextDecoration.Underline),
                                    870.2366,
                                new MapColor(0, 141, 177),
                                new MapColor(228, 186, 218),
                                    904.4783,
                                HorizontalAlignment.Right,
                                    true,
                                    895.2649,
                                    new Dimension(834.4553),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Phone = '555-555-5555'")">
                        </Label>
                        <Extent 
                            Xmax="@(-41.3354)"
                            Xmin="@(64.8742)"
                            Ymax="@(-10.6446)"
                            Ymin="@(-60.5487)"
                            Zmax="@(552.4338)"
                            Zmin="@(692.6048)"
                            Mmax="@(850.9576)"
                            Mmin="@(45.0115)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("animi")"
                                Wkt="@("iste")"
                                Wkt2="@("et")">
                            </SpatialReference>
                        </Extent>
                        <FormTemplate 
                            Title="@("quo animi modi")"
                            Description="@("sint doloribus aliquid distinctio")"
                            PreserveFieldValuesWhenHidden="@(true)"
                            Elements="@([new FieldElement("comment",
                                    "illum",
                                    "placeat iure rerum",
                                    "maiores",
                                    "voluptatem",
                                    "enim",
                                    "excepturi",
                                    new CodedValueDomain<string>([new CodedValue<string>()],
                                        "phone"),
                                    default,
                                    "dolor")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "title",
                                    "necessitatibus est nostrum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "email",
                                    "sed eius possimus",
                                    ExpressionInfoReturnType.String)])">
                        </FormTemplate>
                        <LayerFloorInfo 
                            FloorField="@("amet")">
                        </LayerFloorInfo>
                        <Field 
                            Name="@("password")"
                            Alias="@("ex")"
                            Description="@("possimus dignissimos voluptates ducimus")"
                            Length="@(1)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "esse" })"
                            ValueType="@(FieldValueType.CountOrAmount)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>()],
                                "name"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("molestiae",
                                41491672.4794),
                                new Effect("laborum",
                                    49793033.7976)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(512.1834,
                                new Polyline([new MapPath([new MapPoint([290.2739,
                                            528.8725])]),
                                        new MapPath([new MapPoint([75.2604,
                                                3.6209])])],
                                    new SpatialReference(1,
                                            "nihil",
                                            "culpa",
                                            "sint"),
                                        true,
                                        true),
                                    [2],
                                SpatialRelationship.IndexIntersects,
                                new TimeExtent(new DateTime(2003, 11, 19, 8, 12, 34),
                                        new DateTime(2011, 10, 4, 13, 41, 20)),
                                    QueryUnits.Meters,
                                    "PostalCode = 'M5V 1J9'"))"
                            IncludedEffect="@([new Effect("earum",
                                18358762.4287),
                                new Effect("itaque",
                                    191556.7808)])">
                        </FeatureEffect>
                        <FeatureLayerBaseElevationInfo 
                            FeatureExpressionInfo="@(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "occaecati quis quasi"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(153.5765)"
                            Unit="@(ElevationUnit.Kilometers)">
                        </FeatureLayerBaseElevationInfo>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureLayer!);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<FeatureLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "feature");
        var addAttachmentMethodResult = await featureLayer.AddAttachment(new Graphic(new Extent(11.2255,
                        -70.9280,
                        6.1501,
                        81.6316,
                        360.6043,
                        514.9856,
                        721.7466,
                        628.6924,
                    new SpatialReference(5,
                            "enim",
                            "est",
                            "ut"),
                        true,
                        true),
                new TextSymbol("magnam et sit",
                    new MapColor(234, 115, 32),
                    new MapColor(201, 5, 84),
                        new Dimension(522.2823),
                    new MapFont(new Dimension(640.2405),
                            "Georgia",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        242.0109,
                    new MapColor(64, 186, 205),
                    new MapColor(6, 206, 134),
                        797.9423,
                    HorizontalAlignment.Right,
                        true,
                        588.5288,
                        new Dimension(245.9824),
                        true),
                new PopupTemplate("sed a officia",
                        "est",
                        ["numquam"],
                    [new FieldInfo("name",
                            "et",
                            "rerum",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.DayShortMonthYearLongTime),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("token",
                            "aut",
                            "distinctio",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.LongDateShortTime),
                            true,
                            true,
                        StatisticType.Max)],
                    [new AttachmentsPopupContent("culpa sint aperiam",
                            "molestiae sit iusto ipsam",
                            AttachmentsPopupContentDisplayType.Preview)],
                    [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "id",
                            "dolor ea expedita",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("eos velit facere",
                            "https://picsum.photos/640/480/?image=430",
                            "7e341b69-0169-45f2-877b-3a5a6fd3890e",
                            () => { Console.WriteLine("nobis"); return Task.CompletedTask; },
                            "category",
                            true,
                            true,
                            true,
                            "distinctio"),
                            new ActionButton("maxime autem commodi",
                                "https://picsum.photos/640/480/?image=352",
                                "c49dc525-df69-af38-13d8-085af6287eff",
                                () => { Console.WriteLine("perferendis"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "mollitia")]),
                    new AttributesDictionary(),
                    true,
                    "nisi",
                    "et",
                    new GraphicOrigin(Guid.NewGuid(),
                        "sit",
                        8)),
                default);
        Assert.IsNotNull(addAttachmentMethodResult);
        var deleteAttachmentsMethodResult = await featureLayer.DeleteAttachments(new Graphic(new Polygon([new MapPath([new MapPoint([702.2062])])],
                    new SpatialReference(3,
                            "facilis",
                            "quos",
                            "quisquam"),
                    new Point(157.4848,
                            -19.9220,
                            -98.9900,
                            -1.7380,
                            746.8018,
                        new SpatialReference(9,
                                "quia",
                                "nostrum",
                                "exercitationem"),
                            true,
                            true,
                            574.3754),
                        true,
                        true,
                        true),
                new TextSymbol("aut nisi aut",
                    new MapColor(226, 183, 242),
                    new MapColor(206, 233, 89),
                        new Dimension(190.4048),
                    new MapFont(new Dimension(324.3426),
                            "Arial",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        517.3679,
                    new MapColor(136, 134, 232),
                    new MapColor(195, 100, 72),
                        421.8688,
                    HorizontalAlignment.Left,
                        true,
                        15.6686,
                        new Dimension(98.6409),
                        true),
                new PopupTemplate("quia optio earum",
                        "maxime",
                        ["eaque",
                            "provident"],
                    [new FieldInfo("name",
                            "voluptas",
                            "corporis",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.DayShortMonthYear),
                            true,
                            true,
                        StatisticType.Var)],
                    [new AttachmentsPopupContent("aliquam quasi cum",
                            "dolor qui provident placeat",
                            AttachmentsPopupContentDisplayType.Preview),
                    new TextPopupContent("repudiandae voluptatem dolor")],
                    [new ExpressionInfo("return $feature['FieldName'];",
                            "id",
                            "voluptatem velit officiis",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "password",
                            "neque tempore minima",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("et eum ad",
                            "https://picsum.photos/640/480/?image=171",
                            "4338a5d4-be6a-836a-83a3-736b4daab93e",
                            () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "perferendis")]),
                    new AttributesDictionary(),
                    true,
                    "nesciunt",
                    "voluptas",
                    new GraphicOrigin(Guid.NewGuid(),
                        "velit",
                        5)),
                [4,
                    4]);
        Assert.IsNotNull(deleteAttachmentsMethodResult);
        var queryAttachmentsMethodResult = await featureLayer.QueryAttachments(new AttachmentQuery("et",
                    ["suscipit"],
                    true,
                    [2,
                        2],
                    ["ipsam",
                        "sed"],
                    "category",
                    883.7585,
                    [3,
                        3],
                    true,
                    [6],
                    622.4391,
                    "ObjectID = 1"),
                default);
        Assert.IsNotNull(queryAttachmentsMethodResult);
        var saveMethodResult = await featureLayer.Save(new FeatureLayerBaseSaveOptions(new FeatureLayerBaseSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await featureLayer.SaveAs(new PortalItem(),
            new FeatureLayerBaseSaveAsOptions(new PortalFolder(new DateTime(2017, 11, 18, 18, 16, 13),
                        "aperiam",
                        "et maiores magni"),
                new FeatureLayerBaseSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        var updateAttachmentMethodResult = await featureLayer.UpdateAttachment(new Graphic(new Polyline([new MapPath([new MapPoint([690.3418,
                            215.5022])]),
                        new MapPath([new MapPoint([944.9104,
                                359.6776]),
                            new MapPoint([999.4944,
                                270.9082])])],
                    new SpatialReference(4,
                            "perspiciatis",
                            "omnis",
                            "veniam"),
                        true,
                        true),
                new TextSymbol("repellendus quia et",
                    new MapColor(180, 134, 79),
                    new MapColor(253, 146, 187),
                        new Dimension(459.9711),
                    new MapFont(new Dimension(59.4127),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.None),
                        231.3582,
                    new MapColor(116, 36, 14),
                    new MapColor(123, 217, 17),
                        419.2021,
                    HorizontalAlignment.Left,
                        true,
                        570.3789,
                        new Dimension(136.5432),
                        true),
                new PopupTemplate("porro cumque aut",
                        "excepturi",
                        ["molestiae"],
                    [new FieldInfo("id",
                            "molestiae",
                            "quo",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.LongDateShortTime),
                            true,
                            true,
                        StatisticType.Max),
                    new FieldInfo("id",
                            "hic",
                            "consequatur",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(4,
                                true,
                            DateFormat.ShortDateLeLongTime),
                            true,
                            true,
                        StatisticType.Count)],
                    [new MediaPopupContent("sit porro ratione",
                            "et aspernatur ratione aut",
                        [new ColumnChartMediaInfo("culpa modi libero",
                                "doloribus",
                                "ratione consectetur id",
                            new ChartMediaInfoValue(["ab"],
                                    "aut",
                                    "veritatis",
                                [new ChartMediaInfoValueSeries("comment",
                                        "facere",
                                        78.8194)],
                                [new MapColor(191, 205, 163),
                                new MapColor(40, 23, 17)])),
                        new ImageMediaInfo("temporibus tempora omnis",
                                "qui",
                                "quo voluptatum explicabo",
                            new ImageMediaInfoValue("http://felton.net",
                                    "https://zoila.com"),
                                131.9931)],
                            6)],
                    [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "name",
                            "laudantium ipsum aut",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("praesentium rerum rerum",
                            "https://picsum.photos/640/480/?image=850",
                            "fd9d9073-aaf4-d18f-34a3-ad6f39a02139",
                            () => { Console.WriteLine("et"); return Task.CompletedTask; },
                            "token",
                            true,
                            true,
                            true,
                            "vel"),
                            new ActionButton("ut commodi sed",
                                "https://picsum.photos/640/480/?image=397",
                                "74f0e9e9-8716-2654-e04d-96b3d4e0597b",
                                () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "pariatur")]),
                    new AttributesDictionary(),
                    true,
                    "aut",
                    "sequi",
                    new GraphicOrigin(Guid.NewGuid(),
                        "modi",
                        3)),
                5,
                default);
        Assert.IsNotNull(updateAttachmentMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await featureLayer.SetPortalItem(testPortalItem);
        var portalItem = await featureLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        ListMode testListMode = ListMode.Hide;
        await featureLayer.SetListMode(testListMode);
        var listMode = await featureLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("nisi reprehenderit error",
                    "sed",
                    ["dolor",
                        "quae"],
                [new FieldInfo("createdAt",
                        "iure",
                        "ut",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.ShortDateLeLongTime),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("phone",
                        "neque",
                        "placeat",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateLe),
                        true,
                        true,
                    StatisticType.Avg)],
                [new FieldsPopupContent([new FieldInfo("name",
                            "omnis",
                            "ut",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.LongDateLongTime24),
                            true,
                            true,
                        StatisticType.Count)],
                        "et nulla",
                        "reprehenderit dolor facere"),
                new FieldsPopupContent([new FieldInfo("name",
                            "iusto",
                            "corrupti",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLe),
                            true,
                            true,
                        StatisticType.Avg)],
                        "est ab",
                        "maxime voluptatem fuga")],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "name",
                        "minima quia voluptatem",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("asperiores maxime aspernatur",
                        "https://picsum.photos/640/480/?image=603",
                        "1f661978-bc7f-9e63-b5be-38371f3790b9",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "email",
                        true,
                        true,
                        true,
                        "nisi")]);
        await featureLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await featureLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        BlendMode testBlendMode = BlendMode.Lighten;
        await featureLayer.SetBlendMode(testBlendMode);
        var blendMode = await featureLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FeatureLayerBaseElevationInfo testElevationInfo = new FeatureLayerBaseElevationInfo(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Name;",
                        "cupiditate non odit"),
                ElevationInfoMode.OnTheGround,
                    494.7879,
                ElevationUnit.Unknown);
        await featureLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await featureLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("eaque",
                    5801530.2214)],
                    true,
                new FeatureFilter(428.2929,
                    new Point(-90.9720,
                            85.8110,
                            125.7118,
                            31.6651,
                            614.6958,
                        new SpatialReference(5,
                                "qui",
                                "qui",
                                "quos"),
                            true,
                            true,
                            975.3136),
                        [1,
                            5],
                    SpatialRelationship.Overlaps,
                    new TimeExtent(new DateTime(2014, 2, 7, 6, 10, 28),
                            new DateTime(2021, 8, 12, 20, 4, 32)),
                        QueryUnits.Miles,
                        "Name = 'John Doe'"),
                    [new Effect("quos",
                        10103390.2805)]);
        await featureLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await featureLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "phone",
                    "eaque",
                    "tempora sint cumque",
                    3,
                    true,
                    true,
                    new { Value = "quas" },
                FieldValueType.None,
                    new CodedValueDomain<string>([new CodedValue<string>(),
                        new CodedValue<string>()],
                        "email"))];
        await featureLayer.SetFields(testFields);
        var fields = await featureLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        LayerFloorInfo testFloorInfo = new LayerFloorInfo("similique");
        await featureLayer.SetFloorInfo(testFloorInfo);
        var floorInfo = await featureLayer.GetFloorInfo();
        Assert.AreEqual(testFloorInfo, floorInfo);
        FormTemplate testFormTemplate = new FormTemplate("ex a dolorem",
                    "ducimus officiis excepturi excepturi",
                    true,
                [new GroupElement("sunt est sed vero",
                    [new GroupElement("asperiores officiis fuga et",
                        [new FieldElement("email",
                                "consequatur",
                                "facere autem inventore",
                                "molestias",
                                "et",
                                "eum",
                                "maxime",
                                new CodedValueDomain<string>([new CodedValue<string>()],
                                    "token"),
                                default,
                                "sit")],
                        InitialState.Collapsed,
                            "qui",
                            "distinctio")],
                    InitialState.Collapsed,
                        "nobis",
                        "quasi"),
                new FieldElement("category",
                        "aperiam",
                        "nihil repudiandae esse",
                        "tempore",
                        "cum",
                        "delectus",
                        "doloremque",
                        new CodedValueDomain<string>([new CodedValue<string>()],
                            "phone"),
                        default,
                        "quod")],
                [new ExpressionInfo("return Date();",
                        "password",
                        "omnis eius nulla",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return Date();",
                        "phone",
                        "id perferendis ut",
                        ExpressionInfoReturnType.String)]);
        await featureLayer.SetFormTemplate(testFormTemplate);
        var formTemplate = await featureLayer.GetFormTemplate();
        Assert.AreEqual(testFormTemplate, formTemplate);
        Extent testFullExtent = new Extent(-131.8837,
                    48.5943,
                    -56.8473,
                    -30.9879,
                    822.1480,
                    519.7798,
                    579.8276,
                    984.7177,
                new SpatialReference(8,
                        "laboriosam",
                        "atque",
                        "asperiores"),
                    true,
                    true);
        await featureLayer.SetFullExtent(testFullExtent);
        var fullExtent = await featureLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveBefore,
                    "adipisci",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    19183255.1395,
                    3557.3391,
                    true,
                    new Dimension(934.4623),
                new TextSymbol("explicabo vero nihil",
                    new MapColor(18, 202, 144),
                    new MapColor(86, 184, 146),
                        new Dimension(17.0510),
                    new MapFont(new Dimension(382.1750),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        469.6653,
                    new MapColor(53, 186, 242),
                    new MapColor(18, 145, 87),
                        790.2267,
                    HorizontalAlignment.Right,
                        true,
                        301.5890,
                        new Dimension(78.5778),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.BelowRight,
                    "repudiandae",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    20041759.0640,
                    49121.9830,
                    true,
                    new Dimension(593.2596),
                new TextSymbol("adipisci ut et",
                    new MapColor(81, 198, 28),
                    new MapColor(101, 48, 106),
                        new Dimension(908.9586),
                    new MapFont(new Dimension(58.7353),
                            "Arial",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        769.1618,
                    new MapColor(156, 193, 245),
                    new MapColor(56, 36, 193),
                        942.4128,
                    HorizontalAlignment.Center,
                        true,
                        772.7668,
                        new Dimension(180.6675),
                        true),
                    true,
                    "Street = '123 Main St.'")];
        await featureLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await featureLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("praesentium",
                SortOrder.Descending,
                    "molestiae"),
            new OrderedLayerOrderBy("fuga",
                SortOrder.Descending,
                    "aut")];
        await featureLayer.SetOrderBy(testOrderBy);
        var orderBy = await featureLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("quo harum omnis",
                    new MapColor(152, 198, 71),
                    new MapColor(184, 18, 88),
                        new Dimension(49.0042),
                    new MapFont(new Dimension(238.5329),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        306.7289,
                    new MapColor(44, 180, 1),
                    new MapColor(131, 56, 144),
                        526.9740,
                    HorizontalAlignment.Center,
                        true,
                        699.8350,
                        new Dimension(969.2539),
                        true),
                    "ipsa",
                [new SizeVariable("nihil",
                        new Dimension(338.2867),
                        new Dimension(599.5337),
                        208.9890,
                        161.0967,
                        VisualValueRepresentation.Radius,
                        VisualValueUnit.Centimeters,
                        "et",
                        "iure",
                        true,
                        VisualAxis.Width,
                        "corporis",
                        "deserunt provident debitis",
                    new VisualVariableLegendOptions(true,
                            "et molestias voluptate")),
                new OpacityVariable("debitis",
                        "odit",
                    [new OpacityStop(54.0667,
                            0.2081,
                            "ab")],
                    new VisualVariableLegendOptions(true,
                            "et aliquid error"),
                        "et",
                        "voluptates pariatur nemo")],
                new AuthoringInfo(ClassificationMethod.Manual,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(236, 32, 17),
                            new MapColor(156, 60, 52)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(82, 7, 142),
                            new MapColor(194, 241, 149))]),
                        446.1508,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(718.3099,
                                46.6943),
                        new AuthoringInfoField1ClassBreakInfos(511.0638,
                                846.7629)],
                            "vel",
                            "porro",
                            "nostrum"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(84.1918,
                                241.1701),
                        new AuthoringInfoField1ClassBreakInfos(908.9080,
                                888.0068)],
                            "nemo",
                            "quia",
                            "voluptate"),
                        ["maiores"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "qui",
                        true,
                    LengthUnit.Miles,
                        618.2859,
                        998.0059,
                        320.6765,
                        161.0060));
        await featureLayer.SetRenderer(testRenderer);
        var renderer = await featureLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "a",
                    "adipisci",
                    "doloribus");
        await featureLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("sit quaerat",
                DrawingTool.Freehand,
                    "title",
                new Graphic(new Extent(62.2916,
                            106.8845,
                            29.0609,
                            73.3317,
                            845.7566,
                            553.9953,
                            947.4434,
                            413.1262,
                        new SpatialReference(6,
                                "beatae",
                                "alias",
                                "et"),
                            true,
                            true),
                    new TextSymbol("voluptatum atque est",
                        new MapColor(238, 185, 204),
                        new MapColor(60, 191, 116),
                            new Dimension(897.9950),
                        new MapFont(new Dimension(723.9465),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            841.7603,
                        new MapColor(231, 126, 131),
                        new MapColor(210, 24, 54),
                            961.7961,
                        HorizontalAlignment.Left,
                            true,
                            377.1334,
                            new Dimension(457.6288),
                            true),
                    new PopupTemplate("rerum repudiandae assumenda",
                            "qui",
                            ["sed",
                                "excepturi"],
                        [new FieldInfo("password",
                                "eaque",
                                "repudiandae",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Var)],
                        [new TextPopupContent("molestias dolor rerum")],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "group",
                                "officia asperiores quibusdam",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "category",
                                "similique voluptatem inventore",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("itaque expedita assumenda",
                                "https://picsum.photos/640/480/?image=79",
                                "f3baee22-96f0-4413-7575-0943b354a676",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "facere"),
                                new ActionButton("quae doloremque delectus",
                                    "https://picsum.photos/640/480/?image=1024",
                                    "7fd4d002-2668-7638-6b0f-9a4fcd8ee9ca",
                                    () => { Console.WriteLine("dolore"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "quam")]),
                        new AttributesDictionary(),
                        true,
                        "harum",
                        "sunt",
                        new GraphicOrigin(Guid.NewGuid(),
                            "autem",
                            6)),
                    new Thumbnail("aut",
                        "ipsam",
                        22.6966,
                        294.3885)),
            new FeatureTemplate("perspiciatis sunt",
                DrawingTool.AutoCompletePolygon,
                    "group",
                new Graphic(new Polyline([new MapPath([new MapPoint([461.1913,
                                540.6584]),
                            new MapPoint([865.8817])])],
                        new SpatialReference(6,
                                "consequatur",
                                "earum",
                                "ducimus"),
                            true,
                            true),
                    new TextSymbol("doloremque tenetur et",
                        new MapColor(162, 159, 76),
                        new MapColor(51, 126, 93),
                            new Dimension(440.9098),
                        new MapFont(new Dimension(988.6371),
                                "Bookman",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.LineThrough),
                            940.4046,
                        new MapColor(188, 90, 243),
                        new MapColor(216, 166, 166),
                            13.2134,
                        HorizontalAlignment.Center,
                            true,
                            472.7407,
                            new Dimension(695.8689),
                            true),
                    new PopupTemplate("et ut et",
                            "explicabo",
                            ["non",
                                "rerum"],
                        [new FieldInfo("group",
                                "rerum",
                                "soluta",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateLongTime),
                                true,
                                true,
                            StatisticType.Var)],
                        [new TextPopupContent("dolorum porro officiis"),
                        new AttachmentsPopupContent("minima vitae velit",
                                "expedita maxime debitis placeat",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "phone",
                                "ut voluptas nihil",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("quos dolor repellendus",
                                "https://picsum.photos/640/480/?image=379",
                                "1b748cc8-cb9a-eff7-13ca-e46b1c95eb19",
                                () => { Console.WriteLine("totam"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "a")]),
                        new AttributesDictionary(),
                        true,
                        "rerum",
                        "molestias",
                        new GraphicOrigin(Guid.NewGuid(),
                            "dignissimos",
                            1)),
                    new Thumbnail("beatae",
                        "quis",
                        35.3207,
                        263.8691))];
        await featureLayer.SetTemplates(testTemplates);
        var templates = await featureLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2023, 7, 12, 16, 22, 42),
                    new DateTime(2014, 10, 21, 7, 23, 9));
        await featureLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await featureLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("dolores",
                    "magnam",
                new TimeExtent(new DateTime(2018, 9, 2, 0, 24, 17),
                        new DateTime(2010, 7, 7, 21, 29, 48)),
                new TimeInterval(TemporalTime.Hours,
                        168.8820),
                    [new DateTime(2003, 8, 12, 0, 50, 52),
                        new DateTime(2011, 8, 19, 19, 10, 55)],
                    "Pacific/Honolulu",
                    "saepe");
        await featureLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await featureLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Months,
                    159.7635);
        await featureLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await featureLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        IReadOnlyList<FeatureType> testTypes = [new FeatureType("bd115f5d-7383-ff65-2739-ed75d3bcad01",
                    "email",
                [new FeatureTemplate("et reprehenderit alias",
                    DrawingTool.Arrow,
                        "updatedAt",
                    new Graphic(new Point(-5.1525,
                                0.3234,
                                175.8609,
                                -33.8380,
                                925.1855,
                            new SpatialReference(5,
                                    "ea",
                                    "molestias",
                                    "dolores"),
                                true,
                                true,
                                263.9984),
                        new TextSymbol("sed quo ad",
                            new MapColor(30, 122, 78),
                            new MapColor(247, 111, 53),
                                new Dimension(265.7017),
                            new MapFont(new Dimension(726.1624),
                                    "Palatino",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                191.0615,
                            new MapColor(247, 95, 87),
                            new MapColor(95, 249, 196),
                                41.4708,
                            HorizontalAlignment.Right,
                                true,
                                111.4747,
                                new Dimension(993.1214),
                                true),
                        new PopupTemplate("architecto sed dolor",
                                "illum",
                                ["quia",
                                    "consequatur"],
                            [new FieldInfo("category",
                                    "maxime",
                                    "praesentium",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("avatar",
                                    "consequuntur",
                                    "velit",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Avg)],
                            [new AttachmentsPopupContent("non architecto architecto",
                                    "iure consectetur accusamus",
                                    AttachmentsPopupContentDisplayType.Preview)],
                            [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "category",
                                    "reprehenderit officia quo",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("aut sed odit",
                                    "https://picsum.photos/640/480/?image=1078",
                                    "557f6826-a5ba-ed65-68ef-b17f84c58da2",
                                    () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "et")]),
                            new AttributesDictionary(),
                            true,
                            "ex",
                            "aut",
                            new GraphicOrigin(Guid.NewGuid(),
                                "asperiores",
                                5)),
                        new Thumbnail("ut",
                            "facilis",
                            17.8701,
                            56.6994))],
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "token"),
                    "consequuntur"),
            new FeatureType("32b0f366-bf06-39ae-9b18-8faa0a30b48c",
                    "email",
                [new FeatureTemplate("deserunt voluptatibus in labore",
                    DrawingTool.UpArrow,
                        "phone",
                    new Graphic(new Polyline([new MapPath([new MapPoint([188.7974])]),
                                new MapPath([new MapPoint([89.9193,
                                        470.5982]),
                                    new MapPoint([412.1890,
                                        21.4136])])],
                            new SpatialReference(3,
                                    "maxime",
                                    "doloremque",
                                    "et"),
                                true,
                                true),
                        new TextSymbol("atque veniam excepturi",
                            new MapColor(181, 199, 43),
                            new MapColor(223, 136, 52),
                                new Dimension(669.8935),
                            new MapFont(new Dimension(664.0250),
                                    "Courier New",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.None),
                                319.0692,
                            new MapColor(172, 87, 104),
                            new MapColor(17, 68, 249),
                                771.3876,
                            HorizontalAlignment.Center,
                                true,
                                78.6682,
                                new Dimension(635.8934),
                                true),
                        new PopupTemplate("dolorum cumque harum",
                                "sed",
                                ["dolores"],
                            [new FieldInfo("id",
                                    "nihil",
                                    "et",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Count)],
                            [new MediaPopupContent("praesentium corporis et",
                                    "quidem error",
                                [new LineChartMediaInfo("et corrupti eos",
                                        "quam",
                                        "reprehenderit laboriosam consequatur",
                                    new ChartMediaInfoValue(["nemo",
                                            "voluptatem"],
                                            "veniam",
                                            "sunt",
                                        [new ChartMediaInfoValueSeries("status",
                                                "nihil",
                                                546.1200)],
                                        [new MapColor(163, 130, 17),
                                        new MapColor(19, 219, 244)]))],
                                    1),
                            new AttachmentsPopupContent("quaerat delectus aut",
                                    "quibusdam aut voluptatem consectetur",
                                    AttachmentsPopupContentDisplayType.Preview)],
                            [new ExpressionInfo("return $feature.Name;",
                                    "comment",
                                    "animi quia doloribus",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "id",
                                    "veniam quis voluptatem",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("eveniet deleniti et",
                                    "https://picsum.photos/640/480/?image=1062",
                                    "60c7328c-07c8-000c-df4e-f8d01cf0982e",
                                    () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "laborum")]),
                            new AttributesDictionary(),
                            true,
                            "quo",
                            "aut",
                            new GraphicOrigin(Guid.NewGuid(),
                                "vel",
                                5)),
                        new Thumbnail("rerum",
                            "quia",
                            79.9710,
                            21.9756))],
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "name"),
                    "dolorum")];
        await featureLayer.SetTypes(testTypes);
        var types = await featureLayer.GetTypes();
        Assert.AreEqual(testTypes, types);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 9, 23, 10, 56, 58),
                    new DateTime(2011, 1, 7, 10, 32, 28));
        await featureLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await featureLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
