@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureLayer(Action renderHandler)
    {
        FeatureLayer? featureLayer = null;

        FeatureLayerEditsEvent? editsResult = null;
        void OnEdits(FeatureLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <FeatureLayer 
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")"
                        OutFields="@(["qui",
                            "praesentium",
                            "possimus"])"
                        DefinitionExpression="@("ducimus")"
                        MinScale="@(6238.0019)"
                        MaxScale="@(35610557.7047)"
                        ObjectIdField="@("incidunt")"
                        Title="@("rerum at consequatur")"
                        Opacity="@(0.5700)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        ApiKey="@("assumenda")"
                        BlendMode="@(BlendMode.Color)"
                        Charts="@(["tempore",
                            "debitis"])"
                        Copyright="@("consequatur")"
                        DateFieldsTimeZone="@("voluptatum")"
                        DisplayField="@("eum")"
                        EditingEnabled="@(true)"
                        FullExtent="@(new Extent(14.6487,
                                22.6812,
                                -16.8027,
                                -38.3742,
                                673.6004,
                                162.6808,
                                606.4342,
                                757.4558,
                            new SpatialReference(1,
                                    "sint",
                                    "libero",
                                    "enim"),
                                true,
                                true))"
                        GdbVersion="@("4.7.6.9")"
                        HasM="@(true)"
                        HasZ="@(true)"
                        HistoricMoment="@(new DateTime(2021, 4, 9, 1, 11, 23))"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(909.2590)"
                        ReturnM="@(true)"
                        ReturnZ="@(true)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        SpatialReference="@(new SpatialReference(4,
                                "laudantium",
                                "minus",
                                "ab"))"
                        TypeIdField="@("qui")"
                        Types="@([new FeatureType("cb574d83-af68-dccc-ad60-6f010ca8f9e5",
                                "comment",
                            [new FeatureTemplate("maiores unde aliquid quae enim sunt",
                                DrawingTool.Arrow,
                                    "status",
                                new Graphic(new Extent(-73.4574,
                                            -174.8844,
                                            58.9862,
                                            22.6031,
                                            879.0938,
                                            647.1059,
                                            766.8824,
                                            453.4857,
                                        new SpatialReference(3,
                                                "fuga",
                                                "ut",
                                                "est"),
                                            true,
                                            true),
,
                                    new PopupTemplate("perspiciatis minima et",
                                            "eum",
                                            ["eum",
                                                "vero"],
                                        [new FieldInfo("avatar",
                                                "asperiores",
                                                "vero",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(8,
                                                    true,
                                                DateFormat.LongDateShortTime24),
                                                true,
                                                true,
                                            StatisticType.Count),
                                        new FieldInfo("title",
                                                "excepturi",
                                                "eveniet",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(8,
                                                    true,
                                                DateFormat.LongDate),
                                                true,
                                                true,
                                            StatisticType.Sum)],
                                        [,
],
                                        [new ExpressionInfo("return $feature.Name;",
                                                "id",
                                                "error sit ducimus",
                                                default),
                                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                                "phone",
                                                "totam et ea",
                                                default)],
                                            true,
                                            true,
                                        [,
,
,
]),
                                        default,
                                        true,
                                        "quia",
                                        "et",
                                        default),
                                    default)],
                            new Dictionary<string, Domain>() {{ "dolorem",  }
                            },
                                "unde"),
                        new FeatureType("be907e4b-a371-900b-8ba4-7efe5026e5c6",
                                "updatedAt",
                            [new FeatureTemplate("porro eos eveniet enim accusantium rem odio",
                                DrawingTool.UpArrow,
                                    "category",
                                new Graphic(new Point(-157.6797,
                                            22.1921,
                                            70.7517,
                                            48.3993,
                                            485.1073,
                                        new SpatialReference(5,
                                                "voluptas",
                                                "natus",
                                                "incidunt"),
                                            true,
                                            true,
                                            591.9248),
,
                                    new PopupTemplate("mollitia corrupti veniam",
                                            "rerum",
                                            ["perspiciatis",
                                                "molestiae",
                                                "voluptatem",
                                                "consequatur"],
                                        [new FieldInfo("password",
                                                "atque",
                                                "a",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(5,
                                                    true,
                                                DateFormat.LongMonthDayYearShortTime24),
                                                true,
                                                true,
                                            StatisticType.Var),
                                        new FieldInfo("group",
                                                "laborum",
                                                "aut",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(2,
                                                    true,
                                                DateFormat.DayShortMonthYear),
                                                true,
                                                true,
                                            StatisticType.Min)],
                                        [,
],
                                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                                "id",
                                                "velit illum qui",
                                                default),
                                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                                "status",
                                                "corporis ut dolores",
                                                default)],
                                            true,
                                            true,
                                        [,
,
,
]),
                                        default,
                                        true,
                                        "possimus",
                                        "distinctio",
                                        default),
                                    default),
                            new FeatureTemplate("odio suscipit debitis eveniet mollitia",
                                DrawingTool.Polygon,
                                    "category",
                                new Graphic(new Extent(-149.0599,
                                            -95.0878,
                                            -25.4311,
                                            -7.8250,
                                            768.6229,
                                            275.8490,
                                            413.6076,
                                            345.4101,
                                        new SpatialReference(1,
                                                "deserunt",
                                                "aut",
                                                "omnis"),
                                            true,
                                            true),
,
                                    new PopupTemplate("at maxime architecto",
                                            "eaque",
                                            ["possimus",
                                                "dicta",
                                                "explicabo",
                                                "est"],
                                        [new FieldInfo("token",
                                                "fugit",
                                                "impedit",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(9,
                                                    true,
                                                DateFormat.ShortDateShortTime),
                                                true,
                                                true,
                                            StatisticType.Sum),
                                        new FieldInfo("category",
                                                "dolores",
                                                "vitae",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(5,
                                                    true,
                                                DateFormat.ShortDateLongTime),
                                                true,
                                                true,
                                            StatisticType.Min)],
                                        [],
                                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                                "avatar",
                                                "aut omnis sed",
                                                default)],
                                            true,
                                            true,
                                        [,
,
]),
                                        default,
                                        true,
                                        "expedita",
                                        "numquam",
                                        default),
                                    default),
                            new FeatureTemplate("perferendis nemo iusto accusantium sint amet dolorum",
                                DrawingTool.LeftArrow,
                                    "password",
                                new Graphic(new Extent(0.7965,
                                            22.1850,
                                            -73.0418,
                                            -63.3617,
                                            897.8190,
                                            520.0972,
                                            936.0571,
                                            79.6218,
                                        new SpatialReference(6,
                                                "quo",
                                                "repellat",
                                                "necessitatibus"),
                                            true,
                                            true),
,
                                    new PopupTemplate("non ut blanditiis",
                                            "vero",
                                            ["vel",
                                                "aliquam"],
                                        [new FieldInfo("group",
                                                "magnam",
                                                "quaerat",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(9,
                                                    true,
                                                DateFormat.LongDateLongTime),
                                                true,
                                                true,
                                            StatisticType.Sum)],
                                        [,
,
,
],
                                        [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                                "updatedAt",
                                                "molestiae libero quo",
                                                default),
                                        new ExpressionInfo("return Date();",
                                                "status",
                                                "in et optio",
                                                default),
                                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                                "id",
                                                "amet quas sunt",
                                                default)],
                                            true,
                                            true,
                                        []),
                                        default,
                                        true,
                                        "maxime",
                                        "praesentium",
                                        default),
                                    default),
                            new FeatureTemplate("eius unde id sit",
                                DrawingTool.AutoCompletePolygon,
                                    "category",
                                new Graphic(new Extent(157.9691,
                                            102.1996,
                                            65.0574,
                                            80.6547,
                                            449.0508,
                                            581.9076,
                                            50.4901,
                                            313.3492,
                                        new SpatialReference(2,
                                                "quia",
                                                "odio",
                                                "ut"),
                                            true,
                                            true),
,
                                    new PopupTemplate("sapiente tempore numquam",
                                            "unde",
                                            ["maiores",
                                                "omnis"],
                                        [new FieldInfo("group",
                                                "aut",
                                                "sed",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(6,
                                                    true,
                                                DateFormat.LongMonthDayYearLongTime24),
                                                true,
                                                true,
                                            StatisticType.Count),
                                        new FieldInfo("email",
                                                "voluptate",
                                                "velit",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(6,
                                                    true,
                                                DateFormat.LongDateLongTime24),
                                                true,
                                                true,
                                            StatisticType.Var),
                                        new FieldInfo("name",
                                                "sed",
                                                "dignissimos",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(7,
                                                    true,
                                                DateFormat.ShortDateShortTime24),
                                                true,
                                                true,
                                            StatisticType.Avg)],
                                        [,
,
,
],
                                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                                "group",
                                                "iusto fugiat quam",
                                                default),
                                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                                "name",
                                                "assumenda similique nisi",
                                                default)],
                                            true,
                                            true,
                                        []),
                                        default,
                                        true,
                                        "quo",
                                        "necessitatibus",
                                        default),
                                    default)],
                            new Dictionary<string, Domain>() {{ "sint",  },
                            { "ut",  },
                            { "itaque",  }
                            },
                                "non")])"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(676.9244)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("qui")"
                            EndField="@("quia")"
                            Stops="@([new DateTime(2014, 2, 6, 12, 10, 8),
                                new DateTime(2003, 2, 12, 20, 32, 34)])"
                            TimeZone="@("America/Lima")"
                            TrackIdField="@("sequi")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(359.9912)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2011, 9, 5, 11, 16, 52))"
                                End="@(new DateTime(2017, 4, 14, 19, 40, 10))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2020, 3, 3, 13, 20, 39))"
                            End="@(new DateTime(2016, 2, 22, 8, 56, 18))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("ipsum assumenda et et et aut")"
                            DrawingTool="@(DrawingTool.UpArrow)"
                            Name="@("email")"
>
                            <Graphic 
                                Geometry="@(new Extent(92.5605,
                                        -134.8694,
                                        -87.2064,
                                        87.3768,
                                        629.2893,
                                        712.6582,
                                        776.7626,
                                        99.0191,
                                    new SpatialReference(4,
                                            "dolor",
                                            "ad",
                                            "magnam"),
                                        true,
                                        true))"
                                PopupTemplate="@(new PopupTemplate("dolor eius quia",
                                        "illum",
                                        ["et",
                                            "est"],
                                    [new FieldInfo("group",
                                            "quis",
                                            "dolorem",
                                        StringFieldOption.TextArea,
                                        new FieldInfoFormat(7,
                                                true,
                                            DateFormat.ShortDateLeShortTime),
                                            true,
                                            true,
                                        StatisticType.Max),
                                    new FieldInfo("email",
                                            "ut",
                                            "nihil",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(9,
                                                true,
                                            DateFormat.ShortDateLongTime24),
                                            true,
                                            true,
                                        StatisticType.Var)],
                                    [,
,
,
],
                                    [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                            "status",
                                            "magnam quo laboriosam",
                                            default),
                                    new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                            "title",
                                            "qui nihil illo",
                                            default),
                                    new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                            "status",
                                            "cum id voluptatem",
                                            default),
                                    new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                            "title",
                                            "est tempore doloribus",
                                            default)],
                                        true,
                                        true,
                                    [,
,
]))"
                                Visible="@(true)"
                                LegendLabel="@("ea")"
                                AggregateGeometries="@("est")"
>
                            </Graphic>
                        </FeatureTemplate>
                        <Graphic 
                            Geometry="@(new Extent(-78.1912,
                                    74.6142,
                                    -8.1523,
                                    -81.1334,
                                    154.4220,
                                    803.7887,
                                    917.4226,
                                    268.9442,
                                new SpatialReference(9,
                                        "pariatur",
                                        "voluptas",
                                        "alias"),
                                    true,
                                    true))"
                            Visible="@(true)"
                            LegendLabel="@("sint")"
                            AggregateGeometries="@("corporis")"
>
                            <PopupTemplate 
                                Title="@("fuga enim dolorum")"
                                StringContent="@("fuga")"
                                OutFields="@(["laboriosam",
                                    "fugit",
                                    "neque"])"
                                FieldInfos="@([new FieldInfo("avatar",
                                        "voluptatem",
                                        "quod",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.LongDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("name",
                                        "dolor",
                                        "nobis",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.LongDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("email",
                                        "numquam",
                                        "eaque",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateLe),
                                        true,
                                        true,
                                    StatisticType.Min)])"
                                Content="@([,
,
])"
                                ExpressionInfos="@([new ExpressionInfo("return Date();",
                                        "email",
                                        "atque ea corporis",
                                        default)])"
                                OverwriteActions="@(true)"
                                ReturnGeometry="@(true)"
                                Actions="@([,
,
,
])">
                            </PopupTemplate>
                        </Graphic>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("officiis alias assumenda")"
                            StringContent="@("laborum")"
                            OutFields="@(["distinctio",
                                "harum"])"
                            FieldInfos="@([new FieldInfo("group",
                                    "maiores",
                                    "repellat",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("createdAt",
                                    "libero",
                                    "autem",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("name",
                                    "minus",
                                    "illo",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([,
,
,
])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "title",
                                    "rerum quos asperiores",
                                    default),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "title",
                                    "asperiores voluptas beatae",
                                    default)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("illo")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("corporis")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowRight)"
                            LabelExpression="@("error")"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(24554120.6474)"
                            MinScale="@(35090.8733)"
                            RepeatLabel="@(true)"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <FormTemplate 
                            Title="@("animi beatae eos")"
                            Description="@("rerum atque modi consequatur fugiat quis")"
                            PreserveFieldValuesWhenHidden="@(true)"
                            Elements="@([,
,
])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "phone",
                                    "nam dolorem nemo",
                                    default),
                            new ExpressionInfo("return Date();",
                                    "email",
                                    "et rerum molestiae",
                                    default)])">
                        </FormTemplate>
                        <LayerFloorInfo 
                            FloorField="@("maiores")">
                        </LayerFloorInfo>
                        <Field 
                            Name="@("password")"
                            Alias="@("sit")"
                            Description="@("perspiciatis deleniti nulla eligendi")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "vel" })"
                            ValueType="@(FieldValueType.NameOrTitle)"
>
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([default,
                                default,
                                default])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(727.1904,
                                new Point(113.8846,
                                        -79.2500,
                                        -88.9820,
                                        -78.9846,
                                        431.2946,
                                    new SpatialReference(5,
                                            "voluptatem",
                                            "incidunt",
                                            "esse"),
                                        true,
                                        true,
                                        209.4167),
                                    [9,
                                        3],
                                SpatialRelationship.EnvelopeIntersects,
                                new TimeExtent(new DateTime(2000, 5, 22, 16, 28, 45),
                                        new DateTime(2011, 9, 27, 8, 34, 42)),
                                    default,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([default])">
                        </FeatureEffect>
                        <FeatureLayerBaseElevationInfo 
                            FeatureExpressionInfo="@(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Name;",
                                    "recusandae tempore sint"))"
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(226.7144)"
                            Unit="@(ElevationUnit.Feet)">
                        </FeatureLayerBaseElevationInfo>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureLayer!);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<FeatureLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "feature");
        var queryAttachmentsMethodResult = await featureLayer.QueryAttachments(new AttachmentQuery("aspernatur",
                    ["vel",
                        "eaque"],
                    true,
                    [5,
                        4,
                        3,
                        2],
                    ["in",
                        "pariatur",
                        "autem"],
                    "token",
                    101.2222,
                    [1,
                        7,
                        8,
                        1],
                    true,
                    [8,
                        9],
                    219.1597,
                    "ObjectID = 1"),
                default);
        Assert.IsNotNull(queryAttachmentsMethodResult);
        var saveMethodResult = await featureLayer.Save(new FeatureLayerBaseSaveOptions(new FeatureLayerBaseSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await featureLayer.SaveAs(new PortalItem(),
            new FeatureLayerBaseSaveAsOptions(new PortalFolder(new DateTime(2010, 4, 6, 16, 37, 8),
                        "dolores",
                        "vitae voluptates eum"),
                new FeatureLayerBaseSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await featureLayer.SetPortalItem(testPortalItem);
        var portalItem = await featureLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        ListMode testListMode = ListMode.Hide;
        await featureLayer.SetListMode(testListMode);
        var listMode = await featureLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("earum quam omnis",
                    "omnis",
                    ["similique",
                        "vero",
                        "eum",
                        "et"],
                [new FieldInfo("comment",
                        "dolore",
                        "neque",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.LongMonthDayYearLongTime24),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("phone",
                        "sunt",
                        "est",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Stddev)],
                [,
],
                [new ExpressionInfo("return $feature.Name;",
                        "name",
                        "quo sint sit",
                        default)],
                    true,
                    true,
                [,
,
]);
        await featureLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await featureLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        BlendMode testBlendMode = BlendMode.Color;
        await featureLayer.SetBlendMode(testBlendMode);
        var blendMode = await featureLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FeatureLayerBaseElevationInfo testElevationInfo = new FeatureLayerBaseElevationInfo(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "omnis dignissimos unde"),
                ElevationInfoMode.RelativeToGround,
                    783.8769,
                ElevationUnit.Unknown);
        await featureLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await featureLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([default,
                    default,
                    default,
                    default],
                    true,
                new FeatureFilter(337.7045,
                    new Point(-126.3124,
                            73.9292,
                            18.7269,
                            -53.7625,
                            75.9083,
                        new SpatialReference(3,
                                "nulla",
                                "necessitatibus",
                                "explicabo"),
                            true,
                            true,
                            298.4763),
                        [4,
                            5,
                            4,
                            9],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2007, 7, 5, 13, 16, 39),
                            new DateTime(2013, 7, 4, 2, 32, 51)),
                        default,
                        "PostalCode = 'M5V 1J9'"),
                    [default]);
        await featureLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await featureLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "vitae",
                    "quo nam vero explicabo eveniet",
                    4,
                    true,
                    true,
                    new { Value = "ut" },
                FieldValueType.PercentageOrRatio,
),
            new Field(default,
                    "id",
                    "illum",
                    "aut animi fugit ipsum blanditiis",
                    2,
                    true,
                    true,
                    new { Value = "aut" },
                FieldValueType.PercentageOrRatio,
),
            new Field(default,
                    "category",
                    "et",
                    "sint dolores nihil unde dolore libero ut",
                    7,
                    true,
                    true,
                    new { Value = "accusantium" },
                FieldValueType.None,
),
            new Field(default,
                    "title",
                    "quia",
                    "et non et maiores",
                    4,
                    true,
                    true,
                    new { Value = "consequatur" },
                FieldValueType.OrderedOrRanked,
)];
        await featureLayer.SetFields(testFields);
        var fields = await featureLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        LayerFloorInfo testFloorInfo = new LayerFloorInfo("quibusdam");
        await featureLayer.SetFloorInfo(testFloorInfo);
        var floorInfo = await featureLayer.GetFloorInfo();
        Assert.AreEqual(testFloorInfo, floorInfo);
        FormTemplate testFormTemplate = new FormTemplate("aut fuga sit",
                    "quo ut et vitae ut qui eligendi",
                    true,
                [,
],
                [new ExpressionInfo("return Date();",
                        "id",
                        "doloremque recusandae consequatur",
                        default),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "updatedAt",
                        "esse minima soluta",
                        default),
                new ExpressionInfo("return $feature.Name;",
                        "title",
                        "eveniet praesentium aut",
                        default),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "title",
                        "corrupti incidunt voluptas",
                        default)]);
        await featureLayer.SetFormTemplate(testFormTemplate);
        var formTemplate = await featureLayer.GetFormTemplate();
        Assert.AreEqual(testFormTemplate, formTemplate);
        Extent testFullExtent = new Extent(-167.2078,
                    -96.8990,
                    12.1652,
                    66.0955,
                    441.8621,
                    125.2087,
                    686.6823,
                    80.3935,
                new SpatialReference(8,
                        "odio",
                        "placeat",
                        "quis"),
                    true,
                    true);
        await featureLayer.SetFullExtent(testFullExtent);
        var fullExtent = await featureLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveRight,
                    "ab",
                    default,
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    36238014.9714,
                    12359.0520,
                    true,
                    default,
,
                    true,
                    "Phone = '555-555-5555'"),
            new Label(LabelPlacement.BelowRight,
                    "omnis",
                    default,
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    31331099.7771,
                    30415.1841,
                    true,
                    default,
,
                    true,
                    "Province = 'Ontario'"),
            new Label(LabelPlacement.AboveCenter,
                    "voluptates",
                    default,
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    42357017.8202,
                    16968.9217,
                    true,
                    default,
,
                    true,
                    "1 = 1")];
        await featureLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await featureLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("dolorum",
                SortOrder.Descending,
                    "voluptatibus")];
        await featureLayer.SetOrderBy(testOrderBy);
        var orderBy = await featureLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "aut",
                    "et",
                    "dignissimos");
        await featureLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("eos harum et nemo et aut",
                DrawingTool.None,
                    "password",
                new Graphic(new Point(148.0686,
                            -57.8094,
                            8.9629,
                            -24.7398,
                            949.3233,
                        new SpatialReference(6,
                                "nemo",
                                "nihil",
                                "unde"),
                            true,
                            true,
                            772.0809),
,
                    new PopupTemplate("dolor qui ea",
                            "voluptatem",
                            ["accusamus",
                                "quis",
                                "quisquam",
                                "sunt"],
                        [new FieldInfo("token",
                                "eos",
                                "omnis",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortDateLeLongTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("email",
                                "et",
                                "quis",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("createdAt",
                                "laborum",
                                "qui",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("category",
                                "non",
                                "culpa",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Max)],
                        [,
,
],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "createdAt",
                                "voluptas possimus non",
                                default),
                        new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "id",
                                "molestias dolor provident",
                                default),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "avatar",
                                "labore velit et",
                                default)],
                            true,
                            true,
                        [,
]),
                        default,
                        true,
                        "debitis",
                        "accusantium",
                        default),
                    default),
            new FeatureTemplate("fugiat explicabo dolorum temporibus doloremque repellat",
                DrawingTool.Point,
                    "email",
                new Graphic(new Point(31.6623,
                            -32.5786,
                            -81.0136,
                            50.5993,
                            504.9696,
                        new SpatialReference(3,
                                "molestiae",
                                "animi",
                                "hic"),
                            true,
                            true,
                            618.4760),
,
                    new PopupTemplate("provident exercitationem suscipit",
                            "quas",
                            ["quis",
                                "placeat"],
                        [new FieldInfo("email",
                                "rerum",
                                "quaerat",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Count)],
                        [],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "title",
                                "occaecati cum distinctio",
                                default),
                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "createdAt",
                                "reiciendis et laudantium",
                                default)],
                            true,
                            true,
                        [,
,
]),
                        default,
                        true,
                        "ullam",
                        "enim",
                        default),
                    default)];
        await featureLayer.SetTemplates(testTemplates);
        var templates = await featureLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2000, 7, 18, 9, 10, 40),
                    new DateTime(2003, 6, 10, 11, 15, 51));
        await featureLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await featureLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("commodi",
                    "at",
                new TimeExtent(new DateTime(2022, 5, 8, 10, 57, 18),
                        new DateTime(2001, 7, 7, 22, 50, 4)),
                new TimeInterval(TemporalTime.Years,
                        576.3378),
                    [new DateTime(2014, 9, 8, 6, 15, 41),
                        new DateTime(2023, 4, 2, 8, 3, 14),
                        new DateTime(2010, 6, 25, 12, 43, 51)],
                    "Asia/Dhaka",
                    "nam");
        await featureLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await featureLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    243.1452);
        await featureLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await featureLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        IReadOnlyList<FeatureType> testTypes = [new FeatureType("ea240f38-5526-a76e-5d0e-ce6d0fc9e98d",
                    "token",
                [new FeatureTemplate("quia dolorem perspiciatis reprehenderit",
                    DrawingTool.Arrow,
                        "name",
                    new Graphic(new Point(9.7909,
                                -3.7180,
                                177.6506,
                                -0.6588,
                                54.5596,
                            new SpatialReference(2,
                                    "voluptas",
                                    "est",
                                    "qui"),
                                true,
                                true,
                                282.9210),
,
                        new PopupTemplate("qui dolorum eveniet",
                                "magni",
                                ["velit",
                                    "nihil",
                                    "tempore",
                                    "vero"],
                            [new FieldInfo("name",
                                    "qui",
                                    "laudantium",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("password",
                                    "illo",
                                    "ipsum",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Max)],
                            [],
                            [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "avatar",
                                    "id labore ut",
                                    default),
                            new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "category",
                                    "sit voluptatem voluptas",
                                    default),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "name",
                                    "sapiente eos provident",
                                    default),
                            new ExpressionInfo("return Date();",
                                    "comment",
                                    "repellendus omnis sit",
                                    default)],
                                true,
                                true,
                            [,
,
]),
                            default,
                            true,
                            "ut",
                            "quis",
                            default),
                        default),
                new FeatureTemplate("aperiam veritatis occaecati est",
                    DrawingTool.DownArrow,
                        "category",
                    new Graphic(new Extent(-171.4798,
                                -51.7493,
                                47.5327,
                                -8.1084,
                                303.4358,
                                915.3907,
                                701.7789,
                                854.1936,
                            new SpatialReference(2,
                                    "ea",
                                    "consequatur",
                                    "placeat"),
                                true,
                                true),
,
                        new PopupTemplate("eum quam reiciendis",
                                "voluptatem",
                                ["aut",
                                    "et",
                                    "repellat",
                                    "ea"],
                            [new FieldInfo("comment",
                                    "sit",
                                    "et",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("name",
                                    "dolorum",
                                    "quisquam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Var)],
                            [],
                            [new ExpressionInfo("return $feature.Name;",
                                    "comment",
                                    "corrupti optio incidunt",
                                    default)],
                                true,
                                true,
                            [,
]),
                            default,
                            true,
                            "molestiae",
                            "ipsum",
                            default),
                        default)],
                new Dictionary<string, Domain>() {{ "doloribus",  },
                { "quisquam",  }
                },
                    "error"),
            new FeatureType("8abbb59d-2b59-d914-dea0-9a92abb72ba3",
                    "group",
                [new FeatureTemplate("rerum corrupti voluptas necessitatibus voluptas blanditiis",
                    DrawingTool.DownArrow,
                        "updatedAt",
                    new Graphic(new Point(27.1015,
                                11.9773,
                                -29.0292,
                                -89.8426,
                                961.9811,
                            new SpatialReference(9,
                                    "vitae",
                                    "est",
                                    "officia"),
                                true,
                                true,
                                752.2873),
,
                        new PopupTemplate("qui et eius",
                                "earum",
                                ["sequi",
                                    "omnis",
                                    "sint",
                                    "labore"],
                            [new FieldInfo("phone",
                                    "ut",
                                    "facere",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("id",
                                    "maiores",
                                    "animi",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Sum)],
                            [,
,
,
],
                            [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "token",
                                    "sit vero sed",
                                    default),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "title",
                                    "qui optio totam",
                                    default),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "avatar",
                                    "a quam libero",
                                    default),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "avatar",
                                    "libero aliquid eos",
                                    default)],
                                true,
                                true,
                            [,
]),
                            default,
                            true,
                            "excepturi",
                            "tenetur",
                            default),
                        default),
                new FeatureTemplate("iure consectetur minus nisi iusto asperiores",
                    DrawingTool.Circle,
                        "title",
                    new Graphic(new Point(-130.6162,
                                39.9987,
                                15.5963,
                                40.0565,
                                757.0240,
                            new SpatialReference(7,
                                    "ipsam",
                                    "earum",
                                    "porro"),
                                true,
                                true,
                                673.4749),
,
                        new PopupTemplate("odit est mollitia",
                                "in",
                                ["ad",
                                    "soluta",
                                    "quo",
                                    "quia"],
                            [new FieldInfo("phone",
                                    "totam",
                                    "voluptates",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Count)],
                            [,
],
                            [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "avatar",
                                    "consequatur consequatur fuga",
                                    default),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "avatar",
                                    "ducimus est illum",
                                    default)],
                                true,
                                true,
                            [,
,
,
]),
                            default,
                            true,
                            "sint",
                            "sed",
                            default),
                        default),
                new FeatureTemplate("laboriosam pariatur sit laboriosam et quae aliquid",
                    DrawingTool.Polygon,
                        "category",
                    new Graphic(new Point(171.1709,
                                17.6217,
                                128.4711,
                                -34.4067,
                                785.3276,
                            new SpatialReference(4,
                                    "architecto",
                                    "voluptas",
                                    "ex"),
                                true,
                                true,
                                166.5837),
,
                        new PopupTemplate("vero quasi cupiditate",
                                "nulla",
                                ["nemo",
                                    "quia",
                                    "possimus",
                                    "vero"],
                            [new FieldInfo("createdAt",
                                    "ut",
                                    "ipsam",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("category",
                                    "qui",
                                    "quidem",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongDate),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("phone",
                                    "accusamus",
                                    "similique",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Stddev)],
                            [,
,
],
                            [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "title",
                                    "aperiam est nisi",
                                    default),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "id",
                                    "consequatur sequi incidunt",
                                    default),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "title",
                                    "nam qui rerum",
                                    default)],
                                true,
                                true,
                            [,
,
,
]),
                            default,
                            true,
                            "error",
                            "earum",
                            default),
                        default)],
                new Dictionary<string, Domain>() {{ "nam",  },
                { "veritatis",  }
                },
                    "est")];
        await featureLayer.SetTypes(testTypes);
        var types = await featureLayer.GetTypes();
        Assert.AreEqual(testTypes, types);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 4, 22, 22, 35, 19),
                    new DateTime(2012, 5, 15, 22, 7, 11));
        await featureLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await featureLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
