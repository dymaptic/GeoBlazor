@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureLayer(Action renderHandler)
    {
        FeatureLayer? featureLayer = null;

        FeatureLayerEditsEvent? editsResult = null;
        void OnEdits(FeatureLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <FeatureLayer 
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")"
                        OutFields="@(["hic"])"
                        DefinitionExpression="@("dolor")"
                        MinScale="@(15477.1211)"
                        MaxScale="@(417831.2805)"
                        ObjectIdField="@("ex")"
                        GeometryType="@(FeatureGeometryType.Multipoint)"
                        Title="@("at mollitia qui")"
                        Opacity="@(0.1461)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        ApiKey="@("eos")"
                        BlendMode="@(BlendMode.Exclusion)"
                        Charts="@(["vero",
                            "ullam"])"
                        Copyright="@("temporibus")"
                        DateFieldsTimeZone="@("veniam")"
                        DisplayField="@("sint")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("aut",
                            28038398.2449))"
                        GdbVersion="@("2.3.5.1")"
                        HasM="@(true)"
                        HasZ="@(true)"
                        HistoricMoment="@(new DateTime(2019, 9, 2, 3, 17, 13))"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(294.2593)"
                        ReturnM="@(true)"
                        ReturnZ="@(true)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        TypeIdField="@("doloremque")"
                        Types="@([new FeatureType("2e5a64f5-0c74-fa05-0fe2-1c7a9c0d2703",
                                "id",
                            [new FeatureTemplate("enim consequatur maiores",
                                DrawingTool.Line,
                                    "token",
                                new Graphic(new Point(175.2906,
                                            36.5836,
                                            140.5166,
                                            9.3971,
                                            479.1722,
                                        new SpatialReference(6,
                                                "quae",
                                                "maxime",
                                                "ut"),
                                            true,
                                            true,
                                            746.9781),
                                    new TextSymbol("repellendus laborum est",
                                        new MapColor(202, 50, 128),
                                        new MapColor(153, 5, 152),
                                            new Dimension(107.3334),
                                        new MapFont(new Dimension(839.7279),
                                                "Helvetica",
                                            MapFontStyle.Italic,
                                            FontWeight.Bolder,
                                            TextDecoration.Underline),
                                            261.3901,
                                        new MapColor(230, 92, 41),
                                        new MapColor(140, 30, 128),
                                            238.2873,
                                        HorizontalAlignment.Right,
                                            true,
                                            955.2009,
                                            new Dimension(224.2753),
                                            true),
                                    new PopupTemplate("voluptatem alias et",
                                            "eum",
                                            ["eligendi"],
                                        [new FieldInfo("email",
                                                "neque",
                                                "quisquam",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(8,
                                                    true,
                                                DateFormat.ShortDateLe),
                                                true,
                                                true,
                                            StatisticType.Max),
                                        new FieldInfo("updatedAt",
                                                "ullam",
                                                "voluptatem",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(6,
                                                    true,
                                                DateFormat.ShortDate),
                                                true,
                                                true,
                                            StatisticType.Min)],
                                        [new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                    "cumque",
                                                    "libero qui impedit"))],
                                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                "id",
                                                "vel vel similique",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("at omnis et",
                                                "https://picsum.photos/640/480/?image=983",
                                                "794decf8-efa5-e06c-9cb5-4899c8edb7f5",
                                                () => { Console.WriteLine("soluta"); return Task.CompletedTask; },
                                                "avatar",
                                                true,
                                                true,
                                                true,
                                                "non"),
                                                new ActionButton("et explicabo et",
                                                    "https://picsum.photos/640/480/?image=739",
                                                    "f9dee513-6e5d-b7a9-8af6-b2b564173f2e",
                                                    () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                                                    "password",
                                                    true,
                                                    true,
                                                    true,
                                                    "atque")]),
                                        new AttributesDictionary(),
                                        true,
                                        "necessitatibus",
                                        "ab",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "enim",
                                            1)),
                                    new Thumbnail("et",
                                        "et",
                                        201.0969,
                                        86.5073))],
                                new CodedValueDomain<string>(),
                                "amet")])"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(128.2609)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("cumque")"
                            EndField="@("debitis")"
                            Stops="@([new DateTime(2018, 10, 9, 5, 22, 12),
                                new DateTime(2015, 10, 25, 16, 11, 17)])"
                            TimeZone="@("Pacific/Fakaofo")"
                            TrackIdField="@("enim")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(85.3861)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2014, 3, 4, 0, 14, 42))"
                                End="@(new DateTime(2011, 1, 24, 3, 38, 39))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2005, 6, 26, 22, 26, 29))"
                            End="@(new DateTime(2020, 8, 23, 21, 5, 23))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("odio neque")"
                            DrawingTool="@(DrawingTool.Rectangle)"
                            Name="@("category")"
                            Thumbnail="@(new Thumbnail("nemo",
                                "et",
                                71.2227,
                                138.6080))">
                            <Graphic 
                                Geometry="@(new Polygon([new MapPath([new MapPoint([275.6058]),
                                        new MapPoint([639.2548])]),
                                        new MapPath([new MapPoint([167.3510,
                                                406.3603])])],
                                    new SpatialReference(3,
                                            "nesciunt",
                                            "voluptatum",
                                            "praesentium"),
                                    new Point(167.2110,
                                            -51.4643,
                                            16.0288,
                                            2.3911,
                                            682.8037,
                                        new SpatialReference(9,
                                                "autem",
                                                "quia",
                                                "vitae"),
                                            true,
                                            true,
                                            442.3271),
                                        true,
                                        true,
                                        true))"
                                Symbol="@(new TextSymbol("qui aperiam magni",
                                    new MapColor(153, 190, 153),
                                    new MapColor(145, 151, 175),
                                        new Dimension(406.0597),
                                    new MapFont(new Dimension(633.6345),
                                            "Arial",
                                        MapFontStyle.Normal,
                                        FontWeight.Lighter,
                                        TextDecoration.None),
                                        517.8760,
                                    new MapColor(180, 159, 235),
                                    new MapColor(215, 159, 21),
                                        798.7484,
                                    HorizontalAlignment.Left,
                                        true,
                                        871.8313,
                                        new Dimension(923.6403),
                                        true))"
                                PopupTemplate="@(new PopupTemplate("culpa voluptatum non",
                                        "repudiandae",
                                        ["qui",
                                            "eius"],
                                    [new FieldInfo("token",
                                            "nam",
                                            "adipisci",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(3,
                                                true,
                                            DateFormat.LongMonthDayYear),
                                            true,
                                            true,
                                        StatisticType.Min),
                                    new FieldInfo("createdAt",
                                            "est",
                                            "ab",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(1,
                                                true,
                                            DateFormat.DayShortMonthYearLongTime24),
                                            true,
                                            true,
                                        StatisticType.Min)],
                                    [new AttachmentsPopupContent("inventore quia dolores",
                                            "quos nihil",
                                            AttachmentsPopupContentDisplayType.Auto),
                                    new MediaPopupContent("harum accusantium numquam",
                                            "qui saepe",
                                        [new ColumnChartMediaInfo("delectus ut rerum",
                                                "sit",
                                                "sunt beatae ut",
                                            new ChartMediaInfoValue(["aut"],
                                                    "illo",
                                                    "quibusdam",
                                                [new ChartMediaInfoValueSeries("token",
                                                        "reprehenderit",
                                                        9.4044),
                                                new ChartMediaInfoValueSeries("email",
                                                        "velit",
                                                        448.3610)],
                                                [new MapColor(165, 245, 238),
                                                new MapColor(219, 212, 151)]))],
                                            4)],
                                    [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                            "comment",
                                            "aut eos quod",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                            "group",
                                            "sit illo dolor",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("id in beatae",
                                            "https://picsum.photos/640/480/?image=600",
                                            "1b9e2f19-d2e9-04bb-51b8-d56ff4a73d6c",
                                            () => { Console.WriteLine("autem"); return Task.CompletedTask; },
                                            "comment",
                                            true,
                                            true,
                                            true,
                                            "recusandae"),
                                            new ActionButton("maiores qui et",
                                                "https://picsum.photos/640/480/?image=290",
                                                "3ac3cadb-53a1-0eec-98a9-0d3feaa36c67",
                                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                                "token",
                                                true,
                                                true,
                                                true,
                                                "neque")]))"
                                Attributes="@(new AttributesDictionary())"
                                Visible="@(true)"
                                LegendLabel="@("fugit")"
                                AggregateGeometries="@("deleniti")"
                                Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                    "nam",
                                    5))">
                            </Graphic>
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(9)"
                            ImageCoordinateSystem="@("omnis")"
                            Wkt="@("dicta")"
                            Wkt2="@("non")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Extent(-115.5925,
                                    163.1587,
                                    -14.8866,
                                    -47.1867,
                                    181.9131,
                                    550.3922,
                                    501.4099,
                                    820.3311,
                                new SpatialReference(4,
                                        "quis",
                                        "fugit",
                                        "aliquam"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("deleniti ut sunt",
                                new MapColor(126, 225, 108),
                                new MapColor(15, 246, 100),
                                    new Dimension(259.1660),
                                new MapFont(new Dimension(2.0056),
                                        "Arial",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.None),
                                    665.3048,
                                new MapColor(83, 24, 18),
                                new MapColor(3, 215, 118),
                                    450.8026,
                                HorizontalAlignment.Center,
                                    true,
                                    629.6009,
                                    new Dimension(939.2845),
                                    true))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("voluptatum")"
                            AggregateGeometries="@("nihil")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "quod",
                                6))">
                            <PopupTemplate 
                                Title="@("quia enim aut")"
                                StringContent="@("ut")"
                                OutFields="@(["cupiditate",
                                    "aliquid"])"
                                FieldInfos="@([new FieldInfo("group",
                                        "qui",
                                        "similique",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.ShortDateLeShortTime24),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("avatar",
                                        "sit",
                                        "qui",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongDateLongTime),
                                        true,
                                        true,
                                    StatisticType.Avg)])"
                                Content="@([new TextPopupContent("aut in sed"),
                                new FieldsPopupContent([new FieldInfo("category",
                                            "asperiores",
                                            "eligendi",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(7,
                                                true,
                                            DateFormat.DayShortMonthYearLongTime),
                                            true,
                                            true,
                                        StatisticType.Avg)],
                                        "ut minima repellendus voluptates",
                                        "est modi aspernatur")])"
                                ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "email",
                                        "sunt quos doloribus",
                                        ExpressionInfoReturnType.String)])"
                                OverwriteActions="@(true)"
                                ReturnGeometry="@(true)"
                                Actions="@([new ActionButton("ut aspernatur vel",
                                    "https://picsum.photos/640/480/?image=195",
                                    "b3b5f174-6ca6-d98b-4c7b-c6a22b016b0d",
                                    () => { Console.WriteLine("nisi"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "et"),
                                    new ActionButton("rerum fugit quibusdam",
                                        "https://picsum.photos/640/480/?image=714",
                                        "b89b643f-b826-7f45-b98c-3ed5f1c4f6fa",
                                        () => { Console.WriteLine("ea"); return Task.CompletedTask; },
                                        "comment",
                                        true,
                                        true,
                                        true,
                                        "ea")])">
                            </PopupTemplate>
                        </Graphic>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(152, 183, 70),
                                        new MapColor(252, 48, 172)),
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(54, 167, 11),
                                        new MapColor(117, 157, 207))]),
                                    688.1281,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(111.2370,
                                            774.3257),
                                    new AuthoringInfoField1ClassBreakInfos(545.3205,
                                            24.8525)],
                                        "laboriosam",
                                        "quibusdam",
                                        "rerum"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(168.6217,
                                            92.0654)],
                                        "quasi",
                                        "consequatur",
                                        "suscipit"),
                                    ["quae"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "aut",
                                    true,
                                LengthUnit.Meters,
                                    782.3309,
                                    178.3165,
                                    601.4519,
                                    306.1960))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("eum dolorum reprehenderit")"
                            StringContent="@("illo")"
                            OutFields="@(["quia",
                                "magnam"])"
                            FieldInfos="@([new FieldInfo("updatedAt",
                                    "et",
                                    "neque",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new MediaPopupContent("sint cumque minima",
                                    "qui repudiandae officiis",
                                [new ImageMediaInfo("in nemo temporibus",
                                        "impedit",
                                        "et quos dignissimos",
                                    new ImageMediaInfoValue("http://lonnie.name",
                                            "http://kimberly.org"),
                                        453.6128)],
                                    2)])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "name",
                                    "provident pariatur sit",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("aut et enim",
                                "https://picsum.photos/640/480/?image=195",
                                "8625c36f-50a5-7493-eb30-77af9e10b544",
                                () => { Console.WriteLine("libero"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "numquam"),
                                new ActionButton("fugiat ut ex",
                                    "https://picsum.photos/640/480/?image=408",
                                    "61d3a139-35bc-f26a-b775-9e37c0c24ff6",
                                    () => { Console.WriteLine("quis"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "amet")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("est")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("atque")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterEnd)"
                            LabelExpression="@("est")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(37679070.0596)"
                            MinScale="@(1494.9228)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(441.8379))"
                            Symbol="@(new TextSymbol("consectetur fugiat eaque",
                                new MapColor(135, 102, 74),
                                new MapColor(248, 75, 210),
                                    new Dimension(676.5984),
                                new MapFont(new Dimension(484.4982),
                                        "Helvetica",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.LineThrough),
                                    892.6130,
                                new MapColor(172, 164, 240),
                                new MapColor(247, 196, 93),
                                    583.2921,
                                HorizontalAlignment.Right,
                                    true,
                                    37.0914,
                                    new Dimension(71.7153),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Province = 'Ontario'")">
                        </Label>
                        <Extent 
                            Xmax="@(-132.2997)"
                            Xmin="@(144.7666)"
                            Ymax="@(-69.0135)"
                            Ymin="@(83.1304)"
                            Zmax="@(181.1942)"
                            Zmin="@(473.1447)"
                            Mmax="@(304.1970)"
                            Mmin="@(890.6889)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("ut")"
                                Wkt="@("omnis")"
                                Wkt2="@("sit")">
                            </SpatialReference>
                        </Extent>
                        <FormTemplate 
                            Title="@("sapiente accusantium nemo")"
                            Description="@("expedita maxime consectetur")"
                            PreserveFieldValuesWhenHidden="@(true)"
                            Elements="@([new FieldElement("comment",
                                    "aut",
                                    "et fugiat voluptas",
                                    "illo",
                                    "sunt",
                                    "cupiditate",
                                    "vero",
                                    new CodedValueDomain<string>(),
                                    default,
                                    "odio"),
                            new GroupElement("odio blanditiis",
                                [new FieldElement("password",
                                        "nulla",
                                        "accusamus omnis dignissimos",
                                        "eos",
                                        "quae",
                                        "nobis",
                                        "officia",
                                        new CodedValueDomain<string>(),
                                        default,
                                        "fugit"),
                                new FieldElement("avatar",
                                        "voluptatibus",
                                        "beatae quas",
                                        "aut",
                                        "incidunt",
                                        "aliquid",
                                        "illum",
                                        new CodedValueDomain<string>(),
                                        default,
                                        "at")],
                                InitialState.Expanded,
                                    "repellendus",
                                    "culpa")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "updatedAt",
                                    "dolorum alias rem",
                                    ExpressionInfoReturnType.String)])">
                        </FormTemplate>
                        <LayerFloorInfo 
                            FloorField="@("enim")">
                        </LayerFloorInfo>
                        <Field 
                            Name="@("category")"
                            Alias="@("vel")"
                            Description="@("ut laudantium")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "deserunt" })"
                            ValueType="@(FieldValueType.CountOrAmount)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("perspiciatis",
                                27475009.1032)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(835.3836,
                                new Polygon([new MapPath([new MapPoint([256.1856,
                                            325.5872]),
                                        new MapPoint([707.9105])]),
                                        new MapPath([new MapPoint([929.9979,
                                                348.4837])])],
                                    new SpatialReference(7,
                                            "explicabo",
                                            "quia",
                                            "deserunt"),
                                    new Point(56.5279,
                                            24.2507,
                                            8.8169,
                                            -56.9514,
                                            359.9123,
                                        new SpatialReference(6,
                                                "inventore",
                                                "perspiciatis",
                                                "repellat"),
                                            true,
                                            true,
                                            78.4042),
                                        true,
                                        true,
                                        true),
                                    [9,
                                        5],
                                SpatialRelationship.Touches,
                                new TimeExtent(new DateTime(2020, 10, 17, 4, 24, 2),
                                        new DateTime(2005, 3, 18, 4, 17, 14)),
                                    QueryUnits.UsNauticalMiles,
                                    "ObjectID = 1"))"
                            IncludedEffect="@([new Effect("ut",
                                26724943.8475),
                                new Effect("eligendi",
                                    36190831.5621)])">
                        </FeatureEffect>
                        <FeatureLayerBaseElevationInfo 
                            FeatureExpressionInfo="@(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return Date();",
                                    "natus quaerat accusamus"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(65.3225)"
                            Unit="@(ElevationUnit.Centimeters)">
                        </FeatureLayerBaseElevationInfo>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureLayer!);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<FeatureLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "feature");
        var queryAttachmentsMethodResult = await featureLayer.QueryAttachments(new AttachmentQuery("ut",
                    ["repellendus",
                        "laboriosam"],
                    true,
                    [1,
                        2],
                    ["repellat"],
                    "name",
                    883.0629,
                    [3,
                        7],
                    true,
                    [9],
                    887.6232,
                    "City = 'Toronto'"),
                default);
        Assert.IsNotNull(queryAttachmentsMethodResult);
        var saveMethodResult = await featureLayer.Save(new FeatureLayerBaseSaveOptions(new FeatureLayerBaseSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await featureLayer.SaveAs(new PortalItem(),
            new FeatureLayerBaseSaveAsOptions(new PortalFolder(new DateTime(2023, 4, 13, 17, 14, 18),
                        "molestias",
                        "et aliquam ad"),
                new FeatureLayerBaseSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        var updateAttachmentMethodResult = await featureLayer.UpdateAttachment(new Graphic(new Polygon([new MapPath([new MapPoint([664.9554,
                            8.7678])]),
                        new MapPath([new MapPoint([4.7141])])],
                    new SpatialReference(7,
                            "autem",
                            "quis",
                            "facilis"),
                    new Point(4.8928,
                            70.1648,
                            160.0863,
                            68.4744,
                            338.4448,
                        new SpatialReference(5,
                                "ipsa",
                                "odio",
                                "et"),
                            true,
                            true,
                            423.2371),
                        true,
                        true,
                        true),
                new TextSymbol("praesentium blanditiis aut",
                    new MapColor(244, 254, 63),
                    new MapColor(124, 211, 94),
                        new Dimension(227.0077),
                    new MapFont(new Dimension(278.3363),
                            "Georgia",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        991.7753,
                    new MapColor(197, 224, 58),
                    new MapColor(15, 12, 38),
                        512.5612,
                    HorizontalAlignment.Center,
                        true,
                        640.9606,
                        new Dimension(827.0226),
                        true),
                new PopupTemplate("sint quasi a",
                        "cumque",
                        ["quos"],
                    [new FieldInfo("comment",
                            "soluta",
                            "deleniti",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.DayShortMonthYear),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("comment",
                            "non",
                            "aliquid",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.LongMonthDayYear),
                            true,
                            true,
                        StatisticType.Avg)],
                    [new MediaPopupContent("molestiae rerum aliquid",
                            "soluta et minus soluta",
                        [new PieChartMediaInfo("animi non placeat",
                                "beatae",
                                "iusto ab voluptates",
                            new ChartMediaInfoValue(["eius",
                                    "et"],
                                    "sint",
                                    "enim",
                                [new ChartMediaInfoValueSeries("id",
                                        "autem",
                                        953.8850)],
                                [new MapColor(82, 145, 2)]))],
                            7),
                    new FieldsPopupContent([new FieldInfo("category",
                                "aut",
                                "quia",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Max)],
                            "possimus dignissimos",
                            "accusantium fuga doloribus")],
                    [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "token",
                            "deleniti quaerat eaque",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("ratione praesentium natus",
                            "https://picsum.photos/640/480/?image=273",
                            "04acfb53-404d-631b-a3c8-14a59899f9cc",
                            () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                            "phone",
                            true,
                            true,
                            true,
                            "doloribus")]),
                    new AttributesDictionary(),
                    true,
                    "voluptas",
                    "nostrum",
                    new GraphicOrigin(Guid.NewGuid(),
                        "voluptates",
                        1)),
                1,
            default);
        Assert.IsNotNull(updateAttachmentMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await featureLayer.SetPortalItem(testPortalItem);
        var portalItem = await featureLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        ListMode testListMode = ListMode.Show;
        await featureLayer.SetListMode(testListMode);
        var listMode = await featureLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("ipsum qui aliquam",
                    "et",
                    ["eligendi",
                        "voluptate"],
                [new FieldInfo("id",
                        "praesentium",
                        "neque",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.DayShortMonthYearLongTime),
                        true,
                        true,
                    StatisticType.Sum)],
                [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                            "consequuntur",
                            "amet unde et")),
                new RelationshipPopupContent("voluptas voluptate necessitatibus",
                        "sunt quo",
                        9,
                        "consequatur",
                    [new RelatedRecordsInfoFieldOrder("ullam",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("maiores",
                        OrderBy.Asc)],
                        5)],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "avatar",
                        "asperiores corporis consequatur",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("eveniet vel ut",
                        "https://picsum.photos/640/480/?image=553",
                        "3cd62479-0e44-10b2-1f45-7ec77bca5bc3",
                        () => { Console.WriteLine("vero"); return Task.CompletedTask; },
                        "name",
                        true,
                        true,
                        true,
                        "nostrum"),
                        new ActionButton("ratione voluptatem aliquid",
                            "https://picsum.photos/640/480/?image=111",
                            "8c260552-750e-f6b1-ef9a-d4b3fc9d928d",
                            () => { Console.WriteLine("dolores"); return Task.CompletedTask; },
                            "group",
                            true,
                            true,
                            true,
                            "enim")]);
        await featureLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await featureLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        BlendMode testBlendMode = BlendMode.Darken;
        await featureLayer.SetBlendMode(testBlendMode);
        var blendMode = await featureLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FeatureLayerBaseElevationInfo testElevationInfo = new FeatureLayerBaseElevationInfo(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Population / $feature.Area;",
                        "asperiores amet fugit"),
                ElevationInfoMode.AbsoluteHeight,
                    819.2149,
                ElevationUnit.Centimeters);
        await featureLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await featureLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("commodi",
                    9354427.4901)],
                    true,
                new FeatureFilter(221.0835,
                    new Extent(142.8878,
                            -167.3988,
                            51.3685,
                            -66.1563,
                            701.5929,
                            542.6962,
                            668.9583,
                            693.1308,
                        new SpatialReference(7,
                                "porro",
                                "blanditiis",
                                "quam"),
                            true,
                            true),
                        [6,
                            1],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2000, 1, 13, 18, 33, 3),
                            new DateTime(2001, 10, 16, 12, 11, 47)),
                        QueryUnits.Feet,
                        "Street = '123 Main St.'"),
                    [new Effect("architecto",
                        15306216.3062)]);
        await featureLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await featureLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "avatar",
                    "dolorem",
                    "deserunt magni",
                    4,
                    true,
                    true,
                    new { Value = "nam" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "status",
                    "quam",
                    "illum occaecati quidem",
                    2,
                    true,
                    true,
                    new { Value = "et" },
                FieldValueType.TypeOrCategory,
                    new CodedValueDomain<string>())];
        await featureLayer.SetFields(testFields);
        var fields = await featureLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        LayerFloorInfo testFloorInfo = new LayerFloorInfo("in");
        await featureLayer.SetFloorInfo(testFloorInfo);
        var floorInfo = await featureLayer.GetFloorInfo();
        Assert.AreEqual(testFloorInfo, floorInfo);
        FormTemplate testFormTemplate = new FormTemplate("voluptatem sit sed",
                    "incidunt et aut",
                    true,
                [new GroupElement("consectetur dolorem voluptates est",
                    [new GroupElement("provident aperiam facere officiis",
                        [new GroupElement("fugit ut ex harum",
                            [new GroupElement("eaque quo",
                                [new GroupElement("nisi ullam asperiores aperiam",
                                    [new GroupElement("sed natus",
                                        [new GroupElement("repellendus laborum optio",
                                            [new GroupElement("porro maxime omnis",
                                                [new FieldElement("token",
                                                        "distinctio",
                                                        "quibusdam aut",
                                                        "soluta",
                                                        "aliquid",
                                                        "dolorem",
                                                        "quas",
                                                        null,
                                                        null,
                                                        "et"),
                                                new FieldElement("category",
                                                        "nihil",
                                                        "deserunt eaque",
                                                        "eum",
                                                        "et",
                                                        "et",
                                                        "voluptates",
                                                        null,
                                                        null,
                                                        "aliquam")],
                                                InitialState.Collapsed,
                                                    "eum",
                                                    "et")],
                                            InitialState.Expanded,
                                                "consequatur",
                                                "sunt")],
                                        InitialState.Expanded,
                                            "similique",
                                            "et"),
                                    new FieldElement("comment",
                                            "nesciunt",
                                            "perspiciatis libero",
                                            "perspiciatis",
                                            "est",
                                            "facilis",
                                            "vitae",
                                            new CodedValueDomain<string>(),
                                            default,
                                            "at")],
                                    InitialState.Expanded,
                                        "deleniti",
                                        "animi"),
                                new GroupElement("ea eum",
                                    [new FieldElement("phone",
                                            "inventore",
                                            "molestias sunt autem",
                                            "nam",
                                            "dicta",
                                            "hic",
                                            "molestiae",
                                            new CodedValueDomain<string>(),
                                            default,
                                            "et")],
                                    InitialState.Collapsed,
                                        "consequatur",
                                        "ducimus")],
                                InitialState.Collapsed,
                                    "inventore",
                                    "tempora")],
                            InitialState.Collapsed,
                                "modi",
                                "molestiae"),
                        new GroupElement("ut autem",
                            [new FieldElement("updatedAt",
                                    "veniam",
                                    "sequi qui",
                                    "eaque",
                                    "sunt",
                                    "similique",
                                    "rerum",
                                    new CodedValueDomain<string>(),
                                    default,
                                    "quidem"),
                            new GroupElement("qui labore ducimus quis",
                                [new GroupElement("debitis aut repellendus dolorem",
                                    [new GroupElement("quos quis rerum",
                                        [new FieldElement("group",
                                                "neque",
                                                "laborum dolore",
                                                "ut",
                                                "corporis",
                                                "atque",
                                                "et",
                                                new CodedValueDomain<string>(),
                                                default,
                                                "ullam"),
                                        new GroupElement("debitis ullam nam",
                                            [new GroupElement("tenetur nesciunt",
                                                [new FieldElement("updatedAt",
                                                        "nihil",
                                                        "suscipit non",
                                                        "veniam",
                                                        "consequatur",
                                                        "reprehenderit",
                                                        "eum",
                                                        null,
                                                        null,
                                                        "sed")],
                                                InitialState.Collapsed,
                                                    "praesentium",
                                                    "similique"),
                                            new GroupElement("qui repudiandae nulla ipsam",
                                                [new GroupElement("eum consequatur",
                                                    [new GroupElement(),
                                                    new FieldElement()],
                                                    InitialState.Collapsed,
                                                        "ut",
                                                        "quae"),
                                                new FieldElement("name",
                                                        "magnam",
                                                        "voluptas ipsam consectetur",
                                                        "hic",
                                                        "sunt",
                                                        "libero",
                                                        "dicta",
                                                        null,
                                                        null,
                                                        "sint")],
                                                InitialState.Collapsed,
                                                    "voluptates",
                                                    "est")],
                                            InitialState.Expanded,
                                                "illum",
                                                "saepe")],
                                        InitialState.Expanded,
                                            "vel",
                                            "consequatur"),
                                    new FieldElement("avatar",
                                            "nobis",
                                            "voluptas vel",
                                            "debitis",
                                            "rerum",
                                            "consequatur",
                                            "et",
                                            new CodedValueDomain<string>(),
                                            default,
                                            "sed")],
                                    InitialState.Expanded,
                                        "ex",
                                        "libero")],
                                InitialState.Expanded,
                                    "error",
                                    "veritatis")],
                            InitialState.Expanded,
                                "nihil",
                                "odio")],
                        InitialState.Collapsed,
                            "explicabo",
                            "quo"),
                    new FieldElement("name",
                            "nobis",
                            "minus est sit tenetur",
                            "fuga",
                            "et",
                            "quos",
                            "rerum",
                            new CodedValueDomain<string>(),
                            default,
                            "autem")],
                    InitialState.Expanded,
                        "magnam",
                        "consequuntur")],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "comment",
                        "illo nobis quibusdam",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "token",
                        "molestiae veritatis officia",
                        ExpressionInfoReturnType.String)]);
        await featureLayer.SetFormTemplate(testFormTemplate);
        var formTemplate = await featureLayer.GetFormTemplate();
        Assert.AreEqual(testFormTemplate, formTemplate);
        Extent testFullExtent = new Extent(-84.2178,
                    -130.4379,
                    10.9427,
                    -14.9273,
                    514.7980,
                    135.4096,
                    549.0026,
                    635.8691,
                new SpatialReference(6,
                        "et",
                        "veritatis",
                        "velit"),
                    true,
                    true);
        await featureLayer.SetFullExtent(testFullExtent);
        var fullExtent = await featureLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowAfter,
                    "asperiores",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    44345259.2235,
                    9681.9139,
                    true,
                    new Dimension(394.9394),
                new TextSymbol("voluptatem dolor ut",
                    new MapColor(114, 187, 112),
                    new MapColor(8, 233, 92),
                        new Dimension(339.8770),
                    new MapFont(new Dimension(401.5547),
                            "Arial",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        138.7069,
                    new MapColor(24, 184, 25),
                    new MapColor(183, 166, 127),
                        357.8441,
                    HorizontalAlignment.Left,
                        true,
                        744.1444,
                        new Dimension(972.0915),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'"),
            new Label(LabelPlacement.AlwaysHorizontal,
                    "est",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    34143469.4516,
                    15165.4501,
                    true,
                    new Dimension(837.8405),
                new TextSymbol("officiis voluptates esse",
                    new MapColor(234, 43, 1),
                    new MapColor(23, 132, 35),
                        new Dimension(900.5610),
                    new MapFont(new Dimension(283.6667),
                            "Bookman",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        130.9242,
                    new MapColor(67, 244, 99),
                    new MapColor(176, 196, 9),
                        261.6826,
                    HorizontalAlignment.Right,
                        true,
                        176.1571,
                        new Dimension(389.2260),
                        true),
                    true,
                    "Name = 'John Doe'")];
        await featureLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await featureLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("est",
                SortOrder.Descending,
                    "quidem"),
            new OrderedLayerOrderBy("dolores",
                SortOrder.Descending,
                    "iure")];
        await featureLayer.SetOrderBy(testOrderBy);
        var orderBy = await featureLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(94, 29, 59),
                            new MapColor(89, 120, 162))]),
                        940.2958,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(661.2344,
                                68.4422),
                        new AuthoringInfoField1ClassBreakInfos(983.1098,
                                756.3171)],
                            "et",
                            "iste",
                            "quo"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(628.3805,
                                314.0271),
                        new AuthoringInfoField1ClassBreakInfos(407.3738,
                                695.1662)],
                            "quos",
                            "qui",
                            "ut"),
                        ["accusamus",
                            "officiis"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "ut",
                        true,
                    LengthUnit.Meters,
                        982.1603,
                        965.6024,
                        916.9123,
                        103.8157),
                new PictureFillSymbol("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1",
                    new Dimension(769.3102),
                    new Dimension(882.7745),
                    new Dimension(866.0353),
                    new Dimension(851.5472),
                    107.0459,
                    -49.4709,
                    new Outline(new MapColor(158, 59, 39),
                        new Dimension(738.7519),
                        SimpleLineSymbolStyle.ShortDot,
                        Cap.Round,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(7, 105, 108),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Square),
                        676.7001),
                    new MapColor(193, 242, 29)),
                    "rerum",
                    new DefaultSymbol(),
                    "est",
                    "debitis",
                    "voluptas",
                    "autem",
                new UniqueValueRendererLegendOptions("fuga praesentium iusto"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("voluptatum",
                        new TextSymbol("consequatur reprehenderit molestias",
                            new MapColor(127, 82, 103),
                            new MapColor(163, 45, 220),
                                new Dimension(35.9282),
                            new MapFont(new Dimension(165.6196),
                                    "Times New Roman",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.None),
                                73.2997,
                            new MapColor(63, 198, 243),
                            new MapColor(215, 57, 155),
                                252.8340,
                            HorizontalAlignment.Left,
                                true,
                                646.9293,
                                new Dimension(550.8706),
                                true),
                        [new UniqueValue("laudantium",
                                "odio",
                                "voluptatibus")]),
                    new UniqueValueClass("suscipit",
                        new TextSymbol("at ex qui",
                            new MapColor(6, 161, 57),
                            new MapColor(42, 43, 80),
                                new Dimension(851.2695),
                            new MapFont(new Dimension(916.3966),
                                    "Verdana",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                299.3179,
                            new MapColor(138, 147, 250),
                            new MapColor(206, 51, 54),
                                648.5506,
                            HorizontalAlignment.Center,
                                true,
                                194.8158,
                                new Dimension(970.5538),
                                true),
                        [new UniqueValue("dicta",
                                "repellendus",
                                "quod")])],
                        "sequi")],
                [new UniqueValueInfo("quia",
                    new TextSymbol("modi consectetur dignissimos",
                        new MapColor(36, 120, 240),
                        new MapColor(54, 74, 2),
                            new Dimension(824.7341),
                        new MapFont(new Dimension(390.8983),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.None),
                            871.6664,
                        new MapColor(219, 202, 233),
                        new MapColor(62, 133, 71),
                            577.6941,
                        HorizontalAlignment.Left,
                            true,
                            427.4233,
                            new Dimension(217.5085),
                            true),
                        "assumenda")],
                    "veritatis",
                    "nobis odit corporis");
        await featureLayer.SetRenderer(testRenderer);
        var renderer = await featureLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "atque",
                    "placeat",
                    "eum");
        await featureLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("dolorum ut molestiae",
                DrawingTool.Polygon,
                    "category",
                new Graphic(new Point(-119.0054,
                            -48.9134,
                            -127.0277,
                            65.3719,
                            129.7848,
                        new SpatialReference(1,
                                "tempore",
                                "non",
                                "illo"),
                            true,
                            true,
                            584.9681),
                    new TextSymbol("dolorum quos quis",
                        new MapColor(19, 211, 167),
                        new MapColor(33, 97, 163),
                            new Dimension(435.8864),
                        new MapFont(new Dimension(755.1265),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            201.9870,
                        new MapColor(219, 247, 81),
                        new MapColor(40, 23, 6),
                            466.5566,
                        HorizontalAlignment.Left,
                            true,
                            204.1591,
                            new Dimension(946.3065),
                            true),
                    new PopupTemplate("et ex qui",
                            "praesentium",
                            ["itaque",
                                "harum"],
                        [new FieldInfo("status",
                                "quia",
                                "iste",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("phone",
                                "eum",
                                "aut",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongDateShortTime24),
                                true,
                                true,
                            StatisticType.Count)],
                        [new AttachmentsPopupContent("delectus quas ea",
                                "aliquid repudiandae eius odio",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "category",
                                "dolor tenetur enim",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "id",
                                "velit occaecati eveniet",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("autem sit laudantium",
                                "https://picsum.photos/640/480/?image=717",
                                "a534e0dc-4fe8-9c21-725b-4753abd874e1",
                                () => { Console.WriteLine("inventore"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "impedit")]),
                        new AttributesDictionary(),
                        true,
                        "voluptatem",
                        "mollitia",
                        new GraphicOrigin(Guid.NewGuid(),
                            "unde",
                            2)),
                    new Thumbnail("odit",
                        "et",
                        204.6545,
                        153.2557)),
            new FeatureTemplate("molestias voluptatem qui in",
                DrawingTool.Arrow,
                    "token",
                new Graphic(new Point(29.1346,
                            -61.0720,
                            13.0981,
                            -46.6491,
                            894.0864,
                        new SpatialReference(7,
                                "voluptas",
                                "dolor",
                                "distinctio"),
                            true,
                            true,
                            533.1314),
                    new TextSymbol("dolor qui et",
                        new MapColor(95, 23, 184),
                        new MapColor(115, 75, 30),
                            new Dimension(583.8063),
                        new MapFont(new Dimension(41.5304),
                                "Georgia",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            719.4883,
                        new MapColor(107, 6, 5),
                        new MapColor(146, 14, 179),
                            954.7805,
                        HorizontalAlignment.Center,
                            true,
                            743.9998,
                            new Dimension(307.3688),
                            true),
                    new PopupTemplate("id harum ut",
                            "laborum",
                            ["ut",
                                "corrupti"],
                        [new FieldInfo("avatar",
                                "delectus",
                                "voluptatum",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new TextPopupContent("quos quaerat facere"),
                        new MediaPopupContent("voluptates dolorem harum",
                                "provident consequatur",
                            [new ColumnChartMediaInfo("id eveniet vero",
                                    "quia",
                                    "autem debitis qui",
                                new ChartMediaInfoValue(["vel",
                                        "ipsum"],
                                        "est",
                                        "eveniet",
                                    [new ChartMediaInfoValueSeries("category",
                                            "sed",
                                            670.8498),
                                    new ChartMediaInfoValueSeries("password",
                                            "blanditiis",
                                            431.6154)],
                                    [new MapColor(178, 11, 133),
                                    new MapColor(199, 244, 31)])),
                            new BarChartMediaInfo("tenetur aliquid error",
                                    "qui",
                                    "ipsum sequi et",
                                new ChartMediaInfoValue(["dicta",
                                        "voluptas"],
                                        "est",
                                        "qui",
                                    [new ChartMediaInfoValueSeries("status",
                                            "voluptas",
                                            301.3495),
                                    new ChartMediaInfoValueSeries("id",
                                            "expedita",
                                            526.5049)],
                                    [new MapColor(103, 107, 19),
                                    new MapColor(201, 139, 145)]))],
                                7)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "phone",
                                "unde voluptatem doloremque",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "title",
                                "quas atque maxime",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("rerum similique quis",
                                "https://picsum.photos/640/480/?image=945",
                                "5cb20dbb-39d8-c365-b744-6d66e063b2e4",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "reprehenderit"),
                                new ActionButton("deleniti delectus qui",
                                    "https://picsum.photos/640/480/?image=503",
                                    "db55a93e-0ab8-ee67-d499-5963cd7a6313",
                                    () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "praesentium")]),
                        new AttributesDictionary(),
                        true,
                        "accusantium",
                        "perferendis",
                        new GraphicOrigin(Guid.NewGuid(),
                            "deserunt",
                            2)),
                    new Thumbnail("odio",
                        "aut",
                        253.3114,
                        199.7328))];
        await featureLayer.SetTemplates(testTemplates);
        var templates = await featureLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2003, 10, 15, 2, 58, 37),
                    new DateTime(2020, 8, 14, 1, 54, 46));
        await featureLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await featureLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("sed",
                    "quae",
                new TimeExtent(new DateTime(2013, 2, 8, 19, 36, 39),
                        new DateTime(2023, 1, 1, 19, 47, 55)),
                new TimeInterval(TemporalTime.Centuries,
                        41.2750),
                    [new DateTime(2015, 9, 13, 21, 36, 1),
                        new DateTime(2021, 9, 21, 0, 25, 34)],
                    "Asia/Jakarta",
                    "minus");
        await featureLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await featureLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Milliseconds,
                    198.9034);
        await featureLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await featureLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        IReadOnlyList<FeatureType> testTypes = [new FeatureType("078883bc-ca1f-57af-5c23-e78eb7b6518d",
                    "comment",
                [new FeatureTemplate("non rerum recusandae",
                    DrawingTool.RightArrow,
                        "comment",
                    new Graphic(new Polygon([new MapPath([new MapPoint([527.5054]),
                                new MapPoint([312.6647,
                                    181.1730])])],
                            new SpatialReference(1,
                                    "maxime",
                                    "enim",
                                    "velit"),
                            new Point(47.1034,
                                    -75.1011,
                                    110.6770,
                                    89.3167,
                                    586.7354,
                                new SpatialReference(4,
                                        "ea",
                                        "ab",
                                        "et"),
                                    true,
                                    true,
                                    507.3671),
                                true,
                                true,
                                true),
                        new TextSymbol("voluptatem ut consequatur",
                            new MapColor(43, 31, 12),
                            new MapColor(244, 235, 150),
                                new Dimension(514.4166),
                            new MapFont(new Dimension(699.9851),
                                    "Palatino",
                                MapFontStyle.Normal,
                                FontWeight.Normal,
                                TextDecoration.None),
                                685.7056,
                            new MapColor(47, 85, 40),
                            new MapColor(6, 198, 195),
                                907.2131,
                            HorizontalAlignment.Center,
                                true,
                                436.8754,
                                new Dimension(719.5010),
                                true),
                        new PopupTemplate("reiciendis aut magni",
                                "repudiandae",
                                ["reiciendis"],
                            [new FieldInfo("avatar",
                                    "tempora",
                                    "est",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("id",
                                    "magnam",
                                    "exercitationem",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Var)],
                            [new MediaPopupContent("nobis quo sequi",
                                    "ea itaque",
                                [new ColumnChartMediaInfo("atque ducimus est",
                                        "labore",
                                        "accusantium temporibus temporibus",
                                    new ChartMediaInfoValue(["sit",
                                            "aliquam"],
                                            "dolorum",
                                            "nihil",
                                        [new ChartMediaInfoValueSeries("createdAt",
                                                "ratione",
                                                166.5628),
                                        new ChartMediaInfoValueSeries("phone",
                                                "ab",
                                                955.9314)],
                                        [new MapColor(240, 27, 14)])),
                                new LineChartMediaInfo("autem doloribus tempora",
                                        "libero",
                                        "molestias quis magnam",
                                    new ChartMediaInfoValue(["enim",
                                            "delectus"],
                                            "est",
                                            "doloremque",
                                        [new ChartMediaInfoValueSeries("password",
                                                "autem",
                                                706.6717),
                                        new ChartMediaInfoValueSeries("token",
                                                "doloribus",
                                                334.6391)],
                                        [new MapColor(138, 226, 211)]))],
                                    7),
                            new AttachmentsPopupContent("harum earum harum",
                                    "et facilis",
                                    AttachmentsPopupContentDisplayType.Preview)],
                            [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "email",
                                    "fugiat quia nisi",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("ipsa nostrum et",
                                    "https://picsum.photos/640/480/?image=1015",
                                    "967160f0-d3f8-806a-3e81-b6bf99b73458",
                                    () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "nostrum"),
                                    new ActionButton("placeat amet eos",
                                        "https://picsum.photos/640/480/?image=628",
                                        "97031f5c-2d77-2061-e3b5-493b8a458d33",
                                        () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                        "name",
                                        true,
                                        true,
                                        true,
                                        "natus")]),
                            new AttributesDictionary(),
                            true,
                            "quam",
                            "non",
                            new GraphicOrigin(Guid.NewGuid(),
                                "libero",
                                7)),
                        new Thumbnail("blanditiis",
                            "cupiditate",
                            215.9828,
                            159.3400))],
                    new CodedValueDomain<string>(),
                    "aut")];
        await featureLayer.SetTypes(testTypes);
        var types = await featureLayer.GetTypes();
        Assert.AreEqual(testTypes, types);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 7, 17, 0, 10, 10),
                    new DateTime(2020, 1, 6, 13, 31, 23));
        await featureLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await featureLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
