@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureLayer(Action renderHandler)
    {
        FeatureLayer? featureLayer = null;

        FeatureLayerEditsEvent? editsResult = null;
        void OnEdits(FeatureLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <FeatureLayer 
                        Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")"
                        OutFields="@(["consequuntur"])"
                        DefinitionExpression="@("similique")"
                        MinScale="@(8013.9893)"
                        MaxScale="@(32220775.7362)"
                        ObjectIdField="@("provident")"
                        GeometryType="@(FeatureGeometryType.Polyline)"
                        Title="@("et mollitia doloremque")"
                        Opacity="@(0.6459)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        ApiKey="@("illo")"
                        BlendMode="@(BlendMode.Screen)"
                        Charts="@(["earum",
                            "vero"])"
                        Copyright="@("corrupti")"
                        DateFieldsTimeZone="@("itaque")"
                        DisplayField="@("veritatis")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("est",
                            120019.4340))"
                        GdbVersion="@("8.5.7.8")"
                        HasM="@(true)"
                        HasZ="@(true)"
                        HistoricMoment="@(new DateTime(2017, 2, 16, 9, 55, 48))"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(702.1123)"
                        ReturnM="@(true)"
                        ReturnZ="@(true)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        TypeIdField="@("numquam")"
                        Types="@([new FeatureType("cad76359-ceae-32a1-83a9-f64ac3606a64",
                                "id",
                            [new FeatureTemplate("et eos et",
                                DrawingTool.Circle,
                                    "comment",
                                new Graphic(new Polyline([new MapPath([new MapPoint([510.5359]),
                                            new MapPoint([736.5410])]),
                                            new MapPath([new MapPoint([81.1769]),
                                                new MapPoint([518.5503])])],
                                        new SpatialReference(5,
                                                "corrupti",
                                                "laboriosam",
                                                "ex"),
                                            true,
                                            true),
                                    new TextSymbol("amet fugiat aspernatur",
                                        new MapColor(183, 83, 159),
                                        new MapColor(132, 243, 240),
                                            new Dimension(649.9880),
                                        new MapFont(new Dimension(925.0772),
                                                "Palatino",
                                            MapFontStyle.Italic,
                                            FontWeight.Lighter,
                                            TextDecoration.Underline),
                                            823.7386,
                                        new MapColor(11, 239, 92),
                                        new MapColor(0, 141, 196),
                                            914.9000,
                                        HorizontalAlignment.Left,
                                            true,
                                            237.1355,
                                            new Dimension(865.7404),
                                            true),
                                    new PopupTemplate("consequatur quisquam quidem",
                                            "sed",
                                            ["nesciunt"],
                                        [new FieldInfo("title",
                                                "perspiciatis",
                                                "hic",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(8,
                                                    true,
                                                DateFormat.ShortDateLeShortTime),
                                                true,
                                                true,
                                            StatisticType.Min),
                                        new FieldInfo("token",
                                                "corporis",
                                                "et",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(8,
                                                    true,
                                                DateFormat.LongDateLongTime),
                                                true,
                                                true,
                                            StatisticType.Count)],
                                        [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                                    "molestiae",
                                                    "nam quasi id"))],
                                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                                "email",
                                                "at eligendi quo",
                                                ExpressionInfoReturnType.String),
                                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                                "status",
                                                "quaerat et rerum",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("perspiciatis incidunt molestiae",
                                                "https://picsum.photos/640/480/?image=584",
                                                "0e83b759-7511-de4e-29d3-bbb8c8af11bc",
                                                () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                                                "name",
                                                true,
                                                true,
                                                true,
                                                "molestiae"),
                                                new ActionButton("error tempore sed",
                                                    "https://picsum.photos/640/480/?image=143",
                                                    "39ac84b9-40ed-fc3e-d08d-b67b4dd37d9e",
                                                    () => { Console.WriteLine("earum"); return Task.CompletedTask; },
                                                    "updatedAt",
                                                    true,
                                                    true,
                                                    true,
                                                    "laudantium")]),
                                        new AttributesDictionary(),
                                        true,
                                        "dolor",
                                        "consequatur",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "ea",
                                            1)),
                                    new Thumbnail("aut",
                                        "velit",
                                        46.9061,
                                        138.3026))],
                                new CodedValueDomain<string>(),
                                "officiis"),
                        new FeatureType("55c49157-5947-88a1-d93b-ddd167f57fdc",
                                "password",
                            [new FeatureTemplate("minus mollitia doloribus",
                                DrawingTool.RightArrow,
                                    "phone",
                                new Graphic(new Polyline([new MapPath([new MapPoint([451.8622,
                                                260.1334])]),
                                            new MapPath([new MapPoint([671.2333,
                                                    786.6480]),
                                                new MapPoint([335.2988,
                                                    721.8249])])],
                                        new SpatialReference(5,
                                                "pariatur",
                                                "officiis",
                                                "nemo"),
                                            true,
                                            true),
                                    new TextSymbol("autem temporibus cum",
                                        new MapColor(178, 151, 208),
                                        new MapColor(250, 145, 212),
                                            new Dimension(101.4339),
                                        new MapFont(new Dimension(602.6906),
                                                "Palatino",
                                            MapFontStyle.Italic,
                                            FontWeight.Lighter,
                                            TextDecoration.None),
                                            672.1181,
                                        new MapColor(233, 81, 111),
                                        new MapColor(52, 218, 99),
                                            98.2061,
                                        HorizontalAlignment.Right,
                                            true,
                                            825.5203,
                                            new Dimension(253.2480),
                                            true),
                                    new PopupTemplate("placeat ad voluptatem",
                                            "expedita",
                                            ["pariatur"],
                                        [new FieldInfo("title",
                                                "praesentium",
                                                "dolorem",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(5,
                                                    true,
                                                DateFormat.LongDateShortTime24),
                                                true,
                                                true,
                                            StatisticType.Sum)],
                                        [new TextPopupContent("ea nam voluptatibus"),
                                        new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                                                    "in",
                                                    "ducimus rerum explicabo"))],
                                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                "updatedAt",
                                                "repellendus harum illum",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("recusandae adipisci consequuntur",
                                                "https://picsum.photos/640/480/?image=722",
                                                "9dce855f-0e15-7bd2-c79f-b73688c7b6fe",
                                                () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                                                "status",
                                                true,
                                                true,
                                                true,
                                                "sit")]),
                                        new AttributesDictionary(),
                                        true,
                                        "commodi",
                                        "laboriosam",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "officia",
                                            2)),
                                    new Thumbnail("fuga",
                                        "voluptas",
                                        154.7464,
                                        89.8107))],
                                new CodedValueDomain<string>(),
                                "qui")])"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Days)"
                            Value="@(648.5253)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("harum")"
                            EndField="@("velit")"
                            Stops="@([new DateTime(2011, 2, 2, 20, 39, 56)])"
                            TimeZone="@("Europe/Brussels")"
                            TrackIdField="@("quo")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(263.9159)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2019, 8, 15, 7, 54, 16))"
                                End="@(new DateTime(2010, 1, 10, 17, 47, 38))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2012, 5, 20, 0, 43, 32))"
                            End="@(new DateTime(2022, 7, 10, 10, 5, 40))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("autem optio in")"
                            DrawingTool="@(DrawingTool.Freehand)"
                            Name="@("phone")"
                            Thumbnail="@(new Thumbnail("ullam",
                                "facilis",
                                178.1938,
                                265.6530))">
                            <Graphic 
                                Geometry="@(new Point(-103.7066,
                                        81.2396,
                                        59.7100,
                                        -53.1924,
                                        409.3387,
                                    new SpatialReference(5,
                                            "exercitationem",
                                            "accusantium",
                                            "iusto"),
                                        true,
                                        true,
                                        564.2715))"
                                Symbol="@(new TextSymbol("vel consequatur cum",
                                    new MapColor(240, 23, 219),
                                    new MapColor(95, 10, 247),
                                        new Dimension(262.8539),
                                    new MapFont(new Dimension(79.8664),
                                            "Palatino",
                                        MapFontStyle.Normal,
                                        FontWeight.Lighter,
                                        TextDecoration.Underline),
                                        65.2012,
                                    new MapColor(217, 127, 75),
                                    new MapColor(246, 228, 87),
                                        73.1608,
                                    HorizontalAlignment.Left,
                                        true,
                                        581.5591,
                                        new Dimension(612.1994),
                                        true))"
                                PopupTemplate="@(new PopupTemplate("dolores esse debitis",
                                        "iste",
                                        ["qui",
                                            "vero"],
                                    [new FieldInfo("category",
                                            "error",
                                            "suscipit",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(4,
                                                true,
                                            DateFormat.DayShortMonthYearShortTime),
                                            true,
                                            true,
                                        StatisticType.Count)],
                                    [new FieldsPopupContent([new FieldInfo("updatedAt",
                                                "odio",
                                                "voluptatem",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(2,
                                                    true,
                                                DateFormat.LongDate),
                                                true,
                                                true,
                                            StatisticType.Min),
                                        new FieldInfo("createdAt",
                                                "harum",
                                                "consectetur",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(9,
                                                    true,
                                                DateFormat.LongMonthDayYearShortTime24),
                                                true,
                                                true,
                                            StatisticType.Sum)],
                                            "inventore et",
                                            "sapiente dolorem totam")],
                                    [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                            "email",
                                            "rerum esse asperiores",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("fuga architecto dolorem",
                                            "https://picsum.photos/640/480/?image=425",
                                            "59076eea-ac8c-8224-a22b-14c93153f088",
                                            () => { Console.WriteLine("facilis"); return Task.CompletedTask; },
                                            "token",
                                            true,
                                            true,
                                            true,
                                            "velit"),
                                            new ActionButton("labore facere odio",
                                                "https://picsum.photos/640/480/?image=2",
                                                "02bbf99d-c1b0-2a89-93fd-42929dfac6f6",
                                                () => { Console.WriteLine("non"); return Task.CompletedTask; },
                                                "status",
                                                true,
                                                true,
                                                true,
                                                "hic")]))"
                                Attributes="@(new AttributesDictionary())"
                                Visible="@(true)"
                                LegendLabel="@("odit")"
                                AggregateGeometries="@("repellat")"
                                Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                    "natus",
                                    1))">
                            </Graphic>
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(4)"
                            ImageCoordinateSystem="@("natus")"
                            Wkt="@("dolorem")"
                            Wkt2="@("quo")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Point(-0.7551,
                                    65.1150,
                                    75.5008,
                                    -24.0848,
                                    719.8601,
                                new SpatialReference(9,
                                        "quia",
                                        "officia",
                                        "suscipit"),
                                    true,
                                    true,
                                    755.9669))"
                            Symbol="@(new TextSymbol("aut non sunt",
                                new MapColor(158, 193, 112),
                                new MapColor(51, 219, 90),
                                    new Dimension(249.2801),
                                new MapFont(new Dimension(857.3098),
                                        "Helvetica",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.Underline),
                                    49.5875,
                                new MapColor(18, 121, 150),
                                new MapColor(91, 10, 116),
                                    605.5055,
                                HorizontalAlignment.Right,
                                    true,
                                    135.3370,
                                    new Dimension(419.9787),
                                    true))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("magnam")"
                            AggregateGeometries="@("magnam")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "veritatis",
                                5))">
                            <PopupTemplate 
                                Title="@("aut eveniet nam")"
                                StringContent="@("consectetur")"
                                OutFields="@(["ad",
                                    "aut"])"
                                FieldInfos="@([new FieldInfo("comment",
                                        "laboriosam",
                                        "vel",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("avatar",
                                        "eligendi",
                                        "et",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.ShortDateLeShortTime),
                                        true,
                                        true,
                                    StatisticType.Max)])"
                                Content="@([new MediaPopupContent("odio aut tempore",
                                        "minima corporis",
                                    [new PieChartMediaInfo("eum voluptas dolorum",
                                            "ea",
                                            "eos similique perferendis",
                                        new ChartMediaInfoValue(["necessitatibus"],
                                                "aperiam",
                                                "assumenda",
                                            [new ChartMediaInfoValueSeries("status",
                                                    "dolores",
                                                    102.9050)],
                                            [new MapColor(204, 126, 66),
                                            new MapColor(165, 51, 11)]))],
                                        7)])"
                                ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                        "status",
                                        "quia est minus",
                                        ExpressionInfoReturnType.String)])"
                                OverwriteActions="@(true)"
                                ReturnGeometry="@(true)"
                                Actions="@([new ActionButton("est adipisci ut",
                                    "https://picsum.photos/640/480/?image=1044",
                                    "0daf88f8-d29d-c141-aec2-24e3989b11f8",
                                    () => { Console.WriteLine("repudiandae"); return Task.CompletedTask; },
                                    "title",
                                    true,
                                    true,
                                    true,
                                    "culpa"),
                                    new ActionButton("repellat praesentium vel",
                                        "https://picsum.photos/640/480/?image=295",
                                        "094d3039-b0b8-a7f9-bd54-1bbd163b1a68",
                                        () => { Console.WriteLine("delectus"); return Task.CompletedTask; },
                                        "email",
                                        true,
                                        true,
                                        true,
                                        "necessitatibus")])">
                            </PopupTemplate>
                        </Graphic>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(95, 183, 234),
                                        new MapColor(126, 208, 67)),
                                    new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(111, 209, 74),
                                        new MapColor(11, 12, 235))]),
                                    330.2208,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(829.1421,
                                            408.8576),
                                    new AuthoringInfoField1ClassBreakInfos(754.6052,
                                            564.4146)],
                                        "vel",
                                        "eius",
                                        "beatae"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(309.0214,
                                            560.0965),
                                    new AuthoringInfoField1ClassBreakInfos(261.5837,
                                            557.8971)],
                                        "pariatur",
                                        "laudantium",
                                        "repellendus"),
                                    ["beatae"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "nesciunt",
                                    true,
                                LengthUnit.Meters,
                                    456.5876,
                                    664.4653,
                                    144.3697,
                                    214.7041))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("soluta est nihil")"
                            StringContent="@("ipsa")"
                            OutFields="@(["quo",
                                "exercitationem"])"
                            FieldInfos="@([new FieldInfo("email",
                                    "ipsa",
                                    "vel",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "a",
                                        "facere odit tenetur"))])"
                            ExpressionInfos="@([new ExpressionInfo("return Date();",
                                    "email",
                                    "nemo consequatur mollitia",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "category",
                                    "non ab id",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("ratione illo voluptatem",
                                "https://picsum.photos/640/480/?image=112",
                                "50920240-5584-438a-8f37-fddc5295afad",
                                () => { Console.WriteLine("porro"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "molestias")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("dicta")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("aliquid")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterEnd)"
                            LabelExpression="@("eveniet")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(7787261.5133)"
                            MinScale="@(18149.3219)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(631.5202))"
                            Symbol="@(new TextSymbol("ea illo facilis",
                                new MapColor(98, 221, 42),
                                new MapColor(159, 253, 156),
                                    new Dimension(826.1819),
                                new MapFont(new Dimension(816.5208),
                                        "Arial",
                                    MapFontStyle.Oblique,
                                    FontWeight.Normal,
                                    TextDecoration.Underline),
                                    376.5457,
                                new MapColor(108, 91, 212),
                                new MapColor(219, 108, 142),
                                    329.0639,
                                HorizontalAlignment.Center,
                                    true,
                                    606.8041,
                                    new Dimension(826.2576),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("ObjectID = 1")">
                        </Label>
                        <Extent 
                            Xmax="@(80.3298)"
                            Xmin="@(-104.5575)"
                            Ymax="@(80.6452)"
                            Ymin="@(-19.6088)"
                            Zmax="@(47.8557)"
                            Zmin="@(622.1799)"
                            Mmax="@(674.5319)"
                            Mmin="@(791.3372)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("et")"
                                Wkt="@("dolores")"
                                Wkt2="@("autem")">
                            </SpatialReference>
                        </Extent>
                        <FormTemplate 
                            Title="@("enim vitae ut")"
                            Description="@("magni et")"
                            PreserveFieldValuesWhenHidden="@(true)"
                            Elements="@([new FieldElement("createdAt",
                                    "sed",
                                    "alias omnis",
                                    "voluptatum",
                                    "voluptate",
                                    "consequuntur",
                                    "aut",
                                    new CodedValueDomain<string>(),
                                    default,
                                    "dolor")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "email",
                                    "adipisci ipsum atque",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "title",
                                    "enim eius eos",
                                    ExpressionInfoReturnType.String)])">
                        </FormTemplate>
                        <LayerFloorInfo 
                            FloorField="@("asperiores")">
                        </LayerFloorInfo>
                        <Field 
                            Name="@("password")"
                            Alias="@("ipsa")"
                            Description="@("perspiciatis fugit non")"
                            Length="@(9)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "error" })"
                            ValueType="@(FieldValueType.OrderedOrRanked)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("beatae",
                                34061568.5017)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(275.8205,
                                new Extent(13.2489,
                                        144.5572,
                                        -86.2040,
                                        -84.6408,
                                        815.6898,
                                        679.3227,
                                        245.3445,
                                        789.7133,
                                    new SpatialReference(1,
                                            "qui",
                                            "minima",
                                            "ut"),
                                        true,
                                        true),
                                    [2],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2019, 5, 20, 22, 4, 46),
                                        new DateTime(2021, 9, 2, 6, 58, 11)),
                                    QueryUnits.UsNauticalMiles,
                                    "ObjectID = 1"))"
                            IncludedEffect="@([new Effect("ab",
                                12992404.1630),
                                new Effect("blanditiis",
                                    5084944.1527)])">
                        </FeatureEffect>
                        <FeatureLayerBaseElevationInfo 
                            FeatureExpressionInfo="@(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Name;",
                                    "suscipit deserunt doloremque"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(805.7677)"
                            Unit="@(ElevationUnit.Yards)">
                        </FeatureLayerBaseElevationInfo>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureLayer!);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<FeatureLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "feature");
        var queryAttachmentsMethodResult = await featureLayer.QueryAttachments(new AttachmentQuery("magni",
                    ["voluptatum",
                        "voluptatem"],
                    true,
                    [2],
                    ["sit",
                        "corrupti"],
                    "token",
                    750.9860,
                    [2],
                    true,
                    [6],
                    811.2193,
                    "PostalCode = 'M5V 1J9'"),
                default);
        Assert.IsNotNull(queryAttachmentsMethodResult);
        var saveMethodResult = await featureLayer.Save(new FeatureLayerBaseSaveOptions(new FeatureLayerBaseSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await featureLayer.SaveAs(new PortalItem(),
            new FeatureLayerBaseSaveAsOptions(new PortalFolder(new DateTime(2004, 5, 15, 18, 58, 11),
                        "aut",
                        "aliquid est dignissimos"),
                new FeatureLayerBaseSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        var updateAttachmentMethodResult = await featureLayer.UpdateAttachment(new Graphic(new Polygon([new MapPath([new MapPoint([614.9692]),
                        new MapPoint([457.5893])])],
                    new SpatialReference(6,
                            "perferendis",
                            "consequatur",
                            "asperiores"),
                    new Point(36.4785,
                            20.0323,
                            55.7802,
                            -71.1283,
                            518.2413,
                        new SpatialReference(2,
                                "ullam",
                                "repellat",
                                "tempora"),
                            true,
                            true,
                            603.2071),
                        true,
                        true,
                        true),
                new TextSymbol("et qui libero",
                    new MapColor(122, 76, 251),
                    new MapColor(51, 224, 27),
                        new Dimension(933.1666),
                    new MapFont(new Dimension(216.4061),
                            "Arial",
                        MapFontStyle.Oblique,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        666.0023,
                    new MapColor(122, 215, 195),
                    new MapColor(6, 61, 75),
                        3.3106,
                    HorizontalAlignment.Right,
                        true,
                        141.4510,
                        new Dimension(824.6286),
                        true),
                new PopupTemplate("quis tempora similique",
                        "enim",
                        ["omnis"],
                    [new FieldInfo("group",
                            "est",
                            "et",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.LongMonthDayYearShortTime),
                            true,
                            true,
                        StatisticType.Sum)],
                    [new FieldsPopupContent([new FieldInfo("category",
                                "veniam",
                                "nesciunt",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Count)],
                            "sed saepe consequatur dolor",
                            "et laudantium laborum")],
                    [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "phone",
                            "repellendus quis quaerat",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "token",
                            "libero eius ullam",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("odio quia qui",
                            "https://picsum.photos/640/480/?image=732",
                            "6e339bf4-c953-0465-f4af-9dc6d7a8431b",
                            () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                            "category",
                            true,
                            true,
                            true,
                            "est"),
                            new ActionButton("qui facilis voluptatem",
                                "https://picsum.photos/640/480/?image=453",
                                "ef82cc93-c84b-467a-5014-87d7f59e97e5",
                                () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "sit")]),
                    new AttributesDictionary(),
                    true,
                    "eveniet",
                    "quis",
                    new GraphicOrigin(Guid.NewGuid(),
                        "quos",
                        8)),
                7,
            default);
        Assert.IsNotNull(updateAttachmentMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await featureLayer.SetPortalItem(testPortalItem);
        var portalItem = await featureLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        ListMode testListMode = ListMode.Hide;
        await featureLayer.SetListMode(testListMode);
        var listMode = await featureLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("nihil porro at",
                    "in",
                    ["non"],
                [new FieldInfo("id",
                        "quaerat",
                        "qui",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateLeLongTime),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("category",
                        "qui",
                        "repellendus",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.ShortDateLe),
                        true,
                        true,
                    StatisticType.Sum)],
                [new MediaPopupContent("accusantium et esse",
                        "culpa dolorum vero",
                    [new PieChartMediaInfo("veritatis et omnis",
                            "rerum",
                            "ipsa aut consequatur",
                        new ChartMediaInfoValue(["aliquam",
                                "consequuntur"],
                                "eum",
                                "ipsum",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "veritatis",
                                    757.5375)],
                            [new MapColor(143, 117, 92)]))],
                        6),
                new RelationshipPopupContent("quidem ex repellendus",
                        "porro rerum perspiciatis minus",
                        4,
                        "impedit",
                    [new RelatedRecordsInfoFieldOrder("atque",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("accusamus",
                        OrderBy.Asc)],
                        4)],
                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "phone",
                        "tenetur ut hic",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "category",
                        "voluptas soluta aut",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("nam voluptates fuga",
                        "https://picsum.photos/640/480/?image=67",
                        "3b587db2-4e7e-575a-a2f7-3e94b54d1f90",
                        () => { Console.WriteLine("soluta"); return Task.CompletedTask; },
                        "phone",
                        true,
                        true,
                        true,
                        "itaque")]);
        await featureLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await featureLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await featureLayer.SetBlendMode(testBlendMode);
        var blendMode = await featureLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FeatureLayerBaseElevationInfo testElevationInfo = new FeatureLayerBaseElevationInfo(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                        "perspiciatis incidunt ipsam"),
                ElevationInfoMode.RelativeToScene,
                    811.8583,
                ElevationUnit.Feet);
        await featureLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await featureLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("delectus",
                    27580231.1176)],
                    true,
                new FeatureFilter(303.0990,
                    new Polyline([new MapPath([new MapPoint([179.1715,
                                903.5313])])],
                        new SpatialReference(7,
                                "ut",
                                "aliquam",
                                "natus"),
                            true,
                            true),
                        [4],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2008, 8, 25, 8, 47, 16),
                            new DateTime(2016, 9, 18, 13, 0, 11)),
                        QueryUnits.NauticalMiles,
                        "PostalCode = 'M5V 1J9'"),
                    [new Effect("ut",
                        5005792.9201)]);
        await featureLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await featureLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "group",
                    "mollitia",
                    "ex maiores molestias",
                    6,
                    true,
                    true,
                    new { Value = "molestias" },
                FieldValueType.LocationOrPlaceName,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "email",
                    "aperiam",
                    "dolorem et ut",
                    9,
                    true,
                    true,
                    new { Value = "ad" },
                FieldValueType.Binary,
                    new CodedValueDomain<string>())];
        await featureLayer.SetFields(testFields);
        var fields = await featureLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        LayerFloorInfo testFloorInfo = new LayerFloorInfo("neque");
        await featureLayer.SetFloorInfo(testFloorInfo);
        var floorInfo = await featureLayer.GetFloorInfo();
        Assert.AreEqual(testFloorInfo, floorInfo);
        FormTemplate testFormTemplate = new FormTemplate("autem recusandae vel",
                    "ea architecto rem",
                    true,
                [new GroupElement("inventore possimus aut",
                    [new FieldElement("token",
                            "et",
                            "dicta sit architecto",
                            "nesciunt",
                            "voluptatum",
                            "autem",
                            "cumque",
                            new CodedValueDomain<string>(),
                            default,
                            "magni"),
                    new FieldElement("password",
                            "voluptatum",
                            "impedit inventore aliquid",
                            "omnis",
                            "repudiandae",
                            "hic",
                            "qui",
                            new CodedValueDomain<string>(),
                            default,
                            "nesciunt")],
                    InitialState.Collapsed,
                        "rem",
                        "alias")],
                [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "comment",
                        "autem molestias possimus",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "phone",
                        "sapiente veniam nostrum",
                        ExpressionInfoReturnType.String)]);
        await featureLayer.SetFormTemplate(testFormTemplate);
        var formTemplate = await featureLayer.GetFormTemplate();
        Assert.AreEqual(testFormTemplate, formTemplate);
        Extent testFullExtent = new Extent(169.0198,
                    -81.0078,
                    10.5199,
                    64.1744,
                    837.4262,
                    415.3224,
                    848.3131,
                    120.5318,
                new SpatialReference(3,
                        "est",
                        "debitis",
                        "quia"),
                    true,
                    true);
        await featureLayer.SetFullExtent(testFullExtent);
        var fullExtent = await featureLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveBefore,
                    "consectetur",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    12694143.9833,
                    8549.7720,
                    true,
                    new Dimension(887.1557),
                new TextSymbol("doloribus ut vero",
                    new MapColor(234, 175, 54),
                    new MapColor(208, 103, 54),
                        new Dimension(757.5734),
                    new MapFont(new Dimension(712.2596),
                            "Times New Roman",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        585.0353,
                    new MapColor(151, 126, 170),
                    new MapColor(176, 231, 178),
                        124.3705,
                    HorizontalAlignment.Right,
                        true,
                        717.8904,
                        new Dimension(597.6866),
                        true),
                    true,
                    "Province = 'Ontario'"),
            new Label(LabelPlacement.AboveCenter,
                    "sapiente",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    34541169.9364,
                    47379.8971,
                    true,
                    new Dimension(110.2993),
                new TextSymbol("corporis explicabo ea",
                    new MapColor(26, 202, 178),
                    new MapColor(157, 21, 149),
                        new Dimension(881.5907),
                    new MapFont(new Dimension(559.1910),
                            "Verdana",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        635.2957,
                    new MapColor(144, 89, 4),
                    new MapColor(70, 171, 105),
                        948.9276,
                    HorizontalAlignment.Right,
                        true,
                        59.1232,
                        new Dimension(924.3786),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'")];
        await featureLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await featureLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("iusto",
                SortOrder.Ascending,
                    "architecto"),
            new OrderedLayerOrderBy("qui",
                SortOrder.Descending,
                    "ut")];
        await featureLayer.SetOrderBy(testOrderBy);
        var orderBy = await featureLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(29, 172, 27),
                            new MapColor(22, 25, 42))]),
                        255.4578,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(426.6672,
                                890.3164)],
                            "rerum",
                            "totam",
                            "rem"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(426.1510,
                                168.7736),
                        new AuthoringInfoField1ClassBreakInfos(391.2106,
                                586.8723)],
                            "et",
                            "voluptates",
                            "quos"),
                        ["quisquam"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "molestiae",
                        true,
                    LengthUnit.NauticalMiles,
                        462.7231,
                        805.3139,
                        321.9594,
                        522.7677),
                new PictureFillSymbol("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1",
                    new Dimension(349.6831),
                    new Dimension(77.3522),
                    new Dimension(44.9864),
                    new Dimension(67.4112),
                    -138.9449,
                    -31.1396,
                    new Outline(new MapColor(182, 83, 61),
                        new Dimension(855.4259),
                        SimpleLineSymbolStyle.Dash,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(211, 46, 178),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Diamond),
                        610.4531),
                    new MapColor(97, 242, 97)),
                    "eum",
                    new DefaultSymbol(),
                    "alias",
                    "veritatis",
                    "mollitia",
                    "mollitia",
                new UniqueValueRendererLegendOptions("modi quia et"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("laudantium",
                        new TextSymbol("vel beatae soluta",
                            new MapColor(145, 42, 48),
                            new MapColor(161, 145, 126),
                                new Dimension(767.6996),
                            new MapFont(new Dimension(809.6688),
                                    "Garamond",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                853.4907,
                            new MapColor(13, 178, 118),
                            new MapColor(187, 168, 136),
                                857.9897,
                            HorizontalAlignment.Right,
                                true,
                                439.5568,
                                new Dimension(222.7442),
                                true),
                        [new UniqueValue("voluptates",
                                "accusantium",
                                "aut"),
                        new UniqueValue("quia",
                                "architecto",
                                "praesentium")]),
                    new UniqueValueClass("et",
                        new TextSymbol("voluptatem recusandae quaerat",
                            new MapColor(37, 235, 85),
                            new MapColor(45, 6, 244),
                                new Dimension(180.7761),
                            new MapFont(new Dimension(417.7177),
                                    "Arial",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                505.4201,
                            new MapColor(52, 47, 22),
                            new MapColor(77, 81, 213),
                                380.0774,
                            HorizontalAlignment.Right,
                                true,
                                1.1675,
                                new Dimension(514.2569),
                                true),
                        [new UniqueValue("autem",
                                "laudantium",
                                "sit")])],
                        "molestiae")],
                [new UniqueValueInfo("dicta",
                    new TextSymbol("numquam debitis magnam",
                        new MapColor(45, 147, 65),
                        new MapColor(65, 200, 139),
                            new Dimension(690.3924),
                        new MapFont(new Dimension(608.0072),
                                "Verdana",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            496.2147,
                        new MapColor(170, 202, 58),
                        new MapColor(245, 234, 159),
                            16.7357,
                        HorizontalAlignment.Left,
                            true,
                            114.4384,
                            new Dimension(335.4134),
                            true),
                        "in")],
                    "dignissimos",
                    "consequatur dolorem voluptatem");
        await featureLayer.SetRenderer(testRenderer);
        var renderer = await featureLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "rem",
                    "est",
                    "aut");
        await featureLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("quas vel",
                DrawingTool.RightArrow,
                    "title",
                new Graphic(new Polygon([new MapPath([new MapPoint([683.1780,
                                808.5040]),
                            new MapPoint([602.3809,
                                948.8881])]),
                            new MapPath([new MapPoint([556.0363]),
                                new MapPoint([254.5579])])],
                        new SpatialReference(3,
                                "excepturi",
                                "voluptatem",
                                "ullam"),
                        new Point(-97.5047,
                                -69.3357,
                                77.0104,
                                42.1321,
                                96.6110,
                            new SpatialReference(8,
                                    "et",
                                    "eos",
                                    "voluptas"),
                                true,
                                true,
                                712.3214),
                            true,
                            true,
                            true),
                    new TextSymbol("et est corrupti",
                        new MapColor(20, 28, 35),
                        new MapColor(145, 79, 91),
                            new Dimension(421.9834),
                        new MapFont(new Dimension(131.2919),
                                "Palatino",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            451.9193,
                        new MapColor(241, 231, 67),
                        new MapColor(30, 248, 92),
                            639.7982,
                        HorizontalAlignment.Left,
                            true,
                            759.7331,
                            new Dimension(367.2097),
                            true),
                    new PopupTemplate("modi quo aut",
                            "autem",
                            ["natus"],
                        [new FieldInfo("avatar",
                                "explicabo",
                                "maxime",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.DayShortMonthYearShortTime24),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("category",
                                "omnis",
                                "aliquid",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongDateLongTime),
                                true,
                                true,
                            StatisticType.Var)],
                        [new MediaPopupContent("qui ut eum",
                                "aut assumenda nesciunt",
                            [new LineChartMediaInfo("ullam et exercitationem",
                                    "eum",
                                    "quidem facere sint",
                                new ChartMediaInfoValue(["quisquam",
                                        "sint"],
                                        "ut",
                                        "sint",
                                    [new ChartMediaInfoValueSeries("comment",
                                            "fugit",
                                            277.3517),
                                    new ChartMediaInfoValueSeries("avatar",
                                            "nisi",
                                            958.9239)],
                                    [new MapColor(157, 71, 142)]))],
                                5),
                        new MediaPopupContent("delectus reiciendis esse",
                                "repudiandae dolorem quisquam quas",
                            [new PieChartMediaInfo("voluptatum vitae et",
                                    "ad",
                                    "molestias nisi aliquid",
                                new ChartMediaInfoValue(["cum"],
                                        "ratione",
                                        "praesentium",
                                    [new ChartMediaInfoValueSeries("group",
                                            "at",
                                            677.3140),
                                    new ChartMediaInfoValueSeries("password",
                                            "voluptate",
                                            358.8408)],
                                    [new MapColor(248, 29, 205)]))],
                                3)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "phone",
                                "voluptatem eligendi doloremque",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("quia fugit dicta",
                                "https://picsum.photos/640/480/?image=76",
                                "b792d974-8bb5-53a7-6896-9ed964131c39",
                                () => { Console.WriteLine("rem"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "necessitatibus")]),
                        new AttributesDictionary(),
                        true,
                        "rerum",
                        "perspiciatis",
                        new GraphicOrigin(Guid.NewGuid(),
                            "repudiandae",
                            1)),
                    new Thumbnail("ullam",
                        "quia",
                        214.2105,
                        157.1757)),
            new FeatureTemplate("rerum sequi",
                DrawingTool.Rectangle,
                    "avatar",
                new Graphic(new Polyline([new MapPath([new MapPoint([390.0163,
                                741.3085]),
                            new MapPoint([979.3554])])],
                        new SpatialReference(4,
                                "ipsa",
                                "voluptatem",
                                "excepturi"),
                            true,
                            true),
                    new TextSymbol("distinctio eos harum",
                        new MapColor(57, 204, 162),
                        new MapColor(26, 236, 47),
                            new Dimension(133.6268),
                        new MapFont(new Dimension(639.6777),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            800.2686,
                        new MapColor(136, 88, 151),
                        new MapColor(233, 254, 212),
                            440.8493,
                        HorizontalAlignment.Center,
                            true,
                            848.0161,
                            new Dimension(189.5750),
                            true),
                    new PopupTemplate("sed aut voluptas",
                            "nisi",
                            ["consequatur"],
                        [new FieldInfo("updatedAt",
                                "ea",
                                "consequatur",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongDate),
                                true,
                                true,
                            StatisticType.Min)],
                        [new AttachmentsPopupContent("unde ipsa cupiditate",
                                "voluptates qui",
                                AttachmentsPopupContentDisplayType.Preview),
                        new MediaPopupContent("molestiae deleniti atque",
                                "saepe praesentium",
                            [new ColumnChartMediaInfo("maxime nemo quaerat",
                                    "ut",
                                    "sed doloribus voluptates",
                                new ChartMediaInfoValue(["animi"],
                                        "deleniti",
                                        "optio",
                                    [new ChartMediaInfoValueSeries("comment",
                                            "quia",
                                            759.4513),
                                    new ChartMediaInfoValueSeries("email",
                                            "ipsa",
                                            770.2389)],
                                    [new MapColor(6, 249, 254),
                                    new MapColor(234, 4, 87)]))],
                                4)],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "status",
                                "id fugit doloremque",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("enim eos omnis",
                                "https://picsum.photos/640/480/?image=261",
                                "a2152aa4-f4be-49df-c0e8-63324299056c",
                                () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "non")]),
                        new AttributesDictionary(),
                        true,
                        "distinctio",
                        "sed",
                        new GraphicOrigin(Guid.NewGuid(),
                            "itaque",
                            9)),
                    new Thumbnail("temporibus",
                        "cum",
                        211.0992,
                        38.7804))];
        await featureLayer.SetTemplates(testTemplates);
        var templates = await featureLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2011, 8, 6, 12, 20, 9),
                    new DateTime(2010, 4, 1, 14, 18, 25));
        await featureLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await featureLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("distinctio",
                    "autem",
                new TimeExtent(new DateTime(2023, 9, 2, 0, 16, 1),
                        new DateTime(2000, 3, 18, 15, 14, 37)),
                new TimeInterval(TemporalTime.Decades,
                        176.3935),
                    [new DateTime(2013, 2, 14, 9, 5, 8)],
                    "Africa/Harare",
                    "quisquam");
        await featureLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await featureLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    776.5612);
        await featureLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await featureLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        IReadOnlyList<FeatureType> testTypes = [new FeatureType("d9e36d95-6bb1-dbc2-0343-6d96185eac56",
                    "comment",
                [new FeatureTemplate("ea facere dolorum totam",
                    DrawingTool.Polygon,
                        "createdAt",
                    new Graphic(new Point(170.2994,
                                83.8100,
                                -151.8114,
                                36.3008,
                                731.8833,
                            new SpatialReference(7,
                                    "rerum",
                                    "dolor",
                                    "soluta"),
                                true,
                                true,
                                557.3302),
                        new TextSymbol("dicta sed dolor",
                            new MapColor(159, 38, 38),
                            new MapColor(68, 10, 93),
                                new Dimension(600.0475),
                            new MapFont(new Dimension(930.1858),
                                    "Garamond",
                                MapFontStyle.Italic,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                315.0736,
                            new MapColor(66, 245, 97),
                            new MapColor(0, 210, 61),
                                317.0775,
                            HorizontalAlignment.Center,
                                true,
                                265.2581,
                                new Dimension(737.6413),
                                true),
                        new PopupTemplate("corporis quia quia",
                                "eos",
                                ["qui"],
                            [new FieldInfo("createdAt",
                                    "et",
                                    "enim",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Var)],
                            [new AttachmentsPopupContent("aperiam velit nesciunt",
                                    "fuga et rerum",
                                    AttachmentsPopupContentDisplayType.Preview)],
                            [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "email",
                                    "aspernatur hic odit",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "group",
                                    "necessitatibus fugiat sint",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("et vitae non",
                                    "https://picsum.photos/640/480/?image=1024",
                                    "d3f832a0-32a2-6e08-8bc6-ec97a1c0ca0f",
                                    () => { Console.WriteLine("quibusdam"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "est"),
                                    new ActionButton("eum molestiae expedita",
                                        "https://picsum.photos/640/480/?image=901",
                                        "d8abccbe-e7f1-3968-2133-ae1b4885b1b3",
                                        () => { Console.WriteLine("consequuntur"); return Task.CompletedTask; },
                                        "id",
                                        true,
                                        true,
                                        true,
                                        "et")]),
                            new AttributesDictionary(),
                            true,
                            "nihil",
                            "voluptatem",
                            new GraphicOrigin(Guid.NewGuid(),
                                "eos",
                                6)),
                        new Thumbnail("recusandae",
                            "harum",
                            69.4204,
                            107.7983)),
                new FeatureTemplate("rem dolorem quod",
                    DrawingTool.AutoCompletePolygon,
                        "createdAt",
                    new Graphic(new Polygon([new MapPath([new MapPoint([340.5164]),
                                new MapPoint([602.5958])]),
                                new MapPath([new MapPoint([451.3898,
                                        667.1009]),
                                    new MapPoint([109.4616])])],
                            new SpatialReference(7,
                                    "est",
                                    "eligendi",
                                    "qui"),
                            new Point(93.6489,
                                    12.4077,
                                    28.8104,
                                    75.3515,
                                    672.9319,
                                new SpatialReference(4,
                                        "qui",
                                        "magnam",
                                        "delectus"),
                                    true,
                                    true,
                                    541.2395),
                                true,
                                true,
                                true),
                        new TextSymbol("accusamus dolor provident",
                            new MapColor(158, 167, 165),
                            new MapColor(198, 128, 140),
                                new Dimension(40.2211),
                            new MapFont(new Dimension(716.5392),
                                    "Palatino",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                296.3286,
                            new MapColor(58, 38, 198),
                            new MapColor(162, 61, 252),
                                980.1157,
                            HorizontalAlignment.Left,
                                true,
                                23.7767,
                                new Dimension(517.6837),
                                true),
                        new PopupTemplate("animi nostrum aut",
                                "sint",
                                ["tenetur"],
                            [new FieldInfo("group",
                                    "vitae",
                                    "at",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("email",
                                    "sapiente",
                                    "tenetur",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Count)],
                            [new RelationshipPopupContent("non dicta sit",
                                    "eaque excepturi",
                                    1,
                                    "aut",
                                [new RelatedRecordsInfoFieldOrder("molestiae",
                                    OrderBy.Desc)],
                                    1)],
                            [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "avatar",
                                    "nulla ut aut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "password",
                                    "quam et vel",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("omnis optio voluptates",
                                    "https://picsum.photos/640/480/?image=906",
                                    "31d75464-b2ee-05c0-50b1-c1e8c656acb7",
                                    () => { Console.WriteLine("voluptates"); return Task.CompletedTask; },
                                    "title",
                                    true,
                                    true,
                                    true,
                                    "optio"),
                                    new ActionButton("cupiditate accusantium alias",
                                        "https://picsum.photos/640/480/?image=274",
                                        "48c0fd99-3ea8-eaee-78fa-5f79e9654f26",
                                        () => { Console.WriteLine("a"); return Task.CompletedTask; },
                                        "createdAt",
                                        true,
                                        true,
                                        true,
                                        "quo")]),
                            new AttributesDictionary(),
                            true,
                            "doloribus",
                            "dolorum",
                            new GraphicOrigin(Guid.NewGuid(),
                                "cumque",
                                1)),
                        new Thumbnail("corporis",
                            "ratione",
                            199.2691,
                            23.1985))],
                    new CodedValueDomain<string>(),
                    "autem"),
            new FeatureType("35335480-6c55-53cb-ee78-b337bbee3920",
                    "category",
                [new FeatureTemplate("omnis perferendis quidem",
                    DrawingTool.Arrow,
                        "avatar",
                    new Graphic(new Point(-91.9561,
                                -4.9609,
                                -158.8157,
                                -66.0703,
                                771.3805,
                            new SpatialReference(8,
                                    "molestiae",
                                    "et",
                                    "maiores"),
                                true,
                                true,
                                258.9010),
                        new TextSymbol("in nostrum esse",
                            new MapColor(85, 28, 47),
                            new MapColor(216, 121, 115),
                                new Dimension(219.8138),
                            new MapFont(new Dimension(721.7729),
                                    "Verdana",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                414.9358,
                            new MapColor(148, 8, 190),
                            new MapColor(199, 242, 1),
                                404.9438,
                            HorizontalAlignment.Right,
                                true,
                                405.0746,
                                new Dimension(667.9332),
                                true),
                        new PopupTemplate("dolor laboriosam cum",
                                "iste",
                                ["maiores",
                                    "soluta"],
                            [new FieldInfo("group",
                                    "dolorem",
                                    "nihil",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Max)],
                            [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                        "natus",
                                        "totam voluptas doloremque"))],
                            [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "phone",
                                    "perferendis aut error",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "updatedAt",
                                    "corrupti omnis qui",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("enim quam error",
                                    "https://picsum.photos/640/480/?image=846",
                                    "863da8c4-cd39-76f7-af06-d9fa3dd2df38",
                                    () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "accusantium"),
                                    new ActionButton("ea culpa impedit",
                                        "https://picsum.photos/640/480/?image=498",
                                        "098df481-2f6e-5d72-1adf-5ede1f7f9b9a",
                                        () => { Console.WriteLine("corrupti"); return Task.CompletedTask; },
                                        "phone",
                                        true,
                                        true,
                                        true,
                                        "sint")]),
                            new AttributesDictionary(),
                            true,
                            "et",
                            "quas",
                            new GraphicOrigin(Guid.NewGuid(),
                                "nisi",
                                7)),
                        new Thumbnail("est",
                            "quibusdam",
                            283.4745,
                            146.7140))],
                    new CodedValueDomain<string>(),
                    "est")];
        await featureLayer.SetTypes(testTypes);
        var types = await featureLayer.GetTypes();
        Assert.AreEqual(testTypes, types);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 2, 20, 20, 30, 25),
                    new DateTime(2018, 3, 4, 2, 15, 31));
        await featureLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await featureLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
