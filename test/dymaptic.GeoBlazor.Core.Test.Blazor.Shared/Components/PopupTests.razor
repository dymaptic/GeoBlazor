@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanActivatePopupAction(Action renderHandler)
    {
        var callbackCalled = false;

        Task MeasureThis()
        {
            callbackCalled = true;
            return Task.CompletedTask;
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <PortalItem PortalItemId="f35ef07c9ed24020aadd65c8a65d3754" />
                    </Basemap>
                    <FeatureLayer Url="https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/TrailRuns/FeatureServer/0">
                        <PopupTemplate Title="Trail Run" StringContent="{name}">
                            <ActionButton Title="Measure Length"
                                          ActionId="measure-this"
                                          CallbackFunction="MeasureThis" />
                        </PopupTemplate>
                    </FeatureLayer>
                </Map>
            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("clickOnPopupAction");
        var tries = 10;
        while (!callbackCalled && (tries > 0))
        {
            await Task.Delay(1000);
            tries--;
        }
        Assert.IsTrue(callbackCalled);
    }

    [TestMethod]
    public async Task TestPopupActionsOnGraphicsGetDisposed(Action renderHandler)
    {
        int callbackCalled = 0;
        GraphicsLayer? layer = null;

        Task ButtonClicked()
        {
            callbackCalled++;
            return Task.CompletedTask;
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <PortalItem PortalItemId="f35ef07c9ed24020aadd65c8a65d3754" />
                    </Basemap>
                    <GraphicsLayer @ref="layer" />
                </Map>
            </MapView>);

        await WaitForMapToRender();
        
        ActionButton actionButton = new ActionButton("Button Click", null, "test-1", ButtonClicked);

        PopupTemplate popupTemplate = new PopupTemplate("PopupText", actions: [actionButton]);
        Graphic testGraphic = new(new Point(0, 0),
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10),
            popupTemplate);
        await layer!.Add(testGraphic);
        await AssertJavaScript("clickOnGraphicPopupAction");
        var tries = 10;
        while (callbackCalled < 1 && (tries > 0))
        {
            await Task.Delay(1000);
            tries--;
        }
        Assert.AreEqual(1, callbackCalled);
        await layer.Clear();
        testGraphic = new(new Point(0, 0),
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10),
            popupTemplate);
        await layer.Add(testGraphic);
        await AssertJavaScript("clickOnGraphicPopupAction");
        tries = 10;
        while (callbackCalled < 2 && (tries > 0))
        {
            await Task.Delay(1000);
            tries--;
        }

        await Task.Delay(1000);
        Assert.AreEqual(2, callbackCalled);
    }

    [TestMethod]
    public async Task TestPopupsWithFieldInfoContent(Action renderHandler)
    {
        Random random = new();
        List<Graphic> graphics = [];
        for (int i = 0; i < 100; i++)
        {
            Point location = new(random.Next(-180, 180), random.Next(-90, 90));
            Symbol symbol = new SimpleMarkerSymbol(new Outline(new MapColor("black"), 1), 
                new MapColor("green"));
            PopupTemplate popupTemplate = new("{Name}",
                content:
                [
                    new FieldsPopupContent(
                    [
                        new FieldInfo("Category"),
                        new FieldInfo("SubCategory"),
                        new FieldInfo("Latitude"),
                        new FieldInfo("Longitude"),
                        new FieldInfo("Quantity"),
                        new FieldInfo("Weight")
                    ])
                ]);
            AttributesDictionary attributes = new(new Dictionary<string, object?>
            {
                { "OBJECT_ID", random.Next(1, 1000) },
                { "Category", "shipment" },
                { "SubCategory", "stuff" },
                { "Name", "my stuff" },
                { "Latitude", location.Latitude },
                { "Longitude", location.Longitude },
                { "Quantity", random.Next(1, 100) },
                { "Weight", random.Next(1, 1000) }
            });

            Graphic graphic = new(location, symbol, popupTemplate, attributes);
            graphics.Add(graphic);
        }

        GraphicsLayer? layer = null;
        
        AddMapRenderFragment(
            @<MapView Class="map-view" OnViewRendered="renderHandler">
                <PopupWidget DefaultPopupTemplateEnabled="true" />
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisStreetsReliefBase" />
                    </Basemap>
                    <GraphicsLayer @ref="layer">

                    </GraphicsLayer>
                </Map>
            </MapView>);
        
        await WaitForMapToRender();
        
        Assert.IsNotNull(layer);
        
        await layer!.AddMany(graphics);
        
        await Task.Delay(500); // Allow time for the graphics to render

        await AssertJavaScript("assertGraphicExistsInLayer", args: [layer.Id, "point", 100]);
    }
}