@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Plus)"
                        Copyright="@("accusamus")"
                        Effect="@(new Effect("earum",
                            2338397.8749))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(21813228.4038)"
                        MinScale="@(28185.2504)"
                        Opacity="@(0.5941)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(327.1330)"
                        SubDomains="@(["ea",
                            "doloremque"])"
                        Title="@("velit consequuntur et")"
                        UrlTemplate="@("http://reginald.biz")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 11, 22, 2, 22, 12))"
                            End="@(new DateTime(2005, 2, 9, 10, 28, 55))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(417.8727)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "enim",
                                    27.4147,
                                    48043261.4471)])"
                            Origin="@(new Point(168.4248,
                                    -11.3746,
                                    45.0998,
                                    -45.6797,
                                    710.5500,
                                new SpatialReference(8,
                                        "repudiandae",
                                        "corrupti",
                                        "voluptatem"),
                                    true,
                                    true,
                                    315.5465))"
                            Size="@([5,
                                1])">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("ipsa")"
                                Wkt="@("sint")"
                                Wkt2="@("non")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(27.9285)"
                            Xmin="@(-138.8201)"
                            Ymax="@(-87.3411)"
                            Ymin="@(-53.6832)"
                            Zmax="@(54.0467)"
                            Zmin="@(232.6661)"
                            Mmax="@(122.4033)"
                            Mmin="@(122.1065)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("explicabo")"
                                Wkt="@("laborum")"
                                Wkt2="@("omnis")">
                            </SpatialReference>
                        </Extent>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(598.9042,
                44.2709,
                259.7742,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(941.0095,
                293.0258,
                594.5820);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.SourceOut;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(36.4502,
                    -25.9947,
                    62.6559,
                    22.3470,
                    271.2470,
                    387.9826,
                    489.2982,
                    63.2242,
                new SpatialReference(8,
                        "quo",
                        "qui",
                        "animi"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(617.0400,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(7,
                        "qui",
                        37.8040,
                        48028671.0596)],
                new Point(-47.7685,
                        89.6824,
                        1.3999,
                        61.8205,
                        421.8155,
                    new SpatialReference(3,
                            "et",
                            "aperiam",
                            "facere"),
                        true,
                        true,
                        885.1169),
                    [6],
                new SpatialReference(1,
                        "dicta",
                        "et",
                        "laboriosam"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 1, 6, 20, 3, 56),
                    new DateTime(2023, 3, 19, 12, 23, 47));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
