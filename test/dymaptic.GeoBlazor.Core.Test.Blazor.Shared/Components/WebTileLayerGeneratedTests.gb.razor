@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Multiply)"
                        Copyright="@("temporibus")"
                        Effect="@(new Effect("sapiente",
                            12950855.6877))"
                        FullExtent="@(new Extent(37.9730,
                                172.4858,
                                82.9797,
                                -89.4087,
                                903.4249,
                                406.6165,
                                340.8696,
                                880.0932,
                            new SpatialReference(6,
                                    "ea",
                                    "est",
                                    "omnis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(9882766.1721)"
                        MinScale="@(1765.8487)"
                        Opacity="@(0.1227)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(620.8302)"
                        SubDomains="@(["distinctio",
                            "placeat",
                            "quo",
                            "consequuntur"])"
                        Title="@("consequuntur amet quaerat")"
                        UrlTemplate="@("https://frederique.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2011, 6, 18, 8, 39, 23))"
                            End="@(new DateTime(2000, 8, 9, 11, 36, 37))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(114.4267)"
                            Format="@(TileInfoFormat.Mixed)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "ipsum",
                                    38.1018,
                                    4844342.9825),
                            new LOD(9,
                                    "et",
                                    93.3425,
                                    30440568.0684),
                            new LOD(7,
                                    "nihil",
                                    68.2830,
                                    30575170.0208)])"
                            Origin="@(new Point(-80.9378,
                                    -6.4491,
                                    65.4353,
                                    -23.0053,
                                    875.4117,
                                new SpatialReference(7,
                                        "eum",
                                        "impedit",
                                        "tempore"),
                                    true,
                                    true,
                                    420.8029))"
                            Size="@([5,
                                1,
                                2,
                                2])"
                            SpatialReference="@(new SpatialReference(6,
                                    "impedit",
                                    "et",
                                    "vel"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(742.8997,
                659.5876,
                935.7240,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(755.6565,
                387.9085,
                539.9313);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-106.5045,
                    -179.8090,
                    69.6045,
                    83.1768,
                    656.2359,
                    106.8435,
                    326.0610,
                    512.1575,
                new SpatialReference(6,
                        "quaerat",
                        "est",
                        "eligendi"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(223.1778,
                    TileInfoFormat.Jpg,
                    true,
                [new LOD(4,
                        "harum",
                        1.3866,
                        16920810.0068),
                new LOD(3,
                        "voluptas",
                        42.4519,
                        3068940.7221)],
                new Point(93.8960,
                        -88.4599,
                        -33.0228,
                        65.2967,
                        349.5793,
                    new SpatialReference(5,
                            "est",
                            "eum",
                            "consequuntur"),
                        true,
                        true,
                        761.7511),
                    [7,
                        2,
                        8,
                        4],
                new SpatialReference(7,
                        "tenetur",
                        "impedit",
                        "enim"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 9, 15, 4, 39, 18),
                    new DateTime(2010, 9, 11, 18, 18, 32));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
