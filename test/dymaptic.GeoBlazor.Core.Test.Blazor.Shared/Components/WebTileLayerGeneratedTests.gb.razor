@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.ColorBurn)"
                        Copyright="@("aut")"
                        Effect="@(new Effect("et",
                            12388685.2792))"
                        FullExtent="@(new Extent(26.9447,
                                -104.7543,
                                -12.3752,
                                -73.7029,
                                449.8683,
                                262.3210,
                                574.1868,
                                146.7196,
                            new SpatialReference(6,
                                    "tempore",
                                    "totam",
                                    "quia"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(47015710.1886)"
                        MinScale="@(4523.3102)"
                        Opacity="@(0.0386)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(783.1612)"
                        SubDomains="@(["corporis",
                            "ratione"])"
                        Title="@("et quibusdam consequuntur")"
                        UrlTemplate="@("http://jacky.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2019, 3, 3, 16, 3, 55))"
                            End="@(new DateTime(2009, 3, 19, 2, 11, 43))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(310.8794)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "quo",
                                    10.5140,
                                    631726.8882),
                            new LOD(9,
                                    "voluptatem",
                                    58.2023,
                                    36722407.3602),
                            new LOD(3,
                                    "consectetur",
                                    74.9399,
                                    46795473.0927),
                            new LOD(8,
                                    "eaque",
                                    33.3408,
                                    25010605.9066)])"
                            Origin="@(new Point(152.0745,
                                    62.5850,
                                    -114.7667,
                                    -80.5264,
                                    192.6395,
                                new SpatialReference(6,
                                        "temporibus",
                                        "quae",
                                        "reiciendis"),
                                    true,
                                    true,
                                    646.7062))"
                            Size="@([1,
                                9,
                                5,
                                1])"
                            SpatialReference="@(new SpatialReference(6,
                                    "qui",
                                    "esse",
                                    "similique"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("eum")"
                            ApiKey="@("quis")"
                            AvgRating="@(361.8689)"
                            Categories="@(["provident",
                                "veniam",
                                "autem",
                                "sapiente"])"
                            Created="@(new DateTime(2003, 1, 6, 11, 8, 27))"
                            Culture="@("non")"
                            Description="@("sunt impedit voluptate quisquam")"
                            Extent="@(new Extent(59.6655,
                                    44.1239,
                                    76.2077,
                                    -85.6344,
                                    550.0599,
                                    933.5076,
                                    757.6194,
                                    261.4122,
                                new SpatialReference(1,
                                        "tempore",
                                        "minima",
                                        "id"),
                                    true,
                                    true))"
                            GroupCategories="@(["atque",
                                "iste"])"
                            LicenseInfo="@("in")"
                            Modified="@(new DateTime(2003, 1, 18, 14, 52, 37))"
                            Name="@("updatedAt")"
                            NumComments="@(268.5517)"
                            NumRatings="@(538.5078)"
                            NumViews="@(978.7163)"
                            Owner="@("Emmet O'Reilly")"
                            OwnerFolder="@("Marta Marquardt")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Immediate,
                                    ["voluptates",
                                        "iste",
                                        "esse",
                                        "debitis"],
                                    "fugit",
                                    "dolorem",
                                    "quibusdam",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("non")"
                            Screenshots="@(["officia",
                                "nesciunt"])"
                            Size="@(2)"
                            Snippet="@("in")"
                            Tags="@(["debitis",
                                "ut",
                                "eveniet"])"
                            Title="@("delectus occaecati et")"
                            TypeKeywords="@(["non",
                                "in",
                                "consequatur",
                                "recusandae"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(428.3798,
                103.0649,
                40.4809,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(953.2043,
                360.6415,
                68.5376);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Lighten;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-136.1712,
                    53.3607,
                    -0.4485,
                    61.3753,
                    575.9364,
                    94.5734,
                    213.2738,
                    960.9295,
                new SpatialReference(3,
                        "id",
                        "ipsam",
                        "dignissimos"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "qui",
                    "ipsam",
                    943.3651,
                    ["et",
                        "et"],
                    new DateTime(2004, 11, 18, 0, 27, 8),
                    "cupiditate",
                    "tempora aliquid quo at rerum neque quis",
                new Extent(-60.8947,
                        4.4580,
                        21.7769,
                        85.3728,
                        545.9262,
                        398.5086,
                        80.7091,
                        526.1433,
                    new SpatialReference(7,
                            "inventore",
                            "distinctio",
                            "est"),
                        true,
                        true),
                    ["magni",
                        "aut",
                        "dicta",
                        "explicabo"],
                    "velit",
                    new DateTime(2017, 1, 23, 16, 50, 3),
                    "status",
                    822.8656);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(205.2294,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(3,
                        "quae",
                        45.6642,
                        8779991.2826),
                new LOD(3,
                        "est",
                        71.0021,
                        43968546.8696),
                new LOD(7,
                        "quaerat",
                        30.1487,
                        34159371.0338)],
                new Point(-29.7772,
                        26.3348,
                        102.9982,
                        85.3196,
                        93.8743,
                    new SpatialReference(9,
                            "et",
                            "ipsum",
                            "dolore"),
                        true,
                        true,
                        785.6549),
                    [1,
                        3,
                        3],
                new SpatialReference(5,
                        "repudiandae",
                        "eos",
                        "non"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 7, 27, 11, 22, 5),
                    new DateTime(2015, 2, 9, 7, 51, 20));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
