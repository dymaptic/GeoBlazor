@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.VividLight)"
                        Copyright="@("quo")"
                        Effect="@(new Effect("odit",
                            49719798.4397))"
                        FullExtent="@(new Extent(4.5164,
                                -59.7068,
                                -19.3391,
                                -7.5765,
                                338.4093,
                                577.6375,
                                614.5280,
                                107.5889,
                            new SpatialReference(7,
                                    "vero",
                                    "ut",
                                    "tempore"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(31258301.3677)"
                        MinScale="@(32637.7753)"
                        Opacity="@(0.3883)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(972.3895)"
                        SubDomains="@(["et",
                            "libero",
                            "quia",
                            "vel"])"
                        Title="@("sapiente aspernatur doloremque")"
                        UrlTemplate="@("http://reta.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2015, 8, 6, 3, 31, 3))"
                            End="@(new DateTime(2020, 9, 6, 9, 51, 43))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(927.5212)"
                            Format="@(TileInfoFormat.Tiff)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "est",
                                    71.6046,
                                    46654572.3846),
                            new LOD(6,
                                    "qui",
                                    90.6717,
                                    5894189.8407),
                            new LOD(4,
                                    "sit",
                                    60.5303,
                                    32417676.6929),
                            new LOD(9,
                                    "quisquam",
                                    53.1286,
                                    38204425.7698)])"
                            Origin="@(new Point(-148.7999,
                                    -35.0026,
                                    -55.8753,
                                    -69.7057,
                                    231.5010,
                                new SpatialReference(9,
                                        "sit",
                                        "magnam",
                                        "harum"),
                                    true,
                                    true,
                                    60.3923))"
                            Size="@([9,
                                4,
                                5])"
                            SpatialReference="@(new SpatialReference(2,
                                    "iure",
                                    "possimus",
                                    "quis"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("harum")"
                            ApiKey="@("commodi")"
                            AvgRating="@(317.9454)"
                            Categories="@(["eius",
                                "ducimus"])"
                            Created="@(new DateTime(2002, 4, 19, 15, 55, 41))"
                            Culture="@("et")"
                            Description="@("quidem laborum iusto error ut culpa")"
                            Extent="@(new Extent(-108.2578,
                                    60.1798,
                                    -18.5891,
                                    28.5995,
                                    519.4272,
                                    169.2639,
                                    180.1242,
                                    440.8182,
                                new SpatialReference(4,
                                        "consequatur",
                                        "reprehenderit",
                                        "iusto"),
                                    true,
                                    true))"
                            GroupCategories="@(["sunt",
                                "sit"])"
                            LicenseInfo="@("aut")"
                            Modified="@(new DateTime(2021, 11, 10, 7, 47, 56))"
                            Name="@("phone")"
                            NumComments="@(0.2285)"
                            NumRatings="@(578.4828)"
                            NumViews="@(686.5020)"
                            Owner="@("Glenna Ryan")"
                            OwnerFolder="@("Mia Schuster")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["magni",
                                        "veritatis",
                                        "minus",
                                        "dolorum"],
                                    "non",
                                    "numquam",
                                    "vitae",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("quaerat")"
                            Screenshots="@(["ex",
                                "temporibus",
                                "laboriosam",
                                "perspiciatis"])"
                            Size="@(3)"
                            Snippet="@("dolor")"
                            Tags="@(["laborum",
                                "qui",
                                "mollitia"])"
                            Title="@("et dolores inventore")"
                            TypeKeywords="@(["rerum",
                                "molestiae"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(901.8069,
                631.4403,
                626.6214,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(221.2992,
                213.8869,
                658.4269);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Color;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-12.2392,
                    36.2117,
                    5.9925,
                    82.6026,
                    93.7232,
                    435.2829,
                    196.5119,
                    685.7972,
                new SpatialReference(9,
                        "quos",
                        "molestiae",
                        "expedita"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "ut",
                    "possimus",
                    858.2908,
                    ["ducimus",
                        "asperiores",
                        "dolores",
                        "quae"],
                    new DateTime(2013, 2, 20, 14, 4, 49),
                    "in",
                    "id vel in voluptatibus omnis",
                new Extent(139.3413,
                        46.8687,
                        67.2811,
                        14.7248,
                        994.4735,
                        161.5767,
                        729.2865,
                        168.9727,
                    new SpatialReference(4,
                            "quisquam",
                            "et",
                            "tenetur"),
                        true,
                        true),
                    ["voluptas",
                        "beatae",
                        "sit"],
                    "quisquam",
                    new DateTime(2005, 9, 19, 3, 0, 15),
                    "status",
                    66.6601);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(594.6062,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(7,
                        "omnis",
                        46.0892,
                        12214481.2798)],
                new Point(-149.7751,
                        -57.3100,
                        118.7356,
                        17.0260,
                        633.9138,
                    new SpatialReference(9,
                            "in",
                            "consequatur",
                            "doloremque"),
                        true,
                        true,
                        139.6994),
                    [6,
                        9,
                        2,
                        6],
                new SpatialReference(9,
                        "rerum",
                        "consequatur",
                        "adipisci"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 9, 23, 6, 40, 1),
                    new DateTime(2008, 10, 23, 11, 40, 24));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
