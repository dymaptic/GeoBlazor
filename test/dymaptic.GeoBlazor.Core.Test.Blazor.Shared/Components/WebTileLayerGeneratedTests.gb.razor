@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Hue)"
                        Copyright="@("saepe")"
                        Effect="@(new Effect("dicta",
                            7990050.4039))"
                        FullExtent="@(new Extent(-61.1232,
                                93.2328,
                                12.4875,
                                -40.0784,
                                984.2064,
                                350.2981,
                                409.2851,
                                918.9212,
                            new SpatialReference(1,
                                    "consequuntur",
                                    "neque",
                                    "magni"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(42193629.8685)"
                        MinScale="@(43282.9107)"
                        Opacity="@(0.2266)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(394.3124)"
                        SubDomains="@(["perspiciatis",
                            "voluptate"])"
                        Title="@("nulla non ea")"
                        UrlTemplate="@("https://judge.name")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 6, 23, 14, 37, 35))"
                            End="@(new DateTime(2009, 8, 24, 7, 20, 37))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(678.9934)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "autem",
                                    9.7537,
                                    8443182.6369),
                            new LOD(4,
                                    "molestiae",
                                    38.4203,
                                    37149394.7478),
                            new LOD(5,
                                    "repellat",
                                    16.4520,
                                    20626692.1205)])"
                            Origin="@(new Point(177.9553,
                                    85.0510,
                                    -62.3770,
                                    17.0428,
                                    879.8966,
                                new SpatialReference(8,
                                        "excepturi",
                                        "atque",
                                        "deserunt"),
                                    true,
                                    true,
                                    607.3983))"
                            Size="@([1,
                                8,
                                8,
                                4])"
                            SpatialReference="@(new SpatialReference(4,
                                    "possimus",
                                    "quia",
                                    "doloribus"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("voluptatum")"
                            ApiKey="@("provident")"
                            AvgRating="@(572.1757)"
                            Categories="@(["temporibus",
                                "velit"])"
                            Created="@(new DateTime(2004, 11, 2, 21, 0, 3))"
                            Culture="@("quasi")"
                            Description="@("delectus dicta quasi atque excepturi nemo in")"
                            Extent="@(new Extent(98.2007,
                                    -1.2644,
                                    -82.4154,
                                    -26.1442,
                                    276.5312,
                                    208.6334,
                                    317.7208,
                                    528.5666,
                                new SpatialReference(3,
                                        "autem",
                                        "velit",
                                        "minima"),
                                    true,
                                    true))"
                            GroupCategories="@(["temporibus",
                                "occaecati",
                                "eligendi"])"
                            LicenseInfo="@("non")"
                            Modified="@(new DateTime(2002, 6, 14, 4, 0, 7))"
                            Name="@("updatedAt")"
                            NumComments="@(101.3905)"
                            NumRatings="@(557.4729)"
                            NumViews="@(524.1891)"
                            Owner="@("Luisa Schmidt")"
                            OwnerFolder="@("Elmore VonRueden")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["quaerat",
                                        "autem",
                                        "ut",
                                        "maxime"],
                                    "possimus",
                                    "libero",
                                    "voluptates",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("ad")"
                            Screenshots="@(["dolor",
                                "optio",
                                "atque"])"
                            Size="@(4)"
                            Snippet="@("sit")"
                            Tags="@(["voluptas",
                                "molestiae",
                                "omnis"])"
                            Title="@("nisi voluptatum aut")"
                            TypeKeywords="@(["ad",
                                "cum",
                                "eius"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(772.4676,
                353.1406,
                285.4075,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(148.8102,
                373.8152,
                85.6560);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Hue;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-42.9301,
                    -3.8644,
                    -63.0787,
                    -71.6480,
                    958.2348,
                    108.7431,
                    737.2695,
                    802.0464,
                new SpatialReference(4,
                        "consectetur",
                        "ea",
                        "dolor"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "cupiditate",
                    "debitis",
                    779.6258,
                    ["praesentium",
                        "dicta",
                        "non"],
                    new DateTime(2005, 1, 5, 1, 19, 28),
                    "vero",
                    "ea quis fuga dicta nam magnam laboriosam",
                new Extent(-80.0552,
                        -147.7440,
                        -86.8065,
                        79.7245,
                        326.7359,
                        817.9478,
                        347.5959,
                        90.4080,
                    new SpatialReference(1,
                            "libero",
                            "quo",
                            "aut"),
                        true,
                        true),
                    ["eos",
                        "hic",
                        "nisi",
                        "nulla"],
                    "et",
                    new DateTime(2015, 3, 14, 14, 32, 53),
                    "status",
                    615.0824);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(812.7765,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(4,
                        "et",
                        64.4405,
                        45498535.8113)],
                new Point(-67.8955,
                        -72.1345,
                        42.1887,
                        -15.6228,
                        911.2532,
                    new SpatialReference(1,
                            "fugit",
                            "ut",
                            "et"),
                        true,
                        true,
                        517.2440),
                    [7,
                        4,
                        7],
                new SpatialReference(1,
                        "quisquam",
                        "culpa",
                        "perspiciatis"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 9, 10, 22, 21, 19),
                    new DateTime(2005, 5, 2, 12, 34, 6));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
