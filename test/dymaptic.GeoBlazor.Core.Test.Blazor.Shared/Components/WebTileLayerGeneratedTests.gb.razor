@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Multiply)"
                        Copyright="@("quisquam")"
                        Effect="@(new Effect("possimus",
                            14757980.7698))"
                        FullExtent="@(new Extent(106.5394,
                                41.7077,
                                -2.9162,
                                -85.5829,
                                309.5683,
                                837.3445,
                                745.9008,
                                770.8274,
                            new SpatialReference(7,
                                    "provident",
                                    "aut",
                                    "sed"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(23379483.3695)"
                        MinScale="@(46110.0566)"
                        Opacity="@(0.4222)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(962.1672)"
                        SubDomains="@(["et",
                            "culpa",
                            "qui",
                            "mollitia"])"
                        Title="@("nemo ut consequatur")"
                        UrlTemplate="@("https://macy.org")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2022, 3, 18, 8, 56, 2))"
                            End="@(new DateTime(2017, 4, 15, 1, 39, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(51.1492)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "eos",
                                    68.4996,
                                    26567172.7296),
                            new LOD(1,
                                    "vero",
                                    50.1841,
                                    13361165.7451)])"
                            Origin="@(new Point(-168.7841,
                                    -82.6411,
                                    5.5814,
                                    -10.3139,
                                    277.8955,
                                new SpatialReference(5,
                                        "dolorum",
                                        "ut",
                                        "quia"),
                                    true,
                                    true,
                                    528.1000))"
                            Size="@([7,
                                2])"
                            SpatialReference="@(new SpatialReference(2,
                                    "vel",
                                    "et",
                                    "illum"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("quia")"
                            ApiKey="@("fugiat")"
                            AvgRating="@(779.8721)"
                            Categories="@(["molestiae",
                                "sit",
                                "nulla",
                                "illo"])"
                            Created="@(new DateTime(2003, 1, 11, 15, 28, 40))"
                            Culture="@("eveniet")"
                            Description="@("molestiae nostrum vel et vitae impedit veniam")"
                            Extent="@(new Extent(116.0544,
                                    12.3060,
                                    23.6827,
                                    62.4681,
                                    902.2575,
                                    106.3518,
                                    267.1922,
                                    850.7553,
                                new SpatialReference(1,
                                        "asperiores",
                                        "molestiae",
                                        "ipsa"),
                                    true,
                                    true))"
                            GroupCategories="@(["molestias",
                                "non"])"
                            LicenseInfo="@("dolores")"
                            Modified="@(new DateTime(2020, 3, 3, 16, 38, 46))"
                            Name="@("avatar")"
                            NumComments="@(568.4672)"
                            NumRatings="@(41.4132)"
                            NumViews="@(801.3684)"
                            Owner="@("Jovanny Johnston")"
                            OwnerFolder="@("Krystal Wehner")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Anonymous,
                                    ["corporis",
                                        "possimus",
                                        "voluptatibus"],
                                    "soluta",
                                    "aut",
                                    "et",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("voluptas")"
                            Screenshots="@(["libero",
                                "beatae"])"
                            Size="@(4)"
                            Snippet="@("aut")"
                            Tags="@(["et",
                                "culpa",
                                "et"])"
                            Title="@("perspiciatis recusandae non")"
                            TypeKeywords="@(["eligendi",
                                "quas"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(437.6914,
                347.7887,
                960.8387,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(143.0225,
                404.7410,
                944.3345);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Normal;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(100.3871,
                    28.2910,
                    87.7107,
                    -1.0500,
                    519.6230,
                    956.4804,
                    894.9803,
                    361.2837,
                new SpatialReference(3,
                        "suscipit",
                        "dolorum",
                        "ut"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "alias",
                    "non",
                    310.1388,
                    ["quasi",
                        "corporis",
                        "qui"],
                    new DateTime(2009, 2, 21, 3, 34, 45),
                    "delectus",
                    "sunt quibusdam necessitatibus at pariatur eveniet qui",
                new Extent(-7.4900,
                        -32.2211,
                        -53.5603,
                        1.8736,
                        137.3643,
                        594.5816,
                        852.8240,
                        34.9226,
                    new SpatialReference(1,
                            "aliquam",
                            "ut",
                            "qui"),
                        true,
                        true),
                    ["facere",
                        "aliquam"],
                    "quod",
                    new DateTime(2018, 5, 23, 2, 47, 52),
                    "createdAt",
                    304.1175);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(74.5033,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(4,
                        "suscipit",
                        58.5883,
                        3897607.3304),
                new LOD(1,
                        "omnis",
                        45.0732,
                        27871779.4916),
                new LOD(7,
                        "voluptatem",
                        32.0364,
                        21088829.3806),
                new LOD(7,
                        "sit",
                        47.2331,
                        7551450.5091)],
                new Point(-126.5773,
                        -0.7509,
                        -73.8471,
                        -6.9107,
                        425.8668,
                    new SpatialReference(3,
                            "commodi",
                            "culpa",
                            "magnam"),
                        true,
                        true,
                        806.0839),
                    [2,
                        3],
                new SpatialReference(3,
                        "voluptatem",
                        "et",
                        "et"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 3, 16, 18, 22, 18),
                    new DateTime(2006, 3, 12, 22, 30, 0));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
