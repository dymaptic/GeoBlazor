@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Multiply)"
                        Copyright="@("dolore")"
                        Effect="@(new Effect("necessitatibus",
                            15461745.3285))"
                        FullExtent="@(new Extent(-128.2905,
                                -163.9952,
                                -14.4037,
                                -39.4753,
                                313.8411,
                                362.3739,
                                941.5349,
                                35.1791,
                            new SpatialReference(5,
                                    "velit",
                                    "et",
                                    "dolor"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(47178585.9996)"
                        MinScale="@(9100.3867)"
                        Opacity="@(0.4962)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(511.5400)"
                        SubDomains="@(["dolores",
                            "dignissimos",
                            "voluptates",
                            "velit"])"
                        Title="@("nam provident sit")"
                        UrlTemplate="@("http://jammie.biz")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2021, 2, 6, 18, 42, 21))"
                            End="@(new DateTime(2005, 4, 7, 17, 25, 39))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(384.8925)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "at",
                                    21.1010,
                                    20524223.9478),
                            new LOD(5,
                                    "maxime",
                                    85.5039,
                                    31419160.8133),
                            new LOD(4,
                                    "consectetur",
                                    22.8154,
                                    31726436.3450),
                            new LOD(5,
                                    "ipsa",
                                    7.5030,
                                    31430982.8313)])"
                            Origin="@(new Point(79.7816,
                                    -6.9427,
                                    -159.1128,
                                    -38.3524,
                                    54.2347,
                                new SpatialReference(2,
                                        "aut",
                                        "sunt",
                                        "quod"),
                                    true,
                                    true,
                                    340.3482))"
                            Size="@([5,
                                6])"
                            SpatialReference="@(new SpatialReference(3,
                                    "recusandae",
                                    "officiis",
                                    "aut"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("sed")"
                            ApiKey="@("distinctio")"
                            AvgRating="@(605.0092)"
                            Categories="@(["qui",
                                "at",
                                "ut",
                                "est"])"
                            Created="@(new DateTime(2001, 2, 11, 6, 21, 46))"
                            Culture="@("sed")"
                            Description="@("possimus animi molestias inventore aperiam")"
                            Extent="@(new Extent(-71.8708,
                                    59.9088,
                                    -20.2326,
                                    51.3239,
                                    883.8165,
                                    979.6645,
                                    243.0857,
                                    755.1121,
                                new SpatialReference(6,
                                        "eius",
                                        "ea",
                                        "et"),
                                    true,
                                    true))"
                            GroupCategories="@(["a",
                                "dolor",
                                "praesentium",
                                "expedita"])"
                            LicenseInfo="@("ullam")"
                            Modified="@(new DateTime(2020, 1, 7, 18, 16, 45))"
                            Name="@("password")"
                            NumComments="@(533.8142)"
                            NumRatings="@(221.4745)"
                            NumViews="@(656.5047)"
                            Owner="@("Lane Skiles")"
                            OwnerFolder="@("Cullen Fay")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["ad",
                                        "velit"],
                                    "voluptas",
                                    "id",
                                    "ex",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("perferendis")"
                            Screenshots="@(["et",
                                "rerum"])"
                            Size="@(9)"
                            Snippet="@("est")"
                            Tags="@(["in",
                                "quas",
                                "rerum",
                                "voluptatibus"])"
                            Title="@("velit eius tenetur")"
                            TypeKeywords="@(["minima",
                                "in"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(134.2459,
                313.5604,
                711.5559,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(565.0152,
                667.9690,
                21.3969);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Screen;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-67.2278,
                    -156.1419,
                    -74.0301,
                    -82.9845,
                    50.5351,
                    468.6707,
                    620.5818,
                    377.6994,
                new SpatialReference(9,
                        "vel",
                        "dolore",
                        "commodi"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "ipsa",
                    "sed",
                    651.2513,
                    ["modi",
                        "commodi",
                        "non",
                        "tenetur"],
                    new DateTime(2015, 7, 14, 17, 36, 55),
                    "quia",
                    "at veritatis omnis temporibus culpa",
                new Extent(-173.0881,
                        27.4028,
                        66.4566,
                        -50.1716,
                        64.6934,
                        552.2980,
                        435.2961,
                        510.1336,
                    new SpatialReference(7,
                            "voluptates",
                            "dolorum",
                            "quia"),
                        true,
                        true),
                    ["enim",
                        "et",
                        "ad"],
                    "et",
                    new DateTime(2011, 4, 4, 1, 28, 29),
                    "id",
                    0.9957);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(584.6732,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(5,
                        "voluptas",
                        97.3716,
                        32886166.3269)],
                new Point(-143.6504,
                        -62.7563,
                        30.9075,
                        68.4843,
                        416.8883,
                    new SpatialReference(3,
                            "deleniti",
                            "est",
                            "omnis"),
                        true,
                        true,
                        181.1426),
                    [8,
                        9,
                        1],
                new SpatialReference(5,
                        "cum",
                        "quasi",
                        "et"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 11, 4, 1, 17, 11),
                    new DateTime(2008, 8, 3, 14, 52, 52));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
