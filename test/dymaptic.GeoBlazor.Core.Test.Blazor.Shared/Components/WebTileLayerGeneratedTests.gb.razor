@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.ColorBurn)"
                        Copyright="@("itaque")"
                        Effect="@(new Effect("sed",
                            4818707.0494))"
                        FullExtent="@(new Extent(-112.8780,
                                170.5941,
                                72.2457,
                                -64.4177,
                                347.5160,
                                893.1178,
                                950.8574,
                                962.2533,
                            new SpatialReference(1,
                                    "dolores",
                                    "autem",
                                    "consequatur"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(13303082.3484)"
                        MinScale="@(26370.0846)"
                        Opacity="@(0.0379)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(302.8294)"
                        SubDomains="@(["error",
                            "ut",
                            "voluptatem"])"
                        Title="@("amet labore odio")"
                        UrlTemplate="@("http://rasheed.biz")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2022, 2, 12, 16, 9, 51))"
                            End="@(new DateTime(2018, 2, 4, 2, 9, 52))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(898.0988)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "consequatur",
                                    54.1817,
                                    3939478.0320)])"
                            Origin="@(new Point(84.1233,
                                    57.9523,
                                    -18.9844,
                                    -34.8704,
                                    379.4610,
                                new SpatialReference(4,
                                        "ut",
                                        "et",
                                        "quo"),
                                    true,
                                    true,
                                    847.3771))"
                            Size="@([5,
                                4,
                                5])"
                            SpatialReference="@(new SpatialReference(1,
                                    "nesciunt",
                                    "nulla",
                                    "tenetur"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("sed")"
                            ApiKey="@("ea")"
                            AvgRating="@(243.3473)"
                            Categories="@(["neque",
                                "aliquam"])"
                            Created="@(new DateTime(2013, 11, 9, 15, 6, 40))"
                            Culture="@("voluptatem")"
                            Description="@("ipsam inventore sed et magnam")"
                            Extent="@(new Extent(-163.1423,
                                    16.5627,
                                    -18.8006,
                                    -19.8676,
                                    577.8972,
                                    512.9147,
                                    225.3867,
                                    71.1896,
                                new SpatialReference(6,
                                        "ut",
                                        "qui",
                                        "quo"),
                                    true,
                                    true))"
                            GroupCategories="@(["animi",
                                "eos",
                                "sequi"])"
                            LicenseInfo="@("porro")"
                            Modified="@(new DateTime(2006, 7, 3, 20, 54, 24))"
                            Name="@("createdAt")"
                            NumComments="@(704.3842)"
                            NumRatings="@(898.9927)"
                            NumViews="@(102.1362)"
                            Owner="@("Anika Bogan")"
                            OwnerFolder="@("Hannah Okuneva")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["nihil",
                                        "officiis",
                                        "eos"],
                                    "sit",
                                    "deserunt",
                                    "commodi",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("qui")"
                            Screenshots="@(["id",
                                "harum"])"
                            Size="@(2)"
                            Snippet="@("velit")"
                            Tags="@(["dignissimos",
                                "sit",
                                "autem"])"
                            Title="@("eos possimus accusamus")"
                            TypeKeywords="@(["numquam",
                                "est"])"
                            Url="@("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(668.7554,
                52.7559,
                693.7139,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(18.4806,
                107.7591,
                743.1522);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Minus;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(121.9282,
                    59.9016,
                    -67.4468,
                    -79.1006,
                    329.6446,
                    898.1679,
                    138.6655,
                    571.7160,
                new SpatialReference(5,
                        "autem",
                        "enim",
                        "perferendis"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "veritatis",
                    "laudantium",
                    17.0605,
                    ["sint",
                        "eligendi"],
                    new DateTime(2013, 6, 11, 2, 48, 10),
                    "quisquam",
                    "quisquam ad non eos facilis maiores adipisci",
                new Extent(-37.2375,
                        -153.7292,
                        -51.5986,
                        33.6094,
                        807.5833,
                        311.5887,
                        373.0460,
                        176.5303,
                    new SpatialReference(6,
                            "voluptatibus",
                            "ipsam",
                            "fugiat"),
                        true,
                        true),
                    ["quia",
                        "ratione",
                        "dolores",
                        "esse"],
                    "aut",
                    new DateTime(2021, 4, 24, 5, 40, 50),
                    "avatar",
                    649.2403);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(606.6456,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(8,
                        "eaque",
                        36.3638,
                        5332773.1316)],
                new Point(-168.2407,
                        28.5201,
                        -178.5759,
                        -18.0746,
                        913.6916,
                    new SpatialReference(9,
                            "corrupti",
                            "facere",
                            "suscipit"),
                        true,
                        true,
                        559.9517),
                    [4,
                        7,
                        2],
                new SpatialReference(5,
                        "et",
                        "beatae",
                        "eligendi"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 7, 2, 2, 33, 3),
                    new DateTime(2023, 8, 5, 22, 41, 11));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
