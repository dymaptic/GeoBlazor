@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Saturation)"
                        Copyright="@("nisi")"
                        Effect="@(new Effect("dolorem",
                            49874386.9881))"
                        FullExtent="@(new Extent(96.6826,
                                -1.8489,
                                11.7752,
                                -45.4501,
                                704.6407,
                                86.2809,
                                839.7401,
                                468.6355,
                            new SpatialReference(7,
                                    "ipsam",
                                    "illum",
                                    "ullam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(44141635.2953)"
                        MinScale="@(574.3072)"
                        Opacity="@(0.5892)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(427.2606)"
                        SubDomains="@(["omnis",
                            "dolor"])"
                        Title="@("iure qui natus")"
                        UrlTemplate="@("http://janae.info")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 1, 16, 13, 17, 31))"
                            End="@(new DateTime(2010, 4, 4, 0, 12, 48))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(475.8309)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "omnis",
                                    5.8124,
                                    1356931.6382)])"
                            Origin="@(new Point(-21.1638,
                                    67.1718,
                                    -76.8077,
                                    -39.9878,
                                    496.4727,
                                new SpatialReference(1,
                                        "laborum",
                                        "vel",
                                        "ratione"),
                                    true,
                                    true,
                                    922.8494))"
                            Size="@([1,
                                8])"
                            SpatialReference="@(new SpatialReference(8,
                                    "quia",
                                    "inventore",
                                    "culpa"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(654.0652,
                445.8691,
                819.5626,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(744.6187,
                498.9281,
                832.4881);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.HardLight;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(44.4921,
                    -10.0844,
                    -38.9452,
                    -51.0107,
                    243.9604,
                    243.0003,
                    154.8389,
                    156.2738,
                new SpatialReference(7,
                        "ipsum",
                        "odio",
                        "odit"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(99.2688,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(8,
                        "eveniet",
                        63.6971,
                        5540062.9954)],
                new Point(-119.3731,
                        -52.3233,
                        102.2969,
                        34.8326,
                        979.5186,
                    new SpatialReference(8,
                            "asperiores",
                            "minima",
                            "magni"),
                        true,
                        true,
                        42.6277),
                    [6,
                        9],
                new SpatialReference(9,
                        "tempore",
                        "qui",
                        "est"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 9, 16, 9, 17, 41),
                    new DateTime(2020, 10, 15, 13, 36, 48));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
