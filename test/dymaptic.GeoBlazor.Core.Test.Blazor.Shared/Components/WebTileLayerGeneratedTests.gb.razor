@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.DestinationAtop)"
                        Copyright="@("et")"
                        Effect="@(new Effect("blanditiis",
                            36239922.4855))"
                        FullExtent="@(new Extent(-127.9010,
                                -40.9590,
                                -62.1330,
                                44.9091,
                                58.9950,
                                152.0661,
                                683.7852,
                                574.3399,
                            new SpatialReference(6,
                                    "est",
                                    "ut",
                                    "quae"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(31895251.7085)"
                        MinScale="@(22494.6555)"
                        Opacity="@(0.4360)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(862.1054)"
                        SubDomains="@(["mollitia",
                            "cumque",
                            "et"])"
                        Title="@("dignissimos aliquid sed")"
                        UrlTemplate="@("https://andreane.name")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2018, 4, 4, 5, 47, 4))"
                            End="@(new DateTime(2021, 3, 3, 5, 3, 21))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(418.3732)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "nostrum",
                                    67.3941,
                                    15450168.6781),
                            new LOD(1,
                                    "nemo",
                                    95.7720,
                                    5421548.0086),
                            new LOD(9,
                                    "enim",
                                    27.3939,
                                    7858478.5530),
                            new LOD(2,
                                    "aut",
                                    22.7025,
                                    16862080.8191)])"
                            Origin="@(new Point(46.2784,
                                    -40.1447,
                                    -8.3926,
                                    53.4939,
                                    46.6934,
                                new SpatialReference(8,
                                        "aliquid",
                                        "minus",
                                        "exercitationem"),
                                    true,
                                    true,
                                    888.4851))"
                            Size="@([4,
                                1])"
                            SpatialReference="@(new SpatialReference(6,
                                    "nihil",
                                    "eum",
                                    "maxime"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(704.4400,
                948.8903,
                43.1723,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(695.6565,
                68.6995,
                168.3718);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Xor;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-103.2591,
                    -135.7025,
                    -16.9688,
                    -54.8846,
                    588.0133,
                    799.8525,
                    814.6955,
                    95.1239,
                new SpatialReference(6,
                        "aperiam",
                        "vel",
                        "error"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(983.2927,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(6,
                        "quia",
                        57.1777,
                        21017026.8237),
                new LOD(7,
                        "ipsa",
                        46.5641,
                        26576989.7810)],
                new Point(11.5808,
                        -77.8547,
                        -53.4899,
                        -53.5720,
                        223.7811,
                    new SpatialReference(5,
                            "praesentium",
                            "fugiat",
                            "vero"),
                        true,
                        true,
                        743.5917),
                    [4,
                        1,
                        2,
                        7],
                new SpatialReference(5,
                        "eius",
                        "cumque",
                        "cupiditate"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 7, 11, 5, 53, 48),
                    new DateTime(2001, 6, 24, 13, 45, 1));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
