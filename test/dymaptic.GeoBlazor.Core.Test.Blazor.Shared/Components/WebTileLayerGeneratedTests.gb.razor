@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Lighter)"
                        Copyright="@("nam")"
                        Effect="@(new Effect("in",
                            26320160.4838))"
                        FullExtent="@(new Extent(76.3119,
                                164.1550,
                                -76.8843,
                                66.0286,
                                403.3039,
                                3.3055,
                                685.6958,
                                964.7520,
                            new SpatialReference(9,
                                    "voluptatum",
                                    "vitae",
                                    "maiores"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(4427373.9650)"
                        MinScale="@(15137.0296)"
                        Opacity="@(0.7421)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(852.5950)"
                        SubDomains="@(["quidem",
                            "nam",
                            "itaque",
                            "impedit"])"
                        Title="@("aut distinctio voluptatibus")"
                        UrlTemplate="@("http://hazle.info")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2001, 5, 19, 4, 50, 51))"
                            End="@(new DateTime(2002, 1, 21, 18, 32, 6))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(685.2483)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "labore",
                                    14.1211,
                                    11556908.5638)])"
                            Origin="@(new Point(-8.0140,
                                    64.4107,
                                    156.7469,
                                    81.4651,
                                    343.9411,
                                new SpatialReference(2,
                                        "rem",
                                        "minima",
                                        "harum"),
                                    true,
                                    true,
                                    631.7405))"
                            Size="@([1,
                                4,
                                9])"
                            SpatialReference="@(new SpatialReference(2,
                                    "recusandae",
                                    "dolores",
                                    "sint"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(390.2782,
                199.6444,
                26.3081,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(176.7020,
                400.7578,
                340.7848);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-108.1638,
                    162.5440,
                    -67.2982,
                    23.8788,
                    773.4183,
                    446.4945,
                    178.9522,
                    665.2106,
                new SpatialReference(1,
                        "autem",
                        "aut",
                        "dolorum"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(374.2055,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(4,
                        "enim",
                        60.9990,
                        10553172.6461),
                new LOD(6,
                        "et",
                        4.0224,
                        23928845.0861)],
                new Point(-61.9541,
                        84.9724,
                        -9.2425,
                        1.5245,
                        373.4998,
                    new SpatialReference(1,
                            "consequatur",
                            "laudantium",
                            "eius"),
                        true,
                        true,
                        59.9108),
                    [7,
                        3,
                        3,
                        7],
                new SpatialReference(8,
                        "consequuntur",
                        "qui",
                        "temporibus"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 11, 26, 22, 43, 54),
                    new DateTime(2002, 4, 22, 11, 50, 31));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
