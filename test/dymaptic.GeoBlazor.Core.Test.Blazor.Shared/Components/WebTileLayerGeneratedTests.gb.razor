@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Color)"
                        Copyright="@("dolorem")"
                        Effect="@(new Effect("amet",
                            21387461.6982))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(34248754.8955)"
                        MinScale="@(12606.6331)"
                        Opacity="@(0.3780)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(901.1734)"
                        SubDomains="@(["debitis"])"
                        Title="@("dolor voluptas porro")"
                        UrlTemplate="@("https://susie.info")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2022, 8, 4, 17, 57, 37))"
                            End="@(new DateTime(2011, 9, 25, 20, 41, 20))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(703.7910)"
                            Format="@(TileInfoFormat.Emf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "voluptatum",
                                    15.9409,
                                    25961948.0336)])"
                            Origin="@(new Point(-167.8190,
                                    -59.1207,
                                    88.4515,
                                    -70.9191,
                                    224.4319,
                                new SpatialReference(3,
                                        "quo",
                                        "nihil",
                                        "exercitationem"),
                                    true,
                                    true,
                                    409.8583))"
                            Size="@([8])">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("nesciunt")"
                                Wkt2="@("dolore")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-64.1429)"
                            Xmin="@(109.6449)"
                            Ymax="@(31.4706)"
                            Ymin="@(-42.1320)"
                            Zmax="@(657.2338)"
                            Zmin="@(315.7079)"
                            Mmax="@(559.4437)"
                            Mmin="@(568.3668)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(7)"
                                ImageCoordinateSystem="@("ratione")"
                                Wkt="@("nam")"
                                Wkt2="@("quia")">
                            </SpatialReference>
                        </Extent>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(667.3443,
                846.4274,
                503.8945,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(988.4529,
                844.5139,
                51.2219);
        Assert.IsNotNull(getTileUrlMethodResult);
        await webTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-32.1344,
                    157.8993,
                    -33.9243,
                    -31.1770,
                    387.4102,
                    773.4929,
                    109.8008,
                    394.8403,
                new SpatialReference(7,
                        "expedita",
                        "odit",
                        "enim"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(961.1242,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(9,
                        "sit",
                        96.6366,
                        12047957.7494)],
                new Point(74.3143,
                        38.8834,
                        -26.9387,
                        -66.7214,
                        659.5501,
                    new SpatialReference(8,
                            "magni",
                            "et",
                            "debitis"),
                        true,
                        true,
                        813.2401),
                    [1],
                new SpatialReference(2,
                        "est",
                        "illo",
                        "iste"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 3, 12, 14, 30, 38),
                    new DateTime(2021, 3, 7, 14, 43, 7));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
