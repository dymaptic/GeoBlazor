@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.ColorDodge)"
                        Copyright="@("perferendis")"
                        Effect="@(new Effect("hic",
                            14151703.8180))"
                        FullExtent="@(new Extent(77.5157,
                                -88.4590,
                                37.4087,
                                -25.6797,
                                766.7830,
                                347.2404,
                                755.7173,
                                70.3170,
                            new SpatialReference(8,
                                    "itaque",
                                    "nihil",
                                    "voluptatum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(13455189.4742)"
                        MinScale="@(32391.3546)"
                        Opacity="@(0.9798)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(236.0385)"
                        SubDomains="@(["consectetur",
                            "enim"])"
                        Title="@("rerum reiciendis commodi")"
                        UrlTemplate="@("https://eriberto.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2012, 10, 25, 8, 31, 12))"
                            End="@(new DateTime(2002, 11, 12, 10, 40, 9))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(790.4881)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "sapiente",
                                    34.2465,
                                    47788460.4411),
                            new LOD(4,
                                    "aut",
                                    63.3560,
                                    49529916.3780)])"
                            Origin="@(new Point(32.0429,
                                    -69.8128,
                                    4.1685,
                                    -84.3876,
                                    278.8758,
                                new SpatialReference(8,
                                        "voluptas",
                                        "officiis",
                                        "aliquid"),
                                    true,
                                    true,
                                    924.3072))"
                            Size="@([4,
                                5,
                                2])"
                            SpatialReference="@(new SpatialReference(2,
                                    "eveniet",
                                    "magni",
                                    "voluptas"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(848.3943,
                579.7985,
                401.7026,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(148.1467,
                396.8175,
                973.6364);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.SourceAtop;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(54.8037,
                    157.6074,
                    37.9352,
                    75.0704,
                    252.7344,
                    361.2332,
                    757.3760,
                    503.6548,
                new SpatialReference(5,
                        "doloribus",
                        "ut",
                        "quas"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(219.1502,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(3,
                        "error",
                        55.0529,
                        2572480.0947)],
                new Point(-140.2394,
                        -19.5709,
                        82.7775,
                        -58.6054,
                        665.4491,
                    new SpatialReference(1,
                            "illum",
                            "cum",
                            "similique"),
                        true,
                        true,
                        666.9713),
                    [3,
                        5,
                        7],
                new SpatialReference(6,
                        "veniam",
                        "architecto",
                        "aut"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 1, 22, 9, 34, 20),
                    new DateTime(2005, 9, 10, 9, 4, 45));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
