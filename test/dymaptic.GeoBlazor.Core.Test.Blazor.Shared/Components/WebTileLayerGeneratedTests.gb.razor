@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Multiply)"
                        Copyright="@("dicta")"
                        Effect="@(new Effect("culpa",
                            29563506.6034))"
                        FullExtent="@(new Extent(118.5696,
                                179.3648,
                                -62.8885,
                                22.9275,
                                386.2922,
                                981.2069,
                                422.7318,
                                510.0878,
                            new SpatialReference(6,
                                    "aut",
                                    "quis",
                                    "fugit"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(45664613.3575)"
                        MinScale="@(5224.5208)"
                        Opacity="@(0.5020)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(739.7061)"
                        SubDomains="@(["sint",
                            "esse"])"
                        Title="@("placeat ut sint")"
                        UrlTemplate="@("https://autumn.info")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2002, 4, 23, 22, 56, 48))"
                            End="@(new DateTime(2016, 8, 11, 9, 51, 20))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(783.0019)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "velit",
                                    55.4181,
                                    11390873.8972),
                            new LOD(2,
                                    "laborum",
                                    85.8194,
                                    26369477.7187),
                            new LOD(6,
                                    "veritatis",
                                    39.6393,
                                    4086823.9976)])"
                            Origin="@(new Point(36.4489,
                                    -70.6093,
                                    13.3622,
                                    2.3458,
                                    783.3780,
                                new SpatialReference(9,
                                        "ducimus",
                                        "voluptatem",
                                        "aspernatur"),
                                    true,
                                    true,
                                    256.1142))"
                            Size="@([8,
                                6])"
                            SpatialReference="@(new SpatialReference(6,
                                    "at",
                                    "asperiores",
                                    "doloremque"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("aut")"
                            ApiKey="@("cumque")"
                            AvgRating="@(928.8570)"
                            Categories="@(["quibusdam",
                                "eaque"])"
                            Created="@(new DateTime(2021, 3, 11, 3, 1, 4))"
                            Culture="@("cum")"
                            Description="@("et doloribus quia qui rerum")"
                            Extent="@(new Extent(-37.2018,
                                    -123.1321,
                                    -43.0907,
                                    42.6353,
                                    654.2313,
                                    504.1973,
                                    626.6740,
                                    46.0270,
                                new SpatialReference(7,
                                        "maxime",
                                        "incidunt",
                                        "aut"),
                                    true,
                                    true))"
                            GroupCategories="@(["aspernatur",
                                "nam",
                                "est",
                                "voluptas"])"
                            LicenseInfo="@("commodi")"
                            Modified="@(new DateTime(2004, 3, 27, 12, 10, 21))"
                            Name="@("email")"
                            NumComments="@(417.5841)"
                            NumRatings="@(476.9954)"
                            NumViews="@(732.6004)"
                            Owner="@("Nestor Reynolds")"
                            OwnerFolder="@("Alvah Bradtke")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Immediate,
                                    ["error",
                                        "rerum",
                                        "suscipit"],
                                    "quaerat",
                                    "debitis",
                                    "est",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("accusamus")"
                            Screenshots="@(["tempora",
                                "eius"])"
                            Size="@(6)"
                            Snippet="@("repellendus")"
                            Tags="@(["et",
                                "quo"])"
                            Title="@("ipsum omnis cumque")"
                            TypeKeywords="@(["unde",
                                "odit",
                                "similique",
                                "in"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(235.7229,
                562.0566,
                662.2977,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(46.2257,
                326.4972,
                555.9010);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Multiply;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-79.1108,
                    -158.5782,
                    63.7322,
                    60.0493,
                    168.1400,
                    682.6631,
                    700.9060,
                    724.2359,
                new SpatialReference(5,
                        "labore",
                        "nostrum",
                        "exercitationem"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "hic",
                    "in",
                    169.3200,
                    ["esse",
                        "sit",
                        "deleniti"],
                    new DateTime(2001, 6, 18, 7, 40, 27),
                    "qui",
                    "magnam beatae vel autem vel in cumque",
                new Extent(56.4327,
                        73.3540,
                        -80.5701,
                        49.3428,
                        343.2933,
                        524.0250,
                        533.1314,
                        23.8594,
                    new SpatialReference(7,
                            "aut",
                            "facere",
                            "possimus"),
                        true,
                        true),
                    ["et",
                        "nulla",
                        "fugit"],
                    "doloribus",
                    new DateTime(2013, 11, 8, 20, 7, 32),
                    "comment",
                    266.3897);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(998.3286,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(7,
                        "nostrum",
                        88.0419,
                        47944063.5477),
                new LOD(4,
                        "velit",
                        42.1498,
                        32159596.1280),
                new LOD(8,
                        "sunt",
                        47.3146,
                        48305045.0720),
                new LOD(2,
                        "itaque",
                        98.1029,
                        39286731.0486)],
                new Point(-119.7813,
                        21.7067,
                        -25.3369,
                        -81.9139,
                        569.7233,
                    new SpatialReference(5,
                            "ex",
                            "quod",
                            "sit"),
                        true,
                        true,
                        860.9959),
                    [8,
                        5,
                        8,
                        9],
                new SpatialReference(4,
                        "commodi",
                        "nihil",
                        "exercitationem"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 5, 4, 12, 30, 18),
                    new DateTime(2012, 9, 3, 18, 14, 47));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
