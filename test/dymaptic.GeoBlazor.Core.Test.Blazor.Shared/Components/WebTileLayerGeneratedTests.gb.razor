@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Saturation)"
                        Copyright="@("perspiciatis")"
                        Effect="@(new Effect("expedita",
                            9700850.6807))"
                        FullExtent="@(new Extent(-85.4053,
                                -138.7397,
                                45.3796,
                                57.2337,
                                333.5581,
                                461.2053,
                                610.6184,
                                477.0885,
                            new SpatialReference(3,
                                    "accusantium",
                                    "error",
                                    "officia"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(9335616.2776)"
                        MinScale="@(338.6285)"
                        Opacity="@(0.0439)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(718.8118)"
                        SubDomains="@(["nihil",
                            "odio"])"
                        Title="@("voluptatum laboriosam aliquam")"
                        UrlTemplate="@("http://isobel.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 11, 8, 7, 9, 1))"
                            End="@(new DateTime(2023, 6, 13, 17, 1, 37))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(82.2455)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "quis",
                                    42.4800,
                                    10411220.5521),
                            new LOD(3,
                                    "voluptas",
                                    27.7637,
                                    16020479.6367),
                            new LOD(2,
                                    "libero",
                                    99.2445,
                                    2079275.1793),
                            new LOD(6,
                                    "ut",
                                    19.4039,
                                    31559384.2148)])"
                            Origin="@(new Point(-158.1029,
                                    20.9957,
                                    -67.5263,
                                    -30.2060,
                                    79.8715,
                                new SpatialReference(8,
                                        "perferendis",
                                        "dolore",
                                        "eos"),
                                    true,
                                    true,
                                    165.8508))"
                            Size="@([8,
                                6])"
                            SpatialReference="@(new SpatialReference(9,
                                    "consequatur",
                                    "nostrum",
                                    "et"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(236.7582,
                789.2442,
                805.5203,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(876.8072,
                720.9345,
                181.3800);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(51.4319,
                    -2.5386,
                    -27.8044,
                    -5.9832,
                    77.0546,
                    42.1820,
                    183.5775,
                    947.4905,
                new SpatialReference(3,
                        "eum",
                        "beatae",
                        "qui"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(779.0869,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(1,
                        "iure",
                        83.6768,
                        32488344.0146),
                new LOD(3,
                        "consequatur",
                        22.4027,
                        17761024.9207)],
                new Point(-141.1034,
                        -24.0241,
                        -36.4746,
                        32.7208,
                        837.0408,
                    new SpatialReference(8,
                            "rerum",
                            "doloribus",
                            "itaque"),
                        true,
                        true,
                        540.3903),
                    [6,
                        5,
                        4,
                        8],
                new SpatialReference(6,
                        "et",
                        "placeat",
                        "eos"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 6, 2, 10, 1, 26),
                    new DateTime(2013, 9, 20, 15, 47, 53));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
