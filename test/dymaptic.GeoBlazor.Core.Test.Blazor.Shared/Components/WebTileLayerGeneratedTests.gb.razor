@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Luminosity)"
                        Copyright="@("voluptatem")"
                        Effect="@(new Effect("numquam",
                            8557768.6723))"
                        FullExtent="@(new Extent(-41.1526,
                                152.6915,
                                19.1406,
                                -54.8581,
                                913.1327,
                                602.0220,
                                199.7266,
                                577.4362,
                            new SpatialReference(2,
                                    "voluptas",
                                    "quas",
                                    "omnis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(895690.6069)"
                        MinScale="@(28941.5375)"
                        Opacity="@(0.6215)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(817.7627)"
                        SubDomains="@(["enim",
                            "dicta",
                            "nobis",
                            "blanditiis"])"
                        Title="@("amet quam ut")"
                        UrlTemplate="@("https://hugh.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 4, 27, 21, 0, 3))"
                            End="@(new DateTime(2022, 5, 6, 12, 16, 48))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(960.9456)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "deleniti",
                                    91.8960,
                                    7572523.6883),
                            new LOD(8,
                                    "dolores",
                                    36.3465,
                                    31278739.6463)])"
                            Origin="@(new Point(-155.1296,
                                    33.2505,
                                    87.8169,
                                    -58.3254,
                                    902.0212,
                                new SpatialReference(4,
                                        "aut",
                                        "itaque",
                                        "ad"),
                                    true,
                                    true,
                                    70.4641))"
                            Size="@([1,
                                8])"
                            SpatialReference="@(new SpatialReference(2,
                                    "accusamus",
                                    "repellat",
                                    "ut"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("provident")"
                            ApiKey="@("quos")"
                            AvgRating="@(263.4065)"
                            Categories="@(["et",
                                "consequatur",
                                "et",
                                "libero"])"
                            Created="@(new DateTime(2016, 10, 23, 8, 33, 37))"
                            Culture="@("quia")"
                            Description="@("doloremque voluptates cumque quasi")"
                            Extent="@(new Extent(-75.6143,
                                    142.7482,
                                    3.3123,
                                    -39.3285,
                                    417.4112,
                                    225.2400,
                                    736.5123,
                                    496.2922,
                                new SpatialReference(3,
                                        "dolores",
                                        "aut",
                                        "deleniti"),
                                    true,
                                    true))"
                            GroupCategories="@(["quo",
                                "eos"])"
                            LicenseInfo="@("magnam")"
                            Modified="@(new DateTime(2009, 1, 18, 20, 6, 47))"
                            Name="@("title")"
                            NumComments="@(326.7243)"
                            NumRatings="@(601.4372)"
                            NumViews="@(888.3430)"
                            Owner="@("Dwight Beer")"
                            OwnerFolder="@("Jordane Bashirian")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["ipsam",
                                        "deserunt",
                                        "eum",
                                        "ut"],
                                    "voluptatem",
                                    "quia",
                                    "quia",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("quod")"
                            Screenshots="@(["qui",
                                "esse"])"
                            Size="@(9)"
                            Snippet="@("quia")"
                            Tags="@(["qui",
                                "eum",
                                "consequatur"])"
                            Title="@("nostrum voluptas nisi")"
                            TypeKeywords="@(["harum",
                                "accusamus",
                                "aut",
                                "ea"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(811.4823,
                945.4136,
                175.8316,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(791.8558,
                819.3295,
                951.5658);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-1.2948,
                    -105.3929,
                    -68.9466,
                    -51.0817,
                    733.2121,
                    18.0151,
                    687.8171,
                    843.4731,
                new SpatialReference(5,
                        "mollitia",
                        "perspiciatis",
                        "fuga"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "mollitia",
                    "accusantium",
                    96.2494,
                    ["velit",
                        "sed"],
                    new DateTime(2009, 7, 3, 2, 17, 35),
                    "molestiae",
                    "sunt dolores sint facilis",
                new Extent(-53.8906,
                        -20.6509,
                        -78.0735,
                        56.5223,
                        882.2745,
                        75.2478,
                        368.9859,
                        540.3072,
                    new SpatialReference(5,
                            "maxime",
                            "consectetur",
                            "quaerat"),
                        true,
                        true),
                    ["voluptas",
                        "eum",
                        "veniam",
                        "ipsum"],
                    "ullam",
                    new DateTime(2000, 5, 20, 19, 30, 4),
                    "avatar",
                    186.9093);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(866.2647,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(2,
                        "dolores",
                        57.1447,
                        42918821.6070),
                new LOD(4,
                        "est",
                        14.0050,
                        21037885.7096),
                new LOD(5,
                        "pariatur",
                        76.1100,
                        31073891.4176)],
                new Point(174.9103,
                        57.8389,
                        143.7505,
                        7.8393,
                        846.7693,
                    new SpatialReference(9,
                            "hic",
                            "sunt",
                            "eius"),
                        true,
                        true,
                        399.0866),
                    [6,
                        3],
                new SpatialReference(4,
                        "unde",
                        "eum",
                        "quisquam"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 7, 7, 3, 2, 8),
                    new DateTime(2019, 6, 4, 7, 46, 55));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
