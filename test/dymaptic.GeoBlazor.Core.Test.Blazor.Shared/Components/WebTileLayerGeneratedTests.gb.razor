@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.HardLight)"
                        Copyright="@("enim")"
                        Effect="@(new Effect("a",
                            39136717.2067))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(7902756.7628)"
                        MinScale="@(11719.2685)"
                        Opacity="@(0.4127)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(835.4441)"
                        SubDomains="@(["ab"])"
                        Title="@("veniam quasi blanditiis")"
                        UrlTemplate="@("http://ally.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2019, 2, 27, 12, 9, 20))"
                            End="@(new DateTime(2013, 4, 15, 9, 44, 18))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(345.2445)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "nulla",
                                    55.1720,
                                    36489430.7013)])"
                            Origin="@(new Point(-102.7881,
                                    -42.6867,
                                    -142.1428,
                                    57.2867,
                                    930.4462,
                                new SpatialReference(3,
                                        "et",
                                        "culpa",
                                        "facilis"),
                                    true,
                                    true,
                                    106.2252))"
                            Size="@([9])">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("exercitationem")"
                                Wkt2="@("id")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(109.4505)"
                            Xmin="@(-171.8447)"
                            Ymax="@(13.0913)"
                            Ymin="@(69.1181)"
                            Zmax="@(2.6386)"
                            Zmin="@(331.5420)"
                            Mmax="@(391.3868)"
                            Mmin="@(437.1589)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("quia")"
                                Wkt="@("quibusdam")"
                                Wkt2="@("dicta")">
                            </SpatialReference>
                        </Extent>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(949.7751,
                665.7678,
                616.2770,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(335.7741,
                792.4482,
                692.9821);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Normal;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(9.9290,
                    172.4681,
                    48.5230,
                    -30.7904,
                    254.8833,
                    672.4194,
                    707.7544,
                    191.5833,
                new SpatialReference(1,
                        "in",
                        "perspiciatis",
                        "quibusdam"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(685.6466,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(4,
                        "necessitatibus",
                        23.7665,
                        9676457.8813)],
                new Point(172.9817,
                        -64.3106,
                        -3.2893,
                        -32.0608,
                        177.5106,
                    new SpatialReference(5,
                            "ratione",
                            "et",
                            "ducimus"),
                        true,
                        true,
                        945.6669),
                    [3],
                new SpatialReference(9,
                        "ea",
                        "et",
                        "tenetur"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 5, 12, 15, 19, 51),
                    new DateTime(2009, 10, 16, 6, 53, 32));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
