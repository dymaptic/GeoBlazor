@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Lighten)"
                        Copyright="@("eos")"
                        Effect="@(new Effect("temporibus",
                            25239313.6575))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(10990958.7036)"
                        MinScale="@(20561.2320)"
                        Opacity="@(0.1021)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(734.2687)"
                        SubDomains="@(["hic",
                            "recusandae"])"
                        Title="@("deleniti provident iure")"
                        UrlTemplate="@("https://dangelo.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 6, 12, 8, 39, 51))"
                            End="@(new DateTime(2000, 3, 19, 6, 38, 51))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(119.9968)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "et",
                                    34.4431,
                                    43472287.1196),
                            new LOD(2,
                                    "et",
                                    17.7155,
                                    22484345.3529)])"
                            Origin="@(new Point(53.8546,
                                    -53.4232,
                                    59.4512,
                                    82.4380,
                                    276.4328,
                                new SpatialReference(3,
                                        "sunt",
                                        "qui",
                                        "maiores"),
                                    true,
                                    true,
                                    876.3859))"
                            Size="@([8])">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("aliquam")"
                                Wkt="@("quos")"
                                Wkt2="@("dolor")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-44.9760)"
                            Xmin="@(160.8723)"
                            Ymax="@(18.1850)"
                            Ymin="@(-74.3504)"
                            Zmax="@(834.4730)"
                            Zmin="@(503.3946)"
                            Mmax="@(996.1546)"
                            Mmin="@(401.2100)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("a")"
                                Wkt="@("quia")"
                                Wkt2="@("deserunt")">
                            </SpatialReference>
                        </Extent>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(2.4889,
                390.7664,
                23.2413,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(238.6328,
                189.6526,
                990.6507);
        Assert.IsNotNull(getTileUrlMethodResult);
        await webTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.Plus;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(109.0381,
                    -48.9122,
                    -73.9821,
                    13.3294,
                    616.1721,
                    675.2381,
                    219.0961,
                    691.1517,
                new SpatialReference(5,
                        "voluptatibus",
                        "enim",
                        "consequuntur"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(152.0690,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(1,
                        "et",
                        26.0245,
                        3466136.5522),
                new LOD(9,
                        "soluta",
                        16.3407,
                        15435188.2279)],
                new Point(-99.1895,
                        79.4235,
                        21.4141,
                        29.5839,
                        784.1341,
                    new SpatialReference(4,
                            "nemo",
                            "fugiat",
                            "in"),
                        true,
                        true,
                        941.9212),
                    [1],
                new SpatialReference(7,
                        "et",
                        "nihil",
                        "repudiandae"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 8, 13, 11, 40, 12),
                    new DateTime(2013, 3, 10, 2, 28, 45));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
