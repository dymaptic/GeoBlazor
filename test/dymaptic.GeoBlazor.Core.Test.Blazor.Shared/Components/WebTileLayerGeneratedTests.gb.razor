@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Exclusion)"
                        Copyright="@("nulla")"
                        Effect="@(new Effect("soluta",
                            43665383.8197))"
                        FullExtent="@(new Extent(71.4587,
                                -18.0641,
                                26.4228,
                                -68.0851,
                                35.5039,
                                304.9024,
                                929.0545,
                                197.2805,
                            new SpatialReference(1,
                                    "eius",
                                    "odio",
                                    "quis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(11398962.5191)"
                        MinScale="@(41767.6896)"
                        Opacity="@(0.0696)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(478.7741)"
                        SubDomains="@(["necessitatibus",
                            "ex",
                            "ullam",
                            "officiis"])"
                        Title="@("assumenda assumenda architecto")"
                        UrlTemplate="@("http://cortez.info")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2017, 11, 16, 20, 11, 26))"
                            End="@(new DateTime(2005, 3, 20, 17, 32, 39))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(724.8706)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "iusto",
                                    16.0550,
                                    43888397.3014),
                            new LOD(7,
                                    "voluptas",
                                    53.0389,
                                    7645607.8696)])"
                            Origin="@(new Point(166.5332,
                                    30.0019,
                                    -78.7015,
                                    2.8813,
                                    233.0674,
                                new SpatialReference(8,
                                        "perspiciatis",
                                        "expedita",
                                        "a"),
                                    true,
                                    true,
                                    57.6724))"
                            Size="@([4,
                                6,
                                7])"
                            SpatialReference="@(new SpatialReference(5,
                                    "in",
                                    "veritatis",
                                    "incidunt"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("voluptatibus")"
                            ApiKey="@("et")"
                            AvgRating="@(325.8031)"
                            Categories="@(["sit",
                                "deserunt"])"
                            Created="@(new DateTime(2005, 9, 17, 7, 24, 48))"
                            Culture="@("ut")"
                            Description="@("nam laudantium magni illum sed in quas")"
                            Extent="@(new Extent(-18.7247,
                                    -52.3779,
                                    -88.6403,
                                    -82.0451,
                                    736.8935,
                                    940.1679,
                                    780.4365,
                                    615.7590,
                                new SpatialReference(8,
                                        "doloremque",
                                        "ullam",
                                        "fuga"),
                                    true,
                                    true))"
                            GroupCategories="@(["sit",
                                "et",
                                "sunt",
                                "magnam"])"
                            LicenseInfo="@("nihil")"
                            Modified="@(new DateTime(2011, 4, 4, 2, 57, 3))"
                            Name="@("group")"
                            NumComments="@(463.5192)"
                            NumRatings="@(326.0999)"
                            NumViews="@(951.2312)"
                            Owner="@("Jerome Zieme")"
                            OwnerFolder="@("Ismael Mohr")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Immediate,
                                    ["laborum",
                                        "corrupti",
                                        "facilis"],
                                    "quia",
                                    "sed",
                                    "pariatur",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("odit")"
                            Screenshots="@(["sint",
                                "blanditiis",
                                "et",
                                "animi"])"
                            Size="@(3)"
                            Snippet="@("sunt")"
                            Tags="@(["delectus",
                                "nihil"])"
                            Title="@("est veniam ipsum")"
                            TypeKeywords="@(["soluta",
                                "dolorem"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(959.8091,
                720.1143,
                161.8897,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(594.5243,
                146.6920,
                793.2971);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Color;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(14.2225,
                    69.3689,
                    66.3512,
                    5.9990,
                    19.6168,
                    624.6669,
                    874.8051,
                    660.0101,
                new SpatialReference(6,
                        "officiis",
                        "odio",
                        "alias"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "nihil",
                    "consectetur",
                    497.5100,
                    ["quo",
                        "ratione",
                        "excepturi"],
                    new DateTime(2013, 2, 20, 8, 32, 14),
                    "cupiditate",
                    "earum iure animi aperiam",
                new Extent(-176.2708,
                        131.7624,
                        -3.3509,
                        37.8005,
                        494.9783,
                        462.5746,
                        509.6302,
                        432.6461,
                    new SpatialReference(6,
                            "est",
                            "modi",
                            "iusto"),
                        true,
                        true),
                    ["facilis",
                        "sint"],
                    "ut",
                    new DateTime(2001, 6, 13, 18, 17, 37),
                    "category",
                    989.5091);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(602.4935,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(7,
                        "perferendis",
                        65.1000,
                        8271778.3657),
                new LOD(4,
                        "dolor",
                        93.1008,
                        25854746.0485),
                new LOD(7,
                        "qui",
                        58.8806,
                        28048455.8223),
                new LOD(3,
                        "magnam",
                        15.1676,
                        22833175.3545)],
                new Point(-128.4339,
                        68.6961,
                        -40.3246,
                        59.9042,
                        349.8199,
                    new SpatialReference(4,
                            "eos",
                            "et",
                            "possimus"),
                        true,
                        true,
                        892.7964),
                    [2,
                        8,
                        5,
                        8],
                new SpatialReference(8,
                        "modi",
                        "asperiores",
                        "praesentium"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 6, 21, 4, 13, 46),
                    new DateTime(2007, 5, 26, 10, 27, 38));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
