@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Plus)"
                        Copyright="@("excepturi")"
                        Effect="@(new Effect("vitae",
                            20281123.3661))"
                        FullExtent="@(new Extent(-18.9208,
                                -25.6526,
                                59.3765,
                                12.4575,
                                438.9941,
                                758.7300,
                                823.2825,
                                455.6158,
                            new SpatialReference(2,
                                    "eum",
                                    "labore",
                                    "quam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(27935661.6352)"
                        MinScale="@(28653.0036)"
                        Opacity="@(0.7989)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(50.7739)"
                        SubDomains="@(["eum",
                            "provident",
                            "voluptas"])"
                        Title="@("perferendis consequatur ullam")"
                        UrlTemplate="@("https://clementina.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2008, 6, 22, 10, 4, 24))"
                            End="@(new DateTime(2001, 2, 18, 19, 39, 54))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(349.8796)"
                            Format="@(TileInfoFormat.Emf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "qui",
                                    10.8374,
                                    4860485.0658)])"
                            Origin="@(new Point(-179.4176,
                                    82.5087,
                                    148.5085,
                                    54.7243,
                                    74.8085,
                                new SpatialReference(7,
                                        "sit",
                                        "perferendis",
                                        "vel"),
                                    true,
                                    true,
                                    955.1009))"
                            Size="@([7,
                                4])"
                            SpatialReference="@(new SpatialReference(2,
                                    "nobis",
                                    "esse",
                                    "accusamus"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(563.5510,
                833.5451,
                904.3799,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(995.6362,
                412.7260,
                28.5841);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Multiply;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-80.0372,
                    77.9680,
                    -63.5835,
                    -52.1585,
                    890.0026,
                    811.9544,
                    726.5299,
                    54.7854,
                new SpatialReference(6,
                        "quo",
                        "reiciendis",
                        "blanditiis"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(146.6485,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(9,
                        "placeat",
                        69.9927,
                        8482261.7519),
                new LOD(2,
                        "aliquam",
                        34.1573,
                        3732747.6365),
                new LOD(8,
                        "veritatis",
                        43.8385,
                        46533487.5826),
                new LOD(3,
                        "provident",
                        94.0129,
                        35504090.5747)],
                new Point(-64.7584,
                        27.2654,
                        -14.7053,
                        -5.3562,
                        951.0221,
                    new SpatialReference(3,
                            "reiciendis",
                            "placeat",
                            "nostrum"),
                        true,
                        true,
                        511.7479),
                    [1,
                        6,
                        5],
                new SpatialReference(9,
                        "et",
                        "ullam",
                        "et"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 8, 19, 4, 31, 27),
                    new DateTime(2013, 2, 11, 2, 47, 39));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
