@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.HardLight)"
                        Copyright="@("necessitatibus")"
                        Effect="@(new Effect("et",
                            15322115.6542))"
                        FullExtent="@(new Extent(-92.8937,
                                59.2038,
                                -36.9145,
                                -44.2738,
                                803.3102,
                                254.1344,
                                706.1098,
                                847.7948,
                            new SpatialReference(8,
                                    "excepturi",
                                    "vitae",
                                    "excepturi"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(10739046.9942)"
                        MinScale="@(41352.7502)"
                        Opacity="@(0.3344)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(927.2183)"
                        SubDomains="@(["at",
                            "eaque",
                            "esse"])"
                        Title="@("amet sed aut")"
                        UrlTemplate="@("https://carroll.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2006, 2, 3, 13, 54, 22))"
                            End="@(new DateTime(2002, 4, 8, 6, 46, 49))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(336.9904)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "est",
                                    99.7616,
                                    37289284.2110),
                            new LOD(9,
                                    "voluptate",
                                    10.6958,
                                    2340356.5655),
                            new LOD(3,
                                    "eum",
                                    34.8149,
                                    28277887.0154),
                            new LOD(8,
                                    "earum",
                                    24.9265,
                                    29983679.8319)])"
                            Origin="@(new Point(-151.5879,
                                    -13.4779,
                                    84.0168,
                                    38.2941,
                                    297.4170,
                                new SpatialReference(8,
                                        "est",
                                        "deleniti",
                                        "tempora"),
                                    true,
                                    true,
                                    976.3366))"
                            Size="@([1,
                                9,
                                8])"
                            SpatialReference="@(new SpatialReference(3,
                                    "vel",
                                    "tempora",
                                    "dolore"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("et")"
                            ApiKey="@("veniam")"
                            AvgRating="@(745.7458)"
                            Categories="@(["sapiente",
                                "possimus"])"
                            Created="@(new DateTime(2008, 5, 25, 13, 53, 2))"
                            Culture="@("libero")"
                            Description="@("quam reiciendis vitae nam quas")"
                            Extent="@(new Extent(0.8767,
                                    -120.8633,
                                    -83.4467,
                                    27.0900,
                                    804.3196,
                                    511.8584,
                                    426.3911,
                                    498.8293,
                                new SpatialReference(9,
                                        "expedita",
                                        "dignissimos",
                                        "id"),
                                    true,
                                    true))"
                            GroupCategories="@(["sapiente",
                                "nihil",
                                "impedit"])"
                            LicenseInfo="@("quis")"
                            Modified="@(new DateTime(2010, 9, 16, 20, 29, 53))"
                            Name="@("createdAt")"
                            NumComments="@(428.3894)"
                            NumRatings="@(211.8164)"
                            NumViews="@(588.3909)"
                            Owner="@("Jasmin Hills")"
                            OwnerFolder="@("Rey Kohler")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["sunt",
                                        "aut"],
                                    "repellat",
                                    "culpa",
                                    "dolorem",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("molestiae")"
                            Screenshots="@(["consequuntur",
                                "repellat",
                                "ut",
                                "consectetur"])"
                            Size="@(2)"
                            Snippet="@("et")"
                            Tags="@(["odit",
                                "magnam"])"
                            Title="@("voluptatem ullam mollitia")"
                            TypeKeywords="@(["doloremque",
                                "et",
                                "aut"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(864.2071,
                550.5482,
                483.7855,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(211.2704,
                406.1058,
                529.4534);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Screen;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(48.4540,
                    20.9066,
                    -74.4022,
                    63.5065,
                    178.0080,
                    850.9998,
                    477.4426,
                    699.3986,
                new SpatialReference(8,
                        "aut",
                        "itaque",
                        "omnis"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "sit",
                    "ut",
                    13.6383,
                    ["blanditiis",
                        "debitis",
                        "voluptatem",
                        "eligendi"],
                    new DateTime(2016, 8, 2, 17, 24, 51),
                    "expedita",
                    "culpa hic ipsam quo ea nihil odit",
                new Extent(117.2136,
                        77.4880,
                        86.6478,
                        -61.3225,
                        338.5077,
                        926.8820,
                        330.4639,
                        713.1570,
                    new SpatialReference(4,
                            "incidunt",
                            "eum",
                            "soluta"),
                        true,
                        true),
                    ["accusantium",
                        "et",
                        "laudantium",
                        "et"],
                    "adipisci",
                    new DateTime(2009, 11, 16, 12, 41, 26),
                    "name",
                    140.3898);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(649.3574,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(6,
                        "reprehenderit",
                        22.7073,
                        9457987.4693),
                new LOD(8,
                        "cupiditate",
                        7.3780,
                        19101845.4331),
                new LOD(7,
                        "dolorum",
                        6.5511,
                        30646392.5532),
                new LOD(2,
                        "vero",
                        8.2688,
                        34513345.7804)],
                new Point(72.2758,
                        54.3463,
                        80.9882,
                        11.8632,
                        191.6681,
                    new SpatialReference(8,
                            "ut",
                            "perferendis",
                            "rerum"),
                        true,
                        true,
                        159.0485),
                    [6,
                        7,
                        8,
                        6],
                new SpatialReference(6,
                        "qui",
                        "rerum",
                        "laudantium"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 11, 17, 18, 18, 4),
                    new DateTime(2011, 9, 22, 5, 21, 11));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
