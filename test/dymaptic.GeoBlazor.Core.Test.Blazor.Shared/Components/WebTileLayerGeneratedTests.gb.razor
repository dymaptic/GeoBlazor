@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.HardLight)"
                        Copyright="@("aut")"
                        Effect="@(new Effect("blanditiis",
                            26390162.0316))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(48177025.3530)"
                        MinScale="@(6411.6736)"
                        Opacity="@(0.6489)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(836.0871)"
                        SubDomains="@(["earum"])"
                        Title="@("omnis veritatis culpa")"
                        UrlTemplate="@("https://francisca.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2012, 1, 19, 6, 37, 40))"
                            End="@(new DateTime(2015, 7, 15, 5, 19, 46))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(731.4126)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "repudiandae",
                                    91.3428,
                                    33566998.6602),
                            new LOD(9,
                                    "nam",
                                    99.6820,
                                    23102551.5624)])"
                            Origin="@(new Point(115.0875,
                                    46.3441,
                                    -110.4536,
                                    -63.2807,
                                    460.3993,
                                new SpatialReference(9,
                                        "qui",
                                        "cupiditate",
                                        "accusantium"),
                                    true,
                                    true,
                                    454.5203))"
                            Size="@([5])">
                            <SpatialReference 
                                Wkid="@(7)"
                                ImageCoordinateSystem="@("at")"
                                Wkt="@("dolorem")"
                                Wkt2="@("sed")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-79.9794)"
                            Xmin="@(176.5377)"
                            Ymax="@(-4.9833)"
                            Ymin="@(53.7189)"
                            Zmax="@(529.0268)"
                            Zmin="@(474.9565)"
                            Mmax="@(286.3479)"
                            Mmin="@(383.8200)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("provident")"
                                Wkt2="@("reprehenderit")">
                            </SpatialReference>
                        </Extent>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(197.4419,
                223.1169,
                992.0175,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(455.7253,
                747.9645,
                315.6909);
        Assert.IsNotNull(getTileUrlMethodResult);
        await webTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.Lighten;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(156.7660,
                    -24.6990,
                    3.5063,
                    -55.6134,
                    914.9145,
                    181.8607,
                    860.3820,
                    65.9263,
                new SpatialReference(5,
                        "et",
                        "ut",
                        "est"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(891.1348,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(6,
                        "a",
                        7.2429,
                        33564845.6182),
                new LOD(2,
                        "enim",
                        7.6979,
                        20158395.1899)],
                new Point(-70.3667,
                        -28.4683,
                        -124.7950,
                        -14.5160,
                        308.0996,
                    new SpatialReference(6,
                            "a",
                            "maxime",
                            "voluptatem"),
                        true,
                        true,
                        951.9843),
                    [4],
                new SpatialReference(9,
                        "qui",
                        "quod",
                        "ut"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 4, 12, 14, 53, 16),
                    new DateTime(2007, 8, 23, 3, 27, 57));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
