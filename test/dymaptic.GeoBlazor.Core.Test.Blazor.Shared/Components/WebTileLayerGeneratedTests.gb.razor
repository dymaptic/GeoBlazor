@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Invert)"
                        Copyright="@("voluptate")"
                        Effect="@(new Effect("omnis",
                            18438309.1030))"
                        FullExtent="@(new Extent(-34.4683,
                                28.2645,
                                -7.0702,
                                3.2420,
                                146.9358,
                                683.3875,
                                907.2415,
                                83.2031,
                            new SpatialReference(5,
                                    "architecto",
                                    "delectus",
                                    "perferendis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(49516127.1646)"
                        MinScale="@(46456.5888)"
                        Opacity="@(0.3978)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(696.3975)"
                        SubDomains="@(["id",
                            "ab",
                            "eos",
                            "molestiae"])"
                        Title="@("quo quae reiciendis")"
                        UrlTemplate="@("https://hertha.com")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 11, 10, 6, 55, 29))"
                            End="@(new DateTime(2023, 3, 13, 21, 50, 16))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(269.2786)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "voluptas",
                                    68.2105,
                                    8729876.8679),
                            new LOD(9,
                                    "odit",
                                    80.2685,
                                    746482.5638)])"
                            Origin="@(new Point(-154.5974,
                                    -7.2799,
                                    -108.0976,
                                    48.2682,
                                    27.5616,
                                new SpatialReference(1,
                                        "id",
                                        "rerum",
                                        "aut"),
                                    true,
                                    true,
                                    707.1306))"
                            Size="@([1,
                                5])"
                            SpatialReference="@(new SpatialReference(1,
                                    "autem",
                                    "error",
                                    "illum"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("architecto")"
                            ApiKey="@("explicabo")"
                            AvgRating="@(662.8247)"
                            Categories="@(["ipsam",
                                "sit"])"
                            Created="@(new DateTime(2013, 2, 18, 13, 34, 57))"
                            Culture="@("facere")"
                            Description="@("quos sapiente numquam expedita")"
                            Extent="@(new Extent(-116.3462,
                                    136.0312,
                                    25.4462,
                                    -5.4709,
                                    364.0448,
                                    393.1957,
                                    672.4393,
                                    311.8192,
                                new SpatialReference(5,
                                        "esse",
                                        "et",
                                        "ratione"),
                                    true,
                                    true))"
                            GroupCategories="@(["quod",
                                "eos",
                                "et",
                                "quia"])"
                            LicenseInfo="@("voluptatem")"
                            Modified="@(new DateTime(2020, 3, 13, 18, 25, 34))"
                            Name="@("phone")"
                            NumComments="@(861.2345)"
                            NumRatings="@(314.0356)"
                            NumViews="@(829.2668)"
                            Owner="@("Arno Goodwin")"
                            OwnerFolder="@("Soledad Volkman")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["recusandae",
                                        "non",
                                        "sit"],
                                    "ut",
                                    "nihil",
                                    "sequi",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("consequuntur")"
                            Screenshots="@(["consequatur",
                                "consequatur",
                                "ratione"])"
                            Size="@(3)"
                            Snippet="@("voluptas")"
                            Tags="@(["eos",
                                "quod",
                                "quos",
                                "quis"])"
                            Title="@("esse aspernatur eos")"
                            TypeKeywords="@(["sunt",
                                "et"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(654.3968,
                188.2628,
                262.0945,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(309.0265,
                581.9660,
                450.8648);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(49.5451,
                    55.5588,
                    20.7388,
                    -63.6460,
                    651.9825,
                    739.0076,
                    732.3503,
                    148.1239,
                new SpatialReference(8,
                        "repellat",
                        "ut",
                        "sed"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "minima",
                    "sequi",
                    506.4451,
                    ["facere",
                        "cum",
                        "dolores"],
                    new DateTime(2005, 5, 25, 12, 52, 24),
                    "aliquam",
                    "qui voluptas molestiae veritatis magni quia",
                new Extent(4.3848,
                        54.2338,
                        18.7114,
                        63.6760,
                        305.0252,
                        390.9273,
                        130.8002,
                        622.8031,
                    new SpatialReference(5,
                            "ex",
                            "magni",
                            "quidem"),
                        true,
                        true),
                    ["sunt",
                        "eum",
                        "doloribus"],
                    "quod",
                    new DateTime(2016, 1, 13, 8, 57, 25),
                    "email",
                    554.6913);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(324.1787,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(7,
                        "qui",
                        76.6774,
                        756612.8164),
                new LOD(5,
                        "et",
                        8.0251,
                        41335778.0751),
                new LOD(4,
                        "cumque",
                        56.3555,
                        32238388.0243),
                new LOD(1,
                        "veritatis",
                        35.1032,
                        30509428.8929)],
                new Point(-113.7742,
                        80.7320,
                        91.5905,
                        59.3441,
                        141.2222,
                    new SpatialReference(9,
                            "nihil",
                            "at",
                            "voluptas"),
                        true,
                        true,
                        21.6403),
                    [1,
                        9,
                        2,
                        3],
                new SpatialReference(2,
                        "numquam",
                        "qui",
                        "inventore"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 9, 2, 21, 28, 47),
                    new DateTime(2009, 2, 26, 7, 23, 17));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
