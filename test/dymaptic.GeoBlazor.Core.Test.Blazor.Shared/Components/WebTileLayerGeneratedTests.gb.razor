@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Lighten)"
                        Copyright="@("est")"
                        Effect="@(new Effect("eveniet",
                            32149665.9552))"
                        FullExtent="@(new Extent(85.1743,
                                34.8785,
                                -60.9007,
                                -64.2518,
                                678.8310,
                                590.0399,
                                799.8117,
                                140.8858,
                            new SpatialReference(6,
                                    "rerum",
                                    "similique",
                                    "minus"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(564573.3026)"
                        MinScale="@(35263.8715)"
                        Opacity="@(0.0314)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(788.5965)"
                        SubDomains="@(["fugiat",
                            "est"])"
                        Title="@("optio libero qui")"
                        UrlTemplate="@("https://andre.info")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 2, 7, 15, 30, 20))"
                            End="@(new DateTime(2005, 6, 11, 2, 21, 14))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(338.6001)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "neque",
                                    57.1479,
                                    2903853.8560),
                            new LOD(5,
                                    "fugit",
                                    56.7640,
                                    183075.3820),
                            new LOD(7,
                                    "deleniti",
                                    38.7660,
                                    31504922.8963),
                            new LOD(3,
                                    "ratione",
                                    93.7359,
                                    24457823.5591)])"
                            Origin="@(new Point(50.5197,
                                    14.5170,
                                    95.4622,
                                    42.8499,
                                    409.2151,
                                new SpatialReference(1,
                                        "dolores",
                                        "temporibus",
                                        "autem"),
                                    true,
                                    true,
                                    995.5439))"
                            Size="@([9,
                                3,
                                6,
                                5])"
                            SpatialReference="@(new SpatialReference(4,
                                    "eius",
                                    "et",
                                    "quod"))">
                        </TileInfo>
                        <PortalItem />
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(975.4201,
                679.7843,
                326.1432,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(970.3567,
                889.1729,
                43.3126);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(11.4128,
                    82.4982,
                    -45.9146,
                    46.4046,
                    925.9767,
                    388.5605,
                    841.0649,
                    948.0150,
                new SpatialReference(7,
                        "eum",
                        "ullam",
                        "qui"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(122.3817,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(4,
                        "in",
                        53.5639,
                        29214216.1900),
                new LOD(4,
                        "repudiandae",
                        35.3008,
                        2864478.2208),
                new LOD(9,
                        "odit",
                        27.0129,
                        7552406.9753)],
                new Point(-102.7590,
                        79.2513,
                        153.8161,
                        -50.3523,
                        15.7692,
                    new SpatialReference(2,
                            "dolor",
                            "eligendi",
                            "quisquam"),
                        true,
                        true,
                        404.8545),
                    [8,
                        2,
                        8,
                        7],
                new SpatialReference(8,
                        "animi",
                        "adipisci",
                        "quae"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 6, 27, 8, 17, 41),
                    new DateTime(2010, 9, 8, 15, 17, 43));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
