@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.ColorBurn)"
                        Copyright="@("quia")"
                        Effect="@(new Effect("sunt",
                            44617796.8527))"
                        FullExtent="@(new Extent(57.8357,
                                -174.7735,
                                -64.2391,
                                62.2521,
                                340.3062,
                                918.1842,
                                97.1503,
                                307.8080,
                            new SpatialReference(9,
                                    "aut",
                                    "amet",
                                    "rerum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(25609282.8290)"
                        MinScale="@(20382.7104)"
                        Opacity="@(0.5088)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(371.1939)"
                        SubDomains="@(["enim",
                            "qui",
                            "officia"])"
                        Title="@("aut sed fugiat")"
                        UrlTemplate="@("https://bruce.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2008, 11, 25, 16, 1, 2))"
                            End="@(new DateTime(2021, 3, 5, 14, 20, 12))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(995.0871)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "non",
                                    27.5522,
                                    46612194.4349),
                            new LOD(3,
                                    "iste",
                                    82.4222,
                                    34627751.1708)])"
                            Origin="@(new Point(-22.9710,
                                    67.7168,
                                    -20.5997,
                                    -18.5065,
                                    333.8175,
                                new SpatialReference(4,
                                        "ipsum",
                                        "perspiciatis",
                                        "et"),
                                    true,
                                    true,
                                    553.2961))"
                            Size="@([6,
                                1])"
                            SpatialReference="@(new SpatialReference(8,
                                    "et",
                                    "sed",
                                    "et"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("vitae")"
                            ApiKey="@("et")"
                            AvgRating="@(618.6588)"
                            Categories="@(["sunt",
                                "molestiae",
                                "voluptatem",
                                "asperiores"])"
                            Created="@(new DateTime(2023, 4, 26, 21, 29, 45))"
                            Culture="@("aperiam")"
                            Description="@("reprehenderit tempora eos qui modi laudantium occaecati")"
                            Extent="@(new Extent(-19.1496,
                                    60.7390,
                                    81.4143,
                                    -26.9143,
                                    906.1561,
                                    756.2019,
                                    604.9610,
                                    417.3884,
                                new SpatialReference(7,
                                        "illo",
                                        "nemo",
                                        "ut"),
                                    true,
                                    true))"
                            GroupCategories="@(["neque",
                                "natus",
                                "occaecati",
                                "cumque"])"
                            LicenseInfo="@("aut")"
                            Modified="@(new DateTime(2005, 1, 7, 20, 1, 8))"
                            Name="@("name")"
                            NumComments="@(909.6398)"
                            NumRatings="@(170.0473)"
                            NumViews="@(496.4907)"
                            Owner="@("Roberto Gutmann")"
                            OwnerFolder="@("Libbie Kassulke")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Auto,
                                    ["cum",
                                        "sequi"],
                                    "est",
                                    "consequatur",
                                    "deleniti",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("odio")"
                            Screenshots="@(["aspernatur",
                                "nihil",
                                "aperiam",
                                "harum"])"
                            Size="@(4)"
                            Snippet="@("et")"
                            Tags="@(["neque",
                                "blanditiis"])"
                            Title="@("non odit distinctio")"
                            TypeKeywords="@(["et",
                                "vel"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "WebTileLayerType");
        var fetchTileMethodResult = await webTileLayer.FetchTile(441.2892,
                971.9124,
                481.1975,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(925.4086,
                652.1668,
                551.3848);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Plus;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-138.7308,
                    -121.6144,
                    16.5365,
                    -85.3634,
                    52.9851,
                    379.4096,
                    176.8072,
                    779.4287,
                new SpatialReference(6,
                        "pariatur",
                        "et",
                        "sunt"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "occaecati",
                    "illo",
                    202.9655,
                    ["aut",
                        "provident",
                        "minus"],
                    new DateTime(2023, 8, 8, 5, 36, 12),
                    "accusantium",
                    "corporis eligendi rerum doloribus",
                new Extent(86.2290,
                        -10.0356,
                        -2.9878,
                        -61.2609,
                        332.4519,
                        9.0349,
                        759.0258,
                        386.8361,
                    new SpatialReference(5,
                            "veniam",
                            "quam",
                            "non"),
                        true,
                        true),
                    ["sint",
                        "natus",
                        "assumenda",
                        "quisquam"],
                    "id",
                    new DateTime(2001, 11, 12, 13, 29, 5),
                    "group",
                    442.2042);
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(154.4628,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(1,
                        "esse",
                        60.4144,
                        44143.4319),
                new LOD(1,
                        "quia",
                        97.2051,
                        15805102.8041),
                new LOD(4,
                        "quo",
                        82.4319,
                        43716443.8580)],
                new Point(103.1754,
                        7.0895,
                        -117.5998,
                        -8.9524,
                        724.6681,
                    new SpatialReference(9,
                            "ipsa",
                            "nostrum",
                            "accusamus"),
                        true,
                        true,
                        497.4847),
                    [4,
                        7,
                        1],
                new SpatialReference(6,
                        "dicta",
                        "sapiente",
                        "velit"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 2, 5, 8, 17, 41),
                    new DateTime(2007, 9, 15, 0, 36, 34));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
