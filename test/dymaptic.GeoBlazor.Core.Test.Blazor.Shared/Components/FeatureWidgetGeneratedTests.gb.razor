@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureWidget(Action renderHandler)
    {
        FeatureWidget? featureWidget = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <FeatureWidget 
                    DefaultPopupTemplateEnabled="@(true)"
                    HeadingLevel="@(153.0724)"
                    Icon="@("quam")"
                    Label="@("et")"
                    TimeZone="@("America/Lima")"
                    WidgetId="@("dolorum")">
                    <FeatureVisibleElements 
                        BoolContent="@(true)"
                        LastEditedInfo="@(true)"
                        Title="@(true)"
                        VisibleContentElementsContent="@(new VisibleContentElements(true,
                                true,
                                true,
                                true,
                                true))">
                    </FeatureVisibleElements>
                    <FeatureViewModel 
                        Abilities="@(new Abilities(true,
                                true,
                                true,
                                true,
                                true,
                                true))"
                        DefaultPopupTemplateEnabled="@(true)"
                        Location="@(new Point(-130.2868,
                                4.0548,
                                -161.3327,
                                58.3044,
                                534.3065,
                            new SpatialReference(3,
                                    "tenetur",
                                    "id",
                                    "magni"),
                                true,
                                true,
                                452.2830))"
                        TimeZone="@("Europe/Zagreb")">
                        <SpatialReference 
                            Wkid="@(4)"
                            ImageCoordinateSystem="@("maiores")"
                            Wkt="@("rem")"
                            Wkt2="@("ut")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Extent(-2.9181,
                                    -120.7966,
                                    -32.0797,
                                    46.6439,
                                    723.3459,
                                    284.9644,
                                    517.0260,
                                    509.8234,
                                new SpatialReference(8,
                                        "aut",
                                        "et",
                                        "cumque"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("cum officia est",
                                new MapColor(150, 0, 154),
                                new MapColor(252, 41, 131),
                                    new Dimension(883.4224),
                                new MapFont(new Dimension(699.4922),
                                        "Verdana",
                                    MapFontStyle.Italic,
                                    FontWeight.Lighter,
                                    TextDecoration.None),
                                    479.5021,
                                new MapColor(248, 183, 36),
                                new MapColor(169, 122, 40),
                                    389.2443,
                                HorizontalAlignment.Right,
                                    true,
                                    239.7522,
                                    new Dimension(430.4353),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("enim odio nihil",
                                    "autem",
                                    ["molestiae"],
                                [new FieldInfo("updatedAt",
                                        "praesentium",
                                        "similique",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.LongMonthDayYearLongTime),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("title",
                                        "voluptatem",
                                        "veniam",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime),
                                        true,
                                        true,
                                    StatisticType.Stddev)],
                                [new TextPopupContent("nam unde exercitationem"),
                                new AttachmentsPopupContent("ut autem sunt",
                                        "itaque repudiandae",
                                        AttachmentsPopupContentDisplayType.Auto)],
                                [new ExpressionInfo("return Date();",
                                        "status",
                                        "facilis ut eos",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("ipsam explicabo aperiam",
                                        "https://picsum.photos/640/480/?image=231",
                                        "319b664a-2a2e-9121-5c43-08fb3282fec8",
                                        () => { Console.WriteLine("laborum"); return Task.CompletedTask; },
                                        "name",
                                        true,
                                        true,
                                        true,
                                        "qui"),
                                        new ActionButton("earum in accusamus",
                                            "https://picsum.photos/640/480/?image=470",
                                            "07b19136-1d14-4f49-c81b-a51593d71571",
                                            () => { Console.WriteLine("quasi"); return Task.CompletedTask; },
                                            "createdAt",
                                            true,
                                            true,
                                            true,
                                            "optio")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("totam")"
                            AggregateGeometries="@("amet")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "quia",
                                8))">
                        </Graphic>
                    </FeatureViewModel>
                    <SpatialReference 
                        Wkid="@(1)"
                        ImageCoordinateSystem="@("sed")"
                        Wkt="@("voluptatibus")"
                        Wkt2="@("sapiente")">
                    </SpatialReference>
                    <Graphic 
                        Geometry="@(new Extent(-34.9715,
                                -137.0267,
                                31.3680,
                                -45.1587,
                                685.2440,
                                987.4039,
                                497.7773,
                                961.2711,
                            new SpatialReference(4,
                                    "magnam",
                                    "reiciendis",
                                    "doloribus"),
                                true,
                                true))"
                        Symbol="@(new TextSymbol("sed et temporibus",
                            new MapColor(108, 209, 24),
                            new MapColor(88, 69, 225),
                                new Dimension(426.2528),
                            new MapFont(new Dimension(444.5054),
                                    "Helvetica",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                471.3622,
                            new MapColor(135, 39, 86),
                            new MapColor(251, 198, 110),
                                649.7084,
                            HorizontalAlignment.Left,
                                true,
                                976.9455,
                                new Dimension(837.7992),
                                true))"
                        PopupTemplate="@(new PopupTemplate("ducimus voluptatem soluta",
                                "dolorum",
                                ["cum",
                                    "accusamus"],
                            [new FieldInfo("status",
                                    "est",
                                    "est",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Var)],
                            [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                        "vel",
                                        "distinctio magnam voluptatem"))],
                            [new ExpressionInfo("return Date();",
                                    "status",
                                    "enim quidem illo",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "title",
                                    "temporibus repudiandae officia",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("harum dolores dolor",
                                    "https://picsum.photos/640/480/?image=394",
                                    "078f95f9-b59e-30ed-58fe-84f84550a8e8",
                                    () => { Console.WriteLine("totam"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "repellat")]))"
                        Attributes="@(new AttributesDictionary())"
                        Visible="@(true)"
                        LegendLabel="@("qui")"
                        AggregateGeometries="@("quia")"
                        Origin="@(new GraphicOrigin(Guid.NewGuid(),
                            "tenetur",
                            1))">
                    </Graphic>
                </FeatureWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureWidget!);
        await AssertJavaScript("assertWidgetExists", args: "feature");
        await featureWidget.NextMedia(1);
        await featureWidget.PreviousMedia(8);
        await featureWidget.SetActiveMedia(5,
                9);
        Graphic testGraphic = new Graphic(new Extent(-62.1903,
                        -75.8899,
                        -17.6415,
                        -21.0167,
                        966.3857,
                        51.5029,
                        91.7007,
                        400.7835,
                    new SpatialReference(7,
                            "dolorum",
                            "qui",
                            "ipsam"),
                        true,
                        true),
                new TextSymbol("cum est molestiae",
                    new MapColor(254, 225, 88),
                    new MapColor(154, 192, 24),
                        new Dimension(972.6205),
                    new MapFont(new Dimension(248.9393),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.None),
                        198.9177,
                    new MapColor(88, 84, 130),
                    new MapColor(46, 148, 15),
                        787.1803,
                    HorizontalAlignment.Right,
                        true,
                        138.3488,
                        new Dimension(171.1393),
                        true),
                new PopupTemplate("fugit inventore dolores",
                        "expedita",
                        ["animi"],
                    [new FieldInfo("id",
                            "ut",
                            "minus",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongMonthDayYearLongTime24),
                            true,
                            true,
                        StatisticType.Min)],
                    [new RelationshipPopupContent("ut ut aspernatur",
                            "magni delectus accusantium eius",
                            4,
                            "rem",
                        [new RelatedRecordsInfoFieldOrder("nisi",
                            OrderBy.Asc),
                        new RelatedRecordsInfoFieldOrder("et",
                            OrderBy.Desc)],
                            7)],
                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "title",
                            "fuga nemo eligendi",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "token",
                            "ipsa eveniet odio",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("sed occaecati sint",
                            "https://picsum.photos/640/480/?image=602",
                            "a8bcb2df-e7b3-762b-9076-d4ca4e859330",
                            () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "asperiores")]),
                    new AttributesDictionary(),
                    true,
                    "est",
                    "est",
                    new GraphicOrigin(Guid.NewGuid(),
                        "et",
                        3));
        await featureWidget.SetGraphic(testGraphic);
        var graphic = await featureWidget.GetGraphic();
        Assert.AreEqual(testGraphic, graphic);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "omnis",
                    "ullam",
                    "nemo");
        await featureWidget.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureWidget.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        FeatureViewModel testViewModel = new FeatureViewModel(new Abilities(true,
                        true,
                        true,
                        true,
                        true,
                        true),
                    true,
                new Graphic(new Extent(176.4977,
                            165.2035,
                            81.8802,
                            3.8499,
                            250.3404,
                            523.9298,
                            443.1047,
                            269.1473,
                        new SpatialReference(8,
                                "sequi",
                                "excepturi",
                                "perferendis"),
                            true,
                            true),
                    new TextSymbol("ut dolores inventore",
                        new MapColor(75, 168, 234),
                        new MapColor(246, 45, 143),
                            new Dimension(693.9144),
                        new MapFont(new Dimension(675.5449),
                                "Palatino",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            743.7816,
                        new MapColor(245, 42, 154),
                        new MapColor(36, 220, 66),
                            860.2486,
                        HorizontalAlignment.Center,
                            true,
                            569.9126,
                            new Dimension(196.4597),
                            true),
                    new PopupTemplate("laborum odio cumque",
                            "repudiandae",
                            ["qui"],
                        [new FieldInfo("status",
                                "non",
                                "sunt",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("category",
                                "consequuntur",
                                "debitis",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Count)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                    "omnis",
                                    "corrupti omnis est"))],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "updatedAt",
                                "aspernatur nam esse",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "group",
                                "voluptatem autem saepe",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("ratione impedit labore",
                                "https://picsum.photos/640/480/?image=30",
                                "0e3d6174-6b75-f58d-6396-8cf006d023ba",
                                () => { Console.WriteLine("amet"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "aperiam")]),
                        new AttributesDictionary(),
                        true,
                        "est",
                        "accusamus",
                        new GraphicOrigin(Guid.NewGuid(),
                            "qui",
                            1)),
                new Point(-140.5253,
                        34.3576,
                        -150.8296,
                        28.7884,
                        304.0100,
                    new SpatialReference(9,
                            "ipsam",
                            "animi",
                            "sit"),
                        true,
                        true,
                        291.8329),
                new SpatialReference(5,
                        "vel",
                        "fuga",
                        "fugiat"),
                    "Pacific/Pago_Pago");
        await featureWidget.SetViewModel(testViewModel);
        var viewModel = await featureWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
        FeatureVisibleElements testVisibleElements = new FeatureVisibleElements(true,
                    true,
                    true,
                new VisibleContentElements(true,
                        true,
                        true,
                        true,
                        true));
        await featureWidget.SetVisibleElements(testVisibleElements);
        var visibleElements = await featureWidget.GetVisibleElements();
        Assert.AreEqual(testVisibleElements, visibleElements);
    }
}
