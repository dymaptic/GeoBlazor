@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureWidget(Action renderHandler)
    {
        FeatureWidget? featureWidget = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <FeatureWidget 
                    DefaultPopupTemplateEnabled="@(true)"
                    HeadingLevel="@(478.4989)"
                    Icon="@("at")"
                    Label="@("eaque")"
                    TimeZone="@("Asia/Colombo")"
                    WidgetId="@("illo")">
                    <FeatureVisibleElements 
                        BoolContent="@(true)"
                        LastEditedInfo="@(true)"
                        Title="@(true)"
                        VisibleContentElementsContent="@(new VisibleContentElements(true,
                                true,
                                true,
                                true,
                                true))">
                    </FeatureVisibleElements>
                    <FeatureViewModel 
                        Abilities="@(new Abilities(true,
                                true,
                                true,
                                true,
                                true,
                                true))"
                        DefaultPopupTemplateEnabled="@(true)"
                        Location="@(new Point(-56.1488,
                                87.4464,
                                157.8732,
                                -33.3092,
                                540.9850,
                            new SpatialReference(9,
                                    "nulla",
                                    "qui",
                                    "omnis"),
                                true,
                                true,
                                790.5645))"
                        TimeZone="@("Europe/Rome")">
                        <SpatialReference 
                            Wkid="@(9)"
                            ImageCoordinateSystem="@("reprehenderit")"
                            Wkt="@("reprehenderit")"
                            Wkt2="@("est")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Polygon([new MapPath([new MapPoint([887.3927,
                                        310.3775]),
                                    new MapPoint([758.3821])])],
                                new SpatialReference(3,
                                        "suscipit",
                                        "molestiae",
                                        "ut"),
                                new Point(-122.0946,
                                        44.4880,
                                        59.8087,
                                        87.7421,
                                        137.7241,
                                    new SpatialReference(7,
                                            "necessitatibus",
                                            "modi",
                                            "sint"),
                                        true,
                                        true,
                                        762.0545),
                                    true,
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("placeat at beatae",
                                new MapColor(202, 19, 90),
                                new MapColor(84, 95, 152),
                                    new Dimension(112.6290),
                                new MapFont(new Dimension(201.5658),
                                        "Palatino",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.LineThrough),
                                    288.1323,
                                new MapColor(222, 19, 135),
                                new MapColor(93, 98, 206),
                                    985.2027,
                                HorizontalAlignment.Right,
                                    true,
                                    490.6130,
                                    new Dimension(532.6656),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("placeat magnam harum",
                                    "dolorem",
                                    ["temporibus",
                                        "nesciunt"],
                                [new FieldInfo("id",
                                        "velit",
                                        "inventore",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.LongDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                [new AttachmentsPopupContent("et harum rerum",
                                        "eum unde",
                                        AttachmentsPopupContentDisplayType.Auto),
                                new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                                            "vero",
                                            "saepe esse unde"))],
                                [new ExpressionInfo("return $feature['FieldName'];",
                                        "id",
                                        "aperiam deleniti assumenda",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("consequuntur nemo fugit",
                                        "https://picsum.photos/640/480/?image=467",
                                        "d310e591-b358-e35d-75a7-96925db411f8",
                                        () => { Console.WriteLine("quaerat"); return Task.CompletedTask; },
                                        "createdAt",
                                        true,
                                        true,
                                        true,
                                        "rerum"),
                                        new ActionButton("aut culpa alias",
                                            "https://picsum.photos/640/480/?image=836",
                                            "06a1f9da-7f88-57a8-561d-7ed14d1e5687",
                                            () => { Console.WriteLine("voluptates"); return Task.CompletedTask; },
                                            "category",
                                            true,
                                            true,
                                            true,
                                            "nam")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("accusamus")"
                            AggregateGeometries="@("rerum")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "ad",
                                1))">
                        </Graphic>
                    </FeatureViewModel>
                    <SpatialReference 
                        Wkid="@(3)"
                        ImageCoordinateSystem="@("aliquam")"
                        Wkt="@("atque")"
                        Wkt2="@("voluptatibus")">
                    </SpatialReference>
                    <Graphic 
                        Geometry="@(new Polygon([new MapPath([new MapPoint([962.4844])])],
                            new SpatialReference(6,
                                    "qui",
                                    "nam",
                                    "est"),
                            new Point(-120.1298,
                                    39.6632,
                                    -127.1543,
                                    -58.9116,
                                    48.3744,
                                new SpatialReference(2,
                                        "officiis",
                                        "eos",
                                        "et"),
                                    true,
                                    true,
                                    118.1340),
                                true,
                                true,
                                true))"
                        Symbol="@(new TextSymbol("a ut reiciendis",
                            new MapColor(209, 133, 136),
                            new MapColor(160, 251, 229),
                                new Dimension(125.3362),
                            new MapFont(new Dimension(758.3226),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                507.7764,
                            new MapColor(55, 0, 28),
                            new MapColor(160, 40, 226),
                                507.9328,
                            HorizontalAlignment.Left,
                                true,
                                663.5556,
                                new Dimension(653.9015),
                                true))"
                        PopupTemplate="@(new PopupTemplate("sed qui maxime",
                                "provident",
                                ["rerum",
                                    "sit"],
                            [new FieldInfo("password",
                                    "et",
                                    "sit",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("category",
                                    "reprehenderit",
                                    "id",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Min)],
                            [new MediaPopupContent("occaecati totam quo",
                                    "sed dignissimos in",
                                [new BarChartMediaInfo("in perspiciatis illo",
                                        "sunt",
                                        "itaque ullam itaque",
                                    new ChartMediaInfoValue(["et"],
                                            "quas",
                                            "necessitatibus",
                                        [new ChartMediaInfoValueSeries("password",
                                                "natus",
                                                785.3972),
                                        new ChartMediaInfoValueSeries("password",
                                                "numquam",
                                                791.1229)],
                                        [new MapColor(245, 94, 217),
                                        new MapColor(227, 75, 244)]))],
                                    2)],
                            [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "id",
                                    "nobis omnis aut",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("quam dolore optio",
                                    "https://picsum.photos/640/480/?image=353",
                                    "853f93c4-bb4b-1441-1754-090e8fbf6ea9",
                                    () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "quas"),
                                    new ActionButton("explicabo voluptates et",
                                        "https://picsum.photos/640/480/?image=553",
                                        "e3d5da2b-a49e-2082-fd01-72f8ad34caf7",
                                        () => { Console.WriteLine("saepe"); return Task.CompletedTask; },
                                        "token",
                                        true,
                                        true,
                                        true,
                                        "maiores")]))"
                        Attributes="@(new AttributesDictionary())"
                        Visible="@(true)"
                        LegendLabel="@("quo")"
                        AggregateGeometries="@("fuga")"
                        Origin="@(new GraphicOrigin(Guid.NewGuid(),
                            "quisquam",
                            6))">
                    </Graphic>
                </FeatureWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureWidget!);
        await AssertJavaScript("assertWidgetExists", args: "feature");
        await featureWidget.NextMedia(6);
        await featureWidget.PreviousMedia(1);
        await featureWidget.SetActiveMedia(4,
                9);
        Graphic testGraphic = new Graphic(new Extent(-162.4436,
                        82.3481,
                        17.4546,
                        -50.2711,
                        863.2510,
                        293.2574,
                        514.8352,
                        715.8667,
                    new SpatialReference(4,
                            "molestias",
                            "sapiente",
                            "ut"),
                        true,
                        true),
                new TextSymbol("culpa quibusdam nemo",
                    new MapColor(186, 68, 229),
                    new MapColor(208, 216, 231),
                        new Dimension(249.7267),
                    new MapFont(new Dimension(942.7361),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        459.1591,
                    new MapColor(208, 106, 116),
                    new MapColor(6, 38, 175),
                        589.7464,
                    HorizontalAlignment.Center,
                        true,
                        109.1236,
                        new Dimension(274.8970),
                        true),
                new PopupTemplate("id id eveniet",
                        "optio",
                        ["optio"],
                    [new FieldInfo("avatar",
                            "animi",
                            "iste",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.LongMonthYear),
                            true,
                            true,
                        StatisticType.Max),
                    new FieldInfo("email",
                            "deserunt",
                            "natus",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateShortTime24),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new FieldsPopupContent([new FieldInfo("avatar",
                                "nemo",
                                "autem",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.DayShortMonthYearShortTime),
                                true,
                                true,
                            StatisticType.Stddev)],
                            "eos enim omnis sed",
                            "qui aliquam velit")],
                    [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "password",
                            "vero sapiente odit",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Name;",
                            "createdAt",
                            "minus veritatis deleniti",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("quia provident et",
                            "https://picsum.photos/640/480/?image=1072",
                            "33930807-d0f0-52fc-cd03-7fcd4b13e85f",
                            () => { Console.WriteLine("vel"); return Task.CompletedTask; },
                            "category",
                            true,
                            true,
                            true,
                            "architecto"),
                            new ActionButton("dolore nemo necessitatibus",
                                "https://picsum.photos/640/480/?image=163",
                                "31413b47-5a3d-9bd6-3a6a-b02dd00f6f3d",
                                () => { Console.WriteLine("necessitatibus"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "possimus")]),
                    new AttributesDictionary(),
                    true,
                    "accusantium",
                    "vitae",
                    new GraphicOrigin(Guid.NewGuid(),
                        "rerum",
                        9));
        await featureWidget.SetGraphic(testGraphic);
        var graphic = await featureWidget.GetGraphic();
        Assert.AreEqual(testGraphic, graphic);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "vel",
                    "cum",
                    "ab");
        await featureWidget.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureWidget.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        FeatureViewModel testViewModel = new FeatureViewModel(new Abilities(true,
                        true,
                        true,
                        true,
                        true,
                        true),
                    true,
                new Graphic(new Extent(-142.9343,
                            -85.5017,
                            84.9822,
                            -17.3867,
                            603.0242,
                            523.9790,
                            153.6872,
                            648.7003,
                        new SpatialReference(6,
                                "veniam",
                                "at",
                                "animi"),
                            true,
                            true),
                    new TextSymbol("nam sit modi",
                        new MapColor(37, 243, 39),
                        new MapColor(94, 74, 89),
                            new Dimension(76.2770),
                        new MapFont(new Dimension(416.6782),
                                "Georgia",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            290.3240,
                        new MapColor(13, 1, 1),
                        new MapColor(192, 175, 26),
                            470.6489,
                        HorizontalAlignment.Right,
                            true,
                            453.0050,
                            new Dimension(986.4024),
                            true),
                    new PopupTemplate("nisi ipsum sapiente",
                            "itaque",
                            ["dicta",
                                "et"],
                        [new FieldInfo("phone",
                                "impedit",
                                "velit",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("title",
                                "iusto",
                                "est",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "ut",
                                    "et aut eum")),
                        new FieldsPopupContent([new FieldInfo("name",
                                    "occaecati",
                                    "est",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("category",
                                    "odit",
                                    "molestiae",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Max)],
                                "sequi aut rerum",
                                "natus adipisci natus")],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "email",
                                "aut tempora nisi",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "password",
                                "et nobis doloremque",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("voluptatem provident quo",
                                "https://picsum.photos/640/480/?image=411",
                                "e2275072-299d-b970-35dd-2b7f36161e14",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "possimus")]),
                        new AttributesDictionary(),
                        true,
                        "explicabo",
                        "cumque",
                        new GraphicOrigin(Guid.NewGuid(),
                            "molestias",
                            5)),
                new Point(47.4352,
                        -75.4926,
                        92.7063,
                        75.6985,
                        111.5290,
                    new SpatialReference(5,
                            "consequatur",
                            "tempora",
                            "exercitationem"),
                        true,
                        true,
                        302.2211),
                new SpatialReference(5,
                        "mollitia",
                        "autem",
                        "veniam"),
                    "America/Denver");
        await featureWidget.SetViewModel(testViewModel);
        var viewModel = await featureWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
        FeatureVisibleElements testVisibleElements = new FeatureVisibleElements(true,
                    true,
                    true,
                new VisibleContentElements(true,
                        true,
                        true,
                        true,
                        true));
        await featureWidget.SetVisibleElements(testVisibleElements);
        var visibleElements = await featureWidget.GetVisibleElements();
        Assert.AreEqual(testVisibleElements, visibleElements);
    }
}
