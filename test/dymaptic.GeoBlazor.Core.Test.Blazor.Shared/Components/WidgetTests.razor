@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBasemapGalleryWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <BasemapGalleryWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.BasemapGallery");
    }

    [TestMethod]
    public async Task TestCanRenderBasemapLayerListWidget(Action renderHandler)
    {
        var handlerWasCalled = false;

        Task<ListItem> OnReferenceListItemCreatedHandler(ListItem item)
        {
            Assert.IsNotNull(item);
            handlerWasCalled = true;
            return Task.FromResult(item);
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map>
                    <Basemap>
                        <TileLayer>
                            <PortalItem Id="1b243539f4514b6ba35e7d995890db1d" />
                        </TileLayer>
                        <VectorTileLayer Opacity="0.75">
                            <PortalItem Id="6976148c11bd497d8624206f9ee03e30" />
                        </VectorTileLayer>
                    </Basemap>
                </Map>
                <BasemapLayerListWidget OnReferenceListItemCreatedHandler="OnReferenceListItemCreatedHandler" />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.BasemapLayerList");
        Assert.IsTrue(handlerWasCalled);
    }

    [TestMethod]
    public async Task TestCanRenderBasemapLayerListWidgetWithoutHandler(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map>
                    <Basemap>
                        <TileLayer>
                            <PortalItem Id="1b243539f4514b6ba35e7d995890db1d" />
                        </TileLayer>
                        <VectorTileLayer Opacity="0.75">
                            <PortalItem Id="6976148c11bd497d8624206f9ee03e30" />
                        </VectorTileLayer>
                    </Basemap>
                </Map>
                <BasemapLayerListWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.BasemapLayerList");
    }

    [TestMethod]
    public async Task TestBasemapToggleFailsWithoutNextBasemap(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <BasemapToggleWidget />

            </MapView>);

        await Assert.ThrowsExceptionAsync<AggregateException>(async () =>
            await WaitForMapToRender());
    }

    [TestMethod]
    public async Task TestCanRenderBasemapToggleWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <BasemapToggleWidget NextBasemapName="arcgis-topographic" />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.BasemapToggle");
    }

    [TestMethod]
    public async Task TestCanRenderCompassWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <CompassWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Compass");
    }

    [TestMethod]
    public async Task TestCanRenderHomeWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <HomeWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Home");
    }

    [TestMethod]
    public async Task TestCanRenderLayerListWidget(Action renderHandler)
    {
        var handlerWasCalled = false;

        Task<ListItem> OnListItemCreatedHandler(ListItem item)
        {
            Assert.IsNotNull(item);
            handlerWasCalled = true;
            return Task.FromResult(item);
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <WebMap>
                    <PortalItem Id="31cfc5b138e24dee866c457948773ac4" />
                </WebMap>
                <LayerListWidget OnListItemCreatedHandler="OnListItemCreatedHandler" />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.LayerList");
        Assert.IsTrue(handlerWasCalled);
    }

    [TestMethod]
    public async Task TestCanRenderLegendWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <LegendWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Legend");
    }

    [TestMethod]
    public async Task TestCanRenderLocateWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <LocateWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Locate");
    }

    [TestMethod]
    public async Task TestCanRenderPopupWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <PopupWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Popup");
    }

    [TestMethod]
    public async Task TestCanRenderScaleBarWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <ScaleBarWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.ScaleBar");
    }

    [TestMethod]
    public async Task TestCanRenderSearchWidget(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <SearchWidget />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Search");
    }

    [TestMethod]
    public async Task TestSearchWidgetGetResultsHandler(Action renderHandler)
    {
        SearchWidget? widget = null;
        var resultsHandlerWasCalled = false;

        Task<IList<SearchResult>> GetResultsHandler(GetResultsParameters parameters)
        {
            Assert.IsNotNull(parameters);
            resultsHandlerWasCalled = true;
            return Task.FromResult<IList<SearchResult>>(new List<SearchResult>());
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <SearchWidget @ref="widget">
                    <SearchSource GetResultsHandler="GetResultsHandler" />
                </SearchWidget>

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Search");
        await widget!.Search("test");
        await WaitForMapToRender();
        Assert.IsTrue(resultsHandlerWasCalled);
    }

    [TestMethod]
    public async Task TestSearchWidgetGetSuggestionsHandler(Action renderHandler)
    {
        var suggestionsHandlerWasCalled = false;

        Task<IList<SuggestResult>> GetSuggestionsHandler(GetSuggestionsParameters parameters)
        {
            Assert.IsNotNull(parameters);
            suggestionsHandlerWasCalled = true;
            return Task.FromResult<IList<SuggestResult>>(new List<SuggestResult>());
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <SearchWidget>
                    <SearchSource GetSuggestionsHandler="GetSuggestionsHandler" />
                </SearchWidget>

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Search");
        await AssertJavaScript("triggerSearchHandlers");

        var tries = 50;
        while (!suggestionsHandlerWasCalled && (tries > 0))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsTrue(suggestionsHandlerWasCalled);
    }

    [TestMethod]
    public async Task TestSearchWidgetMethods(Action renderHandler)
    {
        SearchWidget? widget = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <SearchWidget @ref="widget" />

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertWidgetExists", args: "esri.widgets.Search");
        await widget!.SetSearchTerm("testSearchTerm");
        string searchTerm = await widget.GetSearchTerm();
        Assert.AreEqual("testSearchTerm", searchTerm);
        SuggestResponse suggestResponse = await widget!.Suggest("test");
        Assert.IsNotNull(suggestResponse);
        SearchResponse searchResponse = await widget!.Search("test");
        Assert.IsNotNull(searchResponse);
        IReadOnlyList<SearchResultResponse> searchResultResponse = await widget.GetResults();
        Assert.IsNotNull(searchResultResponse);
        SuggestResult[] suggestResults = await widget.GetSuggestions();
        Assert.IsNotNull(suggestResults);
        SearchMenu activeMenu = await widget.GetActiveMenu();
        Assert.IsNotNull(activeMenu);
        SearchSource? activeSource = await widget.GetActiveSource();
        Assert.IsNotNull(activeSource);
        int activeSourceIndex = await widget.GetActiveSourceIndex();
        Assert.AreEqual(0, activeSourceIndex);
        IReadOnlyList<SearchSource> allSources = await widget.GetAllSources();
        Assert.AreEqual(1, allSources.Count);
        IReadOnlyList<SearchSource> defaultSources = await widget.GetDefaultSources();
        Assert.AreEqual(1, defaultSources.Count);
        Graphic resultGraphic = (await widget.GetResultGraphic())!;
        Assert.IsNotNull(resultGraphic);
        SearchResult selectedResult = await widget.GetSelectedResult();
        Assert.IsNotNull(selectedResult);
    }

    [TestMethod]
    public async Task TestCanRenderOutsideOfMapViewWithViewRef(Action renderHandler)
    {
        HomeWidget? homeWidget = null;
        MapView? mapView = null;
        bool widgetCreated = false;
        void OnWidgetCreated()
        {
            widgetCreated = true;
        }
        AddMapRenderFragment(
            @<div>
                <MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                    <Map ArcGISDefaultBasemap="arcgis-imagery" />
                </MapView>
                <HomeWidget @ref="homeWidget" MapView="@mapView"
                            OnWidgetCreated="OnWidgetCreated"/>
            </div>);

        await WaitForMapToRender();
        while (!widgetCreated)
        {
            await Task.Delay(100);
        }
        await AssertJavaScript("elementExists", args: $"widget-container-{homeWidget!.Id}");
    }
    
    [TestMethod]
    public async Task TestRenderOutsideOfMapViewWithoutReferenceThrows(Action renderHandler)
    {
        AddMapRenderFragment(
            @<div>
                <MapView class="map-view" OnViewRendered="renderHandler">
                    <Map ArcGISDefaultBasemap="arcgis-imagery" />
                </MapView>
                <HomeWidget />
            </div>);

        await Assert.ThrowsExceptionAsync<MissingMapViewReferenceException>(async () => await WaitForMapToRender());
    }
    
    [TestMethod]
    public async Task TestCanRenderOutsideOfMapViewWithContainerId(Action renderHandler)
    {
        HomeWidget? homeWidget = null;
        bool widgetCreated = false;
        void OnWidgetCreated()
        {
            widgetCreated = true;
        }
        AddMapRenderFragment(
            @<div>
                <div id="external-container" />
                <MapView class="map-view" OnViewRendered="renderHandler">
                    <Map ArcGISDefaultBasemap="arcgis-imagery" />
                    <HomeWidget @ref="homeWidget" ContainerId="external-container"
                                OnWidgetCreated="OnWidgetCreated" />
                </MapView>
            </div>);

        await WaitForMapToRender();
        while (!widgetCreated)
        {
            await Task.Delay(100);
        }
        await AssertJavaScript("elementExists", args: $"widget-container-{homeWidget!.Id}");
    }
}