@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedOpenStreetMapLayer(Action renderHandler)
    {
        OpenStreetMapLayer? openStreetMapLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <OpenStreetMapLayer 
                        Title="@("similique in enim")"
                        BlendMode="@(BlendMode.ColorBurn)"
                        Copyright="@("ipsum")"
                        MaxScale="@(31920547.6745)"
                        MinScale="@(12929.7936)"
                        RefreshInterval="@(118.6704)"
                        SubDomains="@(["voluptatem"])"
                        Opacity="@(0.0630)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        Effect="@(new Effect("nesciunt",
                            7218835.0776))"
                        PersistenceEnabled="@(true)"
                        UrlTemplate="@("http://laron.com")">
                        <TimeExtent 
                            Start="@(new DateTime(2021, 3, 21, 15, 27, 29))"
                            End="@(new DateTime(2015, 5, 10, 10, 7, 54))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(85.2436)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Size="@([2,
                                1])">
                            <LOD 
                                Level="@(5)"
                                LevelValue="@("eos")"
                                Resolution="@(19.4209)"
                                Scale="@(38055891.3635)">
                            </LOD>
                            <Point 
                                Longitude="@(-145.3814)"
                                Latitude="@(89.7226)"
                                X="@(108.6626)"
                                Y="@(-42.6898)"
                                Z="@(263.5013)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(699.1118)">
                                <SpatialReference 
                                    Wkid="@(9)"
                                    ImageCoordinateSystem="@("magni")"
                                    Wkt="@("sequi")"
                                    Wkt2="@("repellendus")">
                                </SpatialReference>
                            </Point>
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("possimus")"
                                Wkt="@("voluptatem")"
                                Wkt2="@("sint")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                    </OpenStreetMapLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(openStreetMapLayer!);
        await AssertJavaScript("assertLayerExists", args: "open-street-map");
        PortalItem testPortalItem = new PortalItem();
        await openStreetMapLayer.SetPortalItem(testPortalItem);
        var portalItem = await openStreetMapLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await openStreetMapLayer.SetBlendMode(testBlendMode);
        var blendMode = await openStreetMapLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        TileInfo testTileInfo = new TileInfo(21.1482,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(3,
                        "voluptates",
                        29.4845,
                        28593822.1515)],
                new Point(-55.2356,
                        82.7791,
                        142.6627,
                        -80.4037,
                        743.6503,
                    new SpatialReference(5,
                            "et",
                            "modi",
                            "consequatur"),
                        true,
                        true,
                        527.9658),
                    [9],
                new SpatialReference(4,
                        "rerum",
                        "minima",
                        "assumenda"));
        await openStreetMapLayer.SetTileInfo(testTileInfo);
        var tileInfo = await openStreetMapLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        ListMode testListMode = ListMode.Hide;
        await openStreetMapLayer.SetListMode(testListMode);
        var listMode = await openStreetMapLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 10, 20, 3, 43, 31),
                    new DateTime(2018, 10, 15, 18, 20, 54));
        await openStreetMapLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await openStreetMapLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
