@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedOpenStreetMapLayer(Action renderHandler)
    {
        OpenStreetMapLayer? openStreetMapLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <OpenStreetMapLayer 
                        Title="@("aliquam architecto id")"
                        BlendMode="@(BlendMode.Reflect)"
                        Copyright="@("voluptatem")"
                        MaxScale="@(29296645.9707)"
                        MinScale="@(36269.6173)"
                        RefreshInterval="@(154.1683)"
                        SubDomains="@(["distinctio",
                            "enim"])"
                        Opacity="@(0.6100)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        Effect="@(new Effect("assumenda",
                            36963452.0436))"
                        PersistenceEnabled="@(true)"
                        UrlTemplate="@("https://ole.name")">
                        <TimeExtent 
                            Start="@(new DateTime(2006, 8, 4, 12, 45, 33))"
                            End="@(new DateTime(2015, 8, 19, 5, 9, 1))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(677.6496)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Size="@([6,
                                3])">
                            <LOD 
                                Level="@(8)"
                                LevelValue="@("quo")"
                                Resolution="@(37.5634)"
                                Scale="@(1905028.2628)">
                            </LOD>
                            <Point 
                                Longitude="@(3.9541)"
                                Latitude="@(-37.2360)"
                                X="@(166.4413)"
                                Y="@(-1.1467)"
                                Z="@(413.5719)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(889.8290)">
                                <SpatialReference 
                                    Wkid="@(3)"
                                    ImageCoordinateSystem="@("explicabo")"
                                    Wkt="@("quia")"
                                    Wkt2="@("quis")">
                                </SpatialReference>
                            </Point>
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("consectetur")"
                                Wkt="@("odio")"
                                Wkt2="@("nemo")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                    </OpenStreetMapLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(openStreetMapLayer!);
        await AssertJavaScript("assertLayerExists", args: "open-street-map");
        PortalItem testPortalItem = new PortalItem();
        await openStreetMapLayer.SetPortalItem(testPortalItem);
        var portalItem = await openStreetMapLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Screen;
        await openStreetMapLayer.SetBlendMode(testBlendMode);
        var blendMode = await openStreetMapLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        TileInfo testTileInfo = new TileInfo(214.3007,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(9,
                        "labore",
                        41.9238,
                        8255727.7482),
                new LOD(1,
                        "illum",
                        45.8602,
                        34173046.1785)],
                new Point(8.9880,
                        -72.2967,
                        -136.9982,
                        11.3004,
                        303.8473,
                    new SpatialReference(7,
                            "et",
                            "autem",
                            "a"),
                        true,
                        true,
                        336.8507),
                    [3],
                new SpatialReference(3,
                        "expedita",
                        "libero",
                        "voluptatem"));
        await openStreetMapLayer.SetTileInfo(testTileInfo);
        var tileInfo = await openStreetMapLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        ListMode testListMode = ListMode.Hide;
        await openStreetMapLayer.SetListMode(testListMode);
        var listMode = await openStreetMapLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 8, 15, 19, 35, 50),
                    new DateTime(2012, 11, 7, 19, 22, 9));
        await openStreetMapLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await openStreetMapLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
