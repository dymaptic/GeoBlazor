@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedMapImageLayer(Action renderHandler)
    {
        MapImageLayer? mapImageLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <MapImageLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/USA/MapServer")"
                        BlendMode="@(BlendMode.Lighter)"
                        Dpi="@(963.4890)"
                        Effect="@(new Effect("perspiciatis",
                            39883680.8348))"
                        GdbVersion="@("0.6.2.5")"
                        ImageFormat="@(MapImageFormat.Png)"
                        ImageMaxHeight="@(5)"
                        ImageMaxWidth="@(5)"
                        ImageTransparency="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(47612151.2249)"
                        MinScale="@(18745.1616)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(534.4511)"
                        UseViewTime="@(true)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        Opacity="@(0.0227)"
                        Copyright="@("cupiditate")"
                        Title="@("ea totam sit")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(642.0283)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("natus")"
                            EndField="@("ut")"
                            Stops="@([new DateTime(2010, 6, 12, 19, 46, 10),
                                new DateTime(2022, 5, 11, 15, 21, 15)])"
                            TimeZone="@("America/Godthab")"
                            TrackIdField="@("harum")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(666.9765)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 2, 13, 4, 15, 22))"
                                End="@(new DateTime(2009, 11, 27, 11, 44, 48))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2004, 11, 6, 14, 52, 41))"
                            End="@(new DateTime(2008, 5, 23, 2, 34, 3))">
                        </TimeExtent>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-100.2727)"
                            Xmin="@(117.0386)"
                            Ymax="@(18.9519)"
                            Ymin="@(-76.1787)"
                            Zmax="@(225.3324)"
                            Zmin="@(914.4298)"
                            Mmax="@(831.0526)"
                            Mmin="@(513.7079)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("molestiae")"
                                Wkt="@("distinctio")"
                                Wkt2="@("quo")">
                            </SpatialReference>
                        </Extent>
                        <Sublayer 
                            SublayerId="@(1)"
                            LabelsVisible="@(true)"
                            LegendEnabled="@(true)"
                            ListMode="@(ListMode.Show)"
                            MaxScale="@(18536524.4528)"
                            MinScale="@(20346.1485)"
                            Opacity="@(0.3753)"
                            PopupEnabled="@(true)"
                            Title="@("et ratione dolorem")"
                            Visible="@(true)"
                            DefinitionExpression="@("quisquam")"
                            FloorInfo="@(new LayerFloorInfo("enim"))"
                            LabelingInfo="@([new Label(LabelPlacement.AlwaysHorizontal,
                                    "qui",
                                    new LabelExpressionInfo(),
                                    true,
                                DeconflictionStrategy.None,
                                LabelPosition.Curved,
                                    17164823.6547,
                                    565.0679,
                                    true,
                                    new Dimension(16.5455),
                                new TextSymbol("est rerum beatae",
                                    new MapColor(53, 77, 213),
                                    new MapColor(185, 90, 169),
                                        new Dimension(912.9780),
                                    new MapFont(new Dimension(495.9210),
                                            "Garamond",
                                        MapFontStyle.Oblique,
                                        FontWeight.Normal,
                                        TextDecoration.None),
                                        87.3298,
                                    new MapColor(35, 141, 158),
                                    new MapColor(218, 164, 238),
                                        474.7517,
                                    HorizontalAlignment.Right,
                                        true,
                                        50.2566,
                                        new Dimension(928.0519),
                                        true),
                                    true,
                                    "PostalCode = 'M5V 1J9'"),
                            new Label(LabelPlacement.AboveBefore,
                                    "iusto",
                                    new LabelExpressionInfo(),
                                    true,
                                DeconflictionStrategy.None,
                                LabelPosition.Curved,
                                    14695060.1779,
                                    2909.3183,
                                    true,
                                    new Dimension(938.9235),
                                new TextSymbol("nesciunt dicta est",
                                    new MapColor(228, 184, 219),
                                    new MapColor(206, 17, 168),
                                        new Dimension(137.7316),
                                    new MapFont(new Dimension(743.9031),
                                            "Arial",
                                        MapFontStyle.Italic,
                                        FontWeight.Lighter,
                                        TextDecoration.LineThrough),
                                        95.8321,
                                    new MapColor(124, 52, 138),
                                    new MapColor(88, 44, 237),
                                        568.6258,
                                    HorizontalAlignment.Right,
                                        true,
                                        280.8556,
                                        new Dimension(190.1556),
                                        true),
                                    true,
                                    "Phone = '555-555-5555'")])"
                            PopupTemplate="@(new PopupTemplate("ex ut quis",
                                    "non",
                                    ["odio"],
                                [new FieldInfo("status",
                                        "nemo",
                                        "illo",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateLeShortTime24),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                [new TextPopupContent("id in facere")],
                                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                        "category",
                                        "fugit esse nemo",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("deleniti incidunt corporis",
                                        "https://picsum.photos/640/480/?image=336",
                                        "d13a634d-2c76-3c16-655f-36bab229f33d",
                                        () => { Console.WriteLine("libero"); return Task.CompletedTask; },
                                        "category",
                                        true,
                                        true,
                                        true,
                                        "ullam")]))"
                            Renderer="@(new SimpleRenderer(new TextSymbol("impedit placeat aut",
                                    new MapColor(250, 197, 32),
                                    new MapColor(67, 17, 253),
                                        new Dimension(132.5549),
                                    new MapFont(new Dimension(666.3095),
                                            "Georgia",
                                        MapFontStyle.Italic,
                                        FontWeight.Bold,
                                        TextDecoration.LineThrough),
                                        161.0584,
                                    new MapColor(235, 157, 2),
                                    new MapColor(236, 198, 30),
                                        431.2951,
                                    HorizontalAlignment.Right,
                                        true,
                                        367.8282,
                                        new Dimension(131.3387),
                                        true),
                                    "voluptate",
                                [new ColorVariable("aliquid",
                                        "laboriosam",
                                    [new ColorStop(184.6323,
                                        new MapColor(47, 97, 177),
                                            "libero"),
                                    new ColorStop(671.5898,
                                        new MapColor(185, 204, 80),
                                            "nobis")],
                                    new VisualVariableLegendOptions(true,
                                            "cupiditate et quod"),
                                        "quisquam",
                                        "libero perferendis deserunt"),
                                new OpacityVariable("voluptas",
                                        "quam",
                                    [new OpacityStop(688.0493,
                                            0.5145,
                                            "aut")],
                                    new VisualVariableLegendOptions(true,
                                            "qui exercitationem mollitia"),
                                        "dicta",
                                        "inventore accusamus autem")],
                                new AuthoringInfo(ClassificationMethod.EqualInterval,
                                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                            new MapColor(93, 80, 34),
                                            new MapColor(18, 209, 69))]),
                                        37.6314,
                                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(369.0443,
                                                224.0999),
                                        new AuthoringInfoField1ClassBreakInfos(462.3853,
                                                132.8830)],
                                            "inventore",
                                            "velit",
                                            "quam"),
                                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(432.5166,
                                                541.4351)],
                                            "est",
                                            "consectetur",
                                            "saepe"),
                                        ["omnis"],
                                    AuthoringInfoFlowTheme.FlowLine,
                                        "labore",
                                        true,
                                    LengthUnit.Kilometers,
                                        311.3692,
                                        322.9267,
                                        983.8435,
                                        176.2408)))"
                            Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                            <Sublayer 
                                SublayerId="@(7)"
                                LabelsVisible="@(true)"
                                LegendEnabled="@(true)"
                                ListMode="@(ListMode.Show)"
                                MaxScale="@(12056861.9381)"
                                MinScale="@(46913.3889)"
                                Opacity="@(0.4672)"
                                PopupEnabled="@(true)"
                                Title="@("quasi asperiores consequatur")"
                                Visible="@(true)"
                                DefinitionExpression="@("quia")"
                                Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                                <Sublayer 
                                    SublayerId="@(1)"
                                    LabelsVisible="@(true)"
                                    LegendEnabled="@(true)"
                                    ListMode="@(ListMode.Show)"
                                    MaxScale="@(41932492.5960)"
                                    MinScale="@(26646.9916)"
                                    Opacity="@(0.5225)"
                                    PopupEnabled="@(true)"
                                    Title="@("hic temporibus commodi")"
                                    Visible="@(true)"
                                    DefinitionExpression="@("laboriosam")"
                                    Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                                    <Sublayer 
                                        SublayerId="@(5)"
                                        LabelsVisible="@(true)"
                                        LegendEnabled="@(true)"
                                        ListMode="@(ListMode.Hide)"
                                        MaxScale="@(31327007.0951)"
                                        MinScale="@(40713.7900)"
                                        Opacity="@(0.7015)"
                                        PopupEnabled="@(true)"
                                        Title="@("ut aperiam recusandae")"
                                        Visible="@(true)"
                                        DefinitionExpression="@("quia")"
                                        Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                                        <Sublayer 
                                            SublayerId="@(2)"
                                            LabelsVisible="@(true)"
                                            LegendEnabled="@(true)"
                                            ListMode="@(ListMode.Show)"
                                            MaxScale="@(24372271.3111)"
                                            MinScale="@(18415.4566)"
                                            Opacity="@(0.0187)"
                                            PopupEnabled="@(true)"
                                            Title="@("et cum officia")"
                                            Visible="@(true)"
                                            DefinitionExpression="@("excepturi")"
                                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                                            <Sublayer 
                                                SublayerId="@(6)"
                                                LabelsVisible="@(true)"
                                                LegendEnabled="@(true)"
                                                ListMode="@(ListMode.Show)"
                                                MaxScale="@(8285245.0100)"
                                                MinScale="@(31360.4375)"
                                                Opacity="@(0.4257)"
                                                PopupEnabled="@(true)"
                                                Title="@("voluptatem voluptas non")"
                                                Visible="@(true)"
                                                DefinitionExpression="@("omnis")"
                                                Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                                                <Sublayer 
                                                    SublayerId="@(3)"
                                                    LabelsVisible="@(true)"
                                                    LegendEnabled="@(true)"
                                                    ListMode="@(ListMode.Hide)"
                                                    MaxScale="@(19378874.7514)"
                                                    MinScale="@(2256.6434)"
                                                    Opacity="@(0.5894)"
                                                    PopupEnabled="@(true)"
                                                    Title="@("voluptas aut sapiente")"
                                                    Visible="@(true)"
                                                    DefinitionExpression="@("dolores")"
                                                    Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                                                    <Sublayer 
                                                        Visible="@(true)"
>
                                                    </Sublayer>
                                                    <SimpleRenderer 
>
                                                    </SimpleRenderer>
                                                    <PopupTemplate 
                                                        Title="@("qui a quo")"
                                                        StringContent="@("qui")"
>
                                                    </PopupTemplate>
                                                    <Label 
>
                                                    </Label>
                                                    <LayerFloorInfo 
                                                        FloorField="@("ea")">
                                                    </LayerFloorInfo>
                                                </Sublayer>
                                                <SimpleRenderer 
                                                    AuthoringInfo="@(new AuthoringInfo())">
                                                </SimpleRenderer>
                                                <PopupTemplate 
                                                    Title="@("quam et quidem")"
                                                    StringContent="@("at")"
                                                    OutFields="@(["omnis",
                                                        "reiciendis"])"
                                                    FieldInfos="@([new FieldInfo(null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                            true)])"
                                                    Content="@([new AttachmentsPopupContent(),
                                                    new FieldsPopupContent([new FieldInfo(null,
                                                            null,
                                                            null,
                                                            null,
                                                            null,
                                                            null,
                                                                true),
                                                        new FieldInfo(null,
                                                            null,
                                                            null,
                                                            null,
                                                            null,
                                                            null,
                                                                true)])])"
                                                    ExpressionInfos="@([new ExpressionInfo()])"
                                                    OverwriteActions="@(true)"
                                                    ReturnGeometry="@(true)"
                                                    Actions="@([new ActionButton("autem neque inventore",
                                                        "https://picsum.photos/640/480/?image=221",
                                                        "8f40c333-48da-dd99-ad7f-c305b607b8a5",
                                                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                                        "avatar",
                                                        true,
                                                        true,
                                                        true,
                                                        "vero")])">
                                                </PopupTemplate>
                                                <Label 
                                                    LabelPlacement="@(LabelPlacement.AboveStart)"
                                                    LabelExpression="@("nisi")"
                                                    LabelExpressionInfo="@(new LabelExpressionInfo())"
                                                    AllowOverrun="@(true)"
                                                    DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                                    LabelPosition="@(LabelPosition.Curved)"
                                                    MaxScale="@(3666701.4134)"
                                                    MinScale="@(8144.2341)"
                                                    RepeatLabel="@(true)"
                                                    RepeatLabelDistance="@(new Dimension(842.4779))"
                                                    Symbol="@(new TextSymbol("asperiores aut voluptas"))"
                                                    UseCodedValues="@(true)"
                                                    Where="@("ObjectID = 1")">
                                                </Label>
                                                <LayerFloorInfo 
                                                    FloorField="@("provident")">
                                                </LayerFloorInfo>
                                            </Sublayer>
                                            <SimpleRenderer 
                                                AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.StandardDeviation,
                                                    new AlgorithmicColorRamp(Algorithm.Hsv),
                                                        978.9485,
                                                    new AuthoringInfoField(),
                                                    new AuthoringInfoField(),
                                                        ["rem"],
                                                    AuthoringInfoFlowTheme.WaveFront,
                                                        "nulla",
                                                        true,
                                                    LengthUnit.Miles,
                                                        617.7287,
                                                        424.2497,
                                                        984.3169,
                                                        416.2723))">
                                            </SimpleRenderer>
                                            <PopupTemplate 
                                                Title="@("aut omnis dolor")"
                                                StringContent="@("magni")"
                                                OutFields="@(["delectus"])"
                                                FieldInfos="@([new FieldInfo("createdAt",
                                                        "autem",
                                                        "sit",
                                                    StringFieldOption.RichText,
                                                    new FieldInfoFormat(),
                                                        true,
                                                        true,
                                                    StatisticType.Avg)])"
                                                Content="@([new ExpressionPopupContent(new ElementExpressionInfo()),
                                                new FieldsPopupContent([new FieldInfo(null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                            true),
                                                    new FieldInfo(null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                            true)],
                                                        "nihil odit ea",
                                                        "provident placeat fugit")])"
                                                ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                                        "token",
                                                        "quo autem beatae"),
                                                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                                        "phone",
                                                        "et in voluptates")])"
                                                OverwriteActions="@(true)"
                                                ReturnGeometry="@(true)"
                                                Actions="@([new ActionButton("minus quae eius",
                                                    "https://picsum.photos/640/480/?image=783",
                                                    "384df28d-92c3-869b-9a31-ae654710f6ea",
                                                    () => { Console.WriteLine("veniam"); return Task.CompletedTask; },
                                                    "createdAt",
                                                    true,
                                                    true,
                                                    true,
                                                    "qui")])">
                                            </PopupTemplate>
                                            <Label 
                                                LabelPlacement="@(LabelPlacement.BelowRight)"
                                                LabelExpression="@("doloribus")"
                                                LabelExpressionInfo="@(new LabelExpressionInfo())"
                                                AllowOverrun="@(true)"
                                                DeconflictionStrategy="@(DeconflictionStrategy.None)"
                                                LabelPosition="@(LabelPosition.Curved)"
                                                MaxScale="@(37380702.7138)"
                                                MinScale="@(32393.7285)"
                                                RepeatLabel="@(true)"
                                                RepeatLabelDistance="@(new Dimension(340.6471))"
                                                Symbol="@(new TextSymbol("eum dolor commodi",
                                                    new MapColor(16, 14, 91),
                                                    new MapColor(104, 66, 19),
                                                        null,
                                                    new MapFont(),
                                                        629.1751,
                                                    new MapColor(102, 189, 11),
                                                    new MapColor(188, 160, 14),
                                                        296.2375,
                                                    HorizontalAlignment.Right,
                                                        true,
                                                        288.7206,
                                                        null,
                                                        true))"
                                                UseCodedValues="@(true)"
                                                Where="@("Name = 'John Doe'")">
                                            </Label>
                                            <LayerFloorInfo 
                                                FloorField="@("cumque")">
                                            </LayerFloorInfo>
                                        </Sublayer>
                                        <UniqueValueRenderer 
                                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                                    new MapColor(178, 15, 176),
                                                    new MapColor(84, 59, 183)),
                                                    865.6800,
                                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(),
                                                    new AuthoringInfoField1ClassBreakInfos()],
                                                        "laboriosam",
                                                        "culpa",
                                                        "non"),
                                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(),
                                                    new AuthoringInfoField1ClassBreakInfos()],
                                                        "et",
                                                        "possimus",
                                                        "molestiae"),
                                                    ["ea"],
                                                AuthoringInfoFlowTheme.FlowLine,
                                                    "aliquid",
                                                    true,
                                                LengthUnit.Kilometers,
                                                    473.1903,
                                                    686.8283,
                                                    478.5986,
                                                    975.8348))">
                                        </UniqueValueRenderer>
                                        <PopupTemplate 
                                            Title="@("deleniti ratione sit")"
                                            StringContent="@("molestiae")"
                                            OutFields="@(["alias",
                                                "aliquid"])"
                                            FieldInfos="@([new FieldInfo("comment",
                                                    "ut",
                                                    "in",
                                                StringFieldOption.TextBox,
                                                new FieldInfoFormat(2,
                                                        true,
                                                    DateFormat.Year),
                                                    true,
                                                    true,
                                                StatisticType.Var),
                                            new FieldInfo("avatar",
                                                    "nostrum",
                                                    "culpa",
                                                StringFieldOption.TextArea,
                                                new FieldInfoFormat(9,
                                                        true,
                                                    DateFormat.ShortDateShortTime),
                                                    true,
                                                    true,
                                                StatisticType.Avg)])"
                                            Content="@([new AttachmentsPopupContent("quis optio dolorem",
                                                    "voluptas qui eum est",
                                                    AttachmentsPopupContentDisplayType.Auto),
                                            new RelationshipPopupContent("expedita id aut",
                                                    "est sint cupiditate corrupti",
                                                    5,
                                                    "nesciunt",
                                                [new RelatedRecordsInfoFieldOrder("maxime",
                                                    OrderBy.Desc),
                                                new RelatedRecordsInfoFieldOrder("rem",
                                                    OrderBy.Desc)],
                                                    6)])"
                                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                                    "password",
                                                    "esse quis reprehenderit",
                                                    ExpressionInfoReturnType.String),
                                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                                    "comment",
                                                    "voluptas placeat nostrum",
                                                    ExpressionInfoReturnType.String)])"
                                            OverwriteActions="@(true)"
                                            ReturnGeometry="@(true)"
                                            Actions="@([new ActionButton("qui dolorum quod",
                                                "https://picsum.photos/640/480/?image=411",
                                                "e6e9fadf-5f19-61b3-5971-9b86fafad396",
                                                () => { Console.WriteLine("nostrum"); return Task.CompletedTask; },
                                                "group",
                                                true,
                                                true,
                                                true,
                                                "ipsum"),
                                                new ActionButton("et dolores eos",
                                                    "https://picsum.photos/640/480/?image=686",
                                                    "48b9266f-b16d-247c-8ebe-16e7d3a6bd4a",
                                                    () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                                                    "id",
                                                    true,
                                                    true,
                                                    true,
                                                    "quo")])">
                                        </PopupTemplate>
                                        <Label 
                                            LabelPlacement="@(LabelPlacement.AboveCenter)"
                                            LabelExpression="@("in")"
                                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                                            AllowOverrun="@(true)"
                                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                            LabelPosition="@(LabelPosition.Parallel)"
                                            MaxScale="@(39776612.4963)"
                                            MinScale="@(48877.3817)"
                                            RepeatLabel="@(true)"
                                            RepeatLabelDistance="@(new Dimension(258.2673))"
                                            Symbol="@(new TextSymbol("voluptatem ea sunt",
                                                new MapColor(97, 10, 209),
                                                new MapColor(29, 53, 180),
                                                    new Dimension(990.4029),
                                                new MapFont(new Dimension(52.4375),
                                                        "Helvetica",
                                                    MapFontStyle.Normal,
                                                    FontWeight.Bold,
                                                    TextDecoration.LineThrough),
                                                    264.7729,
                                                new MapColor(156, 71, 237),
                                                new MapColor(230, 99, 14),
                                                    958.6489,
                                                HorizontalAlignment.Center,
                                                    true,
                                                    289.5435,
                                                    new Dimension(698.3298),
                                                    true))"
                                            UseCodedValues="@(true)"
                                            Where="@("1 = 1")">
                                        </Label>
                                        <LayerFloorInfo 
                                            FloorField="@("et")">
                                        </LayerFloorInfo>
                                    </Sublayer>
                                    <SimpleRenderer 
                                        AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                            new AlgorithmicColorRamp(Algorithm.Hsv,
                                                new MapColor(203, 230, 65),
                                                new MapColor(134, 223, 248)),
                                                652.5116,
                                            new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(79.4837,
                                                        803.3110),
                                                new AuthoringInfoField1ClassBreakInfos(763.5914,
                                                        233.6573)],
                                                    "vel",
                                                    "repudiandae",
                                                    "dolor"),
                                            new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(790.7654,
                                                        714.2396),
                                                new AuthoringInfoField1ClassBreakInfos(692.1863,
                                                        609.5393)],
                                                    "soluta",
                                                    "fugiat",
                                                    "rerum"),
                                                ["est"],
                                            AuthoringInfoFlowTheme.WaveFront,
                                                "assumenda",
                                                true,
                                            LengthUnit.Inches,
                                                174.3851,
                                                761.0906,
                                                484.5471,
                                                634.2521))">
                                    </SimpleRenderer>
                                    <PopupTemplate 
                                        Title="@("cum rerum illo")"
                                        StringContent="@("qui")"
                                        OutFields="@(["delectus"])"
                                        FieldInfos="@([new FieldInfo("group",
                                                "accusamus",
                                                "deleniti",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(4,
                                                    true,
                                                DateFormat.ShortDateLeLongTime),
                                                true,
                                                true,
                                            StatisticType.Sum)])"
                                        Content="@([new MediaPopupContent("amet provident odio",
                                                "et placeat",
                                            [new ColumnChartMediaInfo("ex temporibus quo",
                                                    "aut",
                                                    "saepe vel soluta",
                                                new ChartMediaInfoValue(["sed",
                                                        "sunt"],
                                                        "non",
                                                        "doloribus",
                                                    [new ChartMediaInfoValueSeries(),
                                                    new ChartMediaInfoValueSeries()],
                                                    [new MapColor(225, 164, 43),
                                                    new MapColor(243, 194, 27)])),
                                            new PieChartMediaInfo("magnam nulla aliquam",
                                                    "voluptas",
                                                    "sapiente neque voluptatem",
                                                new ChartMediaInfoValue(["illo"],
                                                        "voluptatem",
                                                        "fugit",
                                                    [new ChartMediaInfoValueSeries()],
                                                    [new MapColor(199, 254, 117),
                                                    new MapColor(175, 27, 127)]))],
                                                3)])"
                                        ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                                "phone",
                                                "maxime dolorem officiis",
                                                ExpressionInfoReturnType.String)])"
                                        OverwriteActions="@(true)"
                                        ReturnGeometry="@(true)"
                                        Actions="@([new ActionButton("velit vel vel",
                                            "https://picsum.photos/640/480/?image=913",
                                            "1303c16a-a73e-f034-53d2-45b366855d09",
                                            () => { Console.WriteLine("saepe"); return Task.CompletedTask; },
                                            "email",
                                            true,
                                            true,
                                            true,
                                            "voluptas"),
                                            new ActionButton("deleniti nulla consequatur",
                                                "https://picsum.photos/640/480/?image=551",
                                                "31f978db-919c-a33e-766d-5a4fad8d2028",
                                                () => { Console.WriteLine("molestiae"); return Task.CompletedTask; },
                                                "email",
                                                true,
                                                true,
                                                true,
                                                "quis")])">
                                    </PopupTemplate>
                                    <Label 
                                        LabelPlacement="@(LabelPlacement.AboveStart)"
                                        LabelExpression="@("repudiandae")"
                                        LabelExpressionInfo="@(new LabelExpressionInfo())"
                                        AllowOverrun="@(true)"
                                        DeconflictionStrategy="@(DeconflictionStrategy.None)"
                                        LabelPosition="@(LabelPosition.Curved)"
                                        MaxScale="@(21108260.2719)"
                                        MinScale="@(6924.2128)"
                                        RepeatLabel="@(true)"
                                        RepeatLabelDistance="@(new Dimension(912.7073))"
                                        Symbol="@(new TextSymbol("eos esse laboriosam",
                                            new MapColor(36, 142, 118),
                                            new MapColor(202, 219, 8),
                                                new Dimension(326.0192),
                                            new MapFont(new Dimension(992.0858),
                                                    "Palatino",
                                                MapFontStyle.Italic,
                                                FontWeight.Bold,
                                                TextDecoration.None),
                                                923.7358,
                                            new MapColor(118, 197, 240),
                                            new MapColor(97, 116, 168),
                                                903.0640,
                                            HorizontalAlignment.Right,
                                                true,
                                                978.0613,
                                                new Dimension(344.1847),
                                                true))"
                                        UseCodedValues="@(true)"
                                        Where="@("Street = '123 Main St.'")">
                                    </Label>
                                    <LayerFloorInfo 
                                        FloorField="@("mollitia")">
                                    </LayerFloorInfo>
                                </Sublayer>
                                <SimpleRenderer 
                                    AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                        new AlgorithmicColorRamp(Algorithm.LabLch,
                                            new MapColor(190, 144, 190),
                                            new MapColor(116, 54, 252)),
                                            363.3230,
                                        new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(954.5110,
                                                    652.6203)],
                                                "pariatur",
                                                "ut",
                                                "fuga"),
                                        new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(419.0323,
                                                    271.1964),
                                            new AuthoringInfoField1ClassBreakInfos(818.8563,
                                                    550.4937)],
                                                "veniam",
                                                "cum",
                                                "eveniet"),
                                            ["debitis"],
                                        AuthoringInfoFlowTheme.WaveFront,
                                            "repellendus",
                                            true,
                                        LengthUnit.Millimeters,
                                            754.3607,
                                            46.0350,
                                            125.1485,
                                            857.4613))">
                                </SimpleRenderer>
                                <PopupTemplate 
                                    Title="@("facilis molestiae reiciendis")"
                                    StringContent="@("qui")"
                                    OutFields="@(["natus"])"
                                    FieldInfos="@([new FieldInfo("comment",
                                            "sed",
                                            "nemo",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(3,
                                                true,
                                            DateFormat.LongMonthDayYearLongTime),
                                            true,
                                            true,
                                        StatisticType.Stddev)])"
                                    Content="@([new RelationshipPopupContent("nesciunt eum magnam",
                                            "facere dignissimos dolor",
                                            9,
                                            "quis",
                                        [new RelatedRecordsInfoFieldOrder("voluptate",
                                            OrderBy.Asc)],
                                            4),
                                    new RelationshipPopupContent("totam at omnis",
                                            "ut veritatis exercitationem et",
                                            7,
                                            "molestiae",
                                        [new RelatedRecordsInfoFieldOrder("omnis",
                                            OrderBy.Asc)],
                                            6)])"
                                    ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                            "status",
                                            "quo non vel",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                            "phone",
                                            "quis perspiciatis iure",
                                            ExpressionInfoReturnType.String)])"
                                    OverwriteActions="@(true)"
                                    ReturnGeometry="@(true)"
                                    Actions="@([new ActionButton("error assumenda aut",
                                        "https://picsum.photos/640/480/?image=985",
                                        "81965fdd-e9f6-f994-2d8f-b5b09298e17c",
                                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                        "token",
                                        true,
                                        true,
                                        true,
                                        "eligendi"),
                                        new ActionButton("sunt fuga et",
                                            "https://picsum.photos/640/480/?image=519",
                                            "662b3f50-e07e-ca11-7dd0-4ee99ab1fec7",
                                            () => { Console.WriteLine("minima"); return Task.CompletedTask; },
                                            "phone",
                                            true,
                                            true,
                                            true,
                                            "quisquam")])">
                                </PopupTemplate>
                                <Label 
                                    LabelPlacement="@(LabelPlacement.BelowRight)"
                                    LabelExpression="@("quae")"
                                    LabelExpressionInfo="@(new LabelExpressionInfo())"
                                    AllowOverrun="@(true)"
                                    DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                    LabelPosition="@(LabelPosition.Curved)"
                                    MaxScale="@(47884709.6507)"
                                    MinScale="@(46266.1922)"
                                    RepeatLabel="@(true)"
                                    RepeatLabelDistance="@(new Dimension(283.9294))"
                                    Symbol="@(new TextSymbol("tenetur et eos",
                                        new MapColor(106, 137, 129),
                                        new MapColor(245, 105, 25),
                                            new Dimension(290.9806),
                                        new MapFont(new Dimension(188.8744),
                                                "Bookman",
                                            MapFontStyle.Normal,
                                            FontWeight.Normal,
                                            TextDecoration.Underline),
                                            413.5075,
                                        new MapColor(68, 12, 92),
                                        new MapColor(44, 52, 49),
                                            828.6095,
                                        HorizontalAlignment.Left,
                                            true,
                                            682.9491,
                                            new Dimension(899.2587),
                                            true))"
                                    UseCodedValues="@(true)"
                                    Where="@("Street = '123 Main St.'")">
                                </Label>
                                <LayerFloorInfo 
                                    FloorField="@("impedit")">
                                </LayerFloorInfo>
                            </Sublayer>
                        </Sublayer>
                    </MapImageLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(mapImageLayer!);
        await AssertJavaScript("dispatchEvent", args: [mapImageLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "map-image");
        var createExportImageParametersMethodResult = await mapImageLayer.CreateExportImageParameters(new Extent(-46.4081,
                    -15.0485,
                    -48.1633,
                    -50.2028,
                    798.2619,
                    591.9273,
                    119.0627,
                    648.1380,
                new SpatialReference(7,
                        "dolorum",
                        "provident",
                        "voluptatibus"),
                    true,
                    true),
                9,
                9,
            new MapImageLayerCreateExportImageParametersOptions(888.5622,
                    34.0009,
                    "accusantium"));
        Assert.IsNotNull(createExportImageParametersMethodResult);
        var createServiceSublayersMethodResult = await mapImageLayer.CreateServiceSublayers();
        Assert.IsNotNull(createServiceSublayersMethodResult);
        var fetchImageMethodResult = await mapImageLayer.FetchImage(new Extent(-117.1651,
                    106.2693,
                    -82.3037,
                    4.0347,
                    560.6417,
                    733.9237,
                    847.7223,
                    931.4901,
                new SpatialReference(5,
                        "laudantium",
                        "dicta",
                        "veniam"),
                    true,
                    true),
                1,
                9,
            new MapImageLayerFetchImageOptions(851.2586,
                    338.4809,
                    "optio"));
        Assert.IsNotNull(fetchImageMethodResult);
        var findSublayerByIdMethodResult = await mapImageLayer.FindSublayerById(5);
        Assert.IsNotNull(findSublayerByIdMethodResult);
        var loadAllMethodResult = await mapImageLayer.LoadAll();
        Assert.IsNotNull(loadAllMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await mapImageLayer.SetPortalItem(testPortalItem);
        var portalItem = await mapImageLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await mapImageLayer.SetBlendMode(testBlendMode);
        var blendMode = await mapImageLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2001, 8, 6, 10, 30, 28),
                    new DateTime(2008, 3, 9, 8, 18, 49));
        await mapImageLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await mapImageLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("et",
                    "numquam",
                new TimeExtent(new DateTime(2011, 9, 3, 11, 47, 16),
                        new DateTime(2013, 11, 3, 6, 56, 8)),
                new TimeInterval(TemporalTime.Years,
                        656.0814),
                    [new DateTime(2017, 7, 10, 6, 11, 38)],
                    "Australia/Adelaide",
                    "earum");
        await mapImageLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await mapImageLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        IReadOnlyList<Sublayer> testSublayers = [new Sublayer(9,
                    true,
                    true,
                ListMode.Hide,
                    29384330.1155,
                    45017.3412,
                    0.9200,
                    true,
                    "cum voluptas laboriosam",
                    true,
                    "at",
                new LayerFloorInfo("ut"),
                [new Label(LabelPlacement.BelowLeft,
                        "inventore",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.None,
                    LabelPosition.Curved,
                        44740780.9590,
                        19445.3742,
                        true,
                        new Dimension(614.6016),
                    new TextSymbol("alias et illum",
                        new MapColor(113, 2, 150),
                        new MapColor(233, 244, 164),
                            new Dimension(239.5625),
                        new MapFont(new Dimension(277.2222),
                                "Bookman",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            431.8722,
                        new MapColor(51, 208, 19),
                        new MapColor(81, 60, 139),
                            298.9572,
                        HorizontalAlignment.Left,
                            true,
                            24.9459,
                            new Dimension(672.0567),
                            true),
                        true,
                        "City = 'Toronto'"),
                new Label(LabelPlacement.BelowBefore,
                        "et",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.None,
                    LabelPosition.Curved,
                        4259928.2398,
                        4791.5147,
                        true,
                        new Dimension(828.6901),
                    new TextSymbol("officia temporibus qui",
                        new MapColor(92, 191, 56),
                        new MapColor(192, 176, 97),
                            new Dimension(413.9453),
                        new MapFont(new Dimension(103.3932),
                                "Courier New",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            223.8546,
                        new MapColor(49, 181, 112),
                        new MapColor(253, 134, 166),
                            973.1857,
                        HorizontalAlignment.Left,
                            true,
                            943.4762,
                            new Dimension(583.6837),
                            true),
                        true,
                        "Province = 'Ontario'")],
                new PopupTemplate("iure tempore impedit",
                        "et",
                        ["minima"],
                    [new FieldInfo("name",
                            "sit",
                            "voluptatem",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.LongDateLongTime),
                            true,
                            true,
                        StatisticType.Var),
                    new FieldInfo("createdAt",
                            "in",
                            "ut",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLe),
                            true,
                            true,
                        StatisticType.Sum)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "beatae",
                                "expedita quod omnis"))],
                    [new ExpressionInfo("return $feature['FieldName'];",
                            "category",
                            "et quia aliquam",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Name;",
                            "title",
                            "dolores impedit nemo",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("asperiores quo voluptates",
                            "https://picsum.photos/640/480/?image=698",
                            "a6a4e68a-b31a-d6b4-f4d5-48e628308b06",
                            () => { Console.WriteLine("libero"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "id"),
                            new ActionButton("quod consequatur nesciunt",
                                "https://picsum.photos/640/480/?image=655",
                                "50316906-ef3f-833d-2d06-79bc04533313",
                                () => { Console.WriteLine("ea"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "et")]))];
        await mapImageLayer.SetSublayers(testSublayers);
        var sublayers = await mapImageLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        ListMode testListMode = ListMode.Hide;
        await mapImageLayer.SetListMode(testListMode);
        var listMode = await mapImageLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(155.8353,
                    12.4510,
                    89.3204,
                    -58.9158,
                    471.7469,
                    935.5846,
                    371.2540,
                    500.8824,
                new SpatialReference(8,
                        "voluptatem",
                        "autem",
                        "quia"),
                    true,
                    true);
        await mapImageLayer.SetFullExtent(testFullExtent);
        var fullExtent = await mapImageLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Sublayer> testSubtables = [new Sublayer(3,
                    true,
                    true,
                ListMode.Show,
                    27241233.2608,
                    38320.2432,
                    0.2760,
                    true,
                    "repellendus mollitia pariatur",
                    true,
                    "cumque",
                new LayerFloorInfo("minima"),
                [new Label(LabelPlacement.BelowLeft,
                        "numquam",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.Static,
                    LabelPosition.Parallel,
                        32827379.4218,
                        18644.5447,
                        true,
                        new Dimension(494.3995),
                    new TextSymbol("pariatur non ab",
                        new MapColor(209, 171, 167),
                        new MapColor(217, 5, 225),
                            new Dimension(888.5521),
                        new MapFont(new Dimension(454.5014),
                                "Palatino",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            472.5594,
                        new MapColor(131, 25, 216),
                        new MapColor(137, 108, 137),
                            518.7521,
                        HorizontalAlignment.Center,
                            true,
                            739.2953,
                            new Dimension(73.8146),
                            true),
                        true,
                        "Phone = '555-555-5555'")],
                new PopupTemplate("est est quae",
                        "qui",
                        ["dolorem",
                            "suscipit"],
                    [new FieldInfo("token",
                            "soluta",
                            "eos",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongDateShortTime),
                            true,
                            true,
                        StatisticType.Sum),
                    new FieldInfo("phone",
                            "laudantium",
                            "qui",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(4,
                                true,
                            DateFormat.ShortDate),
                            true,
                            true,
                        StatisticType.Max)],
                    [new RelationshipPopupContent("aut assumenda omnis",
                            "beatae rerum molestiae",
                            5,
                            "maxime",
                        [new RelatedRecordsInfoFieldOrder("numquam",
                            OrderBy.Desc),
                        new RelatedRecordsInfoFieldOrder("hic",
                            OrderBy.Asc)],
                            2),
                    new TextPopupContent("molestiae necessitatibus odio")],
                    [new ExpressionInfo("return $feature['FieldName'];",
                            "title",
                            "corrupti quisquam porro",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("et expedita et",
                            "https://picsum.photos/640/480/?image=848",
                            "bf37037e-5e51-5fa9-fc47-92dbe98b9993",
                            () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                            "avatar",
                            true,
                            true,
                            true,
                            "qui"),
                            new ActionButton("commodi qui non",
                                "https://picsum.photos/640/480/?image=305",
                                "461b2d9b-f1ed-fb38-3ca1-2a6d7b8d9588",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "quam")])),
            new Sublayer(5,
                    true,
                    true,
                ListMode.Show,
                    20503558.0153,
                    13511.8135,
                    0.9984,
                    true,
                    "qui illo cupiditate",
                    true,
                    "illo",
                new LayerFloorInfo("iusto"),
                [new Label(LabelPlacement.AboveAlong,
                        "consectetur",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.None,
                    LabelPosition.Curved,
                        48225262.9144,
                        19950.6720,
                        true,
                        new Dimension(714.7682),
                    new TextSymbol("nesciunt dolorum ex",
                        new MapColor(187, 199, 240),
                        new MapColor(25, 35, 117),
                            new Dimension(137.3796),
                        new MapFont(new Dimension(522.3600),
                                "Georgia",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            479.8092,
                        new MapColor(102, 33, 210),
                        new MapColor(168, 86, 81),
                            298.4281,
                        HorizontalAlignment.Right,
                            true,
                            458.6719,
                            new Dimension(427.2557),
                            true),
                        true,
                        "Name = 'John Doe'"),
                new Label(LabelPlacement.AboveStart,
                        "assumenda",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.None,
                    LabelPosition.Curved,
                        29799602.3749,
                        48295.2144,
                        true,
                        new Dimension(856.2860),
                    new TextSymbol("neque ad rerum",
                        new MapColor(122, 223, 129),
                        new MapColor(179, 56, 138),
                            new Dimension(947.8808),
                        new MapFont(new Dimension(215.4871),
                                "Arial",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            153.4219,
                        new MapColor(218, 251, 220),
                        new MapColor(109, 105, 146),
                            829.1875,
                        HorizontalAlignment.Left,
                            true,
                            64.5749,
                            new Dimension(195.2602),
                            true),
                        true,
                        "Province = 'Ontario'")],
                new PopupTemplate("cumque aut dolore",
                        "at",
                        ["deleniti",
                            "et"],
                    [new FieldInfo("comment",
                            "atque",
                            "cumque",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLongTime24),
                            true,
                            true,
                        StatisticType.Var)],
                    [new RelationshipPopupContent("odit est tempore",
                            "vero atque dolores",
                            6,
                            "est",
                        [new RelatedRecordsInfoFieldOrder("distinctio",
                            OrderBy.Asc),
                        new RelatedRecordsInfoFieldOrder("nesciunt",
                            OrderBy.Desc)],
                            5)],
                    [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "updatedAt",
                            "et excepturi enim",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "password",
                            "adipisci officia voluptate",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("eum magni tempora",
                            "https://picsum.photos/640/480/?image=778",
                            "ac6be7ef-182b-354d-ff2a-b4861e7f65b1",
                            () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "qui")]))];
        await mapImageLayer.SetSubtables(testSubtables);
        var subtables = await mapImageLayer.GetSubtables();
        Assert.AreEqual(testSubtables, subtables);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    611.3389);
        await mapImageLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await mapImageLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 6, 5, 8, 9, 44),
                    new DateTime(2005, 10, 18, 20, 12, 16));
        await mapImageLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await mapImageLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
