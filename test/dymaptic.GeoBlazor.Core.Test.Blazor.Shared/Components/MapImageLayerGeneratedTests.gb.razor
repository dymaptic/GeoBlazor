@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedMapImageLayer(Action renderHandler)
    {
        MapImageLayer? mapImageLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <MapImageLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/USA/MapServer")"
                        BlendMode="@(BlendMode.Minus)"
                        Dpi="@(255.8619)"
                        Effect="@(new Effect("ut",
                            21252903.6478))"
                        GdbVersion="@("5.6.1.0")"
                        ImageFormat="@(MapImageFormat.Png8)"
                        ImageMaxHeight="@(1)"
                        ImageMaxWidth="@(5)"
                        ImageTransparency="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(34593969.5624)"
                        MinScale="@(3759.0748)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(801.8271)"
                        UseViewTime="@(true)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        Opacity="@(0.2399)"
                        Copyright="@("id")"
                        Title="@("ullam qui et")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(309.0175)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("commodi")"
                            EndField="@("rerum")"
                            Stops="@([new DateTime(2017, 7, 4, 22, 52, 31)])"
                            TimeZone="@("Asia/Urumqi")"
                            TrackIdField="@("modi")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(869.1400)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2004, 1, 16, 1, 46, 0))"
                                End="@(new DateTime(2023, 4, 7, 13, 54, 4))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2005, 8, 12, 11, 36, 56))"
                            End="@(new DateTime(2011, 3, 23, 6, 0, 5))">
                        </TimeExtent>
                        <PortalItem />
                        <Extent 
                            Xmax="@(3.0528)"
                            Xmin="@(-23.9383)"
                            Ymax="@(-78.6329)"
                            Ymin="@(-18.0554)"
                            Zmax="@(873.7464)"
                            Zmin="@(223.9368)"
                            Mmax="@(280.3565)"
                            Mmin="@(593.8480)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("laudantium")"
                                Wkt="@("aspernatur")"
                                Wkt2="@("quia")">
                            </SpatialReference>
                        </Extent>
                        <Sublayer 
                            SublayerId="@(2)"
                            LabelsVisible="@(true)"
                            LegendEnabled="@(true)"
                            ListMode="@(ListMode.Show)"
                            MaxScale="@(42909041.9234)"
                            MinScale="@(12237.3589)"
                            Opacity="@(0.0357)"
                            PopupEnabled="@(true)"
                            Title="@("optio libero est")"
                            Visible="@(true)"
                            DefinitionExpression="@("ut")"
                            FloorInfo="@(new LayerFloorInfo("quia"))"
                            LabelingInfo="@([new Label(LabelPlacement.AboveAfter,
                                    "enim",
                                    new LabelExpressionInfo(),
                                    true,
                                DeconflictionStrategy.Static,
                                LabelPosition.Curved,
                                    33433621.1862,
                                    22795.2357,
                                    true,
                                    new Dimension(437.3125),
                                new TextSymbol("vel quam illum",
                                    new MapColor(69, 39, 250),
                                    new MapColor(184, 44, 131),
                                        new Dimension(654.4227),
                                    new MapFont(new Dimension(293.9181),
                                            "Georgia",
                                        MapFontStyle.Italic,
                                        FontWeight.Lighter,
                                        TextDecoration.None),
                                        585.7070,
                                    new MapColor(229, 197, 109),
                                    new MapColor(30, 141, 57),
                                        800.5835,
                                    HorizontalAlignment.Right,
                                        true,
                                        121.1151,
                                        new Dimension(275.9495),
                                        true),
                                    true,
                                    "Country = 'Canada'")])"
                            PopupTemplate="@(new PopupTemplate("quasi rerum sit",
                                    "id",
                                    ["sed"],
                                [new FieldInfo("id",
                                        "quae",
                                        "voluptatem",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.ShortMonthYear),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                            "et",
                                            "doloribus est ipsa"))],
                                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                        "updatedAt",
                                        "molestiae commodi enim",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("odit distinctio nulla",
                                        "https://picsum.photos/640/480/?image=511",
                                        "bbcb174c-edcc-df90-00f5-bbdfba2438a3",
                                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                        "createdAt",
                                        true,
                                        true,
                                        true,
                                        "cupiditate"),
                                        new ActionButton("at fugit sed",
                                            "https://picsum.photos/640/480/?image=136",
                                            "9add8c0c-ffc0-c9f4-442a-7c00a625d11f",
                                            () => { Console.WriteLine("consequatur"); return Task.CompletedTask; },
                                            "updatedAt",
                                            true,
                                            true,
                                            true,
                                            "alias")]))"
                            Renderer="@(new SimpleRenderer(new TextSymbol("iste temporibus occaecati",
                                    new MapColor(47, 106, 158),
                                    new MapColor(6, 156, 244),
                                        new Dimension(724.8697),
                                    new MapFont(new Dimension(481.5964),
                                            "Palatino",
                                        MapFontStyle.Normal,
                                        FontWeight.Bold,
                                        TextDecoration.LineThrough),
                                        835.9207,
                                    new MapColor(148, 236, 113),
                                    new MapColor(22, 249, 205),
                                        910.4442,
                                    HorizontalAlignment.Left,
                                        true,
                                        753.8623,
                                        new Dimension(531.3350),
                                        true),
                                    "rerum",
                                [new ColorVariable("nisi",
                                        "velit",
                                    [new ColorStop(74.4483,
                                        new MapColor(144, 12, 82),
                                            "quo")],
                                    new VisualVariableLegendOptions(true,
                                            "aut qui ullam"),
                                        "maxime",
                                        "aut qui inventore")],
                                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(132, 254, 114),
                                        new MapColor(161, 65, 60)),
                                        983.4648,
                                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(326.2170,
                                                478.3587),
                                        new AuthoringInfoField1ClassBreakInfos(51.9939,
                                                692.7032)],
                                            "veniam",
                                            "eum",
                                            "eum"),
                                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(164.6319,
                                                732.6420)],
                                            "ipsa",
                                            "id",
                                            "fugit"),
                                        ["repellendus",
                                            "incidunt"],
                                    AuthoringInfoFlowTheme.WaveFront,
                                        "nam",
                                        true,
                                    LengthUnit.Millimeters,
                                        435.6560,
                                        519.1475,
                                        41.8403,
                                        120.8533)))"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                            <Sublayer 
                                SublayerId="@(8)"
                                LabelsVisible="@(true)"
                                LegendEnabled="@(true)"
                                ListMode="@(ListMode.Show)"
                                MaxScale="@(11428696.4140)"
                                MinScale="@(35790.6095)"
                                Opacity="@(0.0122)"
                                PopupEnabled="@(true)"
                                Title="@("quo dicta dolores")"
                                Visible="@(true)"
                                DefinitionExpression="@("mollitia")"
                                Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                                <Sublayer 
                                    SublayerId="@(3)"
                                    LabelsVisible="@(true)"
                                    LegendEnabled="@(true)"
                                    ListMode="@(ListMode.Hide)"
                                    MaxScale="@(5683652.6115)"
                                    MinScale="@(20387.8333)"
                                    Opacity="@(0.9306)"
                                    PopupEnabled="@(true)"
                                    Title="@("ut aperiam deserunt")"
                                    Visible="@(true)"
                                    DefinitionExpression="@("nulla")"
                                    Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0")">
                                    <Sublayer 
                                        SublayerId="@(3)"
                                        LabelsVisible="@(true)"
                                        LegendEnabled="@(true)"
                                        ListMode="@(ListMode.Hide)"
                                        MaxScale="@(11674055.6974)"
                                        MinScale="@(37062.9176)"
                                        Opacity="@(0.4615)"
                                        PopupEnabled="@(true)"
                                        Title="@("nisi provident cumque")"
                                        Visible="@(true)"
                                        DefinitionExpression="@("qui")"
                                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0")">
                                        <Sublayer 
                                            SublayerId="@(5)"
                                            LabelsVisible="@(true)"
                                            LegendEnabled="@(true)"
                                            ListMode="@(ListMode.Show)"
                                            MaxScale="@(24957567.2356)"
                                            MinScale="@(24313.6363)"
                                            Opacity="@(0.6656)"
                                            PopupEnabled="@(true)"
                                            Title="@("exercitationem unde voluptas")"
                                            Visible="@(true)"
                                            DefinitionExpression="@("quia")"
                                            Url="@("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")">
                                            <Sublayer 
                                                SublayerId="@(3)"
                                                LabelsVisible="@(true)"
                                                LegendEnabled="@(true)"
                                                ListMode="@(ListMode.Hide)"
                                                MaxScale="@(13220689.7300)"
                                                MinScale="@(31393.6379)"
                                                Opacity="@(0.3796)"
                                                PopupEnabled="@(true)"
                                                Title="@("excepturi repudiandae ut")"
                                                Visible="@(true)"
                                                DefinitionExpression="@("quia")"
                                                Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                                                <Sublayer 
                                                    SublayerId="@(5)"
                                                    LabelsVisible="@(true)"
                                                    LegendEnabled="@(true)"
                                                    ListMode="@(ListMode.Show)"
                                                    MaxScale="@(10814442.6609)"
                                                    MinScale="@(23269.3459)"
                                                    Opacity="@(0.0651)"
                                                    PopupEnabled="@(true)"
                                                    Title="@("sit voluptatem harum")"
                                                    Visible="@(true)"
                                                    DefinitionExpression="@("tempora")"
                                                    Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                                                    <Sublayer 
                                                        Visible="@(true)"
>
                                                    </Sublayer>
                                                    <SimpleRenderer 
>
                                                    </SimpleRenderer>
                                                    <PopupTemplate 
                                                        Title="@("aut ipsum necessitatibus")"
                                                        StringContent="@("beatae")"
>
                                                    </PopupTemplate>
                                                    <Label 
>
                                                    </Label>
                                                    <LayerFloorInfo 
                                                        FloorField="@("repudiandae")">
                                                    </LayerFloorInfo>
                                                </Sublayer>
                                                <SimpleRenderer 
                                                    AuthoringInfo="@(new AuthoringInfo())">
                                                </SimpleRenderer>
                                                <PopupTemplate 
                                                    Title="@("perspiciatis ut possimus")"
                                                    StringContent="@("fugiat")"
                                                    OutFields="@(["laborum",
                                                        "fugit"])"
                                                    FieldInfos="@([new FieldInfo(null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                        null,
                                                            true)])"
                                                    Content="@([new RelationshipPopupContent(),
                                                    new TextPopupContent()])"
                                                    ExpressionInfos="@([new ExpressionInfo()])"
                                                    OverwriteActions="@(true)"
                                                    ReturnGeometry="@(true)"
                                                    Actions="@([new ActionButton("et natus ut",
                                                        "https://picsum.photos/640/480/?image=560",
                                                        "33676dc3-84fc-0df5-342b-ba681f5fb8f1",
                                                        () => { Console.WriteLine("quo"); return Task.CompletedTask; },
                                                        "group",
                                                        true,
                                                        true,
                                                        true,
                                                        "incidunt")])">
                                                </PopupTemplate>
                                                <Label 
                                                    LabelPlacement="@(LabelPlacement.CenterRight)"
                                                    LabelExpression="@("accusantium")"
                                                    LabelExpressionInfo="@(new LabelExpressionInfo())"
                                                    AllowOverrun="@(true)"
                                                    DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                                    LabelPosition="@(LabelPosition.Parallel)"
                                                    MaxScale="@(5158205.5212)"
                                                    MinScale="@(17520.5293)"
                                                    RepeatLabel="@(true)"
                                                    RepeatLabelDistance="@(new Dimension(641.5814))"
                                                    Symbol="@(new TextSymbol("sint laboriosam quibusdam"))"
                                                    UseCodedValues="@(true)"
                                                    Where="@("Name = 'John Doe'")">
                                                </Label>
                                                <LayerFloorInfo 
                                                    FloorField="@("ut")">
                                                </LayerFloorInfo>
                                            </Sublayer>
                                            <UniqueValueRenderer 
                                                AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                                                    new MultipartColorRamp(),
                                                        406.1288,
                                                    new AuthoringInfoField(),
                                                    new AuthoringInfoField(),
                                                        ["ut"],
                                                    AuthoringInfoFlowTheme.WaveFront,
                                                        "architecto",
                                                        true,
                                                    LengthUnit.Decimeters,
                                                        659.6290,
                                                        200.5217,
                                                        971.9136,
                                                        183.3754))">
                                            </UniqueValueRenderer>
                                            <PopupTemplate 
                                                Title="@("pariatur reprehenderit velit")"
                                                StringContent="@("debitis")"
                                                OutFields="@(["excepturi"])"
                                                FieldInfos="@([new FieldInfo("token",
                                                        "natus",
                                                        "excepturi",
                                                    StringFieldOption.TextArea,
                                                    new FieldInfoFormat(),
                                                        true,
                                                        true,
                                                    StatisticType.Avg),
                                                new FieldInfo("category",
                                                        "harum",
                                                        "laudantium",
                                                    StringFieldOption.TextArea,
                                                    new FieldInfoFormat(),
                                                        true,
                                                        true,
                                                    StatisticType.Avg)])"
                                                Content="@([new RelationshipPopupContent("quae modi quos",
                                                        "non dolore",
                                                        1,
                                                        "sed",
                                                    [new RelatedRecordsInfoFieldOrder(),
                                                    new RelatedRecordsInfoFieldOrder()],
                                                        5)])"
                                                ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                                        "createdAt",
                                                        "officiis quasi quo"),
                                                new ExpressionInfo("return Date();",
                                                        "email",
                                                        "possimus ea incidunt")])"
                                                OverwriteActions="@(true)"
                                                ReturnGeometry="@(true)"
                                                Actions="@([new ActionButton("placeat ut minus",
                                                    "https://picsum.photos/640/480/?image=799",
                                                    "5b93910d-7095-bfa1-f6e7-0624cd3d8a78",
                                                    () => { Console.WriteLine("ad"); return Task.CompletedTask; },
                                                    "phone",
                                                    true,
                                                    true,
                                                    true,
                                                    "ut"),
                                                    new ActionButton("ad perspiciatis eligendi",
                                                        "https://picsum.photos/640/480/?image=327",
                                                        "db80f57a-58cc-6b8a-8766-0a1a55a1c7ec",
                                                        () => { Console.WriteLine("non"); return Task.CompletedTask; },
                                                        "comment",
                                                        true,
                                                        true,
                                                        true,
                                                        "amet")])">
                                            </PopupTemplate>
                                            <Label 
                                                LabelPlacement="@(LabelPlacement.BelowLeft)"
                                                LabelExpression="@("nostrum")"
                                                LabelExpressionInfo="@(new LabelExpressionInfo())"
                                                AllowOverrun="@(true)"
                                                DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                                LabelPosition="@(LabelPosition.Parallel)"
                                                MaxScale="@(35535323.9809)"
                                                MinScale="@(25043.4607)"
                                                RepeatLabel="@(true)"
                                                RepeatLabelDistance="@(new Dimension(102.5968))"
                                                Symbol="@(new TextSymbol("illum unde cumque",
                                                    new MapColor(250, 114, 235),
                                                    new MapColor(107, 140, 227),
                                                        null,
                                                    new MapFont(),
                                                        249.3054,
                                                    new MapColor(140, 52, 162),
                                                    new MapColor(225, 80, 181),
                                                        833.6900,
                                                    HorizontalAlignment.Right,
                                                        true,
                                                        346.3541,
                                                        null,
                                                        true))"
                                                UseCodedValues="@(true)"
                                                Where="@("Age > 21")">
                                            </Label>
                                            <LayerFloorInfo 
                                                FloorField="@("saepe")">
                                            </LayerFloorInfo>
                                        </Sublayer>
                                        <UniqueValueRenderer 
                                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch)]),
                                                    260.3285,
                                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(),
                                                    new AuthoringInfoField1ClassBreakInfos()],
                                                        "similique",
                                                        "ut",
                                                        "ut"),
                                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos()],
                                                        "eum",
                                                        "illo",
                                                        "adipisci"),
                                                    ["vero",
                                                        "assumenda"],
                                                AuthoringInfoFlowTheme.WaveFront,
                                                    "voluptatibus",
                                                    true,
                                                LengthUnit.Centimeters,
                                                    948.3323,
                                                    973.5368,
                                                    728.1027,
                                                    134.7439))">
                                        </UniqueValueRenderer>
                                        <PopupTemplate 
                                            Title="@("fugit illo ducimus")"
                                            StringContent="@("unde")"
                                            OutFields="@(["praesentium",
                                                "adipisci"])"
                                            FieldInfos="@([new FieldInfo("token",
                                                    "ipsa",
                                                    "dolor",
                                                StringFieldOption.RichText,
                                                new FieldInfoFormat(9,
                                                        true,
                                                    DateFormat.ShortDate),
                                                    true,
                                                    true,
                                                StatisticType.Sum),
                                            new FieldInfo("id",
                                                    "nisi",
                                                    "tempora",
                                                StringFieldOption.TextArea,
                                                new FieldInfoFormat(9,
                                                        true,
                                                    DateFormat.DayShortMonthYear),
                                                    true,
                                                    true,
                                                StatisticType.Stddev)])"
                                            Content="@([new RelationshipPopupContent("necessitatibus autem ut",
                                                    "sint aut assumenda labore",
                                                    6,
                                                    "voluptatem",
                                                [new RelatedRecordsInfoFieldOrder("minus",
                                                    OrderBy.Asc)],
                                                    7),
                                            new MediaPopupContent("quasi et vel",
                                                    "illo rerum beatae",
                                                [new LineChartMediaInfo("ex quibusdam velit",
                                                        "dolores",
                                                        "cum eum dolore",
                                                    new ChartMediaInfoValue())],
                                                    2)])"
                                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                                    "title",
                                                    "deserunt dolorem ipsa",
                                                    ExpressionInfoReturnType.String)])"
                                            OverwriteActions="@(true)"
                                            ReturnGeometry="@(true)"
                                            Actions="@([new ActionButton("facere occaecati quia",
                                                "https://picsum.photos/640/480/?image=348",
                                                "c2bb36f3-faca-5cf8-9197-9d37cf2adbd3",
                                                () => { Console.WriteLine("eaque"); return Task.CompletedTask; },
                                                "comment",
                                                true,
                                                true,
                                                true,
                                                "cumque")])">
                                        </PopupTemplate>
                                        <Label 
                                            LabelPlacement="@(LabelPlacement.AboveAfter)"
                                            LabelExpression="@("autem")"
                                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                                            AllowOverrun="@(true)"
                                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                            LabelPosition="@(LabelPosition.Curved)"
                                            MaxScale="@(48697904.9477)"
                                            MinScale="@(17469.7474)"
                                            RepeatLabel="@(true)"
                                            RepeatLabelDistance="@(new Dimension(614.4518))"
                                            Symbol="@(new TextSymbol("quidem ad aperiam",
                                                new MapColor(134, 107, 58),
                                                new MapColor(70, 77, 221),
                                                    new Dimension(270.1018),
                                                new MapFont(new Dimension(785.8432),
                                                        "Courier New",
                                                    MapFontStyle.Italic,
                                                    FontWeight.Lighter,
                                                    TextDecoration.None),
                                                    335.7059,
                                                new MapColor(108, 136, 92),
                                                new MapColor(238, 224, 191),
                                                    618.5095,
                                                HorizontalAlignment.Left,
                                                    true,
                                                    295.2424,
                                                    new Dimension(923.2769),
                                                    true))"
                                            UseCodedValues="@(true)"
                                            Where="@("City = 'Toronto'")">
                                        </Label>
                                        <LayerFloorInfo 
                                            FloorField="@("aut")">
                                        </LayerFloorInfo>
                                    </Sublayer>
                                    <UniqueValueRenderer 
                                        AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.EqualInterval,
                                            new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                                                    new MapColor(107, 102, 156),
                                                    new MapColor(36, 243, 82)),
                                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                                    new MapColor(236, 214, 124),
                                                    new MapColor(235, 224, 77))]),
                                                675.4457,
                                            new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(862.7837,
                                                        329.9488)],
                                                    "vel",
                                                    "id",
                                                    "maxime"),
                                            new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(218.9920,
                                                        935.1699),
                                                new AuthoringInfoField1ClassBreakInfos(696.7266,
                                                        97.2344)],
                                                    "ad",
                                                    "ut",
                                                    "et"),
                                                ["odit",
                                                    "qui"],
                                            AuthoringInfoFlowTheme.WaveFront,
                                                "dolorem",
                                                true,
                                            LengthUnit.Millimeters,
                                                319.9342,
                                                60.0637,
                                                555.9565,
                                                714.3006))">
                                    </UniqueValueRenderer>
                                    <PopupTemplate 
                                        Title="@("mollitia fuga voluptates")"
                                        StringContent="@("ut")"
                                        OutFields="@(["quasi",
                                            "nisi"])"
                                        FieldInfos="@([new FieldInfo("updatedAt",
                                                "ex",
                                                "quasi",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(9,
                                                    true,
                                                DateFormat.LongMonthDayYearShortTime),
                                                true,
                                                true,
                                            StatisticType.Max)])"
                                        Content="@([new FieldsPopupContent([new FieldInfo("category",
                                                    "autem",
                                                    "quod",
                                                StringFieldOption.RichText,
                                                new FieldInfoFormat(1,
                                                        true,
                                                    DateFormat.LongMonthDayYearLongTime),
                                                    true,
                                                    true,
                                                StatisticType.Count)],
                                                "est est assumenda ut",
                                                "culpa libero consequatur")])"
                                        ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                "updatedAt",
                                                "temporibus illo libero",
                                                ExpressionInfoReturnType.String)])"
                                        OverwriteActions="@(true)"
                                        ReturnGeometry="@(true)"
                                        Actions="@([new ActionButton("quo eos omnis",
                                            "https://picsum.photos/640/480/?image=75",
                                            "9c114d4a-d1ca-1919-49e7-e20258f56e5b",
                                            () => { Console.WriteLine("ducimus"); return Task.CompletedTask; },
                                            "name",
                                            true,
                                            true,
                                            true,
                                            "nihil")])">
                                    </PopupTemplate>
                                    <Label 
                                        LabelPlacement="@(LabelPlacement.AboveAfter)"
                                        LabelExpression="@("ab")"
                                        LabelExpressionInfo="@(new LabelExpressionInfo())"
                                        AllowOverrun="@(true)"
                                        DeconflictionStrategy="@(DeconflictionStrategy.None)"
                                        LabelPosition="@(LabelPosition.Curved)"
                                        MaxScale="@(29000337.9143)"
                                        MinScale="@(22214.2145)"
                                        RepeatLabel="@(true)"
                                        RepeatLabelDistance="@(new Dimension(812.6716))"
                                        Symbol="@(new TextSymbol("est itaque ex",
                                            new MapColor(189, 37, 89),
                                            new MapColor(211, 54, 177),
                                                new Dimension(683.9089),
                                            new MapFont(new Dimension(740.7410),
                                                    "Garamond",
                                                MapFontStyle.Italic,
                                                FontWeight.Lighter,
                                                TextDecoration.None),
                                                546.3615,
                                            new MapColor(152, 25, 111),
                                            new MapColor(248, 246, 16),
                                                441.3710,
                                            HorizontalAlignment.Left,
                                                true,
                                                702.6808,
                                                new Dimension(735.9496),
                                                true))"
                                        UseCodedValues="@(true)"
                                        Where="@("Street = '123 Main St.'")">
                                    </Label>
                                    <LayerFloorInfo 
                                        FloorField="@("quia")">
                                    </LayerFloorInfo>
                                </Sublayer>
                                <UniqueValueRenderer 
                                    AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                        new AlgorithmicColorRamp(Algorithm.Hsv,
                                            new MapColor(187, 9, 202),
                                            new MapColor(47, 18, 186)),
                                            206.3621,
                                        new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(953.6072,
                                                    301.2132),
                                            new AuthoringInfoField1ClassBreakInfos(720.9406,
                                                    133.2803)],
                                                "est",
                                                "ad",
                                                "porro"),
                                        new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(334.5257,
                                                    672.1619)],
                                                "necessitatibus",
                                                "temporibus",
                                                "nam"),
                                            ["laborum",
                                                "occaecati"],
                                        AuthoringInfoFlowTheme.FlowLine,
                                            "sequi",
                                            true,
                                        LengthUnit.UsFeet,
                                            294.4721,
                                            440.2700,
                                            590.7549,
                                            952.5400))">
                                </UniqueValueRenderer>
                                <PopupTemplate 
                                    Title="@("a sit ut")"
                                    StringContent="@("laboriosam")"
                                    OutFields="@(["enim",
                                        "est"])"
                                    FieldInfos="@([new FieldInfo("category",
                                            "fuga",
                                            "labore",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(7,
                                                true,
                                            DateFormat.ShortDateLongTime),
                                            true,
                                            true,
                                        StatisticType.Min),
                                    new FieldInfo("email",
                                            "pariatur",
                                            "placeat",
                                        StringFieldOption.TextArea,
                                        new FieldInfoFormat(9,
                                                true,
                                            DateFormat.ShortDateLongTime),
                                            true,
                                            true,
                                        StatisticType.Count)])"
                                    Content="@([new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                                "perferendis",
                                                "ullam excepturi rerum"))])"
                                    ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                            "comment",
                                            "ut voluptatem doloremque",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                            "id",
                                            "aliquid amet quo",
                                            ExpressionInfoReturnType.String)])"
                                    OverwriteActions="@(true)"
                                    ReturnGeometry="@(true)"
                                    Actions="@([new ActionButton("eos nobis sit",
                                        "https://picsum.photos/640/480/?image=1042",
                                        "76613d21-08e0-33e2-90ba-1f3612fb47a0",
                                        () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                                        "updatedAt",
                                        true,
                                        true,
                                        true,
                                        "non"),
                                        new ActionButton("eum explicabo atque",
                                            "https://picsum.photos/640/480/?image=608",
                                            "44928878-7901-1f91-d17b-b062f3d81743",
                                            () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                                            "avatar",
                                            true,
                                            true,
                                            true,
                                            "et")])">
                                </PopupTemplate>
                                <Label 
                                    LabelPlacement="@(LabelPlacement.CenterStart)"
                                    LabelExpression="@("nulla")"
                                    LabelExpressionInfo="@(new LabelExpressionInfo())"
                                    AllowOverrun="@(true)"
                                    DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                                    LabelPosition="@(LabelPosition.Curved)"
                                    MaxScale="@(7170755.6110)"
                                    MinScale="@(9265.4607)"
                                    RepeatLabel="@(true)"
                                    RepeatLabelDistance="@(new Dimension(661.7491))"
                                    Symbol="@(new TextSymbol("voluptas molestias ratione",
                                        new MapColor(2, 106, 111),
                                        new MapColor(67, 211, 111),
                                            new Dimension(303.6492),
                                        new MapFont(new Dimension(948.3447),
                                                "Helvetica",
                                            MapFontStyle.Italic,
                                            FontWeight.Bolder,
                                            TextDecoration.LineThrough),
                                            669.7460,
                                        new MapColor(7, 52, 234),
                                        new MapColor(101, 13, 76),
                                            518.8648,
                                        HorizontalAlignment.Left,
                                            true,
                                            545.6692,
                                            new Dimension(220.1931),
                                            true))"
                                    UseCodedValues="@(true)"
                                    Where="@("Name = 'John Doe'")">
                                </Label>
                                <LayerFloorInfo 
                                    FloorField="@("qui")">
                                </LayerFloorInfo>
                            </Sublayer>
                        </Sublayer>
                    </MapImageLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(mapImageLayer!);
        await AssertJavaScript("dispatchEvent", args: [mapImageLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "map-image");
        var createExportImageParametersMethodResult = await mapImageLayer.CreateExportImageParameters(new Extent(170.9865,
                    115.9352,
                    -17.4264,
                    -34.7144,
                    485.5477,
                    365.0854,
                    757.4073,
                    958.3656,
                new SpatialReference(1,
                        "unde",
                        "debitis",
                        "voluptatem"),
                    true,
                    true),
                7,
                5,
            new MapImageLayerCreateExportImageParametersOptions(594.3399,
                    86.7842,
                    "sit"));
        Assert.IsNotNull(createExportImageParametersMethodResult);
        var createServiceSublayersMethodResult = await mapImageLayer.CreateServiceSublayers();
        Assert.IsNotNull(createServiceSublayersMethodResult);
        var fetchImageMethodResult = await mapImageLayer.FetchImage(new Extent(150.9279,
                    -38.8386,
                    -46.8677,
                    5.6429,
                    124.7250,
                    348.3764,
                    764.3819,
                    29.3458,
                new SpatialReference(6,
                        "ut",
                        "molestiae",
                        "dicta"),
                    true,
                    true),
                1,
                1,
            new MapImageLayerFetchImageOptions(879.5331,
                    243.1992,
                    "nisi"));
        Assert.IsNotNull(fetchImageMethodResult);
        var findSublayerByIdMethodResult = await mapImageLayer.FindSublayerById(2);
        Assert.IsNotNull(findSublayerByIdMethodResult);
        var loadAllMethodResult = await mapImageLayer.LoadAll();
        Assert.IsNotNull(loadAllMethodResult);
        await mapImageLayer.Refresh();
        PortalItem testPortalItem = new PortalItem();
        await mapImageLayer.SetPortalItem(testPortalItem);
        var portalItem = await mapImageLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.SourceOut;
        await mapImageLayer.SetBlendMode(testBlendMode);
        var blendMode = await mapImageLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2008, 5, 13, 20, 25, 45),
                    new DateTime(2008, 11, 4, 17, 47, 31));
        await mapImageLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await mapImageLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("neque",
                    "vel",
                new TimeExtent(new DateTime(2023, 11, 8, 20, 14, 57),
                        new DateTime(2016, 3, 8, 9, 56, 1)),
                new TimeInterval(TemporalTime.Days,
                        39.6463),
                    [new DateTime(2023, 7, 26, 18, 19, 9)],
                    "Pacific/Midway",
                    "sit");
        await mapImageLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await mapImageLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        IReadOnlyList<Sublayer> testSublayers = [new Sublayer(1,
                    true,
                    true,
                ListMode.Hide,
                    40403699.3794,
                    46131.2042,
                    0.8048,
                    true,
                    "et ut labore",
                    true,
                    "consequatur",
                new LayerFloorInfo("laudantium"),
                [new Label(LabelPlacement.AboveCenter,
                        "velit",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.Static,
                    LabelPosition.Parallel,
                        45752515.9283,
                        47971.9446,
                        true,
                        new Dimension(48.0320),
                    new TextSymbol("occaecati sed omnis",
                        new MapColor(71, 23, 224),
                        new MapColor(10, 119, 125),
                            new Dimension(719.8674),
                        new MapFont(new Dimension(497.4784),
                                "Garamond",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            414.1799,
                        new MapColor(174, 81, 45),
                        new MapColor(84, 23, 133),
                            867.2755,
                        HorizontalAlignment.Right,
                            true,
                            391.5131,
                            new Dimension(351.8800),
                            true),
                        true,
                        "ObjectID = 1")],
                new PopupTemplate("perspiciatis quis sunt",
                        "culpa",
                        ["et",
                            "excepturi"],
                    [new FieldInfo("createdAt",
                            "nam",
                            "assumenda",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.ShortDateLeLongTime),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("status",
                            "voluptatem",
                            "aut",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongMonthDayYear),
                            true,
                            true,
                        StatisticType.Max)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "autem",
                                "eum sit impedit"))],
                    [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "phone",
                            "aspernatur quia quo",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("omnis autem repudiandae",
                            "https://picsum.photos/640/480/?image=656",
                            "b65ce60c-2e3d-0f8b-1b4d-b440165448f7",
                            () => { Console.WriteLine("voluptates"); return Task.CompletedTask; },
                            "group",
                            true,
                            true,
                            true,
                            "quaerat"),
                            new ActionButton("aut ipsam et",
                                "https://picsum.photos/640/480/?image=322",
                                "82d21d3b-42d8-0b1b-a160-b17d68d97155",
                                () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "exercitationem")]))];
        await mapImageLayer.SetSublayers(testSublayers);
        var sublayers = await mapImageLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        ListMode testListMode = ListMode.Show;
        await mapImageLayer.SetListMode(testListMode);
        var listMode = await mapImageLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(-96.9610,
                    163.3216,
                    -41.9344,
                    72.4436,
                    268.9132,
                    836.7450,
                    364.9314,
                    582.3316,
                new SpatialReference(3,
                        "rerum",
                        "eos",
                        "aut"),
                    true,
                    true);
        await mapImageLayer.SetFullExtent(testFullExtent);
        var fullExtent = await mapImageLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Sublayer> testSubtables = [new Sublayer(2,
                    true,
                    true,
                ListMode.Hide,
                    19179707.2595,
                    37804.8212,
                    0.9312,
                    true,
                    "cumque nemo sed",
                    true,
                    "repellendus",
                new LayerFloorInfo("recusandae"),
                [new Label(LabelPlacement.BelowRight,
                        "deleniti",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.None,
                    LabelPosition.Curved,
                        26477987.0882,
                        40584.1483,
                        true,
                        new Dimension(954.2078),
                    new TextSymbol("nesciunt eius occaecati",
                        new MapColor(177, 249, 35),
                        new MapColor(199, 60, 148),
                            new Dimension(586.2516),
                        new MapFont(new Dimension(479.5723),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Normal,
                            TextDecoration.None),
                            857.9475,
                        new MapColor(172, 168, 5),
                        new MapColor(183, 205, 104),
                            693.6224,
                        HorizontalAlignment.Left,
                            true,
                            423.6610,
                            new Dimension(88.2181),
                            true),
                        true,
                        "Street = '123 Main St.'"),
                new Label(LabelPlacement.CenterEnd,
                        "ad",
                        new LabelExpressionInfo(),
                        true,
                    DeconflictionStrategy.Static,
                    LabelPosition.Parallel,
                        13472634.4920,
                        14675.0767,
                        true,
                        new Dimension(833.5279),
                    new TextSymbol("debitis ut consequatur",
                        new MapColor(160, 232, 87),
                        new MapColor(95, 194, 116),
                            new Dimension(606.1398),
                        new MapFont(new Dimension(183.6981),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            812.5029,
                        new MapColor(102, 96, 228),
                        new MapColor(246, 37, 211),
                            316.3420,
                        HorizontalAlignment.Left,
                            true,
                            697.3855,
                            new Dimension(672.6554),
                            true),
                        true,
                        "ObjectID = 1")],
                new PopupTemplate("voluptas rerum quasi",
                        "quasi",
                        ["in",
                            "vitae"],
                    [new FieldInfo("createdAt",
                            "ea",
                            "non",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortMonthYear),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new TextPopupContent("voluptates perspiciatis sunt")],
                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "title",
                            "corrupti nulla veniam",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Name;",
                            "id",
                            "voluptatum inventore dicta",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("qui inventore eum",
                            "https://picsum.photos/640/480/?image=711",
                            "701628ce-c1ba-4a90-1fc2-fca3bb7e9c87",
                            () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "quidem"),
                            new ActionButton("tempora minus laudantium",
                                "https://picsum.photos/640/480/?image=236",
                                "f3a346b9-d037-266f-f91f-78ece906d44b",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "sed")]))];
        await mapImageLayer.SetSubtables(testSubtables);
        var subtables = await mapImageLayer.GetSubtables();
        Assert.AreEqual(testSubtables, subtables);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    46.4871);
        await mapImageLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await mapImageLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 11, 25, 16, 2, 46),
                    new DateTime(2006, 9, 15, 16, 53, 11));
        await mapImageLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await mapImageLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
