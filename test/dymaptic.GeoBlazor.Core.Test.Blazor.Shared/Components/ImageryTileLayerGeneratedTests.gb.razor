@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(74, 131, 58),
                                new MapColor(221, 147, 80)),
                            true,
                            true,
                            [6,
                            6],
                            6,
                            1,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(379.2401,
                                6,
                                85.3231,
                                795.6061,
                                328.9358,
                                135.3356,
                                115.0812,
                                545.3381)],
                            true,
                            1))"
                        BandIds="@([2])"
                        BlendMode="@(BlendMode.Screen)"
                        Copyright="@("suscipit")"
                        Effect="@(new Effect("aut",
                            25617782.3029))"
                        Interpolation="@(PixelInterpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(29627910.3389)"
                        MinScale="@(46099.3240)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.3974)"
                        Title="@("earum incidunt repellat")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Weeks)"
                            Value="@(183.4634)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("omnis")"
                            EndField="@("sed")"
                            Stops="@([new DateTime(2001, 8, 3, 17, 18, 38)])"
                            TimeZone="@("Asia/Kolkata")"
                            TrackIdField="@("pariatur")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Hours)"
                                Value="@(487.6139)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2000, 2, 16, 4, 32, 31))"
                                End="@(new DateTime(2015, 5, 23, 10, 24, 58))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2005, 11, 24, 5, 23, 11))"
                            End="@(new DateTime(2006, 7, 14, 19, 4, 5))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(551.6205)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "sunt",
                                    16.0397,
                                    46125916.9674),
                            new LOD(5,
                                    "consequuntur",
                                    3.3710,
                                    38415649.9915)])"
                            Size="@([1,
                                3])"
                            SpatialReference="@(new SpatialReference(7,
                                    "quo",
                                    "voluptatem",
                                    "aut"))">
                            <Point 
                                Longitude="@(14.1277)"
                                Latitude="@(-19.7673)"
                                X="@(-117.5965)"
                                Y="@(68.3343)"
                                Z="@(762.7578)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(551.7712)">
                                <SpatialReference 
                                    Wkid="@(8)"
                                    ImageCoordinateSystem="@("nam")"
                                    Wkt="@("sed")"
                                    Wkt2="@("aspernatur")">
                                </SpatialReference>
                            </Point>
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("fuga")"
                            FunctionName="@("updatedAt")"
                            OutputPixelType="@(OutputPixelType.U1)"
                            RasterFunctionDefinition="@("qui")"
                            VariableName="@("title")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("in sit qui")"
                            StringContent="@("consequatur")"
                            OutFields="@(["commodi"])"
                            FieldInfos="@([new FieldInfo("password",
                                    "rerum",
                                    "qui",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new RelationshipPopupContent("voluptatibus est unde",
                                    "occaecati doloremque aut",
                                    9,
                                    "aperiam",
                                [new RelatedRecordsInfoFieldOrder("alias",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("neque",
                                    OrderBy.Desc)],
                                    6),
                            new AttachmentsPopupContent("est consequatur cumque",
                                    "quia nostrum",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "avatar",
                                    "quae minus aspernatur",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "updatedAt",
                                    "facilis velit laudantium",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("quia ipsum illo",
                                "https://picsum.photos/640/480/?image=547",
                                "6d1b192c-0372-92d5-9292-b36ee597ceaf",
                                () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "eaque")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(-166.9291,
                                    -72.1914,
                                    157.5049,
                                    -9.7052,
                                    485.9004,
                                new SpatialReference(7,
                                        "vero",
                                        "id",
                                        "qui"),
                                    true,
                                    true,
                                    487.0744))">
                            <DimensionalDefinition 
                                DimensionName="@("avatar")"
                                IsSlice="@(true)"
                                VariableName="@("status")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("comment")"
                            IsSlice="@(true)"
                            VariableName="@("category")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(9.0819)"
                            Xmin="@(46.8342)"
                            Ymax="@(-71.2169)"
                            Ymin="@(67.0510)"
                            Zmax="@(475.5099)"
                            Zmin="@(499.1020)"
                            Mmax="@(749.0681)"
                            Mmin="@(972.8525)"
                            SpatialReference="@(new SpatialReference(9,
                                    "omnis",
                                    "natus",
                                    "et"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(132.1971,
                        18.4113,
                        70.4322,
                        -45.9852,
                        683.3010,
                        547.9423,
                        877.4427,
                        433.7082,
                    new SpatialReference(5,
                            "minima",
                            "rem",
                            "dolore"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("dolor",
                            "category",
                        OutputPixelType.U8,
                            "non",
                            "password"),
                        [8,
                            7],
                    Method.Nadir,
                    [new DimensionalDefinition("name",
                            true,
                            "token"),
                    new DimensionalDefinition("status",
                            true,
                            "avatar")],
                        [1],
                    Operation.Blend,
                        "dolorem",
                        "quo",
                    new Point(14.0770,
                            10.8820,
                            90.7241,
                            49.2406,
                            647.8356,
                        new SpatialReference(2,
                                "fugit",
                                "inventore",
                                "quia"),
                            true,
                            true,
                            151.1549),
                        "City = 'Toronto'"),
                new PixelSize(0.8622,
                        -59.3648,
                    new PixelSizeSpatialReference(8,
                            643.1253)),
                new RasterFunction("tempora",
                        "status",
                    OutputPixelType.S16,
                        "fugit",
                        "avatar"),
                new TimeExtent(new DateTime(2017, 6, 12, 19, 42, 45),
                        new DateTime(2007, 1, 20, 22, 6, 47))),
                "est");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["nihil"],
                    ["group",
                        "id"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(118.1312,
                    59.4076,
                    -33.0111,
                    -14.9670,
                    967.8361,
                    906.5628,
                    451.6933,
                    208.5072,
                new SpatialReference(8,
                        "alias",
                        "sunt",
                        "perspiciatis"),
                    true,
                    true),
                3,
                8,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Cubic));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(376.1175,
                723.0312,
                66.6951,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-128.6744,
                    44.9619,
                    -133.1059,
                    39.5269,
                    314.4393,
                new SpatialReference(9,
                        "provident",
                        "modi",
                        "itaque"),
                    true,
                    true,
                    158.0181),
            new RasterIdentifyOptions([new DimensionalDefinition("password",
                        true,
                        "id")],
                    "createdAt"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2004, 2, 19, 19, 48, 25),
                        "id",
                        "alias a dolores"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Overlay;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("status",
                    true,
                    "updatedAt")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Extent(-171.2328,
                        146.0736,
                        -8.1182,
                        -56.2762,
                        533.1002,
                        866.3751,
                        863.3050,
                        393.0795,
                    new SpatialReference(4,
                            "a",
                            "reiciendis",
                            "cupiditate"),
                        true,
                        true),
                [new DimensionalDefinition("updatedAt",
                        true,
                        "id")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("dolor aut ipsa",
                    "praesentium",
                    ["voluptatum",
                        "fugit"],
                [new FieldInfo("updatedAt",
                        "inventore",
                        "recusandae",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateShortTime),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("group",
                        "nobis",
                        "incidunt",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.LongMonthDayYear),
                        true,
                        true,
                    StatisticType.Avg)],
                [new AttachmentsPopupContent("quia magnam maxime",
                        "at excepturi nesciunt eius",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "phone",
                        "numquam rerum laudantium",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("consectetur corporis voluptatem",
                        "https://picsum.photos/640/480/?image=756",
                        "85f43260-8ad0-d1f3-0c6a-8a7e69c4e88c",
                        () => { Console.WriteLine("iure"); return Task.CompletedTask; },
                        "category",
                        true,
                        true,
                        true,
                        "minima")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-51.3037,
                    131.8049,
                    -54.2693,
                    -86.5169,
                    871.1961,
                    683.6044,
                    678.3480,
                    501.0390,
                new SpatialReference(2,
                        "et",
                        "ducimus",
                        "consequatur"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("necessitatibus",
                    "category",
                OutputPixelType.U1,
                    "temporibus",
                    "password");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(330.5691,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(1,
                        "quia",
                        55.7636,
                        27707983.6492)],
                new Point(49.3265,
                        -81.2532,
                        160.5209,
                        -27.4834,
                        393.5549,
                    new SpatialReference(7,
                            "minima",
                            "et",
                            "at"),
                        true,
                        true,
                        368.9170),
                    [2,
                        7],
                new SpatialReference(8,
                        "facere",
                        "eos",
                        "et"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2000, 1, 4, 2, 7, 51),
                    new DateTime(2023, 3, 22, 8, 56, 54));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quisquam",
                    "pariatur",
                new TimeExtent(new DateTime(2018, 9, 12, 9, 39, 26),
                        new DateTime(2004, 11, 24, 19, 31, 38)),
                new TimeInterval(TemporalTime.Decades,
                        805.1023),
                    [new DateTime(2011, 8, 23, 1, 33, 52)],
                    "America/Halifax",
                    "nulla");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Decades,
                    961.5978);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 9, 9, 17, 29, 57),
                    new DateTime(2020, 2, 8, 8, 39, 14));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
