@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(152, 252, 37),
                                new MapColor(226, 200, 11)),
                            true,
                            true,
                            [8,
                            1],
                            6,
                            4,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(342.5534,
                                7,
                                826.6687,
                                578.3399,
                                713.1818,
                                163.9697,
                                329.5098,
                                410.0722),
                            new RasterBandStatistics(269.2567,
                                4,
                                354.1267,
                                655.5961,
                                988.1145,
                                461.2496,
                                846.8751,
                                903.6543),
                            new RasterBandStatistics(566.3511,
                                8,
                                373.2430,
                                618.8714,
                                761.2314,
                                354.7433,
                                176.6878,
                                393.0721),
                            new RasterBandStatistics(600.6414,
                                8,
                                761.5289,
                                218.1467,
                                52.7776,
                                815.3804,
                                133.1888,
                                404.6786)],
                            true,
                            1))"
                        BandIds="@([9,
                            3,
                            3,
                            4])"
                        BlendMode="@(BlendMode.Color)"
                        Copyright="@("culpa")"
                        Effect="@(new Effect("vero",
                            18335875.0719))"
                        Interpolation="@(PixelInterpolation.Cubic)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(32116411.0595)"
                        MinScale="@(41931.3267)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.2605)"
                        Title="@("et nihil consequatur")"
                        FullExtent="@(new Extent(-15.2016,
                                -44.7597,
                                -70.8133,
                                81.4648,
                                622.0090,
                                426.4425,
                                563.7960,
                                403.8176,
                            new SpatialReference(2,
                                    "quidem",
                                    "voluptates",
                                    "quis"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(906.7842)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("inventore")"
                            EndField="@("assumenda")"
                            Stops="@([new DateTime(2021, 9, 9, 14, 25, 29),
                                new DateTime(2016, 7, 17, 5, 57, 28),
                                new DateTime(2023, 8, 2, 8, 12, 42)])"
                            TimeZone="@("America/Halifax")"
                            TrackIdField="@("dignissimos")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(759.7073)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2002, 9, 9, 19, 33, 16))"
                                End="@(new DateTime(2009, 7, 11, 16, 23, 30))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2010, 10, 20, 0, 54, 21))"
                            End="@(new DateTime(2015, 7, 10, 19, 53, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(47.1771)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "consequuntur",
                                    59.6233,
                                    49377050.1580),
                            new LOD(9,
                                    "sed",
                                    50.9363,
                                    8610582.8723)])"
                            Origin="@(new Point(142.2231,
                                    4.7378,
                                    48.4099,
                                    -52.4968,
                                    730.8198,
                                new SpatialReference(5,
                                        "aspernatur",
                                        "deserunt",
                                        "modi"),
                                    true,
                                    true,
                                    580.5507))"
                            Size="@([2,
                                3,
                                4,
                                4])"
                            SpatialReference="@(new SpatialReference(9,
                                    "repellendus",
                                    "eos",
                                    "aut"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("illo")"
                            FunctionName="@("status")"
                            OutputPixelType="@(OutputPixelType.F32)"
                            RasterFunctionDefinition="@("eaque")"
                            VariableName="@("category")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("ad")"
                            ApiKey="@("est")"
                            AvgRating="@(334.1192)"
                            Categories="@(["eum",
                                "totam",
                                "voluptatem",
                                "et"])"
                            Created="@(new DateTime(2005, 11, 17, 17, 5, 28))"
                            Culture="@("odio")"
                            Description="@("eligendi ipsa aut aperiam quo")"
                            Extent="@(new Extent(88.8709,
                                    163.2543,
                                    -27.9911,
                                    45.1361,
                                    541.0128,
                                    380.9925,
                                    472.0843,
                                    666.6770,
                                new SpatialReference(2,
                                        "suscipit",
                                        "incidunt",
                                        "eum"),
                                    true,
                                    true))"
                            GroupCategories="@(["dolorum",
                                "nihil"])"
                            LicenseInfo="@("est")"
                            Modified="@(new DateTime(2005, 4, 17, 9, 15, 20))"
                            Name="@("comment")"
                            NumComments="@(297.6089)"
                            NumRatings="@(54.8961)"
                            NumViews="@(436.3695)"
                            Owner="@("Mariano Wisoky")"
                            OwnerFolder="@("Clementina Upton")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["quaerat",
                                        "omnis"],
                                    "maxime",
                                    "veritatis",
                                    "libero",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("vel")"
                            Screenshots="@(["rerum",
                                "ipsum"])"
                            Size="@(2)"
                            Snippet="@("sed")"
                            Tags="@(["consequatur",
                                "sit",
                                "qui"])"
                            Title="@("qui reprehenderit enim")"
                            TypeKeywords="@(["temporibus",
                                "cumque",
                                "eligendi"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("nostrum nesciunt eum")"
                            StringContent="@("neque")"
                            OutFields="@(["est",
                                "odit"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "molestias",
                                    "consectetur",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("token",
                                    "dicta",
                                    "tempore",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("status",
                                    "quam",
                                    "illum",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new MediaPopupContent("reprehenderit eum et",
                                    "architecto nihil voluptatem ea",
                                [new PieChartMediaInfo("ipsum qui aut",
                                        "error",
                                        "molestiae hic a",
                                    new ChartMediaInfoValue(["alias",
                                            "ut",
                                            "quia"],
                                            "illo",
                                            "quae",
                                        [new ChartMediaInfoValueSeries("category",
                                                "unde",
                                                18.2627)],
                                        [new MapColor(153, 253, 52),
                                        new MapColor(248, 21, 198)])),
                                new LineChartMediaInfo("consequatur corrupti est",
                                        "cum",
                                        "excepturi repudiandae provident",
                                    new ChartMediaInfoValue(["molestias",
                                            "excepturi",
                                            "tempora",
                                            "et"],
                                            "est",
                                            "asperiores",
                                        [new ChartMediaInfoValueSeries("email",
                                                "libero",
                                                24.9698)],
                                        [new MapColor(109, 74, 5)])),
                                new ImageMediaInfo("fuga laudantium voluptatem",
                                        "at",
                                        "deleniti saepe asperiores",
                                    new ImageMediaInfoValue("https://lizeth.org",
                                            "http://moriah.net"),
                                        935.5666)],
                                    6),
                            new AttachmentsPopupContent("repellendus fugit laudantium",
                                    "ducimus sit rerum voluptates dolorum",
                                    AttachmentsPopupContentDisplayType.Preview),
                            new TextPopupContent("atque a voluptatem"),
                            new FieldsPopupContent([new FieldInfo("name",
                                        "doloribus",
                                        "enim",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.DayShortMonthYearLongTime),
                                        true,
                                        true,
                                    StatisticType.Var),
                                new FieldInfo("password",
                                        "quaerat",
                                        "consectetur",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongDateLongTime24),
                                        true,
                                        true,
                                    StatisticType.Max)],
                                    "sed atque culpa unde dolor",
                                    "consequuntur sit consectetur")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "id",
                                    "blanditiis quos architecto",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "updatedAt",
                                    "dolor repudiandae dolor",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "token",
                                    "eligendi vitae ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "email",
                                    "doloribus quod omnis",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("ut assumenda et",
                                    "https://picsum.photos/640/480/?image=610",
                                    "c197bb7a-4f40-68b0-cc4b-59fce6c71d5c",
                                    () => { Console.WriteLine("velit"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "repudiandae"),
                            new ActionButton("voluptatem rem omnis",
                                    "https://picsum.photos/640/480/?image=19",
                                    "fb407486-3500-cf5b-0f1c-f1d6914adbdb",
                                    () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "ea"),
                            new ActionButton("voluptas tenetur repellendus",
                                    "https://picsum.photos/640/480/?image=555",
                                    "7722d59f-87f4-5899-8b6a-8c6b718df12f",
                                    () => { Console.WriteLine("ipsam"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "consectetur")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(52.9186,
                                    149.6479,
                                    -53.6417,
                                    -67.6233,
                                    219.4314,
                                    518.1557,
                                    855.3705,
                                    967.3138,
                                new SpatialReference(9,
                                        "aut",
                                        "numquam",
                                        "ut"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("createdAt")"
                                IsSlice="@(true)"
                                VariableName="@("group")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("avatar")"
                            IsSlice="@(true)"
                            VariableName="@("phone")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([600.1583,
                            616.6904]),
                        new MapPoint([47.5395,
                            166.3859,
                            662.5950,
                            518.9870]),
                        new MapPoint([374.7207,
                            304.3741]),
                        new MapPoint([250.6246,
                            427.3159,
                            66.9482])])],
                    new SpatialReference(9,
                            "aliquam",
                            "inventore",
                            "et"),
                    new Point(-47.6184,
                            -3.9013,
                            68.3020,
                            69.3215,
                            683.6176,
                        new SpatialReference(2,
                                "tenetur",
                                "natus",
                                "quis"),
                            true,
                            true,
                            821.9828),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("occaecati",
                            "title",
                        OutputPixelType.S16,
                            "quo",
                            "title"),
                        [6,
                            9,
                            2],
                    Method.Nadir,
                    [new DimensionalDefinition("comment",
                            true,
                            "avatar"),
                    new DimensionalDefinition("email",
                            true,
                            "email"),
                    new DimensionalDefinition("status",
                            true,
                            "password")],
                        [3,
                            6,
                            5],
                    Operation.First,
                        "consequatur",
                        "expedita",
                    new Point(64.9969,
                            13.4610,
                            64.3084,
                            54.6411,
                            862.9414,
                        new SpatialReference(7,
                                "ad",
                                "fugit",
                                "expedita"),
                            true,
                            true,
                            539.7662),
                        "Phone = '555-555-5555'"),
                new PixelSize(70.4326,
                        60.1550,
                    new PixelSizeSpatialReference(2,
                            255.9504)),
                new RasterFunction("doloribus",
                        "comment",
                    OutputPixelType.U2,
                        "alias",
                        "updatedAt"),
                new TimeExtent(new DateTime(2010, 7, 15, 17, 52, 16),
                        new DateTime(2003, 7, 25, 20, 35, 52))),
                "et");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quae",
                    "qui",
                    "pariatur",
                    "debitis"],
                    ["status",
                        "status",
                        "status"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(61.5498,
                    -69.0831,
                    67.4566,
                    87.1155,
                    563.4639,
                    872.1371,
                    18.4063,
                    252.8355,
                new SpatialReference(4,
                        "suscipit",
                        "modi",
                        "repellendus"),
                    true,
                    true),
                6,
                7,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(729.3927,
                36.0132,
                784.6870,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-71.4861,
                    10.8321,
                    1.8749,
                    -70.3508,
                    859.9754,
                new SpatialReference(8,
                        "facilis",
                        "nemo",
                        "necessitatibus"),
                    true,
                    true,
                    560.1472),
            new RasterIdentifyOptions([new DimensionalDefinition("group",
                        true,
                        "avatar")],
                    "password"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Org,
                    "ut",
                    "aut",
                    433.0099,
                    ["est",
                        "non",
                        "maxime"],
                    new DateTime(2009, 9, 17, 7, 47, 2),
                    "itaque",
                    "natus ut sed in",
                new Extent(14.7551,
                        7.7697,
                        -13.7390,
                        88.0782,
                        119.2398,
                        854.2339,
                        386.0010,
                        250.9224,
                    new SpatialReference(8,
                            "ad",
                            "nihil",
                            "vel"),
                        true,
                        true),
                    ["qui",
                        "mollitia",
                        "aut",
                        "perspiciatis"],
                    "perspiciatis",
                    new DateTime(2003, 4, 7, 21, 50, 58),
                    "category",
                    616.7363),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2010, 7, 7, 19, 12, 54),
                        "a",
                        "dolorem officiis sit"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "quisquam",
                    "doloribus",
                    772.3611,
                    ["exercitationem",
                        "corrupti"],
                    new DateTime(2019, 9, 15, 11, 12, 34),
                    "ut",
                    "doloremque omnis esse voluptate sit",
                new Extent(94.9855,
                        -83.7613,
                        36.9033,
                        -42.1312,
                        238.5069,
                        757.7423,
                        215.1660,
                        234.0146,
                    new SpatialReference(8,
                            "error",
                            "velit",
                            "non"),
                        true,
                        true),
                    ["sit",
                        "reprehenderit",
                        "aperiam"],
                    "culpa",
                    new DateTime(2023, 8, 10, 1, 5, 53),
                    "title",
                    754.7850);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Invert;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("phone",
                    true,
                    "createdAt"),
            new DimensionalDefinition("updatedAt",
                    true,
                    "id"),
            new DimensionalDefinition("id",
                    true,
                    "password"),
            new DimensionalDefinition("password",
                    true,
                    "title")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([349.2110,
                            606.9517,
                            587.0054]),
                        new MapPoint([658.7192,
                            474.2151,
                            660.2170])])],
                    new SpatialReference(2,
                            "labore",
                            "incidunt",
                            "et"),
                    new Point(-161.8279,
                            -83.5800,
                            -145.8626,
                            32.3756,
                            680.9338,
                        new SpatialReference(4,
                                "ipsa",
                                "laudantium",
                                "rerum"),
                            true,
                            true,
                            738.1142),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("group",
                        true,
                        "phone"),
                new DimensionalDefinition("title",
                        true,
                        "category"),
                new DimensionalDefinition("name",
                        true,
                        "phone"),
                new DimensionalDefinition("comment",
                        true,
                        "group")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("repudiandae veritatis quo",
                    "deserunt",
                    ["adipisci",
                        "aut"],
                [new FieldInfo("comment",
                        "rerum",
                        "sed",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateLe),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("name",
                        "earum",
                        "nihil",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Avg)],
                [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                            "ab",
                            "mollitia velit eveniet")),
                new TextPopupContent("vero dolore magni")],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "token",
                        "autem et saepe",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("quaerat saepe incidunt",
                        "https://picsum.photos/640/480/?image=71",
                        "124379e7-d9d9-22c3-c275-08a4463bed57",
                        () => { Console.WriteLine("aperiam"); return Task.CompletedTask; },
                        "comment",
                        true,
                        true,
                        true,
                        "ea")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(153.5044,
                    -19.2046,
                    -3.9242,
                    -58.2960,
                    994.4906,
                    502.0393,
                    407.3017,
                    151.4772,
                new SpatialReference(1,
                        "accusantium",
                        "qui",
                        "maiores"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("repudiandae",
                    "name",
                OutputPixelType.F64,
                    "distinctio",
                    "name");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(700.1168,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(6,
                        "nesciunt",
                        61.2691,
                        11634429.1804),
                new LOD(3,
                        "fuga",
                        92.9521,
                        3660556.2400),
                new LOD(2,
                        "molestias",
                        16.2911,
                        16117350.8791),
                new LOD(1,
                        "dicta",
                        15.9761,
                        6682017.7226)],
                new Point(24.8134,
                        78.7178,
                        61.3426,
                        76.4618,
                        340.1206,
                    new SpatialReference(7,
                            "exercitationem",
                            "odio",
                            "nobis"),
                        true,
                        true,
                        850.3246),
                    [6,
                        4],
                new SpatialReference(4,
                        "sapiente",
                        "aut",
                        "quis"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 9, 16, 4, 38, 10),
                    new DateTime(2008, 1, 9, 7, 14, 55));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("corporis",
                    "quisquam",
                new TimeExtent(new DateTime(2019, 7, 18, 16, 16, 55),
                        new DateTime(2022, 3, 24, 10, 34, 47)),
                new TimeInterval(TemporalTime.Minutes,
                        46.3417),
                    [new DateTime(2008, 5, 27, 13, 21, 17),
                        new DateTime(2007, 5, 6, 2, 15, 45)],
                    "Europe/Sarajevo",
                    "consectetur");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    202.0081);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 4, 6, 8, 46, 36),
                    new DateTime(2016, 8, 18, 14, 21, 25));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
