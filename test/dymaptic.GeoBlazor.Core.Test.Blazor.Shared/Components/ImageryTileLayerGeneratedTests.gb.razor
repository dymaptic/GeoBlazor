@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(109, 121, 25),
                                new MapColor(108, 48, 3)),
                            true,
                            true,
                            [1,
                            6],
                            9,
                            8,
                            StretchType.MinMax,
                            [new RasterBandStatistics(169.6405,
                                3,
                                221.8200,
                                501.9013,
                                503.9043,
                                822.2910,
                                105.5236,
                                131.0465),
                            new RasterBandStatistics(845.8539,
                                1,
                                770.3025,
                                326.4736,
                                522.3882,
                                199.7048,
                                613.9718,
                                304.0010)],
                            true,
                            5))"
                        BandIds="@([7,
                            2])"
                        BlendMode="@(BlendMode.Xor)"
                        Copyright="@("voluptatem")"
                        Effect="@(new Effect("ex",
                            8803448.2839))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(6859360.0947)"
                        MinScale="@(38045.5576)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.5980)"
                        Title="@("consectetur voluptates odio")"
                        FullExtent="@(new Extent(-138.5668,
                                -1.4815,
                                -32.8421,
                                49.1957,
                                633.0396,
                                138.6247,
                                256.7145,
                                405.4528,
                            new SpatialReference(3,
                                    "ut",
                                    "dolore",
                                    "sit"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(94.7993)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("consequatur")"
                            EndField="@("libero")"
                            Stops="@([new DateTime(2013, 7, 4, 22, 21, 47),
                                new DateTime(2003, 9, 5, 4, 51, 33),
                                new DateTime(2020, 3, 9, 20, 51, 26)])"
                            TimeZone="@("Asia/Urumqi")"
                            TrackIdField="@("adipisci")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(95.4644)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 6, 11, 16, 34, 4))"
                                End="@(new DateTime(2014, 3, 9, 15, 31, 15))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2012, 11, 2, 15, 55, 31))"
                            End="@(new DateTime(2018, 11, 5, 11, 48, 56))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(4.5742)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "occaecati",
                                    5.9706,
                                    25338007.8378),
                            new LOD(6,
                                    "eligendi",
                                    11.8040,
                                    41717600.1124)])"
                            Origin="@(new Point(141.8709,
                                    64.0394,
                                    -98.6490,
                                    -88.6833,
                                    592.1558,
                                new SpatialReference(3,
                                        "perferendis",
                                        "ut",
                                        "saepe"),
                                    true,
                                    true,
                                    654.5556))"
                            Size="@([6,
                                7,
                                8])"
                            SpatialReference="@(new SpatialReference(6,
                                    "quidem",
                                    "cumque",
                                    "culpa"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("ea")"
                            FunctionName="@("group")"
                            OutputPixelType="@(OutputPixelType.U2)"
                            RasterFunctionDefinition="@("magnam")"
                            VariableName="@("email")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("distinctio nihil doloremque")"
                            StringContent="@("voluptatibus")"
                            OutFields="@(["quidem",
                                "molestiae"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "omnis",
                                    "illum",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("title",
                                    "omnis",
                                    "pariatur",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new AttachmentsPopupContent("rerum molestias laudantium",
                                    "perferendis temporibus et beatae enim architecto modi",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "comment",
                                    "consequatur voluptatum et",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "category",
                                    "quam possimus veritatis",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("est aperiam aspernatur",
                                    "https://picsum.photos/640/480/?image=693",
                                    "7ab08658-a68b-eec6-3d00-93d549597fd1",
                                    () => { Console.WriteLine("deleniti"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "quaerat"),
                            new ActionToggle("accusamus quo vel",
                                    "7c6493b5-7e46-0aad-1031-33d1669355d6",
                                    () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "pariatur")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([800.6904,
                                        717.3203]),
                                    new MapPoint([302.1777,
                                        923.1891]),
                                    new MapPoint([616.0471,
                                        541.4021,
                                        168.9908,
                                        460.7482])]),
                                    new MapPath([new MapPoint([592.8002,
                                            26.0209,
                                            123.4231,
                                            720.3237]),
                                        new MapPoint([166.7393,
                                            246.1922,
                                            189.3841])]),
                                    new MapPath([new MapPoint([363.5917,
                                            834.4241,
                                            795.2064,
                                            174.1159]),
                                        new MapPoint([93.4254,
                                            664.9634,
                                            309.5831,
                                            888.8745])])],
                                new SpatialReference(2,
                                        "aut",
                                        "quam",
                                        "dignissimos"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("category")"
                                IsSlice="@(true)"
                                VariableName="@("name")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("phone")"
                            IsSlice="@(true)"
                            VariableName="@("password")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(-126.2010,
                        -56.2024,
                        44.4542,
                        72.8770,
                        489.0471,
                        281.5400,
                        117.9492,
                        724.6239,
                    new SpatialReference(2,
                            "et",
                            "repellat",
                            "ut"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("et",
                            "email",
                        OutputPixelType.S16,
                            "rerum",
                            "category"),
                        [5,
                            9],
                    Method.None,
                    [new DimensionalDefinition("category",
                            true,
                            "phone")],
                        [6,
                            8,
                            8,
                            7],
                    Operation.Last,
                        "dolorem",
                        "eum",
                    new Point(139.6930,
                            -27.2327,
                            -86.5435,
                            81.4538,
                            429.3216,
                        new SpatialReference(6,
                                "quo",
                                "qui",
                                "architecto"),
                            true,
                            true,
                            553.9095),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(96.1002,
                        -4.0257,
                    new PixelSizeSpatialReference(3,
                            851.3945)),
                new RasterFunction("distinctio",
                        "name",
                    OutputPixelType.S8,
                        "voluptas",
                        "createdAt"),
                new TimeExtent(new DateTime(2004, 5, 26, 0, 10, 9),
                        new DateTime(2003, 3, 18, 0, 16, 44))),
                "ut");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["iure",
                    "id"],
                    ["avatar",
                        "password",
                        "name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-149.4260,
                    66.7090,
                    -3.8151,
                    44.7633,
                    959.1148,
                    260.2619,
                    509.5434,
                    139.9669,
                new SpatialReference(7,
                        "molestiae",
                        "et",
                        "non"),
                    true,
                    true),
                8,
                4,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Cubic));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(68.5774,
                234.3966,
                234.0103,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-134.6559,
                    -44.3099,
                    -73.6230,
                    34.2157,
                    249.9900,
                new SpatialReference(8,
                        "sed",
                        "aut",
                        "ut"),
                    true,
                    true,
                    302.0197),
            new RasterIdentifyOptions([new DimensionalDefinition("phone",
                        true,
                        "title"),
                new DimensionalDefinition("avatar",
                        true,
                        "comment"),
                new DimensionalDefinition("title",
                        true,
                        "updatedAt"),
                new DimensionalDefinition("group",
                        true,
                        "createdAt")],
                    "phone"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2013, 2, 11, 4, 34, 48),
                        "quis",
                        "quia alias accusamus"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Invert;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("id",
                    true,
                    "createdAt"),
            new DimensionalDefinition("id",
                    true,
                    "category")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([348.6665,
                            435.3418,
                            510.4545]),
                        new MapPoint([323.4541,
                            81.9898]),
                        new MapPoint([508.8308,
                            935.9290,
                            655.5253]),
                        new MapPoint([944.7211,
                            287.4883,
                            393.3782,
                            647.9626])]),
                        new MapPath([new MapPoint([259.6572,
                                977.7170,
                                823.4406,
                                193.7986]),
                            new MapPoint([314.1304,
                                614.3434,
                                697.9074,
                                607.5736])])],
                    new SpatialReference(7,
                            "error",
                            "nesciunt",
                            "praesentium"),
                        true,
                        true),
                [new DimensionalDefinition("id",
                        true,
                        "phone"),
                new DimensionalDefinition("comment",
                        true,
                        "password"),
                new DimensionalDefinition("status",
                        true,
                        "email"),
                new DimensionalDefinition("name",
                        true,
                        "group")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("est omnis eos",
                    "repudiandae",
                    ["atque",
                        "est",
                        "ut"],
                [new FieldInfo("createdAt",
                        "beatae",
                        "sed",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateShortTime24),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("category",
                        "minus",
                        "saepe",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDateLongTime),
                        true,
                        true,
                    StatisticType.Avg)],
                [new MediaPopupContent("eveniet et labore",
                        "optio aut dolor sunt quaerat dolorum",
                    [new LineChartMediaInfo("distinctio et sed",
                            "voluptatem",
                            "velit molestiae quo",
                        new ChartMediaInfoValue(["vel",
                                "quaerat",
                                "inventore"],
                                "itaque",
                                "consectetur",
                            [new ChartMediaInfoValueSeries("comment",
                                    "est",
                                    861.4503),
                            new ChartMediaInfoValueSeries("token",
                                    "nobis",
                                    31.4961),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "facere",
                                    457.7564),
                            new ChartMediaInfoValueSeries("email",
                                    "ratione",
                                    911.6483)],
                            [new MapColor(101, 76, 16),
                            new MapColor(251, 76, 37)])),
                    new BarChartMediaInfo("tenetur impedit animi",
                            "perspiciatis",
                            "ipsum incidunt non",
                        new ChartMediaInfoValue(["qui",
                                "doloremque",
                                "voluptatibus",
                                "aliquam"],
                                "vero",
                                "architecto",
                            [new ChartMediaInfoValueSeries("title",
                                    "exercitationem",
                                    581.9983),
                            new ChartMediaInfoValueSeries("category",
                                    "natus",
                                    323.8233)],
                            [new MapColor(191, 6, 202),
                            new MapColor(176, 237, 157),
                            new MapColor(159, 199, 250),
                            new MapColor(230, 209, 64)]))],
                        9)],
                [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "group",
                        "excepturi officia temporibus",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "title",
                        "voluptatem voluptatem deserunt",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "category",
                        "sint similique reiciendis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "token",
                        "iusto laboriosam quia",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("et reprehenderit nisi",
                        "585ffe64-38e1-513c-aafe-4a75bfa0c24f",
                        () => { Console.WriteLine("veniam"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "expedita"),
                new ActionButton("vitae aspernatur ducimus",
                        "https://picsum.photos/640/480/?image=770",
                        "89c4573f-bc0f-bd9f-eda9-ace0abef83a9",
                        () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                        "title",
                        true,
                        true,
                        true,
                        "doloremque"),
                new ActionToggle("eos sit minima",
                        "2d45f581-cc3b-7370-a8f3-3b78d47e56f8",
                        () => { Console.WriteLine("rem"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "harum"),
                new ActionToggle("et inventore et",
                        "b5dae7a0-f443-a309-9da5-123d025bdb4a",
                        () => { Console.WriteLine("dolorem"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "comment",
                        "sit")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(135.7647,
                    9.5960,
                    -43.4837,
                    60.3182,
                    410.6319,
                    686.1328,
                    673.2286,
                    784.3741,
                new SpatialReference(5,
                        "est",
                        "est",
                        "doloribus"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("vel",
                    "name",
                OutputPixelType.U32,
                    "est",
                    "status");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(510.2413,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(4,
                        "rerum",
                        61.6029,
                        10404027.2302),
                new LOD(3,
                        "optio",
                        83.3578,
                        45207349.0051),
                new LOD(4,
                        "necessitatibus",
                        8.6396,
                        10970275.2792)],
                new Point(-75.5401,
                        72.2649,
                        73.4206,
                        -85.3349,
                        114.8421,
                    new SpatialReference(3,
                            "expedita",
                            "aut",
                            "amet"),
                        true,
                        true,
                        794.0739),
                    [3,
                        9,
                        4,
                        8],
                new SpatialReference(8,
                        "accusantium",
                        "autem",
                        "numquam"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2017, 6, 10, 21, 54, 55),
                    new DateTime(2019, 3, 6, 15, 20, 11));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quod",
                    "tempora",
                new TimeExtent(new DateTime(2009, 4, 7, 11, 44, 34),
                        new DateTime(2017, 11, 26, 10, 29, 27)),
                new TimeInterval(TemporalTime.Hours,
                        911.1323),
                    [new DateTime(2000, 8, 19, 22, 47, 22),
                        new DateTime(2002, 11, 26, 20, 44, 55)],
                    "Asia/Seoul",
                    "aliquid");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    767.7026);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 10, 10, 2, 33, 49),
                    new DateTime(2007, 9, 4, 7, 34, 0));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
