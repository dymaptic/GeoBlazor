@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(247, 105, 92),
                                new MapColor(13, 84, 57)),
                            true,
                            true,
                            [6,
                            4,
                            4],
                            5,
                            2,
                            StretchType.None,
                            [new RasterBandStatistics(528.3884,
                                6,
                                104.5346,
                                424.3417,
                                408.7389,
                                104.1787,
                                334.6626,
                                752.7308),
                            new RasterBandStatistics(761.9906,
                                9,
                                572.4269,
                                582.8506,
                                803.1880,
                                225.8970,
                                426.5026,
                                662.1909),
                            new RasterBandStatistics(562.9677,
                                6,
                                790.8259,
                                518.3745,
                                677.6809,
                                63.6724,
                                126.6900,
                                41.9759),
                            new RasterBandStatistics(979.3738,
                                9,
                                117.2099,
                                963.9749,
                                696.4594,
                                665.7716,
                                494.9585,
                                768.4418)],
                            true,
                            3))"
                        BandIds="@([2,
                            1,
                            3,
                            3])"
                        BlendMode="@(BlendMode.Luminosity)"
                        Copyright="@("ipsa")"
                        Effect="@(new Effect("iusto",
                            48298911.7955))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(14253902.8615)"
                        MinScale="@(29694.1490)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.7251)"
                        Title="@("alias placeat officiis")"
                        FullExtent="@(new Extent(-77.2939,
                                45.1838,
                                -87.6042,
                                -36.2248,
                                474.8356,
                                909.2664,
                                864.2899,
                                469.9902,
                            new SpatialReference(9,
                                    "in",
                                    "voluptates",
                                    "veniam"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(992.4753)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("reprehenderit")"
                            EndField="@("modi")"
                            Stops="@([new DateTime(2007, 8, 1, 0, 10, 18),
                                new DateTime(2019, 10, 12, 7, 49, 53)])"
                            TimeZone="@("America/Denver")"
                            TrackIdField="@("assumenda")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(67.8946)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2013, 8, 14, 22, 29, 32))"
                                End="@(new DateTime(2016, 1, 5, 14, 6, 33))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2002, 3, 6, 19, 49, 0))"
                            End="@(new DateTime(2017, 10, 17, 19, 17, 42))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(225.3748)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "sed",
                                    78.2613,
                                    27427441.7281)])"
                            Origin="@(new Point(124.8345,
                                    77.1259,
                                    -145.3405,
                                    -56.6350,
                                    824.8653,
                                new SpatialReference(3,
                                        "facilis",
                                        "eaque",
                                        "corrupti"),
                                    true,
                                    true,
                                    771.2460))"
                            Size="@([5,
                                8,
                                6,
                                9])"
                            SpatialReference="@(new SpatialReference(5,
                                    "consequuntur",
                                    "animi",
                                    "dolore"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("nihil")"
                            FunctionName="@("category")"
                            OutputPixelType="@(OutputPixelType.F64)"
                            RasterFunctionDefinition="@("ab")"
                            VariableName="@("password")">
                        </RasterFunction>
                        <PopupTemplate 
                            Title="@("quaerat perspiciatis quam")"
                            StringContent="@("voluptas")"
                            OutFields="@(["id",
                                "sed",
                                "ratione"])"
                            FieldInfos="@([new FieldInfo("status",
                                    "aut",
                                    "expedita",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("email",
                                    "dolores",
                                    "doloribus",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("id",
                                    "perferendis",
                                    "suscipit",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("id",
                                    "magni",
                                    "aspernatur",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortDateShortTime),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "expedita",
                                        "quam est unde")),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                                        "aspernatur",
                                        "officia et ullam")),
                            new RelationshipPopupContent("dicta quibusdam neque",
                                    "harum beatae est non dolore nemo",
                                    1,
                                    "modi",
                                [new RelatedRecordsInfoFieldOrder("ipsa",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("explicabo",
                                    OrderBy.Desc)],
                                    9),
                            new MediaPopupContent("voluptas mollitia sed",
                                    "mollitia et fugiat sit sed ut porro",
                                [new ImageMediaInfo("consectetur occaecati id",
                                        "corporis",
                                        "doloremque occaecati et",
                                    new ImageMediaInfoValue("https://kacey.org",
                                            "https://delores.net"),
                                        404.8720),
                                new BarChartMediaInfo("cupiditate asperiores optio",
                                        "molestiae",
                                        "porro temporibus assumenda",
                                    new ChartMediaInfoValue(["eum",
                                            "at"],
                                            "omnis",
                                            "esse",
                                        [new ChartMediaInfoValueSeries("email",
                                                "molestias",
                                                868.3213),
                                        new ChartMediaInfoValueSeries("email",
                                                "laborum",
                                                641.9197),
                                        new ChartMediaInfoValueSeries("updatedAt",
                                                "et",
                                                865.7142)],
                                        [new MapColor(211, 207, 34)])),
                                new PieChartMediaInfo("tempora officia quia",
                                        "aut",
                                        "aliquid minima laboriosam",
                                    new ChartMediaInfoValue(["ut",
                                            "quisquam",
                                            "voluptatem",
                                            "molestias"],
                                            "non",
                                            "doloremque",
                                        [new ChartMediaInfoValueSeries("avatar",
                                                "aut",
                                                309.0469),
                                        new ChartMediaInfoValueSeries("email",
                                                "enim",
                                                652.0253),
                                        new ChartMediaInfoValueSeries("avatar",
                                                "inventore",
                                                820.7270)],
                                        [new MapColor(135, 11, 181)])),
                                new PieChartMediaInfo("veniam quis necessitatibus",
                                        "fugiat",
                                        "soluta eum voluptas",
                                    new ChartMediaInfoValue(["consequatur",
                                            "sit",
                                            "quis",
                                            "est"],
                                            "omnis",
                                            "doloribus",
                                        [new ChartMediaInfoValueSeries("name",
                                                "ex",
                                                356.5657),
                                        new ChartMediaInfoValueSeries("avatar",
                                                "natus",
                                                52.0794),
                                        new ChartMediaInfoValueSeries("token",
                                                "iure",
                                                681.9224)],
                                        [new MapColor(124, 13, 14)]))],
                                    7)])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "category",
                                    "qui dolor amet",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("saepe cumque aut",
                                    "103c8044-213c-a4ab-67a0-ac7e70b743f6",
                                    () => { Console.WriteLine("magni"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "eos")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(111.5270,
                                    25.4099,
                                    19.7345,
                                    6.8203,
                                    479.3600,
                                new SpatialReference(9,
                                        "sed",
                                        "labore",
                                        "similique"),
                                    true,
                                    true,
                                    488.8628))">
                            <DimensionalDefinition 
                                DimensionName="@("email")"
                                IsSlice="@(true)"
                                VariableName="@("title")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("category")"
                            IsSlice="@(true)"
                            VariableName="@("password")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([731.9108,
                            174.0666,
                            268.0766,
                            316.9268]),
                        new MapPoint([358.3452,
                            386.8347]),
                        new MapPoint([803.3983,
                            427.4104,
                            400.8920,
                            835.9489])])],
                    new SpatialReference(2,
                            "libero",
                            "et",
                            "id"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("eveniet",
                            "phone",
                        OutputPixelType.S16,
                            "quaerat",
                            "id"),
                        [8,
                            5,
                            9,
                            3],
                    Method.Center,
                    [new DimensionalDefinition("id",
                            true,
                            "category"),
                    new DimensionalDefinition("comment",
                            true,
                            "name"),
                    new DimensionalDefinition("comment",
                            true,
                            "status")],
                        [2,
                            5],
                    Operation.First,
                        "ullam",
                        "necessitatibus",
                    new Point(34.4030,
                            -84.5561,
                            -55.4175,
                            38.9803,
                            368.3209,
                        new SpatialReference(8,
                                "voluptas",
                                "enim",
                                "dolor"),
                            true,
                            true,
                            794.7961),
                        "1 = 1"),
                new PixelSize(-89.6561,
                        -17.4346,
                    new PixelSizeSpatialReference(7,
                            363.7054)),
                new RasterFunction("doloremque",
                        "token",
                    OutputPixelType.U2,
                        "omnis",
                        "category"),
                new TimeExtent(new DateTime(2007, 8, 15, 14, 52, 17),
                        new DateTime(2015, 1, 13, 13, 24, 52))),
                "voluptatem");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["ex",
                    "animi",
                    "aut",
                    "voluptas"],
                    ["token",
                        "group",
                        "status",
                        "avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(170.6359,
                    -97.8363,
                    89.8289,
                    29.8748,
                    569.9887,
                    318.8376,
                    829.1825,
                    916.1329,
                new SpatialReference(4,
                        "et",
                        "id",
                        "illum"),
                    true,
                    true),
                8,
                3,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(904.2466,
                924.4891,
                712.7439,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(128.2189,
                    -45.5999,
                    150.9991,
                    -69.0660,
                    402.1596,
                new SpatialReference(2,
                        "necessitatibus",
                        "ea",
                        "tenetur"),
                    true,
                    true,
                    584.5040),
            new RasterIdentifyOptions([new DimensionalDefinition("id",
                        true,
                        "avatar")],
                    "createdAt"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "atque",
                    "qui",
                    956.8084,
                    ["ipsam",
                        "a",
                        "et",
                        "ex"],
                    new DateTime(2022, 11, 19, 12, 54, 57),
                    "ad",
                    "delectus molestiae veniam magnam aut saepe ab",
                new Extent(-88.1617,
                        -86.7674,
                        -55.1938,
                        -61.0284,
                        563.7269,
                        255.0847,
                        160.7765,
                        267.3734,
                    new SpatialReference(1,
                            "et",
                            "ut",
                            "et"),
                        true,
                        true),
                    ["aut",
                        "rerum"],
                    "illo",
                    new DateTime(2001, 8, 14, 21, 58, 33),
                    "group",
                    597.9863),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2021, 3, 22, 9, 0, 48),
                        "nostrum",
                        "molestiae et magnam"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "velit",
                    "modi",
                    15.7869,
                    ["quia",
                        "sunt",
                        "provident"],
                    new DateTime(2023, 11, 8, 17, 14, 1),
                    "tenetur",
                    "fugit corporis omnis excepturi ratione veniam",
                new Extent(-86.2494,
                        -147.5089,
                        -14.3677,
                        -88.1591,
                        324.7970,
                        56.1377,
                        117.8306,
                        125.8420,
                    new SpatialReference(5,
                            "et",
                            "error",
                            "eum"),
                        true,
                        true),
                    ["non",
                        "sapiente"],
                    "quas",
                    new DateTime(2007, 9, 22, 5, 57, 18),
                    "password",
                    297.1405);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Screen;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("createdAt",
                    true,
                    "password")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset([new DimensionalDefinition("email",
                        true,
                        "token"),
                new DimensionalDefinition("status",
                        true,
                        "status")],
                new Point(150.1029,
                        39.5891,
                        -169.4628,
                        86.8437,
                        265.0629,
                    new SpatialReference(3,
                            "iure",
                            "laborum",
                            "voluptatem"),
                        true,
                        true,
                        416.7665));
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("a ipsam enim",
                    "minus",
                    ["eos",
                        "possimus",
                        "tenetur"],
                [new FieldInfo("status",
                        "repellat",
                        "est",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("id",
                        "laboriosam",
                        "totam",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.DayShortMonthYearLongTime24),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("group",
                        "expedita",
                        "inventore",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("createdAt",
                        "non",
                        "aut",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.DayShortMonthYearLongTime),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new RelationshipPopupContent("ipsam vitae a",
                        "ut velit beatae omnis dolorum eligendi ut",
                        7,
                        "eum",
                    [new RelatedRecordsInfoFieldOrder("maiores",
                        OrderBy.Desc)],
                        8)],
                [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "group",
                        "ea aut magni",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("recusandae labore ipsam",
                        "https://picsum.photos/640/480/?image=1074",
                        "eb29abb2-1847-6a0e-412e-cbf9309c6966",
                        () => { Console.WriteLine("ab"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "ad")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(166.4077,
                    71.2626,
                    11.3586,
                    -80.1653,
                    264.8552,
                    391.3090,
                    287.9569,
                    86.3279,
                new SpatialReference(1,
                        "aut",
                        "quia",
                        "quas"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("repudiandae",
                    "name",
                OutputPixelType.S32,
                    "soluta",
                    "name");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(770.8736,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(2,
                        "dignissimos",
                        10.3844,
                        1643492.0164),
                new LOD(7,
                        "quas",
                        45.9519,
                        45975681.7091)],
                new Point(-96.3969,
                        -70.9432,
                        58.1593,
                        68.1000,
                        341.3862,
                    new SpatialReference(1,
                            "officiis",
                            "magnam",
                            "omnis"),
                        true,
                        true,
                        691.4508),
                    [2,
                        9,
                        4,
                        4],
                new SpatialReference(7,
                        "rem",
                        "est",
                        "reiciendis"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2002, 10, 3, 21, 48, 4),
                    new DateTime(2007, 4, 16, 8, 21, 8));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("qui",
                    "sapiente",
                new TimeExtent(new DateTime(2023, 1, 23, 18, 23, 32),
                        new DateTime(2020, 3, 25, 13, 33, 19)),
                new TimeInterval(TemporalTime.Decades,
                        245.0653),
                    [new DateTime(2012, 10, 13, 16, 0, 29),
                        new DateTime(2018, 2, 8, 0, 19, 19)],
                    "Pacific/Pago_Pago",
                    "praesentium");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Minutes,
                    632.5835);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 9, 8, 12, 50, 29),
                    new DateTime(2017, 9, 19, 18, 56, 0));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
