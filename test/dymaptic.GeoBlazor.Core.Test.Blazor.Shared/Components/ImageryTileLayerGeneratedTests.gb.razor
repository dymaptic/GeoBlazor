@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(106, 104, 187),
                                new MapColor(183, 136, 27)),
                            true,
                            true,
                            [3,
                            4],
                            7,
                            5,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(367.4396,
                                5,
                                924.6431,
                                471.3289,
                                64.6781,
                                807.5883,
                                706.4285,
                                93.5473)],
                            true,
                            7))"
                        BandIds="@([3])"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Copyright="@("ducimus")"
                        Effect="@(new Effect("aut",
                            4932290.9427))"
                        Interpolation="@(PixelInterpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(29538947.2589)"
                        MinScale="@(4732.8131)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.7304)"
                        Title="@("exercitationem in vel")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(586.9199)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("suscipit")"
                            EndField="@("nihil")"
                            Stops="@([new DateTime(2010, 7, 2, 14, 28, 21)])"
                            TimeZone="@("Pacific/Fiji")"
                            TrackIdField="@("in")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(437.3033)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2006, 10, 10, 18, 26, 40))"
                                End="@(new DateTime(2005, 8, 17, 1, 19, 58))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2006, 7, 27, 0, 31, 6))"
                            End="@(new DateTime(2003, 8, 27, 10, 21, 8))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(937.2383)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "et",
                                    93.4977,
                                    35724729.6846)])"
                            Size="@([3])"
                            SpatialReference="@(new SpatialReference(4,
                                    "temporibus",
                                    "consequuntur",
                                    "cum"))">
                            <Point 
                                Longitude="@(-56.0595)"
                                Latitude="@(47.6544)"
                                X="@(52.8795)"
                                Y="@(40.1648)"
                                Z="@(397.0406)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(444.0206)">
                                <SpatialReference 
                                    Wkid="@(7)"
                                    ImageCoordinateSystem="@("ea")"
                                    Wkt="@("voluptates")"
                                    Wkt2="@("magni")">
                                </SpatialReference>
                            </Point>
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("excepturi")"
                            FunctionName="@("title")"
                            OutputPixelType="@(OutputPixelType.U8)"
                            RasterFunctionDefinition="@("ad")"
                            VariableName="@("phone")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("commodi nisi dignissimos")"
                            StringContent="@("possimus")"
                            OutFields="@(["id"])"
                            FieldInfos="@([new FieldInfo("name",
                                    "debitis",
                                    "in",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("email",
                                    "labore",
                                    "aut",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("name",
                                        "mollitia",
                                        "necessitatibus",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime),
                                        true,
                                        true,
                                    StatisticType.Count),
                                new FieldInfo("token",
                                        "aperiam",
                                        "voluptatem",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Count)],
                                    "soluta rem",
                                    "eum eaque veritatis"),
                            new MediaPopupContent("totam porro unde",
                                    "omnis saepe ipsam placeat",
                                [new BarChartMediaInfo("cum dolorem corporis",
                                        "suscipit",
                                        "tenetur aut vitae",
                                    new ChartMediaInfoValue(["ut"],
                                            "maiores",
                                            "magnam",
                                        [new ChartMediaInfoValueSeries("token",
                                                "totam",
                                                200.2306)],
                                        [new MapColor(137, 245, 113)])),
                                new LineChartMediaInfo("delectus aut natus",
                                        "necessitatibus",
                                        "blanditiis quidem aut",
                                    new ChartMediaInfoValue(["enim"],
                                            "architecto",
                                            "et",
                                        [new ChartMediaInfoValueSeries("id",
                                                "quibusdam",
                                                702.8777)],
                                        [new MapColor(251, 101, 174)]))],
                                    3)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "comment",
                                    "repudiandae veniam ducimus",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("consequuntur mollitia impedit",
                                "https://picsum.photos/640/480/?image=613",
                                "c92b4904-dbf4-78d8-d65c-2fd62c52767b",
                                () => { Console.WriteLine("dolorem"); return Task.CompletedTask; },
                                "status",
                                true,
                                true,
                                true,
                                "aut")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([741.0555])])],
                                new SpatialReference(3,
                                        "in",
                                        "dolorem",
                                        "officia"),
                                new Point(111.2801,
                                        -19.3860,
                                        177.7751,
                                        54.7277,
                                        11.7588,
                                    new SpatialReference(5,
                                            "sapiente",
                                            "iusto",
                                            "hic"),
                                        true,
                                        true,
                                        895.5150),
                                    true,
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("group")"
                                IsSlice="@(true)"
                                VariableName="@("createdAt")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("phone")"
                            IsSlice="@(true)"
                            VariableName="@("email")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(-70.1090)"
                            Xmin="@(121.4588)"
                            Ymax="@(36.1075)"
                            Ymin="@(12.3637)"
                            Zmax="@(150.0061)"
                            Zmin="@(928.3264)"
                            Mmax="@(408.0048)"
                            Mmin="@(151.0818)"
                            SpatialReference="@(new SpatialReference(2,
                                    "laboriosam",
                                    "praesentium",
                                    "sit"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([305.3033])])],
                    new SpatialReference(4,
                            "enim",
                            "et",
                            "nemo"),
                    new Point(-154.4498,
                            16.5581,
                            16.8624,
                            -15.3022,
                            762.9239,
                        new SpatialReference(3,
                                "quisquam",
                                "quam",
                                "hic"),
                            true,
                            true,
                            738.0790),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("temporibus",
                            "password",
                        OutputPixelType.S32,
                            "amet",
                            "updatedAt"),
                        [3],
                    Method.Nadir,
                    [new DimensionalDefinition("password",
                            true,
                            "avatar")],
                        [1],
                    Operation.Mean,
                        "doloribus",
                        "ex",
                    new Point(160.5397,
                            -42.6404,
                            -65.3469,
                            9.2861,
                            285.9021,
                        new SpatialReference(3,
                                "perferendis",
                                "ullam",
                                "animi"),
                            true,
                            true,
                            705.4413),
                        "Phone = '555-555-5555'"),
                new PixelSize(67.5637,
                        68.1182,
                    new PixelSizeSpatialReference(7,
                            320.0104)),
                new RasterFunction("hic",
                        "email",
                    OutputPixelType.F64,
                        "magni",
                        "avatar"),
                new TimeExtent(new DateTime(2018, 6, 19, 21, 51, 5),
                        new DateTime(2005, 4, 1, 20, 15, 11))),
                "recusandae");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["sunt"],
                    ["comment"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-64.7921,
                    -173.4874,
                    -14.2193,
                    76.9593,
                    102.9043,
                    198.6275,
                    257.7940,
                    843.6926,
                new SpatialReference(5,
                        "et",
                        "corporis",
                        "ut"),
                    true,
                    true),
                7,
                9,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Cubic));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(258.3528,
                74.7037,
                67.3644,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-88.0679,
                    11.2120,
                    129.8666,
                    69.3699,
                    322.8224,
                new SpatialReference(3,
                        "adipisci",
                        "sint",
                        "velit"),
                    true,
                    true,
                    471.6663),
            new RasterIdentifyOptions([new DimensionalDefinition("phone",
                        true,
                        "email")],
                    "group"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2000, 10, 4, 5, 37, 22),
                        "aut",
                        "quia eligendi quam"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Darken;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("id",
                    true,
                    "phone")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([694.7369])])],
                    new SpatialReference(2,
                            "est",
                            "et",
                            "nisi"),
                        true,
                        true),
                [new DimensionalDefinition("createdAt",
                        true,
                        "updatedAt")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("nulla non temporibus",
                    "aut",
                    ["consectetur"],
                [new FieldInfo("id",
                        "id",
                        "ducimus",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new TextPopupContent("dignissimos commodi quasi")],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "phone",
                        "consequatur voluptatibus sed",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("magnam iste rerum",
                        "https://picsum.photos/640/480/?image=530",
                        "e9e095eb-3552-c711-4deb-077efb65e48d",
                        () => { Console.WriteLine("accusamus"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "nesciunt")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-89.3535,
                    -155.2580,
                    12.4328,
                    -76.8172,
                    709.3427,
                    904.3392,
                    752.7567,
                    250.3163,
                new SpatialReference(4,
                        "voluptas",
                        "animi",
                        "odit"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("eos",
                    "name",
                OutputPixelType.F32,
                    "quae",
                    "email");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(521.9819,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(4,
                        "doloremque",
                        50.8349,
                        9741953.0102)],
                new Point(-97.8112,
                        -58.4024,
                        -168.0473,
                        -11.6827,
                        436.3381,
                    new SpatialReference(1,
                            "sed",
                            "quo",
                            "aut"),
                        true,
                        true,
                        955.5403),
                    [9],
                new SpatialReference(3,
                        "voluptatem",
                        "modi",
                        "suscipit"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 4, 14, 14, 28, 36),
                    new DateTime(2013, 2, 9, 11, 54, 49));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("nobis",
                    "omnis",
                new TimeExtent(new DateTime(2012, 11, 25, 1, 44, 22),
                        new DateTime(2020, 10, 21, 2, 6, 54)),
                new TimeInterval(TemporalTime.Months,
                        142.9308),
                    [new DateTime(2023, 11, 11, 9, 10, 17)],
                    "Asia/Tashkent",
                    "sed");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    888.3983);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 8, 19, 9, 35, 39),
                    new DateTime(2000, 5, 22, 9, 28, 51));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
