@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(29, 45, 162),
                                new MapColor(36, 221, 24)),
                            true,
                            true,
                            [1,
                            2,
                            1,
                            2],
                            9,
                            7,
                            StretchType.HistogramEqualization,
                            [new RasterBandStatistics(525.8152,
                                1,
                                195.8385,
                                614.5640,
                                463.6202,
                                838.6660,
                                616.2406,
                                12.1531),
                            new RasterBandStatistics(572.9292,
                                5,
                                723.3291,
                                92.2961,
                                777.9109,
                                288.1219,
                                479.4547,
                                556.4819)],
                            true,
                            6))"
                        BandIds="@([5,
                            2,
                            3,
                            3])"
                        BlendMode="@(BlendMode.SourceOut)"
                        Copyright="@("voluptatem")"
                        Effect="@(new Effect("nisi",
                            17379525.3945))"
                        Interpolation="@(PixelInterpolation.Cubic)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(6005818.4213)"
                        MinScale="@(20669.5978)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.2273)"
                        Title="@("dolores consequuntur illum")"
                        FullExtent="@(new Extent(79.6154,
                                -173.9324,
                                -27.8560,
                                79.4588,
                                623.4545,
                                120.4117,
                                305.8772,
                                161.8485,
                            new SpatialReference(6,
                                    "cum",
                                    "excepturi",
                                    "accusamus"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(989.0008)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("ratione")"
                            EndField="@("eligendi")"
                            Stops="@([new DateTime(2019, 2, 2, 19, 45, 20),
                                new DateTime(2015, 1, 14, 15, 52, 36)])"
                            TimeZone="@("Europe/Athens")"
                            TrackIdField="@("adipisci")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(731.5881)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2014, 9, 19, 1, 21, 11))"
                                End="@(new DateTime(2013, 7, 25, 12, 27, 9))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2021, 6, 17, 0, 43, 43))"
                            End="@(new DateTime(2005, 2, 18, 7, 55, 13))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(763.0615)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "velit",
                                    30.6887,
                                    19018845.0319),
                            new LOD(3,
                                    "quos",
                                    90.9669,
                                    12964527.1535)])"
                            Origin="@(new Point(-17.5658,
                                    3.8022,
                                    -24.1805,
                                    -4.5418,
                                    907.5503,
                                new SpatialReference(8,
                                        "quia",
                                        "cupiditate",
                                        "sint"),
                                    true,
                                    true,
                                    819.6468))"
                            Size="@([7,
                                2,
                                5,
                                7])"
                            SpatialReference="@(new SpatialReference(5,
                                    "rerum",
                                    "eaque",
                                    "ut"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("vero")"
                            FunctionName="@("name")"
                            OutputPixelType="@(OutputPixelType.U8)"
                            RasterFunctionDefinition="@("deserunt")"
                            VariableName="@("avatar")">
                        </RasterFunction>
                        <PopupTemplate 
                            Title="@("distinctio cumque facere")"
                            StringContent="@("sapiente")"
                            OutFields="@(["repudiandae",
                                "cum",
                                "qui"])"
                            FieldInfos="@([new FieldInfo("updatedAt",
                                    "ducimus",
                                    "ut",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new TextPopupContent("ipsam vitae reprehenderit"),
                            new AttachmentsPopupContent("doloribus totam dolorum",
                                    "quia excepturi officia nam unde",
                                    AttachmentsPopupContentDisplayType.Preview),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "minus",
                                        "animi odio voluptate"))])"
                            ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "phone",
                                    "ut non minus",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "id",
                                    "placeat voluptates doloribus",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("omnis repudiandae fugiat",
                                    "https://picsum.photos/640/480/?image=372",
                                    "8adb73d3-6391-992c-9732-1cbb0b455123",
                                    () => { Console.WriteLine("numquam"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "provident")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([292.7854,
                                        610.1282]),
                                    new MapPoint([538.2399,
                                        568.3251]),
                                    new MapPoint([957.8684,
                                        102.2314,
                                        919.0240,
                                        20.8145])]),
                                    new MapPath([new MapPoint([561.1221,
                                            54.6414]),
                                        new MapPoint([525.1964,
                                            58.2802,
                                            232.5207,
                                            45.1096]),
                                        new MapPoint([51.2190,
                                            308.7409]),
                                        new MapPoint([343.8111,
                                            202.9664,
                                            463.3857])]),
                                    new MapPath([new MapPoint([668.7613,
                                            978.1446,
                                            350.9155]),
                                        new MapPoint([711.4080,
                                            534.6531]),
                                        new MapPoint([84.1188,
                                            145.8729,
                                            937.0385,
                                            579.5614])]),
                                    new MapPath([new MapPoint([158.7241,
                                            749.5754,
                                            230.2186]),
                                        new MapPoint([920.0610,
                                            129.3447,
                                            166.6837]),
                                        new MapPoint([408.6137,
                                            379.0884,
                                            398.0747]),
                                        new MapPoint([289.9972,
                                            713.4049,
                                            253.6161,
                                            721.7296])])],
                                new SpatialReference(5,
                                        "rem",
                                        "sit",
                                        "dolorem"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("phone")"
                                IsSlice="@(true)"
                                VariableName="@("status")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("comment")"
                            IsSlice="@(true)"
                            VariableName="@("title")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([758.9033,
                            366.0709,
                            62.1017,
                            594.6539]),
                        new MapPoint([355.4242,
                            209.2013]),
                        new MapPoint([21.1427,
                            802.4957]),
                        new MapPoint([218.5958,
                            600.7141])]),
                        new MapPath([new MapPoint([207.7202,
                                46.7333,
                                754.3467]),
                            new MapPoint([700.7428,
                                124.4560,
                                287.9488,
                                824.9125]),
                            new MapPoint([968.1807,
                                991.6171,
                                990.9200,
                                657.3822])]),
                        new MapPath([new MapPoint([376.0122,
                                459.3917]),
                            new MapPoint([587.5773,
                                369.1515]),
                            new MapPoint([522.5887,
                                375.5229,
                                173.1894,
                                802.1968])]),
                        new MapPath([new MapPoint([739.3060,
                                201.0151,
                                106.1083,
                                503.8263]),
                            new MapPoint([297.0816,
                                366.0607]),
                            new MapPoint([256.3724,
                                585.3411,
                                97.5029,
                                772.4945])])],
                    new SpatialReference(2,
                            "delectus",
                            "earum",
                            "officiis"),
                    new Point(-48.1092,
                            24.0925,
                            -48.8017,
                            -31.9796,
                            733.0561,
                        new SpatialReference(8,
                                "maxime",
                                "placeat",
                                "exercitationem"),
                            true,
                            true,
                            760.2929),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("dicta",
                            "comment",
                        OutputPixelType.F64,
                            "aut",
                            "email"),
                        [4,
                            5],
                    Method.Nadir,
                    [new DimensionalDefinition("comment",
                            true,
                            "status"),
                    new DimensionalDefinition("status",
                            true,
                            "name")],
                        [2,
                            8,
                            9],
                    Operation.First,
                        "assumenda",
                        "quia",
                    new Point(-168.6900,
                            74.4800,
                            70.5584,
                            -61.9804,
                            434.5026,
                        new SpatialReference(1,
                                "consequatur",
                                "quis",
                                "quo"),
                            true,
                            true,
                            91.5424),
                        "Name = 'John Doe'"),
                new PixelSize(65.7352,
                        -83.3067,
                    new PixelSizeSpatialReference(3,
                            990.5886)),
                new RasterFunction("sit",
                        "avatar",
                    OutputPixelType.U2,
                        "consequatur",
                        "avatar"),
                new TimeExtent(new DateTime(2015, 5, 10, 21, 57, 57),
                        new DateTime(2021, 5, 23, 2, 33, 51))),
                "quod");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["ratione",
                    "laudantium",
                    "explicabo"],
                    ["avatar",
                        "status",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(23.3719,
                    62.9597,
                    84.2263,
                    78.9980,
                    196.8169,
                    830.7982,
                    468.9328,
                    401.8365,
                new SpatialReference(6,
                        "quo",
                        "dolores",
                        "velit"),
                    true,
                    true),
                2,
                8,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(35.7072,
                873.2449,
                468.0379,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(3.0138,
                    57.8292,
                    107.1931,
                    -74.4744,
                    331.0218,
                new SpatialReference(1,
                        "qui",
                        "facere",
                        "odio"),
                    true,
                    true,
                    70.4455),
            new RasterIdentifyOptions([new DimensionalDefinition("email",
                        true,
                        "title"),
                new DimensionalDefinition("createdAt",
                        true,
                        "name"),
                new DimensionalDefinition("avatar",
                        true,
                        "group")],
                    "email"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "voluptas",
                    "voluptatem",
                    481.9011,
                    ["sunt",
                        "velit"],
                    new DateTime(2020, 9, 3, 1, 32, 58),
                    "sit",
                    "doloremque odio non laboriosam qui omnis",
                new Extent(-13.9870,
                        63.5137,
                        -12.0309,
                        -50.7974,
                        328.7786,
                        85.7097,
                        686.5500,
                        960.8892,
                    new SpatialReference(8,
                            "corporis",
                            "est",
                            "harum"),
                        true,
                        true),
                    ["quaerat",
                        "eligendi"],
                    "qui",
                    new DateTime(2023, 2, 24, 12, 37, 48),
                    "password",
                    654.6737),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2019, 11, 1, 6, 2, 3),
                        "placeat",
                        "tenetur commodi delectus"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "fuga",
                    "iure",
                    275.8575,
                    ["et",
                        "minus",
                        "consequatur",
                        "officiis"],
                    new DateTime(2020, 9, 20, 4, 21, 0),
                    "quae",
                    "laudantium voluptate ut blanditiis velit dicta",
                new Extent(156.9407,
                        -153.4600,
                        -48.8240,
                        -70.6163,
                        373.8803,
                        768.4971,
                        240.1609,
                        745.0725,
                    new SpatialReference(7,
                            "quis",
                            "velit",
                            "tempore"),
                        true,
                        true),
                    ["omnis",
                        "et",
                        "reiciendis"],
                    "ut",
                    new DateTime(2000, 3, 9, 0, 38, 35),
                    "token",
                    401.2248);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Lighter;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("updatedAt",
                    true,
                    "avatar"),
            new DimensionalDefinition("phone",
                    true,
                    "phone"),
            new DimensionalDefinition("group",
                    true,
                    "createdAt"),
            new DimensionalDefinition("group",
                    true,
                    "createdAt")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset([new DimensionalDefinition("category",
                        true,
                        "title"),
                new DimensionalDefinition("comment",
                        true,
                        "updatedAt"),
                new DimensionalDefinition("comment",
                        true,
                        "group"),
                new DimensionalDefinition("comment",
                        true,
                        "phone")],
                new Point(135.9284,
                        -55.3738,
                        -69.7828,
                        -56.9127,
                        193.6159,
                    new SpatialReference(5,
                            "quos",
                            "quo",
                            "neque"),
                        true,
                        true,
                        160.2134));
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("autem dolore quis",
                    "rerum",
                    ["quam",
                        "non",
                        "ut",
                        "non"],
                [new FieldInfo("email",
                        "laborum",
                        "est",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateLongTime),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("password",
                        "repellat",
                        "enim",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.ShortDateLeShortTime),
                        true,
                        true,
                    StatisticType.Var)],
                [new TextPopupContent("voluptatem itaque aliquid"),
                new MediaPopupContent("aut consequuntur voluptas",
                        "delectus asperiores ut aut",
                    [new ImageMediaInfo("autem enim consequuntur",
                            "nihil",
                            "repellat voluptatem dolorum",
                        new ImageMediaInfoValue("http://loren.name",
                                "http://adella.name"),
                            549.2432),
                    new ColumnChartMediaInfo("sunt eum perspiciatis",
                            "in",
                            "dolorem velit blanditiis",
                        new ChartMediaInfoValue(["aut",
                                "eligendi",
                                "ut"],
                                "iure",
                                "beatae",
                            [new ChartMediaInfoValueSeries("email",
                                    "quis",
                                    87.6048)],
                            [new MapColor(57, 248, 199)]))],
                        4),
                new AttachmentsPopupContent("consequatur ducimus quis",
                        "dolor voluptatem impedit est eos consequuntur",
                        AttachmentsPopupContentDisplayType.Preview),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                            "ut",
                            "et necessitatibus natus"))],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "createdAt",
                        "quis voluptatem excepturi",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "name",
                        "tempore sit nihil",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "updatedAt",
                        "molestiae distinctio facere",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("mollitia nemo quis",
                        "https://picsum.photos/640/480/?image=1026",
                        "7d9cc523-be93-6d9a-2f16-d671fa9d7989",
                        () => { Console.WriteLine("repellendus"); return Task.CompletedTask; },
                        "status",
                        true,
                        true,
                        true,
                        "aut"),
                new ActionToggle("maxime error fugit",
                        "a4a93f22-e693-13fc-8586-f4ec6a1f0356",
                        () => { Console.WriteLine("dolores"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "avatar",
                        "similique"),
                new ActionButton("ipsa quas necessitatibus",
                        "https://picsum.photos/640/480/?image=937",
                        "09d057b1-4bdb-2028-2ac4-77fa49d2cd17",
                        () => { Console.WriteLine("laborum"); return Task.CompletedTask; },
                        "comment",
                        true,
                        true,
                        true,
                        "rerum")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-83.8659,
                    170.8237,
                    37.4630,
                    -73.6135,
                    533.3239,
                    950.6952,
                    308.8317,
                    844.8622,
                new SpatialReference(1,
                        "iure",
                        "quisquam",
                        "consequuntur"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("incidunt",
                    "category",
                OutputPixelType.U8,
                    "expedita",
                    "token");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(168.9804,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(8,
                        "dolores",
                        47.0976,
                        5855299.5139),
                new LOD(9,
                        "voluptate",
                        58.2857,
                        4790685.3635),
                new LOD(8,
                        "inventore",
                        62.7781,
                        16302889.8983),
                new LOD(6,
                        "mollitia",
                        77.5046,
                        37858791.5199)],
                new Point(69.0003,
                        -88.1483,
                        -153.5532,
                        -13.4082,
                        745.3642,
                    new SpatialReference(5,
                            "aut",
                            "earum",
                            "aut"),
                        true,
                        true,
                        496.2391),
                    [8,
                        3,
                        5,
                        6],
                new SpatialReference(4,
                        "vel",
                        "aliquid",
                        "in"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2023, 10, 6, 16, 12, 29),
                    new DateTime(2022, 3, 12, 2, 7, 22));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("ratione",
                    "exercitationem",
                new TimeExtent(new DateTime(2015, 7, 4, 10, 0, 25),
                        new DateTime(2016, 4, 2, 0, 5, 17)),
                new TimeInterval(TemporalTime.Milliseconds,
                        795.1774),
                    [new DateTime(2004, 3, 26, 4, 54, 9),
                        new DateTime(2002, 11, 15, 14, 23, 56),
                        new DateTime(2003, 5, 27, 14, 45, 19)],
                    "Pacific/Apia",
                    "voluptate");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    488.7709);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 5, 25, 17, 24, 53),
                    new DateTime(2003, 4, 19, 0, 9, 4));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
