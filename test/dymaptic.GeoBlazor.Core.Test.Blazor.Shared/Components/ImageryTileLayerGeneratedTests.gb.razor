@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(56, 242, 90),
                                new MapColor(151, 249, 107)),
                            true,
                            true,
                            [9,
                            4,
                            5],
                            5,
                            3,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(260.4071,
                                5,
                                15.4001,
                                298.6238,
                                178.5550,
                                749.1808,
                                829.6608,
                                181.5221),
                            new RasterBandStatistics(390.3108,
                                8,
                                333.6795,
                                733.8799,
                                555.2853,
                                934.9515,
                                47.4881,
                                36.2469),
                            new RasterBandStatistics(120.7912,
                                1,
                                821.6042,
                                452.3303,
                                982.0187,
                                184.6560,
                                168.9428,
                                848.0947)],
                            true,
                            6))"
                        BandIds="@([3,
                            4])"
                        BlendMode="@(BlendMode.ColorDodge)"
                        Copyright="@("tempore")"
                        Effect="@(new Effect("quidem",
                            27627004.0372))"
                        Interpolation="@(PixelInterpolation.Cubic)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(47930232.7554)"
                        MinScale="@(16686.9637)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.0381)"
                        Title="@("voluptatem quidem quia")"
                        FullExtent="@(new Extent(-161.7405,
                                25.6878,
                                75.9195,
                                -21.2013,
                                206.3634,
                                787.7655,
                                55.0134,
                                574.3380,
                            new SpatialReference(3,
                                    "sit",
                                    "adipisci",
                                    "minima"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(99.9528)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("perferendis")"
                            EndField="@("velit")"
                            Stops="@([new DateTime(2015, 1, 17, 3, 6, 5),
                                new DateTime(2011, 4, 26, 11, 38, 7)])"
                            TimeZone="@("America/Halifax")"
                            TrackIdField="@("quidem")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Hours)"
                                Value="@(128.3223)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2008, 1, 22, 18, 41, 14))"
                                End="@(new DateTime(2015, 7, 11, 16, 52, 25))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2016, 5, 18, 1, 47, 42))"
                            End="@(new DateTime(2013, 9, 12, 17, 49, 28))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(631.7884)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "et",
                                    53.4767,
                                    31654858.2306)])"
                            Origin="@(new Point(-53.5259,
                                    69.1124,
                                    -73.7252,
                                    -61.6713,
                                    176.1664,
                                new SpatialReference(1,
                                        "dolores",
                                        "dolorem",
                                        "maiores"),
                                    true,
                                    true,
                                    444.0950))"
                            Size="@([5,
                                3,
                                7])"
                            SpatialReference="@(new SpatialReference(9,
                                    "dolores",
                                    "voluptatibus",
                                    "saepe"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("numquam")"
                            FunctionName="@("name")"
                            OutputPixelType="@(OutputPixelType.U4)"
                            RasterFunctionDefinition="@("voluptatem")"
                            VariableName="@("phone")">
                        </RasterFunction>
                        <PopupTemplate 
                            Title="@("ratione nostrum cum")"
                            StringContent="@("consequatur")"
                            OutFields="@(["libero",
                                "praesentium"])"
                            FieldInfos="@([new FieldInfo("comment",
                                    "dolorum",
                                    "qui",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("updatedAt",
                                    "id",
                                    "rerum",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new AttachmentsPopupContent("sit quia iste",
                                    "harum perferendis corporis error ad est est",
                                    AttachmentsPopupContentDisplayType.Auto),
                            new FieldsPopupContent([new FieldInfo("phone",
                                        "vero",
                                        "impedit",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateLongTime),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "debitis quia recusandae rerum perferendis dolorem",
                                    "est ut fugit"),
                            new AttachmentsPopupContent("accusantium sapiente autem",
                                    "excepturi qui fuga minima laborum",
                                    AttachmentsPopupContentDisplayType.Preview)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "password",
                                    "quod est porro",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "updatedAt",
                                    "veritatis iste necessitatibus",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "category",
                                    "et facere dignissimos",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("sit voluptatem consequuntur",
                                    "https://picsum.photos/640/480/?image=405",
                                    "5e81b986-1e75-8483-7dd3-5e158f3a8c4d",
                                    () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "consequatur"),
                            new ActionButton("unde vitae eveniet",
                                    "https://picsum.photos/640/480/?image=369",
                                    "9da8fc97-15b1-a578-134b-36322e4b9584",
                                    () => { Console.WriteLine("sint"); return Task.CompletedTask; },
                                    "title",
                                    true,
                                    true,
                                    true,
                                    "sit")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(-51.7658,
                                    28.1402,
                                    -82.0266,
                                    80.8647,
                                    600.4455,
                                    535.5005,
                                    749.9538,
                                    706.6576,
                                new SpatialReference(2,
                                        "atque",
                                        "consequatur",
                                        "eos"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("id")"
                                IsSlice="@(true)"
                                VariableName="@("group")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("password")"
                            IsSlice="@(true)"
                            VariableName="@("title")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([586.1716,
                            885.2572,
                            731.8309]),
                        new MapPoint([198.5527,
                            1.3678,
                            970.4565]),
                        new MapPoint([92.1992,
                            148.7959,
                            306.9917,
                            416.2570]),
                        new MapPoint([8.0751,
                            344.7893,
                            537.6576])]),
                        new MapPath([new MapPoint([421.6245,
                                44.5102,
                                5.8454]),
                            new MapPoint([488.9305,
                                699.5506]),
                            new MapPoint([947.2543,
                                17.2316]),
                            new MapPoint([348.9894,
                                954.3031,
                                417.5925,
                                786.3821])])],
                    new SpatialReference(8,
                            "earum",
                            "aut",
                            "eum"),
                    new Point(128.7502,
                            -17.4991,
                            72.5639,
                            76.2446,
                            562.4897,
                        new SpatialReference(1,
                                "architecto",
                                "asperiores",
                                "autem"),
                            true,
                            true,
                            192.4171),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("minus",
                            "updatedAt",
                        OutputPixelType.Unknown,
                            "quia",
                            "name"),
                        [1,
                            3],
                    Method.Attribute,
                    [new DimensionalDefinition("group",
                            true,
                            "category"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "phone"),
                    new DimensionalDefinition("phone",
                            true,
                            "avatar")],
                        [5,
                            9,
                            2,
                            1],
                    Operation.First,
                        "exercitationem",
                        "possimus",
                    new Point(130.7906,
                            -23.4386,
                            -155.0605,
                            10.6200,
                            258.7734,
                        new SpatialReference(8,
                                "odit",
                                "explicabo",
                                "vero"),
                            true,
                            true,
                            510.5350),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(-120.9289,
                        64.6764,
                    new PixelSizeSpatialReference(2,
                            727.4014)),
                new RasterFunction("fuga",
                        "name",
                    OutputPixelType.F32,
                        "voluptatem",
                        "comment"),
                new TimeExtent(new DateTime(2016, 1, 2, 19, 34, 3),
                        new DateTime(2018, 9, 11, 10, 15, 18))),
                "ea");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["consequatur",
                    "ipsa"],
                    ["comment",
                        "title",
                        "name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(132.6134,
                    -153.1188,
                    37.6226,
                    -10.7995,
                    982.3342,
                    803.7260,
                    803.9495,
                    605.1021,
                new SpatialReference(7,
                        "corporis",
                        "aspernatur",
                        "iste"),
                    true,
                    true),
                1,
                3,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Bilinear));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(901.9242,
                336.0297,
                899.9941,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(172.2506,
                    -77.5936,
                    36.6469,
                    37.1840,
                    904.3286,
                new SpatialReference(7,
                        "ratione",
                        "corrupti",
                        "rerum"),
                    true,
                    true,
                    395.0746),
            new RasterIdentifyOptions([new DimensionalDefinition("email",
                        true,
                        "phone")],
                    "category"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Shared,
                    "aut",
                    "harum",
                    350.4823,
                    ["saepe",
                        "porro",
                        "error"],
                    new DateTime(2019, 5, 25, 22, 56, 54),
                    "nesciunt",
                    "consequuntur libero et nisi exercitationem pariatur deserunt",
                new Extent(-57.4581,
                        145.8617,
                        20.0471,
                        -32.5895,
                        282.2316,
                        522.0517,
                        922.9442,
                        238.2159,
                    new SpatialReference(3,
                            "labore",
                            "quidem",
                            "saepe"),
                        true,
                        true),
                    ["rerum",
                        "ab",
                        "eos"],
                    "et",
                    new DateTime(2007, 2, 6, 21, 32, 30),
                    "group",
                    510.8140),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2009, 9, 25, 10, 22, 57),
                        "ex",
                        "velit atque velit"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "quibusdam",
                    "minima",
                    413.5982,
                    ["ex",
                        "voluptatem",
                        "quia",
                        "est"],
                    new DateTime(2010, 10, 6, 2, 57, 2),
                    "blanditiis",
                    "omnis enim voluptate maxime",
                new Extent(-166.3946,
                        0.0207,
                        -58.0819,
                        -61.4273,
                        147.3690,
                        350.9683,
                        567.6518,
                        527.9790,
                    new SpatialReference(9,
                            "sit",
                            "eligendi",
                            "aut"),
                        true,
                        true),
                    ["modi",
                        "distinctio",
                        "quas"],
                    "molestias",
                    new DateTime(2006, 6, 6, 3, 33, 11),
                    "group",
                    557.3075);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("category",
                    true,
                    "token"),
            new DimensionalDefinition("group",
                    true,
                    "password")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset([new DimensionalDefinition("comment",
                        true,
                        "token"),
                new DimensionalDefinition("avatar",
                        true,
                        "phone")],
                new Polygon([new MapPath([new MapPoint([685.8822,
                            242.6068,
                            231.4350]),
                        new MapPoint([226.8247,
                            607.7564]),
                        new MapPoint([446.8461,
                            41.5246,
                            278.0334,
                            523.7542]),
                        new MapPoint([16.4209,
                            537.8840,
                            758.4483,
                            387.4179])]),
                        new MapPath([new MapPoint([318.9789,
                                804.4555,
                                983.7889]),
                            new MapPoint([480.2116,
                                151.4938]),
                            new MapPoint([348.8935,
                                927.2223,
                                177.0515,
                                152.7287]),
                            new MapPoint([626.1520,
                                632.9685])]),
                        new MapPath([new MapPoint([352.4663,
                                399.4971,
                                881.9572]),
                            new MapPoint([191.7267,
                                780.9619,
                                414.6067]),
                            new MapPoint([72.9633,
                                390.2977,
                                992.7399,
                                306.0503]),
                            new MapPoint([100.5897,
                                762.9849,
                                644.5607])]),
                        new MapPath([new MapPoint([389.4163,
                                73.9743,
                                502.5858,
                                759.5122]),
                            new MapPoint([195.1278,
                                506.3388,
                                96.7041,
                                98.5799]),
                            new MapPoint([190.9304,
                                17.6246])])],
                    new SpatialReference(9,
                            "labore",
                            "et",
                            "aspernatur"),
                    new Point(34.3797,
                            -87.4713,
                            -95.1039,
                            -47.2820,
                            29.8792,
                        new SpatialReference(7,
                                "eveniet",
                                "fugit",
                                "ipsam"),
                            true,
                            true,
                            215.0248),
                        true,
                        true,
                        true));
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("et rerum accusantium",
                    "consequatur",
                    ["exercitationem",
                        "nihil"],
                [new FieldInfo("status",
                        "voluptatem",
                        "reiciendis",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Max)],
                [new FieldsPopupContent([new FieldInfo("phone",
                            "dolorem",
                            "nisi",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortMonthYear),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("createdAt",
                            "et",
                            "nam",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.Year),
                            true,
                            true,
                        StatisticType.Min),
                    new FieldInfo("category",
                            "cumque",
                            "magnam",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(3,
                                true,
                            DateFormat.ShortDateShortTime24),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("comment",
                            "eligendi",
                            "eveniet",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateLeShortTime),
                            true,
                            true,
                        StatisticType.Avg)],
                        "ut aut adipisci libero maiores eveniet minus",
                        "corporis libero modi"),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "amet",
                            "porro error at")),
                new AttachmentsPopupContent("distinctio laboriosam quo",
                        "nihil aperiam id quis placeat",
                        AttachmentsPopupContentDisplayType.Auto)],
                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "group",
                        "nobis consectetur consectetur",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "title",
                        "consectetur minus facilis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "id",
                        "laborum exercitationem occaecati",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("sit accusamus facere",
                        "https://picsum.photos/640/480/?image=250",
                        "939761f0-3117-6ff0-2f5b-bf7a0488063b",
                        () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                        "title",
                        true,
                        true,
                        true,
                        "consectetur"),
                new ActionToggle("laboriosam sit tempore",
                        "3010bc1a-cc72-5bbd-9717-36c6a96effe0",
                        () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "id",
                        "vitae"),
                new ActionToggle("quibusdam tempore voluptate",
                        "e163e208-200d-7b76-e16d-f35e8520c7a1",
                        () => { Console.WriteLine("ea"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "updatedAt",
                        "laudantium")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-165.1486,
                    55.8505,
                    40.9762,
                    61.6213,
                    470.5766,
                    440.0398,
                    452.9529,
                    691.3228,
                new SpatialReference(2,
                        "totam",
                        "et",
                        "omnis"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("ut",
                    "title",
                OutputPixelType.U16,
                    "quia",
                    "token");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(194.6197,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(1,
                        "praesentium",
                        84.7407,
                        5183473.1195),
                new LOD(2,
                        "atque",
                        21.5098,
                        1893707.6194)],
                new Point(-49.5599,
                        -43.4601,
                        -57.9868,
                        -11.8258,
                        941.8318,
                    new SpatialReference(9,
                            "sint",
                            "porro",
                            "doloremque"),
                        true,
                        true,
                        763.3980),
                    [5,
                        9],
                new SpatialReference(2,
                        "quia",
                        "perferendis",
                        "molestiae"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2023, 2, 24, 11, 22, 20),
                    new DateTime(2015, 7, 16, 18, 10, 26));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("veritatis",
                    "placeat",
                new TimeExtent(new DateTime(2009, 8, 20, 10, 32, 15),
                        new DateTime(2017, 1, 19, 13, 22, 33)),
                new TimeInterval(TemporalTime.Milliseconds,
                        892.1831),
                    [new DateTime(2022, 1, 25, 19, 19, 53),
                        new DateTime(2014, 7, 17, 9, 3, 38)],
                    "Europe/Copenhagen",
                    "doloremque");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    745.6185);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 10, 9, 16, 17, 31),
                    new DateTime(2010, 8, 21, 4, 40, 27));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
