@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(186, 96, 233),
                                new MapColor(119, 1, 39)),
                            true,
                            true,
                            [9,
                            7,
                            4,
                            6],
                            1,
                            6,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(531.3162,
                                9,
                                411.4235,
                                273.5807,
                                119.9710,
                                122.2024,
                                285.2995,
                                909.4567),
                            new RasterBandStatistics(972.4374,
                                7,
                                965.7890,
                                695.9247,
                                687.7787,
                                994.1625,
                                376.8632,
                                418.2163)],
                            true,
                            4))"
                        BandIds="@([5,
                            2])"
                        BlendMode="@(BlendMode.Exclusion)"
                        Copyright="@("iusto")"
                        Effect="@(new Effect("nam",
                            45708665.9218))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(21751555.4326)"
                        MinScale="@(47244.2757)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.3382)"
                        Title="@("porro hic eum")"
                        FullExtent="@(new Extent(42.9809,
                                -102.4226,
                                -1.5238,
                                66.4264,
                                797.1458,
                                895.5928,
                                282.1898,
                                181.1723,
                            new SpatialReference(3,
                                    "ipsam",
                                    "fugiat",
                                    "maxime"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(209.6450)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("alias")"
                            EndField="@("fugit")"
                            Stops="@([new DateTime(2012, 11, 18, 7, 5, 57),
                                new DateTime(2019, 8, 5, 21, 16, 22)])"
                            TimeZone="@("Asia/Rangoon")"
                            TrackIdField="@("placeat")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Hours)"
                                Value="@(719.9214)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2015, 6, 8, 11, 25, 16))"
                                End="@(new DateTime(2007, 8, 14, 16, 31, 42))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2013, 8, 11, 20, 0, 19))"
                            End="@(new DateTime(2022, 6, 20, 22, 42, 2))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(270.1396)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "delectus",
                                    37.9199,
                                    1613185.0871),
                            new LOD(8,
                                    "ullam",
                                    98.2506,
                                    28173275.3965),
                            new LOD(8,
                                    "quia",
                                    73.1760,
                                    18868779.6455)])"
                            Origin="@(new Point(-62.4085,
                                    55.6722,
                                    89.7415,
                                    -38.2496,
                                    299.0840,
                                new SpatialReference(8,
                                        "praesentium",
                                        "ex",
                                        "sapiente"),
                                    true,
                                    true,
                                    823.8863))"
                            Size="@([3,
                                3,
                                8,
                                8])"
                            SpatialReference="@(new SpatialReference(2,
                                    "aut",
                                    "debitis",
                                    "sint"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("rerum")"
                            FunctionName="@("avatar")"
                            OutputPixelType="@(OutputPixelType.U1)"
                            RasterFunctionDefinition="@("in")"
                            VariableName="@("updatedAt")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("molestias eius accusamus")"
                            StringContent="@("omnis")"
                            OutFields="@(["sint",
                                "repellat",
                                "consequatur"])"
                            FieldInfos="@([new FieldInfo("title",
                                    "eos",
                                    "non",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("email",
                                    "ipsa",
                                    "rerum",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "magnam",
                                        "quia ut deleniti")),
                            new FieldsPopupContent([new FieldInfo("name",
                                        "reprehenderit",
                                        "laudantium",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongMonthDayYear),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                    "voluptatem minima in beatae eligendi",
                                    "non voluptatem qui")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "id",
                                    "non fugit ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "token",
                                    "omnis consequatur voluptatibus",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "group",
                                    "aut officiis quia",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("enim quam ut",
                                    "https://picsum.photos/640/480/?image=385",
                                    "874e94ad-a358-2882-eb5e-1fb14aa2c548",
                                    () => { Console.WriteLine("veniam"); return Task.CompletedTask; },
                                    "title",
                                    true,
                                    true,
                                    true,
                                    "nemo"),
                            new ActionToggle("doloribus quod quo",
                                    "c261e951-5989-27bf-a5f6-c6add65a0a62",
                                    () => { Console.WriteLine("ducimus"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "possimus")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(20.4451,
                                    112.5422,
                                    89.5411,
                                    80.3763,
                                    724.1899,
                                    60.0357,
                                    840.3577,
                                    191.0373,
                                new SpatialReference(4,
                                        "ullam",
                                        "ut",
                                        "vitae"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("email")"
                                IsSlice="@(true)"
                                VariableName="@("password")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("name")"
                            IsSlice="@(true)"
                            VariableName="@("phone")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([116.9635,
                            835.9250,
                            76.0313]),
                        new MapPoint([40.8103,
                            886.1954,
                            928.3648]),
                        new MapPoint([926.1582,
                            952.9703,
                            422.3551])]),
                        new MapPath([new MapPoint([646.2158,
                                401.7391]),
                            new MapPoint([543.7720,
                                477.9848,
                                105.9155,
                                387.0296]),
                            new MapPoint([421.4333,
                                946.2433,
                                456.0910,
                                16.1876])]),
                        new MapPath([new MapPoint([660.2937,
                                62.5199,
                                353.9704]),
                            new MapPoint([508.1342,
                                72.8333,
                                616.5432,
                                792.1757])]),
                        new MapPath([new MapPoint([489.2837,
                                657.4319,
                                270.5316,
                                771.7866]),
                            new MapPoint([875.2667,
                                420.9175]),
                            new MapPoint([932.3405,
                                410.1802,
                                719.1149,
                                323.1573])])],
                    new SpatialReference(5,
                            "nemo",
                            "quasi",
                            "ut"),
                    new Point(21.1281,
                            -71.6604,
                            -171.3303,
                            -73.6768,
                            692.6195,
                        new SpatialReference(4,
                                "laudantium",
                                "ut",
                                "quia"),
                            true,
                            true,
                            750.4231),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("soluta",
                            "status",
                        OutputPixelType.F32,
                            "quia",
                            "title"),
                        [7,
                            4],
                    Method.Seamline,
                    [new DimensionalDefinition("avatar",
                            true,
                            "status")],
                        [5,
                            9,
                            4,
                            7],
                    Operation.Mean,
                        "illum",
                        "laudantium",
                    new Point(-175.5074,
                            18.9706,
                            67.8083,
                            -67.3746,
                            546.0687,
                        new SpatialReference(5,
                                "facere",
                                "natus",
                                "voluptatem"),
                            true,
                            true,
                            160.2322),
                        "Phone = '555-555-5555'"),
                new PixelSize(-84.6487,
                        0.9911,
                    new PixelSizeSpatialReference(6,
                            120.8609)),
                new RasterFunction("sed",
                        "password",
                    OutputPixelType.C128,
                        "est",
                        "category"),
                new TimeExtent(new DateTime(2004, 5, 16, 16, 45, 47),
                        new DateTime(2007, 3, 13, 15, 1, 20))),
                "occaecati");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["laborum",
                    "quas",
                    "laudantium"],
                    ["id",
                        "password",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-127.1635,
                    165.8914,
                    82.8251,
                    32.8267,
                    775.6235,
                    315.9036,
                    190.1064,
                    649.7767,
                new SpatialReference(4,
                        "consequatur",
                        "tenetur",
                        "fugit"),
                    true,
                    true),
                4,
                2,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Bilinear));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(991.6254,
                923.6231,
                279.1209,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(171.8547,
                    -28.7019,
                    38.5847,
                    -59.9341,
                    506.6409,
                new SpatialReference(5,
                        "harum",
                        "ipsam",
                        "quia"),
                    true,
                    true,
                    45.5433),
            new RasterIdentifyOptions([new DimensionalDefinition("name",
                        true,
                        "avatar"),
                new DimensionalDefinition("phone",
                        true,
                        "category")],
                    "updatedAt"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2002, 7, 16, 11, 39, 15),
                        "aut",
                        "quos eos voluptate"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Minus;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("token",
                    true,
                    "password"),
            new DimensionalDefinition("category",
                    true,
                    "password")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Extent(-64.7119,
                        -15.7701,
                        60.5275,
                        53.2878,
                        826.1618,
                        134.5520,
                        118.3843,
                        196.9865,
                    new SpatialReference(7,
                            "officia",
                            "quidem",
                            "inventore"),
                        true,
                        true),
                [new DimensionalDefinition("title",
                        true,
                        "updatedAt")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("sit eum voluptas",
                    "consequatur",
                    ["amet",
                        "vitae",
                        "vitae",
                        "ea"],
                [new FieldInfo("category",
                        "vel",
                        "voluptates",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("category",
                        "iusto",
                        "porro",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongMonthDayYear),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("name",
                        "est",
                        "explicabo",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.ShortDateLeShortTime),
                        true,
                        true,
                    StatisticType.Sum)],
                [new AttachmentsPopupContent("tenetur recusandae consequatur",
                        "doloremque rerum est laudantium hic omnis ab",
                        AttachmentsPopupContentDisplayType.Preview),
                new FieldsPopupContent([new FieldInfo("avatar",
                            "aut",
                            "consequuntur",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(3,
                                true,
                            DateFormat.LongDate),
                            true,
                            true,
                        StatisticType.Avg)],
                        "non esse omnis totam aspernatur qui",
                        "non repellat molestias"),
                new TextPopupContent("modi sapiente et"),
                new FieldsPopupContent([new FieldInfo("category",
                            "sint",
                            "rerum",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(3,
                                true,
                            DateFormat.ShortDateLeLongTime24),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("id",
                            "fugit",
                            "incidunt",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongMonthDayYearLongTime24),
                            true,
                            true,
                        StatisticType.Sum),
                    new FieldInfo("token",
                            "alias",
                            "quisquam",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongDate),
                            true,
                            true,
                        StatisticType.Sum)],
                        "ipsum voluptate perferendis culpa sit tempora",
                        "maxime maxime consectetur")],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "name",
                        "quos officia excepturi",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "avatar",
                        "mollitia illum aliquid",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "createdAt",
                        "voluptatum excepturi consequatur",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("dicta hic et",
                        "eee56ade-2802-05b8-10f1-ea8d1359fa98",
                        () => { Console.WriteLine("est"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "email",
                        "explicabo"),
                new ActionButton("consequatur voluptates assumenda",
                        "https://picsum.photos/640/480/?image=781",
                        "9d91acb7-9149-8fbe-75d0-42c149a0a8e6",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "email",
                        true,
                        true,
                        true,
                        "laborum"),
                new ActionToggle("porro nisi optio",
                        "8f0d2f89-3bfd-0dc7-7d80-4939a656ef2a",
                        () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "comment",
                        "perspiciatis"),
                new ActionToggle("et voluptas error",
                        "9e7daaa5-f236-66bf-baca-822eac1b37f0",
                        () => { Console.WriteLine("maiores"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "voluptas")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-179.8159,
                    -142.2852,
                    60.3978,
                    -81.7961,
                    32.5476,
                    903.7768,
                    450.4302,
                    446.6979,
                new SpatialReference(1,
                        "inventore",
                        "enim",
                        "sunt"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("fugiat",
                    "avatar",
                OutputPixelType.F32,
                    "qui",
                    "token");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(109.0151,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(4,
                        "enim",
                        12.4265,
                        27032052.2255),
                new LOD(2,
                        "dignissimos",
                        51.0982,
                        30369633.8034),
                new LOD(1,
                        "officiis",
                        29.7505,
                        30943548.1292),
                new LOD(9,
                        "blanditiis",
                        20.9577,
                        27180402.1019)],
                new Point(-52.9870,
                        68.5998,
                        136.8841,
                        -11.5737,
                        216.2870,
                    new SpatialReference(6,
                            "commodi",
                            "saepe",
                            "ut"),
                        true,
                        true,
                        643.7152),
                    [9,
                        8,
                        1,
                        4],
                new SpatialReference(7,
                        "velit",
                        "et",
                        "natus"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2019, 4, 14, 20, 34, 42),
                    new DateTime(2012, 10, 18, 2, 13, 8));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aspernatur",
                    "doloremque",
                new TimeExtent(new DateTime(2023, 2, 25, 21, 15, 26),
                        new DateTime(2006, 5, 27, 19, 42, 51)),
                new TimeInterval(TemporalTime.Weeks,
                        563.3643),
                    [new DateTime(2016, 8, 11, 6, 27, 11),
                        new DateTime(2008, 9, 17, 10, 46, 3),
                        new DateTime(2001, 3, 14, 1, 55, 29)],
                    "Asia/Kolkata",
                    "dolorem");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Months,
                    768.0723);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 5, 26, 13, 58, 32),
                    new DateTime(2000, 3, 26, 5, 19, 56));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
