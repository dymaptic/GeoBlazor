@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(3, 216, 185),
                                new MapColor(162, 121, 86)),
                            true,
                            true,
                            [7,
                            1],
                            3,
                            5,
                            StretchType.None,
                            [new RasterBandStatistics(535.0707,
                                1,
                                622.0054,
                                586.9921,
                                812.6461,
                                947.2261,
                                709.2775,
                                469.2944),
                            new RasterBandStatistics(226.5765,
                                3,
                                706.7376,
                                631.1749,
                                192.6481,
                                808.8891,
                                793.0219,
                                311.1135)],
                            true,
                            6))"
                        BandIds="@([4,
                            6,
                            4,
                            7])"
                        BlendMode="@(BlendMode.Hue)"
                        Copyright="@("laudantium")"
                        Effect="@(new Effect("illo",
                            34128277.8505))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(1203907.8377)"
                        MinScale="@(13127.4281)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.3219)"
                        Title="@("omnis nihil possimus")"
                        FullExtent="@(new Extent(128.1940,
                                -13.4636,
                                -69.7772,
                                -63.2835,
                                978.5263,
                                52.9824,
                                642.3335,
                                537.6939,
                            new SpatialReference(1,
                                    "molestiae",
                                    "aspernatur",
                                    "ex"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(317.8655)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("sequi")"
                            EndField="@("sed")"
                            Stops="@([new DateTime(2003, 7, 17, 1, 28, 26),
                                new DateTime(2019, 3, 14, 10, 17, 32),
                                new DateTime(2010, 6, 10, 17, 5, 46)])"
                            TimeZone="@("America/Mexico_City")"
                            TrackIdField="@("error")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Days)"
                                Value="@(101.0089)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2021, 1, 7, 21, 50, 31))"
                                End="@(new DateTime(2012, 1, 13, 3, 40, 20))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2016, 8, 16, 15, 42, 5))"
                            End="@(new DateTime(2011, 7, 11, 4, 46, 12))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(545.2722)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "dolores",
                                    70.6504,
                                    2920916.3142),
                            new LOD(9,
                                    "id",
                                    14.0543,
                                    18863871.1600),
                            new LOD(1,
                                    "veritatis",
                                    40.5111,
                                    1346005.4613),
                            new LOD(6,
                                    "pariatur",
                                    94.0355,
                                    41329335.4516)])"
                            Origin="@(new Point(135.0131,
                                    14.6102,
                                    -75.3415,
                                    -21.5317,
                                    223.0375,
                                new SpatialReference(4,
                                        "molestiae",
                                        "iure",
                                        "a"),
                                    true,
                                    true,
                                    899.1929))"
                            Size="@([1,
                                9])"
                            SpatialReference="@(new SpatialReference(9,
                                    "et",
                                    "exercitationem",
                                    "voluptatem"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("fuga")"
                            FunctionName="@("category")"
                            OutputPixelType="@(OutputPixelType.F32)"
                            RasterFunctionDefinition="@("laboriosam")"
                            VariableName="@("title")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("est")"
                            ApiKey="@("incidunt")"
                            AvgRating="@(114.4754)"
                            Categories="@(["vitae",
                                "temporibus",
                                "et"])"
                            Created="@(new DateTime(2006, 6, 26, 2, 4, 37))"
                            Culture="@("sint")"
                            Description="@("eum voluptatem in velit consequuntur")"
                            Extent="@(new Extent(97.8731,
                                    145.8299,
                                    50.9086,
                                    -67.0972,
                                    84.1360,
                                    94.0373,
                                    796.7225,
                                    75.0541,
                                new SpatialReference(7,
                                        "enim",
                                        "suscipit",
                                        "id"),
                                    true,
                                    true))"
                            GroupCategories="@(["officia",
                                "quo",
                                "dolorem",
                                "ex"])"
                            LicenseInfo="@("porro")"
                            Modified="@(new DateTime(2014, 3, 11, 4, 6, 26))"
                            Name="@("title")"
                            NumComments="@(183.0216)"
                            NumRatings="@(622.4177)"
                            NumViews="@(81.9379)"
                            Owner="@("Trevor Hilll")"
                            OwnerFolder="@("Antwon Feest")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Anonymous,
                                    ["tenetur",
                                        "illo"],
                                    "voluptatem",
                                    "quas",
                                    "et",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("quod")"
                            Screenshots="@(["officiis",
                                "sequi"])"
                            Size="@(6)"
                            Snippet="@("ad")"
                            Tags="@(["at",
                                "vero",
                                "ut"])"
                            Title="@("consequatur quia eum")"
                            TypeKeywords="@(["nobis",
                                "atque"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("architecto animi tenetur")"
                            StringContent="@("et")"
                            OutFields="@(["voluptatum",
                                "repellat"])"
                            FieldInfos="@([new FieldInfo("title",
                                    "ad",
                                    "sunt",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Stddev)])"
                            Content="@([new MediaPopupContent("deleniti voluptatem quam",
                                    "quia nemo consequatur molestiae quaerat",
                                [new LineChartMediaInfo("ea inventore eum",
                                        "repellendus",
                                        "quo vitae fugiat",
                                    new ChartMediaInfoValue(["qui",
                                            "id",
                                            "et"],
                                            "sed",
                                            "libero",
                                        [new ChartMediaInfoValueSeries("group",
                                                "quas",
                                                944.7044),
                                        new ChartMediaInfoValueSeries("title",
                                                "veritatis",
                                                303.9020),
                                        new ChartMediaInfoValueSeries("name",
                                                "eos",
                                                5.8323),
                                        new ChartMediaInfoValueSeries("createdAt",
                                                "quibusdam",
                                                480.4210)],
                                        [new MapColor(88, 229, 31),
                                        new MapColor(245, 176, 234),
                                        new MapColor(86, 92, 236)])),
                                new BarChartMediaInfo("enim ducimus odit",
                                        "neque",
                                        "voluptates amet quam",
                                    new ChartMediaInfoValue(["illum",
                                            "porro",
                                            "blanditiis"],
                                            "doloribus",
                                            "consequuntur",
                                        [new ChartMediaInfoValueSeries("category",
                                                "aliquid",
                                                342.0938),
                                        new ChartMediaInfoValueSeries("createdAt",
                                                "odio",
                                                742.0925),
                                        new ChartMediaInfoValueSeries("updatedAt",
                                                "et",
                                                377.0643)],
                                        [new MapColor(223, 110, 122)]))],
                                    8)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "title",
                                    "quo ad voluptas",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "category",
                                    "repellat id et",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "phone",
                                    "magni quam aliquid",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "group",
                                    "illo laudantium delectus",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("nobis sed perferendis",
                                    "https://picsum.photos/640/480/?image=793",
                                    "bb5b29ba-c9da-4e1b-30a6-1e28ba707d9a",
                                    () => { Console.WriteLine("repellat"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "est"),
                            new ActionToggle("voluptatum doloribus mollitia",
                                    "4385a735-333c-ba7b-d6a1-8ecfb057f4a8",
                                    () => { Console.WriteLine("ipsum"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "eos"),
                            new ActionButton("quidem libero dolores",
                                    "https://picsum.photos/640/480/?image=781",
                                    "726103a9-fd10-b9ac-5253-1bd1cac43bbb",
                                    () => { Console.WriteLine("sequi"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "a")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(-123.2668,
                                    -2.1051,
                                    -126.7249,
                                    -15.3161,
                                    572.8338,
                                new SpatialReference(4,
                                        "molestiae",
                                        "sunt",
                                        "modi"),
                                    true,
                                    true,
                                    817.1186))">
                            <DimensionalDefinition 
                                DimensionName="@("category")"
                                IsSlice="@(true)"
                                VariableName="@("email")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("category")"
                            IsSlice="@(true)"
                            VariableName="@("category")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([422.2397,
                            34.4586,
                            48.2655]),
                        new MapPoint([674.1804,
                            76.7573,
                            227.2616])])],
                    new SpatialReference(5,
                            "aliquam",
                            "similique",
                            "velit"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("officiis",
                            "phone",
                        OutputPixelType.C128,
                            "beatae",
                            "group"),
                        [5,
                            1],
                    Method.LockRaster,
                    [new DimensionalDefinition("token",
                            true,
                            "category"),
                    new DimensionalDefinition("title",
                            true,
                            "comment"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "id")],
                        [6,
                            7],
                    Operation.Last,
                        "doloremque",
                        "ea",
                    new Point(130.3310,
                            34.2571,
                            -169.9791,
                            -37.9382,
                            542.8341,
                        new SpatialReference(9,
                                "nihil",
                                "fugiat",
                                "dignissimos"),
                            true,
                            true,
                            223.9484),
                        "Phone = '555-555-5555'"),
                new PixelSize(161.2763,
                        -50.4891,
                    new PixelSizeSpatialReference(1,
                            103.9362)),
                new RasterFunction("molestiae",
                        "comment",
                    OutputPixelType.U4,
                        "fugiat",
                        "id"),
                new TimeExtent(new DateTime(2023, 4, 2, 0, 51, 36),
                        new DateTime(2023, 9, 12, 22, 10, 45))),
                "reprehenderit");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["eligendi",
                    "accusamus"],
                    ["title",
                        "group",
                        "avatar",
                        "name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-115.6997,
                    45.0027,
                    -34.4513,
                    18.2551,
                    554.2350,
                    62.7264,
                    722.8609,
                    325.7753,
                new SpatialReference(4,
                        "aspernatur",
                        "rerum",
                        "molestiae"),
                    true,
                    true),
                1,
                7,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Nearest));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(909.4649,
                488.4679,
                168.4297,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(149.7367,
                    64.2162,
                    109.1526,
                    85.4877,
                    805.4133,
                new SpatialReference(4,
                        "veritatis",
                        "non",
                        "eum"),
                    true,
                    true,
                    408.9235),
            new RasterIdentifyOptions([new DimensionalDefinition("id",
                        true,
                        "name"),
                new DimensionalDefinition("category",
                        true,
                        "updatedAt"),
                new DimensionalDefinition("id",
                        true,
                        "password"),
                new DimensionalDefinition("id",
                        true,
                        "name")],
                    "phone"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Shared,
                    "earum",
                    "doloribus",
                    44.1707,
                    ["aut",
                        "deserunt"],
                    new DateTime(2014, 11, 14, 17, 15, 56),
                    "quia",
                    "nemo eum est consequuntur non",
                new Extent(-23.1912,
                        -31.8346,
                        -73.9056,
                        -44.4904,
                        390.9774,
                        438.5709,
                        941.2506,
                        884.8251,
                    new SpatialReference(8,
                            "quo",
                            "ad",
                            "magni"),
                        true,
                        true),
                    ["soluta",
                        "consequatur",
                        "non",
                        "excepturi"],
                    "qui",
                    new DateTime(2007, 6, 20, 17, 12, 18),
                    "group",
                    54.7206),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2003, 3, 8, 15, 37, 33),
                        "omnis",
                        "error expedita quia"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "ipsam",
                    "tenetur",
                    170.7983,
                    ["tempora",
                        "occaecati"],
                    new DateTime(2006, 10, 19, 20, 53, 52),
                    "quas",
                    "similique possimus aliquid qui tenetur aut qui",
                new Extent(73.1931,
                        -47.2337,
                        75.6612,
                        -41.0019,
                        946.8893,
                        720.3920,
                        938.3463,
                        458.8286,
                    new SpatialReference(3,
                            "numquam",
                            "at",
                            "ea"),
                        true,
                        true),
                    ["nam",
                        "architecto",
                        "nostrum"],
                    "et",
                    new DateTime(2020, 7, 27, 10, 15, 57),
                    "createdAt",
                    634.9357);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.HardLight;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("createdAt",
                    true,
                    "group"),
            new DimensionalDefinition("createdAt",
                    true,
                    "email"),
            new DimensionalDefinition("group",
                    true,
                    "id")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([446.8853,
                            68.8606]),
                        new MapPoint([868.8727,
                            60.3980,
                            466.7834,
                            479.9560]),
                        new MapPoint([706.2792,
                            56.8391,
                            51.0563,
                            837.0829]),
                        new MapPoint([501.8473,
                            468.5992,
                            919.3525,
                            458.2819])]),
                        new MapPath([new MapPoint([94.6067,
                                189.9764,
                                344.8022]),
                            new MapPoint([707.1680,
                                387.7085,
                                856.5362]),
                            new MapPoint([759.8300,
                                109.8503]),
                            new MapPoint([469.4086,
                                966.0617,
                                595.1762,
                                790.9564])]),
                        new MapPath([new MapPoint([995.4146,
                                7.3124,
                                667.0658,
                                967.8433]),
                            new MapPoint([419.6014,
                                441.0302,
                                825.1836,
                                474.9023]),
                            new MapPoint([951.1590,
                                50.2657,
                                18.4922,
                                855.8674]),
                            new MapPoint([287.6670,
                                373.2760,
                                888.5373,
                                898.8160])])],
                    new SpatialReference(8,
                            "accusamus",
                            "velit",
                            "atque"),
                        true,
                        true),
                [new DimensionalDefinition("group",
                        true,
                        "category")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("sit non at",
                    "beatae",
                    ["nostrum",
                        "porro",
                        "dolores",
                        "omnis"],
                [new FieldInfo("updatedAt",
                        "non",
                        "excepturi",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.ShortDateLeLongTime),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("name",
                        "animi",
                        "dolores",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongDateShortTime24),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("phone",
                        "ipsam",
                        "quis",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDateLongTime24),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("email",
                        "praesentium",
                        "voluptatem",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateShortTime24),
                        true,
                        true,
                    StatisticType.Sum)],
                [new RelationshipPopupContent("eaque autem natus",
                        "ad odio sit eveniet autem",
                        3,
                        "at",
                    [new RelatedRecordsInfoFieldOrder("quae",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("amet",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("numquam",
                        OrderBy.Asc)],
                        3),
                new FieldsPopupContent([new FieldInfo("title",
                            "rem",
                            "facere",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.DayShortMonthYearShortTime),
                            true,
                            true,
                        StatisticType.Var)],
                        "deleniti molestias eius tempore et",
                        "blanditiis esse cumque"),
                new RelationshipPopupContent("sit est sed",
                        "nemo id delectus consequuntur numquam",
                        5,
                        "provident",
                    [new RelatedRecordsInfoFieldOrder("quia",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("omnis",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("quam",
                        OrderBy.Asc)],
                        6)],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "group",
                        "eligendi facilis ipsa",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "title",
                        "quaerat dolor quidem",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("odio et ducimus",
                        "https://picsum.photos/640/480/?image=250",
                        "57fbf41b-2e3f-a135-978d-a9acfddf2aea",
                        () => { Console.WriteLine("hic"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "dolore"),
                new ActionToggle("esse quasi amet",
                        "99e1c22d-f300-8357-31b5-0266a89dcab3",
                        () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "molestiae"),
                new ActionButton("et quam culpa",
                        "https://picsum.photos/640/480/?image=615",
                        "9cd9fb1f-2770-38c7-30de-e94eb73a69be",
                        () => { Console.WriteLine("iusto"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "excepturi")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(6.0250,
                    -68.8629,
                    -40.0291,
                    -23.6563,
                    751.8558,
                    285.8221,
                    32.1423,
                    12.2317,
                new SpatialReference(3,
                        "exercitationem",
                        "voluptates",
                        "enim"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("fugiat",
                    "name",
                OutputPixelType.U1,
                    "eum",
                    "phone");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(234.9598,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(9,
                        "vel",
                        7.1931,
                        31745147.7141)],
                new Point(-167.2616,
                        -31.6965,
                        95.2917,
                        -77.2063,
                        498.4176,
                    new SpatialReference(7,
                            "dolorem",
                            "excepturi",
                            "quia"),
                        true,
                        true,
                        650.8863),
                    [3,
                        6,
                        5,
                        3],
                new SpatialReference(7,
                        "ducimus",
                        "excepturi",
                        "eaque"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2001, 3, 25, 16, 26, 35),
                    new DateTime(2019, 5, 2, 10, 53, 57));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("optio",
                    "molestiae",
                new TimeExtent(new DateTime(2020, 8, 9, 11, 33, 57),
                        new DateTime(2010, 7, 26, 1, 47, 9)),
                new TimeInterval(TemporalTime.Months,
                        377.1947),
                    [new DateTime(2021, 7, 11, 3, 26, 2),
                        new DateTime(2008, 4, 26, 2, 3, 6),
                        new DateTime(2007, 7, 8, 0, 27, 43),
                        new DateTime(2021, 5, 7, 20, 42, 58)],
                    "Asia/Yakutsk",
                    "quo");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    459.5798);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 8, 6, 5, 14, 5),
                    new DateTime(2011, 6, 13, 12, 33, 24));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
