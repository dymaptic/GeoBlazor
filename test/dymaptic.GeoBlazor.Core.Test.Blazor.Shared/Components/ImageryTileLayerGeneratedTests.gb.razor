@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(164, 188, 149),
                                new MapColor(22, 9, 61)),
                            true,
                            true,
                            [1,
                            2,
                            2,
                            4],
                            2,
                            3,
                            StretchType.MinMax,
                            [new RasterBandStatistics(284.2968,
                                8,
                                301.1884,
                                183.0659,
                                726.8357,
                                777.8077,
                                821.0459,
                                958.5430),
                            new RasterBandStatistics(191.0975,
                                9,
                                545.9496,
                                471.7115,
                                659.5523,
                                4.8193,
                                763.3123,
                                783.1411),
                            new RasterBandStatistics(913.3801,
                                4,
                                565.8304,
                                930.5118,
                                854.4388,
                                229.9999,
                                533.3394,
                                947.1975)],
                            true,
                            6))"
                        BandIds="@([3,
                            4,
                            1,
                            6])"
                        BlendMode="@(BlendMode.Darken)"
                        Copyright="@("enim")"
                        Effect="@(new Effect("vitae",
                            34822040.9436))"
                        Interpolation="@(PixelInterpolation.Cubic)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(45101342.2216)"
                        MinScale="@(5506.6887)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.5317)"
                        Title="@("expedita magnam qui")"
                        FullExtent="@(new Extent(-5.2245,
                                58.5733,
                                -84.4888,
                                -9.6990,
                                696.9029,
                                450.4144,
                                809.3262,
                                515.0426,
                            new SpatialReference(2,
                                    "quis",
                                    "nam",
                                    "qui"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(547.3381)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("veniam")"
                            EndField="@("corporis")"
                            Stops="@([new DateTime(2021, 2, 22, 0, 26, 0),
                                new DateTime(2003, 10, 4, 3, 14, 35),
                                new DateTime(2010, 6, 9, 18, 3, 28),
                                new DateTime(2018, 7, 12, 16, 44, 37)])"
                            TimeZone="@("Asia/Muscat")"
                            TrackIdField="@("hic")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(316.9547)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 10, 21, 8, 0, 18))"
                                End="@(new DateTime(2000, 8, 8, 13, 36, 0))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 11, 15, 14, 19, 26))"
                            End="@(new DateTime(2013, 7, 19, 0, 30, 50))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(431.6464)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "ea",
                                    80.3267,
                                    18550443.0340)])"
                            Origin="@(new Point(80.0797,
                                    81.3164,
                                    21.1842,
                                    47.5089,
                                    425.7436,
                                new SpatialReference(2,
                                        "est",
                                        "recusandae",
                                        "consequuntur"),
                                    true,
                                    true,
                                    157.9973))"
                            Size="@([9,
                                2,
                                8,
                                9])"
                            SpatialReference="@(new SpatialReference(7,
                                    "debitis",
                                    "quod",
                                    "voluptates"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("sit")"
                            FunctionName="@("createdAt")"
                            OutputPixelType="@(OutputPixelType.F64)"
                            RasterFunctionDefinition="@("impedit")"
                            VariableName="@("name")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("pariatur")"
                            ApiKey="@("architecto")"
                            AvgRating="@(404.5382)"
                            Categories="@(["nisi",
                                "consequatur",
                                "temporibus"])"
                            Created="@(new DateTime(2009, 1, 9, 2, 3, 41))"
                            Culture="@("neque")"
                            Description="@("vel neque sit hic voluptas")"
                            Extent="@(new Extent(114.4476,
                                    -100.2821,
                                    -49.2322,
                                    -25.4105,
                                    509.8501,
                                    294.9444,
                                    642.0764,
                                    291.7769,
                                new SpatialReference(1,
                                        "nostrum",
                                        "recusandae",
                                        "vel"),
                                    true,
                                    true))"
                            GroupCategories="@(["quam",
                                "nemo"])"
                            LicenseInfo="@("commodi")"
                            Modified="@(new DateTime(2007, 9, 4, 8, 39, 33))"
                            Name="@("name")"
                            NumComments="@(40.8709)"
                            NumRatings="@(683.6445)"
                            NumViews="@(278.9462)"
                            Owner="@("Graham Mayert")"
                            OwnerFolder="@("Ericka Swift")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Anonymous,
                                    ["vitae",
                                        "earum"],
                                    "assumenda",
                                    "enim",
                                    "et",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("error")"
                            Screenshots="@(["sed",
                                "ut",
                                "id",
                                "repellat"])"
                            Size="@(2)"
                            Snippet="@("est")"
                            Tags="@(["facere",
                                "inventore"])"
                            Title="@("odit velit quas")"
                            TypeKeywords="@(["veritatis",
                                "id",
                                "dicta"])"
                            Url="@("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("perspiciatis ducimus enim")"
                            StringContent="@("et")"
                            OutFields="@(["cumque",
                                "rerum",
                                "ea",
                                "non"])"
                            FieldInfos="@([new FieldInfo("avatar",
                                    "ea",
                                    "corrupti",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("status",
                                    "et",
                                    "accusamus",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new MediaPopupContent("dolores soluta ut",
                                    "quaerat unde beatae placeat voluptas nisi",
                                [new PieChartMediaInfo("praesentium voluptas nihil",
                                        "sit",
                                        "aperiam et voluptas",
                                    new ChartMediaInfoValue(["quis",
                                            "officiis",
                                            "ducimus"],
                                            "mollitia",
                                            "modi",
                                        [new ChartMediaInfoValueSeries("comment",
                                                "perspiciatis",
                                                543.1224)],
                                        [new MapColor(194, 228, 250),
                                        new MapColor(97, 227, 216)])),
                                new BarChartMediaInfo("impedit et inventore",
                                        "iusto",
                                        "quasi qui eveniet",
                                    new ChartMediaInfoValue(["qui",
                                            "autem",
                                            "sint"],
                                            "quasi",
                                            "magnam",
                                        [new ChartMediaInfoValueSeries("name",
                                                "omnis",
                                                620.3414),
                                        new ChartMediaInfoValueSeries("updatedAt",
                                                "aperiam",
                                                724.4351)],
                                        [new MapColor(243, 29, 215),
                                        new MapColor(132, 250, 56)])),
                                new BarChartMediaInfo("temporibus dolor eius",
                                        "qui",
                                        "aspernatur rerum sed",
                                    new ChartMediaInfoValue(["sed",
                                            "dicta"],
                                            "sunt",
                                            "praesentium",
                                        [new ChartMediaInfoValueSeries("name",
                                                "mollitia",
                                                519.0615),
                                        new ChartMediaInfoValueSeries("group",
                                                "esse",
                                                582.0529),
                                        new ChartMediaInfoValueSeries("name",
                                                "beatae",
                                                765.2122),
                                        new ChartMediaInfoValueSeries("category",
                                                "suscipit",
                                                303.9019)],
                                        [new MapColor(47, 65, 83)]))],
                                    5),
                            new AttachmentsPopupContent("laborum voluptatem eum",
                                    "omnis maiores nostrum iure",
                                    AttachmentsPopupContentDisplayType.Preview)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "createdAt",
                                    "odit accusamus quo",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "phone",
                                    "aut sequi laborum",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("laborum libero distinctio",
                                    "https://picsum.photos/640/480/?image=17",
                                    "674515c6-2a33-c48c-bd88-9074707a90d0",
                                    () => { Console.WriteLine("consequuntur"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "culpa"),
                            new ActionButton("est sapiente enim",
                                    "https://picsum.photos/640/480/?image=1052",
                                    "2dbfcc80-1553-fba9-c344-da1d0b4cc586",
                                    () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "voluptatum"),
                            new ActionButton("laboriosam quia aliquam",
                                    "https://picsum.photos/640/480/?image=875",
                                    "12b72b24-1d34-981d-90ed-487ba33bb69e",
                                    () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                    "comment",
                                    true,
                                    true,
                                    true,
                                    "in")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([742.9874,
                                        605.5070]),
                                    new MapPoint([946.6258,
                                        739.5308]),
                                    new MapPoint([915.6277,
                                        165.7806,
                                        371.3846,
                                        335.6077]),
                                    new MapPoint([127.3277,
                                        318.4154])]),
                                    new MapPath([new MapPoint([98.8332,
                                            659.7969,
                                            594.0352,
                                            576.2678]),
                                        new MapPoint([404.0075,
                                            159.9816,
                                            722.6756]),
                                        new MapPoint([51.3473,
                                            730.3839,
                                            993.6550,
                                            873.8188]),
                                        new MapPoint([890.9391,
                                            858.8479,
                                            300.8080])]),
                                    new MapPath([new MapPoint([20.0744,
                                            722.2561,
                                            44.5345,
                                            749.0551]),
                                        new MapPoint([890.7480,
                                            497.3102,
                                            947.0673,
                                            5.4234])])],
                                new SpatialReference(2,
                                        "quaerat",
                                        "minus",
                                        "quis"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("id")"
                                IsSlice="@(true)"
                                VariableName="@("name")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("group")"
                            IsSlice="@(true)"
                            VariableName="@("email")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(17.7135,
                        66.3860,
                        -31.9932,
                        29.6565,
                        728.6079,
                        617.0829,
                        367.0813,
                        143.9755,
                    new SpatialReference(1,
                            "aliquam",
                            "et",
                            "corrupti"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("voluptatum",
                            "avatar",
                        OutputPixelType.U8,
                            "aut",
                            "token"),
                        [1,
                            5,
                            3,
                            2],
                    Method.Seamline,
                    [new DimensionalDefinition("avatar",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "id"),
                    new DimensionalDefinition("group",
                            true,
                            "category")],
                        [5,
                            2,
                            5,
                            6],
                    Operation.Blend,
                        "est",
                        "cupiditate",
                    new Point(173.1690,
                            -23.5331,
                            -142.8582,
                            -21.7684,
                            83.4457,
                        new SpatialReference(6,
                                "doloribus",
                                "sint",
                                "cum"),
                            true,
                            true,
                            455.7035),
                        "1 = 1"),
                new PixelSize(58.2511,
                        -47.3437,
                    new PixelSizeSpatialReference(4,
                            760.7619)),
                new RasterFunction("autem",
                        "name",
                    OutputPixelType.F32,
                        "optio",
                        "status"),
                new TimeExtent(new DateTime(2002, 4, 13, 17, 2, 43),
                        new DateTime(2009, 6, 18, 16, 10, 5))),
                "labore");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["velit",
                    "praesentium",
                    "saepe",
                    "quasi"],
                    ["comment",
                        "password",
                        "id"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(127.1955,
                    -140.3055,
                    25.2826,
                    59.8094,
                    507.3769,
                    723.1986,
                    220.1327,
                    854.1444,
                new SpatialReference(2,
                        "et",
                        "earum",
                        "aliquid"),
                    true,
                    true),
                6,
                9,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Nearest));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(721.8667,
                727.7040,
                235.8939,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(32.2315,
                    -42.9320,
                    168.0595,
                    -56.1534,
                    706.6881,
                new SpatialReference(9,
                        "repellat",
                        "et",
                        "cumque"),
                    true,
                    true,
                    436.2608),
            new RasterIdentifyOptions([new DimensionalDefinition("group",
                        true,
                        "group"),
                new DimensionalDefinition("name",
                        true,
                        "password")],
                    "status"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Private,
                    "et",
                    "sequi",
                    825.2238,
                    ["id",
                        "eum",
                        "voluptates"],
                    new DateTime(2018, 1, 8, 15, 34, 52),
                    "quo",
                    "cupiditate voluptatum sed magni",
                new Extent(-173.9386,
                        -124.0021,
                        -23.3381,
                        -81.0468,
                        458.3410,
                        175.9952,
                        844.0291,
                        141.3606,
                    new SpatialReference(2,
                            "officiis",
                            "laborum",
                            "quibusdam"),
                        true,
                        true),
                    ["rem",
                        "accusamus"],
                    "atque",
                    new DateTime(2007, 3, 21, 17, 23, 6),
                    "group",
                    529.0563),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2016, 11, 12, 15, 10, 29),
                        "minima",
                        "illo sit consectetur"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "quae",
                    "quasi",
                    763.7403,
                    ["sed",
                        "qui",
                        "provident"],
                    new DateTime(2012, 1, 15, 10, 24, 25),
                    "qui",
                    "reiciendis eaque ut est",
                new Extent(-48.3958,
                        -74.3704,
                        87.7387,
                        64.6010,
                        140.5240,
                        292.9714,
                        194.6636,
                        143.4797,
                    new SpatialReference(3,
                            "illo",
                            "quod",
                            "veniam"),
                        true,
                        true),
                    ["modi",
                        "amet",
                        "sunt"],
                    "dolores",
                    new DateTime(2022, 7, 14, 9, 5, 12),
                    "name",
                    643.4479);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Screen;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("email",
                    true,
                    "token"),
            new DimensionalDefinition("comment",
                    true,
                    "id")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([230.9696,
                            59.5950,
                            811.6646,
                            659.3777]),
                        new MapPoint([975.4404,
                            387.3244,
                            830.4338])]),
                        new MapPath([new MapPoint([890.6862,
                                171.4962]),
                            new MapPoint([429.7976,
                                632.9490]),
                            new MapPoint([647.5969,
                                545.3082,
                                802.7480]),
                            new MapPoint([871.5940,
                                606.2773])]),
                        new MapPath([new MapPoint([380.1097,
                                60.0542,
                                810.5601]),
                            new MapPoint([208.6563,
                                754.9783]),
                            new MapPoint([290.4688,
                                188.7302,
                                426.5711,
                                840.3901]),
                            new MapPoint([544.1438,
                                401.2374,
                                567.8596,
                                933.8030])])],
                    new SpatialReference(3,
                            "dolores",
                            "labore",
                            "ut"),
                    new Point(-176.7251,
                            -47.7848,
                            89.8462,
                            47.1038,
                            483.7273,
                        new SpatialReference(8,
                                "explicabo",
                                "fugit",
                                "dolorem"),
                            true,
                            true,
                            368.2622),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("createdAt",
                        true,
                        "status"),
                new DimensionalDefinition("phone",
                        true,
                        "updatedAt")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("nesciunt ipsum quaerat",
                    "sunt",
                    ["possimus",
                        "qui"],
                [new FieldInfo("id",
                        "unde",
                        "facilis",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("category",
                        "assumenda",
                        "excepturi",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongDateLongTime24),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("createdAt",
                        "vero",
                        "corrupti",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Min)],
                [new RelationshipPopupContent("sunt molestiae et",
                        "molestiae deleniti ut velit voluptas",
                        5,
                        "quod",
                    [new RelatedRecordsInfoFieldOrder("architecto",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("debitis",
                        OrderBy.Asc)],
                        6),
                new MediaPopupContent("ipsum earum natus",
                        "sit rerum perferendis sed eum doloremque perspiciatis",
                    [new ImageMediaInfo("enim et accusamus",
                            "aut",
                            "non assumenda laudantium",
                        new ImageMediaInfoValue("http://gussie.name",
                                "http://carolina.biz"),
                            943.9008),
                    new BarChartMediaInfo("est provident asperiores",
                            "labore",
                            "quisquam qui qui",
                        new ChartMediaInfoValue(["aperiam",
                                "odio",
                                "omnis"],
                                "vitae",
                                "aspernatur",
                            [new ChartMediaInfoValueSeries("phone",
                                    "quae",
                                    937.2913),
                            new ChartMediaInfoValueSeries("status",
                                    "provident",
                                    249.0641),
                            new ChartMediaInfoValueSeries("category",
                                    "blanditiis",
                                    493.9370),
                            new ChartMediaInfoValueSeries("group",
                                    "ipsam",
                                    638.7389)],
                            [new MapColor(105, 123, 38),
                            new MapColor(142, 59, 179),
                            new MapColor(188, 169, 245)])),
                    new ImageMediaInfo("laboriosam ex nihil",
                            "assumenda",
                            "veniam repellat et",
                        new ImageMediaInfoValue("http://creola.com",
                                "https://marianne.net"),
                            681.5680),
                    new BarChartMediaInfo("minima dicta et",
                            "voluptatibus",
                            "et temporibus voluptate",
                        new ChartMediaInfoValue(["ex",
                                "consequatur"],
                                "sint",
                                "ut",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "quae",
                                    708.6434),
                            new ChartMediaInfoValueSeries("status",
                                    "omnis",
                                    874.0613),
                            new ChartMediaInfoValueSeries("password",
                                    "tempore",
                                    339.1789)],
                            [new MapColor(122, 249, 159),
                            new MapColor(10, 19, 150),
                            new MapColor(183, 214, 93),
                            new MapColor(74, 200, 131)]))],
                        4),
                new TextPopupContent("et sed eaque")],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "id",
                        "nihil qui maxime",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "email",
                        "tempore doloremque recusandae",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "token",
                        "aliquid perspiciatis quod",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "updatedAt",
                        "autem delectus animi",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("occaecati repellat itaque",
                        "d1ce3126-0e2f-ad1a-787a-cfbc7a7a4e99",
                        () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "a"),
                new ActionToggle("in corrupti rerum",
                        "5d6e2fb9-3792-f8e3-c620-c14315cd558a",
                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "id",
                        "inventore")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-163.8893,
                    -56.4631,
                    9.1044,
                    8.2923,
                    401.9293,
                    246.1620,
                    317.7665,
                    872.4032,
                new SpatialReference(1,
                        "et",
                        "voluptas",
                        "id"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("aspernatur",
                    "token",
                OutputPixelType.C64,
                    "fuga",
                    "name");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(841.6871,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(7,
                        "libero",
                        25.2627,
                        28748644.4553),
                new LOD(3,
                        "repellendus",
                        51.7214,
                        36052694.6696),
                new LOD(9,
                        "non",
                        22.7543,
                        35162712.8385)],
                new Point(-95.4838,
                        -54.0878,
                        54.4556,
                        14.5538,
                        904.0305,
                    new SpatialReference(2,
                            "consequatur",
                            "quo",
                            "sed"),
                        true,
                        true,
                        971.0238),
                    [1,
                        3],
                new SpatialReference(1,
                        "nam",
                        "incidunt",
                        "a"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2020, 6, 14, 7, 50, 9),
                    new DateTime(2019, 10, 14, 13, 47, 55));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("qui",
                    "neque",
                new TimeExtent(new DateTime(2006, 7, 23, 1, 18, 54),
                        new DateTime(2020, 1, 5, 0, 7, 4)),
                new TimeInterval(TemporalTime.Days,
                        67.9664),
                    [new DateTime(2012, 11, 15, 19, 35, 31),
                        new DateTime(2013, 5, 5, 2, 10, 43),
                        new DateTime(2013, 3, 19, 0, 40, 23),
                        new DateTime(2021, 8, 3, 10, 35, 41)],
                    "Asia/Irkutsk",
                    "natus");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    539.3982);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 1, 25, 16, 46, 6),
                    new DateTime(2007, 11, 4, 13, 15, 13));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
