@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(157, 8, 187),
                                new MapColor(75, 29, 5)),
                            true,
                            true,
                            [1,
                            9,
                            8],
                            6,
                            4,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(318.6488,
                                2,
                                525.0114,
                                366.3837,
                                352.3053,
                                584.2686,
                                406.8676,
                                928.0496),
                            new RasterBandStatistics(111.3912,
                                9,
                                196.1822,
                                946.0355,
                                793.5821,
                                195.5536,
                                704.7235,
                                872.9860),
                            new RasterBandStatistics(899.2901,
                                7,
                                954.1384,
                                182.5129,
                                650.1457,
                                53.8938,
                                302.6311,
                                953.7797)],
                            true,
                            6))"
                        BandIds="@([6,
                            9,
                            9])"
                        BlendMode="@(BlendMode.SourceOut)"
                        Copyright="@("voluptatem")"
                        Effect="@(new Effect("qui",
                            32050597.4574))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(5630931.9307)"
                        MinScale="@(32408.3410)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.5258)"
                        Title="@("amet omnis doloremque")"
                        FullExtent="@(new Extent(176.5715,
                                -18.2206,
                                72.9866,
                                60.0701,
                                405.6577,
                                261.4657,
                                961.0870,
                                27.0315,
                            new SpatialReference(9,
                                    "distinctio",
                                    "et",
                                    "alias"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(819.3094)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("velit")"
                            EndField="@("ut")"
                            Stops="@([new DateTime(2022, 8, 11, 3, 45, 56),
                                new DateTime(2022, 11, 11, 2, 9, 33),
                                new DateTime(2009, 6, 2, 11, 39, 33)])"
                            TimeZone="@("Australia/Perth")"
                            TrackIdField="@("aut")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(404.4280)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2013, 3, 9, 13, 43, 45))"
                                End="@(new DateTime(2013, 8, 4, 3, 23, 58))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 5, 11, 15, 42, 35))"
                            End="@(new DateTime(2013, 1, 19, 14, 52, 31))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(381.8868)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "quis",
                                    83.8078,
                                    5307993.3229),
                            new LOD(1,
                                    "est",
                                    11.0476,
                                    39747187.5179),
                            new LOD(4,
                                    "dolorem",
                                    35.1048,
                                    23755414.6577),
                            new LOD(3,
                                    "reiciendis",
                                    94.9026,
                                    14611545.5527)])"
                            Origin="@(new Point(-110.4727,
                                    -44.7205,
                                    -90.2192,
                                    -17.8858,
                                    426.9336,
                                new SpatialReference(5,
                                        "qui",
                                        "molestiae",
                                        "consequatur"),
                                    true,
                                    true,
                                    714.0754))"
                            Size="@([4,
                                9,
                                4])"
                            SpatialReference="@(new SpatialReference(1,
                                    "non",
                                    "cumque",
                                    "quasi"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("fuga")"
                            FunctionName="@("phone")"
                            OutputPixelType="@(OutputPixelType.F64)"
                            RasterFunctionDefinition="@("unde")"
                            VariableName="@("phone")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("mollitia ut soluta")"
                            StringContent="@("labore")"
                            OutFields="@(["quo",
                                "sed",
                                "vero"])"
                            FieldInfos="@([new FieldInfo("title",
                                    "commodi",
                                    "id",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("comment",
                                    "fuga",
                                    "ad",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "atque",
                                        "molestiae ab est")),
                            new MediaPopupContent("et dolorum ea",
                                    "ut cum temporibus sapiente",
                                [new ColumnChartMediaInfo("impedit quibusdam aperiam",
                                        "nisi",
                                        "vel ipsum impedit",
                                    new ChartMediaInfoValue(["dicta",
                                            "ducimus"],
                                            "a",
                                            "omnis",
                                        [new ChartMediaInfoValueSeries("id",
                                                "deserunt",
                                                705.5489),
                                        new ChartMediaInfoValueSeries("title",
                                                "dolorum",
                                                300.0327),
                                        new ChartMediaInfoValueSeries("id",
                                                "qui",
                                                756.1495)],
                                        [new MapColor(17, 0, 75)])),
                                new BarChartMediaInfo("harum asperiores asperiores",
                                        "aut",
                                        "nihil quod quas",
                                    new ChartMediaInfoValue(["commodi",
                                            "aliquid"],
                                            "earum",
                                            "deserunt",
                                        [new ChartMediaInfoValueSeries("category",
                                                "a",
                                                163.4764)],
                                        [new MapColor(78, 26, 40),
                                        new MapColor(120, 132, 111),
                                        new MapColor(22, 66, 138),
                                        new MapColor(109, 209, 109)])),
                                new PieChartMediaInfo("cupiditate laboriosam et",
                                        "et",
                                        "enim blanditiis animi",
                                    new ChartMediaInfoValue(["totam",
                                            "voluptates",
                                            "nemo"],
                                            "labore",
                                            "enim",
                                        [new ChartMediaInfoValueSeries("phone",
                                                "veniam",
                                                174.5786)],
                                        [new MapColor(13, 113, 87)]))],
                                    6),
                            new FieldsPopupContent([new FieldInfo("avatar",
                                        "et",
                                        "et",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Count),
                                new FieldInfo("id",
                                        "consequatur",
                                        "sapiente",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.ShortMonthYear),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("avatar",
                                        "sit",
                                        "consequuntur",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongMonthDayYear),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("status",
                                        "quaerat",
                                        "ut",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                    "nobis delectus aut odit omnis",
                                    "libero earum eos"),
                            new MediaPopupContent("vel voluptas error",
                                    "earum ab quas non impedit est dolorem",
                                [new ColumnChartMediaInfo("quos rerum aut",
                                        "placeat",
                                        "nihil inventore expedita",
                                    new ChartMediaInfoValue(["rerum",
                                            "et",
                                            "ea",
                                            "alias"],
                                            "possimus",
                                            "molestiae",
                                        [new ChartMediaInfoValueSeries("status",
                                                "quis",
                                                194.1593),
                                        new ChartMediaInfoValueSeries("createdAt",
                                                "quo",
                                                665.7052)],
                                        [new MapColor(138, 46, 150)])),
                                new ImageMediaInfo("officiis quo nostrum",
                                        "qui",
                                        "sed voluptate omnis",
                                    new ImageMediaInfoValue("https://albert.org",
                                            "http://neoma.com"),
                                        566.2999)],
                                    3)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "email",
                                    "dolore beatae voluptas",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("impedit dicta autem",
                                    "6909b7ee-a763-302b-a708-1aba01ec65a5",
                                    () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "avatar",
                                    "ipsum"),
                            new ActionToggle("blanditiis rerum exercitationem",
                                    "62c10983-c174-73eb-26ec-84368e4aa6a7",
                                    () => { Console.WriteLine("modi"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "name",
                                    "laudantium"),
                            new ActionToggle("harum iusto tempora",
                                    "38a86112-e6ca-c4b0-c598-439cca754eb1",
                                    () => { Console.WriteLine("numquam"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "title",
                                    "provident")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(-135.4626,
                                    63.7574,
                                    94.1498,
                                    -72.3421,
                                    197.5705,
                                new SpatialReference(2,
                                        "omnis",
                                        "est",
                                        "beatae"),
                                    true,
                                    true,
                                    163.4735))">
                            <DimensionalDefinition 
                                DimensionName="@("comment")"
                                IsSlice="@(true)"
                                VariableName="@("comment")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("status")"
                            IsSlice="@(true)"
                            VariableName="@("token")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([390.7638,
                            916.0622,
                            514.5615,
                            250.7486]),
                        new MapPoint([957.8126,
                            29.7313,
                            391.8930]),
                        new MapPoint([652.1724,
                            180.1640,
                            516.9004]),
                        new MapPoint([952.4335,
                            482.2803,
                            760.0465,
                            703.1736])])],
                    new SpatialReference(5,
                            "quae",
                            "qui",
                            "in"),
                    new Point(-52.5134,
                            17.0285,
                            -84.3246,
                            -76.6802,
                            700.4632,
                        new SpatialReference(6,
                                "consequatur",
                                "eos",
                                "sed"),
                            true,
                            true,
                            419.3675),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("natus",
                            "password",
                        OutputPixelType.S16,
                            "id",
                            "avatar"),
                        [8,
                            7],
                    Method.Viewpoint,
                    [new DimensionalDefinition("phone",
                            true,
                            "token"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "password")],
                        [8,
                            6],
                    Operation.Mean,
                        "ut",
                        "autem",
                    new Point(7.4124,
                            39.2687,
                            43.0630,
                            -26.2393,
                            180.9195,
                        new SpatialReference(9,
                                "unde",
                                "et",
                                "fugiat"),
                            true,
                            true,
                            991.6597),
                        "Phone = '555-555-5555'"),
                new PixelSize(-24.6493,
                        -37.4800,
                    new PixelSizeSpatialReference(1,
                            634.7466)),
                new RasterFunction("distinctio",
                        "token",
                    OutputPixelType.S16,
                        "dolorem",
                        "name"),
                new TimeExtent(new DateTime(2017, 10, 12, 21, 5, 34),
                        new DateTime(2023, 2, 27, 15, 35, 51))),
                "quisquam");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["aliquam",
                    "delectus"],
                    ["createdAt",
                        "comment",
                        "phone",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(133.9325,
                    115.5373,
                    -73.0528,
                    -52.7798,
                    689.0794,
                    738.1779,
                    121.2339,
                    484.0841,
                new SpatialReference(8,
                        "non",
                        "possimus",
                        "enim"),
                    true,
                    true),
                9,
                7,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Bilinear));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(165.4355,
                923.7016,
                902.4835,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(159.8255,
                    76.1215,
                    162.0680,
                    53.7065,
                    788.9085,
                new SpatialReference(1,
                        "at",
                        "facere",
                        "adipisci"),
                    true,
                    true,
                    136.0611),
            new RasterIdentifyOptions([new DimensionalDefinition("token",
                        true,
                        "comment"),
                new DimensionalDefinition("name",
                        true,
                        "title")],
                    "id"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2004, 5, 15, 1, 58, 24),
                        "quisquam",
                        "est temporibus quam"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Invert;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("category",
                    true,
                    "updatedAt"),
            new DimensionalDefinition("name",
                    true,
                    "title"),
            new DimensionalDefinition("token",
                    true,
                    "name"),
            new DimensionalDefinition("title",
                    true,
                    "name")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Point(168.6990,
                        7.2015,
                        -131.1020,
                        84.9682,
                        971.9109,
                    new SpatialReference(3,
                            "eligendi",
                            "odio",
                            "officiis"),
                        true,
                        true,
                        241.0915),
                [new DimensionalDefinition("title",
                        true,
                        "phone")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("iure saepe sit",
                    "dolores",
                    ["tenetur",
                        "rem",
                        "quam",
                        "aut"],
                [new FieldInfo("phone",
                        "quasi",
                        "ea",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongMonthDayYear),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("id",
                        "veritatis",
                        "asperiores",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongDateShortTime24),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("comment",
                        "eligendi",
                        "totam",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongDateLongTime),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("status",
                        "dolor",
                        "molestiae",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.ShortDateLongTime),
                        true,
                        true,
                    StatisticType.Max)],
                [new AttachmentsPopupContent("aut quis vel",
                        "qui sunt rerum aliquid quis",
                        AttachmentsPopupContentDisplayType.Auto),
                new AttachmentsPopupContent("recusandae porro amet",
                        "inventore quia et similique et incidunt",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "title",
                        "aliquid sunt aut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return Date();",
                        "status",
                        "consectetur ea eius",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "phone",
                        "dolorem deserunt repudiandae",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("excepturi corporis enim",
                        "697184c6-c1a6-c18e-20e2-f81d9a957a0a",
                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "ullam"),
                new ActionToggle("nostrum quae qui",
                        "281f66b2-c1ac-42c8-5e28-276b9626be58",
                        () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "name",
                        "et")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(152.3598,
                    -131.3249,
                    -11.3913,
                    57.2954,
                    841.2428,
                    314.0653,
                    739.2289,
                    617.1352,
                new SpatialReference(2,
                        "non",
                        "qui",
                        "voluptas"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("perspiciatis",
                    "token",
                OutputPixelType.S32,
                    "exercitationem",
                    "createdAt");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(412.9982,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(4,
                        "sit",
                        18.3288,
                        47450472.0876),
                new LOD(6,
                        "quis",
                        24.2813,
                        26769848.9249),
                new LOD(3,
                        "temporibus",
                        95.8708,
                        9264966.2015)],
                new Point(-15.3456,
                        17.8425,
                        -169.4364,
                        -41.0383,
                        524.3750,
                    new SpatialReference(8,
                            "ex",
                            "eligendi",
                            "enim"),
                        true,
                        true,
                        40.8629),
                    [7,
                        4,
                        4,
                        4],
                new SpatialReference(9,
                        "et",
                        "quaerat",
                        "minus"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2013, 4, 12, 10, 26, 39),
                    new DateTime(2021, 8, 24, 9, 58, 13));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("autem",
                    "quia",
                new TimeExtent(new DateTime(2000, 6, 9, 8, 22, 14),
                        new DateTime(2012, 8, 24, 5, 33, 12)),
                new TimeInterval(TemporalTime.Weeks,
                        865.6828),
                    [new DateTime(2017, 1, 9, 16, 34, 3),
                        new DateTime(2007, 4, 12, 16, 44, 2)],
                    "Asia/Muscat",
                    "quis");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    842.2468);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 4, 18, 15, 27, 18),
                    new DateTime(2023, 8, 13, 1, 57, 50));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
