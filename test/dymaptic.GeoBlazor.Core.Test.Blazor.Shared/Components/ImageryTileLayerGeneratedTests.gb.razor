@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(147, 229, 185),
                                new MapColor(75, 194, 118)),
                            true,
                            true,
                            [7,
                            6],
                            1,
                            9,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(565.9204,
                                7,
                                729.7877,
                                441.3494,
                                52.7087,
                                780.8214,
                                569.3138,
                                262.8978),
                            new RasterBandStatistics(935.5479,
                                3,
                                832.9511,
                                968.9020,
                                768.2147,
                                470.4217,
                                196.9292,
                                170.7286)],
                            true,
                            2))"
                        BandIds="@([7,
                            9])"
                        BlendMode="@(BlendMode.Overlay)"
                        Copyright="@("temporibus")"
                        Effect="@(new Effect("minus",
                            20222718.0728))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(22060814.0928)"
                        MinScale="@(45730.9525)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.9971)"
                        Title="@("vel est dolor")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(903.7537)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptatem")"
                            EndField="@("minus")"
                            Stops="@([new DateTime(2001, 1, 10, 11, 15, 23),
                                new DateTime(2004, 6, 25, 13, 0, 32)])"
                            TimeZone="@("America/Mexico_City")"
                            TrackIdField="@("quia")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(647.6223)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2006, 3, 27, 13, 28, 1))"
                                End="@(new DateTime(2019, 9, 4, 20, 22, 24))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2020, 3, 27, 16, 22, 12))"
                            End="@(new DateTime(2010, 1, 18, 3, 17, 26))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(849.7954)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "adipisci",
                                    50.8567,
                                    19764114.3957)])"
                            Size="@([3])"
                            SpatialReference="@(new SpatialReference(1,
                                    "nulla",
                                    "velit",
                                    "animi"))">
                            <Point 
                                Longitude="@(165.9038)"
                                Latitude="@(49.4456)"
                                X="@(176.7624)"
                                Y="@(40.5448)"
                                Z="@(418.0351)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(763.6441)">
                                <SpatialReference 
                                    Wkid="@(7)"
                                    ImageCoordinateSystem="@("natus")"
                                    Wkt="@("illum")"
                                    Wkt2="@("possimus")">
                                </SpatialReference>
                            </Point>
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("quia")"
                            FunctionName="@("email")"
                            OutputPixelType="@(OutputPixelType.F64)"
                            RasterFunctionDefinition="@("qui")"
                            VariableName="@("updatedAt")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("assumenda sunt rerum")"
                            StringContent="@("adipisci")"
                            OutFields="@(["possimus"])"
                            FieldInfos="@([new FieldInfo("status",
                                    "dolor",
                                    "incidunt",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("category",
                                    "laborum",
                                    "magni",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Stddev)])"
                            Content="@([new TextPopupContent("voluptatem cum est")])"
                            ExpressionInfos="@([new ExpressionInfo("return Date();",
                                    "email",
                                    "occaecati nostrum quo",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("eius qui voluptas",
                                "https://picsum.photos/640/480/?image=66",
                                "1e2ff20c-39e1-d66d-6a78-5ddac24b2403",
                                () => { Console.WriteLine("eius"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "voluptas"),
                                new ActionButton("quia ducimus reprehenderit",
                                    "https://picsum.photos/640/480/?image=830",
                                    "905d007e-e350-0785-9b67-1d01bfc2761f",
                                    () => { Console.WriteLine("dolorem"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "est")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([730.3831]),
                                    new MapPoint([768.7632,
                                        971.9589])]),
                                    new MapPath([new MapPoint([377.7235])])],
                                new SpatialReference(7,
                                        "consequuntur",
                                        "non",
                                        "ut"),
                                new Point(-131.5946,
                                        -27.4052,
                                        -95.6468,
                                        -89.6092,
                                        45.8797,
                                    new SpatialReference(6,
                                            "impedit",
                                            "quae",
                                            "unde"),
                                        true,
                                        true,
                                        615.1151),
                                    true,
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("updatedAt")"
                                IsSlice="@(true)"
                                VariableName="@("status")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("category")"
                            IsSlice="@(true)"
                            VariableName="@("createdAt")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(62.5432)"
                            Xmin="@(5.7433)"
                            Ymax="@(37.7123)"
                            Ymin="@(42.7629)"
                            Zmax="@(135.0678)"
                            Zmin="@(804.4605)"
                            Mmax="@(414.2101)"
                            Mmin="@(107.3595)"
                            SpatialReference="@(new SpatialReference(1,
                                    "et",
                                    "ratione",
                                    "vel"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(52.3149,
                        -144.9740,
                        -29.4774,
                        82.1062,
                        825.9522,
                        224.3494,
                        94.8872,
                        373.0399,
                    new SpatialReference(9,
                            "facilis",
                            "molestiae",
                            "eius"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("omnis",
                            "title",
                        OutputPixelType.Unknown,
                            "deleniti",
                            "comment"),
                        [6,
                            8],
                    Method.Northwest,
                    [new DimensionalDefinition("comment",
                            true,
                            "phone")],
                        [9,
                            6],
                    Operation.Mean,
                        "corrupti",
                        "in",
                    new Point(154.3753,
                            18.8853,
                            -133.6246,
                            -82.6330,
                            246.1969,
                        new SpatialReference(7,
                                "rerum",
                                "quibusdam",
                                "excepturi"),
                            true,
                            true,
                            314.9060),
                        "ObjectID = 1"),
                new PixelSize(-1.4363,
                        47.2645,
                    new PixelSizeSpatialReference(4,
                            279.1047)),
                new RasterFunction("nulla",
                        "createdAt",
                    OutputPixelType.U4,
                        "fugiat",
                        "status"),
                new TimeExtent(new DateTime(2010, 3, 7, 13, 21, 16),
                        new DateTime(2007, 10, 7, 18, 24, 49))),
                "veritatis");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["soluta"],
                    ["updatedAt",
                        "updatedAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(18.6450,
                    -31.0435,
                    67.0295,
                    -56.1216,
                    45.0566,
                    593.2144,
                    874.3839,
                    416.9861,
                new SpatialReference(1,
                        "nihil",
                        "eum",
                        "nulla"),
                    true,
                    true),
                7,
                1,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(205.6820,
                82.5636,
                513.5613,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(62.5745,
                    86.6014,
                    -131.3940,
                    -5.9270,
                    643.2585,
                new SpatialReference(6,
                        "id",
                        "ea",
                        "exercitationem"),
                    true,
                    true,
                    969.1101),
            new RasterIdentifyOptions([new DimensionalDefinition("category",
                        true,
                        "token")],
                    "updatedAt"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2015, 4, 3, 19, 30, 38),
                        "doloremque",
                        "nihil qui iste"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Lighter;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("title",
                    true,
                    "phone")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([448.9552])]),
                        new MapPath([new MapPoint([359.1696]),
                            new MapPoint([321.0937,
                                980.0922])])],
                    new SpatialReference(1,
                            "vero",
                            "voluptatem",
                            "natus"),
                    new Point(-124.8438,
                            27.1265,
                            79.8338,
                            6.7135,
                            888.6138,
                        new SpatialReference(5,
                                "quod",
                                "quidem",
                                "quia"),
                            true,
                            true,
                            278.5114),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("updatedAt",
                        true,
                        "group"),
                new DimensionalDefinition("id",
                        true,
                        "name")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("corrupti id exercitationem",
                    "rerum",
                    ["asperiores",
                        "aliquam"],
                [new FieldInfo("token",
                        "voluptate",
                        "et",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new AttachmentsPopupContent("temporibus in minima",
                        "fugiat quibusdam sint",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "password",
                        "ea sint corrupti",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "createdAt",
                        "cum quod dolores",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("labore repellendus minima",
                        "https://picsum.photos/640/480/?image=94",
                        "4b98872e-a728-9fa7-fb6e-0ae59e36699f",
                        () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                        "title",
                        true,
                        true,
                        true,
                        "ullam"),
                        new ActionButton("accusamus ut repellat",
                            "https://picsum.photos/640/480/?image=698",
                            "945416bc-66de-f6bc-260f-1ddf7589d80b",
                            () => { Console.WriteLine("cum"); return Task.CompletedTask; },
                            "category",
                            true,
                            true,
                            true,
                            "saepe")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-157.8521,
                    20.9283,
                    -31.9367,
                    3.1764,
                    729.2495,
                    941.8051,
                    293.2958,
                    428.4765,
                new SpatialReference(2,
                        "incidunt",
                        "excepturi",
                        "architecto"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("quis",
                    "id",
                OutputPixelType.F32,
                    "voluptatem",
                    "id");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(767.5753,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(8,
                        "saepe",
                        33.4475,
                        13694126.0636)],
                new Point(59.6693,
                        -83.9267,
                        -48.5439,
                        35.8013,
                        906.3716,
                    new SpatialReference(7,
                            "pariatur",
                            "dolorem",
                            "voluptas"),
                        true,
                        true,
                        798.9994),
                    [9],
                new SpatialReference(7,
                        "possimus",
                        "ut",
                        "quae"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2023, 7, 24, 6, 51, 54),
                    new DateTime(2009, 3, 5, 6, 44, 56));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quibusdam",
                    "voluptatibus",
                new TimeExtent(new DateTime(2016, 9, 17, 18, 7, 52),
                        new DateTime(2005, 4, 23, 4, 34, 48)),
                new TimeInterval(TemporalTime.Milliseconds,
                        282.1628),
                    [new DateTime(2001, 2, 20, 21, 33, 31)],
                    "Asia/Jerusalem",
                    "quidem");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    851.8058);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 1, 14, 21, 23, 24),
                    new DateTime(2005, 8, 9, 12, 54, 47));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
