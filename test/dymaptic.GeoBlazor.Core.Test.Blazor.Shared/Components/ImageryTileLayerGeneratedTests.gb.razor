@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(103, 247, 146),
                                new MapColor(136, 170, 71)),
                            true,
                            true,
                            [8,
                            5,
                            3],
                            3,
                            5,
                            StretchType.MinMax,
                            [new RasterBandStatistics(425.1295,
                                1,
                                779.3911,
                                737.0530,
                                319.8010,
                                899.8953,
                                845.6403,
                                798.9333),
                            new RasterBandStatistics(57.6058,
                                8,
                                441.7751,
                                234.8698,
                                694.9343,
                                47.8251,
                                707.3952,
                                513.8629)],
                            true,
                            8))"
                        BandIds="@([7,
                            1])"
                        BlendMode="@(BlendMode.Lighten)"
                        Copyright="@("nam")"
                        Effect="@(new Effect("eos",
                            23324678.9491))"
                        Interpolation="@(PixelInterpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(28746046.3986)"
                        MinScale="@(6082.9206)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.8633)"
                        Title="@("voluptatem porro ratione")"
                        FullExtent="@(new Extent(74.8739,
                                78.5052,
                                -57.0957,
                                88.1624,
                                229.0526,
                                503.9319,
                                462.8771,
                                114.6729,
                            new SpatialReference(3,
                                    "quis",
                                    "hic",
                                    "quia"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(262.3016)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("blanditiis")"
                            EndField="@("et")"
                            Stops="@([new DateTime(2002, 2, 20, 5, 25, 21),
                                new DateTime(2015, 7, 25, 11, 54, 27),
                                new DateTime(2004, 8, 11, 1, 8, 3),
                                new DateTime(2015, 7, 20, 6, 38, 34)])"
                            TimeZone="@("Asia/Colombo")"
                            TrackIdField="@("repellat")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(313.3212)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 1, 26, 6, 49, 37))"
                                End="@(new DateTime(2009, 8, 21, 1, 23, 54))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2021, 5, 17, 3, 37, 44))"
                            End="@(new DateTime(2016, 7, 4, 12, 24, 53))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(177.7852)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "voluptatem",
                                    19.9967,
                                    21500410.1314),
                            new LOD(2,
                                    "fuga",
                                    39.8430,
                                    30346383.2634),
                            new LOD(6,
                                    "nobis",
                                    8.6780,
                                    6290449.9858),
                            new LOD(3,
                                    "nostrum",
                                    89.1045,
                                    46954130.6016)])"
                            Origin="@(new Point(-77.3267,
                                    -43.1245,
                                    49.4123,
                                    -71.0020,
                                    725.2956,
                                new SpatialReference(7,
                                        "atque",
                                        "sint",
                                        "provident"),
                                    true,
                                    true,
                                    64.8507))"
                            Size="@([9,
                                1,
                                6,
                                7])"
                            SpatialReference="@(new SpatialReference(1,
                                    "aut",
                                    "iste",
                                    "in"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("et")"
                            FunctionName="@("createdAt")"
                            OutputPixelType="@(OutputPixelType.Unknown)"
                            RasterFunctionDefinition="@("totam")"
                            VariableName="@("name")">
                        </RasterFunction>
                        <PopupTemplate 
                            Title="@("saepe sint soluta")"
                            StringContent="@("cumque")"
                            OutFields="@(["autem",
                                "at",
                                "ut"])"
                            FieldInfos="@([new FieldInfo("category",
                                    "aperiam",
                                    "fugiat",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("avatar",
                                    "sequi",
                                    "consequatur",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("category",
                                    "vel",
                                    "aut",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("status",
                                    "recusandae",
                                    "aut",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new MediaPopupContent("a facilis odit",
                                    "maiores eum aliquid est",
                                [new ImageMediaInfo("ducimus adipisci maiores",
                                        "nihil",
                                        "voluptatem sit vel",
                                    new ImageMediaInfoValue("https://savion.info",
                                            "http://gaetano.org"),
                                        111.5120),
                                new LineChartMediaInfo("eos dignissimos et",
                                        "rem",
                                        "sed ut architecto",
                                    new ChartMediaInfoValue(["sit",
                                            "molestiae",
                                            "deserunt"],
                                            "necessitatibus",
                                            "sapiente",
                                        [new ChartMediaInfoValueSeries("comment",
                                                "omnis",
                                                284.1132),
                                        new ChartMediaInfoValueSeries("phone",
                                                "atque",
                                                678.7935),
                                        new ChartMediaInfoValueSeries("phone",
                                                "totam",
                                                97.6490)],
                                        [new MapColor(9, 149, 191),
                                        new MapColor(241, 247, 96),
                                        new MapColor(220, 205, 52),
                                        new MapColor(186, 182, 223)])),
                                new ImageMediaInfo("quis eligendi perspiciatis",
                                        "accusantium",
                                        "facere exercitationem illum",
                                    new ImageMediaInfoValue("https://odie.biz",
                                            "http://sam.biz"),
                                        203.1160),
                                new LineChartMediaInfo("dolorem quos ullam",
                                        "veritatis",
                                        "mollitia sint necessitatibus",
                                    new ChartMediaInfoValue(["deserunt",
                                            "eum"],
                                            "perferendis",
                                            "vel",
                                        [new ChartMediaInfoValueSeries("id",
                                                "exercitationem",
                                                844.4687),
                                        new ChartMediaInfoValueSeries("updatedAt",
                                                "voluptatum",
                                                520.1400),
                                        new ChartMediaInfoValueSeries("updatedAt",
                                                "et",
                                                129.0186)],
                                        [new MapColor(133, 11, 29),
                                        new MapColor(64, 40, 127),
                                        new MapColor(110, 67, 122),
                                        new MapColor(187, 201, 218)]))],
                                    7)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "password",
                                    "officia reiciendis ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "comment",
                                    "voluptas aperiam facere",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("vitae fugit pariatur",
                                    "https://picsum.photos/640/480/?image=717",
                                    "1a590550-68fd-d2e2-4742-4f993fb1ad69",
                                    () => { Console.WriteLine("nemo"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "sunt"),
                            new ActionButton("dolores ut voluptates",
                                    "https://picsum.photos/640/480/?image=721",
                                    "90b095f1-61f4-551e-610b-4534df7a6d35",
                                    () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "qui"),
                            new ActionToggle("soluta aut corrupti",
                                    "041aa1a0-b3f4-48c9-5461-ae9ee7404c09",
                                    () => { Console.WriteLine("libero"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "password",
                                    "corrupti"),
                            new ActionButton("dolorem neque voluptates",
                                    "https://picsum.photos/640/480/?image=421",
                                    "8d7e2b51-03be-37b3-042a-28326656e2cf",
                                    () => { Console.WriteLine("nam"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "sapiente")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(15.5360,
                                    57.7262,
                                    133.0061,
                                    -37.1185,
                                    48.6518,
                                new SpatialReference(1,
                                        "nihil",
                                        "voluptatum",
                                        "dicta"),
                                    true,
                                    true,
                                    29.8101))">
                            <DimensionalDefinition 
                                DimensionName="@("avatar")"
                                IsSlice="@(true)"
                                VariableName="@("token")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("updatedAt")"
                            IsSlice="@(true)"
                            VariableName="@("group")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(77.8325,
                        -179.5775,
                        -46.9354,
                        31.2627,
                        370.4178,
                        217.7644,
                        686.9161,
                        585.2288,
                    new SpatialReference(4,
                            "laboriosam",
                            "accusantium",
                            "odio"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("dignissimos",
                            "id",
                        OutputPixelType.S8,
                            "est",
                            "group"),
                        [9,
                            7,
                            9,
                            7],
                    Method.LockRaster,
                    [new DimensionalDefinition("title",
                            true,
                            "category"),
                    new DimensionalDefinition("password",
                            true,
                            "password"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "name"),
                    new DimensionalDefinition("group",
                            true,
                            "group")],
                        [4,
                            1],
                    Operation.Sum,
                        "eos",
                        "mollitia",
                    new Point(161.5279,
                            27.1715,
                            -99.4002,
                            57.4880,
                            533.4072,
                        new SpatialReference(8,
                                "a",
                                "perferendis",
                                "esse"),
                            true,
                            true,
                            501.5374),
                        "ObjectID = 1"),
                new PixelSize(-68.6221,
                        10.7073,
                    new PixelSizeSpatialReference(6,
                            490.2538)),
                new RasterFunction("illo",
                        "title",
                    OutputPixelType.C128,
                        "eum",
                        "token"),
                new TimeExtent(new DateTime(2011, 10, 20, 21, 32, 7),
                        new DateTime(2007, 9, 12, 17, 26, 22))),
                "consequuntur");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["sapiente",
                    "aliquam"],
                    ["phone",
                        "email"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-145.8357,
                    -143.7435,
                    -78.1500,
                    22.0431,
                    513.2462,
                    658.2866,
                    896.4572,
                    767.6010,
                new SpatialReference(7,
                        "animi",
                        "blanditiis",
                        "dolorem"),
                    true,
                    true),
                9,
                9,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(619.1912,
                465.3193,
                458.1187,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(70.0278,
                    27.9534,
                    4.7411,
                    -57.3182,
                    717.2176,
                new SpatialReference(9,
                        "est",
                        "maxime",
                        "sunt"),
                    true,
                    true,
                    812.3968),
            new RasterIdentifyOptions([new DimensionalDefinition("email",
                        true,
                        "status")],
                    "name"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Shared,
                    "facere",
                    "ut",
                    470.3939,
                    ["ratione",
                        "consequuntur",
                        "magni"],
                    new DateTime(2012, 10, 22, 6, 18, 7),
                    "atque",
                    "nihil iusto enim velit architecto",
                new Extent(48.3894,
                        113.6519,
                        -37.1310,
                        70.5608,
                        182.3151,
                        824.8050,
                        920.6807,
                        33.6294,
                    new SpatialReference(3,
                            "numquam",
                            "fuga",
                            "sed"),
                        true,
                        true),
                    ["possimus",
                        "voluptates",
                        "ea",
                        "consequuntur"],
                    "quia",
                    new DateTime(2018, 3, 21, 21, 1, 48),
                    "title",
                    938.8024),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2018, 9, 26, 9, 24, 35),
                        "reprehenderit",
                        "rerum consequatur eveniet"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "eveniet",
                    "consectetur",
                    626.0741,
                    ["nisi",
                        "fugit",
                        "quo",
                        "non"],
                    new DateTime(2002, 3, 9, 9, 27, 17),
                    "velit",
                    "laudantium distinctio molestiae ab iste",
                new Extent(-151.5365,
                        12.9373,
                        62.1724,
                        -47.9183,
                        242.1715,
                        720.0012,
                        229.5730,
                        977.1508,
                    new SpatialReference(9,
                            "facilis",
                            "maxime",
                            "quia"),
                        true,
                        true),
                    ["laudantium",
                        "dolore"],
                    "sed",
                    new DateTime(2015, 5, 1, 1, 42, 20),
                    "email",
                    586.5684);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Screen;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("group",
                    true,
                    "category")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset([new DimensionalDefinition("title",
                        true,
                        "status"),
                new DimensionalDefinition("phone",
                        true,
                        "email"),
                new DimensionalDefinition("name",
                        true,
                        "comment"),
                new DimensionalDefinition("category",
                        true,
                        "name")],
                new Extent(162.8288,
                        -177.9654,
                        75.4704,
                        -69.9348,
                        55.1838,
                        888.4215,
                        991.9209,
                        21.3277,
                    new SpatialReference(7,
                            "ipsa",
                            "eveniet",
                            "amet"),
                        true,
                        true));
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("ut fugit est",
                    "veritatis",
                    ["repudiandae",
                        "recusandae"],
                [new FieldInfo("id",
                        "odio",
                        "dolore",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("avatar",
                        "omnis",
                        "praesentium",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new RelationshipPopupContent("omnis facilis est",
                        "iusto reprehenderit odit eum vel voluptas eius",
                        2,
                        "iure",
                    [new RelatedRecordsInfoFieldOrder("autem",
                        OrderBy.Asc)],
                        7),
                new TextPopupContent("occaecati ut inventore"),
                new MediaPopupContent("saepe a voluptate",
                        "praesentium accusamus corporis ut ducimus",
                    [new ImageMediaInfo("nesciunt sit tempore",
                            "enim",
                            "sunt amet deleniti",
                        new ImageMediaInfoValue("https://barton.net",
                                "http://alfonso.net"),
                            111.9494),
                    new ImageMediaInfo("repellat doloribus qui",
                            "quia",
                            "dicta tenetur vitae",
                        new ImageMediaInfoValue("https://aisha.com",
                                "http://orion.org"),
                            524.6206)],
                        4),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                            "ex",
                            "maiores rerum impedit"))],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "id",
                        "nobis nulla omnis",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("eos saepe fugiat",
                        "https://picsum.photos/640/480/?image=18",
                        "f25acff8-4199-b315-ef76-481fd497d18e",
                        () => { Console.WriteLine("veniam"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "odio"),
                new ActionToggle("deleniti quia aperiam",
                        "a3bac73a-4e88-8c5c-104f-424133e792f2",
                        () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "updatedAt",
                        "vero"),
                new ActionButton("provident harum quae",
                        "https://picsum.photos/640/480/?image=636",
                        "69ddde98-05e0-ab26-296b-1cfdd95d73fa",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "libero")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(164.7908,
                    57.0233,
                    -24.1863,
                    -61.6024,
                    662.9818,
                    122.1763,
                    754.3892,
                    166.3133,
                new SpatialReference(5,
                        "consequatur",
                        "dignissimos",
                        "modi"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("dignissimos",
                    "category",
                OutputPixelType.U4,
                    "ratione",
                    "comment");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(934.0472,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(3,
                        "doloribus",
                        34.6000,
                        15590751.5079),
                new LOD(9,
                        "ipsum",
                        81.5343,
                        43546683.2920)],
                new Point(-175.1580,
                        39.0918,
                        -87.7927,
                        -36.4538,
                        153.0240,
                    new SpatialReference(9,
                            "sit",
                            "qui",
                            "est"),
                        true,
                        true,
                        319.7525),
                    [9,
                        6],
                new SpatialReference(5,
                        "et",
                        "perferendis",
                        "quia"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2003, 2, 21, 6, 9, 28),
                    new DateTime(2015, 2, 14, 8, 9, 19));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("voluptatum",
                    "nihil",
                new TimeExtent(new DateTime(2013, 8, 2, 20, 29, 12),
                        new DateTime(2006, 2, 12, 11, 13, 10)),
                new TimeInterval(TemporalTime.Years,
                        892.7808),
                    [new DateTime(2000, 5, 21, 10, 50, 35),
                        new DateTime(2000, 5, 12, 0, 34, 17)],
                    "Europe/Sofia",
                    "voluptatem");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Decades,
                    759.5366);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 10, 23, 11, 2, 0),
                    new DateTime(2007, 5, 21, 21, 16, 45));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
