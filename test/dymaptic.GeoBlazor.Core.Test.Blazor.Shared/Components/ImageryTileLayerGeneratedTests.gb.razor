@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(20, 214, 52),
                                new MapColor(138, 218, 126)),
                            true,
                            true,
                            [5,
                            9],
                            1,
                            6,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(553.2206,
                                3,
                                538.8851,
                                155.9541,
                                455.1210,
                                651.9545,
                                511.8820,
                                764.5215),
                            new RasterBandStatistics(400.6451,
                                9,
                                426.5745,
                                447.1468,
                                597.3641,
                                126.2424,
                                765.6415,
                                666.3061)],
                            true,
                            7))"
                        BandIds="@([6,
                            9,
                            8,
                            6])"
                        BlendMode="@(BlendMode.Xor)"
                        Copyright="@("eos")"
                        Effect="@(new Effect("vitae",
                            39133099.5614))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(48460413.5377)"
                        MinScale="@(43147.5185)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.8547)"
                        Title="@("aut porro rerum")"
                        FullExtent="@(new Extent(160.9093,
                                163.2726,
                                -22.9478,
                                -62.0667,
                                573.5606,
                                910.7687,
                                45.5306,
                                173.0957,
                            new SpatialReference(6,
                                    "rerum",
                                    "eaque",
                                    "quia"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Hours)"
                            Value="@(777.9334)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptatem")"
                            EndField="@("autem")"
                            Stops="@([new DateTime(2011, 6, 17, 16, 42, 38),
                                new DateTime(2004, 1, 12, 18, 46, 44)])"
                            TimeZone="@("Etc/UTC")"
                            TrackIdField="@("qui")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(898.8439)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2006, 3, 7, 8, 8, 23))"
                                End="@(new DateTime(2018, 1, 17, 11, 3, 4))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2020, 1, 11, 14, 9, 41))"
                            End="@(new DateTime(2010, 7, 22, 15, 41, 20))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(26.6917)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "ipsum",
                                    62.0223,
                                    19313741.7393),
                            new LOD(4,
                                    "ut",
                                    3.5843,
                                    2252186.0541)])"
                            Origin="@(new Point(20.1556,
                                    -86.6453,
                                    151.7076,
                                    -37.8661,
                                    410.8585,
                                new SpatialReference(3,
                                        "fugit",
                                        "error",
                                        "impedit"),
                                    true,
                                    true,
                                    867.6897))"
                            Size="@([8,
                                9,
                                1])"
                            SpatialReference="@(new SpatialReference(3,
                                    "molestiae",
                                    "in",
                                    "possimus"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("quos")"
                            FunctionName="@("createdAt")"
                            OutputPixelType="@(OutputPixelType.S16)"
                            RasterFunctionDefinition="@("quae")"
                            VariableName="@("password")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("incidunt inventore delectus")"
                            StringContent="@("magni")"
                            OutFields="@(["quis",
                                "qui"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "voluptas",
                                    "non",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("category",
                                        "assumenda",
                                        "suscipit",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.ShortDateLeLongTime),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("group",
                                        "quibusdam",
                                        "consequatur",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.LongDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Avg)],
                                    "id perspiciatis commodi recusandae quae et nemo",
                                    "aut consequatur modi")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "password",
                                    "quia unde et",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "token",
                                    "asperiores magnam fuga",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Name;",
                                    "id",
                                    "ex cumque iure",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "status",
                                    "ipsum et ullam",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("nisi eum laborum",
                                    "3df42fe6-288e-fcc7-c300-6139c8e69113",
                                    () => { Console.WriteLine("officia"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "category",
                                    "voluptas"),
                            new ActionToggle("voluptatem dolores sed",
                                    "73bcaf70-d93e-94a7-4672-d41dbd1f37c4",
                                    () => { Console.WriteLine("dolores"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "phone",
                                    "est"),
                            new ActionToggle("recusandae aut minima",
                                    "77c7d286-08d4-0cee-5294-3ca3ae8b33d2",
                                    () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "category",
                                    "ipsum"),
                            new ActionToggle("ullam reprehenderit consequatur",
                                    "b10adda6-ec90-2448-d175-f7d0264aa23f",
                                    () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "name",
                                    "blanditiis")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([66.4338,
                                        154.6840,
                                        955.0913]),
                                    new MapPoint([766.2670,
                                        436.2527])]),
                                    new MapPath([new MapPoint([499.4105,
                                            345.8314]),
                                        new MapPoint([388.6500,
                                            100.0092,
                                            35.3157,
                                            14.3670]),
                                        new MapPoint([786.9586,
                                            595.9041,
                                            25.3453,
                                            676.0319])]),
                                    new MapPath([new MapPoint([892.9216,
                                            274.6884]),
                                        new MapPoint([429.6968,
                                            325.8923,
                                            135.9193]),
                                        new MapPoint([384.3153,
                                            427.7342,
                                            769.2114])])],
                                new SpatialReference(3,
                                        "minima",
                                        "nulla",
                                        "excepturi"),
                                new Point(81.1503,
                                        -30.0975,
                                        49.0621,
                                        57.8241,
                                        434.2889,
                                    new SpatialReference(2,
                                            "quo",
                                            "non",
                                            "reiciendis"),
                                        true,
                                        true,
                                        293.2442),
                                    true,
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("createdAt")"
                                IsSlice="@(true)"
                                VariableName="@("group")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("status")"
                            IsSlice="@(true)"
                            VariableName="@("id")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([842.8896,
                            844.0054,
                            668.8305]),
                        new MapPoint([679.1114,
                            705.2543,
                            543.9640]),
                        new MapPoint([147.2938,
                            512.0066,
                            97.1215,
                            956.6270])])],
                    new SpatialReference(5,
                            "et",
                            "et",
                            "aut"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("molestiae",
                            "group",
                        OutputPixelType.S16,
                            "quis",
                            "comment"),
                        [4,
                            4],
                    Method.None,
                    [new DimensionalDefinition("comment",
                            true,
                            "avatar")],
                        [4,
                            2],
                    Operation.Max,
                        "quis",
                        "odit",
                    new Point(99.8406,
                            -1.8402,
                            -160.2086,
                            48.3039,
                            613.4449,
                        new SpatialReference(1,
                                "illum",
                                "quo",
                                "veritatis"),
                            true,
                            true,
                            657.8079),
                        "City = 'Toronto'"),
                new PixelSize(161.9250,
                        12.6261,
                    new PixelSizeSpatialReference(5,
                            591.6406)),
                new RasterFunction("optio",
                        "avatar",
                    OutputPixelType.Unknown,
                        "harum",
                        "token"),
                new TimeExtent(new DateTime(2022, 9, 7, 10, 25, 30),
                        new DateTime(2016, 5, 13, 21, 49, 22))),
                "tempore");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["veritatis",
                    "et"],
                    ["status",
                        "createdAt",
                        "createdAt",
                        "avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-58.4771,
                    62.8094,
                    0.4440,
                    62.5180,
                    289.6122,
                    167.0432,
                    452.1096,
                    377.6456,
                new SpatialReference(9,
                        "reprehenderit",
                        "itaque",
                        "nisi"),
                    true,
                    true),
                1,
                4,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Cubic));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(591.3751,
                277.0648,
                768.4118,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-51.5267,
                    42.1506,
                    23.0751,
                    -45.3509,
                    526.3568,
                new SpatialReference(8,
                        "qui",
                        "quia",
                        "asperiores"),
                    true,
                    true,
                    121.6252),
            new RasterIdentifyOptions([new DimensionalDefinition("password",
                        true,
                        "avatar")],
                    "phone"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2012, 6, 6, 20, 56, 3),
                        "ab",
                        "dolor sapiente temporibus"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Invert;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("category",
                    true,
                    "phone"),
            new DimensionalDefinition("createdAt",
                    true,
                    "phone"),
            new DimensionalDefinition("avatar",
                    true,
                    "createdAt"),
            new DimensionalDefinition("password",
                    true,
                    "category")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([133.2495,
                            843.8562,
                            552.5383,
                            352.7116]),
                        new MapPoint([261.4268,
                            360.0637,
                            246.4539,
                            722.6471])]),
                        new MapPath([new MapPoint([880.5770,
                                30.9071,
                                711.0172]),
                            new MapPoint([771.8897,
                                449.5477]),
                            new MapPoint([988.5970,
                                79.1783]),
                            new MapPoint([34.6072,
                                854.9465,
                                549.3381])])],
                    new SpatialReference(8,
                            "provident",
                            "optio",
                            "et"),
                    new Point(-176.8008,
                            85.0859,
                            110.6487,
                            33.9229,
                            67.2724,
                        new SpatialReference(2,
                                "eveniet",
                                "explicabo",
                                "aut"),
                            true,
                            true,
                            31.7894),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("updatedAt",
                        true,
                        "name"),
                new DimensionalDefinition("createdAt",
                        true,
                        "createdAt")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("sit dolor voluptatem",
                    "necessitatibus",
                    ["nihil",
                        "dolorem"],
                [new FieldInfo("title",
                        "delectus",
                        "vel",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Min)],
                [new MediaPopupContent("praesentium asperiores omnis",
                        "modi ut est quam nulla sed",
                    [new BarChartMediaInfo("voluptatibus facilis et",
                            "illum",
                            "omnis molestiae maiores",
                        new ChartMediaInfoValue(["et",
                                "voluptatibus",
                                "aliquam"],
                                "itaque",
                                "magnam",
                            [new ChartMediaInfoValueSeries("title",
                                    "optio",
                                    360.0557),
                            new ChartMediaInfoValueSeries("status",
                                    "distinctio",
                                    219.1733),
                            new ChartMediaInfoValueSeries("comment",
                                    "aut",
                                    224.4527)],
                            [new MapColor(39, 221, 236),
                            new MapColor(79, 220, 87),
                            new MapColor(164, 128, 125),
                            new MapColor(76, 134, 152)])),
                    new ColumnChartMediaInfo("fuga qui culpa",
                            "officiis",
                            "optio blanditiis autem",
                        new ChartMediaInfoValue(["excepturi",
                                "velit"],
                                "voluptas",
                                "reiciendis",
                            [new ChartMediaInfoValueSeries("phone",
                                    "quisquam",
                                    344.9054),
                            new ChartMediaInfoValueSeries("phone",
                                    "quisquam",
                                    160.3890),
                            new ChartMediaInfoValueSeries("phone",
                                    "nemo",
                                    775.4500)],
                            [new MapColor(202, 140, 81),
                            new MapColor(55, 45, 127),
                            new MapColor(114, 55, 236),
                            new MapColor(43, 215, 131)])),
                    new BarChartMediaInfo("quam suscipit dolores",
                            "aut",
                            "blanditiis quia reiciendis",
                        new ChartMediaInfoValue(["reiciendis",
                                "et",
                                "repellendus",
                                "placeat"],
                                "voluptates",
                                "animi",
                            [new ChartMediaInfoValueSeries("title",
                                    "consequuntur",
                                    89.1365),
                            new ChartMediaInfoValueSeries("token",
                                    "veniam",
                                    252.9193)],
                            [new MapColor(67, 78, 98),
                            new MapColor(13, 208, 104),
                            new MapColor(149, 215, 247),
                            new MapColor(9, 244, 252)]))],
                        5),
                new TextPopupContent("quia occaecati qui")],
                [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "comment",
                        "veniam ea assumenda",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("nihil dignissimos quaerat",
                        "a5e4922a-b6e2-7c31-6152-7c6659642116",
                        () => { Console.WriteLine("vitae"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "quibusdam"),
                new ActionButton("dolor doloremque et",
                        "https://picsum.photos/640/480/?image=173",
                        "2d48e24f-66bb-44a6-f26d-38ab71a3f398",
                        () => { Console.WriteLine("non"); return Task.CompletedTask; },
                        "phone",
                        true,
                        true,
                        true,
                        "dolor"),
                new ActionButton("ipsam asperiores sed",
                        "https://picsum.photos/640/480/?image=125",
                        "c2caa53f-85ee-60e5-d83d-0f076660d00f",
                        () => { Console.WriteLine("tenetur"); return Task.CompletedTask; },
                        "email",
                        true,
                        true,
                        true,
                        "rerum")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(11.4550,
                    -108.5903,
                    -42.5908,
                    -22.1446,
                    88.2232,
                    797.0751,
                    439.0075,
                    333.8911,
                new SpatialReference(7,
                        "repellat",
                        "tempora",
                        "mollitia"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("voluptatum",
                    "name",
                OutputPixelType.U1,
                    "officia",
                    "category");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(237.6460,
                    TileInfoFormat.Png,
                    true,
                [new LOD(5,
                        "rem",
                        98.4040,
                        32967951.9357)],
                new Point(-54.5765,
                        61.0339,
                        -132.8308,
                        31.7522,
                        92.6036,
                    new SpatialReference(7,
                            "reiciendis",
                            "provident",
                            "incidunt"),
                        true,
                        true,
                        772.5836),
                    [1,
                        4,
                        2],
                new SpatialReference(9,
                        "eius",
                        "nisi",
                        "voluptatem"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2004, 11, 9, 5, 30, 2),
                    new DateTime(2017, 3, 27, 5, 37, 42));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("ut",
                    "sequi",
                new TimeExtent(new DateTime(2013, 2, 18, 21, 26, 20),
                        new DateTime(2010, 7, 14, 13, 38, 43)),
                new TimeInterval(TemporalTime.Hours,
                        197.5346),
                    [new DateTime(2002, 8, 19, 7, 50, 24),
                        new DateTime(2002, 9, 14, 22, 9, 26),
                        new DateTime(2005, 1, 20, 20, 1, 15)],
                    "America/Juneau",
                    "quo");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    410.7208);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 7, 18, 18, 46, 33),
                    new DateTime(2015, 2, 11, 8, 55, 43));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
