@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(118, 194, 37),
                                new MapColor(36, 176, 40)),
                            true,
                            true,
                            [9,
                            4,
                            9,
                            6],
                            9,
                            7,
                            StretchType.None,
                            [new RasterBandStatistics(741.2951,
                                5,
                                435.2090,
                                908.5401,
                                1.7648,
                                266.1039,
                                147.3489,
                                617.9215),
                            new RasterBandStatistics(271.7896,
                                6,
                                827.5278,
                                942.6847,
                                577.9570,
                                295.5311,
                                418.4921,
                                487.7689),
                            new RasterBandStatistics(636.7423,
                                2,
                                739.7137,
                                33.8050,
                                540.2030,
                                524.7565,
                                214.9030,
                                21.0940),
                            new RasterBandStatistics(458.8170,
                                9,
                                897.9628,
                                445.4864,
                                607.6923,
                                486.6604,
                                71.5690,
                                144.0955)],
                            true,
                            9))"
                        BandIds="@([6,
                            3,
                            9,
                            6])"
                        BlendMode="@(BlendMode.Average)"
                        Copyright="@("magni")"
                        Effect="@(new Effect("inventore",
                            13382269.3645))"
                        Interpolation="@(PixelInterpolation.Cubic)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(38874302.0572)"
                        MinScale="@(5899.6064)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.4742)"
                        Title="@("vero et repellat")"
                        FullExtent="@(new Extent(-116.5305,
                                23.3326,
                                -75.1610,
                                39.2015,
                                139.8354,
                                638.9009,
                                537.3943,
                                589.7368,
                            new SpatialReference(8,
                                    "id",
                                    "provident",
                                    "praesentium"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(267.8511)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("nemo")"
                            EndField="@("non")"
                            Stops="@([new DateTime(2012, 8, 1, 4, 46, 16),
                                new DateTime(2011, 4, 1, 21, 10, 46)])"
                            TimeZone="@("Europe/Istanbul")"
                            TrackIdField="@("praesentium")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Days)"
                                Value="@(672.9477)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2001, 2, 14, 7, 42, 20))"
                                End="@(new DateTime(2016, 11, 12, 4, 13, 39))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2022, 6, 2, 9, 20, 37))"
                            End="@(new DateTime(2019, 2, 19, 6, 56, 4))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(540.7988)"
                            Format="@(TileInfoFormat.Emf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "ut",
                                    14.3940,
                                    22934064.0756),
                            new LOD(4,
                                    "consequuntur",
                                    76.6551,
                                    2483387.5593)])"
                            Origin="@(new Point(-83.6085,
                                    -25.9632,
                                    109.1456,
                                    -81.9852,
                                    210.7683,
                                new SpatialReference(7,
                                        "placeat",
                                        "sunt",
                                        "nihil"),
                                    true,
                                    true,
                                    698.6277))"
                            Size="@([6,
                                8,
                                9,
                                9])"
                            SpatialReference="@(new SpatialReference(8,
                                    "velit",
                                    "facilis",
                                    "et"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("accusamus")"
                            FunctionName="@("token")"
                            OutputPixelType="@(OutputPixelType.U16)"
                            RasterFunctionDefinition="@("accusantium")"
                            VariableName="@("password")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("dolorem")"
                            ApiKey="@("rerum")"
                            AvgRating="@(485.6606)"
                            Categories="@(["commodi",
                                "hic",
                                "cupiditate"])"
                            Created="@(new DateTime(2023, 5, 2, 6, 11, 7))"
                            Culture="@("nihil")"
                            Description="@("quia omnis sunt unde repellendus")"
                            Extent="@(new Extent(83.2472,
                                    132.4221,
                                    61.5248,
                                    -50.0837,
                                    752.1154,
                                    841.4358,
                                    192.3761,
                                    856.0544,
                                new SpatialReference(5,
                                        "praesentium",
                                        "eum",
                                        "nam"),
                                    true,
                                    true))"
                            GroupCategories="@(["nihil",
                                "vel",
                                "placeat"])"
                            LicenseInfo="@("ratione")"
                            Modified="@(new DateTime(2018, 10, 10, 7, 46, 39))"
                            Name="@("title")"
                            NumComments="@(721.9359)"
                            NumRatings="@(742.2254)"
                            NumViews="@(592.7544)"
                            Owner="@("Adrien Pfeffer")"
                            OwnerFolder="@("Alejandrin Kohler")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["aliquam",
                                        "repellendus",
                                        "animi"],
                                    "totam",
                                    "voluptatem",
                                    "eligendi",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("est")"
                            Screenshots="@(["sapiente",
                                "ut",
                                "consequatur",
                                "in"])"
                            Size="@(4)"
                            Snippet="@("vel")"
                            Tags="@(["eos",
                                "minus",
                                "praesentium",
                                "illum"])"
                            Title="@("dolores quis tempore")"
                            TypeKeywords="@(["omnis",
                                "eum",
                                "sint",
                                "qui"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("perspiciatis consequuntur velit")"
                            StringContent="@("dolorum")"
                            OutFields="@(["adipisci",
                                "veritatis",
                                "laboriosam",
                                "optio"])"
                            FieldInfos="@([new FieldInfo("title",
                                    "accusamus",
                                    "vitae",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("category",
                                    "iste",
                                    "unde",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("phone",
                                    "modi",
                                    "voluptas",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("phone",
                                    "ex",
                                    "architecto",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new MediaPopupContent("voluptates laudantium sapiente",
                                    "omnis et consequatur accusamus ipsa",
                                [new BarChartMediaInfo("unde non cumque",
                                        "nostrum",
                                        "aliquam dolores aut",
                                    new ChartMediaInfoValue(["autem",
                                            "fuga",
                                            "eius",
                                            "minima"],
                                            "fugiat",
                                            "aut",
                                        [new ChartMediaInfoValueSeries("id",
                                                "recusandae",
                                                123.1495),
                                        new ChartMediaInfoValueSeries("avatar",
                                                "ullam",
                                                688.9344),
                                        new ChartMediaInfoValueSeries("id",
                                                "dolorem",
                                                374.7663)],
                                        [new MapColor(178, 113, 145)])),
                                new LineChartMediaInfo("hic ea sit",
                                        "omnis",
                                        "corrupti ducimus ad",
                                    new ChartMediaInfoValue(["est",
                                            "optio"],
                                            "nemo",
                                            "consequuntur",
                                        [new ChartMediaInfoValueSeries("group",
                                                "sit",
                                                877.7900),
                                        new ChartMediaInfoValueSeries("name",
                                                "tempora",
                                                220.4029)],
                                        [new MapColor(42, 253, 44),
                                        new MapColor(73, 46, 218),
                                        new MapColor(34, 240, 143),
                                        new MapColor(177, 245, 115)])),
                                new ColumnChartMediaInfo("veniam aliquid quasi",
                                        "asperiores",
                                        "molestias et nemo",
                                    new ChartMediaInfoValue(["placeat",
                                            "maiores",
                                            "qui"],
                                            "distinctio",
                                            "et",
                                        [new ChartMediaInfoValueSeries("password",
                                                "omnis",
                                                940.0736),
                                        new ChartMediaInfoValueSeries("password",
                                                "soluta",
                                                365.1693),
                                        new ChartMediaInfoValueSeries("email",
                                                "molestias",
                                                817.0679)],
                                        [new MapColor(178, 59, 241),
                                        new MapColor(63, 124, 156),
                                        new MapColor(134, 146, 10),
                                        new MapColor(19, 225, 231)]))],
                                    7),
                            new TextPopupContent("enim doloremque nihil")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "id",
                                    "non sapiente rerum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "title",
                                    "praesentium facere fugiat",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("omnis nam veritatis",
                                    "https://picsum.photos/640/480/?image=181",
                                    "5ace2972-fbf9-7687-46a5-468d615c2195",
                                    () => { Console.WriteLine("aspernatur"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "voluptas"),
                            new ActionToggle("nobis sed quia",
                                    "b573960b-d9f9-aa80-46c8-998ad655f462",
                                    () => { Console.WriteLine("libero"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "voluptate"),
                            new ActionButton("quia dolores dolore",
                                    "https://picsum.photos/640/480/?image=671",
                                    "d2085066-903a-50aa-f617-c8160624a614",
                                    () => { Console.WriteLine("enim"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "est")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(-147.0586,
                                    -153.3687,
                                    -62.8464,
                                    5.7359,
                                    789.6960,
                                    915.5007,
                                    914.2166,
                                    604.6164,
                                new SpatialReference(4,
                                        "ipsa",
                                        "nesciunt",
                                        "eum"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("status")"
                                IsSlice="@(true)"
                                VariableName="@("title")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("title")"
                            IsSlice="@(true)"
                            VariableName="@("avatar")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(138.2056,
                        67.2825,
                        135.5632,
                        28.6203,
                        428.8076,
                    new SpatialReference(3,
                            "quaerat",
                            "voluptatem",
                            "ea"),
                        true,
                        true,
                        779.4413),
                new MosaicRule(true,
                    new RasterFunction("aspernatur",
                            "token",
                        OutputPixelType.S16,
                            "saepe",
                            "password"),
                        [4,
                            4,
                            1],
                    Method.Northwest,
                    [new DimensionalDefinition("group",
                            true,
                            "category")],
                        [4,
                            9,
                            9],
                    Operation.Max,
                        "et",
                        "rerum",
                    new Point(157.5323,
                            -86.6908,
                            -27.2322,
                            44.0835,
                            486.2753,
                        new SpatialReference(7,
                                "et",
                                "error",
                                "harum"),
                            true,
                            true,
                            30.1920),
                        "Name = 'John Doe'"),
                new PixelSize(72.2798,
                        -38.3469,
                    new PixelSizeSpatialReference(9,
                            92.5046)),
                new RasterFunction("magni",
                        "password",
                    OutputPixelType.U32,
                        "labore",
                        "avatar"),
                new TimeExtent(new DateTime(2022, 6, 26, 16, 28, 21),
                        new DateTime(2018, 7, 18, 7, 54, 16))),
                "exercitationem");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quidem",
                    "quod"],
                    ["id",
                        "id",
                        "group",
                        "email"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-34.7034,
                    -93.0922,
                    -14.9807,
                    -88.8453,
                    600.7171,
                    884.9421,
                    591.8665,
                    637.0098,
                new SpatialReference(5,
                        "veniam",
                        "modi",
                        "impedit"),
                    true,
                    true),
                1,
                8,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Nearest));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(192.0347,
                720.9330,
                688.2290,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-30.4214,
                    33.1234,
                    43.7707,
                    -77.8915,
                    412.6446,
                new SpatialReference(3,
                        "corrupti",
                        "omnis",
                        "aut"),
                    true,
                    true,
                    709.2219),
            new RasterIdentifyOptions([new DimensionalDefinition("name",
                        true,
                        "name"),
                new DimensionalDefinition("comment",
                        true,
                        "token"),
                new DimensionalDefinition("createdAt",
                        true,
                        "phone")],
                    "comment"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "nobis",
                    "tempore",
                    856.9920,
                    ["quae",
                        "voluptatem"],
                    new DateTime(2015, 6, 22, 15, 22, 33),
                    "dolor",
                    "reiciendis pariatur alias dolor quaerat quam occaecati",
                new Extent(-86.3153,
                        166.6548,
                        -45.7110,
                        40.3697,
                        738.2448,
                        187.4307,
                        756.1403,
                        466.8492,
                    new SpatialReference(9,
                            "blanditiis",
                            "aut",
                            "voluptas"),
                        true,
                        true),
                    ["modi",
                        "aut",
                        "ab"],
                    "pariatur",
                    new DateTime(2010, 4, 6, 16, 19, 21),
                    "category",
                    121.7789),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2004, 4, 26, 5, 8, 58),
                        "corrupti",
                        "enim aliquam et"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "nemo",
                    "voluptatibus",
                    368.7990,
                    ["non",
                        "et"],
                    new DateTime(2009, 9, 23, 9, 54, 43),
                    "suscipit",
                    "commodi commodi veniam laboriosam aspernatur est est",
                new Extent(18.4454,
                        12.7867,
                        -16.3226,
                        63.6790,
                        826.3386,
                        12.6008,
                        827.0422,
                        241.4130,
                    new SpatialReference(6,
                            "totam",
                            "aspernatur",
                            "enim"),
                        true,
                        true),
                    ["consequatur",
                        "facilis",
                        "illo",
                        "non"],
                    "molestias",
                    new DateTime(2010, 3, 4, 2, 34, 48),
                    "status",
                    873.4057);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("group",
                    true,
                    "email"),
            new DimensionalDefinition("password",
                    true,
                    "group"),
            new DimensionalDefinition("id",
                    true,
                    "email")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([469.7974,
                            319.3143,
                            296.5377]),
                        new MapPoint([605.2616,
                            37.1806,
                            898.4028]),
                        new MapPoint([529.1273,
                            385.5425]),
                        new MapPoint([380.8594,
                            541.1264,
                            976.4674])]),
                        new MapPath([new MapPoint([123.1044,
                                851.0372,
                                526.3016,
                                599.9932]),
                            new MapPoint([950.5302,
                                566.6337,
                                492.0799]),
                            new MapPoint([346.2301,
                                62.6475,
                                723.1590,
                                747.1458]),
                            new MapPoint([643.0756,
                                203.3977,
                                132.7189,
                                904.2653])]),
                        new MapPath([new MapPoint([29.8686,
                                5.6447]),
                            new MapPoint([571.4837,
                                900.3205])]),
                        new MapPath([new MapPoint([837.0031,
                                612.6960]),
                            new MapPoint([338.4324,
                                158.9210]),
                            new MapPoint([226.5463,
                                858.6455]),
                            new MapPoint([880.2844,
                                619.3982,
                                727.5688,
                                670.6706])])],
                    new SpatialReference(9,
                            "ut",
                            "autem",
                            "quisquam"),
                    new Point(-139.4249,
                            -6.1276,
                            -152.6758,
                            -0.6564,
                            265.1283,
                        new SpatialReference(9,
                                "impedit",
                                "et",
                                "harum"),
                            true,
                            true,
                            357.7173),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("updatedAt",
                        true,
                        "title"),
                new DimensionalDefinition("name",
                        true,
                        "group")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("qui quaerat voluptatum",
                    "pariatur",
                    ["labore",
                        "suscipit"],
                [new FieldInfo("token",
                        "nobis",
                        "harum",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateLeShortTime24),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("token",
                        "debitis",
                        "aut",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthDayYear),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("id",
                        "optio",
                        "suscipit",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Max)],
                [new RelationshipPopupContent("asperiores fuga et",
                        "autem excepturi quo unde saepe",
                        5,
                        "beatae",
                    [new RelatedRecordsInfoFieldOrder("ab",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("modi",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("quis",
                        OrderBy.Desc)],
                        2)],
                [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "avatar",
                        "quos aliquid magni",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "token",
                        "ullam perspiciatis molestias",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "avatar",
                        "sed culpa doloremque",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "group",
                        "non in numquam",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("suscipit in iure",
                        "0e5dcfb7-2b18-1258-d9fa-68f8f4e5b10f",
                        () => { Console.WriteLine("dolor"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "token",
                        "quod"),
                new ActionToggle("quia sed et",
                        "f87583f2-c775-557a-d90a-dc2631b3d418",
                        () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "title",
                        "harum"),
                new ActionToggle("enim ut mollitia",
                        "40e33874-3585-9c0c-15a8-68dd4edc8c6e",
                        () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "phone",
                        "corrupti")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-159.5759,
                    -121.6427,
                    24.6879,
                    -5.2642,
                    739.3912,
                    237.2502,
                    947.4549,
                    786.2470,
                new SpatialReference(3,
                        "aspernatur",
                        "voluptas",
                        "non"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("quo",
                    "phone",
                OutputPixelType.S16,
                    "dignissimos",
                    "avatar");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(532.4050,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(8,
                        "temporibus",
                        75.0376,
                        45995023.0839),
                new LOD(6,
                        "consequuntur",
                        63.0726,
                        25994195.1716)],
                new Point(-42.4658,
                        -37.8017,
                        56.0476,
                        -75.2681,
                        659.6148,
                    new SpatialReference(1,
                            "id",
                            "magni",
                            "qui"),
                        true,
                        true,
                        318.9552),
                    [1,
                        2,
                        1,
                        5],
                new SpatialReference(3,
                        "at",
                        "rerum",
                        "dicta"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2022, 3, 26, 9, 15, 47),
                    new DateTime(2003, 11, 11, 20, 21, 0));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("consequuntur",
                    "quod",
                new TimeExtent(new DateTime(2005, 1, 3, 6, 26, 25),
                        new DateTime(2003, 8, 13, 21, 52, 37)),
                new TimeInterval(TemporalTime.Centuries,
                        789.2061),
                    [new DateTime(2015, 6, 23, 8, 49, 20),
                        new DateTime(2012, 8, 21, 9, 3, 34),
                        new DateTime(2010, 11, 19, 10, 38, 46),
                        new DateTime(2009, 6, 12, 22, 47, 26)],
                    "Europe/Vienna",
                    "aliquid");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Minutes,
                    667.2955);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 6, 14, 5, 17, 42),
                    new DateTime(2001, 6, 21, 16, 54, 23));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
