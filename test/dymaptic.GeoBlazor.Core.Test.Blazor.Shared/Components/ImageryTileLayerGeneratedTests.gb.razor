@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(156, 67, 157),
                                new MapColor(190, 146, 20)),
                            true,
                            true,
                            [9,
                            2],
                            5,
                            1,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(792.2103,
                                3,
                                148.0087,
                                194.6517,
                                901.2799,
                                167.1678,
                                184.1440,
                                849.2737),
                            new RasterBandStatistics(268.5950,
                                8,
                                383.2918,
                                200.5737,
                                752.9778,
                                780.2532,
                                815.0603,
                                768.8410)],
                            true,
                            8))"
                        BandIds="@([3])"
                        BlendMode="@(BlendMode.Screen)"
                        Copyright="@("ab")"
                        Effect="@(new Effect("sit",
                            29490516.6717))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(14509967.3051)"
                        MinScale="@(5520.5290)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.9539)"
                        Title="@("praesentium pariatur et")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(160.1956)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("non")"
                            EndField="@("in")"
                            Stops="@([new DateTime(2023, 3, 18, 12, 56, 10)])"
                            TimeZone="@("America/Godthab")"
                            TrackIdField="@("reprehenderit")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(272.7561)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2002, 4, 9, 5, 10, 24))"
                                End="@(new DateTime(2006, 10, 11, 21, 22, 27))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2001, 1, 16, 9, 58, 0))"
                            End="@(new DateTime(2004, 9, 14, 15, 12, 39))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(482.7277)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "unde",
                                    20.5424,
                                    35485552.5369),
                            new LOD(3,
                                    "omnis",
                                    83.7700,
                                    8519810.1145)])"
                            Size="@([6])"
                            SpatialReference="@(new SpatialReference(5,
                                    "dolorem",
                                    "voluptatem",
                                    "est"))">
                            <Point 
                                Longitude="@(93.9660)"
                                Latitude="@(-16.9680)"
                                X="@(2.3966)"
                                Y="@(-85.7152)"
                                Z="@(716.6528)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(746.6059)">
                                <SpatialReference 
                                    Wkid="@(5)"
                                    ImageCoordinateSystem="@("fugit")"
                                    Wkt="@("tenetur")"
                                    Wkt2="@("autem")">
                                </SpatialReference>
                            </Point>
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("consectetur")"
                            FunctionName="@("avatar")"
                            OutputPixelType="@(OutputPixelType.C64)"
                            RasterFunctionDefinition="@("id")"
                            VariableName="@("status")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("et accusantium molestiae")"
                            StringContent="@("eius")"
                            OutFields="@(["dicta"])"
                            FieldInfos="@([new FieldInfo("token",
                                    "debitis",
                                    "consectetur",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("title",
                                    "sunt",
                                    "vitae",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new MediaPopupContent("nihil consequuntur possimus",
                                    "sequi deleniti et aspernatur",
                                [new PieChartMediaInfo("ut nesciunt aut",
                                        "dignissimos",
                                        "rerum error animi",
                                    new ChartMediaInfoValue(["perferendis",
                                            "et"],
                                            "ut",
                                            "necessitatibus",
                                        [new ChartMediaInfoValueSeries("email",
                                                "quas",
                                                310.2408)],
                                        [new MapColor(54, 253, 84),
                                        new MapColor(143, 63, 114)]))],
                                    6)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "createdAt",
                                    "est ullam velit",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("at voluptatibus illo",
                                "https://picsum.photos/640/480/?image=157",
                                "7479aabc-830e-0067-155d-92502c771045",
                                () => { Console.WriteLine("id"); return Task.CompletedTask; },
                                "name",
                                true,
                                true,
                                true,
                                "et")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(-73.0168,
                                    -89.5370,
                                    -2.9762,
                                    -88.1135,
                                    799.9504,
                                    864.0932,
                                    851.1059,
                                    656.8341,
                                new SpatialReference(3,
                                        "sed",
                                        "qui",
                                        "consequatur"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("phone")"
                                IsSlice="@(true)"
                                VariableName="@("id")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("category")"
                            IsSlice="@(true)"
                            VariableName="@("email")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(44.8358)"
                            Xmin="@(25.5172)"
                            Ymax="@(-87.6476)"
                            Ymin="@(53.1633)"
                            Zmax="@(677.0483)"
                            Zmin="@(268.7493)"
                            Mmax="@(798.4088)"
                            Mmin="@(535.5070)"
                            SpatialReference="@(new SpatialReference(2,
                                    "mollitia",
                                    "fuga",
                                    "ut"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([320.9851,
                            272.3096])])],
                    new SpatialReference(9,
                            "culpa",
                            "vitae",
                            "voluptatem"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("qui",
                            "status",
                        OutputPixelType.S16,
                            "inventore",
                            "title"),
                        [6],
                    Method.None,
                    [new DimensionalDefinition("updatedAt",
                            true,
                            "category"),
                    new DimensionalDefinition("avatar",
                            true,
                            "group")],
                        [9,
                            2],
                    Operation.Sum,
                        "nihil",
                        "voluptatibus",
                    new Point(158.0459,
                            -45.3770,
                            147.9480,
                            -64.4825,
                            294.5674,
                        new SpatialReference(1,
                                "quas",
                                "nam",
                                "recusandae"),
                            true,
                            true,
                            909.5431),
                        "1 = 1"),
                new PixelSize(137.7019,
                        76.4838,
                    new PixelSizeSpatialReference(5,
                            224.2702)),
                new RasterFunction("sint",
                        "email",
                    OutputPixelType.C64,
                        "impedit",
                        "updatedAt"),
                new TimeExtent(new DateTime(2018, 3, 1, 7, 25, 45),
                        new DateTime(2004, 2, 6, 4, 2, 24))),
                "minus");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["harum",
                    "corporis"],
                    ["password",
                        "token"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-1.2665,
                    43.6045,
                    -77.8197,
                    2.7351,
                    949.9898,
                    471.9845,
                    45.0299,
                    577.8600,
                new SpatialReference(5,
                        "eveniet",
                        "explicabo",
                        "harum"),
                    true,
                    true),
                4,
                7,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Bilinear));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(811.6938,
                820.0200,
                276.8228,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(15.9474,
                    57.2313,
                    126.7544,
                    51.9264,
                    195.7049,
                new SpatialReference(4,
                        "quas",
                        "in",
                        "eveniet"),
                    true,
                    true,
                    357.5241),
            new RasterIdentifyOptions([new DimensionalDefinition("phone",
                        true,
                        "group"),
                new DimensionalDefinition("createdAt",
                        true,
                        "category")],
                    "avatar"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2001, 3, 4, 12, 16, 6),
                        "atque",
                        "deleniti odit magni"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("updatedAt",
                    true,
                    "password"),
            new DimensionalDefinition("password",
                    true,
                    "comment")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([889.7910]),
                        new MapPoint([536.9245,
                            339.2037])]),
                        new MapPath([new MapPoint([180.7549,
                                186.6858]),
                            new MapPoint([864.8223])])],
                    new SpatialReference(8,
                            "eos",
                            "possimus",
                            "laborum"),
                        true,
                        true),
                [new DimensionalDefinition("email",
                        true,
                        "avatar")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("eos quia omnis",
                    "ut",
                    ["odio"],
                [new FieldInfo("group",
                        "consequuntur",
                        "velit",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("group",
                        "explicabo",
                        "suscipit",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateLongTime),
                        true,
                        true,
                    StatisticType.Count)],
                [new AttachmentsPopupContent("debitis iure quibusdam",
                        "rerum voluptatem voluptates aut",
                        AttachmentsPopupContentDisplayType.Preview),
                new AttachmentsPopupContent("rem reprehenderit adipisci",
                        "iure ex in est",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("return $feature.Name;",
                        "category",
                        "voluptatem a consequatur",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "title",
                        "sint necessitatibus esse",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("nobis suscipit in",
                        "https://picsum.photos/640/480/?image=867",
                        "8f66c3d2-0b95-3504-9333-2138f82d3025",
                        () => { Console.WriteLine("tempore"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "hic")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-82.1540,
                    -161.1122,
                    -0.3695,
                    -57.5501,
                    153.3011,
                    741.2262,
                    716.0180,
                    374.2310,
                new SpatialReference(1,
                        "explicabo",
                        "iusto",
                        "dolorum"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("est",
                    "phone",
                OutputPixelType.S16,
                    "suscipit",
                    "name");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(712.4290,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(5,
                        "dolorem",
                        46.1500,
                        24994534.5217),
                new LOD(3,
                        "officia",
                        25.2475,
                        16674229.4191)],
                new Point(-123.2873,
                        36.9550,
                        17.0354,
                        -10.4085,
                        197.0474,
                    new SpatialReference(7,
                            "vel",
                            "dignissimos",
                            "alias"),
                        true,
                        true,
                        730.9595),
                    [2],
                new SpatialReference(6,
                        "magni",
                        "qui",
                        "ut"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2019, 5, 26, 21, 36, 38),
                    new DateTime(2003, 7, 16, 10, 4, 12));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quibusdam",
                    "voluptas",
                new TimeExtent(new DateTime(2016, 4, 27, 21, 2, 38),
                        new DateTime(2011, 7, 1, 18, 37, 54)),
                new TimeInterval(TemporalTime.Milliseconds,
                        68.6734),
                    [new DateTime(2001, 6, 19, 1, 3, 25)],
                    "Europe/Helsinki",
                    "placeat");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Milliseconds,
                    553.7546);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 1, 18, 9, 34, 53),
                    new DateTime(2019, 4, 12, 15, 1, 38));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
