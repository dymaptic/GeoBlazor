@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(133, 173, 39),
                                new MapColor(77, 41, 122)),
                            true,
                            true,
                            [8,
                            2,
                            9,
                            7],
                            9,
                            6,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(765.4597,
                                9,
                                335.2009,
                                647.7548,
                                139.5198,
                                553.2678,
                                940.1059,
                                205.0948),
                            new RasterBandStatistics(594.2165,
                                9,
                                648.6077,
                                975.9612,
                                304.7621,
                                99.7352,
                                401.7641,
                                45.9913)],
                            true,
                            4))"
                        BandIds="@([1,
                            7,
                            3,
                            4])"
                        BlendMode="@(BlendMode.DestinationAtop)"
                        Copyright="@("eveniet")"
                        Effect="@(new Effect("inventore",
                            21315144.6262))"
                        Interpolation="@(PixelInterpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(15148629.0063)"
                        MinScale="@(1498.3814)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.7028)"
                        Title="@("adipisci nisi ab")"
                        FullExtent="@(new Extent(85.2847,
                                18.3098,
                                -66.0159,
                                -61.4770,
                                14.0307,
                                225.2353,
                                963.4636,
                                851.4174,
                            new SpatialReference(3,
                                    "est",
                                    "nobis",
                                    "quia"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(462.3043)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("sit")"
                            EndField="@("sed")"
                            Stops="@([new DateTime(2014, 7, 7, 20, 9, 1),
                                new DateTime(2000, 4, 19, 22, 13, 0),
                                new DateTime(2008, 8, 5, 10, 37, 21),
                                new DateTime(2002, 11, 27, 22, 6, 29)])"
                            TimeZone="@("Asia/Kolkata")"
                            TrackIdField="@("consequatur")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(410.1975)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 4, 27, 1, 32, 11))"
                                End="@(new DateTime(2017, 9, 6, 0, 17, 53))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2022, 5, 15, 11, 42, 32))"
                            End="@(new DateTime(2012, 5, 15, 13, 53, 58))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(500.9534)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "cupiditate",
                                    51.6185,
                                    41897513.6676),
                            new LOD(9,
                                    "consequatur",
                                    14.1020,
                                    1509968.4558)])"
                            Origin="@(new Point(104.1333,
                                    59.3097,
                                    -27.7131,
                                    -37.9378,
                                    5.0552,
                                new SpatialReference(2,
                                        "ut",
                                        "eius",
                                        "molestiae"),
                                    true,
                                    true,
                                    745.2074))"
                            Size="@([5,
                                9,
                                5,
                                3])"
                            SpatialReference="@(new SpatialReference(5,
                                    "adipisci",
                                    "enim",
                                    "quas"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("qui")"
                            FunctionName="@("password")"
                            OutputPixelType="@(OutputPixelType.U4)"
                            RasterFunctionDefinition="@("blanditiis")"
                            VariableName="@("name")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("et")"
                            ApiKey="@("provident")"
                            AvgRating="@(658.2216)"
                            Categories="@(["officia",
                                "ad",
                                "esse"])"
                            Created="@(new DateTime(2011, 3, 3, 20, 51, 15))"
                            Culture="@("officia")"
                            Description="@("odio dolor sequi sed ea")"
                            Extent="@(new Extent(-28.6002,
                                    -135.3143,
                                    -64.7029,
                                    33.9735,
                                    694.3358,
                                    576.8112,
                                    998.4621,
                                    214.0941,
                                new SpatialReference(6,
                                        "et",
                                        "dolorem",
                                        "est"),
                                    true,
                                    true))"
                            GroupCategories="@(["et",
                                "aut"])"
                            LicenseInfo="@("corrupti")"
                            Modified="@(new DateTime(2008, 5, 17, 8, 38, 4))"
                            Name="@("avatar")"
                            NumComments="@(912.8151)"
                            NumRatings="@(934.6233)"
                            NumViews="@(520.3397)"
                            Owner="@("Gladys Howell")"
                            OwnerFolder="@("Chaya Hackett")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["in",
                                        "possimus",
                                        "et",
                                        "maiores"],
                                    "quia",
                                    "unde",
                                    "molestiae",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("voluptatem")"
                            Screenshots="@(["quia",
                                "rerum",
                                "dolores"])"
                            Size="@(4)"
                            Snippet="@("pariatur")"
                            Tags="@(["ad",
                                "delectus",
                                "recusandae",
                                "asperiores"])"
                            Title="@("rerum minima rem")"
                            TypeKeywords="@(["voluptatem",
                                "autem",
                                "ratione"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("soluta quia rerum")"
                            StringContent="@("qui")"
                            OutFields="@(["et",
                                "cumque",
                                "quasi",
                                "aut"])"
                            FieldInfos="@([new FieldInfo("password",
                                    "necessitatibus",
                                    "aperiam",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("createdAt",
                                    "libero",
                                    "dolorem",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("name",
                                    "aliquam",
                                    "cupiditate",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("password",
                                    "rerum",
                                    "reiciendis",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new RelationshipPopupContent("id qui et",
                                    "quam sed officiis iste culpa at",
                                    7,
                                    "unde",
                                [new RelatedRecordsInfoFieldOrder("rerum",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("occaecati",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("impedit",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("qui",
                                    OrderBy.Asc)],
                                    3),
                            new TextPopupContent("asperiores hic sed"),
                            new RelationshipPopupContent("quidem nam tempora",
                                    "iure voluptatem est cupiditate rem optio aut",
                                    8,
                                    "quod",
                                [new RelatedRecordsInfoFieldOrder("iure",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("necessitatibus",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("accusamus",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("aut",
                                    OrderBy.Desc)],
                                    3)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "group",
                                    "atque explicabo deleniti",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("vero aut et",
                                    "56082694-30e8-e002-a383-38c451b65f28",
                                    () => { Console.WriteLine("enim"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "occaecati")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([802.2817,
                                        386.6296,
                                        494.3761,
                                        326.9171]),
                                    new MapPoint([95.1474,
                                        683.9188,
                                        285.7452])]),
                                    new MapPath([new MapPoint([208.3684,
                                            961.2671]),
                                        new MapPoint([780.4610,
                                            229.2963,
                                            678.0814])])],
                                new SpatialReference(5,
                                        "sapiente",
                                        "consectetur",
                                        "voluptatum"),
                                new Point(144.8222,
                                        -81.4206,
                                        -97.5082,
                                        -88.4232,
                                        875.7178,
                                    new SpatialReference(5,
                                            "suscipit",
                                            "voluptatem",
                                            "delectus"),
                                        true,
                                        true,
                                        550.2823),
                                    true,
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("comment")"
                                IsSlice="@(true)"
                                VariableName="@("phone")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("name")"
                            IsSlice="@(true)"
                            VariableName="@("avatar")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(150.5540,
                        40.9840,
                        -33.4265,
                        -29.1797,
                        750.1181,
                    new SpatialReference(6,
                            "sunt",
                            "maxime",
                            "fugiat"),
                        true,
                        true,
                        236.1852),
                new MosaicRule(true,
                    new RasterFunction("libero",
                            "token",
                        OutputPixelType.F32,
                            "molestiae",
                            "updatedAt"),
                        [8,
                            9,
                            8,
                            1],
                    Method.Attribute,
                    [new DimensionalDefinition("phone",
                            true,
                            "group"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "name"),
                    new DimensionalDefinition("category",
                            true,
                            "status")],
                        [4,
                            1],
                    Operation.Min,
                        "incidunt",
                        "beatae",
                    new Point(-133.8288,
                            63.0926,
                            50.5075,
                            -7.2451,
                            52.8488,
                        new SpatialReference(1,
                                "quia",
                                "eos",
                                "ut"),
                            true,
                            true,
                            382.5498),
                        "Age > 21"),
                new PixelSize(-32.2229,
                        -68.4502,
                    new PixelSizeSpatialReference(3,
                            644.1891)),
                new RasterFunction("eligendi",
                        "category",
                    OutputPixelType.S8,
                        "natus",
                        "comment"),
                new TimeExtent(new DateTime(2017, 4, 14, 20, 13, 25),
                        new DateTime(2008, 5, 20, 17, 12, 38))),
                "est");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["voluptas",
                    "autem",
                    "labore",
                    "et"],
                    ["createdAt",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(60.0411,
                    143.5484,
                    54.7813,
                    -29.2677,
                    689.5332,
                    931.0791,
                    788.1564,
                    826.4558,
                new SpatialReference(2,
                        "ut",
                        "dolorem",
                        "blanditiis"),
                    true,
                    true),
                6,
                5,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(794.8198,
                357.3005,
                572.1483,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-156.0382,
                    4.0432,
                    35.1112,
                    -2.2317,
                    721.0676,
                new SpatialReference(8,
                        "officiis",
                        "odio",
                        "tempora"),
                    true,
                    true,
                    949.5481),
            new RasterIdentifyOptions([new DimensionalDefinition("title",
                        true,
                        "createdAt"),
                new DimensionalDefinition("phone",
                        true,
                        "password")],
                    "email"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Private,
                    "qui",
                    "quidem",
                    987.5636,
                    ["ad",
                        "temporibus",
                        "quibusdam"],
                    new DateTime(2017, 8, 5, 5, 32, 18),
                    "voluptates",
                    "voluptatem deserunt exercitationem pariatur",
                new Extent(-97.7189,
                        103.6488,
                        43.4247,
                        33.2680,
                        229.9146,
                        63.8237,
                        97.8033,
                        510.2133,
                    new SpatialReference(8,
                            "dolorum",
                            "et",
                            "aut"),
                        true,
                        true),
                    ["quisquam",
                        "dicta"],
                    "eius",
                    new DateTime(2010, 8, 24, 2, 23, 53),
                    "status",
                    56.5888),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2018, 5, 19, 1, 41, 16),
                        "hic",
                        "occaecati ut laudantium"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "nulla",
                    "quis",
                    532.4402,
                    ["fugiat",
                        "dolores",
                        "magni",
                        "eum"],
                    new DateTime(2016, 11, 27, 14, 51, 13),
                    "incidunt",
                    "nihil voluptatem cum aut optio architecto quas",
                new Extent(67.4850,
                        137.5077,
                        -5.4429,
                        45.7887,
                        166.0021,
                        642.9356,
                        26.6386,
                        887.7087,
                    new SpatialReference(5,
                            "repudiandae",
                            "ad",
                            "et"),
                        true,
                        true),
                    ["at",
                        "exercitationem",
                        "atque"],
                    "et",
                    new DateTime(2000, 10, 16, 6, 13, 41),
                    "password",
                    359.4873);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Lighten;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("avatar",
                    true,
                    "token"),
            new DimensionalDefinition("phone",
                    true,
                    "id")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([747.5359,
                            123.2195]),
                        new MapPoint([776.3261,
                            923.4103]),
                        new MapPoint([308.8130,
                            745.9285,
                            911.1156,
                            699.2505]),
                        new MapPoint([306.3478,
                            482.6939])]),
                        new MapPath([new MapPoint([795.2490,
                                231.5864]),
                            new MapPoint([851.1480,
                                630.7814,
                                44.7850,
                                5.0874]),
                            new MapPoint([284.4066,
                                571.6004,
                                321.5960]),
                            new MapPoint([675.3029,
                                420.7801,
                                0.8275,
                                852.7794])]),
                        new MapPath([new MapPoint([275.6844,
                                918.0905]),
                            new MapPoint([170.2627,
                                318.7371])])],
                    new SpatialReference(1,
                            "sint",
                            "dicta",
                            "harum"),
                    new Point(-123.5934,
                            -56.6528,
                            -164.2457,
                            82.4100,
                            452.5817,
                        new SpatialReference(2,
                                "ea",
                                "minima",
                                "qui"),
                            true,
                            true,
                            853.5523),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("createdAt",
                        true,
                        "id"),
                new DimensionalDefinition("name",
                        true,
                        "category")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("voluptas amet harum",
                    "iusto",
                    ["quibusdam",
                        "sed",
                        "iste"],
                [new FieldInfo("email",
                        "qui",
                        "odit",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("createdAt",
                        "rerum",
                        "vel",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("id",
                        "consequatur",
                        "optio",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Sum)],
                [new MediaPopupContent("accusamus omnis velit",
                        "doloremque voluptatem quidem ea ut",
                    [new ColumnChartMediaInfo("molestiae molestias iste",
                            "quae",
                            "vel deleniti et",
                        new ChartMediaInfoValue(["tenetur",
                                "exercitationem",
                                "quos"],
                                "totam",
                                "dolorum",
                            [new ChartMediaInfoValueSeries("phone",
                                    "ipsum",
                                    799.8374)],
                            [new MapColor(46, 62, 3)])),
                    new LineChartMediaInfo("velit ea iusto",
                            "at",
                            "facere iure nesciunt",
                        new ChartMediaInfoValue(["reprehenderit",
                                "explicabo"],
                                "vero",
                                "corporis",
                            [new ChartMediaInfoValueSeries("status",
                                    "eligendi",
                                    52.1902),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "voluptas",
                                    868.5980),
                            new ChartMediaInfoValueSeries("id",
                                    "est",
                                    197.2825)],
                            [new MapColor(211, 225, 138),
                            new MapColor(232, 182, 101)])),
                    new BarChartMediaInfo("provident ut nihil",
                            "et",
                            "fugit doloribus dolor",
                        new ChartMediaInfoValue(["occaecati",
                                "delectus",
                                "consequatur"],
                                "itaque",
                                "magni",
                            [new ChartMediaInfoValueSeries("name",
                                    "debitis",
                                    514.9545),
                            new ChartMediaInfoValueSeries("status",
                                    "error",
                                    410.0520),
                            new ChartMediaInfoValueSeries("name",
                                    "vero",
                                    230.1567),
                            new ChartMediaInfoValueSeries("title",
                                    "totam",
                                    185.3576)],
                            [new MapColor(235, 168, 87)])),
                    new PieChartMediaInfo("quis ratione in",
                            "error",
                            "et ut voluptatibus",
                        new ChartMediaInfoValue(["dolor",
                                "sapiente",
                                "illum",
                                "est"],
                                "nesciunt",
                                "ipsa",
                            [new ChartMediaInfoValueSeries("updatedAt",
                                    "ut",
                                    745.8600),
                            new ChartMediaInfoValueSeries("title",
                                    "officiis",
                                    914.6942),
                            new ChartMediaInfoValueSeries("phone",
                                    "enim",
                                    187.7900),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "veritatis",
                                    204.5644)],
                            [new MapColor(170, 127, 104),
                            new MapColor(179, 90, 70),
                            new MapColor(176, 97, 201)]))],
                        4),
                new RelationshipPopupContent("asperiores aut voluptatem",
                        "et ut distinctio pariatur in itaque pariatur",
                        1,
                        "pariatur",
                    [new RelatedRecordsInfoFieldOrder("quibusdam",
                        OrderBy.Desc)],
                        8),
                new RelationshipPopupContent("enim consectetur autem",
                        "consequuntur vero molestias dicta aliquid repudiandae suscipit",
                        6,
                        "eos",
                    [new RelatedRecordsInfoFieldOrder("fuga",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("eveniet",
                        OrderBy.Desc)],
                        2),
                new AttachmentsPopupContent("laborum sapiente debitis",
                        "libero accusamus esse molestiae et",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("return $feature.Name;",
                        "avatar",
                        "expedita exercitationem dignissimos",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "phone",
                        "ea voluptatibus sint",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "status",
                        "iusto voluptas voluptatem",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "title",
                        "laboriosam magnam perferendis",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("delectus saepe ut",
                        "https://picsum.photos/640/480/?image=189",
                        "91ef9d70-99f8-5db9-bc69-66777d4c5470",
                        () => { Console.WriteLine("maxime"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "ut"),
                new ActionToggle("a in quo",
                        "8b9d4375-66ac-5cb8-efec-cea0f3b58302",
                        () => { Console.WriteLine("dolor"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "animi"),
                new ActionButton("sint minima magni",
                        "https://picsum.photos/640/480/?image=427",
                        "389617bc-a702-56b0-53bc-bc35514b3041",
                        () => { Console.WriteLine("exercitationem"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "quia")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-160.8451,
                    75.2896,
                    -79.1580,
                    50.0013,
                    422.0356,
                    40.8439,
                    717.3614,
                    293.9778,
                new SpatialReference(7,
                        "pariatur",
                        "quo",
                        "ipsa"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("culpa",
                    "updatedAt",
                OutputPixelType.C64,
                    "quia",
                    "category");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(976.4977,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(2,
                        "et",
                        2.4973,
                        40721662.5786),
                new LOD(6,
                        "quo",
                        43.5196,
                        31870204.2669),
                new LOD(4,
                        "quia",
                        79.3218,
                        16831434.5003)],
                new Point(-48.3817,
                        -41.9576,
                        -169.4135,
                        26.9761,
                        508.5221,
                    new SpatialReference(2,
                            "praesentium",
                            "aut",
                            "neque"),
                        true,
                        true,
                        474.3340),
                    [6,
                        6],
                new SpatialReference(3,
                        "rerum",
                        "officiis",
                        "cupiditate"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2012, 6, 13, 8, 46, 9),
                    new DateTime(2016, 11, 7, 2, 0, 51));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("autem",
                    "beatae",
                new TimeExtent(new DateTime(2004, 7, 1, 4, 5, 24),
                        new DateTime(2011, 9, 23, 4, 14, 1)),
                new TimeInterval(TemporalTime.Minutes,
                        919.3128),
                    [new DateTime(2015, 10, 13, 3, 34, 41),
                        new DateTime(2004, 2, 27, 22, 52, 41)],
                    "Asia/Krasnoyarsk",
                    "dolorem");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    372.3120);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 7, 25, 14, 55, 4),
                    new DateTime(2015, 4, 6, 3, 23, 57));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
