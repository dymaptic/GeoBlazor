@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(94, 199, 218),
                                new MapColor(166, 123, 32)),
                            true,
                            true,
                            [4,
                            4,
                            8],
                            2,
                            9,
                            StretchType.None,
                            [new RasterBandStatistics(613.8103,
                                9,
                                9.1021,
                                872.5996,
                                756.1364,
                                495.3867,
                                130.2596,
                                19.3572),
                            new RasterBandStatistics(175.4407,
                                7,
                                873.3216,
                                849.3494,
                                997.6598,
                                699.2791,
                                684.3020,
                                585.2213),
                            new RasterBandStatistics(450.8236,
                                9,
                                859.5314,
                                924.0573,
                                508.6253,
                                638.4777,
                                748.9838,
                                169.0026)],
                            true,
                            1))"
                        BandIds="@([5,
                            4,
                            5])"
                        BlendMode="@(BlendMode.Normal)"
                        Copyright="@("quibusdam")"
                        Effect="@(new Effect("quis",
                            45564458.8780))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(20665173.6065)"
                        MinScale="@(9363.9665)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.9845)"
                        Title="@("hic eaque numquam")"
                        FullExtent="@(new Extent(-60.7404,
                                -41.1812,
                                -85.9423,
                                -84.8726,
                                905.3917,
                                593.8446,
                                645.7883,
                                702.3625,
                            new SpatialReference(3,
                                    "ipsa",
                                    "dolores",
                                    "odio"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(328.6210)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("numquam")"
                            EndField="@("quos")"
                            Stops="@([new DateTime(2015, 4, 8, 22, 22, 26),
                                new DateTime(2005, 5, 9, 3, 35, 7),
                                new DateTime(2019, 8, 17, 2, 49, 18)])"
                            TimeZone="@("Europe/Stockholm")"
                            TrackIdField="@("voluptates")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(24.7786)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2004, 1, 19, 18, 44, 9))"
                                End="@(new DateTime(2020, 3, 8, 21, 36, 53))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2000, 8, 9, 1, 56, 53))"
                            End="@(new DateTime(2004, 11, 19, 7, 45, 32))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(471.2428)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "et",
                                    21.6993,
                                    25554056.3095),
                            new LOD(1,
                                    "eius",
                                    51.7840,
                                    19173884.1454),
                            new LOD(2,
                                    "ducimus",
                                    14.4522,
                                    24241091.4783)])"
                            Origin="@(new Point(171.7044,
                                    24.7508,
                                    -138.1424,
                                    52.0491,
                                    161.0273,
                                new SpatialReference(9,
                                        "ea",
                                        "voluptatum",
                                        "enim"),
                                    true,
                                    true,
                                    375.1102))"
                            Size="@([2,
                                1,
                                4])"
                            SpatialReference="@(new SpatialReference(4,
                                    "repellendus",
                                    "atque",
                                    "molestiae"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("nulla")"
                            FunctionName="@("updatedAt")"
                            OutputPixelType="@(OutputPixelType.S16)"
                            RasterFunctionDefinition="@("deserunt")"
                            VariableName="@("title")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("eos qui quas")"
                            StringContent="@("rerum")"
                            OutFields="@(["sequi",
                                "et",
                                "aut"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "impedit",
                                    "laudantium",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("comment",
                                    "distinctio",
                                    "cupiditate",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("id",
                                    "quaerat",
                                    "placeat",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("token",
                                    "qui",
                                    "perspiciatis",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new AttachmentsPopupContent("sit odio et",
                                    "fuga consequuntur quo et similique dicta quibusdam",
                                    AttachmentsPopupContentDisplayType.Auto),
                            new TextPopupContent("dolor blanditiis delectus"),
                            new TextPopupContent("quaerat atque et")])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "updatedAt",
                                    "consequatur provident earum",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("quam tempora ut",
                                    "https://picsum.photos/640/480/?image=739",
                                    "75fa9702-7848-9c22-68d9-b3cfddcbbd56",
                                    () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                    "phone",
                                    true,
                                    true,
                                    true,
                                    "ab"),
                            new ActionToggle("in error id",
                                    "012dafec-7bef-d79e-947b-401bab9ebbb3",
                                    () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "comment",
                                    "laboriosam")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([226.8925,
                                        901.8947]),
                                    new MapPoint([374.2570,
                                        657.1132]),
                                    new MapPoint([896.2347,
                                        376.7551]),
                                    new MapPoint([244.1927,
                                        917.3119,
                                        811.9154,
                                        559.9951])]),
                                    new MapPath([new MapPoint([441.3976,
                                            608.0910,
                                            18.2832,
                                            69.0522]),
                                        new MapPoint([751.9528,
                                            578.9420]),
                                        new MapPoint([658.3491,
                                            146.8746,
                                            695.2525,
                                            158.0154])])],
                                new SpatialReference(7,
                                        "necessitatibus",
                                        "repellendus",
                                        "aut"),
                                new Point(71.1654,
                                        -30.0120,
                                        -49.2529,
                                        -84.9907,
                                        390.8855,
                                    new SpatialReference(4,
                                            "provident",
                                            "ea",
                                            "aliquam"),
                                        true,
                                        true,
                                        160.8481),
                                    true,
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("group")"
                                IsSlice="@(true)"
                                VariableName="@("phone")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("phone")"
                            IsSlice="@(true)"
                            VariableName="@("avatar")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(-58.1886,
                        28.5951,
                        -109.5270,
                        -17.9404,
                        273.5660,
                    new SpatialReference(6,
                            "dolores",
                            "odit",
                            "nisi"),
                        true,
                        true,
                        345.8900),
                new MosaicRule(true,
                    new RasterFunction("qui",
                            "group",
                        OutputPixelType.U8,
                            "voluptates",
                            "name"),
                        [3,
                            3,
                            3,
                            5],
                    Method.Center,
                    [new DimensionalDefinition("comment",
                            true,
                            "avatar"),
                    new DimensionalDefinition("id",
                            true,
                            "comment"),
                    new DimensionalDefinition("email",
                            true,
                            "id"),
                    new DimensionalDefinition("token",
                            true,
                            "comment")],
                        [7,
                            3,
                            8,
                            4],
                    Operation.Mean,
                        "magnam",
                        "ut",
                    new Point(-132.3674,
                            89.0485,
                            128.5158,
                            16.3842,
                            141.3699,
                        new SpatialReference(2,
                                "reiciendis",
                                "qui",
                                "voluptatem"),
                            true,
                            true,
                            428.5469),
                        "Country = 'Canada'"),
                new PixelSize(-173.5755,
                        42.8385,
                    new PixelSizeSpatialReference(4,
                            80.0150)),
                new RasterFunction("consectetur",
                        "phone",
                    OutputPixelType.U32,
                        "reiciendis",
                        "token"),
                new TimeExtent(new DateTime(2012, 9, 1, 21, 33, 2),
                        new DateTime(2013, 3, 11, 5, 20, 46))),
                "dolores");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["numquam",
                    "voluptas"],
                    ["name",
                        "group"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-26.6992,
                    25.8248,
                    -65.8450,
                    82.4378,
                    142.3374,
                    523.5311,
                    366.8087,
                    736.4451,
                new SpatialReference(7,
                        "vel",
                        "consequatur",
                        "eaque"),
                    true,
                    true),
                7,
                2,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Nearest));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(659.0085,
                822.2263,
                791.7139,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(179.3631,
                    -40.8597,
                    -108.7344,
                    30.2826,
                    479.2540,
                new SpatialReference(6,
                        "dolor",
                        "delectus",
                        "harum"),
                    true,
                    true,
                    59.1580),
            new RasterIdentifyOptions([new DimensionalDefinition("comment",
                        true,
                        "status"),
                new DimensionalDefinition("phone",
                        true,
                        "name"),
                new DimensionalDefinition("comment",
                        true,
                        "category"),
                new DimensionalDefinition("title",
                        true,
                        "id")],
                    "email"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2011, 5, 21, 22, 41, 36),
                        "numquam",
                        "iure iure eaque"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Lighten;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("category",
                    true,
                    "email"),
            new DimensionalDefinition("password",
                    true,
                    "avatar"),
            new DimensionalDefinition("group",
                    true,
                    "email")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Point(-80.0339,
                        80.3873,
                        150.5096,
                        -48.1103,
                        785.4415,
                    new SpatialReference(3,
                            "praesentium",
                            "dolores",
                            "facere"),
                        true,
                        true,
                        790.7029),
                [new DimensionalDefinition("title",
                        true,
                        "phone"),
                new DimensionalDefinition("email",
                        true,
                        "createdAt"),
                new DimensionalDefinition("name",
                        true,
                        "title"),
                new DimensionalDefinition("email",
                        true,
                        "avatar")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("numquam inventore ut",
                    "consequatur",
                    ["harum",
                        "ut"],
                [new FieldInfo("category",
                        "molestias",
                        "sit",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.DayShortMonthYearLongTime),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("phone",
                        "qui",
                        "neque",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateShortTime24),
                        true,
                        true,
                    StatisticType.Count)],
                [new TextPopupContent("eius delectus fuga"),
                new RelationshipPopupContent("voluptas dicta minima",
                        "quam error voluptate accusamus",
                        3,
                        "voluptas",
                    [new RelatedRecordsInfoFieldOrder("modi",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("quaerat",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("atque",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("voluptatum",
                        OrderBy.Desc)],
                        5),
                new RelationshipPopupContent("consectetur minima ea",
                        "consequatur possimus consequatur est autem",
                        3,
                        "dolorem",
                    [new RelatedRecordsInfoFieldOrder("fugit",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("qui",
                        OrderBy.Asc)],
                        4)],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "phone",
                        "eos ipsam a",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("qui autem sapiente",
                        "dfb8e477-4cfd-4f6e-dc7b-80a966f94626",
                        () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "eum"),
                new ActionButton("optio sunt dignissimos",
                        "https://picsum.photos/640/480/?image=431",
                        "b2e204c7-7b31-1aee-2ba2-5e43671c6201",
                        () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                        "category",
                        true,
                        true,
                        true,
                        "omnis"),
                new ActionButton("nam sapiente eos",
                        "https://picsum.photos/640/480/?image=158",
                        "5768993d-555d-19f0-7087-d86b3f822a64",
                        () => { Console.WriteLine("numquam"); return Task.CompletedTask; },
                        "name",
                        true,
                        true,
                        true,
                        "ut"),
                new ActionToggle("omnis pariatur id",
                        "1c2b069c-d535-3e16-02de-9f6f934ee935",
                        () => { Console.WriteLine("est"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "id",
                        "quos")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(44.9956,
                    -128.0973,
                    10.2829,
                    63.1068,
                    382.6498,
                    7.8686,
                    530.6119,
                    671.1006,
                new SpatialReference(8,
                        "et",
                        "laboriosam",
                        "veniam"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("dolorem",
                    "category",
                OutputPixelType.S16,
                    "sed",
                    "category");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(191.2935,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(2,
                        "quasi",
                        34.5377,
                        19558911.7520),
                new LOD(2,
                        "quia",
                        40.3269,
                        43233598.8967),
                new LOD(9,
                        "natus",
                        37.7585,
                        42759076.9763),
                new LOD(1,
                        "culpa",
                        12.9398,
                        46969767.2944)],
                new Point(-60.4185,
                        54.9626,
                        99.7598,
                        -74.2589,
                        336.8763,
                    new SpatialReference(1,
                            "veniam",
                            "ipsam",
                            "ipsum"),
                        true,
                        true,
                        298.2102),
                    [6,
                        2],
                new SpatialReference(3,
                        "voluptatem",
                        "ratione",
                        "atque"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2022, 11, 11, 15, 25, 44),
                    new DateTime(2017, 1, 17, 0, 21, 51));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aut",
                    "error",
                new TimeExtent(new DateTime(2005, 8, 7, 9, 36, 34),
                        new DateTime(2020, 8, 8, 4, 25, 19)),
                new TimeInterval(TemporalTime.Minutes,
                        765.1032),
                    [new DateTime(2016, 10, 21, 6, 22, 23),
                        new DateTime(2018, 5, 21, 1, 25, 27),
                        new DateTime(2023, 2, 11, 19, 39, 53)],
                    "Europe/Moscow",
                    "et");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    364.4699);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 11, 8, 18, 20, 18),
                    new DateTime(2012, 9, 2, 18, 20, 49));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
