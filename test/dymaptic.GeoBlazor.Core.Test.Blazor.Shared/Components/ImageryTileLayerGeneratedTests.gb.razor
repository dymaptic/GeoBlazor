@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(97, 205, 230),
                                new MapColor(248, 3, 26)),
                            true,
                            true,
                            [7,
                            9,
                            8],
                            2,
                            8,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(517.5715,
                                6,
                                861.9875,
                                98.5965,
                                190.4330,
                                623.1157,
                                113.0988,
                                634.5415),
                            new RasterBandStatistics(787.8215,
                                5,
                                192.3560,
                                670.2708,
                                377.0802,
                                505.4302,
                                936.6776,
                                448.0665)],
                            true,
                            6))"
                        BandIds="@([4,
                            6,
                            4,
                            6])"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Copyright="@("rerum")"
                        Effect="@(new Effect("qui",
                            5711512.8306))"
                        Interpolation="@(PixelInterpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(35801287.9174)"
                        MinScale="@(35668.1146)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.8394)"
                        Title="@("illum adipisci eligendi")"
                        FullExtent="@(new Extent(-36.5159,
                                -39.4802,
                                -20.4227,
                                58.8521,
                                477.9827,
                                333.3359,
                                699.6967,
                                401.1190,
                            new SpatialReference(8,
                                    "omnis",
                                    "excepturi",
                                    "laboriosam"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(331.4369)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("dolore")"
                            EndField="@("omnis")"
                            Stops="@([new DateTime(2007, 10, 8, 9, 33, 49),
                                new DateTime(2011, 2, 18, 17, 53, 56)])"
                            TimeZone="@("Australia/Adelaide")"
                            TrackIdField="@("quo")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(342.9817)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2005, 4, 21, 0, 32, 44))"
                                End="@(new DateTime(2023, 5, 19, 22, 52, 37))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2021, 5, 16, 3, 27, 18))"
                            End="@(new DateTime(2016, 6, 4, 19, 36, 35))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(751.9573)"
                            Format="@(TileInfoFormat.Emf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "et",
                                    7.6156,
                                    20899482.7179),
                            new LOD(3,
                                    "doloribus",
                                    9.5787,
                                    38371887.9647),
                            new LOD(3,
                                    "enim",
                                    42.4096,
                                    6412997.8314),
                            new LOD(1,
                                    "soluta",
                                    24.1863,
                                    47718922.1204)])"
                            Origin="@(new Point(-44.3792,
                                    -21.8611,
                                    151.0009,
                                    31.5661,
                                    637.2491,
                                new SpatialReference(2,
                                        "temporibus",
                                        "dolore",
                                        "alias"),
                                    true,
                                    true,
                                    386.5049))"
                            Size="@([6,
                                6,
                                3])"
                            SpatialReference="@(new SpatialReference(5,
                                    "quod",
                                    "sunt",
                                    "enim"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("voluptatem")"
                            FunctionName="@("email")"
                            OutputPixelType="@(OutputPixelType.S32)"
                            RasterFunctionDefinition="@("consequatur")"
                            VariableName="@("category")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("modi")"
                            ApiKey="@("facere")"
                            AvgRating="@(478.3316)"
                            Categories="@(["et",
                                "quae"])"
                            Created="@(new DateTime(2018, 7, 24, 20, 16, 13))"
                            Culture="@("iure")"
                            Description="@("voluptas in ex officia dignissimos voluptatem tenetur")"
                            Extent="@(new Extent(-166.2385,
                                    -43.5467,
                                    -6.0475,
                                    66.6834,
                                    788.2727,
                                    717.5737,
                                    194.2043,
                                    882.2145,
                                new SpatialReference(4,
                                        "et",
                                        "quis",
                                        "quod"),
                                    true,
                                    true))"
                            GroupCategories="@(["reprehenderit",
                                "aperiam",
                                "perspiciatis"])"
                            LicenseInfo="@("blanditiis")"
                            Modified="@(new DateTime(2015, 11, 11, 4, 35, 46))"
                            Name="@("title")"
                            NumComments="@(178.9818)"
                            NumRatings="@(385.4368)"
                            NumViews="@(775.5983)"
                            Owner="@("Polly Beer")"
                            OwnerFolder="@("Cleta Cummerata")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["labore",
                                        "omnis"],
                                    "dolorem",
                                    "vero",
                                    "ducimus",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("enim")"
                            Screenshots="@(["cumque",
                                "rem"])"
                            Size="@(6)"
                            Snippet="@("dignissimos")"
                            Tags="@(["ipsam",
                                "quidem"])"
                            Title="@("ipsa quasi in")"
                            TypeKeywords="@(["nobis",
                                "ea",
                                "et",
                                "ut"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("sit voluptas voluptatum")"
                            StringContent="@("error")"
                            OutFields="@(["commodi",
                                "eum",
                                "esse"])"
                            FieldInfos="@([new FieldInfo("group",
                                    "quam",
                                    "suscipit",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("group",
                                        "quaerat",
                                        "error",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.ShortDateLe),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("title",
                                        "aspernatur",
                                        "nisi",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.ShortDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                    "tenetur quas modi est voluptatem",
                                    "aut qui eos"),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                        "cumque",
                                        "labore doloribus ab")),
                            new MediaPopupContent("maxime vitae harum",
                                    "ullam illo soluta omnis",
                                [new ImageMediaInfo("quia repellendus tenetur",
                                        "molestiae",
                                        "adipisci ea a",
                                    new ImageMediaInfoValue("https://harley.name",
                                            "http://andrew.org"),
                                        215.3578),
                                new LineChartMediaInfo("eaque rerum labore",
                                        "esse",
                                        "deleniti molestias corrupti",
                                    new ChartMediaInfoValue(["blanditiis",
                                            "facere",
                                            "ad",
                                            "vitae"],
                                            "reiciendis",
                                            "omnis",
                                        [new ChartMediaInfoValueSeries("name",
                                                "nostrum",
                                                973.3310),
                                        new ChartMediaInfoValueSeries("id",
                                                "ex",
                                                802.8497),
                                        new ChartMediaInfoValueSeries("password",
                                                "porro",
                                                512.9529)],
                                        [new MapColor(143, 23, 110),
                                        new MapColor(130, 251, 72)])),
                                new LineChartMediaInfo("voluptas quo velit",
                                        "dicta",
                                        "dolorem eaque neque",
                                    new ChartMediaInfoValue(["eos",
                                            "non",
                                            "illum",
                                            "atque"],
                                            "reprehenderit",
                                            "vel",
                                        [new ChartMediaInfoValueSeries("password",
                                                "aut",
                                                111.3679),
                                        new ChartMediaInfoValueSeries("name",
                                                "est",
                                                459.0756)],
                                        [new MapColor(218, 31, 59),
                                        new MapColor(65, 210, 101),
                                        new MapColor(165, 174, 174)]))],
                                    3)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "comment",
                                    "eum et in",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("tenetur quia qui",
                                    "https://picsum.photos/640/480/?image=240",
                                    "a97ddba9-5572-377e-1c1c-a6b75f0e5c4e",
                                    () => { Console.WriteLine("animi"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "temporibus"),
                            new ActionToggle("et amet eos",
                                    "ec70222f-7009-252b-08b7-ec67b8b6d17a",
                                    () => { Console.WriteLine("necessitatibus"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "category",
                                    "quis"),
                            new ActionButton("impedit sequi fuga",
                                    "https://picsum.photos/640/480/?image=564",
                                    "903e81fb-82dd-d34b-06c8-f51bdf4e97f2",
                                    () => { Console.WriteLine("neque"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "quo"),
                            new ActionButton("quasi accusantium et",
                                    "https://picsum.photos/640/480/?image=543",
                                    "c612bbf1-68b7-af6f-b0d7-9faa14934810",
                                    () => { Console.WriteLine("rem"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "dolore")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([447.4761,
                                        667.9626,
                                        120.9449,
                                        510.2569]),
                                    new MapPoint([294.1768,
                                        173.6110,
                                        811.5523]),
                                    new MapPoint([754.8221,
                                        63.6682]),
                                    new MapPoint([869.8890,
                                        802.6414,
                                        282.9739,
                                        32.0185])]),
                                    new MapPath([new MapPoint([730.9670,
                                            569.0589]),
                                        new MapPoint([178.5027,
                                            482.4156])]),
                                    new MapPath([new MapPoint([713.7961,
                                            181.8235]),
                                        new MapPoint([41.0117,
                                            718.1751,
                                            241.0853,
                                            282.7424])])],
                                new SpatialReference(6,
                                        "aspernatur",
                                        "eius",
                                        "occaecati"),
                                new Point(84.5139,
                                        1.2533,
                                        126.2040,
                                        49.3699,
                                        245.4989,
                                    new SpatialReference(2,
                                            "temporibus",
                                            "distinctio",
                                            "nemo"),
                                        true,
                                        true,
                                        998.8207),
                                    true,
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("phone")"
                                IsSlice="@(true)"
                                VariableName="@("password")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("comment")"
                            IsSlice="@(true)"
                            VariableName="@("group")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(-47.9683,
                        110.7644,
                        -24.3083,
                        -20.5481,
                        538.2361,
                        773.8511,
                        853.1421,
                        410.3789,
                    new SpatialReference(8,
                            "esse",
                            "eum",
                            "quam"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("enim",
                            "id",
                        OutputPixelType.U8,
                            "adipisci",
                            "id"),
                        [8,
                            9,
                            1],
                    Method.Nadir,
                    [new DimensionalDefinition("updatedAt",
                            true,
                            "comment")],
                        [2,
                            8,
                            4],
                    Operation.Blend,
                        "voluptatem",
                        "a",
                    new Point(24.9440,
                            75.0847,
                            -114.9427,
                            -58.1979,
                            239.1370,
                        new SpatialReference(6,
                                "omnis",
                                "odit",
                                "omnis"),
                            true,
                            true,
                            916.9885),
                        "1 = 1"),
                new PixelSize(-58.8256,
                        -40.1795,
                    new PixelSizeSpatialReference(4,
                            630.9292)),
                new RasterFunction("quis",
                        "id",
                    OutputPixelType.S8,
                        "sunt",
                        "id"),
                new TimeExtent(new DateTime(2010, 1, 6, 10, 5, 12),
                        new DateTime(2008, 6, 9, 3, 27, 34))),
                "est");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quibusdam",
                    "distinctio",
                    "et"],
                    ["title",
                        "phone",
                        "phone"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(168.3578,
                    132.2679,
                    -64.7483,
                    28.8397,
                    386.3066,
                    6.8629,
                    675.6828,
                    379.3433,
                new SpatialReference(3,
                        "doloremque",
                        "fuga",
                        "eveniet"),
                    true,
                    true),
                4,
                8,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Bilinear));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(811.7787,
                906.7326,
                371.5844,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-153.3602,
                    -7.0302,
                    -70.0024,
                    21.0958,
                    316.0751,
                new SpatialReference(5,
                        "sequi",
                        "cumque",
                        "dolorem"),
                    true,
                    true,
                    362.1888),
            new RasterIdentifyOptions([new DimensionalDefinition("id",
                        true,
                        "email")],
                    "updatedAt"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "rerum",
                    "quam",
                    266.1276,
                    ["qui",
                        "dolor",
                        "quam",
                        "fugit"],
                    new DateTime(2017, 11, 8, 17, 58, 51),
                    "fugiat",
                    "iusto asperiores qui est similique",
                new Extent(76.6594,
                        42.8509,
                        -85.4585,
                        -17.7458,
                        52.4935,
                        14.0798,
                        701.1197,
                        644.0467,
                    new SpatialReference(6,
                            "non",
                            "vitae",
                            "tenetur"),
                        true,
                        true),
                    ["aspernatur",
                        "hic",
                        "voluptatibus"],
                    "maiores",
                    new DateTime(2018, 6, 17, 4, 58, 26),
                    "id",
                    808.9509),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2010, 11, 16, 1, 0, 3),
                        "ea",
                        "id et et"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "voluptatibus",
                    "porro",
                    504.9387,
                    ["qui",
                        "placeat"],
                    new DateTime(2008, 7, 14, 4, 18, 6),
                    "reiciendis",
                    "in iste vel quia voluptates eos nam",
                new Extent(-79.3654,
                        -150.7860,
                        9.5330,
                        -79.3542,
                        24.6143,
                        690.0820,
                        411.1408,
                        832.3168,
                    new SpatialReference(3,
                            "sit",
                            "quasi",
                            "quos"),
                        true,
                        true),
                    ["et",
                        "eaque",
                        "repellendus",
                        "dolorum"],
                    "fugiat",
                    new DateTime(2011, 6, 27, 10, 23, 31),
                    "token",
                    6.8355);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Color;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("email",
                    true,
                    "name")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Point(29.9123,
                        81.0243,
                        -108.1956,
                        -86.0708,
                        390.1417,
                    new SpatialReference(4,
                            "voluptatem",
                            "qui",
                            "modi"),
                        true,
                        true,
                        167.4953),
                [new DimensionalDefinition("avatar",
                        true,
                        "group"),
                new DimensionalDefinition("email",
                        true,
                        "token")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("occaecati nam corporis",
                    "velit",
                    ["illum",
                        "ut",
                        "reiciendis",
                        "exercitationem"],
                [new FieldInfo("title",
                        "praesentium",
                        "accusamus",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDateLongTime24),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("email",
                        "blanditiis",
                        "ea",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("avatar",
                        "velit",
                        "omnis",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("email",
                        "quae",
                        "quia",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new FieldsPopupContent([new FieldInfo("name",
                            "nisi",
                            "amet",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.LongMonthYear),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("avatar",
                            "assumenda",
                            "delectus",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongDateLongTime24),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("phone",
                            "deleniti",
                            "deleniti",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.LongMonthDayYearLongTime24),
                            true,
                            true,
                        StatisticType.Min),
                    new FieldInfo("updatedAt",
                            "consequatur",
                            "accusantium",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.LongDateShortTime),
                            true,
                            true,
                        StatisticType.Max)],
                        "enim et delectus animi et incidunt",
                        "esse adipisci a"),
                new TextPopupContent("placeat iure facilis")],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "phone",
                        "velit temporibus numquam",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "avatar",
                        "autem optio quaerat",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "createdAt",
                        "sequi ut itaque",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("et consequatur veritatis",
                        "https://picsum.photos/640/480/?image=166",
                        "90f2e570-800c-5feb-d7eb-058b2737681d",
                        () => { Console.WriteLine("pariatur"); return Task.CompletedTask; },
                        "name",
                        true,
                        true,
                        true,
                        "quasi")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-121.2595,
                    -48.9811,
                    -22.0944,
                    41.6196,
                    403.7819,
                    35.8568,
                    683.4905,
                    669.0235,
                new SpatialReference(5,
                        "est",
                        "vel",
                        "quis"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("excepturi",
                    "id",
                OutputPixelType.U16,
                    "pariatur",
                    "avatar");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(706.1353,
                    TileInfoFormat.Png,
                    true,
                [new LOD(9,
                        "libero",
                        96.0900,
                        16977539.7363)],
                new Point(82.1708,
                        -48.3342,
                        5.4841,
                        35.9645,
                        993.9021,
                    new SpatialReference(1,
                            "mollitia",
                            "animi",
                            "velit"),
                        true,
                        true,
                        485.8797),
                    [4,
                        4,
                        6],
                new SpatialReference(9,
                        "quam",
                        "libero",
                        "ut"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2014, 2, 20, 7, 23, 48),
                    new DateTime(2005, 7, 26, 6, 47, 38));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("nemo",
                    "ipsum",
                new TimeExtent(new DateTime(2005, 7, 16, 11, 42, 45),
                        new DateTime(2007, 4, 27, 5, 34, 32)),
                new TimeInterval(TemporalTime.Minutes,
                        370.1087),
                    [new DateTime(2010, 11, 18, 21, 33, 57),
                        new DateTime(2003, 10, 26, 21, 14, 33),
                        new DateTime(2000, 5, 14, 17, 44, 41)],
                    "America/Phoenix",
                    "ut");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Months,
                    175.4897);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 3, 18, 7, 25, 10),
                    new DateTime(2006, 2, 3, 11, 23, 8));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
