@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(74, 174, 15),
                                new MapColor(20, 143, 98)),
                            true,
                            true,
                            [6],
                            4,
                            6,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(849.9736,
                                6,
                                723.1944,
                                104.4935,
                                207.6348,
                                484.6980,
                                512.8809,
                                843.2800)],
                            true,
                            9))"
                        BandIds="@([2])"
                        BlendMode="@(BlendMode.DestinationIn)"
                        Copyright="@("ullam")"
                        Effect="@(new Effect("odio",
                            45733564.4786))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(16158414.3406)"
                        MinScale="@(24957.6974)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.1761)"
                        Title="@("fuga itaque accusantium")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Days)"
                            Value="@(664.1691)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("et")"
                            EndField="@("debitis")"
                            Stops="@([new DateTime(2016, 5, 21, 1, 6, 16),
                                new DateTime(2014, 5, 19, 19, 42, 32)])"
                            TimeZone="@("Europe/Ljubljana")"
                            TrackIdField="@("laboriosam")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(115.1414)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2006, 2, 6, 4, 2, 28))"
                                End="@(new DateTime(2001, 6, 7, 14, 20, 47))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2004, 7, 24, 17, 43, 6))"
                            End="@(new DateTime(2003, 4, 16, 15, 53, 24))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(182.2117)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "minima",
                                    63.5421,
                                    4407870.8377),
                            new LOD(8,
                                    "nobis",
                                    91.3923,
                                    43784785.3639)])"
                            Size="@([7,
                                2])"
                            SpatialReference="@(new SpatialReference(6,
                                    "est",
                                    "earum",
                                    "temporibus"))">
                            <Point 
                                Longitude="@(-48.0352)"
                                Latitude="@(-53.8098)"
                                X="@(-76.7319)"
                                Y="@(-86.1574)"
                                Z="@(833.1428)"
                                HasM="@(true)"
                                HasZ="@(true)"
                                M="@(375.7690)">
                                <SpatialReference 
                                    Wkid="@(5)"
                                    ImageCoordinateSystem="@("id")"
                                    Wkt="@("cupiditate")"
                                    Wkt2="@("eligendi")">
                                </SpatialReference>
                            </Point>
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("perspiciatis")"
                            FunctionName="@("token")"
                            OutputPixelType="@(OutputPixelType.C64)"
                            RasterFunctionDefinition="@("sapiente")"
                            VariableName="@("name")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("natus rem ut")"
                            StringContent="@("neque")"
                            OutFields="@(["neque",
                                "eligendi"])"
                            FieldInfos="@([new FieldInfo("comment",
                                    "odio",
                                    "consequuntur",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("title",
                                    "cumque",
                                    "culpa",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new MediaPopupContent("rerum ea explicabo",
                                    "in commodi voluptatem quo",
                                [new PieChartMediaInfo("a iste velit",
                                        "deserunt",
                                        "in nihil error",
                                    new ChartMediaInfoValue(["est"],
                                            "sint",
                                            "id",
                                        [new ChartMediaInfoValueSeries("category",
                                                "dolorem",
                                                424.1478)],
                                        [new MapColor(15, 214, 120)]))],
                                    4)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "id",
                                    "velit est non",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "category",
                                    "sint debitis tempore",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("sit rerum culpa",
                                "https://picsum.photos/640/480/?image=354",
                                "e280aa25-3229-511e-7783-c09495f98e44",
                                () => { Console.WriteLine("dignissimos"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "quia")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(171.5546,
                                    -110.1965,
                                    43.5423,
                                    -56.0443,
                                    528.9594,
                                    633.2601,
                                    582.6684,
                                    127.7537,
                                new SpatialReference(4,
                                        "est",
                                        "placeat",
                                        "voluptatem"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("avatar")"
                                IsSlice="@(true)"
                                VariableName="@("password")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("name")"
                            IsSlice="@(true)"
                            VariableName="@("avatar")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(103.7927)"
                            Xmin="@(88.1543)"
                            Ymax="@(-52.6810)"
                            Ymin="@(33.6317)"
                            Zmax="@(352.7559)"
                            Zmin="@(346.0829)"
                            Mmax="@(72.4890)"
                            Mmin="@(426.6152)"
                            SpatialReference="@(new SpatialReference(3,
                                    "sit",
                                    "facilis",
                                    "saepe"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(147.3491,
                        75.8080,
                        -67.3124,
                        -9.8782,
                        913.4798,
                        663.3652,
                        438.9150,
                        90.1432,
                    new SpatialReference(4,
                            "consectetur",
                            "nihil",
                            "qui"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("pariatur",
                            "name",
                        OutputPixelType.U4,
                            "incidunt",
                            "group"),
                        [1],
                    Method.Northwest,
                    [new DimensionalDefinition("name",
                            true,
                            "id")],
                        [1,
                            1],
                    Operation.First,
                        "velit",
                        "nihil",
                    new Point(139.7563,
                            -88.0555,
                            67.2011,
                            52.6084,
                            94.2319,
                        new SpatialReference(6,
                                "maxime",
                                "minima",
                                "sed"),
                            true,
                            true,
                            160.1074),
                        "City = 'Toronto'"),
                new PixelSize(140.7348,
                        30.2580,
                    new PixelSizeSpatialReference(2,
                            477.9394)),
                new RasterFunction("harum",
                        "name",
                    OutputPixelType.U1,
                        "quae",
                        "email"),
                new TimeExtent(new DateTime(2017, 3, 11, 14, 4, 34),
                        new DateTime(2021, 3, 25, 16, 23, 3))),
                "nesciunt");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["dolores",
                    "nihil"],
                    ["token",
                        "updatedAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(23.0704,
                    148.2464,
                    35.3841,
                    -74.4851,
                    693.6088,
                    573.9352,
                    105.1327,
                    371.7494,
                new SpatialReference(5,
                        "nobis",
                        "sit",
                        "inventore"),
                    true,
                    true),
                9,
                3,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Cubic));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(913.1700,
                33.9727,
                917.3600,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-17.2872,
                    42.4637,
                    8.9875,
                    -54.6957,
                    385.7537,
                new SpatialReference(1,
                        "eaque",
                        "molestiae",
                        "iusto"),
                    true,
                    true,
                    934.2379),
            new RasterIdentifyOptions([new DimensionalDefinition("title",
                        true,
                        "name"),
                new DimensionalDefinition("createdAt",
                        true,
                        "name")],
                    "category"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2019, 10, 22, 7, 19, 47),
                        "omnis",
                        "dolores saepe quia"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Saturation;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("group",
                    true,
                    "id"),
            new DimensionalDefinition("createdAt",
                    true,
                    "comment")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([604.8695])])],
                    new SpatialReference(2,
                            "unde",
                            "quia",
                            "non"),
                        true,
                        true),
                [new DimensionalDefinition("password",
                        true,
                        "name"),
                new DimensionalDefinition("email",
                        true,
                        "createdAt")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        Extent testFullExtent = new Extent(-23.9698,
                    -110.2322,
                    52.0185,
                    78.2492,
                    609.6507,
                    357.8686,
                    566.3129,
                    387.1214,
                new SpatialReference(5,
                        "delectus",
                        "doloribus",
                        "explicabo"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("quia",
                    "phone",
                OutputPixelType.S16,
                    "cum",
                    "category");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(821.9687,
                    TileInfoFormat.Png,
                    true,
                [new LOD(2,
                        "rerum",
                        5.8325,
                        41620829.0012)],
                new Point(131.6758,
                        79.4224,
                        -140.8564,
                        -27.6133,
                        958.9880,
                    new SpatialReference(5,
                            "eos",
                            "esse",
                            "architecto"),
                        true,
                        true,
                        342.4194),
                    [3],
                new SpatialReference(1,
                        "veritatis",
                        "qui",
                        "eligendi"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 2, 10, 19, 19, 2),
                    new DateTime(2002, 11, 21, 17, 23, 3));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aliquid",
                    "aperiam",
                new TimeExtent(new DateTime(2019, 9, 15, 3, 56, 12),
                        new DateTime(2020, 2, 5, 6, 57, 42)),
                new TimeInterval(TemporalTime.Days,
                        791.1707),
                    [new DateTime(2011, 4, 6, 18, 28, 34)],
                    "Europe/Moscow",
                    "facilis");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    635.7692);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 8, 7, 15, 29, 11),
                    new DateTime(2016, 3, 14, 8, 3, 52));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
