@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(52, 56, 12),
                                new MapColor(125, 185, 138)),
                            true,
                            true,
                            [5,
                            2,
                            7],
                            8,
                            4,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(561.1107,
                                4,
                                75.0046,
                                112.5230,
                                591.0137,
                                411.9954,
                                489.4184,
                                534.9700),
                            new RasterBandStatistics(625.3993,
                                7,
                                527.6655,
                                837.6853,
                                481.2880,
                                463.6410,
                                279.8505,
                                420.8821)],
                            true,
                            9))"
                        BandIds="@([1,
                            1,
                            6])"
                        BlendMode="@(BlendMode.SourceIn)"
                        Copyright="@("officia")"
                        Effect="@(new Effect("molestiae",
                            3149452.1442))"
                        Interpolation="@(PixelInterpolation.Cubic)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(36383337.6404)"
                        MinScale="@(47716.1108)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.5051)"
                        Title="@("commodi tempora dolor")"
                        FullExtent="@(new Extent(54.4577,
                                128.7457,
                                -52.4904,
                                -80.2661,
                                171.7820,
                                207.8030,
                                155.8680,
                                731.8146,
                            new SpatialReference(4,
                                    "consequatur",
                                    "debitis",
                                    "nihil"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(608.5453)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("quod")"
                            EndField="@("qui")"
                            Stops="@([new DateTime(2019, 11, 4, 11, 23, 36),
                                new DateTime(2022, 10, 14, 13, 19, 44)])"
                            TimeZone="@("America/Lima")"
                            TrackIdField="@("doloremque")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(693.4303)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2016, 11, 16, 18, 17, 56))"
                                End="@(new DateTime(2017, 10, 21, 8, 20, 43))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 6, 8, 14, 22, 43))"
                            End="@(new DateTime(2008, 9, 3, 19, 1, 9))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(561.6951)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "voluptatem",
                                    49.9240,
                                    9401623.8307),
                            new LOD(2,
                                    "voluptatibus",
                                    81.6952,
                                    34950426.0947),
                            new LOD(6,
                                    "sed",
                                    97.1914,
                                    28844826.8846),
                            new LOD(9,
                                    "aut",
                                    91.8364,
                                    8582757.7121)])"
                            Origin="@(new Point(-48.5488,
                                    -9.3727,
                                    100.4275,
                                    73.4966,
                                    875.0406,
                                new SpatialReference(1,
                                        "cupiditate",
                                        "dolorem",
                                        "sit"),
                                    true,
                                    true,
                                    851.5653))"
                            Size="@([8,
                                1])"
                            SpatialReference="@(new SpatialReference(8,
                                    "porro",
                                    "perspiciatis",
                                    "fugit"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("ipsa")"
                            FunctionName="@("category")"
                            OutputPixelType="@(OutputPixelType.Unknown)"
                            RasterFunctionDefinition="@("voluptatibus")"
                            VariableName="@("email")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("cupiditate")"
                            ApiKey="@("voluptatem")"
                            AvgRating="@(581.0567)"
                            Categories="@(["corrupti",
                                "laborum"])"
                            Created="@(new DateTime(2008, 1, 26, 10, 33, 13))"
                            Culture="@("quisquam")"
                            Description="@("nobis et explicabo tempore quibusdam amet minima")"
                            Extent="@(new Extent(129.0942,
                                    -30.3457,
                                    -60.4925,
                                    -71.6472,
                                    197.3722,
                                    637.0427,
                                    565.2917,
                                    587.8629,
                                new SpatialReference(4,
                                        "vel",
                                        "totam",
                                        "et"),
                                    true,
                                    true))"
                            GroupCategories="@(["soluta",
                                "odit"])"
                            LicenseInfo="@("non")"
                            Modified="@(new DateTime(2012, 4, 1, 20, 12, 10))"
                            Name="@("token")"
                            NumComments="@(127.5113)"
                            NumRatings="@(154.4490)"
                            NumViews="@(712.7185)"
                            Owner="@("Gustave Kuhic")"
                            OwnerFolder="@("Triston Jakubowski")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Auto,
                                    ["dolor",
                                        "tempora"],
                                    "voluptatum",
                                    "veritatis",
                                    "perferendis",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("temporibus")"
                            Screenshots="@(["id",
                                "et",
                                "cum",
                                "cupiditate"])"
                            Size="@(3)"
                            Snippet="@("voluptatum")"
                            Tags="@(["sint",
                                "sit",
                                "natus"])"
                            Title="@("ratione aliquid beatae")"
                            TypeKeywords="@(["saepe",
                                "eos",
                                "rerum"])"
                            Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("quis ea quam")"
                            StringContent="@("cum")"
                            OutFields="@(["est",
                                "iusto",
                                "rerum"])"
                            FieldInfos="@([new FieldInfo("email",
                                    "sed",
                                    "vitae",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("password",
                                    "optio",
                                    "adipisci",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("password",
                                    "doloribus",
                                    "praesentium",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("phone",
                                    "dolore",
                                    "quos",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new MediaPopupContent("et modi similique",
                                    "eum et molestiae eius dolores quia est",
                                [new PieChartMediaInfo("sunt ut ut",
                                        "rerum",
                                        "voluptate numquam soluta",
                                    new ChartMediaInfoValue(["tempora",
                                            "sed",
                                            "eligendi",
                                            "cum"],
                                            "culpa",
                                            "sequi",
                                        [new ChartMediaInfoValueSeries("updatedAt",
                                                "id",
                                                130.4418)],
                                        [new MapColor(154, 228, 135),
                                        new MapColor(239, 246, 33),
                                        new MapColor(15, 166, 44)])),
                                new LineChartMediaInfo("consequuntur quasi voluptatem",
                                        "voluptatem",
                                        "dolor unde voluptas",
                                    new ChartMediaInfoValue(["veniam",
                                            "neque",
                                            "qui"],
                                            "reprehenderit",
                                            "commodi",
                                        [new ChartMediaInfoValueSeries("comment",
                                                "et",
                                                885.2823),
                                        new ChartMediaInfoValueSeries("name",
                                                "minima",
                                                824.5488),
                                        new ChartMediaInfoValueSeries("name",
                                                "quae",
                                                779.7783),
                                        new ChartMediaInfoValueSeries("title",
                                                "soluta",
                                                773.7636)],
                                        [new MapColor(26, 10, 221),
                                        new MapColor(177, 200, 226),
                                        new MapColor(149, 214, 138)])),
                                new LineChartMediaInfo("rerum error autem",
                                        "corrupti",
                                        "officia quis possimus",
                                    new ChartMediaInfoValue(["beatae",
                                            "et",
                                            "veniam"],
                                            "sint",
                                            "hic",
                                        [new ChartMediaInfoValueSeries("email",
                                                "qui",
                                                814.5024),
                                        new ChartMediaInfoValueSeries("id",
                                                "perspiciatis",
                                                75.8560),
                                        new ChartMediaInfoValueSeries("email",
                                                "porro",
                                                926.0438),
                                        new ChartMediaInfoValueSeries("avatar",
                                                "aliquid",
                                                376.7498)],
                                        [new MapColor(178, 240, 69),
                                        new MapColor(224, 117, 213),
                                        new MapColor(66, 104, 37),
                                        new MapColor(60, 77, 119)])),
                                new ColumnChartMediaInfo("consequatur deserunt ratione",
                                        "voluptatem",
                                        "distinctio quis est",
                                    new ChartMediaInfoValue(["placeat",
                                            "delectus"],
                                            "ut",
                                            "vel",
                                        [new ChartMediaInfoValueSeries("email",
                                                "maiores",
                                                725.7694),
                                        new ChartMediaInfoValueSeries("category",
                                                "cumque",
                                                837.1153),
                                        new ChartMediaInfoValueSeries("category",
                                                "et",
                                                513.5066),
                                        new ChartMediaInfoValueSeries("password",
                                                "natus",
                                                845.3242)],
                                        [new MapColor(105, 95, 6),
                                        new MapColor(177, 86, 70),
                                        new MapColor(211, 45, 65),
                                        new MapColor(240, 243, 34)]))],
                                    4),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "error",
                                        "asperiores ut iusto")),
                            new FieldsPopupContent([new FieldInfo("phone",
                                        "error",
                                        "qui",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.LongMonthYear),
                                        true,
                                        true,
                                    StatisticType.Count)],
                                    "eos molestiae aut rerum nisi",
                                    "inventore sed aut"),
                            new TextPopupContent("labore voluptatem odit")])"
                            ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "email",
                                    "nisi nobis vel",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "title",
                                    "et autem ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "id",
                                    "culpa minus ratione",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "email",
                                    "alias voluptatem vitae",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("voluptatem ut nesciunt",
                                    "https://picsum.photos/640/480/?image=619",
                                    "921437a2-1b72-bb13-99d4-275f827c7b09",
                                    () => { Console.WriteLine("facilis"); return Task.CompletedTask; },
                                    "phone",
                                    true,
                                    true,
                                    true,
                                    "ducimus"),
                            new ActionButton("adipisci sint minus",
                                    "https://picsum.photos/640/480/?image=984",
                                    "1ed6ba66-3bb4-a43a-06ff-691eacddcb85",
                                    () => { Console.WriteLine("voluptatum"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "eligendi"),
                            new ActionToggle("sit illum debitis",
                                    "77bc5c25-56c0-bd3c-3f59-d0b4723d9ccc",
                                    () => { Console.WriteLine("culpa"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "comment",
                                    "praesentium")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([730.8449,
                                        208.0513]),
                                    new MapPoint([44.2019,
                                        101.4449,
                                        122.5229,
                                        864.5266]),
                                    new MapPoint([291.1195,
                                        880.3111,
                                        240.1824,
                                        770.9408]),
                                    new MapPoint([570.5736,
                                        436.5790,
                                        101.6653,
                                        158.4122])]),
                                    new MapPath([new MapPoint([213.4901,
                                            162.1719]),
                                        new MapPoint([826.4014,
                                            926.2472,
                                            832.9645])]),
                                    new MapPath([new MapPoint([687.2253,
                                            496.7784,
                                            685.7666,
                                            240.6179]),
                                        new MapPoint([875.7055,
                                            254.1123,
                                            290.6791])])],
                                new SpatialReference(5,
                                        "architecto",
                                        "sint",
                                        "dolores"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("token")"
                                IsSlice="@(true)"
                                VariableName="@("group")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("createdAt")"
                            IsSlice="@(true)"
                            VariableName="@("phone")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([379.4385,
                            914.5374,
                            549.4263]),
                        new MapPoint([164.0596,
                            928.1270,
                            636.2937]),
                        new MapPoint([867.9877,
                            285.4809,
                            113.2195,
                            921.3539]),
                        new MapPoint([45.4846,
                            525.9573,
                            164.4229])])],
                    new SpatialReference(2,
                            "ducimus",
                            "necessitatibus",
                            "sint"),
                    new Point(-166.6906,
                            -45.4067,
                            18.7599,
                            2.6300,
                            210.6215,
                        new SpatialReference(9,
                                "nemo",
                                "consequatur",
                                "voluptatem"),
                            true,
                            true,
                            199.1435),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("ratione",
                            "name",
                        OutputPixelType.U4,
                            "repellendus",
                            "updatedAt"),
                        [4,
                            8,
                            2],
                    Method.LockRaster,
                    [new DimensionalDefinition("status",
                            true,
                            "group")],
                        [2,
                            1],
                    Operation.Last,
                        "quo",
                        "et",
                    new Point(64.9766,
                            -81.7729,
                            74.9597,
                            79.0932,
                            345.7911,
                        new SpatialReference(7,
                                "sequi",
                                "sit",
                                "laudantium"),
                            true,
                            true,
                            150.6620),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(175.5976,
                        2.6536,
                    new PixelSizeSpatialReference(4,
                            938.2928)),
                new RasterFunction("ad",
                        "updatedAt",
                    OutputPixelType.C64,
                        "quis",
                        "title"),
                new TimeExtent(new DateTime(2016, 8, 13, 19, 2, 25),
                        new DateTime(2013, 11, 27, 21, 19, 23))),
                "ipsam");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["iusto",
                    "at",
                    "ratione",
                    "debitis"],
                    ["createdAt",
                        "category",
                        "email",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(174.7295,
                    142.2591,
                    0.7786,
                    -29.3028,
                    53.7414,
                    462.5692,
                    999.3221,
                    943.1124,
                new SpatialReference(6,
                        "assumenda",
                        "ut",
                        "temporibus"),
                    true,
                    true),
                5,
                4,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(241.2397,
                816.7949,
                476.7197,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(-6.3207,
                    18.5465,
                    81.4371,
                    -86.9331,
                    280.3263,
                new SpatialReference(4,
                        "eum",
                        "laudantium",
                        "ut"),
                    true,
                    true,
                    80.9814),
            new RasterIdentifyOptions([new DimensionalDefinition("status",
                        true,
                        "group")],
                    "password"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Shared,
                    "sequi",
                    "non",
                    334.8336,
                    ["et",
                        "nesciunt",
                        "incidunt",
                        "dicta"],
                    new DateTime(2015, 3, 13, 21, 36, 55),
                    "inventore",
                    "ea totam qui et magnam",
                new Extent(-88.2138,
                        -46.3136,
                        78.1373,
                        85.1406,
                        998.2490,
                        425.1284,
                        665.1609,
                        531.8087,
                    new SpatialReference(2,
                            "magni",
                            "dolores",
                            "voluptates"),
                        true,
                        true),
                    ["voluptatem",
                        "quos",
                        "quod",
                        "optio"],
                    "assumenda",
                    new DateTime(2014, 2, 25, 10, 26, 14),
                    "password",
                    74.6491),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2010, 4, 20, 22, 5, 58),
                        "et",
                        "asperiores in est"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "et",
                    "enim",
                    438.7573,
                    ["dignissimos",
                        "nihil"],
                    new DateTime(2006, 8, 8, 13, 27, 35),
                    "magnam",
                    "qui rem qui saepe placeat",
                new Extent(146.3887,
                        -179.2081,
                        7.2284,
                        30.7801,
                        224.8717,
                        370.9350,
                        620.1351,
                        918.8646,
                    new SpatialReference(7,
                            "labore",
                            "ex",
                            "tenetur"),
                        true,
                        true),
                    ["iste",
                        "ea"],
                    "alias",
                    new DateTime(2011, 3, 21, 10, 37, 2),
                    "name",
                    742.9681);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Normal;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Show;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("group",
                    true,
                    "title"),
            new DimensionalDefinition("id",
                    true,
                    "group"),
            new DimensionalDefinition("createdAt",
                    true,
                    "comment")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([995.8323,
                            33.7693]),
                        new MapPoint([766.5193,
                            220.7901,
                            706.6135,
                            871.3128])]),
                        new MapPath([new MapPoint([155.8134,
                                317.4597,
                                521.9642,
                                861.6909]),
                            new MapPoint([308.4443,
                                220.6209,
                                884.8057,
                                931.4644]),
                            new MapPoint([806.4422,
                                76.9944])]),
                        new MapPath([new MapPoint([76.4294,
                                984.1683]),
                            new MapPoint([356.0590,
                                737.1699]),
                            new MapPoint([529.0903,
                                891.8782,
                                497.3312])])],
                    new SpatialReference(5,
                            "voluptate",
                            "deleniti",
                            "quo"),
                    new Point(-48.9429,
                            -60.0263,
                            88.1769,
                            7.9811,
                            834.3991,
                        new SpatialReference(1,
                                "veniam",
                                "est",
                                "dicta"),
                            true,
                            true,
                            499.1626),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("status",
                        true,
                        "title"),
                new DimensionalDefinition("avatar",
                        true,
                        "group"),
                new DimensionalDefinition("id",
                        true,
                        "group"),
                new DimensionalDefinition("phone",
                        true,
                        "comment")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("ut dignissimos aspernatur",
                    "voluptatem",
                    ["cupiditate",
                        "quas",
                        "molestiae"],
                [new FieldInfo("title",
                        "voluptatem",
                        "pariatur",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.ShortDateLongTime),
                        true,
                        true,
                    StatisticType.Var)],
                [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                            "laborum",
                            "omnis harum fuga"))],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "comment",
                        "sapiente voluptas repellendus",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("et sed iusto",
                        "279434cd-cce4-3d3f-0446-87fbc9f7f63b",
                        () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "status",
                        "qui"),
                new ActionButton("est ut et",
                        "https://picsum.photos/640/480/?image=435",
                        "e724c5ad-6749-1efe-69c8-c648c612f121",
                        () => { Console.WriteLine("repellat"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "quia"),
                new ActionToggle("suscipit quo ducimus",
                        "98884d1c-2d41-98dc-5223-783ffc356fef",
                        () => { Console.WriteLine("voluptates"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "updatedAt",
                        "fugit"),
                new ActionButton("doloribus voluptatem temporibus",
                        "https://picsum.photos/640/480/?image=189",
                        "280073ca-b2be-25e2-d8b1-e75fc2447ebe",
                        () => { Console.WriteLine("occaecati"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "distinctio")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(-145.2801,
                    -53.3646,
                    -89.2926,
                    -12.3498,
                    814.6449,
                    307.6187,
                    312.8196,
                    81.9750,
                new SpatialReference(6,
                        "illum",
                        "corporis",
                        "iusto"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("aut",
                    "title",
                OutputPixelType.S8,
                    "laboriosam",
                    "group");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(625.8836,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(8,
                        "voluptatem",
                        98.0064,
                        46794927.1077),
                new LOD(4,
                        "illum",
                        92.5450,
                        39159751.5993),
                new LOD(8,
                        "quas",
                        65.8860,
                        18910087.3629),
                new LOD(2,
                        "eligendi",
                        25.0654,
                        2491202.0836)],
                new Point(-49.9465,
                        68.3326,
                        -20.6032,
                        39.2298,
                        365.3753,
                    new SpatialReference(7,
                            "doloremque",
                            "ut",
                            "autem"),
                        true,
                        true,
                        45.0397),
                    [8,
                        7,
                        1,
                        8],
                new SpatialReference(7,
                        "magnam",
                        "autem",
                        "velit"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2015, 7, 20, 14, 11, 37),
                    new DateTime(2012, 7, 20, 18, 7, 6));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("necessitatibus",
                    "et",
                new TimeExtent(new DateTime(2000, 11, 12, 1, 27, 5),
                        new DateTime(2019, 6, 3, 5, 48, 15)),
                new TimeInterval(TemporalTime.Milliseconds,
                        288.5177),
                    [new DateTime(2020, 7, 26, 3, 7, 49),
                        new DateTime(2015, 3, 22, 19, 10, 11)],
                    "Asia/Kolkata",
                    "eum");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Minutes,
                    209.0344);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 4, 21, 19, 1, 20),
                    new DateTime(2021, 1, 23, 18, 54, 57));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
