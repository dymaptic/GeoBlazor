@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(157, 75, 78),
                                new MapColor(205, 210, 133)),
                            true,
                            true,
                            [1,
                            4,
                            4,
                            5],
                            6,
                            5,
                            StretchType.MinMax,
                            [new RasterBandStatistics(459.2476,
                                4,
                                475.6896,
                                733.8188,
                                14.8775,
                                458.0204,
                                881.2263,
                                375.7383),
                            new RasterBandStatistics(648.7489,
                                5,
                                927.9957,
                                592.9986,
                                20.5017,
                                337.2358,
                                281.7116,
                                399.6430),
                            new RasterBandStatistics(762.1554,
                                1,
                                35.6999,
                                408.7349,
                                580.5043,
                                873.3102,
                                228.0207,
                                663.7687)],
                            true,
                            9))"
                        BandIds="@([7,
                            6])"
                        BlendMode="@(BlendMode.SoftLight)"
                        Copyright="@("officia")"
                        Effect="@(new Effect("maxime",
                            1347937.2994))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(12761093.6439)"
                        MinScale="@(19843.6127)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.6835)"
                        Title="@("fugit quibusdam est")"
                        FullExtent="@(new Extent(-107.6526,
                                -90.1336,
                                75.3851,
                                48.0405,
                                47.3702,
                                384.2635,
                                527.8241,
                                873.9369,
                            new SpatialReference(1,
                                    "hic",
                                    "necessitatibus",
                                    "nulla"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Hours)"
                            Value="@(120.2766)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("optio")"
                            EndField="@("nihil")"
                            Stops="@([new DateTime(2016, 7, 26, 12, 21, 34),
                                new DateTime(2010, 3, 10, 15, 12, 21)])"
                            TimeZone="@("Europe/Minsk")"
                            TrackIdField="@("est")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Weeks)"
                                Value="@(90.8392)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2021, 6, 27, 9, 33, 42))"
                                End="@(new DateTime(2013, 2, 4, 15, 49, 14))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2021, 1, 9, 19, 25, 52))"
                            End="@(new DateTime(2016, 8, 19, 16, 10, 17))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(6.4977)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "quisquam",
                                    32.8047,
                                    27426082.4680),
                            new LOD(1,
                                    "dolores",
                                    38.1499,
                                    35705188.9853),
                            new LOD(3,
                                    "aspernatur",
                                    96.4670,
                                    19518429.8377),
                            new LOD(4,
                                    "deserunt",
                                    4.0514,
                                    33470955.3647)])"
                            Origin="@(new Point(67.4686,
                                    -70.1929,
                                    137.9816,
                                    -19.5659,
                                    684.0655,
                                new SpatialReference(2,
                                        "enim",
                                        "exercitationem",
                                        "sed"),
                                    true,
                                    true,
                                    266.8716))"
                            Size="@([2,
                                4,
                                9,
                                9])"
                            SpatialReference="@(new SpatialReference(6,
                                    "enim",
                                    "porro",
                                    "aut"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("et")"
                            FunctionName="@("category")"
                            OutputPixelType="@(OutputPixelType.Unknown)"
                            RasterFunctionDefinition="@("nisi")"
                            VariableName="@("updatedAt")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("nihil ex numquam")"
                            StringContent="@("esse")"
                            OutFields="@(["suscipit",
                                "quia",
                                "fugit",
                                "exercitationem"])"
                            FieldInfos="@([new FieldInfo("category",
                                    "omnis",
                                    "suscipit",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("comment",
                                    "vel",
                                    "illo",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new AttachmentsPopupContent("quis voluptas ex",
                                    "ex non ea blanditiis dolorem",
                                    AttachmentsPopupContentDisplayType.Preview),
                            new TextPopupContent("rerum omnis nemo")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "email",
                                    "praesentium ut ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "email",
                                    "cum quam ea",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "email",
                                    "est earum et",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "name",
                                    "illum sed quos",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("illo reprehenderit rerum",
                                    "https://picsum.photos/640/480/?image=347",
                                    "0046878e-b347-5159-5f49-7a341b571426",
                                    () => { Console.WriteLine("laboriosam"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "aut")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(-4.5432,
                                    14.0440,
                                    136.1083,
                                    -59.0284,
                                    225.3343,
                                new SpatialReference(7,
                                        "nihil",
                                        "unde",
                                        "quo"),
                                    true,
                                    true,
                                    720.6937))">
                            <DimensionalDefinition 
                                DimensionName="@("name")"
                                IsSlice="@(true)"
                                VariableName="@("password")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("comment")"
                            IsSlice="@(true)"
                            VariableName="@("updatedAt")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([995.7171,
                            746.5274,
                            575.4683]),
                        new MapPoint([656.8960,
                            667.3346,
                            318.7460]),
                        new MapPoint([717.3752,
                            581.1440,
                            923.7667,
                            896.0620])]),
                        new MapPath([new MapPoint([852.4333,
                                8.2527]),
                            new MapPoint([533.1414,
                                760.3458,
                                446.6581,
                                271.4354]),
                            new MapPoint([475.1646,
                                779.5403,
                                573.5618])]),
                        new MapPath([new MapPoint([665.5646,
                                888.9322,
                                737.2619,
                                629.9741]),
                            new MapPoint([689.0578,
                                622.9232,
                                972.5218])]),
                        new MapPath([new MapPoint([23.4361,
                                402.4550,
                                105.4671,
                                184.3939]),
                            new MapPoint([456.7227,
                                916.5441]),
                            new MapPoint([530.6047,
                                909.7672,
                                700.0019]),
                            new MapPoint([226.0494,
                                946.7184,
                                418.0319,
                                833.9685])])],
                    new SpatialReference(9,
                            "ut",
                            "explicabo",
                            "iure"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("aut",
                            "password",
                        OutputPixelType.S32,
                            "ab",
                            "updatedAt"),
                        [1,
                            8,
                            2],
                    Method.Seamline,
                    [new DimensionalDefinition("phone",
                            true,
                            "token"),
                    new DimensionalDefinition("token",
                            true,
                            "comment"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "phone")],
                        [5,
                            7],
                    Operation.Max,
                        "eaque",
                        "qui",
                    new Point(87.9623,
                            -62.9853,
                            155.7322,
                            -78.1849,
                            133.7766,
                        new SpatialReference(5,
                                "modi",
                                "veritatis",
                                "recusandae"),
                            true,
                            true,
                            733.9422),
                        "Province = 'Ontario'"),
                new PixelSize(167.4578,
                        65.7055,
                    new PixelSizeSpatialReference(2,
                            822.4756)),
                new RasterFunction("et",
                        "phone",
                    OutputPixelType.U8,
                        "qui",
                        "name"),
                new TimeExtent(new DateTime(2021, 3, 22, 8, 30, 1),
                        new DateTime(2000, 3, 20, 14, 32, 56))),
                "id");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["consequatur",
                    "et",
                    "molestiae",
                    "dignissimos"],
                    ["phone",
                        "token",
                        "category",
                        "token"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(-116.6028,
                    -171.1612,
                    76.8545,
                    -27.3454,
                    559.6908,
                    676.8028,
                    467.3867,
                    554.5508,
                new SpatialReference(6,
                        "neque",
                        "qui",
                        "aut"),
                    true,
                    true),
                4,
                6,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Cubic));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(940.6445,
                526.1710,
                437.5410,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(108.5974,
                    40.0962,
                    -144.0297,
                    23.2730,
                    683.8265,
                new SpatialReference(2,
                        "hic",
                        "ipsa",
                        "libero"),
                    true,
                    true,
                    386.1911),
            new RasterIdentifyOptions([new DimensionalDefinition("category",
                        true,
                        "name")],
                    "password"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2012, 3, 17, 22, 4, 26),
                        "modi",
                        "adipisci est aliquid"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Hue;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("group",
                    true,
                    "updatedAt"),
            new DimensionalDefinition("status",
                    true,
                    "category"),
            new DimensionalDefinition("title",
                    true,
                    "id"),
            new DimensionalDefinition("name",
                    true,
                    "token")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([468.3994,
                            914.9201,
                            861.9899,
                            121.4052]),
                        new MapPoint([109.3736,
                            963.7911]),
                        new MapPoint([882.8369,
                            958.4269,
                            883.0321]),
                        new MapPoint([464.0642,
                            457.9797,
                            323.1155])]),
                        new MapPath([new MapPoint([381.5472,
                                777.4952,
                                221.1452,
                                337.1537]),
                            new MapPoint([435.6055,
                                422.2189]),
                            new MapPoint([828.3222,
                                885.3979]),
                            new MapPoint([481.5356,
                                163.3328,
                                807.5392,
                                868.7909])]),
                        new MapPath([new MapPoint([782.1199,
                                889.4631]),
                            new MapPoint([110.1378,
                                451.6817,
                                721.9719])])],
                    new SpatialReference(8,
                            "adipisci",
                            "possimus",
                            "omnis"),
                    new Point(128.5412,
                            17.6430,
                            75.4899,
                            18.2200,
                            854.3599,
                        new SpatialReference(2,
                                "ut",
                                "iure",
                                "inventore"),
                            true,
                            true,
                            428.4503),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("group",
                        true,
                        "comment"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "status"),
                new DimensionalDefinition("comment",
                        true,
                        "comment")]);
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("nemo qui quisquam",
                    "distinctio",
                    ["nostrum",
                        "et",
                        "voluptate",
                        "omnis"],
                [new FieldInfo("status",
                        "placeat",
                        "autem",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("comment",
                        "in",
                        "aut",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.LongDateLongTime),
                        true,
                        true,
                    StatisticType.Max)],
                [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                            "architecto",
                            "esse et fugit")),
                new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "tenetur",
                            "temporibus autem ut")),
                new FieldsPopupContent([new FieldInfo("name",
                            "sint",
                            "occaecati",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.LongDate),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("password",
                            "beatae",
                            "possimus",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.LongDateLongTime),
                            true,
                            true,
                        StatisticType.Min)],
                        "voluptate eos provident est voluptatem molestias ut",
                        "assumenda expedita quod"),
                new TextPopupContent("excepturi rerum cum")],
                [new ExpressionInfo("return Date();",
                        "updatedAt",
                        "iste eum quisquam",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "group",
                        "a quod maxime",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "email",
                        "molestiae illum aut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "comment",
                        "earum incidunt et",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("dolores eveniet ex",
                        "b340eb6a-bad4-b675-c87f-1fb0ebc96647",
                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "id",
                        "iste"),
                new ActionToggle("sequi quisquam maiores",
                        "84faea66-4e52-f77a-da39-6fc0a69f3394",
                        () => { Console.WriteLine("modi"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "createdAt",
                        "voluptates"),
                new ActionButton("porro omnis ut",
                        "https://picsum.photos/640/480/?image=343",
                        "cae516e7-5703-ad3f-f91a-f353318ae4ab",
                        () => { Console.WriteLine("esse"); return Task.CompletedTask; },
                        "password",
                        true,
                        true,
                        true,
                        "quidem"),
                new ActionToggle("voluptatibus et similique",
                        "a6784a23-3b03-8917-4420-a60ed249cb17",
                        () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "updatedAt",
                        "magnam")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(102.2505,
                    -27.4634,
                    46.5594,
                    -23.9073,
                    2.3382,
                    112.5388,
                    934.7129,
                    23.0224,
                new SpatialReference(7,
                        "ex",
                        "aliquam",
                        "amet"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("quasi",
                    "password",
                OutputPixelType.S16,
                    "et",
                    "id");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(865.5076,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(9,
                        "vel",
                        45.4061,
                        5899157.7550),
                new LOD(4,
                        "non",
                        95.9062,
                        7931414.1126),
                new LOD(4,
                        "nulla",
                        46.5679,
                        46863299.9011),
                new LOD(9,
                        "distinctio",
                        56.3646,
                        41694315.9564)],
                new Point(85.2480,
                        52.4728,
                        88.7692,
                        18.2729,
                        479.3796,
                    new SpatialReference(1,
                            "impedit",
                            "laudantium",
                            "nostrum"),
                        true,
                        true,
                        738.5106),
                    [5,
                        8,
                        2,
                        9],
                new SpatialReference(4,
                        "ut",
                        "quisquam",
                        "dignissimos"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 8, 10, 4, 58, 32),
                    new DateTime(2009, 9, 8, 1, 37, 31));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aut",
                    "harum",
                new TimeExtent(new DateTime(2010, 8, 11, 6, 34, 13),
                        new DateTime(2018, 5, 8, 14, 50, 54)),
                new TimeInterval(TemporalTime.Years,
                        646.5551),
                    [new DateTime(2014, 2, 10, 11, 54, 8),
                        new DateTime(2021, 9, 27, 3, 58, 6),
                        new DateTime(2004, 11, 25, 11, 50, 38)],
                    "Pacific/Auckland",
                    "vel");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    967.1803);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 2, 19, 10, 45, 18),
                    new DateTime(2019, 10, 13, 1, 12, 20));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
