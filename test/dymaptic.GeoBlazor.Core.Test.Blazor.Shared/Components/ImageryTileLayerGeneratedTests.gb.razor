@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryTileLayer(Action renderHandler)
    {
        ImageryTileLayer? imageryTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryTileLayer 
                        Url="@("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(169, 6, 41),
                                new MapColor(44, 192, 101)),
                            true,
                            true,
                            [1,
                            3],
                            2,
                            6,
                            StretchType.MinMax,
                            [new RasterBandStatistics(892.3776,
                                8,
                                910.5991,
                                764.9697,
                                665.5938,
                                648.7668,
                                801.4683,
                                602.2857),
                            new RasterBandStatistics(817.4692,
                                9,
                                925.3976,
                                335.1780,
                                119.8451,
                                276.4676,
                                22.3730,
                                182.1220),
                            new RasterBandStatistics(375.0797,
                                5,
                                822.4801,
                                240.9152,
                                283.2814,
                                449.0634,
                                779.5420,
                                314.1821),
                            new RasterBandStatistics(649.2478,
                                9,
                                582.7448,
                                440.6196,
                                335.3299,
                                502.9997,
                                477.0353,
                                835.7170)],
                            true,
                            5))"
                        BandIds="@([9,
                            4,
                            6,
                            9])"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Copyright="@("et")"
                        Effect="@(new Effect("maxime",
                            26678424.2929))"
                        Interpolation="@(PixelInterpolation.Nearest)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(31782606.6303)"
                        MinScale="@(49604.4456)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Opacity="@(0.1696)"
                        Title="@("dolor eum temporibus")"
                        FullExtent="@(new Extent(154.2019,
                                10.1227,
                                -41.8403,
                                -62.5761,
                                193.3448,
                                50.7628,
                                445.9056,
                                267.7877,
                            new SpatialReference(8,
                                    "incidunt",
                                    "omnis",
                                    "vel"),
                                true,
                                true))">
                        <TimeInterval 
                            Unit="@(TemporalTime.Weeks)"
                            Value="@(968.1430)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("aliquid")"
                            EndField="@("incidunt")"
                            Stops="@([new DateTime(2003, 5, 1, 2, 44, 30),
                                new DateTime(2018, 11, 4, 21, 32, 11)])"
                            TimeZone="@("America/Caracas")"
                            TrackIdField="@("officia")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(784.1628)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2006, 4, 10, 14, 56, 41))"
                                End="@(new DateTime(2023, 2, 4, 1, 9, 32))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2013, 9, 22, 15, 37, 35))"
                            End="@(new DateTime(2005, 4, 2, 18, 26, 13))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(370.5037)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "voluptatem",
                                    66.8004,
                                    47889618.7681),
                            new LOD(7,
                                    "maxime",
                                    73.6970,
                                    15744092.2496)])"
                            Origin="@(new Point(-171.6791,
                                    -12.1327,
                                    -50.2494,
                                    40.5547,
                                    793.9303,
                                new SpatialReference(4,
                                        "doloremque",
                                        "suscipit",
                                        "et"),
                                    true,
                                    true,
                                    986.0534))"
                            Size="@([6,
                                4,
                                7])"
                            SpatialReference="@(new SpatialReference(7,
                                    "autem",
                                    "autem",
                                    "eligendi"))">
                        </TileInfo>
                        <RasterFunction 
                            FunctionArguments="@("autem")"
                            FunctionName="@("id")"
                            OutputPixelType="@(OutputPixelType.F32)"
                            RasterFunctionDefinition="@("consectetur")"
                            VariableName="@("email")">
                        </RasterFunction>
                        <PopupTemplate 
                            Title="@("nostrum in quam")"
                            StringContent="@("ipsam")"
                            OutFields="@(["est",
                                "dolorem",
                                "voluptatem",
                                "velit"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "qui",
                                    "et",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new RelationshipPopupContent("officiis autem dolorem",
                                    "architecto eos possimus sequi nemo nostrum",
                                    1,
                                    "architecto",
                                [new RelatedRecordsInfoFieldOrder("rerum",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("ut",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("occaecati",
                                    OrderBy.Desc)],
                                    1)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "email",
                                    "eligendi temporibus est",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("amet molestiae magnam",
                                    "https://picsum.photos/640/480/?image=1031",
                                    "926c4dbf-f6b6-c5e4-9849-6786749b3835",
                                    () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "cum"),
                            new ActionButton("ullam cumque molestiae",
                                    "https://picsum.photos/640/480/?image=193",
                                    "8a197fdd-6991-ace0-73db-99f6ec698c09",
                                    () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "repellendus"),
                            new ActionButton("fuga eum occaecati",
                                    "https://picsum.photos/640/480/?image=237",
                                    "a8b1515a-04cd-d91c-d7f4-c4eabb55bcd4",
                                    () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "facere")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([413.7966,
                                        269.5469]),
                                    new MapPoint([113.8174,
                                        423.3984,
                                        226.9385]),
                                    new MapPoint([357.7503,
                                        853.8115,
                                        178.1724,
                                        487.2002]),
                                    new MapPoint([476.8310,
                                        656.3259])])],
                                new SpatialReference(7,
                                        "consequatur",
                                        "quod",
                                        "omnis"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("group")"
                                IsSlice="@(true)"
                                VariableName="@("createdAt")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("createdAt")"
                            IsSlice="@(true)"
                            VariableName="@("status")"
>
                        </DimensionalDefinition>
                    </ImageryTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "imagery-tile");
        var computeStatisticsHistogramsMethodResult = await imageryTileLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([491.0562,
                            817.1513,
                            261.0178,
                            446.9532]),
                        new MapPoint([519.8836,
                            877.3110,
                            543.0889,
                            109.4247])]),
                        new MapPath([new MapPoint([786.9718,
                                502.6614]),
                            new MapPoint([359.3560,
                                632.0416]),
                            new MapPoint([19.1332,
                                549.7549]),
                            new MapPoint([919.1406,
                                605.7015,
                                756.9985,
                                821.9106])]),
                        new MapPath([new MapPoint([895.2288,
                                890.7534,
                                404.4734]),
                            new MapPoint([455.8402,
                                252.9107]),
                            new MapPoint([807.1177,
                                187.0284]),
                            new MapPoint([190.6930,
                                420.1260,
                                671.5402,
                                89.0945])]),
                        new MapPath([new MapPoint([563.5360,
                                254.8477]),
                            new MapPoint([650.4486,
                                162.3487]),
                            new MapPoint([803.3284,
                                242.7000,
                                286.3192])])],
                    new SpatialReference(5,
                            "id",
                            "deserunt",
                            "ut"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("qui",
                            "phone",
                        OutputPixelType.F32,
                            "et",
                            "category"),
                        [4,
                            9,
                            6],
                    Method.Viewpoint,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "token")],
                        [4,
                            1],
                    Operation.Blend,
                        "facere",
                        "qui",
                    new Point(24.0587,
                            -53.4782,
                            -168.0262,
                            27.7234,
                            390.6614,
                        new SpatialReference(5,
                                "et",
                                "minus",
                                "modi"),
                            true,
                            true,
                            372.9097),
                        "Phone = '555-555-5555'"),
                new PixelSize(-67.3579,
                        -15.9431,
                    new PixelSizeSpatialReference(3,
                            278.9501)),
                new RasterFunction("consequuntur",
                        "email",
                    OutputPixelType.U1,
                        "iste",
                        "email"),
                new TimeExtent(new DateTime(2010, 5, 20, 12, 36, 8),
                        new DateTime(2022, 5, 24, 21, 48, 5))),
                "dolore");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryTileLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quibusdam",
                    "tenetur",
                    "omnis"],
                    ["title",
                        "phone",
                        "title"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await imageryTileLayer.FetchPixels(new Extent(56.0241,
                    -122.9185,
                    -66.5387,
                    -59.8460,
                    110.1499,
                    247.5154,
                    802.8890,
                    338.4051,
                new SpatialReference(8,
                        "delectus",
                        "est",
                        "exercitationem"),
                    true,
                    true),
                4,
                5,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Bilinear));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var fetchTileMethodResult = await imageryTileLayer.FetchTile(66.6208,
                823.5843,
                628.0436,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var identifyMethodResult = await imageryTileLayer.Identify(new Point(119.4799,
                    -20.1391,
                    97.3596,
                    -67.7892,
                    691.0900,
                new SpatialReference(5,
                        "molestiae",
                        "at",
                        "aut"),
                    true,
                    true,
                    566.7102),
            new RasterIdentifyOptions([new DimensionalDefinition("phone",
                        true,
                        "title"),
                new DimensionalDefinition("phone",
                        true,
                        "updatedAt"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "name")],
                    "name"));
        Assert.IsNotNull(identifyMethodResult);
        var saveMethodResult = await imageryTileLayer.Save(new ImageryTileLayerSaveOptions(new ImageryTileLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryTileLayer.SaveAs(new PortalItem(PortalItemAccess.Shared,
                    "dolores",
                    "est",
                    671.8414,
                    ["et",
                        "nulla",
                        "inventore",
                        "est"],
                    new DateTime(2009, 8, 7, 1, 31, 2),
                    "ut",
                    "ut quisquam et aut asperiores",
                new Extent(81.5145,
                        119.7993,
                        -66.9372,
                        -74.4114,
                        92.9442,
                        223.3151,
                        500.9350,
                        782.7233,
                    new SpatialReference(2,
                            "animi",
                            "amet",
                            "neque"),
                        true,
                        true),
                    ["quia",
                        "facere"],
                    "nesciunt",
                    new DateTime(2005, 11, 26, 8, 46, 23),
                    "email",
                    252.2808),
            new ImageryTileLayerSaveAsOptions(new PortalFolder(new DateTime(2003, 1, 21, 20, 28, 26),
                        "voluptates",
                        "necessitatibus et est"),
                new ImageryTileLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "sit",
                    "fugiat",
                    719.5064,
                    ["incidunt",
                        "saepe"],
                    new DateTime(2007, 2, 13, 13, 38, 31),
                    "voluptatem",
                    "neque delectus qui ea dicta dolore",
                new Extent(170.3769,
                        71.8701,
                        -23.1841,
                        -26.2972,
                        538.2498,
                        651.4748,
                        701.3156,
                        947.4825,
                    new SpatialReference(1,
                            "quibusdam",
                            "culpa",
                            "vel"),
                        true,
                        true),
                    ["possimus",
                        "qui",
                        "qui",
                        "exercitationem"],
                    "et",
                    new DateTime(2008, 4, 9, 19, 29, 30),
                    "password",
                    682.0930);
        await imageryTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await imageryTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ListMode testListMode = ListMode.Hide;
        await imageryTileLayer.SetListMode(testListMode);
        var listMode = await imageryTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("title",
                    true,
                    "group")];
        await imageryTileLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await imageryTileLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset([new DimensionalDefinition("avatar",
                        true,
                        "title"),
                new DimensionalDefinition("status",
                        true,
                        "title"),
                new DimensionalDefinition("comment",
                        true,
                        "email")],
                new Polygon([new MapPath([new MapPoint([686.9005,
                            934.1159,
                            491.4155,
                            338.2135]),
                        new MapPoint([226.6321,
                            234.0305,
                            255.0066,
                            870.0516]),
                        new MapPoint([134.5225,
                            431.2445]),
                        new MapPoint([493.5256,
                            609.0025,
                            944.0234])]),
                        new MapPath([new MapPoint([865.6003,
                                192.5955]),
                            new MapPoint([635.9158,
                                942.3143,
                                166.4847]),
                            new MapPoint([690.2041,
                                73.0383,
                                847.4414,
                                157.6340]),
                            new MapPoint([265.7743,
                                8.2291])])],
                    new SpatialReference(8,
                            "perspiciatis",
                            "molestiae",
                            "odit"),
                    new Point(97.2770,
                            9.1650,
                            -56.6792,
                            51.0902,
                            656.6743,
                        new SpatialReference(2,
                                "provident",
                                "placeat",
                                "deleniti"),
                            true,
                            true,
                            818.8914),
                        true,
                        true,
                        true));
        await imageryTileLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryTileLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("quis deserunt aut",
                    "tempore",
                    ["fuga",
                        "accusamus",
                        "cupiditate",
                        "rem"],
                [new FieldInfo("email",
                        "autem",
                        "est",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDateLongTime24),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("avatar",
                        "labore",
                        "ipsam",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("comment",
                        "quo",
                        "tempore",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.DayShortMonthYearLongTime),
                        true,
                        true,
                    StatisticType.Avg)],
                [new MediaPopupContent("velit excepturi qui",
                        "voluptatem deserunt magni quam quidem",
                    [new ImageMediaInfo("eveniet debitis soluta",
                            "ut",
                            "suscipit est error",
                        new ImageMediaInfoValue("http://roy.com",
                                "http://demarco.com"),
                            374.9930),
                    new BarChartMediaInfo("voluptas velit amet",
                            "aspernatur",
                            "est qui nesciunt",
                        new ChartMediaInfoValue(["necessitatibus",
                                "adipisci",
                                "rem"],
                                "molestiae",
                                "reiciendis",
                            [new ChartMediaInfoValueSeries("title",
                                    "ducimus",
                                    366.4311),
                            new ChartMediaInfoValueSeries("category",
                                    "qui",
                                    151.4273),
                            new ChartMediaInfoValueSeries("email",
                                    "voluptatum",
                                    629.3301)],
                            [new MapColor(37, 9, 187),
                            new MapColor(65, 127, 184),
                            new MapColor(228, 80, 65),
                            new MapColor(104, 36, 201)])),
                    new BarChartMediaInfo("reiciendis autem eaque",
                            "est",
                            "consequatur ab distinctio",
                        new ChartMediaInfoValue(["nemo",
                                "quod",
                                "quidem"],
                                "minus",
                                "consequatur",
                            [new ChartMediaInfoValueSeries("email",
                                    "molestias",
                                    339.3564)],
                            [new MapColor(141, 91, 222)])),
                    new BarChartMediaInfo("nisi animi consequatur",
                            "culpa",
                            "numquam eum minima",
                        new ChartMediaInfoValue(["aspernatur",
                                "nulla",
                                "animi"],
                                "consequatur",
                                "ullam",
                            [new ChartMediaInfoValueSeries("status",
                                    "cupiditate",
                                    314.1938),
                            new ChartMediaInfoValueSeries("name",
                                    "eum",
                                    245.6724),
                            new ChartMediaInfoValueSeries("avatar",
                                    "in",
                                    178.3523),
                            new ChartMediaInfoValueSeries("id",
                                    "non",
                                    503.0436)],
                            [new MapColor(110, 76, 232),
                            new MapColor(182, 60, 181)]))],
                        8),
                new AttachmentsPopupContent("itaque placeat sed",
                        "quae qui nisi voluptatem",
                        AttachmentsPopupContentDisplayType.Auto)],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "category",
                        "architecto sit saepe",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "status",
                        "culpa laborum et",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "title",
                        "nihil quae est",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("molestias provident minima",
                        "ab4020b0-5cfa-375a-c695-8113ce93698a",
                        () => { Console.WriteLine("quam"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "createdAt",
                        "quas"),
                new ActionButton("iste rem fugit",
                        "https://picsum.photos/640/480/?image=877",
                        "7ef32d94-65f0-d371-5d02-5130c744677c",
                        () => { Console.WriteLine("error"); return Task.CompletedTask; },
                        "status",
                        true,
                        true,
                        true,
                        "harum"),
                new ActionButton("sed autem eos",
                        "https://picsum.photos/640/480/?image=318",
                        "5bc12fc6-dc1c-847d-65c7-6f5982746ff5",
                        () => { Console.WriteLine("labore"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "corrupti"),
                new ActionButton("rerum similique facere",
                        "https://picsum.photos/640/480/?image=108",
                        "0a9449ad-3ab4-653b-8b7c-1c8178ec24fc",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "laborum")]);
        await imageryTileLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryTileLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        Extent testFullExtent = new Extent(37.3904,
                    142.5707,
                    30.2617,
                    -26.6171,
                    135.3840,
                    448.7577,
                    748.6781,
                    950.8291,
                new SpatialReference(7,
                        "nulla",
                        "blanditiis",
                        "id"),
                    true,
                    true);
        await imageryTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        RasterFunction testRasterFunction = new RasterFunction("assumenda",
                    "title",
                OutputPixelType.Unknown,
                    "et",
                    "token");
        await imageryTileLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryTileLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TileInfo testTileInfo = new TileInfo(289.5107,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(6,
                        "qui",
                        85.1042,
                        5318.5389)],
                new Point(6.4559,
                        2.0018,
                        45.5306,
                        -48.4982,
                        885.6229,
                    new SpatialReference(3,
                            "et",
                            "aut",
                            "quia"),
                        true,
                        true,
                        596.7741),
                    [1,
                        4],
                new SpatialReference(4,
                        "consequatur",
                        "ratione",
                        "laudantium"));
        await imageryTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await imageryTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2023, 6, 7, 7, 14, 44),
                    new DateTime(2007, 8, 7, 3, 20, 35));
        await imageryTileLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryTileLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("natus",
                    "et",
                new TimeExtent(new DateTime(2015, 6, 25, 1, 50, 55),
                        new DateTime(2022, 9, 5, 1, 28, 12)),
                new TimeInterval(TemporalTime.Decades,
                        653.9576),
                    [new DateTime(2023, 1, 5, 0, 41, 32),
                        new DateTime(2020, 5, 22, 7, 5, 43),
                        new DateTime(2000, 5, 12, 2, 45, 42),
                        new DateTime(2016, 9, 27, 10, 4, 0)],
                    "Africa/Monrovia",
                    "labore");
        await imageryTileLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryTileLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    270.3946);
        await imageryTileLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryTileLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 11, 13, 12, 30, 14),
                    new DateTime(2023, 7, 20, 17, 8, 50));
        await imageryTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
