@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWebTileLayer(Action renderHandler)
    {
        WebTileLayer? webTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WebTileLayer 
                        BlendMode="@(BlendMode.Reflect)"
                        Copyright="@("voluptas")"
                        Effect="@(new Effect("facere",
                            35925970.2669))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(1043258.0182)"
                        MinScale="@(22477.0358)"
                        Opacity="@(0.1460)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(294.5829)"
                        SubDomains="@(["eius"])"
                        Title="@("distinctio aspernatur qui")"
                        UrlTemplate="@("http://joshua.net")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 11, 24, 17, 22, 57))"
                            End="@(new DateTime(2017, 7, 25, 5, 50, 28))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(314.6301)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "modi",
                                    37.4834,
                                    22696463.3924),
                            new LOD(9,
                                    "et",
                                    18.9614,
                                    25906027.1517)])"
                            Origin="@(new Point(-175.3510,
                                    -88.9339,
                                    62.9686,
                                    1.1801,
                                    989.1129,
                                new SpatialReference(3,
                                        "sed",
                                        "error",
                                        "iusto"),
                                    true,
                                    true,
                                    213.0042))"
                            Size="@([8,
                                4])">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("eum")"
                                Wkt="@("molestiae")"
                                Wkt2="@("fuga")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(76.2510)"
                            Xmin="@(71.1768)"
                            Ymax="@(38.6612)"
                            Ymin="@(-80.6391)"
                            Zmax="@(365.6438)"
                            Zmin="@(288.8525)"
                            Mmax="@(189.3718)"
                            Mmin="@(970.5461)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(3)"
                                ImageCoordinateSystem="@("animi")"
                                Wkt="@("labore")"
                                Wkt2="@("nam")">
                            </SpatialReference>
                        </Extent>
                    </WebTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(webTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [webTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "web-tile");
        var fetchTileMethodResult = await webTileLayer.FetchTile(853.2995,
                765.7765,
                499.0722,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await webTileLayer.GetTileUrl(194.1736,
                428.8364,
                176.5542);
        Assert.IsNotNull(getTileUrlMethodResult);
        await webTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.Hue;
        await webTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await webTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(163.6026,
                    -81.4034,
                    13.7757,
                    -88.8361,
                    572.4815,
                    324.3763,
                    626.8711,
                    423.8842,
                new SpatialReference(9,
                        "aspernatur",
                        "quo",
                        "delectus"),
                    true,
                    true);
        await webTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await webTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await webTileLayer.SetListMode(testListMode);
        var listMode = await webTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await webTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await webTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(55.1181,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(3,
                        "autem",
                        84.4137,
                        2582994.7703),
                new LOD(5,
                        "architecto",
                        40.9439,
                        28162656.1590)],
                new Point(137.1818,
                        8.7979,
                        6.5082,
                        24.8152,
                        171.6400,
                    new SpatialReference(2,
                            "cumque",
                            "adipisci",
                            "dolorem"),
                        true,
                        true,
                        337.8417),
                    [1,
                        1],
                new SpatialReference(7,
                        "non",
                        "rem",
                        "quidem"));
        await webTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await webTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 6, 17, 21, 34, 41),
                    new DateTime(2022, 10, 26, 1, 0, 10));
        await webTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await webTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
