@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("qui dolor facilis")"
                        Opacity="@(0.5566)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Hue)"
                        Effect="@(new Effect("unde",
                            20200975.9214))"
                        FullExtent="@(new Extent(-74.1950,
                                -120.0224,
                                71.0208,
                                -33.4334,
                                602.1886,
                                389.6882,
                                366.1556,
                                118.6415,
                            new SpatialReference(7,
                                    "minima",
                                    "earum",
                                    "ratione"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(30690218.4621)"
                        MinScale="@(36333.9527)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(89.7749)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 7, 17, 14, 37, 43))"
                            End="@(new DateTime(2018, 7, 19, 15, 27, 29))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(195, 71, 210),
                                new Dimension(241.9894),
                                SimpleLineSymbolStyle.Dot,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(207, 206, 176),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Diamond),
                                30.0844))"
                            Color="@(new MapColor(238, 95, 23))"
                            Style="@(SimpleFillSymbolStyle.Vertical)">
                        </SimpleFillSymbol>
                        <PictureMarkerSymbol 
                            Angle="@(320.4529)"
                            Color="@(new MapColor(66, 161, 52))"
                            Xoffset="@(new Dimension(305.1547))"
                            Yoffset="@(new Dimension(160.0684))">
                        </PictureMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(190, 14, 174))"
                            Width="@(new Dimension(34.1812))"
                            Style="@(SimpleLineSymbolStyle.LongDash)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Miter)"
                            Marker="@(new LineSymbolMarker(new MapColor(92, 248, 126),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.Square))"
                            MiterLimit="@(599.0700)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.HardLight;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-98.7488,
                    -162.4256,
                    38.0084,
                    81.1203,
                    885.8153,
                    523.9702,
                    368.6506,
                    986.9659,
                new SpatialReference(1,
                        "quia",
                        "sint",
                        "aut"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(120, 122, 18),
                    new Dimension(203.1594),
                SimpleLineSymbolStyle.DashDot,
                Cap.Round,
                Join.Bevel,
                new LineSymbolMarker(new MapColor(242, 126, 226),
                    LinePlacement.BeginEnd,
                    LineSymbolMarkerStyle.X),
                    861.1667);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(993.0087),
                    new Dimension(788.0299),
                    727.8665,
                    new Dimension(727.3934),
                    new Dimension(667.2341),
                new MapColor(71, 96, 167));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(164, 59, 8),
                    new Dimension(16.3522),
                    SimpleLineSymbolStyle.ShortDot,
                    Cap.Butt,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(31, 232, 147),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Cross),
                    963.8705),
                new MapColor(234, 140, 84),
                SimpleFillSymbolStyle.BackwardDiagonal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 8, 2, 16, 32, 53),
                    new DateTime(2016, 4, 25, 8, 50, 24));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
