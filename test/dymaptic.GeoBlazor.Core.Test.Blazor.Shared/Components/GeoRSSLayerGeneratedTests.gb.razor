@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("dolorem non eligendi")"
                        Opacity="@(0.4041)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.SoftLight)"
                        Effect="@(new Effect("mollitia",
                            7199136.0888))"
                        FullExtent="@(new Extent(47.0277,
                                11.2161,
                                11.0829,
                                6.7012,
                                400.6590,
                                436.7394,
                                800.3848,
                                354.5271,
                            new SpatialReference(5,
                                    "voluptatum",
                                    "eveniet",
                                    "deserunt"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(37750091.1445)"
                        MinScale="@(38510.5115)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(874.8870)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2007, 8, 13, 7, 33, 12))"
                            End="@(new DateTime(2022, 6, 6, 16, 11, 6))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(105, 160, 218),
                                new Dimension(197.4088),
                                SimpleLineSymbolStyle.None,
                                Cap.Butt,
                                Join.Miter,
                                new LineSymbolMarker(new MapColor(177, 129, 111),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Arrow),
                                889.2344))"
                            Color="@(new MapColor(25, 54, 109))"
                            Style="@(SimpleFillSymbolStyle.Solid)">
                        </SimpleFillSymbol>
                        <PictureMarkerSymbol 
                            Angle="@(278.6382)"
                            Color="@(new MapColor(173, 31, 187))"
                            Xoffset="@(new Dimension(649.7672))"
                            Yoffset="@(new Dimension(490.6859))">
                        </PictureMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(246, 1, 125))"
                            Width="@(new Dimension(475.2236))"
                            Style="@(SimpleLineSymbolStyle.LongDashDot)"
                            Cap="@(Cap.Butt)"
                            Join="@(Join.Miter)"
                            Marker="@(new LineSymbolMarker(new MapColor(207, 199, 242),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.Circle))"
                            MiterLimit="@(93.6253)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Normal;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(78.5959,
                    63.5049,
                    -18.3613,
                    -73.0617,
                    232.5903,
                    747.8201,
                    395.5909,
                    182.9087,
                new SpatialReference(8,
                        "expedita",
                        "fugiat",
                        "vero"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(115, 232, 157),
                    new Dimension(561.8685),
                SimpleLineSymbolStyle.DashDot,
                Cap.Butt,
                Join.Round,
                new LineSymbolMarker(new MapColor(7, 98, 161),
                    LinePlacement.End,
                    LineSymbolMarkerStyle.X),
                    240.2317);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                    new Dimension(193.7198),
                    new Dimension(536.2811),
                    265.9239,
                    new Dimension(780.8850),
                    new Dimension(111.7781),
                new MapColor(52, 240, 95));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(68, 233, 205),
                    new Dimension(239.9707),
                    SimpleLineSymbolStyle.ShortDot,
                    Cap.Butt,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(137, 114, 70),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Cross),
                    78.9292),
                new MapColor(71, 186, 222),
                SimpleFillSymbolStyle.ForwardDiagonal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 3, 18, 3, 15, 57),
                    new DateTime(2010, 1, 16, 18, 51, 17));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
