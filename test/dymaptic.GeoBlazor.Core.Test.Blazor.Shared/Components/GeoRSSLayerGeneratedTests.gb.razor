@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("est adipisci qui")"
                        Opacity="@(0.8329)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Normal)"
                        Effect="@(new Effect("molestias",
                            17333172.8886))"
                        FullExtent="@(new Extent(-40.7993,
                                137.9987,
                                88.5425,
                                -60.0215,
                                335.4205,
                                994.1819,
                                786.8316,
                                951.3138,
                            new SpatialReference(4,
                                    "reprehenderit",
                                    "vel",
                                    "non"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(37198144.2242)"
                        MinScale="@(15164.1245)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(904.7739)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 5, 25, 21, 37, 48))"
                            End="@(new DateTime(2022, 4, 8, 22, 12, 11))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(161, 157, 32),
                                new Dimension(146.4659),
                                SimpleLineSymbolStyle.ShortDashDot,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(112, 52, 156),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Cross),
                                651.5126))"
                            Color="@(new MapColor(169, 84, 141))"
                            Style="@(SimpleFillSymbolStyle.Cross)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(629.4818)"
                            Color="@(new MapColor(104, 72, 176))"
                            Xoffset="@(new Dimension(828.2726))"
                            Yoffset="@(new Dimension(189.3497))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(244, 92, 93))"
                            Width="@(new Dimension(24.0288))"
                            Style="@(SimpleLineSymbolStyle.Solid)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Miter)"
                            Marker="@(new LineSymbolMarker(new MapColor(111, 13, 98),
                                LinePlacement.End,
                                LineSymbolMarkerStyle.Square))"
                            MiterLimit="@(16.9119)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.HardLight;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(169.2320,
                    1.0425,
                    18.6474,
                    64.5170,
                    122.6266,
                    807.2261,
                    862.0548,
                    973.1282,
                new SpatialReference(4,
                        "quam",
                        "incidunt",
                        "optio"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(239, 198, 56),
                    new Dimension(363.0296),
                SimpleLineSymbolStyle.None,
                Cap.Square,
                Join.Miter,
                new LineSymbolMarker(new MapColor(188, 98, 49),
                    LinePlacement.Begin,
                    LineSymbolMarkerStyle.Cross),
                    121.9967);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(58.1570),
                    new Dimension(195.2488),
                    106.4670,
                    new Dimension(165.8625),
                    new Dimension(454.6486),
                new MapColor(239, 186, 232));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(182, 75, 242),
                    new Dimension(849.8283),
                    SimpleLineSymbolStyle.LongDashDotDot,
                    Cap.Round,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(3, 43, 117),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Cross),
                    690.5055),
                new MapColor(180, 254, 164),
                SimpleFillSymbolStyle.DiagonalCross);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 7, 26, 15, 10, 43),
                    new DateTime(2011, 4, 13, 15, 2, 51));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
