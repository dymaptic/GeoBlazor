@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("et tempora distinctio")"
                        Opacity="@(0.1934)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Average)"
                        Effect="@(new Effect("voluptatibus",
                            48125488.4094))"
                        FullExtent="@(new Extent(-16.5787,
                                -171.5371,
                                85.9141,
                                -83.8088,
                                107.6007,
                                943.9168,
                                875.6648,
                                639.1192,
                            new SpatialReference(7,
                                    "adipisci",
                                    "modi",
                                    "distinctio"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(35752548.1904)"
                        MinScale="@(46132.3354)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(472.3534)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 5, 8, 11, 34, 20))"
                            End="@(new DateTime(2002, 7, 16, 1, 9, 31))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(245, 166, 27),
                                new Dimension(976.0872),
                                SimpleLineSymbolStyle.LongDash,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(26, 6, 246),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Cross),
                                357.6011))"
                            Color="@(new MapColor(34, 162, 159))"
                            Style="@(SimpleFillSymbolStyle.Horizontal)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(101.5066)"
                            Color="@(new MapColor(143, 245, 175))"
                            Xoffset="@(new Dimension(766.1333))"
                            Yoffset="@(new Dimension(654.7951))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(1, 14, 156))"
                            Width="@(new Dimension(686.0286))"
                            Style="@(SimpleLineSymbolStyle.LongDash)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Miter)"
                            Marker="@(new LineSymbolMarker(new MapColor(221, 14, 212),
                                LinePlacement.BeginEnd,
                                LineSymbolMarkerStyle.Arrow))"
                            MiterLimit="@(441.7672)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Plus;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(17.6606,
                    18.6125,
                    -25.3708,
                    79.2320,
                    221.2833,
                    412.7030,
                    513.6009,
                    914.5618,
                new SpatialReference(2,
                        "voluptates",
                        "sunt",
                        "explicabo"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(127, 23, 235),
                    new Dimension(756.2306),
                SimpleLineSymbolStyle.ShortDashDot,
                Cap.Square,
                Join.Round,
                new LineSymbolMarker(new MapColor(110, 100, 64),
                    LinePlacement.BeginEnd,
                    LineSymbolMarkerStyle.Circle),
                    857.5751);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new SimpleMarkerSymbol(new Outline(new MapColor(70, 69, 168),
                    new Dimension(490.5952),
                    SimpleLineSymbolStyle.Dash,
                    Cap.Butt,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(138, 207, 171),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Arrow),
                    897.7697),
                new MapColor(12, 252, 8),
                    new Dimension(131.5396),
                SimpleMarkerSymbolStyle.X,
                    343.1686,
                    new Dimension(9.0815),
                    new Dimension(834.1656),
                    "quas");
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(192, 196, 49),
                    new Dimension(738.5071),
                    SimpleLineSymbolStyle.ShortDot,
                    Cap.Round,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(131, 108, 234),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Diamond),
                    444.5741),
                new MapColor(208, 85, 23),
                SimpleFillSymbolStyle.BackwardDiagonal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 2, 14, 18, 27, 23),
                    new DateTime(2007, 10, 6, 13, 32, 31));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
