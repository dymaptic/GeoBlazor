@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("a qui qui")"
                        Opacity="@(0.6234)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Exclusion)"
                        Effect="@(new Effect("tempora",
                            12698036.6888))"
                        FullExtent="@(new Extent(31.5191,
                                -111.0923,
                                30.0135,
                                -25.3154,
                                946.4107,
                                35.0468,
                                367.8209,
                                455.1610,
                            new SpatialReference(8,
                                    "esse",
                                    "ut",
                                    "sed"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(38393137.9214)"
                        MinScale="@(36576.2846)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(80.1165)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 7, 20, 0, 27, 13))"
                            End="@(new DateTime(2011, 10, 10, 14, 11, 22))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(112, 157, 201),
                                new Dimension(337.0971),
                                SimpleLineSymbolStyle.ShortDashDotDot,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(168, 130, 45),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Arrow),
                                358.3986))"
                            Color="@(new MapColor(106, 174, 121))"
                            Style="@(SimpleFillSymbolStyle.ForwardDiagonal)">
                        </SimpleFillSymbol>
                        <PictureMarkerSymbol 
                            Angle="@(789.7888)"
                            Color="@(new MapColor(64, 168, 76))"
                            Xoffset="@(new Dimension(134.6913))"
                            Yoffset="@(new Dimension(933.7568))">
                        </PictureMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(48, 226, 72))"
                            Width="@(new Dimension(623.0454))"
                            Style="@(SimpleLineSymbolStyle.Dash)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Miter)"
                            Marker="@(new LineSymbolMarker(new MapColor(227, 151, 224),
                                LinePlacement.BeginEnd,
                                LineSymbolMarkerStyle.Circle))"
                            MiterLimit="@(484.8410)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Xor;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-69.5543,
                    22.8579,
                    4.5293,
                    -15.1460,
                    759.4142,
                    804.9359,
                    266.8143,
                    965.9273,
                new SpatialReference(8,
                        "quia",
                        "qui",
                        "eius"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(39, 177, 76),
                    new Dimension(928.2420),
                SimpleLineSymbolStyle.LongDashDot,
                Cap.Square,
                Join.Round,
                new LineSymbolMarker(new MapColor(121, 90, 203),
                    LinePlacement.BeginEnd,
                    LineSymbolMarkerStyle.Diamond),
                    760.0344);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(880.9754),
                    new Dimension(802.4279),
                    832.1233,
                    new Dimension(441.1423),
                    new Dimension(83.9768),
                new MapColor(5, 209, 62));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(0, 181, 216),
                    new Dimension(878.6664),
                    SimpleLineSymbolStyle.LongDashDot,
                    Cap.Butt,
                    Join.Miter,
                    new LineSymbolMarker(new MapColor(77, 130, 99),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Circle),
                    241.2373),
                new MapColor(181, 166, 250),
                SimpleFillSymbolStyle.Horizontal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 5, 24, 8, 28, 8),
                    new DateTime(2010, 11, 13, 16, 17, 40));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
