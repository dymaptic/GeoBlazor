@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("veniam voluptatibus perspiciatis")"
                        Opacity="@(0.7555)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Difference)"
                        Effect="@(new Effect("omnis",
                            7814597.2167))"
                        FullExtent="@(new Extent(-44.6201,
                                81.0195,
                                -82.3911,
                                -37.2760,
                                628.7238,
                                923.2281,
                                84.5064,
                                474.5408,
                            new SpatialReference(8,
                                    "tempore",
                                    "sunt",
                                    "quidem"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(21436169.8665)"
                        MinScale="@(43820.6377)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(175.7492)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2008, 11, 2, 6, 10, 36))"
                            End="@(new DateTime(2014, 11, 21, 11, 45, 38))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(70, 101, 116),
                                new Dimension(778.7315),
                                SimpleLineSymbolStyle.ShortDashDot,
                                Cap.Round,
                                Join.Miter,
                                new LineSymbolMarker(new MapColor(230, 201, 116),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Square),
                                634.6328))"
                            Color="@(new MapColor(51, 121, 232))"
                            Style="@(SimpleFillSymbolStyle.Horizontal)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(257.6981)"
                            Color="@(new MapColor(143, 197, 175))"
                            Xoffset="@(new Dimension(813.0418))"
                            Yoffset="@(new Dimension(271.3099))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(195, 238, 210))"
                            Width="@(new Dimension(500.1608))"
                            Style="@(SimpleLineSymbolStyle.ShortDot)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Bevel)"
                            Marker="@(new LineSymbolMarker(new MapColor(162, 210, 93),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.X))"
                            MiterLimit="@(792.1417)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Lighter;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(23.9155,
                    2.9911,
                    54.7815,
                    56.4885,
                    150.1957,
                    239.7005,
                    30.4583,
                    758.6342,
                new SpatialReference(5,
                        "voluptates",
                        "ducimus",
                        "itaque"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(125, 85, 98),
                    new Dimension(96.1180),
                SimpleLineSymbolStyle.LongDashDotDot,
                Cap.Round,
                Join.Round,
                new LineSymbolMarker(new MapColor(131, 3, 86),
                    LinePlacement.End,
                    LineSymbolMarkerStyle.Diamond),
                    213.2677);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(977.2099),
                    new Dimension(566.3533),
                    549.5833,
                    new Dimension(82.9858),
                    new Dimension(357.4967),
                new MapColor(102, 196, 38));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(218, 204, 236),
                    new Dimension(812.8270),
                    SimpleLineSymbolStyle.None,
                    Cap.Round,
                    Join.Miter,
                    new LineSymbolMarker(new MapColor(230, 125, 229),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Circle),
                    190.0926),
                new MapColor(85, 231, 157),
                SimpleFillSymbolStyle.Solid);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 1, 14, 6, 10, 44),
                    new DateTime(2010, 1, 1, 0, 0, 23));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
