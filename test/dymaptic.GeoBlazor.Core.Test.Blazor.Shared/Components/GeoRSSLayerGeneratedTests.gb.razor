@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("aut rerum voluptatum")"
                        Opacity="@(0.3070)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.SourceAtop)"
                        Effect="@(new Effect("quaerat",
                            47926229.5509))"
                        FullExtent="@(new Extent(68.3628,
                                14.9326,
                                -56.5136,
                                25.8629,
                                21.9805,
                                829.7803,
                                55.5791,
                                678.8715,
                            new SpatialReference(5,
                                    "est",
                                    "molestiae",
                                    "est"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(1227028.0773)"
                        MinScale="@(12525.1105)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(118.4217)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 3, 20, 9, 23, 49))"
                            End="@(new DateTime(2015, 2, 16, 8, 25, 6))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(220, 199, 178),
                                new Dimension(870.6354),
                                SimpleLineSymbolStyle.ShortDashDotDot,
                                Cap.Butt,
                                Join.Miter,
                                new LineSymbolMarker(new MapColor(45, 168, 128),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Circle),
                                683.1444))"
                            Color="@(new MapColor(63, 218, 158))"
                            Style="@(SimpleFillSymbolStyle.ForwardDiagonal)">
                        </SimpleFillSymbol>
                        <PictureMarkerSymbol 
                            Angle="@(141.0314)"
                            Color="@(new MapColor(229, 137, 230))"
                            Xoffset="@(new Dimension(758.2576))"
                            Yoffset="@(new Dimension(155.0915))">
                        </PictureMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(153, 136, 78))"
                            Width="@(new Dimension(513.2104))"
                            Style="@(SimpleLineSymbolStyle.None)"
                            Cap="@(Cap.Butt)"
                            Join="@(Join.Round)"
                            Marker="@(new LineSymbolMarker(new MapColor(230, 198, 226),
                                LinePlacement.BeginEnd,
                                LineSymbolMarkerStyle.Square))"
                            MiterLimit="@(710.3624)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-63.6338,
                    -49.3634,
                    53.7971,
                    42.0337,
                    345.9985,
                    602.1743,
                    740.2023,
                    345.4043,
                new SpatialReference(1,
                        "aut",
                        "corrupti",
                        "eius"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(156, 163, 64),
                    new Dimension(87.4577),
                SimpleLineSymbolStyle.ShortDashDotDot,
                Cap.Round,
                Join.Round,
                new LineSymbolMarker(new MapColor(164, 31, 103),
                    LinePlacement.BeginEnd,
                    LineSymbolMarkerStyle.Diamond),
                    267.6043);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(869.8046),
                    new Dimension(548.0151),
                    739.7321,
                    new Dimension(766.7269),
                    new Dimension(427.9693),
                new MapColor(244, 150, 90));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(173, 157, 26),
                    new Dimension(581.3963),
                    SimpleLineSymbolStyle.LongDash,
                    Cap.Round,
                    Join.Miter,
                    new LineSymbolMarker(new MapColor(251, 104, 202),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Diamond),
                    536.7310),
                new MapColor(106, 78, 76),
                SimpleFillSymbolStyle.Vertical);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 3, 27, 1, 16, 29),
                    new DateTime(2007, 4, 4, 12, 41, 33));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
