@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("voluptatem similique fugiat")"
                        Opacity="@(0.6891)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.SourceAtop)"
                        Effect="@(new Effect("quo",
                            3551641.1913))"
                        FullExtent="@(new Extent(-11.3728,
                                -73.4088,
                                68.0884,
                                -83.8940,
                                445.9095,
                                114.0747,
                                16.9946,
                                624.0170,
                            new SpatialReference(9,
                                    "nemo",
                                    "tempore",
                                    "ut"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(38727103.0389)"
                        MinScale="@(23145.1893)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(136.8936)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 11, 12, 14, 49, 57))"
                            End="@(new DateTime(2011, 4, 24, 14, 5, 21))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(19, 67, 212),
                                new Dimension(349.5721),
                                SimpleLineSymbolStyle.ShortDash,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(94, 239, 203),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Arrow),
                                695.4437))"
                            Color="@(new MapColor(145, 118, 76))"
                            Style="@(SimpleFillSymbolStyle.Solid)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(115.9742)"
                            Color="@(new MapColor(179, 236, 159))"
                            Xoffset="@(new Dimension(627.6787))"
                            Yoffset="@(new Dimension(568.8768))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(166, 98, 18))"
                            Width="@(new Dimension(680.9692))"
                            Style="@(SimpleLineSymbolStyle.ShortDashDotDot)"
                            Cap="@(Cap.Butt)"
                            Join="@(Join.Bevel)"
                            Marker="@(new LineSymbolMarker(new MapColor(108, 68, 15),
                                LinePlacement.BeginEnd,
                                LineSymbolMarkerStyle.Circle))"
                            MiterLimit="@(633.9793)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Multiply;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(7.1544,
                    -147.8267,
                    -25.6922,
                    70.1140,
                    921.7862,
                    581.6107,
                    604.2954,
                    630.6473,
                new SpatialReference(1,
                        "nisi",
                        "unde",
                        "accusamus"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(22, 128, 227),
                    new Dimension(738.1873),
                SimpleLineSymbolStyle.LongDash,
                Cap.Butt,
                Join.Miter,
                new LineSymbolMarker(new MapColor(211, 120, 138),
                    LinePlacement.End,
                    LineSymbolMarkerStyle.Diamond),
                    725.8124);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(61.1681),
                    new Dimension(277.1466),
                    439.1292,
                    new Dimension(239.6366),
                    new Dimension(893.1281),
                new MapColor(228, 243, 142));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(39, 41, 107),
                    new Dimension(248.1529),
                    SimpleLineSymbolStyle.Dash,
                    Cap.Round,
                    Join.Miter,
                    new LineSymbolMarker(new MapColor(216, 138, 170),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Circle),
                    624.4640),
                new MapColor(227, 171, 46),
                SimpleFillSymbolStyle.ForwardDiagonal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 6, 14, 18, 16, 12),
                    new DateTime(2003, 4, 8, 21, 0, 48));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
