@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("adipisci ut similique")"
                        Opacity="@(0.9118)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Overlay)"
                        Effect="@(new Effect("iusto",
                            39509726.9647))"
                        FullExtent="@(new Extent(-113.3183,
                                138.4009,
                                -87.4315,
                                -52.9386,
                                477.5208,
                                304.3251,
                                496.2898,
                                111.0377,
                            new SpatialReference(2,
                                    "sint",
                                    "et",
                                    "inventore"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(34526927.4687)"
                        MinScale="@(45314.3721)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(771.2894)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2011, 9, 5, 10, 13, 42))"
                            End="@(new DateTime(2015, 4, 9, 4, 25, 18))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(236, 149, 243),
                                new Dimension(874.8820),
                                SimpleLineSymbolStyle.ShortDashDotDot,
                                Cap.Round,
                                Join.Miter,
                                new LineSymbolMarker(new MapColor(18, 27, 244),
                                    LinePlacement.End,
                                    LineSymbolMarkerStyle.Diamond),
                                581.2604))"
                            Color="@(new MapColor(43, 90, 222))"
                            Style="@(SimpleFillSymbolStyle.Cross)">
                        </SimpleFillSymbol>
                        <PictureMarkerSymbol 
                            Angle="@(125.9759)"
                            Color="@(new MapColor(128, 183, 127))"
                            Xoffset="@(new Dimension(370.5069))"
                            Yoffset="@(new Dimension(876.2832))">
                        </PictureMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(225, 51, 230))"
                            Width="@(new Dimension(543.4255))"
                            Style="@(SimpleLineSymbolStyle.ShortDot)"
                            Cap="@(Cap.Butt)"
                            Join="@(Join.Round)"
                            Marker="@(new LineSymbolMarker(new MapColor(110, 161, 56),
                                LinePlacement.End,
                                LineSymbolMarkerStyle.Arrow))"
                            MiterLimit="@(700.4788)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.VividLight;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-131.6636,
                    -156.7113,
                    -85.8122,
                    49.2433,
                    820.4563,
                    394.1986,
                    385.4553,
                    554.7973,
                new SpatialReference(9,
                        "ipsa",
                        "aut",
                        "fugiat"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(45, 75, 112),
                    new Dimension(726.5828),
                SimpleLineSymbolStyle.Dash,
                Cap.Round,
                Join.Miter,
                new LineSymbolMarker(new MapColor(212, 110, 217),
                    LinePlacement.Begin,
                    LineSymbolMarkerStyle.Diamond),
                    241.6146);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(15.2681),
                    new Dimension(726.3030),
                    777.9561,
                    new Dimension(596.2102),
                    new Dimension(88.3492),
                new MapColor(206, 184, 238));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(154, 27, 144),
                    new Dimension(232.6304),
                    SimpleLineSymbolStyle.ShortDash,
                    Cap.Butt,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(124, 61, 226),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Arrow),
                    157.7421),
                new MapColor(14, 21, 211),
                SimpleFillSymbolStyle.Vertical);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 7, 10, 0, 42, 52),
                    new DateTime(2009, 6, 6, 1, 40, 50));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
