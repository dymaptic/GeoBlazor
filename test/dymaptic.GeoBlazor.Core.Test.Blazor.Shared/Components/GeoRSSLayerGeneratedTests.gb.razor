@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("enim animi ut")"
                        Opacity="@(0.1282)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Effect="@(new Effect("fugiat",
                            28400616.5156))"
                        FullExtent="@(new Extent(-69.8357,
                                143.6667,
                                -33.1835,
                                -63.4111,
                                16.7396,
                                927.1870,
                                381.1136,
                                66.2947,
                            new SpatialReference(3,
                                    "qui",
                                    "sed",
                                    "consequatur"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(13101822.1769)"
                        MinScale="@(13022.9634)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(821.6180)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2009, 8, 14, 19, 39, 38))"
                            End="@(new DateTime(2018, 8, 22, 13, 28, 54))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(110, 152, 127),
                                new Dimension(845.4190),
                                SimpleLineSymbolStyle.ShortDashDot,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(81, 40, 235),
                                    LinePlacement.End,
                                    LineSymbolMarkerStyle.Cross),
                                907.4006))"
                            Color="@(new MapColor(222, 223, 130))"
                            Style="@(SimpleFillSymbolStyle.Vertical)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(678.5833)"
                            Color="@(new MapColor(179, 202, 219))"
                            Xoffset="@(new Dimension(923.3979))"
                            Yoffset="@(new Dimension(314.1954))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(95, 161, 85))"
                            Width="@(new Dimension(640.8907))"
                            Style="@(SimpleLineSymbolStyle.ShortDot)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Round)"
                            Marker="@(new LineSymbolMarker(new MapColor(50, 17, 171),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.X))"
                            MiterLimit="@(644.3834)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Overlay;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-1.3528,
                    -9.3801,
                    -58.7912,
                    0.4196,
                    612.1111,
                    626.8102,
                    427.7708,
                    132.9569,
                new SpatialReference(7,
                        "minima",
                        "non",
                        "qui"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(154, 166, 204),
                    new Dimension(651.0391),
                SimpleLineSymbolStyle.DashDot,
                Cap.Butt,
                Join.Miter,
                new LineSymbolMarker(new MapColor(23, 197, 185),
                    LinePlacement.BeginEnd,
                    LineSymbolMarkerStyle.Circle),
                    545.1357);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                    new Dimension(19.9008),
                    new Dimension(434.4047),
                    107.1973,
                    new Dimension(979.9143),
                    new Dimension(249.0232),
                new MapColor(49, 249, 8));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(13, 151, 194),
                    new Dimension(123.9165),
                    SimpleLineSymbolStyle.DashDot,
                    Cap.Butt,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(48, 201, 35),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Diamond),
                    51.1198),
                new MapColor(133, 41, 144),
                SimpleFillSymbolStyle.Cross);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 11, 5, 2, 10, 35),
                    new DateTime(2015, 8, 3, 19, 13, 4));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
