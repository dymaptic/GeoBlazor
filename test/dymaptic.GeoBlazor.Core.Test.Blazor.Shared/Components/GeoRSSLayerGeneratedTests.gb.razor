@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("eum in quis")"
                        Opacity="@(0.4728)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Luminosity)"
                        Effect="@(new Effect("id",
                            2537710.9038))"
                        FullExtent="@(new Extent(-39.9316,
                                -54.3619,
                                -69.1845,
                                -87.7965,
                                493.8658,
                                125.0906,
                                155.0438,
                                538.1571,
                            new SpatialReference(9,
                                    "accusamus",
                                    "adipisci",
                                    "et"),
                                true,
                                true))"
                        LegendEnabled="@(true)"
                        MaxScale="@(40372700.7890)"
                        MinScale="@(47638.0700)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(546.5419)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2002, 6, 11, 4, 36, 20))"
                            End="@(new DateTime(2001, 5, 19, 15, 3, 16))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(123, 85, 65),
                                new Dimension(229.8214),
                                SimpleLineSymbolStyle.ShortDash,
                                Cap.Butt,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(121, 74, 75),
                                    LinePlacement.End,
                                    LineSymbolMarkerStyle.Arrow),
                                894.1777))"
                            Color="@(new MapColor(233, 17, 200))"
                            Style="@(SimpleFillSymbolStyle.Vertical)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(612.9518)"
                            Color="@(new MapColor(213, 128, 172))"
                            Xoffset="@(new Dimension(484.6388))"
                            Yoffset="@(new Dimension(975.5939))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(231, 168, 36))"
                            Width="@(new Dimension(511.5643))"
                            Style="@(SimpleLineSymbolStyle.ShortDot)"
                            Cap="@(Cap.Butt)"
                            Join="@(Join.Bevel)"
                            Marker="@(new LineSymbolMarker(new MapColor(213, 242, 84),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.X))"
                            MiterLimit="@(2.7361)">
                        </SimpleLineSymbol>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Normal;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(165.8990,
                    83.5604,
                    -15.0073,
                    -52.6580,
                    576.2906,
                    742.8670,
                    380.3883,
                    904.3301,
                new SpatialReference(2,
                        "id",
                        "minima",
                        "blanditiis"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(132, 76, 118),
                    new Dimension(251.5669),
                SimpleLineSymbolStyle.None,
                Cap.Square,
                Join.Round,
                new LineSymbolMarker(new MapColor(182, 170, 241),
                    LinePlacement.BeginEnd,
                    LineSymbolMarkerStyle.Cross),
                    711.2849);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                    new Dimension(812.3729),
                    new Dimension(669.4057),
                    294.1506,
                    new Dimension(837.7738),
                    new Dimension(276.2122),
                new MapColor(152, 46, 240));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(7, 5, 78),
                    new Dimension(289.0809),
                    SimpleLineSymbolStyle.ShortDot,
                    Cap.Round,
                    Join.Miter,
                    new LineSymbolMarker(new MapColor(73, 85, 76),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Cross),
                    697.8024),
                new MapColor(230, 41, 184),
                SimpleFillSymbolStyle.BackwardDiagonal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 1, 4, 7, 48, 42),
                    new DateTime(2006, 4, 22, 22, 21, 56));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
