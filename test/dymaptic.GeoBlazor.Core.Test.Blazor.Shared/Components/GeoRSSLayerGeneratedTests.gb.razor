@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("ullam illo magnam")"
                        Opacity="@(0.3377)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.DestinationOver)"
                        Effect="@(new Effect("quis",
                            17023074.1467))"
                        LegendEnabled="@(true)"
                        MaxScale="@(38267087.5403)"
                        MinScale="@(13730.5447)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(813.4586)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2006, 9, 5, 6, 16, 24))"
                            End="@(new DateTime(2018, 8, 4, 3, 47, 34))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(130, 74, 117),
                                new Dimension(868.3040),
                                SimpleLineSymbolStyle.ShortDashDotDot,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(150, 110, 76),
                                    LinePlacement.End,
                                    LineSymbolMarkerStyle.Circle),
                                711.0355))"
                            Color="@(new MapColor(92, 62, 83))"
                            Style="@(SimpleFillSymbolStyle.Cross)">
                        </SimpleFillSymbol>
                        <PictureMarkerSymbol 
                            Angle="@(484.3773)"
                            Color="@(new MapColor(144, 94, 86))"
                            Xoffset="@(new Dimension(279.7033))"
                            Yoffset="@(new Dimension(859.1025))">
                        </PictureMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(108, 23, 100))"
                            Width="@(new Dimension(601.2089))"
                            Style="@(SimpleLineSymbolStyle.LongDash)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Round)"
                            Marker="@(new LineSymbolMarker(new MapColor(122, 69, 235),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.Circle))"
                            MiterLimit="@(193.6805)">
                        </SimpleLineSymbol>
                        <Extent 
                            Xmax="@(-11.0796)"
                            Xmin="@(-82.2167)"
                            Ymax="@(58.1546)"
                            Ymin="@(-12.4654)"
                            Zmax="@(220.0442)"
                            Zmin="@(176.7267)"
                            Mmax="@(815.2470)"
                            Mmin="@(756.3515)"
                            SpatialReference="@(new SpatialReference(9,
                                    "voluptate",
                                    "et",
                                    "aut"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Overlay;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-101.9478,
                    101.9976,
                    38.7803,
                    -26.7371,
                    802.5520,
                    745.5494,
                    496.4696,
                    953.9484,
                new SpatialReference(9,
                        "deleniti",
                        "sint",
                        "sunt"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(93, 99, 77),
                    new Dimension(842.2805),
                SimpleLineSymbolStyle.None,
                Cap.Butt,
                Join.Round,
                new LineSymbolMarker(new MapColor(210, 51, 33),
                    LinePlacement.Begin,
                    LineSymbolMarkerStyle.Circle),
                    84.8139);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                    new Dimension(672.3072),
                    new Dimension(618.0744),
                    365.2348,
                    new Dimension(605.3692),
                    new Dimension(35.7463),
                new MapColor(143, 10, 195));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(211, 83, 130),
                    new Dimension(872.4598),
                    SimpleLineSymbolStyle.ShortDash,
                    Cap.Round,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(102, 32, 132),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Arrow),
                    463.4082),
                new MapColor(86, 83, 171),
                SimpleFillSymbolStyle.Horizontal);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 7, 24, 14, 25, 54),
                    new DateTime(2020, 1, 18, 7, 8, 17));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
