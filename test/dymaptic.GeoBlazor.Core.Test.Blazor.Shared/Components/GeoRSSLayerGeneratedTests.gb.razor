@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoRSSLayer(Action renderHandler)
    {
        GeoRSSLayer? geoRSSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoRSSLayer 
                        Url="@("https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml")"
                        Title="@("aut ab itaque")"
                        Opacity="@(0.2298)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Xor)"
                        Effect="@(new Effect("voluptatum",
                            31842929.5617))"
                        LegendEnabled="@(true)"
                        MaxScale="@(26625869.6987)"
                        MinScale="@(38216.7349)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(101.4912)"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 6, 19, 12, 6, 58))"
                            End="@(new DateTime(2006, 10, 18, 8, 2, 16))">
                        </TimeExtent>
                        <SimpleFillSymbol 
                            Outline="@(new Outline(new MapColor(190, 24, 253),
                                new Dimension(143.4993),
                                SimpleLineSymbolStyle.DashDot,
                                Cap.Round,
                                Join.Round,
                                new LineSymbolMarker(new MapColor(185, 181, 2),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Circle),
                                138.1799))"
                            Color="@(new MapColor(228, 186, 53))"
                            Style="@(SimpleFillSymbolStyle.Horizontal)">
                        </SimpleFillSymbol>
                        <SimpleMarkerSymbol 
                            Angle="@(710.8989)"
                            Color="@(new MapColor(41, 147, 92))"
                            Xoffset="@(new Dimension(477.6995))"
                            Yoffset="@(new Dimension(670.6096))">
                        </SimpleMarkerSymbol>
                        <SimpleLineSymbol 
                            Color="@(new MapColor(123, 97, 51))"
                            Width="@(new Dimension(92.6728))"
                            Style="@(SimpleLineSymbolStyle.ShortDashDotDot)"
                            Cap="@(Cap.Round)"
                            Join="@(Join.Bevel)"
                            Marker="@(new LineSymbolMarker(new MapColor(5, 36, 250),
                                LinePlacement.End,
                                LineSymbolMarkerStyle.Diamond))"
                            MiterLimit="@(716.6555)">
                        </SimpleLineSymbol>
                        <Extent 
                            Xmax="@(-179.3371)"
                            Xmin="@(-61.1874)"
                            Ymax="@(-25.5178)"
                            Ymin="@(65.9190)"
                            Zmax="@(705.9412)"
                            Zmin="@(730.4496)"
                            Mmax="@(90.8385)"
                            Mmin="@(375.2768)"
                            SpatialReference="@(new SpatialReference(9,
                                    "ab",
                                    "in",
                                    "consequuntur"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </GeoRSSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoRSSLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoRSSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geo-rss");
        await geoRSSLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await geoRSSLayer.SetListMode(testListMode);
        var listMode = await geoRSSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Color;
        await geoRSSLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoRSSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-120.9420,
                    36.3476,
                    -83.0060,
                    -38.2268,
                    510.7621,
                    95.6692,
                    525.8858,
                    10.6922,
                new SpatialReference(1,
                        "nesciunt",
                        "harum",
                        "suscipit"),
                    true,
                    true);
        await geoRSSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoRSSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleLineSymbol testLineSymbol = new SimpleLineSymbol(new MapColor(214, 151, 5),
                    new Dimension(225.1246),
                SimpleLineSymbolStyle.ShortDashDotDot,
                Cap.Square,
                Join.Miter,
                new LineSymbolMarker(new MapColor(147, 102, 217),
                    LinePlacement.Begin,
                    LineSymbolMarkerStyle.X),
                    848.0602);
        await geoRSSLayer.SetLineSymbol(testLineSymbol);
        var lineSymbol = await geoRSSLayer.GetLineSymbol();
        Assert.AreEqual(testLineSymbol, lineSymbol);
        MarkerSymbol testPointSymbol = new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                    new Dimension(577.7676),
                    new Dimension(991.5691),
                    9.8884,
                    new Dimension(45.4448),
                    new Dimension(679.8591),
                new MapColor(108, 28, 211));
        await geoRSSLayer.SetPointSymbol(testPointSymbol);
        var pointSymbol = await geoRSSLayer.GetPointSymbol();
        Assert.AreEqual(testPointSymbol, pointSymbol);
        SimpleFillSymbol testPolygonSymbol = new SimpleFillSymbol(new Outline(new MapColor(21, 186, 70),
                    new Dimension(293.1263),
                    SimpleLineSymbolStyle.None,
                    Cap.Round,
                    Join.Round,
                    new LineSymbolMarker(new MapColor(251, 242, 242),
                        LinePlacement.End,
                        LineSymbolMarkerStyle.Cross),
                    247.1734),
                new MapColor(167, 23, 198),
                SimpleFillSymbolStyle.Solid);
        await geoRSSLayer.SetPolygonSymbol(testPolygonSymbol);
        var polygonSymbol = await geoRSSLayer.GetPolygonSymbol();
        Assert.AreEqual(testPolygonSymbol, polygonSymbol);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 7, 9, 14, 48, 2),
                    new DateTime(2017, 3, 18, 21, 45, 53));
        await geoRSSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoRSSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
