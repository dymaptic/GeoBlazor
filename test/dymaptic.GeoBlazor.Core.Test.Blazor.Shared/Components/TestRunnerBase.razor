@attribute [TestClass]
<div class="result-section" id="@ClassName">
    <h2>@Extensions.CamelCaseToSpaces(ClassName)</h2>
    <div @onclick="@(() => _collapsed = !_collapsed)" style="cursor: pointer; display: inline; font-weight: bold; color: white; padding: 5px; border-radius: 5px; margin-bottom: 5px;">@(_collapsed ? "\u25b6" : "\u25bc")</div>
    <button @onclick="() => RunTests()">Run Class Tests</button>
    @if (_failed.Any())
    {
        <button @onclick="() => RunTests(true)">Rerun Failed Class Tests</button>
    }
    <p>
        @if (_running)
        {
            <span style="color: orange; font-weight: bold">Running...&nbsp;</span>
        }
        @if (_passed.Any() || _failed.Any())
        {
            <span style="color: green;">Passed: @_passed.Count,</span>
            <span style="color: red;">Failed: @_failed.Count</span>
        }
    </p>
    <div class="detail-results @(_collapsed ? "collapsed" : "")">
        @foreach (KeyValuePair<string, string> entry in _testResults)
        {
            MethodInfo methodInfo = _methodInfos!.First(mi => mi.Name == entry.Key);
            <h3>@Extensions.CamelCaseToSpaces(entry.Key)</h3>
            <div class="test-results-container" id="@entry.Key">
                <div class="test-results-col">
                    <div class="button-row">
                        <button @onclick="@(() => RunTest(methodInfo))">Run Test</button>
                        <label>
                            <input type="checkbox" @bind="@_interactionToggles[entry.Key]" />
                            Pause for Interaction
                        </label>
                        @if (_currentTest == entry.Key)
                        {
                            <button @onclick="@(() => CleanupTest(entry.Key))">Stop</button>
                        }
                    </div>
                    @((MarkupString)entry.Value)
                </div>
                @if (_testRenderFragments.TryGetValue(entry.Key, out RenderFragment? fragment))
                {
                    <ErrorHandler MethodName="@entry.Key" OnError="OnRenderError">
                        <ChildContent>
                            <div style="display: flex; justify-content: center; position: relative;">
                                <div style="position: absolute; top: -100px; right: 10px;">
                                    <div style="position: relative; height: 100%; width: 100%;">
                                        @fragment
                                    </div>
                                </div>
                            </div>
                        </ChildContent>
                        <ErrorContent></ErrorContent>
                    </ErrorHandler>
                }
            </div>
        }
    </div>
</div>

@code {
    [Inject]
    public IJSRuntime JsRuntime { get; set; } = null!;

    [Parameter]
    public EventCallback<TestResult> OnTestResults { get; set; }

    public async Task RunTests(bool onlyFailedTests = false)
    {
        _running = true;
        _resultBuilder = new StringBuilder();
        _passed.Clear();
        
        foreach (string key in _testResults.Keys)
        {
            if (onlyFailedTests && !_failed.ContainsKey(key))
            {
                continue;
            }
            _testResults[key] = string.Empty;
        }
        _failed.Clear();
        
        foreach (MethodInfo method in _methodInfos!)
        {
            await RunTest(method);
        }
        
        _running = false;
    }

    public void Toggle(bool open)
    {
        _collapsed = !open;
    }

    protected override void OnInitialized()
    {
        _methodInfos = GetType()
            .GetMethods()
            .Where(m => m.GetCustomAttribute(typeof(TestMethodAttribute), false) != null)
            .ToArray();

        _testResults = _methodInfos.ToDictionary(m => m.Name, _ => string.Empty);
        _interactionToggles = _methodInfos.ToDictionary(m => m.Name, _ => false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_jsObjectReference is null)
        {
            IJSObjectReference? proJs = await JsModuleManager.GetArcGisJsPro(JsRuntime, default);
            IJSObjectReference coreJs = await JsModuleManager.GetArcGisJsCore(JsRuntime, proJs, default);
            _jsObjectReference = await JsRuntime.InvokeAsync<IJSObjectReference>("import", 
                "./_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/testRunner.js");
            await _jsObjectReference.InvokeVoidAsync("initialize", coreJs);
        }
    }

    protected void AddMapRenderFragment(RenderFragment fragment, [CallerMemberName] string methodName = "")
    {
        _testRenderFragments[methodName] = fragment;
    }

    protected async Task WaitForMapToRender([CallerMemberName] string methodName = "")
    {
        await InvokeAsync(StateHasChanged);
        var tries = 200;
        while (!_methodsWithRenderedMaps.Contains(methodName) && (tries > 0))
        {
            if (_mapRenderingExceptions.TryGetValue(methodName, out Exception? ex))
            {
                _mapRenderingExceptions.Remove(methodName);
                ExceptionDispatchInfo.Capture(ex).Throw();
            }
            await Task.Delay(100);
            tries--;
        }

        if (!_methodsWithRenderedMaps.Contains(methodName))
        {
            throw new TimeoutException("Map did not render in allotted time.");
        }
        _methodsWithRenderedMaps.Remove(methodName);
    }

    protected async Task AssertJavaScript(string jsAssertFunction, [CallerMemberName] string methodName = "", 
        params object[] args)
    {
        List<object> jsArgs = new() { methodName };
        jsArgs.AddRange(args);
        if (jsAssertFunction.Contains("."))
        {
            string[] parts = jsAssertFunction.Split('.');
            IJSObjectReference module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", 
                $"./_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/{parts[0]}.js");
            await module.InvokeVoidAsync(parts[1], jsArgs.ToArray());
        }
        else
        {
            await _jsObjectReference!.InvokeVoidAsync(jsAssertFunction, jsArgs.ToArray());   
        }
    }

    private async Task RunTest(MethodInfo methodInfo)
    {
        _currentTest = methodInfo.Name;
        _testResults[methodInfo.Name] = "<p style=\"color: orange; font-weight: bold\">Running...</p>";
        _resultBuilder = new StringBuilder();
        _passed.Remove(methodInfo.Name);
        _failed.Remove(methodInfo.Name);
        _testRenderFragments.Remove(methodInfo.Name);
        _mapRenderingExceptions.Remove(methodInfo.Name);
        _methodsWithRenderedMaps.Remove(methodInfo.Name);
        try
        {
            bool hasParameters = methodInfo.GetParameters().Any();
            if (methodInfo.ReturnType != typeof(Task))
            {
                if (hasParameters)
                {
                    void RenderHandler() => _methodsWithRenderedMaps.Add(methodInfo.Name);
                    methodInfo.Invoke(this, [(Action)RenderHandler]);
                }
                else
                {
                    methodInfo.Invoke(this, null);
                }
            }
            else
            {
                if (hasParameters)
                {
                    void RenderHandler() => _methodsWithRenderedMaps.Add(methodInfo.Name);
                    await (Task)methodInfo.Invoke(this, [(Action)RenderHandler])!;
                }
                else
                {
                    await (Task)methodInfo.Invoke(this, null)!;
                }
            }

            _passed[methodInfo.Name] = _resultBuilder.ToString();
            _resultBuilder.AppendLine("<p style=\"color: green; font-weight: bold\">Passed</p>");
        }
        catch (Exception ex)
        {
            if (_currentTest is null)
            {
                return;
            }
            _failed[methodInfo.Name] = $"{_resultBuilder}{Environment.NewLine}{ex.StackTrace}";
            _resultBuilder.AppendLine($"<p style=\"color: red; font-weight: bold\">{ex.Message.Replace(Environment.NewLine, "<br/>")}<br/>{ex.StackTrace?.Replace(Environment.NewLine, "<br/>")}</p>");
        }

        if (!_interactionToggles[methodInfo.Name])
        {
            await CleanupTest(methodInfo.Name);
        }
    }

    private async Task CleanupTest(string testName)
    {
        _methodsWithRenderedMaps.Remove(testName);
        _testResults[testName] = _resultBuilder.ToString();
        if (_testRenderFragments.ContainsKey(testName))
        {
            _testRenderFragments.Remove(testName);
        }
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await OnTestResults.InvokeAsync(new TestResult(ClassName, _passed, _failed));
        });
        _interactionToggles[testName] = false;
        _currentTest = null;
    }

    private void OnRenderError(ErrorEventArgs arg)
    {
        _mapRenderingExceptions[arg.MethodName] = arg.Exception;
    }

    private string ClassName => GetType().Name;
    private IJSObjectReference? _jsObjectReference;
    private StringBuilder _resultBuilder = new();
    private MethodInfo[]? _methodInfos;
    private Dictionary<string, string> _testResults = new();
    private bool _collapsed = true;
    private bool _running;
    private readonly Dictionary<string, RenderFragment> _testRenderFragments = new();
    private readonly List<string> _methodsWithRenderedMaps = new();
    private readonly Dictionary<string, Exception> _mapRenderingExceptions = new();
    private readonly Dictionary<string, string?> _passed = new();
    private readonly Dictionary<string, string?> _failed = new();
    private Dictionary<string, bool> _interactionToggles = [];
    private string? _currentTest;
}