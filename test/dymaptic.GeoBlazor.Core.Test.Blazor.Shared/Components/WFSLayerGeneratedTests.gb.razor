@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWFSLayer(Action renderHandler)
    {
        WFSLayer? wFSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WFSLayer 
                        BlendMode="@(BlendMode.SourceIn)"
                        Copyright="@("animi")"
                        DefinitionExpression="@("ipsam")"
                        DisplayField="@("pariatur")"
                        Effect="@(new Effect("a",
                            18869649.2002))"
                        GeometryType="@(SimpleGeometryType.Multipoint)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxPageCount="@(4)"
                        MaxRecordCount="@(3)"
                        MaxScale="@(16097840.8043)"
                        MinScale="@(4975.8227)"
                        Name="@("name")"
                        NamespaceUri="@("token")"
                        ObjectIdField="@("nemo")"
                        Opacity="@(0.3380)"
                        OutFields="@(["dolore"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(730.1029)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        Title="@("non consequatur doloribus")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")"
                        WfsCapabilities="@(new WFSCapabilities([new WFSFeatureType(282.8194,
                                    "dolore placeat",
                                new Extent(-143.8657,
                                        138.3273,
                                        69.3489,
                                        -10.8091,
                                        595.3026,
                                        180.9854,
                                        733.2937,
                                        799.2645,
                                    new SpatialReference(5,
                                            "maiores",
                                            "laborum",
                                            "dignissimos"),
                                        true,
                                        true),
                                    "phone",
                                    "updatedAt",
                                    "password",
                                    [422.3331],
                                    "consequatur natus inventore",
                                    "group")],
                            new WFSOperations(new WFSOperationsDescribeFeatureType("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0"),
                                new WFSOperationsGetCapabilities("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0"),
                                new WFSOperationsGetFeature("provident",
                                        true,
                                        "https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0"))))"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2016, 11, 21, 2, 31, 29))"
                            End="@(new DateTime(2010, 10, 23, 4, 29, 16))">
                        </TimeExtent>
                        <UniqueValueRenderer 
>
                            <AuthoringInfo 
                                ClassificationMethod="@(ClassificationMethod.EqualInterval)"
                                FadeRatio="@(219.1602)"
                                Fields="@(["ut"])"
                                FlowTheme="@(AuthoringInfoFlowTheme.WaveFront)"
                                Focus="@("voluptatem")"
                                IsAutoGenerated="@(true)"
                                LengthUnit="@(LengthUnit.UsFeet)"
                                MaxSliderValue="@(888.7310)"
                                MinSliderValue="@(11.0636)"
                                NumClasses="@(966.4039)"
                                StandardDeviationInterval="@(480.9864)"
                                UnivariateSymbolStyle="@(UnivariateSymbolStyle.PlusMinus)"
                                UnivariateTheme="@(UnivariateTheme.HighToLow)">
                                <MultipartColorRamp />
                                <AuthoringInfoVisualVariable 
                                    EndTime="@("nostrum")"
                                    Field="@("ut")"
                                    MaxSliderValue="@(188.0530)"
                                    MinSliderValue="@(846.4342)"
                                    NormalizationField="@("dolor")"
                                    ReferenceSizeScale="@(989.7037)"
                                    ReferenceSizeSymbolStyle="@(ReferenceSizeSymbolStyle.Circle)"
                                    StartTime="@("est")"
                                    Style="@(AuthoringInfoVisualVariableStyle.Percent)"
                                    Units="@(AuthoringInfoVisualVariableUnits.Seconds)">
                                    <SizeStop 
                                        Value="@(38.4909)"
                                        Size="@(new Dimension(930.5699))"
                                        Label="@("reprehenderit")">
                                    </SizeStop>
                                    <Theme 
                                        AccentColor="@(new MapColor(209, 116, 36))"
                                        TextColor="@(new MapColor(178, 0, 148))">
                                    </Theme>
                                </AuthoringInfoVisualVariable>
                                <AuthoringInfoField 
                                    Field="@("molestiae")"
                                    Label="@("modi")"
                                    NormalizationField="@("eum")">
                                    <AuthoringInfoField1ClassBreakInfos 
                                        MaxValue="@(624.8786)"
                                        MinValue="@(73.6496)">
                                    </AuthoringInfoField1ClassBreakInfos>
                                </AuthoringInfoField>
                                <AuthoringInfoStatistics 
                                    Max="@(590.3980)"
                                    Min="@(974.0302)">
                                </AuthoringInfoStatistics>
                            </AuthoringInfo>
                        </UniqueValueRenderer>
                        <OrderedLayerOrderBy 
                            Field="@("autem")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("et")">
                        </OrderedLayerOrderBy>
                        <PopupTemplate 
                            Title="@("voluptatem vero totam")"
                            StringContent="@("omnis")"
                            OutFields="@(["ipsum"])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)">
                            <ExpressionInfo 
                                Expression="@("return Date();")"
                                Name="@("title")"
                                Title="@("impedit quisquam at")"
                                ReturnType="@(ExpressionInfoReturnType.String)">
                            </ExpressionInfo>
                            <FieldInfo 
                                FieldName="@("phone")"
                                Label="@("minus")"
                                Tooltip="@("quia")"
                                StringFieldOption="@(StringFieldOption.TextBox)"
                                IsEditable="@(true)"
                                Visible="@(true)"
                                StatisticType="@(StatisticType.Count)">
                                <FieldInfoFormat 
                                    Places="@(7)"
                                    DigitSeparator="@(true)"
                                    DateFormat="@(DateFormat.DayShortMonthYearLongTime24)">
                                </FieldInfoFormat>
                            </FieldInfo>
                        </PopupTemplate>
                        <PortalItem />
                        <Field 
                            Name="@("phone")"
                            Alias="@("earum")"
                            Description="@("reiciendis vitae")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "sed" })"
                            ValueType="@(FieldValueType.NameOrTitle)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>(),
                                new CodedValue<string>()],
                                "group"))">
                        </Field>
                        <Extent 
                            Xmax="@(-61.8237)"
                            Xmin="@(106.0103)"
                            Ymax="@(-30.1788)"
                            Ymin="@(-60.3912)"
                            Zmax="@(873.6921)"
                            Zmin="@(498.9185)"
                            Mmax="@(562.6014)"
                            Mmin="@(5.6702)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("voluptate")"
                                Wkt="@("rem")"
                                Wkt2="@("eum")">
                            </SpatialReference>
                        </Extent>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowRight)"
                            LabelExpression="@("corrupti")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(40364845.2097)"
                            MinScale="@(6243.7914)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(782.6419))"
                            UseCodedValues="@(true)"
                            Where="@("ObjectID = 1")">
                            <TextSymbol 
                                Color="@(new MapColor(49, 88, 237))">
                            </TextSymbol>
                        </Label>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("veniam",
                                15861097.2853),
                                new Effect("ad",
                                    38286381.7049)])"
                            ExcludedLabelsVisible="@(true)"
                            IncludedEffect="@([new Effect("optio",
                                37644075.0825),
                                new Effect("vel",
                                    20444220.6942)])">
                            <FeatureFilter 
                                Distance="@(320.5892)"
                                ObjectIds="@([7])"
                                SpatialRelationship="@(SpatialRelationship.Relation)"
                                Units="@(QueryUnits.Feet)"
                                Where="@("City = 'Toronto'")">
                                <TimeExtent 
                                    Start="@(new DateTime(2000, 4, 3, 10, 22, 27))"
                                    End="@(new DateTime(2004, 1, 25, 0, 40, 14))">
                                </TimeExtent>
                                <Point 
                                    HasM="@(true)"
                                    HasZ="@(true)">
                                    <SpatialReference 
                                        Wkid="@(1)"
                                        ImageCoordinateSystem="@("ut")"
                                        Wkt="@("voluptatem")"
                                        Wkt2="@("nemo")">
                                    </SpatialReference>
                                </Point>
                            </FeatureFilter>
                        </FeatureEffect>
                        <SpatialReference 
                            Wkid="@(4)"
                            ImageCoordinateSystem="@("reprehenderit")"
                            Wkt="@("voluptatem")"
                            Wkt2="@("quo")">
                        </SpatialReference>
                        <WFSLayerElevationInfo 
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(795.8017)"
                            Unit="@(ElevationUnit.Kilometers)">
                            <WFSLayerElevationInfoFeatureExpressionInfo 
                                Expression="@("return Date();")"
                                Title="@("quis at pariatur")">
                            </WFSLayerElevationInfoFeatureExpressionInfo>
                        </WFSLayerElevationInfo>
                    </WFSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(wFSLayer!);
        await AssertJavaScript("dispatchEvent", args: [wFSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "w-f-s");
        var createPopupTemplateMethodResult = await wFSLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["eligendi"],
                    ["avatar",
                        "avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await wFSLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await wFSLayer.GetField("updatedAt");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await wFSLayer.GetFieldDomain("updatedAt",
            new WFSLayerGetFieldDomainOptions(new Graphic(new Extent(-179.3676,
                            93.0142,
                            89.2085,
                            26.8153,
                            69.8192,
                            374.4912,
                            260.5454,
                            803.4531,
                        new SpatialReference(2,
                                "nesciunt",
                                "voluptas",
                                "veritatis"),
                            true,
                            true),
                    new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                            new Dimension(543.2610),
                            new Dimension(854.5388),
                            614.6948,
                            new Dimension(201.4989),
                            new Dimension(779.6474),
                            new MapColor(75, 89, 121)),
                    new PopupTemplate("temporibus autem ea",
                            "quas",
                            ["est",
                                "et"],
                        [new FieldInfo("phone",
                                "dicta",
                                "magni",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.LongDateLongTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("name",
                                "adipisci",
                                "beatae",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Var)],
                        [new AttachmentsPopupContent("excepturi et omnis",
                            "hic corporis ducimus",
                            AttachmentsPopupContentDisplayType.Auto),
                        new AttachmentsPopupContent("reiciendis modi rem",
                            "non voluptas",
                            AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "avatar",
                                "voluptas et aut",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("et enim quam",
                                "https://picsum.photos/640/480/?image=416",
                                "cea61997-e280-978a-bebb-30a4d2cede16",
                                () => { Console.WriteLine("non"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "dolore")]),
                        new AttributesDictionary(),
                        true,
                        "sed",
                        "eum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "autem",
                            4))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await wFSLayer.QueryExtent(new Query([5,
                    9],
                    true,
                    966.4093,
                    537.7655,
                    "7.8.3.9",
                new Polygon([new MapPath([new MapPoint([29.7499,
                            283.0742])])],
                    new SpatialReference(9,
                            "est",
                            "mollitia",
                            "quis"),
                    new Point(89.9902,
                            -61.4421,
                            68.4936,
                            27.1285,
                            15.3679,
                        new SpatialReference(7,
                                "deleniti",
                                "earum",
                                "earum"),
                            true,
                            true,
                            118.1057),
                        true,
                        true,
                        true),
                    7,
                    ["est"],
                    "vero",
                    new DateTime(2019, 7, 25, 6, 36, 23),
                    249.9644,
                    7,
                    "quis",
                    2),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await wFSLayer.QueryFeatureCount(new Query([2,
                    7],
                    true,
                    923.2771,
                    848.3845,
                    "2.6.6.7",
                new Extent(-102.4942,
                        -154.5647,
                        -54.3941,
                        67.0100,
                        54.4498,
                        602.3164,
                        584.2011,
                        298.1298,
                    new SpatialReference(8,
                            "tempore",
                            "ea",
                            "recusandae"),
                        true,
                        true),
                    9,
                    ["qui",
                        "voluptatem"],
                    "non",
                    new DateTime(2013, 3, 12, 1, 5, 58),
                    171.5216,
                    7,
                    "ipsam",
                    7),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await wFSLayer.QueryFeatures(new Query([5,
                    2],
                    true,
                    274.6437,
                    617.2489,
                    "7.5.6.3",
                new Polygon([new MapPath([new MapPoint([422.4901,
                            241.2176])]),
                        new MapPath([new MapPoint([389.0796,
                                683.9713]),
                            new MapPoint([734.0209])])],
                    new SpatialReference(1,
                            "soluta",
                            "sunt",
                            "quia"),
                    new Point(-55.2881,
                            73.8657,
                            153.7780,
                            38.7805,
                            53.9658,
                        new SpatialReference(2,
                                "voluptatibus",
                                "porro",
                                "suscipit"),
                            true,
                            true,
                            498.5833),
                        true,
                        true,
                        true),
                    9,
                    ["inventore"],
                    "odio",
                    new DateTime(2008, 3, 1, 12, 35, 37),
                    153.5251,
                    1,
                    "distinctio",
                    8),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await wFSLayer.QueryObjectIds(new Query([5,
                    7],
                    true,
                    391.6017,
                    537.5783,
                    "1.4.4.4",
                new Point(-72.7949,
                        82.1483,
                        86.0686,
                        -7.8334,
                        924.7070,
                    new SpatialReference(1,
                            "rerum",
                            "et",
                            "eaque"),
                        true,
                        true,
                        963.7695),
                    7,
                    ["iusto",
                        "deleniti"],
                    "accusantium",
                    new DateTime(2009, 3, 19, 20, 23, 35),
                    605.7372,
                    5,
                    "reiciendis",
                    8),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await wFSLayer.Refresh();
        BlendMode testBlendMode = BlendMode.Multiply;
        await wFSLayer.SetBlendMode(testBlendMode);
        var blendMode = await wFSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        WFSLayerElevationInfo testElevationInfo = new WFSLayerElevationInfo(new WFSLayerElevationInfoFeatureExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "et reprehenderit molestias"),
                ElevationInfoMode.RelativeToGround,
                    151.3348,
                ElevationUnit.Meters);
        await wFSLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await wFSLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("et",
                    28127141.4535)],
                    true,
                new FeatureFilter(516.2768,
                    new Polygon([new MapPath([new MapPoint([254.0580])])],
                        new SpatialReference(8,
                                "maiores",
                                "odio",
                                "explicabo"),
                        new Point(-169.1383,
                                36.6503,
                                -179.3593,
                                67.6482,
                                842.7808,
                            new SpatialReference(3,
                                    "non",
                                    "iusto",
                                    "autem"),
                                true,
                                true,
                                151.2774),
                            true,
                            true,
                            true),
                        [3],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2003, 7, 6, 1, 42, 24),
                            new DateTime(2004, 9, 8, 13, 55, 48)),
                        QueryUnits.Meters,
                        "Age > 21"),
                    [new Effect("sapiente",
                        84790.2302),
                        new Effect("dolore",
                            43754824.8534)]);
        await wFSLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await wFSLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "token",
                    "eaque",
                    "amet veritatis",
                    8,
                    true,
                    true,
                    new { Value = "illo" },
                FieldValueType.PercentageOrRatio,
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "updatedAt"))];
        await wFSLayer.SetFields(testFields);
        var fields = await wFSLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(70.6802,
                    159.0764,
                    36.4087,
                    -55.3217,
                    407.2086,
                    665.7360,
                    252.4271,
                    582.5627,
                new SpatialReference(7,
                        "vel",
                        "sed",
                        "commodi"),
                    true,
                    true);
        await wFSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await wFSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Point;
        await wFSLayer.SetGeometryType(testGeometryType);
        var geometryType = await wFSLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowRight,
                    "sed",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    38596654.8739,
                    15870.9728,
                    true,
                    new Dimension(113.1974),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0",
                        new Dimension(900.9117),
                        new Dimension(655.3924),
                        new Dimension(902.4123),
                        new Dimension(24.3717),
                        -153.0292,
                        30.6988,
                        new Outline(new MapColor(18, 179, 253),
                            new Dimension(610.2266),
                            SimpleLineSymbolStyle.ShortDashDotDot,
                            Cap.Butt,
                            Join.Miter,
                            new LineSymbolMarker(new MapColor(133, 215, 212),
                                LinePlacement.End,
                                LineSymbolMarkerStyle.Square),
                            19.4363),
                        new MapColor(119, 22, 205)),
                    true,
                    "Age > 21"),
            new Label(LabelPlacement.CenterBefore,
                    "minima",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    11668229.7352,
                    23127.3590,
                    true,
                    new Dimension(908.3422),
                new PictureMarkerSymbol("https://upload.wikimedia.org/wikipedia/commons/5/53/Blue_Glass_Arrow_RTL.svg",
                        new Dimension(321.6810),
                        new Dimension(764.3403),
                        288.1353,
                        new Dimension(605.8630),
                        new Dimension(853.6885),
                        new MapColor(19, 138, 20)),
                    true,
                    "Province = 'Ontario'")];
        await wFSLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await wFSLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        ListMode testListMode = ListMode.Hide;
        await wFSLayer.SetListMode(testListMode);
        var listMode = await wFSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("odit",
                SortOrder.Descending,
                    "velit")];
        await wFSLayer.SetOrderBy(testOrderBy);
        var orderBy = await wFSLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await wFSLayer.SetPortalItem(testPortalItem);
        var portalItem = await wFSLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                        new Dimension(939.8886),
                        new Dimension(165.5994),
                        319.3005,
                        new Dimension(22.4564),
                        new Dimension(337.3046),
                        new MapColor(219, 77, 7)),
                    "aliquam",
                [new ColorVariable("laborum",
                        "dolore",
                    [new ColorStop(298.4899,
                            new MapColor(46, 161, 242),
                            "veritatis"),
                    new ColorStop(106.6876,
                            new MapColor(178, 32, 240),
                            "numquam")],
                    new VisualVariableLegendOptions(true,
                            "iste enim tempore"),
                        "occaecati",
                        "et repudiandae dolor")],
                new AuthoringInfo(ClassificationMethod.Quantile,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                                new MapColor(176, 24, 53),
                                new MapColor(132, 173, 74))]),
                        841.8961,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(133.9079,
                                550.8377),
                        new AuthoringInfoField1ClassBreakInfos(131.9916,
                                230.4255)],
                            "sint",
                            "quibusdam",
                            "labore"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(250.4527,
                                920.3590),
                        new AuthoringInfoField1ClassBreakInfos(44.4278,
                                472.0020)],
                            "doloremque",
                            "aut",
                            "iure"),
                        ["in",
                            "sint"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "qui",
                        true,
                    LengthUnit.UsFeet,
                        124.0674,
                        279.2805,
                        769.7061,
                        792.8398));
        await wFSLayer.SetRenderer(testRenderer);
        var renderer = await wFSLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "dolorem",
                    "velit",
                    "adipisci");
        await wFSLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await wFSLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2014, 5, 15, 7, 23, 3),
                    new DateTime(2021, 11, 7, 18, 57, 12));
        await wFSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await wFSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
        WFSCapabilities testWfsCapabilities = new WFSCapabilities([new WFSFeatureType(328.6272,
                        "sint ipsam voluptatem",
                    new Extent(52.2191,
                            58.0203,
                            -37.3318,
                            -57.9933,
                            680.3841,
                            59.4312,
                            439.1259,
                            304.8434,
                        new SpatialReference(4,
                                "minus",
                                "fuga",
                                "et"),
                            true,
                            true),
                        "updatedAt",
                        "createdAt",
                        "category",
                        [874.6356,
                            197.1051],
                        "modi aliquid alias",
                        "token")],
                new WFSOperations(new WFSOperationsDescribeFeatureType("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0"),
                    new WFSOperationsGetCapabilities("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1"),
                    new WFSOperationsGetFeature("aut",
                            true,
                            "https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")));
        await wFSLayer.SetWfsCapabilities(testWfsCapabilities);
        var wfsCapabilities = await wFSLayer.GetWfsCapabilities();
        Assert.AreEqual(testWfsCapabilities, wfsCapabilities);
    }
}
