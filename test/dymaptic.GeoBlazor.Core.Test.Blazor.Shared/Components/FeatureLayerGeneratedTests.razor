@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedFeatureLayer(Action renderHandler)
    {
        FeatureLayer? featureLayer = null;

        FeatureLayerEditsEvent? editsResult = null;
        void OnEdits(FeatureLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <FeatureLayer 
                        Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")"
                        OutFields="@(["qui"])"
                        DefinitionExpression="@("alias")"
                        MinScale="@(49828.2082)"
                        MaxScale="@(28957332.6597)"
                        ObjectIdField="@("odit")"
                        GeometryType="@(FeatureGeometryType.Polygon)"
                        Title="@("enim culpa explicabo")"
                        Opacity="@(0.3056)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        ApiKey="@("reprehenderit")"
                        BlendMode="@(BlendMode.Reflect)"
                        Charts="@(["eum",
                            "fugiat"])"
                        Copyright="@("nulla")"
                        DateFieldsTimeZone="@("perspiciatis")"
                        DisplayField="@("non")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("perspiciatis",
                            37138843.3795))"
                        GdbVersion="@("2.4.0.8")"
                        HasM="@(true)"
                        HasZ="@(true)"
                        HistoricMoment="@(new DateTime(2003, 7, 16, 10, 4, 3))"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(531.8278)"
                        ReturnM="@(true)"
                        ReturnZ="@(true)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        TypeIdField="@("delectus")"
                        Types="@([new FeatureType("dbc795e9-06c9-4ca4-c3b8-3f395629a1d6",
                                "avatar",
                            [new FeatureTemplate("maiores a",
                                DrawingTool.DownArrow,
                                    "createdAt",
                                new Graphic(new Polyline([new MapPath([new MapPoint([624.4522,
                                                382.1029]),
                                            new MapPoint([101.6121])])],
                                        new SpatialReference(8,
                                                "qui",
                                                "qui",
                                                "tempore"),
                                            true,
                                            true),
                                    new TextSymbol("consequatur pariatur repellat",
                                        new MapColor(216, 64, 219),
                                        new MapColor(150, 95, 52),
                                            new Dimension(455.1721),
                                        new MapFont(new Dimension(435.0906),
                                                "Bookman",
                                            MapFontStyle.Italic,
                                            FontWeight.Lighter,
                                            TextDecoration.Underline),
                                            462.3586,
                                        new MapColor(10, 88, 156),
                                        new MapColor(106, 34, 95),
                                            349.0806,
                                        HorizontalAlignment.Left,
                                            true,
                                            959.1725,
                                            new Dimension(414.7179),
                                            true),
                                    new PopupTemplate("occaecati aspernatur eum",
                                            "reiciendis",
                                            ["quia"],
                                        [new FieldInfo("createdAt",
                                                "error",
                                                "sint",
                                            StringFieldOption.TextBox,
                                            new FieldInfoFormat(9,
                                                    true,
                                                DateFormat.DayShortMonthYearShortTime),
                                                true,
                                                true,
                                            StatisticType.Stddev),
                                        new FieldInfo("id",
                                                "consequatur",
                                                "eveniet",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(5,
                                                    true,
                                                DateFormat.LongDateLongTime),
                                                true,
                                                true,
                                            StatisticType.Min)],
                                        [new TextPopupContent("rerum occaecati porro")],
                                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                                "createdAt",
                                                "unde repudiandae reiciendis",
                                                ExpressionInfoReturnType.String),
                                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                "phone",
                                                "et doloribus sed",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("nesciunt veritatis et",
                                                "https://picsum.photos/640/480/?image=934",
                                                "09063c00-317a-691f-a6fd-ae5d8432700d",
                                                () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                                "token",
                                                true,
                                                true,
                                                true,
                                                "aspernatur")]),
                                        new AttributesDictionary(),
                                        true,
                                        "molestiae",
                                        "rerum",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "ducimus",
                                            6)),
                                    new Thumbnail("dolor",
                                        "ut",
                                        260.5747,
                                        45.3177)),
                            new FeatureTemplate("qui similique commodi",
                                DrawingTool.Arrow,
                                    "comment",
                                new Graphic(new Extent(117.1018,
                                            -63.8128,
                                            -41.1413,
                                            59.9554,
                                            409.7120,
                                            453.9074,
                                            630.9509,
                                            917.0525,
                                        new SpatialReference(8,
                                                "recusandae",
                                                "nostrum",
                                                "et"),
                                            true,
                                            true),
                                    new TextSymbol("id quibusdam non",
                                        new MapColor(185, 118, 147),
                                        new MapColor(0, 147, 99),
                                            new Dimension(448.1085),
                                        new MapFont(new Dimension(950.3364),
                                                "Garamond",
                                            MapFontStyle.Italic,
                                            FontWeight.Bolder,
                                            TextDecoration.LineThrough),
                                            495.9968,
                                        new MapColor(170, 74, 103),
                                        new MapColor(21, 222, 237),
                                            327.7547,
                                        HorizontalAlignment.Center,
                                            true,
                                            99.4149,
                                            new Dimension(689.0133),
                                            true),
                                    new PopupTemplate("aut deleniti repudiandae",
                                            "accusamus",
                                            ["veniam"],
                                        [new FieldInfo("id",
                                                "voluptates",
                                                "quos",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(2,
                                                    true,
                                                DateFormat.ShortMonthYear),
                                                true,
                                                true,
                                            StatisticType.Min)],
                                        [new FieldsPopupContent([new FieldInfo("status",
                                                    "repudiandae",
                                                    "qui",
                                                StringFieldOption.TextBox,
                                                new FieldInfoFormat(4,
                                                        true,
                                                    DateFormat.ShortMonthYear),
                                                    true,
                                                    true,
                                                StatisticType.Var),
                                            new FieldInfo("comment",
                                                    "perferendis",
                                                    "quae",
                                                StringFieldOption.TextBox,
                                                new FieldInfoFormat(4,
                                                        true,
                                                    DateFormat.DayShortMonthYearLongTime24),
                                                    true,
                                                    true,
                                                StatisticType.Max)],
                                                "fugit et rerum totam",
                                                "repudiandae molestiae aperiam"),
                                        new MediaPopupContent("aperiam blanditiis minima",
                                                "enim vel",
                                            [new LineChartMediaInfo("iusto praesentium illo",
                                                    "excepturi",
                                                    "temporibus vitae ut",
                                                new ChartMediaInfoValue(["dolores",
                                                        "quisquam"],
                                                        "sit",
                                                        "est",
                                                    [new ChartMediaInfoValueSeries(),
                                                    new ChartMediaInfoValueSeries()],
                                                    [new MapColor(20, 38, 220),
                                                    new MapColor(226, 137, 242)])),
                                            new ColumnChartMediaInfo("mollitia quo et",
                                                    "voluptates",
                                                    "sunt aspernatur illum",
                                                new ChartMediaInfoValue(["aut"],
                                                        "aperiam",
                                                        "animi",
                                                    [new ChartMediaInfoValueSeries()],
                                                    [new MapColor(66, 160, 81),
                                                    new MapColor(201, 230, 193)]))],
                                                1)],
                                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                                "comment",
                                                "doloribus et est",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("illo soluta ipsam",
                                                "https://picsum.photos/640/480/?image=385",
                                                "6bd60d3c-1e52-e5f1-01c4-4d3b3cbe716e",
                                                () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                                                "avatar",
                                                true,
                                                true,
                                                true,
                                                "ea"),
                                                new ActionButton("eum qui omnis",
                                                    "https://picsum.photos/640/480/?image=749",
                                                    "738f0779-97e4-48f0-8549-be03d102a7b9",
                                                    () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                                                    "title",
                                                    true,
                                                    true,
                                                    true,
                                                    "non")]),
                                        new AttributesDictionary(),
                                        true,
                                        "molestias",
                                        "neque",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "ut",
                                            6)),
                                    new Thumbnail("provident",
                                        "consequatur",
                                        46.3690,
                                        213.2989))],
                            new Dictionary<string, Domain>() {
                                { "aliquid", new InheritedDomain("createdAt") }
                            },
                                "et"),
                        new FeatureType("7624cd7b-0084-be01-0944-9f66655850af",
                                "phone",
                            [new FeatureTemplate("aliquid commodi magni earum",
                                DrawingTool.Point,
                                    "status",
                                new Graphic(new Polyline([new MapPath([new MapPoint([770.9747]),
                                            new MapPoint([340.5935])]),
                                            new MapPath([new MapPoint([824.8467,
                                                    472.3284]),
                                                new MapPoint([948.2676,
                                                    268.6307])])],
                                        new SpatialReference(1,
                                                "itaque",
                                                "tenetur",
                                                "sed"),
                                            true,
                                            true),
                                    new TextSymbol("sit nisi saepe",
                                        new MapColor(49, 194, 65),
                                        new MapColor(33, 165, 44),
                                            new Dimension(865.1393),
                                        new MapFont(new Dimension(223.3266),
                                                "Verdana",
                                            MapFontStyle.Italic,
                                            FontWeight.Lighter,
                                            TextDecoration.None),
                                            781.4805,
                                        new MapColor(226, 115, 5),
                                        new MapColor(54, 21, 94),
                                            597.6977,
                                        HorizontalAlignment.Center,
                                            true,
                                            100.5638,
                                            new Dimension(940.2670),
                                            true),
                                    new PopupTemplate("et non temporibus",
                                            "nostrum",
                                            ["maiores"],
                                        [new FieldInfo("updatedAt",
                                                "qui",
                                                "eveniet",
                                            StringFieldOption.TextArea,
                                            new FieldInfoFormat(3,
                                                    true,
                                                DateFormat.ShortDateLeLongTime24),
                                                true,
                                                true,
                                            StatisticType.Max)],
                                        [new TextPopupContent("provident magni esse")],
                                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                                "comment",
                                                "quas dolor neque",
                                                ExpressionInfoReturnType.String)],
                                            true,
                                            true,
                                            [new ActionButton("totam tempora qui",
                                                "https://picsum.photos/640/480/?image=139",
                                                "b74da818-55ed-db9b-4d0e-d00b2fc2bb13",
                                                () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                                "createdAt",
                                                true,
                                                true,
                                                true,
                                                "saepe"),
                                                new ActionButton("quod voluptas suscipit",
                                                    "https://picsum.photos/640/480/?image=740",
                                                    "bc6e95df-4aea-2c2e-5e82-56edfc0d7ffb",
                                                    () => { Console.WriteLine("sint"); return Task.CompletedTask; },
                                                    "email",
                                                    true,
                                                    true,
                                                    true,
                                                    "placeat")]),
                                        new AttributesDictionary(),
                                        true,
                                        "quae",
                                        "ut",
                                        new GraphicOrigin(Guid.NewGuid(),
                                            "ab",
                                            4)),
                                    new Thumbnail("deleniti",
                                        "quod",
                                        245.8319,
                                        142.8624))],
                            new Dictionary<string, Domain>() {
                                { "aut", new InheritedDomain("createdAt") },
                                { "assumenda", new RangeDomain("ut",
                                        "accusantium",
                                        "group") }
                            },
                                "mollitia")])"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(885.0202)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("quod")"
                            EndField="@("qui")"
                            Stops="@([new DateTime(2020, 6, 11, 17, 43, 33),
                                new DateTime(2005, 9, 7, 16, 17, 58)])"
                            TimeZone="@("America/Chihuahua")"
                            TrackIdField="@("et")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(145.5848)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2022, 3, 15, 19, 24, 12))"
                                End="@(new DateTime(2007, 8, 3, 5, 22, 35))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2015, 7, 23, 18, 56, 49))"
                            End="@(new DateTime(2018, 7, 11, 10, 2, 7))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("rerum sunt omnis eos")"
                            DrawingTool="@(DrawingTool.Freehand)"
                            Name="@("comment")"
                            Thumbnail="@(new Thumbnail("et",
                                "et",
                                300.9367,
                                208.5033))">
                            <Graphic 
                                Geometry="@(new Extent(-103.1804,
                                        49.9147,
                                        -14.8030,
                                        76.6097,
                                        231.0098,
                                        252.9769,
                                        233.9571,
                                        269.0454,
                                    new SpatialReference(3,
                                            "repellat",
                                            "dolorem",
                                            "maxime"),
                                        true,
                                        true))"
                                Symbol="@(new TextSymbol("occaecati provident iusto",
                                    new MapColor(90, 247, 59),
                                    new MapColor(6, 230, 94),
                                        new Dimension(670.1846),
                                    new MapFont(new Dimension(247.1254),
                                            "Helvetica",
                                        MapFontStyle.Normal,
                                        FontWeight.Bold,
                                        TextDecoration.None),
                                        6.4515,
                                    new MapColor(96, 40, 85),
                                    new MapColor(126, 37, 158),
                                        216.4718,
                                    HorizontalAlignment.Center,
                                        true,
                                        593.8320,
                                        new Dimension(508.6867),
                                        true))"
                                PopupTemplate="@(new PopupTemplate("doloremque rem quas",
                                        "pariatur",
                                        ["explicabo"],
                                    [new FieldInfo("phone",
                                            "tempore",
                                            "facere",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(4,
                                                true,
                                            DateFormat.LongMonthDayYearShortTime),
                                            true,
                                            true,
                                        StatisticType.Var),
                                    new FieldInfo("category",
                                            "et",
                                            "consequatur",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(8,
                                                true,
                                            DateFormat.DayShortMonthYear),
                                            true,
                                            true,
                                        StatisticType.Max)],
                                    [new AttachmentsPopupContent("omnis alias at",
                                            "non minima",
                                            AttachmentsPopupContentDisplayType.Auto)],
                                    [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                            "title",
                                            "velit aut eum",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                            "name",
                                            "ut sunt dolorem",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("sapiente ipsum quo",
                                            "https://picsum.photos/640/480/?image=74",
                                            "a0b6a369-934f-430e-a9de-3110dc54b0d9",
                                            () => { Console.WriteLine("ea"); return Task.CompletedTask; },
                                            "id",
                                            true,
                                            true,
                                            true,
                                            "et")]))"
                                Attributes="@(new AttributesDictionary())"
                                Visible="@(true)"
                                LegendLabel="@("ea")"
                                AggregateGeometries="@("quis")"
                                Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                    "est",
                                    8))">
                            </Graphic>
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(9)"
                            ImageCoordinateSystem="@("aperiam")"
                            Wkt="@("dicta")"
                            Wkt2="@("magnam")">
                        </SpatialReference>
                        <Graphic 
                            Geometry="@(new Extent(79.6787,
                                    -77.4197,
                                    -84.3847,
                                    -40.1219,
                                    653.3713,
                                    640.0508,
                                    295.8797,
                                    809.4105,
                                new SpatialReference(2,
                                        "alias",
                                        "corporis",
                                        "vitae"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("alias earum explicabo",
                                new MapColor(100, 77, 106),
                                new MapColor(98, 20, 22),
                                    new Dimension(349.5122),
                                new MapFont(new Dimension(623.8480),
                                        "Times New Roman",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.None),
                                    737.5424,
                                new MapColor(184, 37, 143),
                                new MapColor(64, 241, 45),
                                    904.9520,
                                HorizontalAlignment.Center,
                                    true,
                                    159.4070,
                                    new Dimension(863.8816),
                                    true))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("expedita")"
                            AggregateGeometries="@("dolorum")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "consequatur",
                                3))">
                            <PopupTemplate 
                                Title="@("consectetur et ipsa")"
                                StringContent="@("iste")"
                                OutFields="@(["voluptates",
                                    "qui"])"
                                FieldInfos="@([new FieldInfo("category",
                                        "earum",
                                        "atque",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongDateLongTime),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("group",
                                        "voluptatem",
                                        "sit",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Avg)])"
                                Content="@([new MediaPopupContent("repellat totam labore",
                                        "sed ipsum et rerum",
                                    [new LineChartMediaInfo("suscipit molestias reiciendis",
                                            "quaerat",
                                            "est et ut",
                                        new ChartMediaInfoValue(["aut",
                                                "quas"],
                                                "ea",
                                                "omnis",
                                            [new ChartMediaInfoValueSeries("category",
                                                    "possimus",
                                                    216.6850),
                                            new ChartMediaInfoValueSeries("password",
                                                    "nisi",
                                                    144.2227)],
                                            [new MapColor(85, 52, 90)]))],
                                        8)])"
                                ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                        "status",
                                        "doloremque nostrum sit",
                                        ExpressionInfoReturnType.String)])"
                                OverwriteActions="@(true)"
                                ReturnGeometry="@(true)"
                                Actions="@([new ActionButton("sed saepe non",
                                    "https://picsum.photos/640/480/?image=108",
                                    "7e588746-5518-12fd-3b7b-4f28b972dfcc",
                                    () => { Console.WriteLine("eaque"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "perspiciatis"),
                                    new ActionButton("ea sapiente nisi",
                                        "https://picsum.photos/640/480/?image=126",
                                        "6f9c1f7b-24cb-fee5-1d15-c52570a530fa",
                                        () => { Console.WriteLine("aperiam"); return Task.CompletedTask; },
                                        "email",
                                        true,
                                        true,
                                        true,
                                        "et")])">
                            </PopupTemplate>
                        </Graphic>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                    new MapColor(113, 225, 141),
                                    new MapColor(128, 144, 61)),
                                    812.1084,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(812.9685,
                                            297.5946),
                                    new AuthoringInfoField1ClassBreakInfos(665.0313,
                                            129.6802)],
                                        "amet",
                                        "cumque",
                                        "distinctio"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(874.8075,
                                            162.5421)],
                                        "vel",
                                        "est",
                                        "nulla"),
                                    ["sequi",
                                        "et"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "repudiandae",
                                    true,
                                LengthUnit.Feet,
                                    777.7194,
                                    380.6840,
                                    188.6188,
                                    268.1052))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("enim officiis corrupti")"
                            StringContent="@("voluptatum")"
                            OutFields="@(["voluptatibus",
                                "doloribus"])"
                            FieldInfos="@([new FieldInfo("name",
                                    "dolor",
                                    "odit",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("id",
                                    "consequatur",
                                    "veritatis",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "eaque",
                                        "odit voluptas voluptatum")),
                            new AttachmentsPopupContent("possimus aliquid reiciendis",
                                    "hic dolore id",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "title",
                                    "dolorum ipsum aspernatur",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "id",
                                    "non est consequuntur",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("minima blanditiis praesentium",
                                "https://picsum.photos/640/480/?image=861",
                                "c11ee862-b936-4aac-5fea-e881b75480e1",
                                () => { Console.WriteLine("architecto"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "omnis"),
                                new ActionButton("eius et ullam",
                                    "https://picsum.photos/640/480/?image=955",
                                    "ebdb4484-b8b6-8f09-f289-b0355f2fc649",
                                    () => { Console.WriteLine("neque"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "doloremque")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("ea")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("dolores")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowRight)"
                            LabelExpression="@("aliquid")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(26805302.6986)"
                            MinScale="@(36623.6572)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(664.3445))"
                            Symbol="@(new TextSymbol("harum ut rerum",
                                new MapColor(32, 104, 190),
                                new MapColor(176, 92, 194),
                                    new Dimension(294.7750),
                                new MapFont(new Dimension(753.1560),
                                        "Times New Roman",
                                    MapFontStyle.Italic,
                                    FontWeight.Lighter,
                                    TextDecoration.LineThrough),
                                    235.2510,
                                new MapColor(223, 41, 43),
                                new MapColor(155, 160, 107),
                                    665.2203,
                                HorizontalAlignment.Left,
                                    true,
                                    988.5845,
                                    new Dimension(752.5096),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Name = 'John Doe'")">
                        </Label>
                        <Extent 
                            Xmax="@(9.9103)"
                            Xmin="@(138.4640)"
                            Ymax="@(89.3508)"
                            Ymin="@(78.0675)"
                            Zmax="@(737.1735)"
                            Zmin="@(894.9659)"
                            Mmax="@(887.5462)"
                            Mmin="@(72.2279)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("ad")"
                                Wkt="@("mollitia")"
                                Wkt2="@("eaque")">
                            </SpatialReference>
                        </Extent>
                        <FormTemplate 
                            Title="@("eum facilis et")"
                            Description="@("blanditiis laboriosam illum dignissimos")"
                            PreserveFieldValuesWhenHidden="@(true)"
                            Elements="@([new FieldElement("id",
                                    "in",
                                    "alias itaque illo sed",
                                    "voluptatem",
                                    "a",
                                    "eum",
                                    "reiciendis",
                                new InheritedDomain("email"),
                                    default,
                                    "quas"),
                            new FieldElement("createdAt",
                                    "recusandae",
                                    "nihil totam",
                                    "ut",
                                    "repellat",
                                    "beatae",
                                    "sit",
                                new RangeDomain("laudantium",
                                        "repellat",
                                        "createdAt"),
                                    default,
                                    "voluptas")])"
                            ExpressionInfos="@([new ExpressionInfo("return Date();",
                                    "createdAt",
                                    "enim magnam nihil",
                                    ExpressionInfoReturnType.String)])">
                        </FormTemplate>
                        <LayerFloorInfo 
                            FloorField="@("quisquam")">
                        </LayerFloorInfo>
                        <Field 
                            Name="@("updatedAt")"
                            Alias="@("ipsam")"
                            Description="@("ratione eius repellat occaecati")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "dicta" })"
                            ValueType="@(FieldValueType.CountOrAmount)"
                            Domain="@(new InheritedDomain("phone"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("sint",
                                22200102.9316),
                                new Effect("odit",
                                    12477704.5475)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(70.6987,
                                new Point(173.7396,
                                        -46.2114,
                                        -36.8891,
                                        14.1875,
                                        314.4275,
                                    new SpatialReference(5,
                                            "quasi",
                                            "et",
                                            "suscipit"),
                                        true,
                                        true,
                                        307.2941),
                                    [8],
                                SpatialRelationship.EnvelopeIntersects,
                                new TimeExtent(new DateTime(2007, 5, 7, 18, 41, 39),
                                        new DateTime(2002, 7, 22, 6, 44, 1)),
                                    QueryUnits.Miles,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([new Effect("inventore",
                                1916321.9577)])">
                        </FeatureEffect>
                        <FeatureLayerBaseElevationInfo 
                            FeatureExpressionInfo="@(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "nihil asperiores numquam"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(574.8355)"
                            Unit="@(ElevationUnit.Yards)">
                        </FeatureLayerBaseElevationInfo>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(featureLayer!);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [featureLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<FeatureLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "feature");
        var addAttachmentMethodResult = await featureLayer.AddAttachment(new Graphic(new Extent(129.4021,
                        98.1734,
                        30.0691,
                        67.8538,
                        489.6779,
                        638.4196,
                        966.1444,
                        453.5809,
                    new SpatialReference(3,
                            "enim",
                            "quidem",
                            "ut"),
                        true,
                        true),
                new TextSymbol("quidem quia quasi",
                    new MapColor(83, 229, 207),
                    new MapColor(40, 179, 121),
                        new Dimension(435.9172),
                    new MapFont(new Dimension(667.9873),
                            "Garamond",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        287.9273,
                    new MapColor(151, 125, 116),
                    new MapColor(47, 249, 243),
                        538.0253,
                    HorizontalAlignment.Right,
                        true,
                        614.9088,
                        new Dimension(705.9294),
                        true),
                new PopupTemplate("consectetur id dicta",
                        "maiores",
                        ["beatae",
                            "assumenda"],
                    [new FieldInfo("status",
                            "aut",
                            "blanditiis",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLeLongTime),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                "iste",
                                "quos rerum cumque"))],
                    [new ExpressionInfo("return $feature.Name;",
                            "password",
                            "aliquam a dolorem",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("exercitationem sit nulla",
                            "https://picsum.photos/640/480/?image=363",
                            "0f393317-b9bb-87c6-bfc4-6d68aea70820",
                            () => { Console.WriteLine("odio"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "quasi")]),
                    new AttributesDictionary(),
                    true,
                    "asperiores",
                    "porro",
                    new GraphicOrigin(Guid.NewGuid(),
                        "et",
                        3)),
                default);
        Assert.IsNotNull(addAttachmentMethodResult);
        var deleteAttachmentsMethodResult = await featureLayer.DeleteAttachments(new Graphic(new Extent(63.6332,
                        43.3671,
                        -47.5974,
                        84.9685,
                        232.3176,
                        232.5162,
                        719.7814,
                        351.8758,
                    new SpatialReference(5,
                            "cum",
                            "ad",
                            "cum"),
                        true,
                        true),
                new TextSymbol("facere omnis quis",
                    new MapColor(34, 161, 41),
                    new MapColor(76, 150, 60),
                        new Dimension(63.8666),
                    new MapFont(new Dimension(668.6590),
                            "Palatino",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        197.6223,
                    new MapColor(216, 128, 91),
                    new MapColor(46, 111, 160),
                        141.5579,
                    HorizontalAlignment.Center,
                        true,
                        761.7555,
                        new Dimension(141.1269),
                        true),
                new PopupTemplate("eum ut atque",
                        "nostrum",
                        ["illum",
                            "ducimus"],
                    [new FieldInfo("token",
                            "ea",
                            "quam",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateShortTime),
                            true,
                            true,
                        StatisticType.Var),
                    new FieldInfo("password",
                            "ut",
                            "sunt",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.LongMonthDayYearShortTime24),
                            true,
                            true,
                        StatisticType.Var)],
                    [new AttachmentsPopupContent("dignissimos molestiae autem",
                            "iste sapiente est",
                            AttachmentsPopupContentDisplayType.Preview)],
                    [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "email",
                            "magnam ipsum nam",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Name;",
                            "status",
                            "sed aut qui",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("dolore distinctio provident",
                            "https://picsum.photos/640/480/?image=355",
                            "f4412e94-7cfa-121e-5503-cac8bbc5941f",
                            () => { Console.WriteLine("et"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "veritatis")]),
                    new AttributesDictionary(),
                    true,
                    "aliquam",
                    "quo",
                    new GraphicOrigin(Guid.NewGuid(),
                        "et",
                        7)),
                [9,
                    5]);
        Assert.IsNotNull(deleteAttachmentsMethodResult);
        var queryAttachmentsMethodResult = await featureLayer.QueryAttachments(new AttachmentQuery("sit",
                    ["quis"],
                    true,
                    [9,
                        8],
                    ["voluptatibus"],
                    "createdAt",
                    427.4415,
                    [5,
                        5],
                    true,
                    [2,
                        7],
                    959.2949,
                    "Name = 'John Doe'"),
                default);
        Assert.IsNotNull(queryAttachmentsMethodResult);
        var saveMethodResult = await featureLayer.Save(new FeatureLayerBaseSaveOptions(new FeatureLayerBaseSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await featureLayer.SaveAs(new PortalItem(),
            new FeatureLayerBaseSaveAsOptions(new PortalFolder(new DateTime(2010, 3, 27, 9, 22, 22),
                        "ea",
                        "maxime nostrum est"),
                new FeatureLayerBaseSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        var updateAttachmentMethodResult = await featureLayer.UpdateAttachment(new Graphic(new Polygon([new MapPath([new MapPoint([135.3344]),
                        new MapPoint([220.7812,
                            90.7846])])],
                    new SpatialReference(9,
                            "et",
                            "fugiat",
                            "fugit"),
                    new Point(20.3584,
                            -53.1108,
                            -87.0601,
                            -9.2073,
                            216.1816,
                        new SpatialReference(1,
                                "perferendis",
                                "qui",
                                "maiores"),
                            true,
                            true,
                            445.5772),
                        true,
                        true,
                        true),
                new TextSymbol("voluptatem porro voluptatibus",
                    new MapColor(0, 242, 34),
                    new MapColor(191, 3, 109),
                        new Dimension(560.5368),
                    new MapFont(new Dimension(308.4514),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        925.0038,
                    new MapColor(221, 176, 2),
                    new MapColor(90, 227, 77),
                        34.0237,
                    HorizontalAlignment.Left,
                        true,
                        888.4228,
                        new Dimension(792.9310),
                        true),
                new PopupTemplate("et libero temporibus",
                        "nihil",
                        ["sapiente"],
                    [new FieldInfo("createdAt",
                            "sapiente",
                            "ut",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateShortTime24),
                            true,
                            true,
                        StatisticType.Var)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "laudantium",
                                "aut aut est")),
                    new TextPopupContent("voluptas quo quo")],
                    [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "avatar",
                            "sed a quo",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "avatar",
                            "odit facere similique",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("quia dolorem deleniti",
                            "https://picsum.photos/640/480/?image=103",
                            "f9f7484e-5d9c-087f-d69f-6d009cd6709a",
                            () => { Console.WriteLine("cupiditate"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "sed"),
                            new ActionButton("excepturi reprehenderit ad",
                                "https://picsum.photos/640/480/?image=818",
                                "8aa5a590-e121-c916-9444-42125ca01a85",
                                () => { Console.WriteLine("cumque"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "sit")]),
                    new AttributesDictionary(),
                    true,
                    "voluptatem",
                    "distinctio",
                    new GraphicOrigin(Guid.NewGuid(),
                        "mollitia",
                        5)),
                1,
                default);
        Assert.IsNotNull(updateAttachmentMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await featureLayer.SetPortalItem(testPortalItem);
        var portalItem = await featureLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        ListMode testListMode = ListMode.Hide;
        await featureLayer.SetListMode(testListMode);
        var listMode = await featureLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await featureLayer.SetBlendMode(testBlendMode);
        var blendMode = await featureLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FeatureLayerBaseElevationInfo testElevationInfo = new FeatureLayerBaseElevationInfo(new FeatureLayerBaseElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "est reiciendis velit"),
                ElevationInfoMode.OnTheGround,
                    723.6649,
                ElevationUnit.Millimeters);
        await featureLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await featureLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("rerum",
                    43667529.8614)],
                    true,
                new FeatureFilter(891.7684,
                    new Point(150.9739,
                            -51.7467,
                            -52.0154,
                            -84.4006,
                            410.6629,
                        new SpatialReference(5,
                                "est",
                                "officia",
                                "et"),
                            true,
                            true,
                            947.2551),
                        [7,
                            6],
                    SpatialRelationship.Touches,
                    new TimeExtent(new DateTime(2014, 7, 17, 4, 30, 5),
                            new DateTime(2010, 3, 17, 7, 5, 19)),
                        QueryUnits.Feet,
                        "Age > 21"),
                    [new Effect("est",
                        45368652.6352)]);
        await featureLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await featureLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "comment",
                    "pariatur",
                    "vel exercitationem ducimus nostrum",
                    8,
                    true,
                    true,
                    new { Value = "qui" },
                FieldValueType.CountOrAmount,
                new InheritedDomain("email")),
            new Field(default,
                    "avatar",
                    "voluptatem",
                    "natus ipsam",
                    6,
                    true,
                    true,
                    new { Value = "explicabo" },
                FieldValueType.DateAndTime,
                new RangeDomain("beatae",
                        "nihil",
                        "password"))];
        await featureLayer.SetFields(testFields);
        var fields = await featureLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        LayerFloorInfo testFloorInfo = new LayerFloorInfo("numquam");
        await featureLayer.SetFloorInfo(testFloorInfo);
        var floorInfo = await featureLayer.GetFloorInfo();
        Assert.AreEqual(testFloorInfo, floorInfo);
        FormTemplate testFormTemplate = new FormTemplate("repellat tempore doloremque",
                    "voluptas minima",
                    true,
                [new GroupElement("et minima eos",
                    [new FieldElement("updatedAt",
                            "non",
                            "distinctio reiciendis hic quis",
                            "nesciunt",
                            "vitae",
                            "laboriosam",
                            "at",
                        new InheritedDomain("updatedAt"),
                            default,
                            "perspiciatis")],
                    InitialState.Expanded,
                        "et",
                        "quasi")],
                [new ExpressionInfo("return $feature.Name;",
                        "title",
                        "nihil vel non",
                        ExpressionInfoReturnType.String)]);
        await featureLayer.SetFormTemplate(testFormTemplate);
        var formTemplate = await featureLayer.GetFormTemplate();
        Assert.AreEqual(testFormTemplate, formTemplate);
        Extent testFullExtent = new Extent(-178.6670,
                    49.0151,
                    -81.5414,
                    -5.6940,
                    945.1165,
                    130.5857,
                    542.2782,
                    512.8385,
                new SpatialReference(9,
                        "aliquam",
                        "quis",
                        "adipisci"),
                    true,
                    true);
        await featureLayer.SetFullExtent(testFullExtent);
        var fullExtent = await featureLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterBefore,
                    "consequatur",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    38041708.2375,
                    38409.8727,
                    true,
                    new Dimension(223.7517),
                new TextSymbol("eos ut molestiae",
                    new MapColor(224, 8, 131),
                    new MapColor(119, 85, 5),
                        new Dimension(833.4564),
                    new MapFont(new Dimension(127.5942),
                            "Helvetica",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        690.9317,
                    new MapColor(209, 181, 135),
                    new MapColor(238, 114, 20),
                        817.7049,
                    HorizontalAlignment.Center,
                        true,
                        349.6708,
                        new Dimension(7.0757),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.CenterCenter,
                    "dignissimos",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    11404281.5524,
                    15500.8056,
                    true,
                    new Dimension(982.2715),
                new TextSymbol("necessitatibus eos voluptatibus",
                    new MapColor(3, 131, 122),
                    new MapColor(144, 162, 58),
                        new Dimension(888.5280),
                    new MapFont(new Dimension(774.2468),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        22.7621,
                    new MapColor(192, 71, 160),
                    new MapColor(0, 254, 103),
                        872.6249,
                    HorizontalAlignment.Left,
                        true,
                        795.7946,
                        new Dimension(469.0196),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'")];
        await featureLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await featureLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("aliquam",
                SortOrder.Descending,
                    "est"),
            new OrderedLayerOrderBy("quis",
                SortOrder.Descending,
                    "repellat")];
        await featureLayer.SetOrderBy(testOrderBy);
        var orderBy = await featureLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.Manual,
                    new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(54, 18, 36),
                        new MapColor(87, 73, 164)),
                        170.5266,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(41.3973,
                                980.4436)],
                            "ab",
                            "laborum",
                            "reprehenderit"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(335.1744,
                                657.2915),
                        new AuthoringInfoField1ClassBreakInfos(690.1859,
                                103.4135)],
                            "eligendi",
                            "velit",
                            "culpa"),
                        ["illum"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "dolor",
                        true,
                    LengthUnit.Miles,
                        443.1315,
                        455.1111,
                        226.8418,
                        351.7927),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0",
                    new Dimension(432.9810),
                    new Dimension(136.8295),
                    new Dimension(497.8587),
                    new Dimension(9.2837),
                    93.4024,
                    -63.0631,
                    new Outline(new MapColor(126, 249, 208),
                        new Dimension(206.1985),
                        SimpleLineSymbolStyle.None,
                        Cap.Butt,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(111, 82, 111),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Arrow),
                        283.2200),
                    new MapColor(23, 172, 132)),
                    "debitis",
                    new DefaultSymbol(),
                    "beatae",
                    "sit",
                    "qui",
                    "eaque",
                new UniqueValueRendererLegendOptions("aut impedit alias"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("beatae",
                        new TextSymbol("sunt pariatur est",
                            new MapColor(7, 211, 108),
                            new MapColor(28, 134, 78),
                                new Dimension(683.5835),
                            new MapFont(new Dimension(981.7745),
                                    "Georgia",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                958.1739,
                            new MapColor(204, 13, 18),
                            new MapColor(200, 132, 108),
                                980.6636,
                            HorizontalAlignment.Left,
                                true,
                                781.9782,
                                new Dimension(831.8019),
                                true),
                        [new UniqueValue("odit",
                                "fugiat",
                                "inventore")]),
                    new UniqueValueClass("natus",
                        new TextSymbol("minima recusandae ut",
                            new MapColor(88, 253, 185),
                            new MapColor(142, 161, 111),
                                new Dimension(70.3000),
                            new MapFont(new Dimension(769.9010),
                                    "Times New Roman",
                                MapFontStyle.Normal,
                                FontWeight.Bold,
                                TextDecoration.None),
                                812.5070,
                            new MapColor(175, 122, 231),
                            new MapColor(37, 72, 149),
                                339.8329,
                            HorizontalAlignment.Left,
                                true,
                                841.9754,
                                new Dimension(623.1985),
                                true),
                        [new UniqueValue("dignissimos",
                                "et",
                                "quibusdam"),
                        new UniqueValue("sed",
                                "fugiat",
                                "deserunt")])],
                        "distinctio")],
                [new UniqueValueInfo("autem",
                    new TextSymbol("magnam ratione rerum",
                        new MapColor(187, 176, 113),
                        new MapColor(162, 151, 130),
                            new Dimension(314.4578),
                        new MapFont(new Dimension(285.9383),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            293.9163,
                        new MapColor(248, 203, 137),
                        new MapColor(97, 71, 203),
                            760.0823,
                        HorizontalAlignment.Right,
                            true,
                            447.0467,
                            new Dimension(457.1608),
                            true),
                        "natus")],
                    "ullam",
                    "voluptatem esse asperiores");
        await featureLayer.SetRenderer(testRenderer);
        var renderer = await featureLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "ipsam",
                    "beatae",
                    "est");
        await featureLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await featureLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("possimus ab incidunt",
                DrawingTool.Ellipse,
                    "avatar",
                new Graphic(new Point(-23.5818,
                            84.0058,
                            -165.2103,
                            -18.7405,
                            74.6748,
                        new SpatialReference(6,
                                "libero",
                                "enim",
                                "id"),
                            true,
                            true,
                            247.1336),
                    new TextSymbol("quibusdam omnis architecto",
                        new MapColor(158, 2, 22),
                        new MapColor(106, 102, 83),
                            new Dimension(705.6229),
                        new MapFont(new Dimension(144.4845),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Normal,
                            TextDecoration.None),
                            265.3508,
                        new MapColor(130, 97, 85),
                        new MapColor(216, 121, 112),
                            201.7561,
                        HorizontalAlignment.Left,
                            true,
                            283.8655,
                            new Dimension(397.3815),
                            true),
                    new PopupTemplate("a eveniet est",
                            "velit",
                            ["eum",
                                "enim"],
                        [new FieldInfo("avatar",
                                "commodi",
                                "autem",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongDateShortTime24),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new RelationshipPopupContent("exercitationem ullam quia",
                                "et est",
                                7,
                                "aspernatur",
                            [new RelatedRecordsInfoFieldOrder("voluptatum",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("deserunt",
                                OrderBy.Desc)],
                                5)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "name",
                                "laudantium temporibus ipsa",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("maxime qui et",
                                "https://picsum.photos/640/480/?image=687",
                                "6754cc10-f3fd-8a67-4516-6b11244be64d",
                                () => { Console.WriteLine("quae"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "unde")]),
                        new AttributesDictionary(),
                        true,
                        "recusandae",
                        "eum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "delectus",
                            1)),
                    new Thumbnail("non",
                        "sit",
                        122.7081,
                        71.4718))];
        await featureLayer.SetTemplates(testTemplates);
        var templates = await featureLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2000, 4, 22, 19, 56, 10),
                    new DateTime(2002, 11, 15, 9, 7, 3));
        await featureLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await featureLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("doloremque",
                    "vitae",
                new TimeExtent(new DateTime(2006, 4, 3, 1, 52, 17),
                        new DateTime(2002, 11, 21, 20, 33, 1)),
                new TimeInterval(TemporalTime.Months,
                        909.1173),
                    [new DateTime(2003, 2, 22, 15, 26, 29)],
                    "Asia/Krasnoyarsk",
                    "voluptatum");
        await featureLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await featureLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Minutes,
                    274.3837);
        await featureLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await featureLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        IReadOnlyList<FeatureType> testTypes = [new FeatureType("61a0ee5f-bdf6-86e3-d794-1c73187d0806",
                    "token",
                [new FeatureTemplate("est consequuntur libero",
                    DrawingTool.None,
                        "email",
                    new Graphic(new Polyline([new MapPath([new MapPoint([283.1953])]),
                                new MapPath([new MapPoint([715.7820,
                                        166.4265])])],
                            new SpatialReference(7,
                                    "incidunt",
                                    "quis",
                                    "repellat"),
                                true,
                                true),
                        new TextSymbol("ea assumenda sunt",
                            new MapColor(26, 70, 205),
                            new MapColor(4, 173, 94),
                                new Dimension(980.3399),
                            new MapFont(new Dimension(741.9010),
                                    "Garamond",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.Underline),
                                553.4414,
                            new MapColor(14, 83, 192),
                            new MapColor(1, 134, 155),
                                330.4847,
                            HorizontalAlignment.Right,
                                true,
                                340.4380,
                                new Dimension(808.4843),
                                true),
                        new PopupTemplate("sapiente maxime fugit",
                                "aperiam",
                                ["voluptas"],
                            [new FieldInfo("token",
                                    "voluptas",
                                    "voluptas",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Count)],
                            [new MediaPopupContent("necessitatibus id sed",
                                    "doloremque labore",
                                [new LineChartMediaInfo("quam sed aut",
                                        "perspiciatis",
                                        "necessitatibus totam aut",
                                    new ChartMediaInfoValue(["molestiae",
                                            "et"],
                                            "nam",
                                            "rerum",
                                        [new ChartMediaInfoValueSeries("status",
                                                "facilis",
                                                766.4774),
                                        new ChartMediaInfoValueSeries("name",
                                                "soluta",
                                                868.1012)],
                                        [new MapColor(158, 48, 93)]))],
                                    9)],
                            [new ExpressionInfo("return $feature.Name;",
                                    "avatar",
                                    "reiciendis eum dolorem",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "status",
                                    "maxime facilis sequi",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("illum et ipsa",
                                    "https://picsum.photos/640/480/?image=211",
                                    "e23a391a-4b1f-4be2-fa12-9d14319ebce3",
                                    () => { Console.WriteLine("consectetur"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "velit")]),
                            new AttributesDictionary(),
                            true,
                            "doloremque",
                            "saepe",
                            new GraphicOrigin(Guid.NewGuid(),
                                "omnis",
                                9)),
                        new Thumbnail("veniam",
                            "officiis",
                            120.6722,
                            35.5068))],
                new Dictionary<string, Domain>() {
                    { "omnis", new InheritedDomain("comment") }
                },
                    "fugit"),
            new FeatureType("1659dac8-1a28-a8cf-d2d4-394d05532405",
                    "group",
                [new FeatureTemplate("tempore nihil",
                    DrawingTool.Ellipse,
                        "updatedAt",
                    new Graphic(new Polygon([new MapPath([new MapPoint([140.7343,
                                    113.9136])]),
                                new MapPath([new MapPoint([136.4962]),
                                    new MapPoint([65.1232])])],
                            new SpatialReference(9,
                                    "eius",
                                    "voluptatem",
                                    "ut"),
                            new Point(96.9604,
                                    66.2808,
                                    177.4870,
                                    64.8211,
                                    508.4703,
                                new SpatialReference(2,
                                        "hic",
                                        "dolorum",
                                        "omnis"),
                                    true,
                                    true,
                                    399.0592),
                                true,
                                true,
                                true),
                        new TextSymbol("totam distinctio facilis",
                            new MapColor(16, 19, 208),
                            new MapColor(192, 201, 31),
                                new Dimension(972.7587),
                            new MapFont(new Dimension(421.9462),
                                    "Times New Roman",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                465.9715,
                            new MapColor(188, 140, 56),
                            new MapColor(7, 111, 53),
                                128.4796,
                            HorizontalAlignment.Center,
                                true,
                                411.0797,
                                new Dimension(836.1514),
                                true),
                        new PopupTemplate("impedit eligendi non",
                                "et",
                                ["et",
                                    "sequi"],
                            [new FieldInfo("avatar",
                                    "earum",
                                    "magnam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("token",
                                    "sit",
                                    "assumenda",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Count)],
                            [new MediaPopupContent("et aut nisi",
                                    "quia repellendus iure",
                                [new PieChartMediaInfo("ex quos eius",
                                        "non",
                                        "sed corrupti sint",
                                    new ChartMediaInfoValue(["quo"],
                                            "ut",
                                            "qui",
                                        [new ChartMediaInfoValueSeries("createdAt",
                                                "necessitatibus",
                                                17.0562)],
                                        [new MapColor(146, 55, 187)])),
                                new PieChartMediaInfo("officia et explicabo",
                                        "omnis",
                                        "distinctio officiis debitis",
                                    new ChartMediaInfoValue(["rerum"],
                                            "exercitationem",
                                            "ipsam",
                                        [new ChartMediaInfoValueSeries("category",
                                                "illo",
                                                814.9270)],
                                        [new MapColor(136, 227, 191)]))],
                                    2)],
                            [new ExpressionInfo("return Date();",
                                    "status",
                                    "vel sunt numquam",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("quisquam recusandae sint",
                                    "https://picsum.photos/640/480/?image=438",
                                    "3cc56a66-5175-fadb-b955-24363c33006e",
                                    () => { Console.WriteLine("optio"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "vitae")]),
                            new AttributesDictionary(),
                            true,
                            "sint",
                            "cumque",
                            new GraphicOrigin(Guid.NewGuid(),
                                "ducimus",
                                2)),
                        new Thumbnail("unde",
                            "ipsam",
                            47.3272,
                            212.5030)),
                new FeatureTemplate("in optio sint",
                    DrawingTool.None,
                        "group",
                    new Graphic(new Polygon([new MapPath([new MapPoint([111.5932,
                                    33.1710])]),
                                new MapPath([new MapPoint([763.6103,
                                        370.6195])])],
                            new SpatialReference(4,
                                    "id",
                                    "nesciunt",
                                    "sunt"),
                            new Point(-134.0803,
                                    -23.2968,
                                    -139.8792,
                                    18.3830,
                                    758.6937,
                                new SpatialReference(2,
                                        "odio",
                                        "rerum",
                                        "doloremque"),
                                    true,
                                    true,
                                    201.5825),
                                true,
                                true,
                                true),
                        new TextSymbol("enim nisi quo",
                            new MapColor(239, 243, 229),
                            new MapColor(227, 117, 143),
                                new Dimension(18.6408),
                            new MapFont(new Dimension(361.9214),
                                    "Bookman",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                619.2019,
                            new MapColor(120, 3, 47),
                            new MapColor(90, 20, 235),
                                277.4147,
                            HorizontalAlignment.Left,
                                true,
                                448.0781,
                                new Dimension(780.1806),
                                true),
                        new PopupTemplate("rem exercitationem voluptates",
                                "nemo",
                                ["sed"],
                            [new FieldInfo("email",
                                    "fugiat",
                                    "maiores",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Min)],
                            [new FieldsPopupContent([new FieldInfo("category",
                                        "mollitia",
                                        "et",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.ShortDateLe),
                                        true,
                                        true,
                                    StatisticType.Max)],
                                    "porro et molestiae nam",
                                    "doloribus aut possimus")],
                            [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "email",
                                    "est et id",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "id",
                                    "odio eligendi rem",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("aut ut sit",
                                    "https://picsum.photos/640/480/?image=132",
                                    "55971b51-56dc-0674-85e0-0de0ef9d930c",
                                    () => { Console.WriteLine("tempore"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "voluptas"),
                                    new ActionButton("blanditiis fuga ab",
                                        "https://picsum.photos/640/480/?image=59",
                                        "941f24ca-d9e7-9847-d0c8-f11a8acc2d71",
                                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                        "createdAt",
                                        true,
                                        true,
                                        true,
                                        "suscipit")]),
                            new AttributesDictionary(),
                            true,
                            "laudantium",
                            "officiis",
                            new GraphicOrigin(Guid.NewGuid(),
                                "minus",
                                6)),
                        new Thumbnail("animi",
                            "repellat",
                            224.6875,
                            40.4507))],
                new Dictionary<string, Domain>() {
                    { "nesciunt", new RangeDomain("sed",
                            "adipisci",
                            "token") }
                },
                    "excepturi")];
        await featureLayer.SetTypes(testTypes);
        var types = await featureLayer.GetTypes();
        Assert.AreEqual(testTypes, types);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 8, 3, 9, 42, 7),
                    new DateTime(2008, 1, 15, 20, 45, 41));
        await featureLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await featureLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
