@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWMSLayer(Action renderHandler)
    {
        WMSLayer? wMSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WMSLayer 
                        BlendMode="@(BlendMode.Normal)"
                        Copyright="@("illo")"
                        CustomLayerParameters="@("sit")"
                        Description="@("esse consequatur")"
                        Effect="@(new Effect("sapiente",
                            19360865.2076))"
                        FeatureInfoFormat="@(FeatureInfoFormat.Text_Html)"
                        FeatureInfoUrl="@("http://candida.net")"
                        FetchFeatureInfoFunction="@(new FetchFeatureInfoFunction())"
                        ImageFormat="@("ut")"
                        ImageMaxHeight="@(2)"
                        ImageMaxWidth="@(7)"
                        ImageTransparency="@(true)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(42981678.1569)"
                        MinScale="@(14301.1495)"
                        Opacity="@(0.0810)"
                        PersistenceEnabled="@(true)"
                        RefreshInterval="@(721.5422)"
                        SpatialReferences="@([954.2029])"
                        Title="@("rerum voluptas voluptas")"
                        Url="@("https://landsat2.arcgis.com/arcgis/rest/services/Landsat8_Views/ImageServer")"
                        UseViewTime="@(true)"
                        Version="@("3.1.4.7")"
                        OnRefresh="OnRefresh">
                        <TimeInfo 
                            StartField="@("voluptas")"
                            EndField="@("reiciendis")"
                            Stops="@([new DateTime(2023, 7, 8, 17, 5, 36)])"
                            TimeZone="@("Asia/Chongqing")"
                            TrackIdField="@("ipsam")">
                            <TimeExtent 
                                Start="@(new DateTime(2011, 7, 14, 17, 23, 40))"
                                End="@(new DateTime(2018, 6, 11, 10, 22, 27))">
                            </TimeExtent>
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(949.6151)">
                            </TimeInterval>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2004, 4, 7, 14, 22, 34))"
                            End="@(new DateTime(2013, 11, 5, 17, 7, 34))">
                        </TimeExtent>
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(610.9275)">
                        </TimeInterval>
                        <WMSSublayer 
                            Description="@("earum aperiam quae ut")"
                            LegendEnabled="@(true)"
                            LegendUrl="@("https://jefferey.name")"
                            MaxScale="@(287298.4344)"
                            MinScale="@(29898.1424)"
                            Name="@("category")"
                            PopupEnabled="@(true)"
                            Queryable="@(true)"
                            SpatialReferences="@([908.1952])"
                            Title="@("dicta ipsam voluptatem")"
                            WMSSublayerId="@(6)">
                            <Extent 
                                Xmax="@(62.1694)"
                                Xmin="@(63.1376)"
                                Ymax="@(-45.6773)"
                                Ymin="@(61.5315)"
                                Zmax="@(76.7752)"
                                Zmin="@(215.8035)"
                                Mmax="@(576.5182)"
                                Mmin="@(292.3955)"
                                HasM="@(true)"
                                HasZ="@(true)">
                                <SpatialReference 
                                    Wkid="@(2)"
                                    ImageCoordinateSystem="@("est")"
                                    Wkt="@("eius")"
                                    Wkt2="@("eos")">
                                </SpatialReference>
                            </Extent>
                        </WMSSublayer>
                        <PortalItem />
                        <Extent 
                            Xmax="@(91.9460)"
                            Xmin="@(-76.4687)"
                            Ymax="@(69.2810)"
                            Ymin="@(-5.7094)"
                            Zmax="@(893.2405)"
                            Zmin="@(283.4350)"
                            Mmax="@(88.7146)"
                            Mmin="@(932.9917)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("tenetur")"
                                Wkt="@("nihil")"
                                Wkt2="@("accusantium")">
                            </SpatialReference>
                        </Extent>
                        <SpatialReference 
                            Wkid="@(9)"
                            ImageCoordinateSystem="@("fugiat")"
                            Wkt="@("commodi")"
                            Wkt2="@("et")">
                        </SpatialReference>
                    </WMSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(wMSLayer!);
        await AssertJavaScript("dispatchEvent", args: [wMSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "w-m-s");
        var fetchImageMethodResult = await wMSLayer.FetchImage(new Extent(123.4174,
                    53.3709,
                    56.0269,
                    -74.5679,
                    873.7397,
                    651.3772,
                    335.4965,
                    704.3215,
                new SpatialReference(5,
                        "accusamus",
                        "eveniet",
                        "voluptatem"),
                    true,
                    true),
                6,
                3,
            new WMSLayerFetchImageOptions(291.1441,
                    190.0968,
                    "sit"));
        Assert.IsNotNull(fetchImageMethodResult);
        var findSublayerByIdMethodResult = await wMSLayer.FindSublayerById(2);
        Assert.IsNotNull(findSublayerByIdMethodResult);
        var findSublayerByNameMethodResult = await wMSLayer.FindSublayerByName("email");
        Assert.IsNotNull(findSublayerByNameMethodResult);
        await wMSLayer.Refresh();
        IReadOnlyList<WMSSublayer> testAllSublayers = [new WMSSublayer("earum harum vel",
                new Extent(-167.5350,
                        106.3292,
                        -49.1013,
                        81.1907,
                        148.2025,
                        914.1871,
                        995.9317,
                        588.1810,
                    new SpatialReference(9,
                            "quos",
                            "qui",
                            "vero"),
                        true,
                        true),
                    true,
                    "https://polly.net",
                    7432438.7295,
                    11912.1733,
                    "status",
                    true,
                    true,
                    [231.2651],
                    "sapiente sit numquam",
                    6)];
        await wMSLayer.SetAllSublayers(testAllSublayers);
        var allSublayers = await wMSLayer.GetAllSublayers();
        Assert.AreEqual(testAllSublayers, allSublayers);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await wMSLayer.SetBlendMode(testBlendMode);
        var blendMode = await wMSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        FetchFeatureInfoFunction testFetchFeatureInfoFunction = new FetchFeatureInfoFunction();
        await wMSLayer.SetFetchFeatureInfoFunction(testFetchFeatureInfoFunction);
        var fetchFeatureInfoFunction = await wMSLayer.GetFetchFeatureInfoFunction();
        Assert.AreEqual(testFetchFeatureInfoFunction, fetchFeatureInfoFunction);
        Extent testFullExtent = new Extent(-27.0745,
                    162.0359,
                    -70.3310,
                    -42.2773,
                    669.0702,
                    275.5132,
                    174.0390,
                    142.9104,
                new SpatialReference(8,
                        "sapiente",
                        "ut",
                        "ullam"),
                    true,
                    true);
        await wMSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await wMSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Extent> testFullExtents = [new Extent(149.3485,
                    -17.4984,
                    -58.0191,
                    25.8893,
                    993.7769,
                    899.7646,
                    461.5470,
                    956.0866,
                new SpatialReference(9,
                        "sit",
                        "velit",
                        "officia"),
                    true,
                    true),
            new Extent(46.5596,
                    171.1108,
                    61.8788,
                    37.3538,
                    515.0722,
                    881.1720,
                    654.1529,
                    597.1329,
                new SpatialReference(2,
                        "consequuntur",
                        "maiores",
                        "nesciunt"),
                    true,
                    true)];
        await wMSLayer.SetFullExtents(testFullExtents);
        var fullExtents = await wMSLayer.GetFullExtents();
        Assert.AreEqual(testFullExtents, fullExtents);
        ListMode testListMode = ListMode.Show;
        await wMSLayer.SetListMode(testListMode);
        var listMode = await wMSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await wMSLayer.SetPortalItem(testPortalItem);
        var portalItem = await wMSLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "et",
                    "beatae",
                    "sint");
        await wMSLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await wMSLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<WMSSublayer> testSublayers = [new WMSSublayer("vero ea quia magnam",
                new Extent(170.5215,
                        115.3911,
                        21.9077,
                        57.9038,
                        518.1709,
                        147.8732,
                        965.1959,
                        219.4937,
                    new SpatialReference(3,
                            "qui",
                            "in",
                            "suscipit"),
                        true,
                        true),
                    true,
                    "http://belle.biz",
                    15942854.0225,
                    43353.6663,
                    "name",
                    true,
                    true,
                    [231.4375],
                    "consequuntur atque voluptatem",
                    5)];
        await wMSLayer.SetSublayers(testSublayers);
        var sublayers = await wMSLayer.GetSublayers();
        Assert.AreEqual(testSublayers, sublayers);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2005, 3, 3, 7, 1, 19),
                    new DateTime(2001, 9, 5, 6, 52, 52));
        await wMSLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await wMSLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("nisi",
                    "non",
                new TimeExtent(new DateTime(2020, 4, 9, 11, 52, 24),
                        new DateTime(2015, 8, 7, 19, 26, 56)),
                new TimeInterval(TemporalTime.Centuries,
                        916.1149),
                    [new DateTime(2004, 2, 12, 14, 14, 9),
                        new DateTime(2015, 1, 8, 20, 28, 13)],
                    "Australia/Perth",
                    "et");
        await wMSLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await wMSLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    784.8278);
        await wMSLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await wMSLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 2, 20, 20, 43, 9),
                    new DateTime(2018, 6, 8, 12, 33, 33));
        await wMSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await wMSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
