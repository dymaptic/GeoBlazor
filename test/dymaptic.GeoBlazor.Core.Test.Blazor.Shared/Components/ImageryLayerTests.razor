@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryLayerFromUrl(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <ImageryLayer @ref="layer"
                                  Url="https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer"
                                  Opacity="0.6" Title="Test Layer" ImageMaxHeight=4100 ImageMaxWidth=5000 />
                </Map>
            </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue", 
            args: [layer!.Id, "url", "https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer"]);
        await AssertJavaScript("assertObjectHasPropertyWithValue",
            args: [layer!.Id, "opacity", 0.6]);
        await AssertJavaScript("assertObjectHasPropertyWithValue",
            args: [layer!.Id, "title", "Test Layer"]);
    }
    
    [TestMethod]
    public async Task TestCanRenderImageryLayerFromPortalItem(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
            <ImageryLayer @ref="layer" Title="Test Layer" ImageMaxHeight=4100 ImageMaxWidth=5000>
                <PortalItem PortalItemId="fd61b9e0c69c4e14bebd50a9a968348c"  />
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue", 
            args: [layer!.Id, "portalItem.id", "fd61b9e0c69c4e14bebd50a9a968348c"]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", 
            args: [layer!.Id, "title", "Test Layer"]);
    }

    [TestMethod]
    public async Task TestCanTestMultipleUserSetPropertyValuesAndBuiltInValuesInAnImageryLayer(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <ImageryLayer @ref="layer"
                          Url="https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer"
                          Opacity="0.6" Title="Test Layer" 
                          ImageMaxHeight="4100"
                          ImageMaxWidth="15000"
                          HasMultidimensions=false
                          LegendEnabled="true"
                          >
            </ImageryLayer>
        </Map>
    </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue",
            args: [layer!.Id, "url", "https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer"]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "opacity", 0.6]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "title", "Test Layer"]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "imageMaxHeight", 4100]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "hasMultidimensions", false]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "fullExtent.xmax", 2266845]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "imageMaxWidth", 15000]);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layer!.Id, "legendEnabled", true]);
    }

}