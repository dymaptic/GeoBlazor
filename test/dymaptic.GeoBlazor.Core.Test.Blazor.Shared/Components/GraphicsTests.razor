@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {
    [TestMethod]
    public async Task TestCanClearGraphics(Action renderHandler)
    {
        MapView? mapView = null;
        GraphicsLayer graphicsLayer = new();

        async Task OnViewInitialized()
        {
            await mapView!.AddLayer(graphicsLayer);
        }
        AddMapRenderFragment(
            @<MapView OnViewInitialized="@OnViewInitialized" @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <PortalItem PortalItemId="55ebf90799fa4a3fa57562700a68c405" />
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();

        await graphicsLayer.Clear();

        Assert.IsNotNull(graphicsLayer.View);
    }

    [TestMethod]
    public async Task TestGraphicIdRemainsConsistentAfterOperations(Action renderHandler)
    {
        MapView? mapView = null;
        Graphic? graphic = null;
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
                    </Basemap>
                    <GraphicsLayer @ref="graphicsLayer">
                        <Graphic @ref="graphic">
                            <Point X="0" Y="0" />
                        </Graphic>
                    </GraphicsLayer>
                </Map>
            </MapView>);

        await WaitForMapToRender();

        HitTestOptions hitTestOptions = new()
        {
            IncludeByGeoBlazorId = [graphicsLayer!.Id]
        };

        HitTestResult hitTestResult = await mapView!.HitTest((Point)graphic!.Geometry!, hitTestOptions);

        GraphicHit[] graphicHit = hitTestResult.Results.OfType<GraphicHit>().ToArray();

        Assert.AreEqual(1, graphicHit.Length);

        GraphicHit firstGraphic = graphicHit[0];

        Assert.IsNotNull(firstGraphic.LayerId);
        Assert.IsNotNull(firstGraphic.MapPoint);
        Assert.IsNotNull(firstGraphic.Graphic);


        Assert.AreEqual(graphic.Id, firstGraphic.Graphic.Id);
    }

    [TestMethod]
    public async Task TestCanDeleteGraphicWithNewGeometry(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment(
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();

        Graphic testGraphic = new(new Point(0, 0),
        new SimpleMarkerSymbol(color: new("red"), size: 10));
        await mapView!.AddGraphic(testGraphic);
        await testGraphic.SetGeometry(new Point(90, 90));
        await mapView.RemoveGraphic(testGraphic);
    }


    [TestMethod]
    public async Task TestGraphicsAddedViaMarkupAreOnlyAddedOnce(Action renderHandler)
    {
        Graphic? graphic = null;
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
                    </Basemap>
                    <GraphicsLayer @ref="graphicsLayer">
                        <Graphic @ref="graphic">
                            <Point X="0" Y="0" />
                        </Graphic>
                    </GraphicsLayer>
                </Map>
            </MapView>);

        await WaitForMapToRender();
        Assert.AreEqual(1, graphicsLayer!.Graphics.Count);
        await graphic!.Refresh();
        await AssertJavaScript("assertGraphicExistsInLayer", args: [graphicsLayer.Id, "point", 1]);
    }

    [TestMethod]
    public async Task TestCanAddGraphicsToRenderedMap(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment(
    @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
        <Map>
            <Basemap>
                <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
            </Basemap>
        </Map>
    </MapView>);

        await WaitForMapToRender();

        Graphic testGraphic = new(new Point(0, 0),
        new SimpleMarkerSymbol(color: new("red"), size: 10));
        await mapView!.AddGraphic(testGraphic);
        await AssertJavaScript("assertGraphicExistsInView", args: ["point", 1]);
    }

    [TestMethod]
    public async Task TestCanContinueWithBrokenGraphicUrl(Action renderHandler)
    {
        GraphicsLayer? layer = null;
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <Basemap>
                <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
            </Basemap>
            <GraphicsLayer @ref="layer" />
        </Map>
    </MapView>);

        await WaitForMapToRender();

        List<Graphic> newGraphics = [];

        Point point = new(0, 0);
        Graphic graphic = new(point);
        newGraphics.Add(graphic);
        // invalid url
        PictureMarkerSymbol ps = new("https://github.githubassets.com/anything.png",
        15, 15, 0, 0, 0);
        await graphic.SetSymbol(ps);

        point = new(point.Longitude - 0.1, point.Latitude);
        Graphic graphic2 = new(point);
        newGraphics.Add(graphic2);
        PictureMarkerSymbol ps2 = new(
        "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
        15, 15, 0, 0, 0);
        await graphic2.SetSymbol(ps2);

        await layer!.Add(newGraphics);
        await Task.Delay(1);
        await AssertJavaScript("assertGraphicExistsInLayer", args: [layer.Id, "point", 2]);
    }

    [TestMethod]
    public async Task TestCanRenderPictureMarkerWithJpg(Action renderHandler)
    {
        GraphicsLayer? layer = null;
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <Basemap>
                <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
            </Basemap>
            <GraphicsLayer @ref="layer" />
        </Map>
    </MapView>);

        await WaitForMapToRender();

        Point point = new(0, 0);
        Graphic graphic = new(point);
        PictureMarkerSymbol ps = new("./_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/images/homeicon.jpg",
        15, 15, 0, 0, 0);
        await graphic.SetSymbol(ps);

        await layer!.Add(graphic);
        await Task.Delay(1);
        await AssertJavaScript("assertGraphicExistsInLayer", args: [layer.Id, "point", 1]);
    }

    [TestMethod]
    public async Task TestCanRenderGraphicWithTextSymbol(Action renderHandler)
    {
        GraphicsLayer? layer = null;
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <Basemap>
                <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
            </Basemap>
            <GraphicsLayer @ref="layer" />
        </Map>
    </MapView>);

        await WaitForMapToRender();

        Point point = new(0, 0);
        Graphic graphic = new Graphic(point);
        TextSymbol symbol = new("Hello", color: new MapColor("red"),
            backgroundColor: new MapColor("transparent"),
            font: new MapFont(12, "Arial", MapFontStyle.Normal, FontWeight.Bold) );
        await graphic.SetSymbol(symbol);

        await layer!.Add(graphic);
        await Task.Delay(1);
        await AssertJavaScript("assertGraphicExistsInLayer", args: [layer.Id, "point", 1]);
    }
}