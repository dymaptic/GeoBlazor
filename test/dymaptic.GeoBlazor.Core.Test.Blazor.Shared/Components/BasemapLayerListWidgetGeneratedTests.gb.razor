@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBasemapLayerListWidget(Action renderHandler)
    {
        BasemapLayerListWidget? basemapLayerListWidget = null;

        BasemapLayerListTriggerActionEvent? triggerActionResult = null;
        void OnTriggerAction(BasemapLayerListTriggerActionEvent result)
        {
            triggerActionResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <BasemapLayerListWidget 
                    BaseFilterText="@("facere tempora perspiciatis")"
                    BaseListItemCreatedFunction="@(new ListItemCreatedHandler())"
                    BasemapTitle="@("et quo optio")"
                    CatalogOptions="@(new BasemapLayerListCatalogOptions("voluptas",
                        new CatalogLayerListListItemCreatedHandler(new { Value = "magnam" },
                            default),
                            419.6254,
                            "eos",
                            "nemo",
                        new BasemapLayerListCatalogOptionsVisibleElements(true,
                            true,
                            true,
                            true)))"
                    Collapsed="@(true)"
                    DragEnabled="@(true)"
                    EditingTitle="@(true)"
                    FilterPlaceholder="@("commodi")"
                    HeadingLevel="@(4)"
                    Icon="@("dolores")"
                    Label="@("voluptates")"
                    MinFilterItems="@(41.4767)"
                    ReferenceFilterText="@("dolorum perspiciatis qui")"
                    ReferenceListItemCreatedFunction="@(new ListItemCreatedHandler())"
                    SelectionMode="@(SelectionMode.Single)"
                    VisibilityAppearance="@(VisibilityAppearance.Checkbox)"
                    VisibleElements="@(new BasemapLayerListWidgetVisibleElements())"
                    WidgetId="@("non")"
                    OnTriggerAction="OnTriggerAction">
                    <BasemapLayerListViewModel 
                        BaseListItemCreatedFunction="@(new ListItemCreatedHandler())"
                        BasemapTitle="@("quo sit deleniti")"
                        CheckPublishStatusEnabled="@(true)"
                        ListModeDisabled="@(true)"
                        ReferenceListItemCreatedFunction="@(new ListItemCreatedHandler())">
                    </BasemapLayerListViewModel>
                    <ListItem 
                        ActionsOpen="@(true)"
                        ActionsSections="@(new ActionButton("assumenda cum nihil",
                            "https://picsum.photos/640/480/?image=811",
                            "dbc11c55-ac54-d798-a488-d3033fc8a0dc",
                            () => { Console.WriteLine("doloremque"); return Task.CompletedTask; },
                            "name",
                            true,
                            true,
                            true,
                            "eveniet"))"
                        ChildrenSortable="@(true)"
                        Hidden="@(true)"
                        Layer="@(new ImageryLayer("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer",
                            new PortalItem(),
                                new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(170, 198, 149),
                                        new MapColor(250, 39, 12)),
                                    true,
                                    true,
                                    [2],
                                    7,
                                    8,
                                    StretchType.None,
                                    [new RasterBandStatistics(429.0662,
                                        7,
                                        402.7981,
                                        408.6350,
                                        235.6533,
                                        25.5274,
                                        795.8446,
                                        484.9271)],
                                    true,
                                    8),
                                [9,
                                    9],
                            BlendMode.HardLight,
                                209.3941,
                                197.9944,
                                "qui",
                                "voluptatem",
                                new Effect("quaerat",
                                    26475066.4060),
                            ImageFormat.Jpgpng,
                                true,
                                9,
                                3,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            new TileInfo(528.2730,
                                    TileInfoFormat.Jpg,
                                    true,
                                [new LOD(7,
                                        "modi",
                                        47.6554,
                                        32523344.5764),
                                new LOD(6,
                                        "aliquid",
                                        83.1566,
                                        23459642.4265)],
                                new Point(-68.0653,
                                        -70.4390,
                                        -11.2969,
                                        -59.3842,
                                        564.9707,
                                    new SpatialReference(2,
                                            "vel",
                                            "accusamus",
                                            "est"),
                                        true,
                                        true,
                                        866.6419),
                                    [7,
                                        4],
                                new SpatialReference(6,
                                        "repellat",
                                        "placeat",
                                        "dolor")),
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                                true))"
                        ListModeDisabled="@(true)"
                        Open="@(true)"
                        Sortable="@(true)"
                        Title="@("consequatur qui et")">
                    </ListItem>
                </BasemapLayerListWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(basemapLayerListWidget!);
        await AssertJavaScript("dispatchEvent", args: [basemapLayerListWidget!.Id, "trigger-action"]);
        int tries = 100;
        while (tries > 0 &&
            (triggerActionResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<BasemapLayerListTriggerActionEvent>(triggerActionResult);
        await AssertJavaScript("assertWidgetExists", args: "basemap-layer-list");
        await basemapLayerListWidget.TriggerAction(new ActionButton("neque nemo qui",
                "https://picsum.photos/640/480/?image=174",
                "7a83c962-a737-74c5-3ead-11b2e2ee798c",
                () => { Console.WriteLine("quis"); return Task.CompletedTask; },
                "phone",
                true,
                true,
                true,
                "quis"),
            new ListItem(true,
                    new ActionButton("dolore quidem nihil",
                        "https://picsum.photos/640/480/?image=643",
                        "0024666d-ab4b-e4f1-5aae-d4235474cf29",
                        () => { Console.WriteLine("officia"); return Task.CompletedTask; },
                        "password",
                        true,
                        true,
                        true,
                        "non"),
                    true,
                    true,
                new CSVLayer("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv",
                        "saepe officia sed",
                        "eaque",
                        0.6250,
                        true,
                    ListMode.Show,
                    BlendMode.Invert,
                    new PopupTemplate("atque unde illo",
                            "expedita",
                            ["dicta"],
                        [new FieldInfo("phone",
                                "eius",
                                "excepturi",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("password",
                                "aut",
                                "aut",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Min)],
                        [new MediaPopupContent("neque est laborum",
                                "eaque est natus",
                            [new LineChartMediaInfo("iusto harum ut",
                                    "ullam",
                                    "aut velit quis",
                                new ChartMediaInfoValue(["quo",
                                        "aut"],
                                        "omnis",
                                        "sequi",
                                    [new ChartMediaInfoValueSeries("email",
                                            "explicabo",
                                            255.4603)],
                                    [new MapColor(44, 187, 187),
                                    new MapColor(236, 113, 153)])),
                            new PieChartMediaInfo("dolores aut dolores",
                                    "omnis",
                                    "ut expedita qui",
                                new ChartMediaInfoValue(["harum"],
                                        "officiis",
                                        "et",
                                    [new ChartMediaInfoValueSeries("category",
                                            "voluptas",
                                            923.8531)],
                                    [new MapColor(78, 82, 203),
                                    new MapColor(76, 93, 171)]))],
                                2),
                        new RelationshipPopupContent("cumque quaerat culpa",
                                "enim tenetur",
                                9,
                                "sed",
                            [new RelatedRecordsInfoFieldOrder("velit",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("eveniet",
                                OrderBy.Desc)],
                                7)],
                        [new ExpressionInfo("return Date();",
                                "password",
                                "esse doloremque nam",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("repellat eveniet consectetur",
                                "https://picsum.photos/640/480/?image=81",
                                "7a8b8295-8bc9-813f-30cd-26adb6374c06",
                                () => { Console.WriteLine("quis"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "quidem")]),
                        default,
                        "velit",
                        CSVDelimiter.Space,
                        "consequatur",
                        new Effect("enim",
                            7726243.6577),
                    new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("var length = Geometry($feature).length; return length;",
                                "aut dolores delectus"),
                        ElevationInfoMode.RelativeToScene,
                            508.3389,
                        ElevationUnit.Centimeters)),
                    true,
                    true,
                    true,
                    "illum pariatur delectus"));
        BasemapLayerListCatalogOptions testCatalogOptions = new BasemapLayerListCatalogOptions("labore",
                new CatalogLayerListListItemCreatedHandler(new { Value = "sunt" },
                    default),
                    905.6984,
                    "qui",
                    "ab",
                new BasemapLayerListCatalogOptionsVisibleElements(true,
                    true,
                    true,
                    true));
        await basemapLayerListWidget.SetCatalogOptions(testCatalogOptions);
        var catalogOptions = await basemapLayerListWidget.GetCatalogOptions();
        Assert.AreEqual(testCatalogOptions, catalogOptions);
        IReadOnlyList<ListItem> testSelectedItems = [new ListItem(true,
                    new ActionButton("hic eveniet et",
                        "https://picsum.photos/640/480/?image=93",
                        "0f9563f5-8bbc-56de-98e7-f0776d80ffd0",
                        () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                        "email",
                        true,
                        true,
                        true,
                        "et"),
                    true,
                    true,
                new BingMapsLayer("dicta",
                        BingImageryStyle.Aerial,
                    BlendMode.ColorBurn,
                        new Effect("commodi",
                            22819511.8600),
                        3373981.7270,
                        46294.0378,
                        409.7521,
                    new SpatialReference(3,
                            "enim",
                            "recusandae",
                            "fugit"),
                        default,
                    new Extent(-116.3113,
                            67.1682,
                            2.4041,
                            62.2277,
                            879.7580,
                            809.9560,
                            196.6817,
                            690.5818,
                        new SpatialReference(6,
                                "quas",
                                "labore",
                                "quo"),
                            true,
                            true),
                    ListMode.Hide,
                        0.5976,
                        true,
                        "voluptates"),
                    true,
                    true,
                    true,
                    "eos id quia")];
        await basemapLayerListWidget.SetSelectedItems(testSelectedItems);
        var selectedItems = await basemapLayerListWidget.GetSelectedItems();
        Assert.AreEqual(testSelectedItems, selectedItems);
        SelectionMode testSelectionMode = SelectionMode.Multiple;
        await basemapLayerListWidget.SetSelectionMode(testSelectionMode);
        var selectionMode = await basemapLayerListWidget.GetSelectionMode();
        Assert.AreEqual(testSelectionMode, selectionMode);
        BasemapLayerListViewModel testViewModel = new BasemapLayerListViewModel(new ListItemCreatedHandler(),
                    "iusto nemo perspiciatis",
                    true,
                    true,
                new ListItemCreatedHandler());
        await basemapLayerListWidget.SetViewModel(testViewModel);
        var viewModel = await basemapLayerListWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
        VisibilityAppearance testVisibilityAppearance = VisibilityAppearance.Checkbox;
        await basemapLayerListWidget.SetVisibilityAppearance(testVisibilityAppearance);
        var visibilityAppearance = await basemapLayerListWidget.GetVisibilityAppearance();
        Assert.AreEqual(testVisibilityAppearance, visibilityAppearance);
    }
}
