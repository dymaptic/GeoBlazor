@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBasemapLayerListWidget(Action renderHandler)
    {
        BasemapLayerListWidget? basemapLayerListWidget = null;

        BasemapLayerListTriggerActionEvent? triggerActionResult = null;
        void OnTriggerAction(BasemapLayerListTriggerActionEvent result)
        {
            triggerActionResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <BasemapLayerListWidget 
                    BaseFilterText="@("atque aut error")"
                    BaseListItemCreatedFunction="@(new ListItemCreatedHandler())"
                    BasemapTitle="@("quos dolorem dolorum")"
                    CatalogOptions="@(new BasemapLayerListCatalogOptions("autem",
                        new CatalogLayerListListItemCreatedHandler(),
                            747.0464,
                            "reprehenderit",
                            "sunt",
                        new BasemapLayerListCatalogOptionsVisibleElements(true,
                            true,
                            true,
                            true)))"
                    Collapsed="@(true)"
                    DragEnabled="@(true)"
                    EditingTitle="@(true)"
                    FilterPlaceholder="@("consequuntur")"
                    HeadingLevel="@(3)"
                    Icon="@("ad")"
                    Label="@("nihil")"
                    MinFilterItems="@(594.6896)"
                    ReferenceFilterText="@("enim et voluptatem")"
                    ReferenceListItemCreatedFunction="@(new ListItemCreatedHandler())"
                    SelectionMode="@(SelectionMode.None)"
                    VisibilityAppearance="@(VisibilityAppearance.Checkbox)"
                    VisibleElements="@(new BasemapLayerListWidgetVisibleElements())"
                    WidgetId="@("dolores")"
                    OnTriggerAction="OnTriggerAction">
                    <BasemapLayerListViewModel 
                        BaseListItemCreatedFunction="@(new ListItemCreatedHandler())"
                        BasemapTitle="@("eos ipsum sunt")"
                        CheckPublishStatusEnabled="@(true)"
                        ListModeDisabled="@(true)"
                        ReferenceListItemCreatedFunction="@(new ListItemCreatedHandler())">
                    </BasemapLayerListViewModel>
                    <ListItem 
                        ActionsOpen="@(true)"
                        ActionsSections="@(new ActionButton("facilis assumenda porro",
                            "https://picsum.photos/640/480/?image=1063",
                            "7663f074-c651-1699-ec4c-1219d36aaa8e",
                            () => { Console.WriteLine("reprehenderit"); return Task.CompletedTask; },
                            "category",
                            true,
                            true,
                            true,
                            "qui"))"
                        ChildrenSortable="@(true)"
                        Hidden="@(true)"
                        Layer="@(new WebTileLayer(BlendMode.ColorDodge,
                                "quas",
                                new Effect("temporibus",
                                    23711153.9845),
                            new Extent(161.6474,
                                    132.5216,
                                    -70.6089,
                                    -57.6857,
                                    806.2946,
                                    425.0135,
                                    313.4759,
                                    581.1304,
                                new SpatialReference(3,
                                        "accusantium",
                                        "dolor",
                                        "impedit"),
                                    true,
                                    true),
                            ListMode.Show,
                                39961089.4157,
                                24248.7684,
                                0.3571,
                                true,
                            new PortalItem(),
                                972.0344,
                                ["odit",
                                    "ipsam"],
                            new TileInfo(308.4604,
                                    TileInfoFormat.Jpg,
                                    true,
                                [new LOD(9,
                                        "in",
                                        70.7767,
                                        22998867.0502),
                                new LOD(3,
                                        "eaque",
                                        28.1728,
                                        14192609.5835)],
                                new Point(47.8255,
                                        67.7031,
                                        -21.4983,
                                        -14.5965,
                                        200.3779,
                                    new SpatialReference(5,
                                            "ut",
                                            "et",
                                            "non"),
                                        true,
                                        true,
                                        374.2624),
                                    [9],
                                new SpatialReference(6,
                                        "dicta",
                                        "dolor",
                                        "consequatur")),
                                "optio fugiat velit"))"
                        ListModeDisabled="@(true)"
                        Open="@(true)"
                        Sortable="@(true)"
                        Title="@("ex quia reprehenderit")">
                    </ListItem>
                </BasemapLayerListWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(basemapLayerListWidget!);
        await AssertJavaScript("dispatchEvent", args: [basemapLayerListWidget!.Id, "trigger-action"]);
        int tries = 100;
        while (tries > 0 &&
            (triggerActionResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<BasemapLayerListTriggerActionEvent>(triggerActionResult);
        await AssertJavaScript("assertWidgetExists", args: "basemap-layer-list");
        await basemapLayerListWidget.TriggerAction(new ActionButton("nihil fugiat velit",
                "https://picsum.photos/640/480/?image=913",
                "6a0bbed2-823d-4c11-cf17-fdf4b7c4252d",
                () => { Console.WriteLine("quibusdam"); return Task.CompletedTask; },
                "password",
                true,
                true,
                true,
                "non"),
            new ListItem(true,
                    new ActionButton("impedit dolorum laborum",
                        "https://picsum.photos/640/480/?image=775",
                        "c0147d59-1603-8637-34fa-edb3b5cb3dc6",
                        () => { Console.WriteLine("perspiciatis"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "repudiandae"),
                    true,
                    true,
                new KMLLayer("https://earthquake.usgs.gov/fdsnws/event/1/query?format=kml&minmagnitude=5.8",
                    new PortalItem(),
                    BlendMode.Luminosity,
                        new Effect("magni",
                            10899223.2194),
                    new Extent(20.4005,
                            -36.5698,
                            -5.9891,
                            -17.1200,
                            384.7083,
                            712.2627,
                            659.1558,
                            946.6888,
                        new SpatialReference(9,
                                "sed",
                                "aut",
                                "perferendis"),
                            true,
                            true),
                    ListMode.Hide,
                        31713703.0305,
                        40510.2136,
                        0.5264,
                        true,
                    [new KMLSublayer("qui placeat",
                            2,
                            "cumque",
                            "qui sunt sed")],
                        "fuga nihil blanditiis",
                    new TimeExtent(new DateTime(2002, 11, 12, 22, 2, 2),
                            new DateTime(2018, 5, 8, 10, 1, 13))),
                    true,
                    true,
                    true,
                    "repellendus ut totam"));
        BasemapLayerListCatalogOptions testCatalogOptions = new BasemapLayerListCatalogOptions("atque",
                new CatalogLayerListListItemCreatedHandler(),
                    550.8410,
                    "non",
                    "eos",
                new BasemapLayerListCatalogOptionsVisibleElements(true,
                    true,
                    true,
                    true));
        await basemapLayerListWidget.SetCatalogOptions(testCatalogOptions);
        var catalogOptions = await basemapLayerListWidget.GetCatalogOptions();
        Assert.AreEqual(testCatalogOptions, catalogOptions);
        IReadOnlyList<ListItem> testSelectedItems = [new ListItem(true,
                    new ActionButton("qui et et",
                        "https://picsum.photos/640/480/?image=851",
                        "ea191848-08b0-d28f-076a-15fb967947f9",
                        () => { Console.WriteLine("autem"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "ut"),
                    true,
                    true,
                new ImageryTileLayer("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer",
                    new PortalItem(),
                        new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(104, 208, 44),
                                new MapColor(122, 252, 91)),
                            true,
                            true,
                            [6,
                            3],
                            9,
                            7,
                            StretchType.None,
                            [new RasterBandStatistics(910.6637,
                                4,
                                38.3411,
                                938.7024,
                                283.7549,
                                377.6214,
                                20.3798,
                                969.4492)],
                            true,
                            9),
                        [9],
                    BlendMode.Xor,
                        "harum",
                        new Effect("libero",
                            34976233.6967),
                        PixelInterpolation.Bilinear,
                        true,
                    ListMode.Show,
                        24595091.3160,
                        28949.6306,
                    [new DimensionalDefinition("phone",
                            true,
                            "category")],
                    new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([404.6399]),
                                new MapPoint([315.9326])]),
                                new MapPath([new MapPoint([826.4520,
                                        151.0172])])],
                            new SpatialReference(5,
                                    "est",
                                    "vel",
                                    "quisquam"),
                            new Point(-178.7524,
                                    39.5547,
                                    -160.1456,
                                    -76.0644,
                                    580.8795,
                                new SpatialReference(1,
                                        "dolorem",
                                        "sunt",
                                        "in"),
                                    true,
                                    true,
                                    850.3481),
                                true,
                                true,
                                true),
                        [new DimensionalDefinition("avatar",
                                true,
                                "status"),
                        new DimensionalDefinition("comment",
                                true,
                                "createdAt")])),
                    true,
                    true,
                    true,
                    "quia inventore sed"),
            new ListItem(true,
                    new ActionButton("dignissimos delectus debitis",
                        "https://picsum.photos/640/480/?image=175",
                        "c14182a1-5aa0-b293-9a6c-cb0d40338894",
                        () => { Console.WriteLine("est"); return Task.CompletedTask; },
                        "category",
                        true,
                        true,
                        true,
                        "et"),
                    true,
                    true,
                new ImageryTileLayer("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer",
                    new PortalItem(),
                        new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(95, 6, 17),
                                new MapColor(185, 146, 133)),
                            true,
                            true,
                            [8,
                            3],
                            8,
                            5,
                            StretchType.MinMax,
                            [new RasterBandStatistics(441.8107,
                                5,
                                501.5087,
                                56.6098,
                                105.4678,
                                789.6786,
                                69.6827,
                                58.9643),
                            new RasterBandStatistics(429.0064,
                                3,
                                582.0776,
                                699.2138,
                                548.0292,
                                227.9457,
                                40.0609,
                                695.1544)],
                            true,
                            9),
                        [5],
                    BlendMode.SoftLight,
                        "possimus",
                        new Effect("tempora",
                            16929348.5217),
                        PixelInterpolation.Nearest,
                        true,
                    ListMode.Show,
                        41924008.2160,
                        46031.1938,
                    [new DimensionalDefinition("title",
                            true,
                            "password"),
                    new DimensionalDefinition("token",
                            true,
                            "id")],
                    new MultidimensionalSubset(new Extent(-4.7828,
                                -106.8678,
                                57.0326,
                                -24.5853,
                                317.5380,
                                45.4047,
                                897.3768,
                                846.8141,
                            new SpatialReference(5,
                                    "fugiat",
                                    "laboriosam",
                                    "qui"),
                                true,
                                true),
                        [new DimensionalDefinition("category",
                                true,
                                "avatar"),
                        new DimensionalDefinition("createdAt",
                                true,
                                "createdAt")])),
                    true,
                    true,
                    true,
                    "aut iusto et")];
        await basemapLayerListWidget.SetSelectedItems(testSelectedItems);
        var selectedItems = await basemapLayerListWidget.GetSelectedItems();
        Assert.AreEqual(testSelectedItems, selectedItems);
        SelectionMode testSelectionMode = SelectionMode.Multiple;
        await basemapLayerListWidget.SetSelectionMode(testSelectionMode);
        var selectionMode = await basemapLayerListWidget.GetSelectionMode();
        Assert.AreEqual(testSelectionMode, selectionMode);
        BasemapLayerListViewModel testViewModel = new BasemapLayerListViewModel(new ListItemCreatedHandler(),
                    "consequatur qui explicabo",
                    true,
                    true,
                new ListItemCreatedHandler());
        await basemapLayerListWidget.SetViewModel(testViewModel);
        var viewModel = await basemapLayerListWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
        VisibilityAppearance testVisibilityAppearance = VisibilityAppearance.Checkbox;
        await basemapLayerListWidget.SetVisibilityAppearance(testVisibilityAppearance);
        var visibilityAppearance = await basemapLayerListWidget.GetVisibilityAppearance();
        Assert.AreEqual(testVisibilityAppearance, visibilityAppearance);
    }
}
