@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderArcGisDefaultBasemap(Action renderHandler)
    {
        AddMapRenderFragment(
		    @<MapView class="map-view" OnViewRendered="renderHandler">
		        <Map>
		            <Basemap>
		                <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
		            </Basemap>
		        </Map>
		    </MapView>);
        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanRenderBasemapFromPortalId(Action renderHandler)
    {
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <Basemap>
                <PortalItem PortalItemId="55ebf90799fa4a3fa57562700a68c405" />
            </Basemap>
        </Map>
    </MapView>);

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanRenderBasemapFromTileLayers(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <TileLayer>
                            <PortalItem PortalItemId="1b243539f4514b6ba35e7d995890db1d" />
                        </TileLayer>
                        <VectorTileLayer Opacity="0.75">
                            <PortalItem PortalItemId="6976148c11bd497d8624206f9ee03e30" />
                        </VectorTileLayer>
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertBasemapHasTwoLayers");
    }

    [TestMethod]
    public async Task TestCanSetBaseMapLayerVisibility(Action renderHandler)
    {
        MapView? mapView = null;
        async Task OnViewInitialized()
        {
            await mapView!.AddLayer(new ImageryTileLayer(
            "https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer"),
            isBasemapLayer: true);
        }
        AddMapRenderFragment(
    @<MapView OnViewInitialized="@OnViewInitialized"
                          @ref="@mapView" class="map-view"
                          OnViewRendered="renderHandler">
        <Map>
            <Basemap>
                <PortalItem PortalItemId="55ebf90799fa4a3fa57562700a68c405" />
            </Basemap>
        </Map>
    </MapView>);

        await WaitForMapToRender();

        ImageryTileLayer? imageryTileLayer = mapView!.Map!.Basemap!.BaseLayers?.OfType<ImageryTileLayer>().SingleOrDefault();

        Assert.IsNotNull(imageryTileLayer);
        Assert.IsNotNull(imageryTileLayer.CoreJsModule);

        await imageryTileLayer.SetVisibility(false);

        Assert.IsFalse(imageryTileLayer.Visible);
    }
}