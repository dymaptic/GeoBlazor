@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {
    [TestMethod]
    public async Task TestCanRenderArcGisDefaultBasemap(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);
        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanRenderBasemapFromPortalId(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <PortalItem Id="55ebf90799fa4a3fa57562700a68c405" />
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanRenderBasemapFromTileLayers(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <TileLayer>
                            <PortalItem Id="1b243539f4514b6ba35e7d995890db1d" />
                        </TileLayer>
                        <VectorTileLayer Opacity="0.75">
                            <PortalItem Id="6976148c11bd497d8624206f9ee03e30" />
                        </VectorTileLayer>
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertBasemapHasTwoLayers");
    }

    [TestMethod]
    public async Task TestCanRefreshBasemapFromBaseMapStyle(Action renderHandler)
    {
        MapView? mapView = null;
        BasemapStyleName baseMapStyle = BasemapStyleName.ArcgisDarkGrayBase;

        AddMapRenderFragment(
            @<MapView @ref="@mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="@baseMapStyle" />
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();

        Assert.IsTrue(mapView!.Map!.Basemap!.Style!.Name == baseMapStyle);
        await AssertJavaScript("assertBasemapHasStyle", args: baseMapStyle);

        baseMapStyle = BasemapStyleName.ArcgisNova;
        mapView!.Map!.Basemap!.Refresh();
        await WaitForMapToRender();

        Assert.IsTrue(mapView!.Map!.Basemap!.Style!.Name == baseMapStyle);
        await AssertJavaScript("assertBasemapHasStyle", args: baseMapStyle);
    }

    [TestMethod]
    public async Task TestCanRefreshBasemapFromPortalId(Action renderHandler)
    {
        MapView? mapView = null;
        string portalItemId = "55ebf90799fa4a3fa57562700a68c405";

        AddMapRenderFragment(
            @<MapView @ref="@mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <PortalItem Id="@portalItemId" />
                    </Basemap>
                </Map>
            </MapView>);

        await WaitForMapToRender();

        Assert.IsTrue(mapView!.Map!.Basemap!.PortalItem!.Id == portalItemId);
        await AssertJavaScript("assertBasemapHasPortalItemId", args: portalItemId);

        portalItemId = "9053b6cd38d54e65bb0967f355a232df";
        mapView!.Map!.Basemap!.Refresh();
        await WaitForMapToRender();

        Assert.IsTrue(mapView!.Map!.Basemap!.PortalItem!.Id == portalItemId);
        await AssertJavaScript("assertBasemapHasPortalItemId", args: portalItemId);
    }
}