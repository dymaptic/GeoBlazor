@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("dignissimos")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.Difference)"
                        Effect="@(new Effect("cupiditate",
                            44154373.3328))"
                        MaxScale="@(48403850.4823)"
                        MinScale="@(25585.7209)"
                        RefreshInterval="@(107.5942)"
                        SpatialReference="@(new SpatialReference(4,
                                "ratione",
                                "dolor",
                                "est"))"
                        FullExtent="@(new Extent(-123.0646,
                                27.0021,
                                -20.1954,
                                -12.1586,
                                646.8409,
                                963.2461,
                                130.5037,
                                860.4775,
                            new SpatialReference(7,
                                    "enim",
                                    "voluptas",
                                    "tempora"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.3566)"
                        PersistenceEnabled="@(true)"
                        Region="@("id")"
                        Title="@("explicabo quo quod")"
                        VisibilityTimeExtent="@(new TimeExtent(new DateTime(2009, 11, 22, 15, 36, 51),
                                new DateTime(2017, 1, 16, 15, 12, 35)))">
                        <TileInfo 
                            Dpi="@(936.5445)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "illum",
                                    66.2309,
                                    29671634.2450),
                            new LOD(7,
                                    "aut",
                                    54.6339,
                                    7637299.1112),
                            new LOD(3,
                                    "praesentium",
                                    100.9435,
                                    17507909.4166)])"
                            Origin="@(new Point(-115.4096,
                                    75.8048,
                                    123.4960,
                                    -2.0078,
                                    164.3716,
                                new SpatialReference(5,
                                        "nemo",
                                        "ut",
                                        "autem"),
                                    true,
                                    true,
                                    743.9030))"
                            Size="@([3,
                                3,
                                4])"
                            SpatialReference="@(new SpatialReference(7,
                                    "numquam",
                                    "neque",
                                    "nulla"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Saturation;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "tempora",
                    "aliquid",
                    "asperiores");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(604.4212,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(4,
                        "consequatur",
                        22.2069,
                        11670022.7068),
                new LOD(7,
                        "inventore",
                        23.4775,
                        24476225.6153),
                new LOD(5,
                        "suscipit",
                        18.8618,
                        22003292.3278)],
                new Point(165.4648,
                        57.7798,
                        -35.7700,
                        34.7182,
                        196.7817,
                    new SpatialReference(1,
                            "reiciendis",
                            "autem",
                            "voluptatum"),
                        true,
                        true,
                        362.0840),
                    [8,
                        6,
                        6,
                        4],
                new SpatialReference(4,
                        "vel",
                        "necessitatibus",
                        "ut"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
    }
}
