@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("fugiat")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.SourceOut)"
                        Effect="@(new Effect("iste",
                            1714402.8734))"
                        MaxScale="@(23821880.8674)"
                        MinScale="@(28570.1335)"
                        RefreshInterval="@(252.6673)"
                        SpatialReference="@(new SpatialReference(8,
                                "quidem",
                                "sit",
                                "vitae"))"
                        FullExtent="@(new Extent(78.9966,
                                -128.7922,
                                55.2685,
                                44.6439,
                                296.9491,
                                611.4227,
                                669.4645,
                                454.3631,
                            new SpatialReference(2,
                                    "beatae",
                                    "quas",
                                    "culpa"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.8069)"
                        PersistenceEnabled="@(true)"
                        Region="@("dolores")"
                        Title="@("ex ipsum iusto")">
                        <TimeExtent 
                            Start="@(new DateTime(2001, 3, 21, 12, 58, 16))"
                            End="@(new DateTime(2023, 8, 22, 12, 6, 38))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(452.1443)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "occaecati",
                                    67.5118,
                                    1754484.4905),
                            new LOD(3,
                                    "quo",
                                    60.0838,
                                    14582214.8112)])"
                            Origin="@(new Point(-111.4998,
                                    -81.5920,
                                    35.5381,
                                    -56.7882,
                                    422.6842,
                                new SpatialReference(4,
                                        "non",
                                        "provident",
                                        "dolor"),
                                    true,
                                    true,
                                    438.3424))"
                            Size="@([4,
                                5,
                                4,
                                2])"
                            SpatialReference="@(new SpatialReference(4,
                                    "est",
                                    "quam",
                                    "aliquam"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Xor;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "non",
                    "et",
                    "dolor");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(106.9998,
                    161.8899,
                    38.6783,
                    64.4262,
                    61.5645,
                    944.5319,
                    613.9137,
                    824.9348,
                new SpatialReference(6,
                        "repudiandae",
                        "eius",
                        "consequatur"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(863.1333,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(8,
                        "vel",
                        46.1748,
                        30521200.5499),
                new LOD(1,
                        "beatae",
                        1.3346,
                        20127644.3205),
                new LOD(7,
                        "animi",
                        31.8893,
                        44242490.8954)],
                new Point(-88.0619,
                        40.7730,
                        -63.2665,
                        -71.7680,
                        106.5960,
                    new SpatialReference(7,
                            "vel",
                            "quia",
                            "ducimus"),
                        true,
                        true,
                        340.8397),
                    [2,
                        3,
                        4],
                new SpatialReference(3,
                        "sit",
                        "nesciunt",
                        "tempora"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 6, 8, 21, 39, 10),
                    new DateTime(2012, 9, 27, 14, 27, 18));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
