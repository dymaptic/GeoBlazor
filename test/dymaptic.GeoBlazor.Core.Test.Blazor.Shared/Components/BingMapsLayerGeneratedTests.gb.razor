@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("animi")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.DestinationIn)"
                        Effect="@(new Effect("aperiam",
                            7908869.8687))"
                        MaxScale="@(38803819.4185)"
                        MinScale="@(15151.8659)"
                        RefreshInterval="@(701.0179)"
                        SpatialReference="@(new SpatialReference(1,
                                "aspernatur",
                                "at",
                                "doloribus"))"
                        FullExtent="@(new Extent(-10.1781,
                                60.3223,
                                55.9139,
                                58.9871,
                                480.5742,
                                311.2843,
                                350.6672,
                                141.2104,
                            new SpatialReference(8,
                                    "odit",
                                    "quos",
                                    "qui"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.6288)"
                        PersistenceEnabled="@(true)"
                        Region="@("accusantium")"
                        Title="@("repellendus asperiores non")">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 5, 24, 2, 52, 45))"
                            End="@(new DateTime(2009, 1, 11, 2, 34, 54))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(972.9839)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "voluptatibus",
                                    92.6373,
                                    12094791.1529),
                            new LOD(2,
                                    "reprehenderit",
                                    32.9829,
                                    11548330.7278),
                            new LOD(9,
                                    "totam",
                                    34.2862,
                                    35387684.2484),
                            new LOD(8,
                                    "rerum",
                                    44.6107,
                                    17283823.2890)])"
                            Origin="@(new Point(107.2568,
                                    51.0636,
                                    -163.6604,
                                    -9.5434,
                                    811.3361,
                                new SpatialReference(7,
                                        "quasi",
                                        "expedita",
                                        "consequatur"),
                                    true,
                                    true,
                                    383.0803))"
                            Size="@([6,
                                6,
                                9,
                                3])"
                            SpatialReference="@(new SpatialReference(9,
                                    "est",
                                    "sed",
                                    "esse"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Hue;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "dolor",
                    "ipsum",
                    "voluptatibus");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-179.5764,
                    16.2080,
                    -86.5180,
                    49.2273,
                    981.9785,
                    782.1907,
                    340.5355,
                    614.9685,
                new SpatialReference(6,
                        "molestiae",
                        "omnis",
                        "laudantium"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(598.2116,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(4,
                        "sed",
                        21.5373,
                        26543645.5433)],
                new Point(-138.3503,
                        12.9081,
                        137.3301,
                        53.4921,
                        915.4259,
                    new SpatialReference(7,
                            "libero",
                            "ea",
                            "exercitationem"),
                        true,
                        true,
                        685.3758),
                    [6,
                        9],
                new SpatialReference(8,
                        "inventore",
                        "similique",
                        "facilis"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 1, 3, 16, 20, 36),
                    new DateTime(2011, 10, 12, 1, 6, 58));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
