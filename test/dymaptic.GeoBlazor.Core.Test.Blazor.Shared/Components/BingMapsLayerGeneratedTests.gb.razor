@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("dicta")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Effect="@(new Effect("itaque",
                            44532074.7884))"
                        MaxScale="@(40380383.0142)"
                        MinScale="@(45880.4908)"
                        RefreshInterval="@(581.7310)"
                        SpatialReference="@(new SpatialReference(7,
                                "inventore",
                                "reiciendis",
                                "nostrum"))"
                        FullExtent="@(new Extent(-173.7468,
                                -161.3168,
                                67.5134,
                                23.1118,
                                798.9253,
                                47.3711,
                                384.8432,
                                779.0326,
                            new SpatialReference(9,
                                    "corrupti",
                                    "deserunt",
                                    "voluptate"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.0239)"
                        PersistenceEnabled="@(true)"
                        Region="@("officiis")"
                        Title="@("ipsam quaerat ut")">
                        <TimeExtent 
                            Start="@(new DateTime(2022, 5, 5, 21, 15, 46))"
                            End="@(new DateTime(2010, 10, 10, 20, 43, 26))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(883.0135)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "eos",
                                    8.9352,
                                    621090.9709),
                            new LOD(9,
                                    "vel",
                                    77.4581,
                                    32815411.2276)])"
                            Origin="@(new Point(-172.9057,
                                    4.3367,
                                    -52.4982,
                                    58.2465,
                                    522.8148,
                                new SpatialReference(3,
                                        "ea",
                                        "iste",
                                        "in"),
                                    true,
                                    true,
                                    744.2622))"
                            Size="@([3,
                                4,
                                4])"
                            SpatialReference="@(new SpatialReference(1,
                                    "laboriosam",
                                    "voluptas",
                                    "molestias"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Lighter;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "tenetur",
                    "rerum",
                    "deleniti");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(109.6529,
                    -121.0205,
                    46.5289,
                    64.5489,
                    695.8301,
                    329.9482,
                    23.8403,
                    787.3630,
                new SpatialReference(5,
                        "qui",
                        "occaecati",
                        "vel"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(192.4923,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(4,
                        "sed",
                        50.5548,
                        19249481.9939),
                new LOD(3,
                        "quis",
                        27.1828,
                        49599905.9919)],
                new Point(48.5876,
                        83.3593,
                        173.7074,
                        -23.6716,
                        685.4595,
                    new SpatialReference(5,
                            "quis",
                            "et",
                            "quisquam"),
                        true,
                        true,
                        27.5920),
                    [6,
                        6,
                        9],
                new SpatialReference(9,
                        "eveniet",
                        "itaque",
                        "repellendus"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 2, 18, 18, 6, 45),
                    new DateTime(2022, 2, 1, 19, 55, 38));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
