@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("est")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("aliquid",
                            12305895.4330))"
                        MaxScale="@(17999070.2508)"
                        MinScale="@(49201.7659)"
                        RefreshInterval="@(818.0629)"
                        SpatialReference="@(new SpatialReference(3,
                                "repudiandae",
                                "dolor",
                                "voluptates"))"
                        FullExtent="@(new Extent(-34.1627,
                                -172.0849,
                                -37.8806,
                                80.8263,
                                737.4048,
                                742.9967,
                                311.8904,
                                820.1673,
                            new SpatialReference(9,
                                    "mollitia",
                                    "sunt",
                                    "voluptas"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.2915)"
                        PersistenceEnabled="@(true)"
                        Region="@("minima")"
                        Title="@("velit non et")">
                        <TimeExtent 
                            Start="@(new DateTime(2002, 11, 9, 4, 11, 8))"
                            End="@(new DateTime(2023, 1, 22, 8, 52, 54))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(624.6814)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "ratione",
                                    24.9758,
                                    6684390.4066),
                            new LOD(4,
                                    "nam",
                                    5.5100,
                                    11461889.2112),
                            new LOD(8,
                                    "sed",
                                    25.5749,
                                    49408757.0947)])"
                            Origin="@(new Point(-71.5499,
                                    53.1567,
                                    -47.6694,
                                    -7.8686,
                                    523.6995,
                                new SpatialReference(7,
                                        "vel",
                                        "sint",
                                        "dolor"),
                                    true,
                                    true,
                                    434.8651))"
                            Size="@([4,
                                8])"
                            SpatialReference="@(new SpatialReference(8,
                                    "voluptatem",
                                    "tenetur",
                                    "ratione"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Multiply;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "non",
                    "et",
                    "molestiae");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-149.5037,
                    27.9022,
                    -23.4154,
                    81.8484,
                    562.8913,
                    912.2098,
                    898.5057,
                    150.4700,
                new SpatialReference(2,
                        "nostrum",
                        "assumenda",
                        "officiis"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(154.9626,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(4,
                        "vel",
                        39.1787,
                        13460544.9331)],
                new Point(82.2550,
                        -56.6105,
                        -174.6276,
                        41.9284,
                        769.0324,
                    new SpatialReference(2,
                            "quas",
                            "consectetur",
                            "molestiae"),
                        true,
                        true,
                        615.0144),
                    [5,
                        5],
                new SpatialReference(8,
                        "unde",
                        "tempore",
                        "nam"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 4, 2, 19, 27, 53),
                    new DateTime(2020, 2, 7, 18, 10, 21));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
