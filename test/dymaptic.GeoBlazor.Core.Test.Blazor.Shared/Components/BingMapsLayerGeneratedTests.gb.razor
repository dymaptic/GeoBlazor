@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("aut")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.SourceOut)"
                        Effect="@(new Effect("mollitia",
                            660997.0029))"
                        MaxScale="@(36947638.0742)"
                        MinScale="@(22059.4495)"
                        RefreshInterval="@(310.7235)"
                        SpatialReference="@(new SpatialReference(1,
                                "perferendis",
                                "autem",
                                "rerum"))"
                        FullExtent="@(new Extent(-123.8940,
                                54.5580,
                                28.4816,
                                61.8910,
                                359.0837,
                                381.1477,
                                500.4998,
                                612.6622,
                            new SpatialReference(2,
                                    "voluptatum",
                                    "maiores",
                                    "sunt"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.3909)"
                        PersistenceEnabled="@(true)"
                        Region="@("fugit")"
                        Title="@("illo distinctio eos")">
                        <TimeExtent 
                            Start="@(new DateTime(2006, 9, 2, 7, 45, 39))"
                            End="@(new DateTime(2007, 9, 10, 9, 48, 40))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(573.4074)"
                            Format="@(TileInfoFormat.Emf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "omnis",
                                    31.8130,
                                    6876487.7118),
                            new LOD(6,
                                    "enim",
                                    85.8387,
                                    706546.5076),
                            new LOD(3,
                                    "voluptas",
                                    11.7715,
                                    13237840.1455),
                            new LOD(5,
                                    "nisi",
                                    30.5162,
                                    42869256.0187)])"
                            Origin="@(new Point(-85.5165,
                                    -10.9287,
                                    -122.3020,
                                    87.4913,
                                    595.6580,
                                new SpatialReference(3,
                                        "quibusdam",
                                        "quia",
                                        "rerum"),
                                    true,
                                    true,
                                    92.0920))"
                            Size="@([2,
                                5])"
                            SpatialReference="@(new SpatialReference(2,
                                    "tempore",
                                    "quisquam",
                                    "provident"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        BlendMode testBlendMode = BlendMode.SourceOut;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "adipisci",
                    "odio",
                    "earum");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(20.6634,
                    -70.8230,
                    -11.2750,
                    52.4589,
                    44.8622,
                    155.5444,
                    313.6148,
                    932.9102,
                new SpatialReference(2,
                        "nihil",
                        "repellat",
                        "ut"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(912.1479,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(8,
                        "quia",
                        88.2013,
                        29496478.4014),
                new LOD(8,
                        "architecto",
                        33.5846,
                        16651217.6953)],
                new Point(51.6472,
                        47.5775,
                        47.3295,
                        51.1795,
                        818.8077,
                    new SpatialReference(7,
                            "velit",
                            "ut",
                            "eius"),
                        true,
                        true,
                        853.8328),
                    [5,
                        9],
                new SpatialReference(5,
                        "eveniet",
                        "quod",
                        "eos"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 9, 5, 13, 25, 28),
                    new DateTime(2001, 6, 19, 21, 51, 47));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
