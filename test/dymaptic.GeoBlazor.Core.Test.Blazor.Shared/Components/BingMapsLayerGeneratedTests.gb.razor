@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("sed")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.Lighter)"
                        Effect="@(new Effect("similique",
                            39882266.2583))"
                        MaxScale="@(15999504.2821)"
                        MinScale="@(28983.8833)"
                        RefreshInterval="@(904.8514)"
                        SpatialReference="@(new SpatialReference(9,
                                "laborum",
                                "soluta",
                                "sint"))"
                        FullExtent="@(new Extent(-112.1646,
                                -40.1019,
                                -51.7523,
                                -56.6424,
                                132.6698,
                                955.3387,
                                714.3640,
                                882.0376,
                            new SpatialReference(3,
                                    "non",
                                    "ipsam",
                                    "quibusdam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.5418)"
                        PersistenceEnabled="@(true)"
                        Region="@("dolores")"
                        Title="@("minima explicabo veniam")">
                        <TimeExtent 
                            Start="@(new DateTime(2008, 8, 24, 5, 40, 35))"
                            End="@(new DateTime(2004, 2, 17, 16, 53, 15))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(821.9205)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "labore",
                                    97.5541,
                                    38433390.6817),
                            new LOD(4,
                                    "neque",
                                    89.8297,
                                    35022605.1314)])"
                            Origin="@(new Point(65.4594,
                                    74.9160,
                                    158.3715,
                                    51.5003,
                                    27.0851,
                                new SpatialReference(8,
                                        "ut",
                                        "unde",
                                        "perferendis"),
                                    true,
                                    true,
                                    479.8218))"
                            Size="@([6,
                                6,
                                1,
                                8])"
                            SpatialReference="@(new SpatialReference(2,
                                    "rerum",
                                    "laudantium",
                                    "beatae"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Minus;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "et",
                    "harum",
                    "tenetur");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-80.1568,
                    -110.1700,
                    44.8390,
                    29.4498,
                    523.9084,
                    261.7260,
                    544.4367,
                    182.9829,
                new SpatialReference(1,
                        "ut",
                        "quis",
                        "qui"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(792.7374,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(6,
                        "nesciunt",
                        58.3447,
                        20812586.8822),
                new LOD(9,
                        "et",
                        60.7294,
                        44332237.6885),
                new LOD(8,
                        "minima",
                        62.3484,
                        44680100.3598)],
                new Point(135.3556,
                        38.0755,
                        -132.4208,
                        66.8738,
                        220.6578,
                    new SpatialReference(4,
                            "libero",
                            "consequatur",
                            "officia"),
                        true,
                        true,
                        244.3764),
                    [1,
                        9,
                        5,
                        7],
                new SpatialReference(7,
                        "consequatur",
                        "odit",
                        "ut"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 9, 11, 11, 19, 14),
                    new DateTime(2021, 6, 10, 6, 14, 44));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
