@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("sit")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("omnis",
                            15718858.4645))"
                        MaxScale="@(18359853.1802)"
                        MinScale="@(48412.0199)"
                        RefreshInterval="@(299.0198)"
                        SpatialReference="@(new SpatialReference(2,
                                "nobis",
                                "laboriosam",
                                "quae"))"
                        FullExtent="@(new Extent(-96.7756,
                                -125.0745,
                                -55.0680,
                                -51.6886,
                                448.8776,
                                211.2776,
                                7.8064,
                                252.0129,
                            new SpatialReference(6,
                                    "ut",
                                    "dolor",
                                    "atque"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.7938)"
                        PersistenceEnabled="@(true)"
                        Region="@("magni")"
                        Title="@("repellat ea tempore")">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 10, 24, 12, 39, 52))"
                            End="@(new DateTime(2017, 11, 13, 8, 37, 11))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(791.3472)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "et",
                                    28.8733,
                                    43456755.9121),
                            new LOD(8,
                                    "enim",
                                    28.1772,
                                    35354835.7798)])"
                            Origin="@(new Point(57.8423,
                                    -21.1861,
                                    -26.0218,
                                    64.8220,
                                    270.6817,
                                new SpatialReference(6,
                                        "ad",
                                        "natus",
                                        "quis"),
                                    true,
                                    true,
                                    432.5395))"
                            Size="@([3,
                                2,
                                7,
                                1])"
                            SpatialReference="@(new SpatialReference(1,
                                    "est",
                                    "dolores",
                                    "saepe"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.SourceAtop;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "laudantium",
                    "et",
                    "quis");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-56.6683,
                    -19.9469,
                    40.5319,
                    -67.8489,
                    147.9828,
                    856.4708,
                    576.4681,
                    753.3917,
                new SpatialReference(7,
                        "numquam",
                        "eveniet",
                        "doloremque"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(845.9638,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(3,
                        "voluptates",
                        65.8017,
                        36425405.1741),
                new LOD(7,
                        "et",
                        78.0019,
                        5705578.0834),
                new LOD(8,
                        "doloremque",
                        78.3862,
                        49327480.2135)],
                new Point(56.7918,
                        85.6842,
                        78.3380,
                        -14.4329,
                        264.1111,
                    new SpatialReference(2,
                            "et",
                            "facilis",
                            "debitis"),
                        true,
                        true,
                        704.9422),
                    [2,
                        3,
                        7,
                        4],
                new SpatialReference(4,
                        "autem",
                        "alias",
                        "iure"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 2, 13, 14, 57, 23),
                    new DateTime(2016, 10, 16, 22, 31, 1));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
