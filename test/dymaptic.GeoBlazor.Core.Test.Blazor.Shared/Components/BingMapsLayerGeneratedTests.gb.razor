@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("optio")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.Lighter)"
                        Effect="@(new Effect("rerum",
                            47321505.6739))"
                        MaxScale="@(7599782.2750)"
                        MinScale="@(5841.1597)"
                        RefreshInterval="@(744.9913)"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.5862)"
                        PersistenceEnabled="@(true)"
                        Region="@("nulla")"
                        Title="@("sunt qui voluptas")">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 4, 10, 10, 18, 27))"
                            End="@(new DateTime(2014, 6, 4, 18, 22, 0))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(93.1860)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "et",
                                    11.7105,
                                    33776658.2179),
                            new LOD(6,
                                    "ratione",
                                    19.3359,
                                    48318777.9518)])"
                            Origin="@(new Point(-14.7500,
                                    32.7845,
                                    106.2110,
                                    36.0371,
                                    328.6200,
                                new SpatialReference(4,
                                        "libero",
                                        "quasi",
                                        "vel"),
                                    true,
                                    true,
                                    334.4145))"
                            Size="@([6,
                                1])">
                            <SpatialReference 
                                Wkid="@(3)"
                                ImageCoordinateSystem="@("sed")"
                                Wkt="@("eum")"
                                Wkt2="@("voluptatum")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(3)"
                            ImageCoordinateSystem="@("aut")"
                            Wkt="@("consequuntur")"
                            Wkt2="@("placeat")">
                        </SpatialReference>
                        <Extent 
                            Xmax="@(-32.1570)"
                            Xmin="@(172.1774)"
                            Ymax="@(-65.7777)"
                            Ymin="@(-44.1424)"
                            Zmax="@(384.0037)"
                            Zmin="@(771.0295)"
                            Mmax="@(374.7210)"
                            Mmin="@(297.0812)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("perspiciatis")"
                                Wkt="@("deleniti")"
                                Wkt2="@("assumenda")">
                            </SpatialReference>
                        </Extent>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Saturation;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "doloribus",
                    "vel",
                    "omnis");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-27.9321,
                    18.0730,
                    -60.2187,
                    61.7310,
                    62.1503,
                    174.6866,
                    559.1124,
                    525.2953,
                new SpatialReference(6,
                        "velit",
                        "repellendus",
                        "odit"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(136.0362,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(1,
                        "facilis",
                        17.5918,
                        44589035.2434)],
                new Point(-66.5037,
                        -88.8809,
                        35.7689,
                        -18.7146,
                        759.5111,
                    new SpatialReference(4,
                            "debitis",
                            "earum",
                            "eaque"),
                        true,
                        true,
                        626.7355),
                    [5],
                new SpatialReference(6,
                        "mollitia",
                        "sit",
                        "qui"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 7, 27, 15, 55, 53),
                    new DateTime(2014, 8, 27, 0, 9, 51));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
