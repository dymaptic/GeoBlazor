@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("quos")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.Darken)"
                        Effect="@(new Effect("ratione",
                            28481336.1259))"
                        MaxScale="@(45523433.0461)"
                        MinScale="@(38201.4128)"
                        RefreshInterval="@(635.4856)"
                        SpatialReference="@(new SpatialReference(9,
                                "ducimus",
                                "et",
                                "modi"))"
                        FullExtent="@(new Extent(-108.0025,
                                131.3886,
                                86.4256,
                                -52.6650,
                                784.5580,
                                614.2387,
                                169.8686,
                                754.5689,
                            new SpatialReference(7,
                                    "neque",
                                    "corrupti",
                                    "non"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.6805)"
                        PersistenceEnabled="@(true)"
                        Region="@("voluptatem")"
                        Title="@("omnis sit quo")"
                        VisibilityTimeExtent="@(new TimeExtent(new DateTime(2021, 2, 12, 17, 23, 17),
                                new DateTime(2019, 2, 16, 21, 31, 17)))">
                        <TileInfo 
                            Dpi="@(943.4106)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "vel",
                                    17.9727,
                                    49740150.9352),
                            new LOD(4,
                                    "odio",
                                    66.6614,
                                    19139342.5248)])"
                            Origin="@(new Point(-85.0596,
                                    -80.0951,
                                    45.0352,
                                    53.5113,
                                    303.8615,
                                new SpatialReference(5,
                                        "et",
                                        "sit",
                                        "modi"),
                                    true,
                                    true,
                                    971.9662))"
                            Size="@([7,
                                9])"
                            SpatialReference="@(new SpatialReference(9,
                                    "veniam",
                                    "recusandae",
                                    "explicabo"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.DestinationOut;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "harum",
                    "et",
                    "sed");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(285.0784,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(1,
                        "quisquam",
                        73.1911,
                        40546363.9527)],
                new Point(-154.3848,
                        76.5796,
                        -113.7294,
                        34.1432,
                        955.7964,
                    new SpatialReference(1,
                            "expedita",
                            "minus",
                            "eius"),
                        true,
                        true,
                        555.3811),
                    [8,
                        6,
                        2,
                        7],
                new SpatialReference(1,
                        "et",
                        "ea",
                        "ut"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
    }
}
