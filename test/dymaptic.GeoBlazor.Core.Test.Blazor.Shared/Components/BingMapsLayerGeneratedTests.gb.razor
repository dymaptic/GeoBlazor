@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("modi")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("asperiores",
                            20624692.8553))"
                        MaxScale="@(8763786.5058)"
                        MinScale="@(38025.6195)"
                        RefreshInterval="@(301.6000)"
                        SpatialReference="@(new SpatialReference(2,
                                "tempore",
                                "nihil",
                                "vero"))"
                        FullExtent="@(new Extent(102.6567,
                                40.7528,
                                -33.0579,
                                62.7015,
                                692.6827,
                                95.9700,
                                776.2305,
                                721.8968,
                            new SpatialReference(7,
                                    "provident",
                                    "rerum",
                                    "itaque"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3694)"
                        PersistenceEnabled="@(true)"
                        Region="@("magnam")"
                        Title="@("iure accusantium qui")">
                        <TimeExtent 
                            Start="@(new DateTime(2015, 1, 5, 8, 46, 12))"
                            End="@(new DateTime(2017, 2, 14, 21, 15, 19))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(639.0037)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "eligendi",
                                    34.6451,
                                    49422718.9548)])"
                            Origin="@(new Point(105.7661,
                                    76.9495,
                                    90.9810,
                                    -12.0532,
                                    245.6713,
                                new SpatialReference(4,
                                        "dolorem",
                                        "aperiam",
                                        "possimus"),
                                    true,
                                    true,
                                    610.2546))"
                            Size="@([8,
                                1])"
                            SpatialReference="@(new SpatialReference(7,
                                    "hic",
                                    "recusandae",
                                    "voluptatem"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.DestinationOut;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "qui",
                    "aut",
                    "illo");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(82.3056,
                    -175.6728,
                    78.2342,
                    -69.9591,
                    217.0958,
                    481.9430,
                    540.8762,
                    617.2463,
                new SpatialReference(6,
                        "est",
                        "porro",
                        "nobis"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(525.1044,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(6,
                        "nobis",
                        75.5062,
                        11672412.6532),
                new LOD(6,
                        "nihil",
                        70.0785,
                        35855298.3658),
                new LOD(6,
                        "rem",
                        75.5001,
                        21283564.0981),
                new LOD(4,
                        "repellat",
                        25.5719,
                        47367318.4748)],
                new Point(169.9044,
                        -67.6591,
                        152.7974,
                        29.2095,
                        378.6993,
                    new SpatialReference(2,
                            "tempore",
                            "fugiat",
                            "culpa"),
                        true,
                        true,
                        241.6591),
                    [7,
                        6],
                new SpatialReference(2,
                        "esse",
                        "eius",
                        "enim"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2003, 3, 22, 3, 33, 57),
                    new DateTime(2017, 6, 1, 14, 26, 37));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
