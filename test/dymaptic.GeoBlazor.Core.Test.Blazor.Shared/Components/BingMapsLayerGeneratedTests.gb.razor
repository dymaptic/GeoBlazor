@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("magnam")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.Darken)"
                        Effect="@(new Effect("fugit",
                            5815058.7713))"
                        MaxScale="@(681457.2327)"
                        MinScale="@(15557.2110)"
                        RefreshInterval="@(781.4489)"
                        SpatialReference="@(new SpatialReference(2,
                                "incidunt",
                                "consequuntur",
                                "sed"))"
                        FullExtent="@(new Extent(-119.4307,
                                -164.4600,
                                68.3609,
                                -28.9802,
                                442.7933,
                                782.0858,
                                911.8714,
                                136.7531,
                            new SpatialReference(4,
                                    "rerum",
                                    "illum",
                                    "consequatur"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.1128)"
                        PersistenceEnabled="@(true)"
                        Region="@("numquam")"
                        Title="@("quaerat quia reiciendis")">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 8, 20, 19, 4, 24))"
                            End="@(new DateTime(2012, 3, 11, 17, 54, 44))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(529.3586)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "dicta",
                                    55.1885,
                                    1147915.5353),
                            new LOD(3,
                                    "possimus",
                                    1.7932,
                                    43526780.4726),
                            new LOD(8,
                                    "corporis",
                                    40.6611,
                                    13803438.8345),
                            new LOD(2,
                                    "ut",
                                    22.4003,
                                    22834235.8525)])"
                            Origin="@(new Point(162.0839,
                                    50.3121,
                                    142.8743,
                                    -71.2883,
                                    213.8021,
                                new SpatialReference(6,
                                        "modi",
                                        "omnis",
                                        "harum"),
                                    true,
                                    true,
                                    969.0680))"
                            Size="@([4,
                                2,
                                3,
                                4])"
                            SpatialReference="@(new SpatialReference(1,
                                    "totam",
                                    "eaque",
                                    "repudiandae"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Exclusion;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "sit",
                    "at",
                    "cum");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(63.1208,
                    -11.9492,
                    37.0479,
                    52.3596,
                    992.4826,
                    679.1876,
                    985.7632,
                    548.4662,
                new SpatialReference(6,
                        "ad",
                        "et",
                        "qui"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(722.3209,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(1,
                        "eligendi",
                        41.6326,
                        34662390.6849),
                new LOD(8,
                        "enim",
                        94.6635,
                        23745497.3894),
                new LOD(8,
                        "id",
                        12.7687,
                        49529615.2709)],
                new Point(-101.5703,
                        -37.8771,
                        -56.0427,
                        -24.8351,
                        467.5847,
                    new SpatialReference(1,
                            "distinctio",
                            "adipisci",
                            "amet"),
                        true,
                        true,
                        828.2349),
                    [8,
                        4],
                new SpatialReference(6,
                        "et",
                        "praesentium",
                        "tempore"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 4, 14, 19, 23, 0),
                    new DateTime(2006, 2, 18, 19, 38, 54));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
