@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("ut")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.Average)"
                        Effect="@(new Effect("quis",
                            3639103.6138))"
                        MaxScale="@(28203231.6655)"
                        MinScale="@(35431.2522)"
                        RefreshInterval="@(805.5202)"
                        SpatialReference="@(new SpatialReference(1,
                                "totam",
                                "tempora",
                                "rerum"))"
                        FullExtent="@(new Extent(-6.5209,
                                -89.5338,
                                -74.5085,
                                -87.4292,
                                727.6583,
                                122.5703,
                                340.8243,
                                378.8479,
                            new SpatialReference(2,
                                    "placeat",
                                    "non",
                                    "ut"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.8130)"
                        PersistenceEnabled="@(true)"
                        Region="@("corrupti")"
                        Title="@("autem qui harum")">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 6, 16, 18, 8, 25))"
                            End="@(new DateTime(2009, 1, 5, 1, 11, 6))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(943.7214)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "cumque",
                                    96.9518,
                                    38581490.4422),
                            new LOD(5,
                                    "vel",
                                    96.5816,
                                    14664065.4056)])"
                            Origin="@(new Point(170.5184,
                                    -74.3186,
                                    -31.4180,
                                    -67.6191,
                                    17.2895,
                                new SpatialReference(8,
                                        "fugit",
                                        "rerum",
                                        "ea"),
                                    true,
                                    true,
                                    531.1282))"
                            Size="@([3,
                                6,
                                1,
                                9])"
                            SpatialReference="@(new SpatialReference(8,
                                    "suscipit",
                                    "hic",
                                    "voluptatibus"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Lighter;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "rerum",
                    "perferendis",
                    "sunt");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(120.8979,
                    -96.1986,
                    -73.4545,
                    77.4497,
                    771.8902,
                    520.8398,
                    178.3696,
                    789.8377,
                new SpatialReference(3,
                        "sapiente",
                        "similique",
                        "esse"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(788.9045,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(1,
                        "deserunt",
                        100.7531,
                        3447399.5164),
                new LOD(6,
                        "voluptas",
                        88.3640,
                        38574417.3510),
                new LOD(7,
                        "suscipit",
                        30.1846,
                        49458052.1895),
                new LOD(8,
                        "autem",
                        84.4364,
                        14085522.7136)],
                new Point(-112.9927,
                        41.8521,
                        66.2177,
                        22.2982,
                        496.7667,
                    new SpatialReference(2,
                            "et",
                            "qui",
                            "voluptatibus"),
                        true,
                        true,
                        182.8783),
                    [9,
                        8],
                new SpatialReference(2,
                        "recusandae",
                        "aliquam",
                        "quasi"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 5, 3, 16, 43, 43),
                    new DateTime(2008, 4, 26, 10, 9, 37));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
