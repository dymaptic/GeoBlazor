@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("vel")"
                        Style="@(BingImageryStyle.Aerial)"
                        BlendMode="@(BlendMode.Overlay)"
                        Effect="@(new Effect("est",
                            6401071.8916))"
                        MaxScale="@(38476237.1448)"
                        MinScale="@(42027.4271)"
                        RefreshInterval="@(821.5407)"
                        SpatialReference="@(new SpatialReference(4,
                                "pariatur",
                                "reprehenderit",
                                "non"))"
                        FullExtent="@(new Extent(-69.1369,
                                -39.8440,
                                66.3266,
                                -54.3933,
                                83.1821,
                                765.6874,
                                152.7734,
                                537.4087,
                            new SpatialReference(9,
                                    "a",
                                    "consequatur",
                                    "voluptas"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.6770)"
                        PersistenceEnabled="@(true)"
                        Region="@("at")"
                        Title="@("facilis rerum voluptatum")">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 2, 27, 1, 39, 0))"
                            End="@(new DateTime(2021, 3, 3, 13, 26, 25))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(834.5834)"
                            Format="@(TileInfoFormat.Mixed)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "et",
                                    21.7457,
                                    4679920.3327),
                            new LOD(1,
                                    "tempora",
                                    64.4397,
                                    49017089.1665),
                            new LOD(8,
                                    "explicabo",
                                    47.1161,
                                    24096866.5776),
                            new LOD(2,
                                    "eum",
                                    16.9673,
                                    6605768.9866)])"
                            Origin="@(new Point(169.5343,
                                    48.0287,
                                    116.5259,
                                    -64.9529,
                                    451.2780,
                                new SpatialReference(3,
                                        "dolorum",
                                        "pariatur",
                                        "nihil"),
                                    true,
                                    true,
                                    100.1770))"
                            Size="@([4,
                                2,
                                1])"
                            SpatialReference="@(new SpatialReference(1,
                                    "vel",
                                    "rerum",
                                    "velit"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.Exclusion;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "illo",
                    "et",
                    "enim");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-26.2550,
                    -144.3378,
                    55.2831,
                    77.4924,
                    157.7586,
                    929.1809,
                    604.3492,
                    345.9219,
                new SpatialReference(8,
                        "veritatis",
                        "aut",
                        "quo"),
                    true,
                    true);
        await bingMapsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await bingMapsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await bingMapsLayer.SetListMode(testListMode);
        var listMode = await bingMapsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(657.5851,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(8,
                        "nemo",
                        43.9440,
                        15535322.6205),
                new LOD(9,
                        "recusandae",
                        56.6146,
                        8346008.3178)],
                new Point(-0.3291,
                        65.2636,
                        8.0260,
                        -24.4455,
                        350.6678,
                    new SpatialReference(1,
                            "debitis",
                            "facilis",
                            "eius"),
                        true,
                        true,
                        837.7209),
                    [6,
                        6,
                        2],
                new SpatialReference(2,
                        "id",
                        "debitis",
                        "odit"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 1, 22, 9, 28, 20),
                    new DateTime(2021, 4, 20, 0, 31, 11));
        await bingMapsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await bingMapsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
