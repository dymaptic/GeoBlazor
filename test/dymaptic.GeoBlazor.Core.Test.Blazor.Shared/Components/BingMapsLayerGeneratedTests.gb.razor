@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBingMapsLayer(Action renderHandler)
    {
        BingMapsLayer? bingMapsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BingMapsLayer 
                        Key="@("dolor")"
                        Style="@(BingImageryStyle.Road)"
                        BlendMode="@(BlendMode.ColorDodge)"
                        Effect="@(new Effect("nostrum",
                            22669886.4339))"
                        MaxScale="@(27845724.0142)"
                        MinScale="@(32024.5441)"
                        RefreshInterval="@(829.0997)"
                        SpatialReference="@(new SpatialReference(2,
                                "voluptatum",
                                "aut",
                                "consequatur"))"
                        FullExtent="@(new Extent(171.3382,
                                76.0025,
                                81.9085,
                                -71.0969,
                                918.2176,
                                807.8995,
                                287.8035,
                                729.2437,
                            new SpatialReference(3,
                                    "omnis",
                                    "suscipit",
                                    "provident"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.1348)"
                        PersistenceEnabled="@(true)"
                        Region="@("et")"
                        Title="@("aut aperiam repellendus")"
                        VisibilityTimeExtent="@(new TimeExtent(new DateTime(2011, 5, 25, 19, 19, 42),
                                new DateTime(2023, 8, 14, 2, 44, 29)))">
                        <TileInfo 
                            Dpi="@(804.6542)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "voluptatem",
                                    97.3072,
                                    46209780.4001),
                            new LOD(1,
                                    "quis",
                                    48.6510,
                                    33675172.8732)])"
                            Origin="@(new Point(-32.0794,
                                    -19.3104,
                                    -161.5971,
                                    79.7815,
                                    704.4848,
                                new SpatialReference(9,
                                        "adipisci",
                                        "distinctio",
                                        "nam"),
                                    true,
                                    true,
                                    380.7624))"
                            Size="@([2,
                                5,
                                5])"
                            SpatialReference="@(new SpatialReference(7,
                                    "aut",
                                    "eos",
                                    "sint"))">
                        </TileInfo>
                    </BingMapsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(bingMapsLayer!);
        await AssertJavaScript("assertLayerExists", args: "bing-maps");
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await bingMapsLayer.SetBlendMode(testBlendMode);
        var blendMode = await bingMapsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "voluptate",
                    "molestiae",
                    "totam");
        await bingMapsLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await bingMapsLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(740.5801,
                    TileInfoFormat.Png,
                    true,
                [new LOD(7,
                        "rem",
                        48.9844,
                        24837636.3251),
                new LOD(5,
                        "velit",
                        22.5606,
                        46045639.5722),
                new LOD(8,
                        "et",
                        5.6352,
                        12422665.5233)],
                new Point(26.3372,
                        33.8566,
                        -139.1310,
                        -89.2471,
                        964.5207,
                    new SpatialReference(1,
                            "aliquam",
                            "aliquid",
                            "aut"),
                        true,
                        true,
                        599.6793),
                    [4,
                        9,
                        9,
                        2],
                new SpatialReference(3,
                        "et",
                        "eaque",
                        "vero"));
        await bingMapsLayer.SetTileInfo(testTileInfo);
        var tileInfo = await bingMapsLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
    }
}
