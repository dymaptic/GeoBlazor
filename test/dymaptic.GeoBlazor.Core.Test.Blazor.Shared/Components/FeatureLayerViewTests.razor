@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {
    
    [TestMethod]
    public async Task TestCanQueryFeatures(Action renderHandler)
    {
        FeatureLayerView? layerView = null;
        void OnLayerViewCreate(LayerViewCreateEvent createEvent)
        {
            if (createEvent.Layer is FeatureLayer)
            {
                layerView = createEvent.LayerView as FeatureLayerView;   
            }
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler"
                      OnLayerViewCreate="OnLayerViewCreate">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographicBase" />
                    </Basemap>
                    <FeatureLayer OutFields="@(["*"])">
                        <PortalItem PortalItemId="234d2e3f6f554e0e84757662469c26d3" />
                    </FeatureLayer>
                </Map>
                <Extent Xmax="-13620669.8431"
                        Xmin="-13640432.281"
                        Ymax="4556710.618000001"
                        Ymin="4536523.6511999965">
                    <SpatialReference Wkid="102100" />
                </Extent>
            </MapView>);
        await WaitForMapToRender();
        Point point = new(x: -13627933.093831237, y: 4547153.388126561, spatialReference: new(102100));
        var query = new Query
        {
            Geometry = point,
            Distance = 0.5,
            Units = QueryUnits.Miles,
            SpatialRelationship = SpatialRelationship.Intersects,
            ReturnGeometry = true,
            ReturnQueryGeometry = true,
            OutFields = new HashSet<string> { "*" }
        };

        var tries = 200;
        while (layerView is null && tries > 0)
        {
            await Task.Delay(100);
            tries--;
        }
        FeatureSet? result = await layerView!.QueryFeatures(query);
        Assert.IsNotNull(result);
        Assert.IsTrue(result.Features!.Count > 0);
    }

  [TestMethod]
    public async Task FeatureLayerView_PropertyRoundtrips_And_Queries(Action renderHandler)
    {
        FeatureLayer? layer = null;
        FeatureLayerView? layerView = null;

        void OnLayerViewCreate(LayerViewCreateEvent e)
        {
            if (e.Layer is FeatureLayer && e.LayerView is FeatureLayerView flv)
            {
                layerView = flv;
            }
        }

        // In-memory layer for deterministic queries/highlights
        var graphics = new List<Graphic>
        {
            new Graphic(
                new Point(0, 0),
                attributes: new AttributesDictionary(new Dictionary<string, object?> { ["OBJECTID"] = 1 })
            ),
            new Graphic(
                new Point(1, 1),
                attributes: new AttributesDictionary(new Dictionary<string, object?> { ["OBJECTID"] = 2 })
            )
        };

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler" OnLayerViewCreate="OnLayerViewCreate">
                <Map>
                    <Basemap><BasemapStyle Name="BasemapStyleName.ArcgisTopographicBase" /></Basemap>
                    <FeatureLayer @ref="layer"
                                  Source="graphics"
                                  OutFields="@(["*"])"
                                  SpatialReference="SpatialReference.Wgs84"
                                  GeometryType="FeatureGeometryType.Point"
                                  ObjectIdField="OBJECTID" />
                </Map>
            </MapView>);

        await WaitForMapToRender();

        // Wait for the FeatureLayerView
        for (var i = 0; layerView is null && i < 100; i++) { await Task.Delay(50); }
        Assert.IsNotNull(layerView, "FeatureLayerView did not materialize");

        // ---------------------------
        // Roundtrips for properties that CAN be set from C#
        // ---------------------------

        // Visible (bool) — set, then Get, and assert on live JS object
        await layerView!.SetVisible(false);
        var visible = await layerView.GetVisible();
        Assert.AreEqual(false, visible);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "visible", false]);

        await layerView.SetVisible(true);
        visible = await layerView.GetVisible();
        Assert.AreEqual(true, visible);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "visible", true]);

        // HighlightOptions (object) — set & ensure roundtrip (object equality via C#)
        var hl = new HighlightOptions(color: new MapColor("cyan"), fillOpacity: 1.0, haloOpacity: 1.0);
        await layerView.SetHighlightOptions(hl);
        var gotHl = await layerView.GetHighlightOptions();
        Assert.IsNotNull(gotHl);

        // ---------------------------
        // Read-only indicators (do NOT set): just read and verify JS matches getter
        // ---------------------------

        var max = await layerView.GetMaximumNumberOfFeatures();
        Assert.IsTrue(max >= 0, "maximumNumberOfFeatures should be non-negative.");
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "maximumNumberOfFeatures", max]);

        var exceeded = await layerView.GetMaximumNumberOfFeaturesExceeded();
        // For two graphics, exceeded should normally be false, but assert against the JS value rather than forcing it.
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "maximumNumberOfFeaturesExceeded", exceeded]);

        // ---------------------------
        // Queries via the view
        // ---------------------------

        var q = await layerView.CreateQuery();
        q.ReturnGeometry = true;
        q.OutFields = ["*"];

        var cnt = await layerView.QueryFeatureCount(q);
        Assert.IsTrue(cnt >= 0);

        var ex = await layerView.QueryExtent(q);
        Assert.IsNotNull(ex);

        var ids = await layerView.QueryObjectIds(q);
        Assert.IsNotNull(ids);
        Assert.IsTrue(ids!.Length > 0, "Expected at least one OBJECTID from the view query.");

        // ---------------------------
        // Highlight handles
        // ---------------------------

        var handle1 = await layerView.Highlight(graphics[0]);
        Assert.IsNotNull(handle1);

        var handle2 = await layerView.Highlight(new ObjectId(1));
        Assert.IsNotNull(handle2);
    }

   [TestMethod]
    public async Task FeatureLayerView_Getters_Invoke_JS_SourceOfTruth(Action renderHandler)
    {
        FeatureLayer? layer = null;
        FeatureLayerView? layerView = null;

        void OnLayerViewCreate(LayerViewCreateEvent e)
        {
            if (e.Layer is FeatureLayer && e.LayerView is FeatureLayerView flv)
            {
                layerView = flv;
            }
        }

        // In-memory layer for deterministic behavior
        var graphics = new List<Graphic>
        {
            new Graphic(
                new Point(0, 0),
                attributes: new AttributesDictionary(new Dictionary<string, object?> { ["OBJECTID"] = 1 })
            ),
            new Graphic(
                new Point(1, 1),
                attributes: new AttributesDictionary(new Dictionary<string, object?> { ["OBJECTID"] = 2 })
            )
        };

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler" OnLayerViewCreate="OnLayerViewCreate">
                <Map>
                    <Basemap><BasemapStyle Name="BasemapStyleName.ArcgisTopographicBase" /></Basemap>
                    <FeatureLayer @ref="layer"
                                  Source="graphics"
                                  OutFields="@(["*"])"
                                  SpatialReference="SpatialReference.Wgs84"
                                  GeometryType="FeatureGeometryType.Point"
                                  ObjectIdField="OBJECTID" />
                </Map>
            </MapView>);

        await WaitForMapToRender();

        // Wait for the FeatureLayerView
        for (var i = 0; layerView is null && i < 100; i++) { await Task.Delay(50); }
        Assert.IsNotNull(layerView, "FeatureLayerView did not materialize");

        // ---------------------------
        // Show that getters reflect JS state
        // ---------------------------

        // 1) A settable prop: change it and confirm JS & getter agree (proves getter isn't stale)
        await layerView!.SetVisible(false);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "visible", false]);
        var visible = await layerView.GetVisible();
        Assert.AreEqual(false, visible);

        await layerView.SetVisible(true);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "visible", true]);
        visible = await layerView.GetVisible();
        Assert.AreEqual(true, visible);

        // 2) Read-only props: read them, then assert JS reports the same value
        var max = await layerView.GetMaximumNumberOfFeatures();
        Assert.IsTrue(max >= 0);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "maximumNumberOfFeatures", max]);

        var exceeded = await layerView.GetMaximumNumberOfFeaturesExceeded();
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [layerView.Id, "maximumNumberOfFeaturesExceeded", exceeded]);

        // 3) Complex object roundtrip: ensure we can set/get an object without touching component-only internals
        var hl = new HighlightOptions(color: new MapColor("cyan"), fillOpacity: 1.0, haloOpacity: 1.0);
        await layerView.SetHighlightOptions(hl);
        var gotHl = await layerView.GetHighlightOptions();
        Assert.IsNotNull(gotHl);

        // Optional: feature effect as an object (do not set IncludedEffect here)
        var fx = new FeatureEffect();
        await layerView.SetFeatureEffect(fx);
        var gotFx = await layerView.GetFeatureEffect();
        Assert.IsNotNull(gotFx);
    }
}