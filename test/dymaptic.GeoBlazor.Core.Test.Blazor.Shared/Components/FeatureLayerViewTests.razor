@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {
    
    [TestMethod]
    public async Task TestCanQueryFeatures(Action renderHandler)
    {
        FeatureLayerView? layerView = null;
        void OnLayerViewCreate(LayerViewCreateEvent createEvent)
        {
            if (createEvent.Layer is FeatureLayer)
            {
                layerView = createEvent.LayerView as FeatureLayerView;   
            }
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler"
                      OnLayerViewCreate="OnLayerViewCreate">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographicBase" />
                    </Basemap>
                    <FeatureLayer OutFields="@(["*"])">
                        <PortalItem PortalItemId="234d2e3f6f554e0e84757662469c26d3" />
                    </FeatureLayer>
                </Map>
                <Extent Xmax="-13620669.8431"
                        Xmin="-13640432.281"
                        Ymax="4556710.618000001"
                        Ymin="4536523.6511999965">
                    <SpatialReference Wkid="102100" />
                </Extent>
            </MapView>);
        await WaitForMapToRender();
        Point point = new(x: -13627933.093831237, y: 4547153.388126561, spatialReference: new(102100));
        var query = new Query
        {
            Geometry = point,
            Distance = 0.5,
            Units = QueryUnits.Miles,
            SpatialRelationship = SpatialRelationship.Intersects,
            ReturnGeometry = true,
            ReturnQueryGeometry = true,
            OutFields = new HashSet<string> { "*" }
        };

        var tries = 200;
        while (layerView is null && tries > 0)
        {
            await Task.Delay(100);
            tries--;
        }
        FeatureSet? result = await layerView!.QueryFeatures(query);
        Assert.IsNotNull(result);
        Assert.IsTrue(result.Features!.Count > 0);
    }

    [TestMethod]
    public async Task FeatureLayerView_PropertyRoundtrips_And_Queries(Action renderHandler)
    {
        static async Task<T> WaitUntil<T>(Func<Task<T>> getter, Func<T, bool> ok, int tries = 10, int delayMs = 50)
        {
            T val = default!;
            while (tries-- > 0)
            {
                val = await getter();
                if (ok(val)) break;
                await Task.Delay(delayMs);
            }
            return val!;
        }

        FeatureLayer? layer = null;
        FeatureLayerView? layerView = null;

        void OnLayerViewCreate(LayerViewCreateEvent e)
        {
            if (e.Layer is FeatureLayer && e.LayerView is FeatureLayerView flv)
            {
                layerView = flv;
            }
        }

        List<Graphic> graphics = [];
        graphics.Add(new Graphic(new Point(0, 0),
            attributes: new AttributesDictionary(new Dictionary<string, object?> { ["OBJECTID"] = 1 })));
        graphics.Add(new Graphic(new Point(1, 1),
            attributes: new AttributesDictionary(new Dictionary<string, object?> { ["OBJECTID"] = 2 })));

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler" OnLayerViewCreate="OnLayerViewCreate">
                <Map>
                    <Basemap><BasemapStyle Name="BasemapStyleName.ArcgisTopographicBase" /></Basemap>
                    <FeatureLayer @ref="layer"
                                  Source="graphics"
                                  OutFields="@(["*"])"
                                  SpatialReference="SpatialReference.Wgs84"
                                  GeometryType="FeatureGeometryType.Point"
                                  ObjectIdField="OBJECTID" />
                </Map>
            </MapView>);

        await WaitForMapToRender();

        var tries = 100;
        while (layerView is null && tries-- > 0) { await Task.Delay(50); }
        Assert.IsNotNull(layerView, "FeatureLayerView did not materialize");

        // --- Filter roundtrip (managed) ---
        var filter = new FeatureFilter(where: "OBJECTID > 0");
        await layerView!.SetFilter(filter);
        var gotFilter = await WaitUntil(
            () => layerView.GetFilter(),
            f => f is not null && string.Equals(f!.Where, "OBJECTID > 0", StringComparison.Ordinal));
        Assert.IsNotNull(gotFilter);
        Assert.AreEqual("OBJECTID > 0", gotFilter!.Where);

        // --- FeatureEffect roundtrip (managed) ---
        await layerView.SetFeatureEffect(new FeatureEffect());
        var gotFx = await WaitUntil(
            () => layerView.GetFeatureEffect(),
            fx => fx is not null);
        Assert.IsNotNull(gotFx);

        // --- HighlightOptions roundtrip (managed) ---
        var hl = new HighlightOptions(color: new MapColor("cyan"), fillOpacity: 1.0, haloOpacity: 1.0);
        await layerView.SetHighlightOptions(hl);
        await layerView.SetHighlightOptions(hl); // idempotency
        var gotHl = await WaitUntil(
            () => layerView.GetHighlightOptions(),
            h => h is not null);
        Assert.IsNotNull(gotHl);

        // --- MaximumNumberOfFeaturesExceeded roundtrip (managed) ---
        await layerView.SetMaximumNumberOfFeaturesExceeded(false);
        var exceeded = await WaitUntil(
            () => layerView.GetMaximumNumberOfFeaturesExceeded(),
            v => v == false);
        Assert.IsFalse(exceeded);

        // --- Queries via the view (managed) ---
        var q = await layerView.CreateQuery();
        q.ReturnGeometry = true;
        q.OutFields = ["*"];

        var cnt = await layerView.QueryFeatureCount(q);
        Assert.IsTrue(cnt >= 0);

        var ex = await layerView.QueryExtent(q);
        Assert.IsNotNull(ex);

        var ids = await layerView.QueryObjectIds(q);
        Assert.IsNotNull(ids);
        Assert.IsTrue(ids!.Length >= 0);

        var handle1 = await layerView.Highlight(graphics[0]);
        Assert.IsNotNull(handle1);

        var handle2 = await layerView.Highlight(new ObjectId(1));
        Assert.IsNotNull(handle2);
    }

    [TestMethod]
    public async Task FeatureLayerView_All_Getters_Invoke_JS(Action renderHandler)
    {
        FeatureLayer? layer = null;
        FeatureLayerView? layerView = null;

        void OnLayerViewCreate(LayerViewCreateEvent e)
        {
            if (e.Layer is FeatureLayer && e.LayerView is FeatureLayerView flv) layerView = flv;
        }

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler" OnLayerViewCreate="OnLayerViewCreate">
            <Map>
                <Basemap><BasemapStyle Name="BasemapStyleName.ArcgisTopographicBase" /></Basemap>
                <FeatureLayer @ref="layer"
                              Source="@([])"
                              OutFields="@(["*"])"
                              SpatialReference="SpatialReference.Wgs84"
                              GeometryType="FeatureGeometryType.Point"
                              ObjectIdField="OBJECTID" />
            </Map>
        </MapView>);

        await WaitForMapToRender();

        var tries = 100;
        while (layerView is null && tries-- > 0) { await Task.Delay(50); }
        Assert.IsNotNull(layerView);

        _ = await layerView!.GetAvailableFields();
        _ = await layerView!.GetDataUpdating();
        _ = await layerView!.GetFeatureEffect();
        _ = await layerView!.GetFilter();
        _ = await layerView!.GetHasAllFeatures();
        _ = await layerView!.GetHasAllFeaturesInView();
        _ = await layerView!.GetHasFullGeometries();
        _ = await layerView!.GetHighlightOptions();
        _ = await layerView!.GetMaximumNumberOfFeatures();
        _ = await layerView!.GetMaximumNumberOfFeaturesExceeded();
    }
}