@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Lighten)"
                        Effect="@(new Effect("veritatis",
                            28689449.5544))"
                        MaxScale="@(37893534.2921)"
                        MinScale="@(4053.9051)"
                        RefreshInterval="@(412.2448)"
                        SpatialReference="@(new SpatialReference(7,
                                "dolores",
                                "et",
                                "est"))"
                        FullExtent="@(new Extent(-111.5330,
                                82.3701,
                                2.4461,
                                -57.8643,
                                346.0831,
                                247.5847,
                                920.5439,
                                419.6245,
                            new SpatialReference(9,
                                    "nam",
                                    "aut",
                                    "ipsum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.8369)"
                        PersistenceEnabled="@(true)"
                        Title="@("quidem earum eos")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 10, 2, 0, 3, 12))"
                            End="@(new DateTime(2002, 10, 13, 17, 29, 6))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(127.4308)"
                            Format="@(TileInfoFormat.Mixed)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "magni",
                                    16.7954,
                                    46919266.8608),
                            new LOD(5,
                                    "eum",
                                    40.9734,
                                    33166989.6597)])"
                            Origin="@(new Point(-103.6791,
                                    -45.6244,
                                    71.7096,
                                    9.9273,
                                    640.9931,
                                new SpatialReference(3,
                                        "voluptatum",
                                        "et",
                                        "consequatur"),
                                    true,
                                    true,
                                    41.3653))"
                            Size="@([6,
                                4,
                                3,
                                7])"
                            SpatialReference="@(new SpatialReference(8,
                                    "amet",
                                    "iusto",
                                    "at"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("impedit");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(776.2710,
                117.1232,
                815.5968,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(593.3789,
                227.1575,
                667.5296);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Overlay;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "quia",
                    "cum",
                    "esse");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-37.7264,
                    -73.6233,
                    -3.3825,
                    -51.1341,
                    667.6186,
                    876.9488,
                    934.7509,
                    771.9942,
                new SpatialReference(2,
                        "magni",
                        "sit",
                        "ullam"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(926.8764,
                    TileInfoFormat.Jpg,
                    true,
                [new LOD(2,
                        "atque",
                        29.4579,
                        14519849.5772),
                new LOD(7,
                        "nemo",
                        2.2690,
                        18894585.1345),
                new LOD(7,
                        "enim",
                        54.6325,
                        24026293.0186)],
                new Point(-164.6932,
                        -86.7371,
                        -105.5252,
                        67.7802,
                        184.7371,
                    new SpatialReference(6,
                            "sunt",
                            "culpa",
                            "architecto"),
                        true,
                        true,
                        381.0177),
                    [1,
                        8,
                        6,
                        2],
                new SpatialReference(2,
                        "quia",
                        "debitis",
                        "perspiciatis"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2008, 5, 3, 15, 0, 4),
                    new DateTime(2003, 2, 22, 0, 56, 51));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
