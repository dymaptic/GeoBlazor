@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.DestinationOver)"
                        Effect="@(new Effect("debitis",
                            47139502.9481))"
                        MaxScale="@(17501630.6623)"
                        MinScale="@(38636.5574)"
                        RefreshInterval="@(343.3923)"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.0783)"
                        PersistenceEnabled="@(true)"
                        Title="@("quaerat quo voluptatibus")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 7, 27, 17, 19, 46))"
                            End="@(new DateTime(2013, 5, 5, 6, 19, 27))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(141.7271)"
                            Format="@(TileInfoFormat.Lerc)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "saepe",
                                    58.8390,
                                    34724412.0733)])"
                            Origin="@(new Point(42.8531,
                                    -76.8397,
                                    8.8149,
                                    -73.0375,
                                    595.8688,
                                new SpatialReference(3,
                                        "beatae",
                                        "vel",
                                        "officia"),
                                    true,
                                    true,
                                    934.8626))"
                            Size="@([1])">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("a")"
                                Wkt="@("soluta")"
                                Wkt2="@("maiores")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(8)"
                            ImageCoordinateSystem="@("in")"
                            Wkt="@("quisquam")"
                            Wkt2="@("temporibus")">
                        </SpatialReference>
                        <Extent 
                            Xmax="@(-142.0527)"
                            Xmin="@(144.7838)"
                            Ymax="@(-69.0121)"
                            Ymin="@(89.6853)"
                            Zmax="@(803.5119)"
                            Zmin="@(565.3356)"
                            Mmax="@(131.8592)"
                            Mmin="@(701.6123)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("vel")"
                                Wkt="@("cum")"
                                Wkt2="@("et")">
                            </SpatialReference>
                        </Extent>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("minima");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(29.6719,
                329.9475,
                683.9195,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(591.3064,
                284.6684,
                593.7930);
        Assert.IsNotNull(getTileUrlMethodResult);
        await baseTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "qui",
                    "natus",
                    "est");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(138.8562,
                    -1.9561,
                    -10.3392,
                    20.1200,
                    266.5974,
                    264.8552,
                    545.2755,
                    968.2081,
                new SpatialReference(8,
                        "excepturi",
                        "dolores",
                        "nihil"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(78.8003,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(6,
                        "ut",
                        55.7729,
                        39218122.7145)],
                new Point(-38.9982,
                        -21.8582,
                        40.6843,
                        -14.4231,
                        505.2165,
                    new SpatialReference(2,
                            "voluptas",
                            "dolorem",
                            "ipsam"),
                        true,
                        true,
                        232.6460),
                    [8],
                new SpatialReference(6,
                        "optio",
                        "provident",
                        "facilis"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 8, 12, 7, 16, 42),
                    new DateTime(2018, 11, 25, 1, 4, 4));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
