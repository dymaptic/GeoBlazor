@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Difference)"
                        Effect="@(new Effect("veniam",
                            10532186.0903))"
                        MaxScale="@(5344724.4466)"
                        MinScale="@(33400.7155)"
                        RefreshInterval="@(72.1836)"
                        SpatialReference="@(new SpatialReference(2,
                                "accusamus",
                                "illum",
                                "voluptate"))"
                        FullExtent="@(new Extent(-28.9912,
                                29.1466,
                                -19.5725,
                                51.9346,
                                265.7910,
                                677.8865,
                                681.6733,
                                471.9185,
                            new SpatialReference(2,
                                    "mollitia",
                                    "occaecati",
                                    "natus"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.2319)"
                        PersistenceEnabled="@(true)"
                        Title="@("vero sunt consectetur")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2021, 8, 17, 19, 49, 52))"
                            End="@(new DateTime(2020, 11, 8, 13, 26, 29))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(732.8613)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "esse",
                                    71.0378,
                                    28062128.8644)])"
                            Origin="@(new Point(75.1462,
                                    85.0615,
                                    -63.4854,
                                    3.8913,
                                    382.4105,
                                new SpatialReference(4,
                                        "enim",
                                        "aut",
                                        "rerum"),
                                    true,
                                    true,
                                    292.3862))"
                            Size="@([7,
                                2])"
                            SpatialReference="@(new SpatialReference(5,
                                    "est",
                                    "eligendi",
                                    "ullam"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("autem");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(893.2358,
                242.2981,
                286.6992,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(920.3543,
                72.7992,
                566.9663);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "et",
                    "earum",
                    "laboriosam");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(86.3975,
                    -25.5533,
                    87.7919,
                    -89.7057,
                    645.1018,
                    406.8556,
                    235.6621,
                    781.2729,
                new SpatialReference(5,
                        "iste",
                        "dignissimos",
                        "quam"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(537.7023,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(6,
                        "minus",
                        47.1642,
                        5689864.6612)],
                new Point(139.6020,
                        -69.1113,
                        -134.7475,
                        14.7098,
                        736.3935,
                    new SpatialReference(4,
                            "ab",
                            "placeat",
                            "cupiditate"),
                        true,
                        true,
                        386.4107),
                    [1,
                        5,
                        8],
                new SpatialReference(8,
                        "est",
                        "aliquam",
                        "iste"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 8, 17, 7, 21, 11),
                    new DateTime(2022, 11, 7, 1, 55, 10));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
