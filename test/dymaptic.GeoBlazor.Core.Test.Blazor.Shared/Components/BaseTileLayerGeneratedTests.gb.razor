@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Multiply)"
                        Effect="@(new Effect("dolor",
                            33450088.7589))"
                        MaxScale="@(8768371.8116)"
                        MinScale="@(9000.3938)"
                        RefreshInterval="@(541.3595)"
                        SpatialReference="@(new SpatialReference(2,
                                "eos",
                                "quam",
                                "sunt"))"
                        FullExtent="@(new Extent(-124.1939,
                                132.3781,
                                -87.9981,
                                22.1675,
                                715.3994,
                                192.0316,
                                478.0498,
                                894.6663,
                            new SpatialReference(9,
                                    "pariatur",
                                    "dolores",
                                    "dolorum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.2552)"
                        PersistenceEnabled="@(true)"
                        Title="@("dolor magni similique")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 1, 25, 1, 6, 38))"
                            End="@(new DateTime(2021, 5, 2, 14, 54, 1))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(155.5345)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "aliquid",
                                    88.3746,
                                    7835461.6900)])"
                            Origin="@(new Point(98.8120,
                                    -25.3853,
                                    -81.2221,
                                    32.4970,
                                    877.9937,
                                new SpatialReference(4,
                                        "non",
                                        "omnis",
                                        "esse"),
                                    true,
                                    true,
                                    768.9743))"
                            Size="@([7,
                                7,
                                4])"
                            SpatialReference="@(new SpatialReference(8,
                                    "doloremque",
                                    "quo",
                                    "aut"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("corrupti");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(255.8654,
                309.5516,
                938.2546,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(870.5884,
                894.5281,
                22.7906);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Invert;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "aliquid",
                    "facere",
                    "aut");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-139.6370,
                    -59.4206,
                    -83.8034,
                    64.3951,
                    714.9848,
                    846.7557,
                    334.4828,
                    248.8310,
                new SpatialReference(2,
                        "omnis",
                        "aliquam",
                        "quia"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(558.9233,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(4,
                        "voluptatum",
                        29.9995,
                        7439162.0896),
                new LOD(8,
                        "molestiae",
                        21.1833,
                        14841689.5271),
                new LOD(1,
                        "quia",
                        94.5875,
                        7094198.2833),
                new LOD(7,
                        "quis",
                        66.6990,
                        1816143.4775)],
                new Point(-18.6460,
                        28.8812,
                        -103.8568,
                        -24.7441,
                        829.2123,
                    new SpatialReference(9,
                            "magnam",
                            "occaecati",
                            "repellat"),
                        true,
                        true,
                        478.1239),
                    [1,
                        2],
                new SpatialReference(2,
                        "eveniet",
                        "quod",
                        "provident"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 2, 13, 0, 23, 16),
                    new DateTime(2010, 1, 20, 4, 47, 50));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
