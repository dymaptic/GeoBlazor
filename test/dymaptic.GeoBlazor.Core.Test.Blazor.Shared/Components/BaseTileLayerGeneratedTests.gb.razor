@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Saturation)"
                        Effect="@(new Effect("debitis",
                            48681348.9954))"
                        MaxScale="@(35082529.4904)"
                        MinScale="@(48989.7516)"
                        RefreshInterval="@(68.5684)"
                        SpatialReference="@(new SpatialReference(6,
                                "aut",
                                "veritatis",
                                "est"))"
                        FullExtent="@(new Extent(16.9670,
                                -52.5129,
                                67.0650,
                                -42.9796,
                                781.3804,
                                65.5463,
                                973.7797,
                                218.2606,
                            new SpatialReference(5,
                                    "omnis",
                                    "illo",
                                    "fugit"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.3394)"
                        PersistenceEnabled="@(true)"
                        Title="@("repudiandae quae aut")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 5, 3, 10, 38, 7))"
                            End="@(new DateTime(2004, 2, 21, 5, 45, 32))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(94.4911)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "rerum",
                                    86.3967,
                                    49135391.4092),
                            new LOD(5,
                                    "aspernatur",
                                    34.3741,
                                    12556939.6026)])"
                            Origin="@(new Point(-45.6897,
                                    70.0798,
                                    -36.4420,
                                    80.0778,
                                    89.7982,
                                new SpatialReference(2,
                                        "ut",
                                        "porro",
                                        "dolores"),
                                    true,
                                    true,
                                    722.0860))"
                            Size="@([7,
                                9])"
                            SpatialReference="@(new SpatialReference(4,
                                    "sunt",
                                    "est",
                                    "aliquid"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("omnis");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(311.1151,
                697.1639,
                501.8348,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(229.4613,
                199.4349,
                618.5495);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Darken;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "dolores",
                    "sit",
                    "fuga");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-25.5644,
                    68.1957,
                    40.6382,
                    26.8718,
                    565.5158,
                    655.5302,
                    740.2867,
                    649.5945,
                new SpatialReference(5,
                        "a",
                        "aut",
                        "est"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(51.3316,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(2,
                        "quisquam",
                        39.2524,
                        27330309.7958),
                new LOD(8,
                        "labore",
                        87.6880,
                        27453880.4783),
                new LOD(1,
                        "doloremque",
                        27.6682,
                        21408573.2029)],
                new Point(-91.0231,
                        -88.9207,
                        -156.5597,
                        -28.5911,
                        117.9323,
                    new SpatialReference(4,
                            "sequi",
                            "eos",
                            "saepe"),
                        true,
                        true,
                        16.5278),
                    [5,
                        6],
                new SpatialReference(8,
                        "reprehenderit",
                        "magni",
                        "repudiandae"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 9, 24, 7, 33, 10),
                    new DateTime(2008, 1, 21, 16, 3, 57));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
