@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("consequatur",
                            21354727.1159))"
                        MaxScale="@(16698394.5173)"
                        MinScale="@(49726.4431)"
                        RefreshInterval="@(266.1479)"
                        SpatialReference="@(new SpatialReference(1,
                                "voluptate",
                                "voluptas",
                                "in"))"
                        FullExtent="@(new Extent(-116.6009,
                                176.9180,
                                55.2511,
                                -52.6067,
                                971.9737,
                                789.1116,
                                159.5699,
                                174.5888,
                            new SpatialReference(6,
                                    "quia",
                                    "voluptatem",
                                    "earum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.8049)"
                        PersistenceEnabled="@(true)"
                        Title="@("eum libero commodi")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 1, 11, 4, 50, 19))"
                            End="@(new DateTime(2022, 5, 17, 14, 41, 50))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(94.5127)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "quos",
                                    4.2639,
                                    20924271.3728)])"
                            Origin="@(new Point(-143.2244,
                                    -59.7352,
                                    -172.7411,
                                    83.4593,
                                    479.0342,
                                new SpatialReference(9,
                                        "architecto",
                                        "dignissimos",
                                        "molestias"),
                                    true,
                                    true,
                                    261.1092))"
                            Size="@([3,
                                8])"
                            SpatialReference="@(new SpatialReference(6,
                                    "corrupti",
                                    "voluptatum",
                                    "veritatis"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("facere");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(984.0774,
                164.3652,
                615.4080,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(27.5104,
                259.5715,
                274.4518);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.SourceIn;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "aspernatur",
                    "labore",
                    "et");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-29.8400,
                    114.3129,
                    -88.5993,
                    6.1197,
                    393.4839,
                    781.5900,
                    644.1198,
                    38.7257,
                new SpatialReference(3,
                        "omnis",
                        "aut",
                        "eos"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(692.2965,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(8,
                        "repellendus",
                        37.0813,
                        23799315.3699)],
                new Point(-49.8272,
                        -57.8176,
                        24.0135,
                        28.8961,
                        776.0986,
                    new SpatialReference(1,
                            "accusamus",
                            "eius",
                            "qui"),
                        true,
                        true,
                        595.7619),
                    [3,
                        7,
                        7,
                        4],
                new SpatialReference(4,
                        "omnis",
                        "quibusdam",
                        "qui"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2014, 8, 6, 10, 35, 39),
                    new DateTime(2014, 6, 13, 21, 13, 9));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
