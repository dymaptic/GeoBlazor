@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SoftLight)"
                        Effect="@(new Effect("dolorem",
                            34996953.3041))"
                        MaxScale="@(2033777.6338)"
                        MinScale="@(36911.1930)"
                        RefreshInterval="@(691.6432)"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.9586)"
                        PersistenceEnabled="@(true)"
                        Title="@("esse nesciunt eligendi")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 2, 16, 13, 58, 52))"
                            End="@(new DateTime(2007, 1, 1, 12, 41, 53))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(931.7639)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "cupiditate",
                                    44.3814,
                                    36577320.5266),
                            new LOD(3,
                                    "qui",
                                    39.8613,
                                    29635527.1944)])"
                            Origin="@(new Point(101.7138,
                                    66.2018,
                                    134.4395,
                                    24.0135,
                                    333.8573,
                                new SpatialReference(8,
                                        "est",
                                        "dolores",
                                        "nihil"),
                                    true,
                                    true,
                                    239.4347))"
                            Size="@([1])">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("quod")"
                                Wkt="@("quis")"
                                Wkt2="@("unde")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(8)"
                            ImageCoordinateSystem="@("possimus")"
                            Wkt="@("ducimus")"
                            Wkt2="@("sint")">
                        </SpatialReference>
                        <Extent 
                            Xmax="@(102.2637)"
                            Xmin="@(94.2972)"
                            Ymax="@(44.7506)"
                            Ymin="@(-36.0292)"
                            Zmax="@(181.9553)"
                            Zmin="@(805.2842)"
                            Mmax="@(232.6122)"
                            Mmin="@(884.4594)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("consequatur")"
                                Wkt2="@("repellendus")">
                            </SpatialReference>
                        </Extent>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("quia");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(563.2253,
                816.8135,
                213.5329,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(768.7748,
                667.7674,
                362.5951);
        Assert.IsNotNull(getTileUrlMethodResult);
        await baseTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.Color;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "aut",
                    "est",
                    "sit");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-171.3754,
                    -93.4185,
                    -35.5622,
                    -11.4342,
                    84.8097,
                    511.0640,
                    19.4414,
                    60.8558,
                new SpatialReference(3,
                        "et",
                        "dolorem",
                        "et"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(869.9343,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(3,
                        "porro",
                        93.6018,
                        43544628.4286),
                new LOD(7,
                        "vel",
                        64.6482,
                        19503661.1162)],
                new Point(143.5930,
                        11.2400,
                        -107.8770,
                        69.5814,
                        513.6197,
                    new SpatialReference(7,
                            "et",
                            "laborum",
                            "reiciendis"),
                        true,
                        true,
                        306.2484),
                    [6],
                new SpatialReference(8,
                        "impedit",
                        "cumque",
                        "consequuntur"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 7, 25, 6, 21, 15),
                    new DateTime(2019, 11, 20, 16, 36, 14));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
