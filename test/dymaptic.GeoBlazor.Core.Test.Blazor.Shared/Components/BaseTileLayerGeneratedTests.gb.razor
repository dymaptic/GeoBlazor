@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("officia",
                            3131916.4149))"
                        MaxScale="@(29817284.9914)"
                        MinScale="@(41396.7689)"
                        RefreshInterval="@(268.1692)"
                        SpatialReference="@(new SpatialReference(9,
                                "animi",
                                "commodi",
                                "assumenda"))"
                        FullExtent="@(new Extent(89.5923,
                                69.5064,
                                -54.3265,
                                50.4246,
                                958.3660,
                                404.4100,
                                997.2038,
                                163.8191,
                            new SpatialReference(5,
                                    "distinctio",
                                    "aspernatur",
                                    "quaerat"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.4204)"
                        PersistenceEnabled="@(true)"
                        Title="@("debitis ea officiis")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 3, 8, 7, 9, 9))"
                            End="@(new DateTime(2002, 9, 15, 9, 12, 24))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(355.0399)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "quia",
                                    82.4029,
                                    33601561.9022),
                            new LOD(2,
                                    "ut",
                                    54.3094,
                                    2335965.0826),
                            new LOD(3,
                                    "culpa",
                                    74.2321,
                                    36452649.3864),
                            new LOD(2,
                                    "labore",
                                    84.5626,
                                    36424852.3405)])"
                            Origin="@(new Point(-156.3705,
                                    72.4449,
                                    3.9931,
                                    4.5885,
                                    457.6848,
                                new SpatialReference(2,
                                        "dolorum",
                                        "eius",
                                        "sit"),
                                    true,
                                    true,
                                    753.7488))"
                            Size="@([1,
                                6])"
                            SpatialReference="@(new SpatialReference(1,
                                    "exercitationem",
                                    "nemo",
                                    "et"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("rem");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(265.9230,
                544.5278,
                829.6118,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(164.9455,
                421.7603,
                555.3522);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Reflect;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "provident",
                    "voluptates",
                    "consequatur");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(143.6689,
                    35.3713,
                    75.1073,
                    -5.6012,
                    627.0077,
                    526.2454,
                    528.8887,
                    730.0039,
                new SpatialReference(5,
                        "eos",
                        "at",
                        "mollitia"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(943.0463,
                    TileInfoFormat.Png,
                    true,
                [new LOD(7,
                        "aut",
                        86.0784,
                        29924102.9660)],
                new Point(-177.7847,
                        57.6188,
                        -110.2624,
                        69.8354,
                        616.2418,
                    new SpatialReference(3,
                            "magnam",
                            "consequuntur",
                            "mollitia"),
                        true,
                        true,
                        104.1890),
                    [6,
                        4],
                new SpatialReference(7,
                        "et",
                        "porro",
                        "quae"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 7, 14, 21, 17, 51),
                    new DateTime(2003, 4, 7, 3, 37, 40));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
