@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SourceOut)"
                        Effect="@(new Effect("aut",
                            35111412.2171))"
                        MaxScale="@(25408439.7214)"
                        MinScale="@(25068.7021)"
                        RefreshInterval="@(554.5339)"
                        SpatialReference="@(new SpatialReference(5,
                                "et",
                                "sed",
                                "possimus"))"
                        FullExtent="@(new Extent(77.5655,
                                64.5956,
                                33.4180,
                                -32.8915,
                                850.8313,
                                279.9677,
                                599.9900,
                                464.7174,
                            new SpatialReference(5,
                                    "quia",
                                    "qui",
                                    "enim"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.2990)"
                        PersistenceEnabled="@(true)"
                        Title="@("officiis praesentium molestias")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2014, 6, 8, 7, 49, 55))"
                            End="@(new DateTime(2011, 11, 23, 22, 17, 28))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(334.9378)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "quia",
                                    25.2940,
                                    17621237.9202),
                            new LOD(3,
                                    "magnam",
                                    35.1188,
                                    22861981.5807)])"
                            Origin="@(new Point(137.4591,
                                    42.6151,
                                    1.2339,
                                    26.8923,
                                    217.2492,
                                new SpatialReference(5,
                                        "aut",
                                        "et",
                                        "consectetur"),
                                    true,
                                    true,
                                    350.7346))"
                            Size="@([2,
                                8,
                                8])"
                            SpatialReference="@(new SpatialReference(9,
                                    "nisi",
                                    "culpa",
                                    "iusto"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("eum");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(927.8364,
                727.3992,
                783.2373,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(642.9400,
                187.6445,
                657.3881);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "ab",
                    "velit",
                    "voluptatem");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(144.7606,
                    -92.9100,
                    32.5628,
                    -2.6097,
                    603.7374,
                    884.1441,
                    732.8557,
                    774.7820,
                new SpatialReference(8,
                        "neque",
                        "modi",
                        "velit"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(121.1416,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(1,
                        "nam",
                        71.3802,
                        5563224.1256),
                new LOD(6,
                        "libero",
                        53.5122,
                        46862627.6277),
                new LOD(7,
                        "porro",
                        74.9982,
                        48991595.7389),
                new LOD(4,
                        "quis",
                        85.8976,
                        11858166.6209)],
                new Point(37.1204,
                        -55.7672,
                        -89.2808,
                        -50.0963,
                        875.4294,
                    new SpatialReference(4,
                            "voluptas",
                            "ad",
                            "enim"),
                        true,
                        true,
                        641.0826),
                    [1,
                        9],
                new SpatialReference(8,
                        "sunt",
                        "debitis",
                        "architecto"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 6, 20, 22, 6, 31),
                    new DateTime(2022, 10, 21, 6, 46, 2));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
