@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Exclusion)"
                        Effect="@(new Effect("natus",
                            35516191.1268))"
                        MaxScale="@(26764973.8010)"
                        MinScale="@(29463.3118)"
                        RefreshInterval="@(607.7611)"
                        SpatialReference="@(new SpatialReference(4,
                                "excepturi",
                                "suscipit",
                                "impedit"))"
                        FullExtent="@(new Extent(151.2077,
                                -178.1116,
                                -36.6025,
                                -23.3227,
                                222.4633,
                                757.5670,
                                551.4290,
                                680.8333,
                            new SpatialReference(7,
                                    "officia",
                                    "id",
                                    "at"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3940)"
                        PersistenceEnabled="@(true)"
                        Title="@("ullam at id")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2002, 7, 17, 1, 49, 46))"
                            End="@(new DateTime(2013, 9, 22, 9, 38, 12))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(640.8792)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "quia",
                                    84.5570,
                                    630191.8709),
                            new LOD(8,
                                    "assumenda",
                                    27.5791,
                                    18296014.9885),
                            new LOD(8,
                                    "dolore",
                                    20.8792,
                                    4397271.6138),
                            new LOD(2,
                                    "debitis",
                                    81.5413,
                                    4567515.1415)])"
                            Origin="@(new Point(-142.2299,
                                    -73.0109,
                                    3.6187,
                                    -24.8811,
                                    493.1363,
                                new SpatialReference(7,
                                        "est",
                                        "modi",
                                        "repudiandae"),
                                    true,
                                    true,
                                    755.2635))"
                            Size="@([8,
                                1,
                                9])"
                            SpatialReference="@(new SpatialReference(4,
                                    "dicta",
                                    "sed",
                                    "sunt"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("quibusdam");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(308.5577,
                551.6378,
                821.9417,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(863.1068,
                521.6555,
                949.4615);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Xor;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "iure",
                    "officiis",
                    "ex");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-133.5872,
                    114.4712,
                    -49.3612,
                    33.5353,
                    691.6231,
                    93.3776,
                    592.6378,
                    624.8903,
                new SpatialReference(8,
                        "pariatur",
                        "reiciendis",
                        "dignissimos"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(885.4498,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(7,
                        "accusantium",
                        77.4608,
                        6691737.6232)],
                new Point(156.9755,
                        -21.6352,
                        -100.8721,
                        -84.2235,
                        348.1885,
                    new SpatialReference(7,
                            "dolores",
                            "hic",
                            "eum"),
                        true,
                        true,
                        249.4758),
                    [9,
                        7],
                new SpatialReference(8,
                        "excepturi",
                        "est",
                        "sed"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2014, 4, 18, 9, 58, 51),
                    new DateTime(2003, 2, 27, 0, 7, 32));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
