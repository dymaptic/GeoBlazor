@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Exclusion)"
                        Effect="@(new Effect("tempora",
                            39164231.3632))"
                        MaxScale="@(23683007.5045)"
                        MinScale="@(11440.2086)"
                        RefreshInterval="@(334.6512)"
                        SpatialReference="@(new SpatialReference(9,
                                "magnam",
                                "suscipit",
                                "libero"))"
                        FullExtent="@(new Extent(75.3107,
                                -11.3407,
                                84.2770,
                                13.6498,
                                872.6891,
                                884.3707,
                                356.0136,
                                608.5454,
                            new SpatialReference(3,
                                    "sed",
                                    "occaecati",
                                    "nam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.5278)"
                        PersistenceEnabled="@(true)"
                        Title="@("quo in voluptatem")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 4, 20, 11, 28, 33))"
                            End="@(new DateTime(2003, 8, 4, 4, 16, 51))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(704.4047)"
                            Format="@(TileInfoFormat.Mixed)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "ducimus",
                                    65.6779,
                                    18426696.2165)])"
                            Origin="@(new Point(-31.1250,
                                    67.8059,
                                    -112.2186,
                                    41.5247,
                                    142.4541,
                                new SpatialReference(7,
                                        "expedita",
                                        "libero",
                                        "non"),
                                    true,
                                    true,
                                    468.6188))"
                            Size="@([6,
                                3,
                                1])"
                            SpatialReference="@(new SpatialReference(9,
                                    "facilis",
                                    "optio",
                                    "ad"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("unde");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(814.6967,
                840.3073,
                880.4185,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(25.5725,
                973.7309,
                778.6604);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "qui",
                    "magnam",
                    "et");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-121.4641,
                    -88.9392,
                    -33.6778,
                    -42.0816,
                    725.0607,
                    38.4434,
                    204.7614,
                    110.4244,
                new SpatialReference(6,
                        "commodi",
                        "modi",
                        "vitae"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(256.4263,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(9,
                        "accusantium",
                        28.3841,
                        27056337.3186),
                new LOD(9,
                        "mollitia",
                        57.7368,
                        18383035.7960),
                new LOD(3,
                        "est",
                        56.6406,
                        37945719.0347),
                new LOD(9,
                        "nulla",
                        86.3624,
                        14645056.3893)],
                new Point(17.2403,
                        -65.3958,
                        -63.7143,
                        58.5269,
                        898.3291,
                    new SpatialReference(5,
                            "molestiae",
                            "et",
                            "aliquam"),
                        true,
                        true,
                        5.3522),
                    [4,
                        4,
                        3,
                        6],
                new SpatialReference(6,
                        "alias",
                        "quo",
                        "excepturi"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 1, 20, 22, 38, 14),
                    new DateTime(2004, 3, 1, 8, 39, 39));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
