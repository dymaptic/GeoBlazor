@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.DestinationOver)"
                        Effect="@(new Effect("tempora",
                            19004145.1216))"
                        MaxScale="@(23225212.7180)"
                        MinScale="@(19437.8012)"
                        RefreshInterval="@(588.6353)"
                        SpatialReference="@(new SpatialReference(6,
                                "temporibus",
                                "provident",
                                "veniam"))"
                        FullExtent="@(new Extent(-67.0901,
                                -123.7826,
                                -83.0380,
                                78.8779,
                                209.6614,
                                732.7538,
                                173.9494,
                                621.4066,
                            new SpatialReference(6,
                                    "libero",
                                    "nihil",
                                    "veniam"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3590)"
                        PersistenceEnabled="@(true)"
                        Title="@("fugiat eum quae")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2022, 2, 7, 15, 34, 47))"
                            End="@(new DateTime(2013, 3, 22, 17, 58, 2))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(958.4063)"
                            Format="@(TileInfoFormat.Tiff)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "minus",
                                    64.8346,
                                    22191903.8354)])"
                            Origin="@(new Point(127.0007,
                                    10.5940,
                                    174.2366,
                                    29.6463,
                                    919.9030,
                                new SpatialReference(7,
                                        "non",
                                        "eos",
                                        "officia"),
                                    true,
                                    true,
                                    768.7016))"
                            Size="@([5,
                                8])"
                            SpatialReference="@(new SpatialReference(2,
                                    "ipsa",
                                    "deserunt",
                                    "tempora"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("dolor");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(425.2392,
                314.6036,
                448.5370,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(819.8564,
                574.3327,
                78.7504);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "quod",
                    "temporibus",
                    "ut");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(144.2175,
                    33.7677,
                    14.2698,
                    -64.9008,
                    598.6446,
                    952.9569,
                    824.0080,
                    287.7884,
                new SpatialReference(3,
                        "facere",
                        "sunt",
                        "et"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(292.5880,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(9,
                        "at",
                        7.3117,
                        2808234.9907)],
                new Point(28.8602,
                        73.1928,
                        -14.6309,
                        66.5838,
                        811.3130,
                    new SpatialReference(3,
                            "amet",
                            "repudiandae",
                            "deserunt"),
                        true,
                        true,
                        554.1094),
                    [7,
                        8],
                new SpatialReference(3,
                        "incidunt",
                        "veniam",
                        "quos"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2001, 10, 5, 11, 49, 43),
                    new DateTime(2010, 3, 25, 17, 16, 50));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
