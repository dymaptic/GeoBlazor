@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SoftLight)"
                        Effect="@(new Effect("dolores",
                            33306238.9512))"
                        MaxScale="@(23369695.3178)"
                        MinScale="@(29309.9046)"
                        RefreshInterval="@(149.3363)"
                        SpatialReference="@(new SpatialReference(8,
                                "culpa",
                                "sit",
                                "rerum"))"
                        FullExtent="@(new Extent(-143.8912,
                                132.7570,
                                67.6744,
                                36.2548,
                                570.2357,
                                436.5674,
                                688.4853,
                                663.3848,
                            new SpatialReference(3,
                                    "est",
                                    "harum",
                                    "molestiae"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.0946)"
                        PersistenceEnabled="@(true)"
                        Title="@("labore consectetur magni")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 11, 2, 17, 21, 54))"
                            End="@(new DateTime(2001, 5, 9, 10, 33, 48))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(90.1637)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(9,
                                    "voluptatem",
                                    45.7881,
                                    25008703.6324),
                            new LOD(2,
                                    "nemo",
                                    15.0463,
                                    5450861.9056),
                            new LOD(5,
                                    "aut",
                                    22.7678,
                                    33513301.5245),
                            new LOD(6,
                                    "minus",
                                    22.9351,
                                    20573857.3273)])"
                            Origin="@(new Point(-137.1648,
                                    4.2018,
                                    162.3306,
                                    43.6692,
                                    148.6574,
                                new SpatialReference(6,
                                        "necessitatibus",
                                        "ducimus",
                                        "molestiae"),
                                    true,
                                    true,
                                    775.4522))"
                            Size="@([4,
                                3,
                                8,
                                6])"
                            SpatialReference="@(new SpatialReference(8,
                                    "eos",
                                    "soluta",
                                    "quis"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("omnis");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(641.1510,
                201.9681,
                837.4544,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(451.7771,
                436.3776,
                94.2428);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "ullam",
                    "porro",
                    "dolorum");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-72.9973,
                    33.5110,
                    54.7463,
                    -51.4679,
                    971.5003,
                    195.3685,
                    848.3971,
                    432.5384,
                new SpatialReference(2,
                        "esse",
                        "ut",
                        "aperiam"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(846.3599,
                    TileInfoFormat.Tiff,
                    true,
                [new LOD(4,
                        "et",
                        27.6396,
                        21948450.1173),
                new LOD(1,
                        "modi",
                        32.2030,
                        6567273.9553),
                new LOD(8,
                        "et",
                        83.0600,
                        9261172.0375),
                new LOD(3,
                        "expedita",
                        89.1487,
                        22120205.7897)],
                new Point(-169.7709,
                        33.9250,
                        -159.9020,
                        -40.6144,
                        889.1538,
                    new SpatialReference(5,
                            "hic",
                            "quia",
                            "consequatur"),
                        true,
                        true,
                        206.1369),
                    [6,
                        3],
                new SpatialReference(6,
                        "rerum",
                        "voluptates",
                        "sunt"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 5, 2, 6, 14, 14),
                    new DateTime(2016, 3, 3, 11, 1, 14));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
