@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SourceAtop)"
                        Effect="@(new Effect("harum",
                            18062190.9779))"
                        MaxScale="@(14734992.9249)"
                        MinScale="@(6056.0661)"
                        RefreshInterval="@(899.2783)"
                        SpatialReference="@(new SpatialReference(1,
                                "optio",
                                "qui",
                                "sunt"))"
                        FullExtent="@(new Extent(132.2998,
                                64.4637,
                                -8.5754,
                                71.1523,
                                259.0230,
                                660.5963,
                                591.0220,
                                75.6622,
                            new SpatialReference(5,
                                    "veritatis",
                                    "voluptas",
                                    "voluptatem"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.0582)"
                        PersistenceEnabled="@(true)"
                        Title="@("nihil voluptatem labore")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2015, 3, 19, 1, 6, 0))"
                            End="@(new DateTime(2022, 9, 1, 14, 39, 1))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(562.0004)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "assumenda",
                                    88.5662,
                                    28548112.9313)])"
                            Origin="@(new Point(10.4196,
                                    86.7144,
                                    144.7549,
                                    -69.2142,
                                    184.2389,
                                new SpatialReference(9,
                                        "omnis",
                                        "rerum",
                                        "sit"),
                                    true,
                                    true,
                                    38.3220))"
                            Size="@([4,
                                5,
                                5])"
                            SpatialReference="@(new SpatialReference(1,
                                    "neque",
                                    "dolorem",
                                    "labore"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("in");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(866.3082,
                503.8596,
                555.3465,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(16.8718,
                889.9615,
                928.5502);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "consectetur",
                    "dignissimos",
                    "quia");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(138.6425,
                    -177.5412,
                    -81.8580,
                    -5.3485,
                    605.4865,
                    262.7192,
                    732.3208,
                    162.1210,
                new SpatialReference(9,
                        "earum",
                        "sunt",
                        "saepe"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(208.2254,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(3,
                        "non",
                        75.1562,
                        34863494.0465),
                new LOD(1,
                        "quisquam",
                        23.1879,
                        26580656.8088)],
                new Point(85.9399,
                        23.5186,
                        -87.9007,
                        58.1128,
                        873.7160,
                    new SpatialReference(5,
                            "sapiente",
                            "et",
                            "at"),
                        true,
                        true,
                        3.1842),
                    [8,
                        6,
                        8],
                new SpatialReference(4,
                        "aliquam",
                        "et",
                        "deserunt"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 9, 11, 20, 37, 2),
                    new DateTime(2022, 10, 14, 17, 5, 58));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
