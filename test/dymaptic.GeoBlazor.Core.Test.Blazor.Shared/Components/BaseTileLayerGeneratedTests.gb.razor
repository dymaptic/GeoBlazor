@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Darken)"
                        Effect="@(new Effect("cum",
                            40101380.6821))"
                        MaxScale="@(21529552.4976)"
                        MinScale="@(24516.9625)"
                        RefreshInterval="@(523.7417)"
                        SpatialReference="@(new SpatialReference(4,
                                "quibusdam",
                                "optio",
                                "perferendis"))"
                        FullExtent="@(new Extent(-135.5856,
                                -22.3592,
                                -8.2554,
                                -41.5201,
                                689.2351,
                                828.1018,
                                871.8680,
                                488.7653,
                            new SpatialReference(9,
                                    "dolor",
                                    "eum",
                                    "excepturi"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.4656)"
                        PersistenceEnabled="@(true)"
                        Title="@("aut maiores vitae")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2001, 10, 5, 9, 46, 12))"
                            End="@(new DateTime(2021, 11, 4, 19, 14, 7))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(932.6372)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "dolorum",
                                    48.6234,
                                    14899107.0467),
                            new LOD(6,
                                    "voluptas",
                                    99.8488,
                                    17596379.6071)])"
                            Origin="@(new Point(88.2820,
                                    -85.8846,
                                    -97.4719,
                                    -43.2646,
                                    861.2397,
                                new SpatialReference(9,
                                        "eum",
                                        "placeat",
                                        "ea"),
                                    true,
                                    true,
                                    817.4314))"
                            Size="@([1,
                                2,
                                4])"
                            SpatialReference="@(new SpatialReference(1,
                                    "rerum",
                                    "quisquam",
                                    "adipisci"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("necessitatibus");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(310.8875,
                15.9838,
                500.7022,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(194.8777,
                508.0504,
                795.7682);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.HardLight;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "voluptas",
                    "veritatis",
                    "illum");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(106.3763,
                    2.8366,
                    -77.1919,
                    -21.1887,
                    806.0810,
                    529.7039,
                    753.0970,
                    86.9114,
                new SpatialReference(8,
                        "nihil",
                        "et",
                        "praesentium"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(901.3257,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(1,
                        "temporibus",
                        70.5995,
                        43448978.4955),
                new LOD(4,
                        "hic",
                        74.4799,
                        35879783.7979)],
                new Point(-108.1180,
                        -19.0708,
                        -178.2636,
                        82.3233,
                        85.7508,
                    new SpatialReference(5,
                            "atque",
                            "libero",
                            "dolorum"),
                        true,
                        true,
                        232.2632),
                    [7,
                        3],
                new SpatialReference(7,
                        "incidunt",
                        "quae",
                        "sit"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 7, 13, 3, 16, 51),
                    new DateTime(2009, 4, 26, 3, 42, 18));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
