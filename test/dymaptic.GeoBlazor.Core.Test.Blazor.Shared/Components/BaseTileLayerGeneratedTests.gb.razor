@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.HardLight)"
                        Effect="@(new Effect("magni",
                            47934948.3593))"
                        MaxScale="@(8198393.2962)"
                        MinScale="@(19088.2050)"
                        RefreshInterval="@(480.2986)"
                        SpatialReference="@(new SpatialReference(2,
                                "quis",
                                "nobis",
                                "impedit"))"
                        FullExtent="@(new Extent(-18.5015,
                                -105.2884,
                                69.4018,
                                -5.7580,
                                113.0099,
                                850.7873,
                                733.7447,
                                84.4296,
                            new SpatialReference(7,
                                    "suscipit",
                                    "odit",
                                    "soluta"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3864)"
                        PersistenceEnabled="@(true)"
                        Title="@("libero rerum ipsam")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2011, 11, 22, 2, 53, 28))"
                            End="@(new DateTime(2020, 4, 23, 4, 20, 34))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(633.5274)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "veritatis",
                                    13.5505,
                                    31788922.2210),
                            new LOD(9,
                                    "voluptates",
                                    32.5749,
                                    4026598.9303)])"
                            Origin="@(new Point(108.0535,
                                    17.0738,
                                    60.4472,
                                    11.8862,
                                    622.5812,
                                new SpatialReference(5,
                                        "ut",
                                        "ut",
                                        "alias"),
                                    true,
                                    true,
                                    362.1156))"
                            Size="@([7,
                                3,
                                5,
                                2])"
                            SpatialReference="@(new SpatialReference(8,
                                    "qui",
                                    "exercitationem",
                                    "temporibus"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("voluptatem");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(137.3423,
                462.3485,
                687.3363,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(176.3956,
                56.4959,
                537.1518);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Lighter;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "autem",
                    "error",
                    "sed");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-22.6916,
                    -146.5354,
                    82.5025,
                    -34.6724,
                    926.2378,
                    10.7449,
                    660.1786,
                    852.1974,
                new SpatialReference(9,
                        "vel",
                        "minima",
                        "ut"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(700.5878,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(8,
                        "est",
                        20.6100,
                        47121396.7250),
                new LOD(8,
                        "numquam",
                        50.8731,
                        37212004.5863)],
                new Point(-120.6205,
                        40.6576,
                        53.8267,
                        1.1192,
                        25.8617,
                    new SpatialReference(3,
                            "eos",
                            "eos",
                            "expedita"),
                        true,
                        true,
                        29.2753),
                    [4,
                        6],
                new SpatialReference(1,
                        "omnis",
                        "architecto",
                        "aliquam"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 6, 24, 4, 45, 8),
                    new DateTime(2000, 7, 11, 13, 4, 0));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
