@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Multiply)"
                        Effect="@(new Effect("quia",
                            1465378.4371))"
                        MaxScale="@(24370839.3496)"
                        MinScale="@(46554.3691)"
                        RefreshInterval="@(675.2926)"
                        SpatialReference="@(new SpatialReference(5,
                                "velit",
                                "beatae",
                                "recusandae"))"
                        FullExtent="@(new Extent(34.1622,
                                -66.7450,
                                18.9792,
                                -44.5571,
                                530.4769,
                                713.5070,
                                803.1318,
                                226.6803,
                            new SpatialReference(8,
                                    "sit",
                                    "natus",
                                    "eos"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.5139)"
                        PersistenceEnabled="@(true)"
                        Title="@("nihil nihil itaque")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2001, 1, 20, 0, 7, 21))"
                            End="@(new DateTime(2003, 5, 23, 19, 33, 36))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(937.2797)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "officia",
                                    30.2721,
                                    34476029.0231),
                            new LOD(2,
                                    "consequatur",
                                    27.0792,
                                    49851772.8144),
                            new LOD(7,
                                    "rerum",
                                    32.7037,
                                    44716108.4004)])"
                            Origin="@(new Point(-172.2060,
                                    0.4938,
                                    56.7002,
                                    -30.6497,
                                    877.9506,
                                new SpatialReference(4,
                                        "dolorum",
                                        "pariatur",
                                        "et"),
                                    true,
                                    true,
                                    155.6375))"
                            Size="@([3,
                                3,
                                6,
                                2])"
                            SpatialReference="@(new SpatialReference(7,
                                    "omnis",
                                    "tempore",
                                    "vero"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("a");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(500.0031,
                975.2794,
                61.0557,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(859.8808,
                204.6015,
                518.4235);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "mollitia",
                    "illo",
                    "repellat");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(178.5248,
                    -145.3625,
                    69.6224,
                    -81.8917,
                    936.0195,
                    70.8310,
                    118.5836,
                    884.3745,
                new SpatialReference(2,
                        "suscipit",
                        "dolorum",
                        "voluptatem"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(235.4061,
                    TileInfoFormat.Jpg,
                    true,
                [new LOD(1,
                        "possimus",
                        96.0290,
                        22595789.7428),
                new LOD(3,
                        "optio",
                        71.4601,
                        23923617.8931)],
                new Point(48.2910,
                        87.4271,
                        54.5773,
                        -8.7834,
                        982.1221,
                    new SpatialReference(2,
                            "minima",
                            "nemo",
                            "alias"),
                        true,
                        true,
                        588.6566),
                    [7,
                        5,
                        1,
                        2],
                new SpatialReference(1,
                        "sint",
                        "velit",
                        "laudantium"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 7, 15, 13, 18, 30),
                    new DateTime(2022, 5, 27, 18, 24, 5));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
