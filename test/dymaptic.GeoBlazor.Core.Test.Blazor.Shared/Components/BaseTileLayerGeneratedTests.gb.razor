@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("quis",
                            43325647.3503))"
                        MaxScale="@(17806158.4496)"
                        MinScale="@(25761.0761)"
                        RefreshInterval="@(238.2157)"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.4641)"
                        PersistenceEnabled="@(true)"
                        Title="@("omnis et aperiam")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 4, 15, 2, 13, 38))"
                            End="@(new DateTime(2009, 3, 16, 13, 29, 17))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(448.3390)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "recusandae",
                                    19.9508,
                                    37463338.6288)])"
                            Origin="@(new Point(-66.5802,
                                    -77.2663,
                                    -119.1825,
                                    37.8464,
                                    504.5043,
                                new SpatialReference(2,
                                        "minima",
                                        "et",
                                        "numquam"),
                                    true,
                                    true,
                                    118.9002))"
                            Size="@([4,
                                2])">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("sit")"
                                Wkt="@("ab")"
                                Wkt2="@("odio")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(6)"
                            ImageCoordinateSystem="@("ut")"
                            Wkt="@("nobis")"
                            Wkt2="@("perspiciatis")">
                        </SpatialReference>
                        <Extent 
                            Xmax="@(130.5540)"
                            Xmin="@(36.0964)"
                            Ymax="@(64.3144)"
                            Ymin="@(-19.1403)"
                            Zmax="@(31.1892)"
                            Zmin="@(11.4612)"
                            Mmax="@(395.5909)"
                            Mmin="@(571.3841)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("tenetur")"
                                Wkt2="@("debitis")">
                            </SpatialReference>
                        </Extent>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("sunt");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(518.0364,
                837.8889,
                225.7197,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(409.9648,
                45.4086,
                864.0463);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Invert;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "debitis",
                    "nisi",
                    "quia");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(36.2337,
                    71.0813,
                    -62.6963,
                    -84.6077,
                    491.4756,
                    547.4246,
                    888.7189,
                    100.9591,
                new SpatialReference(7,
                        "dolorem",
                        "sed",
                        "velit"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(331.3938,
                    TileInfoFormat.Ps,
                    true,
                [new LOD(2,
                        "consequatur",
                        6.2508,
                        33863149.0882),
                new LOD(3,
                        "non",
                        5.3184,
                        35214655.5133)],
                new Point(80.3733,
                        36.6351,
                        106.1245,
                        36.3475,
                        997.9150,
                    new SpatialReference(2,
                            "vel",
                            "sit",
                            "illum"),
                        true,
                        true,
                        700.5757),
                    [3,
                        8],
                new SpatialReference(7,
                        "non",
                        "eius",
                        "deserunt"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 7, 5, 19, 18, 24),
                    new DateTime(2013, 11, 5, 1, 22, 2));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
