@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Color)"
                        Effect="@(new Effect("fugiat",
                            17977953.1695))"
                        MaxScale="@(4955032.7831)"
                        MinScale="@(32437.2062)"
                        RefreshInterval="@(828.9150)"
                        SpatialReference="@(new SpatialReference(7,
                                "facilis",
                                "et",
                                "eaque"))"
                        FullExtent="@(new Extent(159.8204,
                                -108.3924,
                                2.3545,
                                30.1765,
                                50.0223,
                                957.8554,
                                75.0565,
                                586.6177,
                            new SpatialReference(4,
                                    "ipsa",
                                    "maxime",
                                    "occaecati"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3673)"
                        PersistenceEnabled="@(true)"
                        Title="@("et odit ut")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 10, 8, 20, 10, 40))"
                            End="@(new DateTime(2017, 2, 26, 0, 49, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(466.3431)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "autem",
                                    89.0535,
                                    33524195.9670),
                            new LOD(2,
                                    "ut",
                                    2.7635,
                                    28582510.0441),
                            new LOD(3,
                                    "est",
                                    46.6444,
                                    40684667.9520),
                            new LOD(2,
                                    "quis",
                                    87.7984,
                                    8473899.9333)])"
                            Origin="@(new Point(171.8438,
                                    81.9388,
                                    -44.3801,
                                    27.2032,
                                    562.4319,
                                new SpatialReference(8,
                                        "quidem",
                                        "voluptatem",
                                        "dolore"),
                                    true,
                                    true,
                                    821.4358))"
                            Size="@([9,
                                4,
                                7])"
                            SpatialReference="@(new SpatialReference(6,
                                    "deserunt",
                                    "nihil",
                                    "nesciunt"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("et");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(551.0292,
                267.1328,
                697.3376,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(863.1167,
                875.9760,
                458.2501);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Darken;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "est",
                    "similique",
                    "non");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(119.7628,
                    125.9055,
                    -27.9670,
                    59.6049,
                    914.7941,
                    576.3870,
                    519.9429,
                    260.7726,
                new SpatialReference(5,
                        "dolore",
                        "sequi",
                        "sapiente"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(77.3866,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(1,
                        "labore",
                        5.0018,
                        3823787.2193)],
                new Point(-92.1330,
                        -2.6730,
                        5.3357,
                        63.8349,
                        647.9534,
                    new SpatialReference(6,
                            "quasi",
                            "cupiditate",
                            "totam"),
                        true,
                        true,
                        529.1621),
                    [7,
                        4,
                        7],
                new SpatialReference(1,
                        "at",
                        "impedit",
                        "hic"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 10, 3, 18, 51, 29),
                    new DateTime(2013, 10, 6, 13, 31, 50));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
