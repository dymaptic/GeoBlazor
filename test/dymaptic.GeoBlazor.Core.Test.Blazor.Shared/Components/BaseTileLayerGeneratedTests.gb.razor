@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("earum",
                            44403471.1266))"
                        MaxScale="@(16452674.1034)"
                        MinScale="@(15370.3095)"
                        RefreshInterval="@(295.7396)"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.8520)"
                        PersistenceEnabled="@(true)"
                        Title="@("sed dolorum dicta")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2017, 1, 11, 15, 16, 12))"
                            End="@(new DateTime(2005, 4, 21, 3, 3, 21))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(535.9461)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "est",
                                    41.7139,
                                    49713628.6632),
                            new LOD(2,
                                    "in",
                                    91.2834,
                                    34325171.3851)])"
                            Origin="@(new Point(152.2120,
                                    61.9422,
                                    141.5827,
                                    15.6142,
                                    957.8096,
                                new SpatialReference(3,
                                        "nisi",
                                        "non",
                                        "aut"),
                                    true,
                                    true,
                                    359.5167))"
                            Size="@([2,
                                3])">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("numquam")"
                                Wkt="@("quia")"
                                Wkt2="@("et")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(5)"
                            ImageCoordinateSystem="@("optio")"
                            Wkt="@("facere")"
                            Wkt2="@("quas")">
                        </SpatialReference>
                        <Extent 
                            Xmax="@(26.9768)"
                            Xmin="@(-156.0948)"
                            Ymax="@(-5.1505)"
                            Ymin="@(35.4815)"
                            Zmax="@(143.5381)"
                            Zmin="@(646.5928)"
                            Mmax="@(335.7880)"
                            Mmin="@(331.7984)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(3)"
                                ImageCoordinateSystem="@("dolorum")"
                                Wkt="@("tempora")"
                                Wkt2="@("assumenda")">
                            </SpatialReference>
                        </Extent>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("cumque");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(346.1411,
                885.4329,
                413.9996,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(404.6653,
                522.9081,
                310.9851);
        Assert.IsNotNull(getTileUrlMethodResult);
        await baseTileLayer.Refresh();
        BlendMode testBlendMode = BlendMode.Hue;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "quibusdam",
                    "totam",
                    "ratione");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(171.1194,
                    129.2250,
                    -32.8147,
                    -83.3940,
                    714.0382,
                    9.8466,
                    777.0384,
                    2.6971,
                new SpatialReference(1,
                        "voluptate",
                        "eum",
                        "repellendus"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(945.3917,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(4,
                        "quo",
                        60.1625,
                        42260700.3690)],
                new Point(-132.8015,
                        -53.6193,
                        -170.3364,
                        -22.9529,
                        966.3534,
                    new SpatialReference(2,
                            "minima",
                            "error",
                            "et"),
                        true,
                        true,
                        351.2542),
                    [6,
                        8],
                new SpatialReference(1,
                        "corrupti",
                        "aut",
                        "rerum"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 1, 21, 6, 13, 8),
                    new DateTime(2014, 2, 14, 20, 39, 27));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
