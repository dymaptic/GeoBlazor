@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("rem",
                            39068776.4881))"
                        MaxScale="@(17058795.4853)"
                        MinScale="@(33029.6877)"
                        RefreshInterval="@(497.9842)"
                        SpatialReference="@(new SpatialReference(1,
                                "quis",
                                "maiores",
                                "cumque"))"
                        FullExtent="@(new Extent(-12.1584,
                                -86.3598,
                                51.3422,
                                55.0126,
                                649.5325,
                                790.0986,
                                17.2440,
                                603.5829,
                            new SpatialReference(1,
                                    "minus",
                                    "sapiente",
                                    "vitae"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        Opacity="@(0.4701)"
                        PersistenceEnabled="@(true)"
                        Title="@("iure repudiandae sit")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 7, 6, 10, 9, 19))"
                            End="@(new DateTime(2000, 10, 9, 16, 30, 48))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(68.4813)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "adipisci",
                                    21.1261,
                                    463976.8761)])"
                            Origin="@(new Point(-117.3783,
                                    -38.2473,
                                    -25.4682,
                                    26.5265,
                                    395.5267,
                                new SpatialReference(2,
                                        "nisi",
                                        "quia",
                                        "debitis"),
                                    true,
                                    true,
                                    561.8974))"
                            Size="@([7,
                                6,
                                4])"
                            SpatialReference="@(new SpatialReference(5,
                                    "sint",
                                    "modi",
                                    "natus"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "BaseTileLayerType");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("aspernatur");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(110.7319,
                883.6497,
                753.3137,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(850.5274,
                909.5936,
                555.9406);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "a",
                    "consequatur",
                    "quos");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-155.8300,
                    166.7695,
                    8.4608,
                    -80.2886,
                    980.4342,
                    698.0031,
                    963.4827,
                    423.0689,
                new SpatialReference(6,
                        "harum",
                        "aliquid",
                        "incidunt"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Show;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(105.4743,
                    TileInfoFormat.Dib,
                    true,
                [new LOD(3,
                        "enim",
                        14.2563,
                        37046832.5340)],
                new Point(163.1813,
                        5.3239,
                        56.3618,
                        43.7064,
                        615.5578,
                    new SpatialReference(5,
                            "dolorem",
                            "qui",
                            "et"),
                        true,
                        true,
                        646.1890),
                    [4,
                        5,
                        8,
                        5],
                new SpatialReference(6,
                        "consequatur",
                        "minima",
                        "consectetur"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 4, 25, 2, 30, 34),
                    new DateTime(2016, 3, 23, 9, 29, 27));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
