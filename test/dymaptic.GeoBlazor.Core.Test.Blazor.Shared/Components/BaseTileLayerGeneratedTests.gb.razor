@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("aliquam",
                            23910806.2676))"
                        MaxScale="@(13924423.6613)"
                        MinScale="@(1853.7375)"
                        RefreshInterval="@(714.3763)"
                        SpatialReference="@(new SpatialReference(3,
                                "ratione",
                                "ullam",
                                "quibusdam"))"
                        FullExtent="@(new Extent(-125.9804,
                                -155.4420,
                                -14.5550,
                                88.8072,
                                645.2985,
                                193.9504,
                                331.4076,
                                562.6656,
                            new SpatialReference(7,
                                    "totam",
                                    "quis",
                                    "delectus"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.3588)"
                        PersistenceEnabled="@(true)"
                        Title="@("animi velit aut")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2021, 9, 5, 3, 31, 26))"
                            End="@(new DateTime(2018, 7, 1, 3, 5, 5))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(875.8485)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "quo",
                                    3.2403,
                                    35811634.7391),
                            new LOD(2,
                                    "magnam",
                                    3.5349,
                                    41605856.1855)])"
                            Origin="@(new Point(-45.0205,
                                    -36.1958,
                                    27.7199,
                                    13.5829,
                                    989.6588,
                                new SpatialReference(4,
                                        "voluptate",
                                        "fugiat",
                                        "aperiam"),
                                    true,
                                    true,
                                    677.0088))"
                            Size="@([5,
                                5,
                                1])"
                            SpatialReference="@(new SpatialReference(5,
                                    "ratione",
                                    "optio",
                                    "facere"))">
                        </TileInfo>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("quia");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(2.9925,
                672.9244,
                540.6304,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(545.7843,
                8.5603,
                617.1588);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.Invert;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "minima",
                    "sit",
                    "nam");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(-113.0486,
                    -88.6698,
                    82.0203,
                    83.3258,
                    867.1932,
                    61.0391,
                    208.3553,
                    336.1692,
                new SpatialReference(9,
                        "corporis",
                        "voluptatum",
                        "itaque"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(990.6043,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(4,
                        "repellendus",
                        2.7624,
                        43126445.3105)],
                new Point(92.9869,
                        58.0847,
                        -62.6352,
                        37.8576,
                        354.7932,
                    new SpatialReference(4,
                            "incidunt",
                            "consectetur",
                            "voluptatem"),
                        true,
                        true,
                        349.7548),
                    [6,
                        7],
                new SpatialReference(1,
                        "voluptates",
                        "sit",
                        "beatae"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 6, 26, 4, 10, 31),
                    new DateTime(2016, 10, 25, 18, 51, 29));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
