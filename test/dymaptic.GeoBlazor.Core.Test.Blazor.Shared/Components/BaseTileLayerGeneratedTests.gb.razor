@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedBaseTileLayer(Action renderHandler)
    {
        BaseTileLayer? baseTileLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <BaseTileLayer 
                        BlendMode="@(BlendMode.Xor)"
                        Effect="@(new Effect("sed",
                            35369509.9580))"
                        MaxScale="@(31484269.5682)"
                        MinScale="@(7654.2000)"
                        RefreshInterval="@(824.2845)"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.2028)"
                        PersistenceEnabled="@(true)"
                        Title="@("cum ad ea")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2011, 6, 12, 18, 58, 30))"
                            End="@(new DateTime(2018, 11, 21, 5, 21, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(26.8825)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "et",
                                    60.8473,
                                    28632647.4307)])"
                            Origin="@(new Point(-62.8449,
                                    -87.1289,
                                    -1.2838,
                                    44.4610,
                                    834.9258,
                                new SpatialReference(8,
                                        "a",
                                        "est",
                                        "nostrum"),
                                    true,
                                    true,
                                    499.0147))"
                            Size="@([1])">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("vel")"
                                Wkt="@("enim")"
                                Wkt2="@("ut")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(1)"
                            ImageCoordinateSystem="@("nulla")"
                            Wkt="@("ex")"
                            Wkt2="@("velit")">
                        </SpatialReference>
                        <Extent 
                            Xmax="@(51.9307)"
                            Xmin="@(-43.3122)"
                            Ymax="@(60.6177)"
                            Ymin="@(-80.6428)"
                            Zmax="@(554.9457)"
                            Zmin="@(749.8254)"
                            Mmax="@(750.8341)"
                            Mmin="@(234.7140)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("quae")"
                                Wkt="@("blanditiis")"
                                Wkt2="@("enim")">
                            </SpatialReference>
                        </Extent>
                    </BaseTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(baseTileLayer!);
        await AssertJavaScript("dispatchEvent", args: [baseTileLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "base-tile");
        var addResolvingPromiseMethodResult = await baseTileLayer.AddResolvingPromise("dolorem");
        Assert.IsNotNull(addResolvingPromiseMethodResult);
        var fetchTileMethodResult = await baseTileLayer.FetchTile(252.4940,
                616.3569,
                574.2361,
                default);
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await baseTileLayer.GetTileUrl(823.1672,
                940.6657,
                472.3210);
        Assert.IsNotNull(getTileUrlMethodResult);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await baseTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await baseTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "rerum",
                    "harum",
                    "omnis");
        await baseTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await baseTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        Extent testFullExtent = new Extent(10.0473,
                    -66.7538,
                    -23.6408,
                    -46.5164,
                    3.8459,
                    952.3324,
                    228.4793,
                    942.4407,
                new SpatialReference(3,
                        "dolorem",
                        "iste",
                        "doloribus"),
                    true,
                    true);
        await baseTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await baseTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await baseTileLayer.SetListMode(testListMode);
        var listMode = await baseTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        TileInfo testTileInfo = new TileInfo(825.3838,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(6,
                        "nisi",
                        12.3285,
                        30361191.1930)],
                new Point(-27.1652,
                        58.4681,
                        -126.0392,
                        -29.0788,
                        541.8824,
                    new SpatialReference(6,
                            "labore",
                            "possimus",
                            "accusamus"),
                        true,
                        true,
                        27.7372),
                    [2,
                        4],
                new SpatialReference(6,
                        "minima",
                        "inventore",
                        "vel"));
        await baseTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await baseTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2016, 2, 26, 6, 31, 21),
                    new DateTime(2006, 10, 15, 19, 21, 9));
        await baseTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await baseTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
