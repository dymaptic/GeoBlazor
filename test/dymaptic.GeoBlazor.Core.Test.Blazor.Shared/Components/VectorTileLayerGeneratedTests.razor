@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("illo")"
                        BlendMode="@(BlendMode.Luminosity)"
                        Effect="@(new Effect("qui",
                            37762463.4961))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(14326478.4147)"
                        MinScale="@(22435.6947)"
                        Opacity="@(0.0061)"
                        PersistenceEnabled="@(true)"
                        Style="@("itaque")"
                        Title="@("asperiores repudiandae qui")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2001, 7, 25, 10, 30, 35))"
                            End="@(new DateTime(2013, 10, 13, 6, 21, 31))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(139.3015)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "nemo",
                                    67.5364,
                                    37474516.7446),
                            new LOD(4,
                                    "minus",
                                    16.3294,
                                    11795548.3179)])"
                            Origin="@(new Point(-94.2165,
                                    -8.7594,
                                    78.2784,
                                    -1.8872,
                                    465.4918,
                                new SpatialReference(1,
                                        "consequatur",
                                        "dignissimos",
                                        "sit"),
                                    true,
                                    true,
                                    979.8932))"
                            Size="@([1,
                                2])">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("voluptatem")"
                                Wkt="@("enim")"
                                Wkt2="@("iure")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(6)"
                            ImageCoordinateSystem="@("sequi")"
                            Wkt="@("voluptatibus")"
                            Wkt2="@("inventore")">
                        </SpatialReference>
                        <PortalItem />
                        <Extent 
                            Xmax="@(48.8467)"
                            Xmin="@(93.5688)"
                            Ymax="@(31.8782)"
                            Ymin="@(-24.3352)"
                            Zmax="@(893.3946)"
                            Zmin="@(677.4292)"
                            Mmax="@(499.0415)"
                            Mmin="@(202.2667)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("qui")"
                                Wkt2="@("autem")">
                            </SpatialReference>
                        </Extent>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("illo");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("reprehenderit");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("cumque");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("debitis");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(4);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("voluptas");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("laudantium");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("facilis",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("et",
                "ipsa");
        await vectorTileLayer.SetPaintProperties("et",
                "illum");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(new SpriteSourceUrlInfo(86.3388,
                SpriteFormat.Png,
                    "http://haven.com"));
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("consequatur",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("quia",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(160.3020,
                    107.7735,
                    37.2451,
                    87.8866,
                    645.9021,
                    273.6747,
                    168.8403,
                    921.8339,
                new SpatialReference(6,
                        "ut",
                        "atque",
                        "fugiat"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(151.6104,
                    -122.2864,
                    83.3845,
                    -12.5449,
                    772.7662,
                    826.7013,
                    203.6363,
                    177.6219,
                new SpatialReference(7,
                        "et",
                        "quam",
                        "est"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "expedita",
                    "aliquam",
                    "et");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(565.4136,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(3,
                        "sit",
                        34.3771,
                        14085414.5918)],
                new Point(52.7138,
                        85.4341,
                        118.2352,
                        71.8751,
                        843.5552,
                    new SpatialReference(2,
                            "expedita",
                            "magnam",
                            "assumenda"),
                        true,
                        true,
                        678.6793),
                    [4],
                new SpatialReference(9,
                        "non",
                        "repellendus",
                        "rerum"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 5, 20, 19, 31, 22),
                    new DateTime(2023, 6, 8, 4, 32, 8));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
