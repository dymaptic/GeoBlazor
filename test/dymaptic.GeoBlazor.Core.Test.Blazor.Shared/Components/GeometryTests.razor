@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanAddPointGraphicToViewInMarkup(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">

                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
                <Graphic Attributes="_attributes">
                    <Point Latitude="100" Longitude="12" />
                    <SimpleMarkerSymbol Color="@(new MapColor("green"))">
                        <Outline Color="@(new MapColor("red"))" Width="2" />
                    </SimpleMarkerSymbol>
                    <PopupTemplate Title="{Name}" StringContent="{Description}" />
                </Graphic>

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 });
    }

    [TestMethod]
    public async Task TestCanAddPolyLineGraphicToViewInMarkup(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
                <Graphic Attributes="_attributes">
                    <PolyLine Paths="_paths" />
                    <SimpleLineSymbol Color="@(new MapColor("ffffff"))"></SimpleLineSymbol>
                    <PopupTemplate Title="{Name}" StringContent="{Description}" />
                </Graphic>
            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polyline", 1 });
    }

    [TestMethod]
    public async Task TestCanAddPolygonGraphicToViewInMarkup(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
                <Graphic Attributes="_attributes">
                    <Polygon Rings="_rings" />
                    <SimpleFillSymbol Color="@(new MapColor("ffffff"))">
                        <Outline Color="@(new MapColor("black"))" Width="2" />
                    </SimpleFillSymbol>
                    <PopupTemplate Title="{Name}" StringContent="{Description}" />
                </Graphic>

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polygon", 1 });
    }

    [TestMethod]
    public async Task TestCanAddMultipleGraphicsToViewInMarkup(Action renderHandler)
    {
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
                <Graphic>
                    <Point Latitude="100" Longitude="12" />
                </Graphic>
                <Graphic>
                    <PolyLine Paths="_paths" />
                </Graphic>
                <Graphic>
                    <Polygon Rings="_rings" />
                </Graphic>

            </MapView>);

        await WaitForMapToRender();
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 });
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polyline", 1 });
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polygon", 1 });
    }

    [TestMethod]
    public async Task TestCanAddPointGraphicToViewInCode(Action renderHandler)
    {
        MapView? mapView = null;        
        AddMapRenderFragment( 
            @<MapView @ref=" mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
            </MapView>);
        await WaitForMapToRender();

        await mapView!.AddGraphic(new Graphic(new Point(100, 12),
            new SimpleMarkerSymbol(color: new MapColor("purple")),
            new PopupTemplate("title", "content"), _attributes));

        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 });
    }

    [TestMethod]
    public async Task TestCanAddPolyLineGraphicToViewInCode(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment(
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
            </MapView>);
        await WaitForMapToRender();

        await mapView!.AddGraphic(new Graphic(new PolyLine(_paths),
            new SimpleLineSymbol(new MapColor("purple")),
            new PopupTemplate("title", "content"), _attributes));
        
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polyline", 1 });
    }

    [TestMethod]
    public async Task TestCanAddPolygonGraphicToViewInCode(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment(
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
            </MapView>);
        await WaitForMapToRender();

        await mapView!.AddGraphic(new Graphic(new Polygon(_rings),
            new SimpleFillSymbol(color: new MapColor("purple")),
            new PopupTemplate("title", "content"), _attributes));
        
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polygon", 1 });
    }

    private readonly AttributesDictionary _attributes = new(new Dictionary<string, object?>
    {
        { "Name", "name" },
        { "Description", "description" }
    });

    private readonly MapPath[] _paths =
    {
        new()
        {
            new MapPoint(0, 0),
            new MapPoint(0, 1),
            new MapPoint(1, 1)
        }
    };

    private readonly MapPath[] _rings =
    {
        new()
        {
            new MapPoint(0, 0),
            new MapPoint(0, 1),
            new MapPoint(1, 1),
            new MapPoint(1, 0),
            new MapPoint(0, 0)
        }
    };
}