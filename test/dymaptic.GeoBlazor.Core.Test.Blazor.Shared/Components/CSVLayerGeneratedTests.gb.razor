@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("repellendus sint architecto")"
                        Copyright="@("nam")"
                        Opacity="@(0.8450)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Overlay)"
                        DefinitionExpression="@("consectetur")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("nihil")"
                        Effect="@(new Effect("eius",
                            28376413.4412))"
                        FullExtent="@(new Extent(166.2307,
                                -12.6828,
                                12.6077,
                                73.3274,
                                946.9049,
                                90.3327,
                                143.1196,
                                496.2453,
                            new SpatialReference(1,
                                    "voluptates",
                                    "sed",
                                    "molestiae"),
                                true,
                                true))"
                        GeometryType="@("id")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("et")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("impedit")"
                        MaxScale="@(38511712.3619)"
                        MinScale="@(10676.1741)"
                        ObjectIdField="@("illo")"
                        OutFields="@(["enim",
                            "quos",
                            "qui"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(42.0651)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(5,
                                "aut",
                                "alias",
                                "soluta"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(410.7578)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("soluta")"
                            EndField="@("rerum")"
                            Stops="@([new DateTime(2009, 7, 20, 6, 24, 1),
                                new DateTime(2005, 3, 4, 7, 7, 9),
                                new DateTime(2021, 4, 8, 22, 7, 22)])"
                            TimeZone="@("Europe/Bucharest")"
                            TrackIdField="@("est")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(247.9919)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2016, 7, 20, 21, 13, 41))"
                                End="@(new DateTime(2023, 10, 22, 10, 38, 27))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2003, 3, 21, 14, 46, 35))"
                            End="@(new DateTime(2022, 9, 3, 18, 11, 58))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                    new MapColor(93, 108, 189),
                                    new MapColor(17, 158, 18)),
                                    898.5133,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(407.4792,
                                            626.0282),
                                    new AuthoringInfoField1ClassBreakInfos(882.5429,
                                            323.1544)],
                                        "cumque",
                                        "omnis",
                                        "ea"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(157.1606,
                                            782.2433)],
                                        "delectus",
                                        "et",
                                        "voluptatem"),
                                    ["temporibus",
                                        "alias",
                                        "explicabo",
                                        "aut"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "et",
                                    true,
                                LengthUnit.Decimeters,
                                    232.5518,
                                    653.0046,
                                    684.9043,
                                    11.9115))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("ducimus")"
                            ApiKey="@("nisi")"
                            AvgRating="@(490.5830)"
                            Categories="@(["est",
                                "ut",
                                "non",
                                "sequi"])"
                            Created="@(new DateTime(2015, 3, 17, 13, 40, 34))"
                            Culture="@("et")"
                            Description="@("deserunt nostrum possimus ut sed voluptatem")"
                            Extent="@(new Extent(-4.4343,
                                    -59.5747,
                                    42.8073,
                                    28.3655,
                                    657.1999,
                                    199.6177,
                                    186.7024,
                                    95.1489,
                                new SpatialReference(7,
                                        "consequatur",
                                        "tenetur",
                                        "illo"),
                                    true,
                                    true))"
                            GroupCategories="@(["expedita",
                                "autem"])"
                            LicenseInfo="@("cumque")"
                            Modified="@(new DateTime(2019, 4, 3, 1, 51, 2))"
                            Name="@("group")"
                            NumComments="@(981.3415)"
                            NumRatings="@(309.0601)"
                            NumViews="@(745.2105)"
                            Owner="@("Rylee Dickens")"
                            OwnerFolder="@("Stefanie Kiehn")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Auto,
                                    ["deserunt",
                                        "amet",
                                        "molestiae",
                                        "sit"],
                                    "facere",
                                    "non",
                                    "vero",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("velit")"
                            Screenshots="@(["temporibus",
                                "esse",
                                "tenetur"])"
                            Size="@(4)"
                            Snippet="@("fuga")"
                            Tags="@(["consectetur",
                                "asperiores",
                                "sequi"])"
                            Title="@("totam nostrum accusantium")"
                            TypeKeywords="@(["laborum",
                                "rerum",
                                "ab"])"
                            Url="@("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("quo ratione et")"
                            StringContent="@("esse")"
                            OutFields="@(["et",
                                "fuga"])"
                            FieldInfos="@([new FieldInfo("status",
                                    "earum",
                                    "eos",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("id",
                                    "qui",
                                    "esse",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("title",
                                    "fugit",
                                    "eveniet",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("email",
                                    "modi",
                                    "iusto",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new AttachmentsPopupContent("doloribus omnis sint",
                                    "sapiente sunt nobis ab",
                                    AttachmentsPopupContentDisplayType.Preview),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                                        "debitis",
                                        "tempora blanditiis dolorum"))])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "email",
                                    "commodi dolor dicta",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("commodi nostrum aliquam",
                                    "077d1cfa-dc9a-dd47-ed89-34844380c92c",
                                    () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "group",
                                    "minima")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("sapiente")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("tempore")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterAlong)"
                            LabelExpression="@("quidem")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(19826360.4918)"
                            MinScale="@(47670.2130)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(857.2705))"
                            Symbol="@(new TextSymbol("nesciunt id atque",
                                new MapColor(176, 7, 83),
                                new MapColor(136, 92, 71),
                                    new Dimension(482.1386),
                                new MapFont(new Dimension(56.9705),
                                        "Palatino",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.Underline),
                                    192.7534,
                                new MapColor(113, 34, 189),
                                new MapColor(155, 155, 240),
                                    751.0610,
                                HorizontalAlignment.Left,
                                    true,
                                    658.8689,
                                    new Dimension(564.6369),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <Field 
                            Name="@("id")"
                            Alias="@("cum")"
                            Description="@("iure non quam mollitia officiis")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "laudantium" })"
                            ValueType="@(FieldValueType.Binary)"
                            Domain="@(new InheritedDomain("email"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("rerum",
                                31168714.8570),
                                new Effect("et",
                                    39347958.3424),
                                new Effect("officiis",
                                    1445183.2098),
                                new Effect("natus",
                                    39094089.5510)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(179.5801,
                                new Extent(77.6123,
                                        70.5387,
                                        60.5278,
                                        45.3477,
                                        568.3019,
                                        320.7032,
                                        803.7422,
                                        383.1311,
                                    new SpatialReference(1,
                                            "doloribus",
                                            "unde",
                                            "omnis"),
                                        true,
                                        true),
                                    [2,
                                        2,
                                        3,
                                        3],
                                SpatialRelationship.Touches,
                                new TimeExtent(new DateTime(2002, 3, 9, 8, 52, 1),
                                        new DateTime(2018, 8, 21, 4, 35, 43)),
                                    QueryUnits.UsNauticalMiles,
                                    "Country = 'Canada'"))"
                            IncludedEffect="@([new Effect("ipsum",
                                8903071.3508),
                                new Effect("aperiam",
                                    32005014.0381),
                                new Effect("officia",
                                    8484007.2503),
                                new Effect("neque",
                                    3844518.9742)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "distinctio qui eligendi"))"
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(760.6234)"
                            Unit="@(ElevationUnit.Yards)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["blanditiis",
                    "dolor",
                    "sequi"],
                    ["title",
                        "group",
                        "token",
                        "avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("id");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("status",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Point(44.7793,
                            -21.9926,
                            -38.5498,
                            13.4844,
                            300.4078,
                        new SpatialReference(2,
                                "culpa",
                                "eos",
                                "placeat"),
                            true,
                            true,
                            71.0082),
                    new TextSymbol("quibusdam ducimus sunt",
                        new MapColor(87, 59, 69),
                        new MapColor(90, 158, 45),
                            new Dimension(246.2468),
                        new MapFont(new Dimension(351.8027),
                                "Georgia",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            887.5846,
                        new MapColor(35, 59, 95),
                        new MapColor(114, 187, 114),
                            518.0700,
                        HorizontalAlignment.Center,
                            true,
                            454.0205,
                            new Dimension(671.3746),
                            true),
                    new PopupTemplate("possimus laboriosam sunt",
                            "porro",
                            ["quia",
                                "doloribus",
                                "qui",
                                "ipsum"],
                        [new FieldInfo("id",
                                "totam",
                                "labore",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.LongDateLongTime),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "quam",
                                    "omnis deleniti assumenda")),
                        new TextPopupContent("laborum ratione minus"),
                        new AttachmentsPopupContent("vero qui corporis",
                                "quo mollitia placeat autem totam",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return $feature.Name;",
                                "title",
                                "hic sit temporibus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("consequatur dolor veritatis",
                                "https://picsum.photos/640/480/?image=983",
                                "e0699dd3-0e12-e364-36d1-42a5bbfbf16f",
                                () => { Console.WriteLine("magni"); return Task.CompletedTask; },
                                "status",
                                true,
                                true,
                                true,
                                "quasi")]),
                        new AttributesDictionary(),
                        true,
                        "beatae",
                        "porro",
                        new GraphicOrigin(Guid.NewGuid(),
                            "pariatur",
                            6))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([2,
                    9,
                    3],
                    true,
                    976.7485,
                    746.2628,
                    "4.1.2.6",
                new Extent(176.3608,
                        -18.1658,
                        72.3532,
                        54.6425,
                        821.5298,
                        215.6155,
                        70.9493,
                        350.1039,
                    new SpatialReference(8,
                            "qui",
                            "fugiat",
                            "aut"),
                        true,
                        true),
                    4,
                    ["quos",
                        "ratione",
                        "consequatur"],
                    "reprehenderit",
                    new DateTime(2023, 4, 6, 20, 1, 6),
                    958.6049,
                    2,
                    "possimus",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([7,
                    4,
                    9,
                    6],
                    true,
                    283.8314,
                    227.1251,
                    "4.5.7.1",
                new Polyline([new MapPath([new MapPoint([170.2666,
                            612.7187,
                            117.4575]),
                        new MapPoint([584.8161,
                            320.5767,
                            874.3082,
                            554.4766])])],
                    new SpatialReference(3,
                            "temporibus",
                            "earum",
                            "temporibus"),
                        true,
                        true),
                    1,
                    ["eaque",
                        "molestiae"],
                    "omnis",
                    new DateTime(2000, 5, 15, 17, 40, 16),
                    667.4290,
                    8,
                    "molestias",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([7,
                    7,
                    9],
                    true,
                    539.1143,
                    473.8382,
                    "6.0.6.8",
                new Point(-116.0577,
                        -47.9942,
                        -82.5747,
                        -46.8123,
                        437.6477,
                    new SpatialReference(2,
                            "culpa",
                            "praesentium",
                            "ducimus"),
                        true,
                        true,
                        458.0084),
                    9,
                    ["aliquid",
                        "voluptatum",
                        "unde"],
                    "voluptate",
                    new DateTime(2018, 5, 18, 20, 36, 22),
                    167.1133,
                    3,
                    "et",
                    6),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([1,
                    3],
                    true,
                    537.5527,
                    847.9772,
                    "7.6.5.4",
                new Extent(82.0157,
                        48.6925,
                        33.1205,
                        46.8827,
                        129.3877,
                        24.3809,
                        648.9496,
                        14.5191,
                    new SpatialReference(5,
                            "odio",
                            "aut",
                            "laboriosam"),
                        true,
                        true),
                    1,
                    ["velit",
                        "odio",
                        "veritatis"],
                    "commodi",
                    new DateTime(2009, 3, 25, 21, 41, 21),
                    612.1147,
                    5,
                    "ad",
                    7),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.DestinationIn;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("aut dolores temporibus",
                    "et",
                    ["ut",
                        "deleniti",
                        "qui"],
                [new FieldInfo("name",
                        "itaque",
                        "eos",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.DayShortMonthYearLongTime24),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("email",
                        "quia",
                        "sint",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Var)],
                [new TextPopupContent("ea minima id"),
                new MediaPopupContent("consequatur labore suscipit",
                        "rerum ad qui quia",
                    [new ColumnChartMediaInfo("aut accusamus qui",
                            "non",
                            "veniam optio quasi",
                        new ChartMediaInfoValue(["fugit",
                                "delectus"],
                                "explicabo",
                                "omnis",
                            [new ChartMediaInfoValueSeries("group",
                                    "nihil",
                                    477.3333),
                            new ChartMediaInfoValueSeries("status",
                                    "ipsam",
                                    839.4673),
                            new ChartMediaInfoValueSeries("createdAt",
                                    "et",
                                    135.7808)],
                            [new MapColor(38, 89, 16),
                            new MapColor(77, 127, 225)]))],
                        3),
                new FieldsPopupContent([new FieldInfo("status",
                            "qui",
                            "aut",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateLeLongTime24),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("group",
                            "ut",
                            "voluptas",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLongTime24),
                            true,
                            true,
                        StatisticType.Sum),
                    new FieldInfo("createdAt",
                            "sapiente",
                            "consectetur",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(3,
                                true,
                            DateFormat.LongDate),
                            true,
                            true,
                        StatisticType.Sum),
                    new FieldInfo("status",
                            "qui",
                            "id",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.DayShortMonthYearShortTime24),
                            true,
                            true,
                        StatisticType.Min)],
                        "et qui reprehenderit culpa et",
                        "quia repellendus eveniet")],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "title",
                        "ut provident voluptates",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "phone",
                        "sint hic sed",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("maxime reprehenderit ut",
                        "https://picsum.photos/640/480/?image=292",
                        "a8be8a64-7cac-9974-06d4-f658d42ffd7a",
                        () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "repudiandae")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "inventore voluptatibus facilis"),
                ElevationInfoMode.OnTheGround,
                    241.6573,
                ElevationUnit.Millimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("minus",
                    45287737.1128),
                    new Effect("deleniti",
                        9659125.1829),
                    new Effect("perspiciatis",
                        36517105.8536),
                    new Effect("ea",
                        31535.3795)],
                    true,
                new FeatureFilter(304.3022,
                    new Point(14.3798,
                            -22.0399,
                            163.4751,
                            85.4259,
                            181.5929,
                        new SpatialReference(8,
                                "atque",
                                "modi",
                                "reprehenderit"),
                            true,
                            true,
                            8.8374),
                        [1,
                            5,
                            7,
                            8],
                    SpatialRelationship.Relation,
                    new TimeExtent(new DateTime(2016, 7, 22, 11, 5, 35),
                            new DateTime(2005, 9, 1, 21, 8, 43)),
                        QueryUnits.NauticalMiles,
                        "Name = 'John Doe'"),
                    [new Effect("incidunt",
                        13700479.0047),
                        new Effect("ducimus",
                            24692193.9433),
                        new Effect("et",
                            34989073.6735)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "id",
                    "soluta",
                    "odio qui excepturi adipisci rerum qui",
                    5,
                    true,
                    true,
                    new { Value = "voluptatibus" },
                FieldValueType.Measurement,
                new RangeDomain("minus",
                        "dolorem",
                        "createdAt")),
            new Field(default,
                    "id",
                    "repellendus",
                    "et ducimus eum omnis illo repudiandae",
                    9,
                    true,
                    true,
                    new { Value = "doloribus" },
                FieldValueType.Coordinate,
                new InheritedDomain("password")),
            new Field(default,
                    "status",
                    "pariatur",
                    "voluptas quis fugit ad nihil aut nam",
                    4,
                    true,
                    true,
                    new { Value = "possimus" },
                FieldValueType.UniqueIdentifier,
                new RangeDomain("unde",
                        "et",
                        "category"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-130.4056,
                    -50.4240,
                    -72.4096,
                    39.9585,
                    214.1310,
                    317.0159,
                    625.0037,
                    322.8874,
                new SpatialReference(2,
                        "qui",
                        "voluptates",
                        "ullam"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterAfter,
                    "nisi",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    1752392.9704,
                    47764.1456,
                    true,
                    new Dimension(618.5304),
                new TextSymbol("laudantium odio delectus",
                    new MapColor(110, 99, 190),
                    new MapColor(48, 181, 88),
                        new Dimension(482.7885),
                    new MapFont(new Dimension(647.6111),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        450.9758,
                    new MapColor(203, 71, 10),
                    new MapColor(91, 70, 226),
                        16.4376,
                    HorizontalAlignment.Center,
                        true,
                        337.3809,
                        new Dimension(659.3419),
                        true),
                    true,
                    "Name = 'John Doe'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("sint",
                SortOrder.Ascending,
                    "saepe"),
            new OrderedLayerOrderBy("et",
                SortOrder.Ascending,
                    "in"),
            new OrderedLayerOrderBy("error",
                SortOrder.Ascending,
                    "accusamus")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "necessitatibus",
                    "minus",
                    456.9573,
                    ["voluptas",
                        "totam",
                        "odio"],
                    new DateTime(2000, 7, 23, 6, 58, 28),
                    "inventore",
                    "aliquam voluptatem sed sit",
                new Extent(53.0749,
                        -98.6850,
                        -58.1257,
                        -46.4264,
                        782.1864,
                        311.1602,
                        704.6355,
                        425.0808,
                    new SpatialReference(4,
                            "nam",
                            "impedit",
                            "distinctio"),
                        true,
                        true),
                    ["asperiores",
                        "voluptate",
                        "eum"],
                    "eos",
                    new DateTime(2006, 2, 5, 7, 11, 43),
                    "phone",
                    384.6275);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("dolorem molestiae illum",
                    new MapColor(92, 59, 121),
                    new MapColor(212, 48, 239),
                        new Dimension(30.4004),
                    new MapFont(new Dimension(568.0202),
                            "Times New Roman",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        89.2904,
                    new MapColor(155, 88, 91),
                    new MapColor(35, 160, 134),
                        716.2525,
                    HorizontalAlignment.Right,
                        true,
                        878.1638,
                        new Dimension(907.7187),
                        true),
                    "autem",
                [new RotationVariable("impedit",
                    Axis.Roll,
                    RotationType.Geographic,
                    new VisualVariableLegendOptions(true,
                            "ipsam quaerat excepturi"),
                        "et",
                        "nihil recusandae natus"),
                new ColorVariable("ut",
                        "vitae",
                    [new ColorStop(474.5759,
                        new MapColor(116, 237, 79),
                            "rem"),
                    new ColorStop(165.5641,
                        new MapColor(160, 17, 221),
                            "et")],
                    new VisualVariableLegendOptions(true,
                            "sunt recusandae voluptas"),
                        "reiciendis",
                        "quo molestias voluptas"),
                new RotationVariable("voluptas",
                    Axis.Heading,
                    RotationType.Arithmetic,
                    new VisualVariableLegendOptions(true,
                            "eum optio commodi"),
                        "magni",
                        "non consequuntur assumenda"),
                new RotationVariable("quo",
                    Axis.Roll,
                    RotationType.Geographic,
                    new VisualVariableLegendOptions(true,
                            "delectus ipsa explicabo"),
                        "non",
                        "et expedita doloribus")],
                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(56, 32, 2),
                        new MapColor(233, 176, 248)),
                        714.5158,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(55.5160,
                                301.2044)],
                            "ut",
                            "vero",
                            "aut"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(67.7081,
                                525.9709),
                        new AuthoringInfoField1ClassBreakInfos(655.3249,
                                879.3241)],
                            "repudiandae",
                            "eos",
                            "accusamus"),
                        ["quo",
                            "molestiae",
                            "neque"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "atque",
                        true,
                    LengthUnit.Millimeters,
                        576.5868,
                        693.8585,
                        479.7322,
                        117.7446));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "modi",
                    "dolorum",
                    "est");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2009, 1, 21, 10, 16, 30),
                    new DateTime(2013, 11, 27, 3, 13, 5));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("voluptatem",
                    "blanditiis",
                new TimeExtent(new DateTime(2018, 9, 4, 21, 14, 11),
                        new DateTime(2012, 3, 15, 11, 22, 21)),
                new TimeInterval(TemporalTime.Seconds,
                        496.0790),
                    [new DateTime(2023, 8, 3, 0, 46, 29),
                        new DateTime(2019, 3, 14, 16, 31, 56),
                        new DateTime(2004, 1, 15, 12, 16, 18),
                        new DateTime(2009, 1, 8, 13, 45, 43)],
                    "Asia/Kamchatka",
                    "id");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    22.5629);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 10, 23, 5, 56, 46),
                    new DateTime(2013, 2, 27, 10, 54, 45));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
