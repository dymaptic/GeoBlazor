@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("eaque et odio")"
                        Copyright="@("qui")"
                        Opacity="@(0.2543)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Darken)"
                        DefinitionExpression="@("veniam")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("at")"
                        Effect="@(new Effect("libero",
                            34298152.1972))"
                        GeometryType="@("sit")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("voluptates")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("exercitationem")"
                        MaxScale="@(19136673.5592)"
                        MinScale="@(40152.0987)"
                        ObjectIdField="@("iste")"
                        OutFields="@(["iste",
                            "doloremque"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(438.0432)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(549.0398)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("qui")"
                            EndField="@("omnis")"
                            Stops="@([new DateTime(2010, 7, 5, 13, 5, 25),
                                new DateTime(2014, 4, 10, 19, 25, 7)])"
                            TimeZone="@("Asia/Kamchatka")"
                            TrackIdField="@("omnis")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Weeks)"
                                Value="@(918.3274)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2006, 9, 1, 2, 20, 45))"
                                End="@(new DateTime(2015, 6, 25, 7, 50, 45))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2016, 6, 25, 16, 21, 51))"
                            End="@(new DateTime(2007, 8, 12, 4, 47, 41))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(8)"
                            ImageCoordinateSystem="@("at")"
                            Wkt="@("aut")"
                            Wkt2="@("doloribus")">
                        </SpatialReference>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(249, 81, 122),
                                    new MapColor(116, 239, 99)),
                                    415.4214,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(722.2707,
                                            18.5246)],
                                        "velit",
                                        "a",
                                        "reiciendis"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(341.7299,
                                            991.2011)],
                                        "asperiores",
                                        "voluptatem",
                                        "odit"),
                                    ["et",
                                        "doloribus"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "consequatur",
                                    true,
                                LengthUnit.Millimeters,
                                    701.4544,
                                    275.6162,
                                    299.7597,
                                    985.0374))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("possimus autem omnis")"
                            StringContent="@("occaecati")"
                            OutFields="@(["harum"])"
                            FieldInfos="@([new FieldInfo("comment",
                                    "ratione",
                                    "quia",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("avatar",
                                    "ut",
                                    "explicabo",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Stddev)])"
                            Content="@([new RelationshipPopupContent("animi ducimus repellat",
                                    "qui eum",
                                    5,
                                    "nesciunt",
                                [new RelatedRecordsInfoFieldOrder("veniam",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("illo",
                                    OrderBy.Desc)],
                                    9)])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "password",
                                    "reiciendis repudiandae nihil",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "name",
                                    "voluptatum occaecati et",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("voluptatem omnis est",
                                "https://picsum.photos/640/480/?image=904",
                                "b1f44a61-a1cb-fbb6-c28b-6389c9bdd4a6",
                                () => { Console.WriteLine("animi"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "asperiores")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("sunt")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("et")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowLeft)"
                            LabelExpression="@("sit")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(28817120.9424)"
                            MinScale="@(5230.1712)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(932.2422))"
                            Symbol="@(new TextSymbol("est saepe reprehenderit",
                                new MapColor(194, 176, 121),
                                new MapColor(123, 173, 9),
                                    new Dimension(535.7822),
                                new MapFont(new Dimension(236.9775),
                                        "Garamond",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.LineThrough),
                                    425.3669,
                                new MapColor(230, 30, 22),
                                new MapColor(204, 206, 115),
                                    872.9914,
                                HorizontalAlignment.Right,
                                    true,
                                    184.8623,
                                    new Dimension(855.8214),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("ObjectID = 1")">
                        </Label>
                        <Extent 
                            Xmax="@(-1.0252)"
                            Xmin="@(-157.2496)"
                            Ymax="@(-51.5062)"
                            Ymin="@(55.3552)"
                            Zmax="@(906.7210)"
                            Zmin="@(272.7158)"
                            Mmax="@(748.9379)"
                            Mmin="@(766.8704)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("ratione")"
                                Wkt="@("quibusdam")"
                                Wkt2="@("et")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("id")"
                            Alias="@("consequatur")"
                            Description="@("tenetur quos et")"
                            Length="@(2)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "hic" })"
                            ValueType="@(FieldValueType.OrderedOrRanked)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>()],
                                "id"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("odio",
                                23761424.5114)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(536.2610,
                                new Polygon([new MapPath([new MapPoint([542.4271])])],
                                    new SpatialReference(3,
                                            "neque",
                                            "deleniti",
                                            "asperiores"),
                                    new Point(23.5674,
                                            -57.3864,
                                            -42.9311,
                                            -24.1985,
                                            220.3182,
                                        new SpatialReference(6,
                                                "maxime",
                                                "eligendi",
                                                "eum"),
                                            true,
                                            true,
                                            151.7092),
                                        true,
                                        true,
                                        true),
                                    [6],
                                SpatialRelationship.IndexIntersects,
                                new TimeExtent(new DateTime(2010, 8, 5, 21, 19, 26),
                                        new DateTime(2000, 7, 4, 22, 48, 21)),
                                    QueryUnits.Miles,
                                    "ObjectID = 1"))"
                            IncludedEffect="@([new Effect("dolor",
                                5933829.9153),
                                new Effect("quia",
                                    43741931.6981)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "iure cumque quia"))"
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(462.8208)"
                            Unit="@(ElevationUnit.Centimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["cumque",
                    "voluptatem"],
                    ["status",
                        "comment"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("createdAt");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("title",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([604.3010,
                                639.9149]),
                            new MapPoint([966.3595])]),
                            new MapPath([new MapPoint([129.3137])])],
                        new SpatialReference(5,
                                "voluptas",
                                "est",
                                "architecto"),
                            true,
                            true),
                    new TextSymbol("quos inventore voluptatem",
                        new MapColor(252, 116, 190),
                        new MapColor(245, 189, 254),
                            new Dimension(797.0392),
                        new MapFont(new Dimension(296.0985),
                                "Garamond",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            929.1175,
                        new MapColor(86, 24, 221),
                        new MapColor(68, 151, 163),
                            549.0017,
                        HorizontalAlignment.Center,
                            true,
                            217.1320,
                            new Dimension(119.8141),
                            true),
                    new PopupTemplate("voluptas rerum odit",
                            "excepturi",
                            ["eligendi"],
                        [new FieldInfo("group",
                                "et",
                                "veniam",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("name",
                                "impedit",
                                "expedita",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortDateLeLongTime),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "omnis",
                                    "omnis magni et")),
                        new AttachmentsPopupContent("omnis quae et",
                                "quidem aperiam dicta",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "createdAt",
                                "quibusdam autem sunt",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "createdAt",
                                "veritatis et nobis",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("aut reiciendis nihil",
                                "https://picsum.photos/640/480/?image=287",
                                "7ac41b17-aeee-d4b5-c814-f9df821aa68e",
                                () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                                "email",
                                true,
                                true,
                                true,
                                "eaque")]),
                        new AttributesDictionary(),
                        true,
                        "architecto",
                        "rem",
                        new GraphicOrigin(Guid.NewGuid(),
                            "qui",
                            9))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([9],
                    true,
                    737.8807,
                    404.1380,
                    "5.1.6.4",
                new Polygon([new MapPath([new MapPoint([16.1954,
                            661.7664])]),
                        new MapPath([new MapPoint([273.6823])])],
                    new SpatialReference(5,
                            "aut",
                            "ipsum",
                            "fugiat"),
                    new Point(121.8733,
                            -43.3000,
                            136.7814,
                            -15.4923,
                            602.6304,
                        new SpatialReference(9,
                                "veniam",
                                "magni",
                                "earum"),
                            true,
                            true,
                            249.1677),
                        true,
                        true,
                        true),
                    8,
                    ["dolores",
                        "voluptas"],
                    "ut",
                    new DateTime(2023, 3, 23, 14, 54, 20),
                    138.9118,
                    3,
                    "et",
                    2),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([9],
                    true,
                    544.8433,
                    135.3214,
                    "8.3.3.6",
                new Extent(-19.4330,
                        -43.3303,
                        -71.4721,
                        -4.0865,
                        605.5827,
                        783.5915,
                        188.6472,
                        941.6343,
                    new SpatialReference(6,
                            "neque",
                            "dolores",
                            "ratione"),
                        true,
                        true),
                    2,
                    ["ipsum",
                        "necessitatibus"],
                    "ut",
                    new DateTime(2014, 10, 23, 7, 13, 12),
                    476.0155,
                    7,
                    "et",
                    2),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([9,
                    4],
                    true,
                    906.4058,
                    50.2849,
                    "5.5.4.8",
                new Polygon([new MapPath([new MapPoint([249.2134]),
                        new MapPoint([24.3215])])],
                    new SpatialReference(1,
                            "quas",
                            "totam",
                            "consequatur"),
                    new Point(28.9239,
                            85.3540,
                            -129.0077,
                            22.3187,
                            331.1230,
                        new SpatialReference(9,
                                "nulla",
                                "illum",
                                "quis"),
                            true,
                            true,
                            838.6617),
                        true,
                        true,
                        true),
                    4,
                    ["est",
                        "molestias"],
                    "maiores",
                    new DateTime(2000, 3, 9, 16, 6, 16),
                    136.6908,
                    8,
                    "quaerat",
                    1),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([7],
                    true,
                    79.8784,
                    805.9942,
                    "3.1.3.1",
                new Polyline([new MapPath([new MapPoint([345.9284,
                            357.5267])])],
                    new SpatialReference(4,
                            "hic",
                            "placeat",
                            "est"),
                        true,
                        true),
                    9,
                    ["veniam"],
                    "veritatis",
                    new DateTime(2007, 3, 6, 5, 33, 26),
                    432.2373,
                    2,
                    "qui",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Saturation;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("deserunt assumenda rerum",
                    "minima",
                    ["fuga",
                        "quibusdam"],
                [new FieldInfo("group",
                        "dolorem",
                        "voluptas",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("createdAt",
                        "rem",
                        "consectetur",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Max)],
                [new TextPopupContent("minima sed non")],
                [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "comment",
                        "qui nulla fugiat",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("totam accusamus ut",
                        "https://picsum.photos/640/480/?image=517",
                        "6627c59e-7448-bcb2-5dfb-42936b2b51b3",
                        () => { Console.WriteLine("magnam"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "et")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "voluptatem molestiae quidem"),
                ElevationInfoMode.AbsoluteHeight,
                    421.0464,
                ElevationUnit.Centimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("animi",
                    1229643.9102)],
                    true,
                new FeatureFilter(987.2867,
                    new Extent(124.6799,
                            -150.4153,
                            -26.8823,
                            -71.1408,
                            737.6408,
                            110.5423,
                            261.3275,
                            504.4371,
                        new SpatialReference(4,
                                "magnam",
                                "maiores",
                                "et"),
                            true,
                            true),
                        [5],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2005, 11, 21, 7, 57, 43),
                            new DateTime(2006, 8, 12, 14, 30, 28)),
                        QueryUnits.Feet,
                        "Province = 'Ontario'"),
                    [new Effect("accusantium",
                        35744409.3394)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "token",
                    "consequuntur",
                    "omnis qui voluptatem excepturi",
                    4,
                    true,
                    true,
                    new { Value = "possimus" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>([new CodedValue<string>(),
                        new CodedValue<string>()],
                        "category"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(162.9002,
                    95.0701,
                    -16.1515,
                    -65.0268,
                    731.8898,
                    700.6268,
                    242.1895,
                    0.7530,
                new SpatialReference(5,
                        "id",
                        "est",
                        "sunt"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterLeft,
                    "ut",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    1552441.5174,
                    10764.5144,
                    true,
                    new Dimension(857.8162),
                new TextSymbol("blanditiis vero nulla",
                    new MapColor(166, 125, 158),
                    new MapColor(141, 195, 20),
                        new Dimension(765.0621),
                    new MapFont(new Dimension(472.1723),
                            "Courier New",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.None),
                        892.8268,
                    new MapColor(5, 128, 86),
                    new MapColor(27, 68, 133),
                        55.2757,
                    HorizontalAlignment.Center,
                        true,
                        744.2237,
                        new Dimension(427.0935),
                        true),
                    true,
                    "Street = '123 Main St.'"),
            new Label(LabelPlacement.CenterAlong,
                    "aut",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    29382237.4633,
                    40976.5234,
                    true,
                    new Dimension(21.6637),
                new TextSymbol("laudantium aliquam pariatur",
                    new MapColor(113, 75, 12),
                    new MapColor(234, 89, 233),
                        new Dimension(21.4837),
                    new MapFont(new Dimension(281.3980),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        904.4496,
                    new MapColor(131, 223, 49),
                    new MapColor(5, 243, 142),
                        30.9073,
                    HorizontalAlignment.Left,
                        true,
                        346.0490,
                        new Dimension(783.1128),
                        true),
                    true,
                    "City = 'Toronto'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("quo",
                SortOrder.Descending,
                    "aspernatur")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(196, 17, 37),
                        new MapColor(54, 37, 134)),
                        509.5372,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(357.8768,
                                162.9436),
                        new AuthoringInfoField1ClassBreakInfos(859.6644,
                                328.3244)],
                            "dolores",
                            "amet",
                            "reprehenderit"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(350.9719,
                                946.1736)],
                            "beatae",
                            "est",
                            "tenetur"),
                        ["autem"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "provident",
                        true,
                    LengthUnit.Kilometers,
                        746.1155,
                        32.9352,
                        515.8529,
                        890.9544),
                new PictureFillSymbol("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0",
                    new Dimension(578.1717),
                    new Dimension(395.0220),
                    new Dimension(610.7947),
                    new Dimension(120.9674),
                    149.8727,
                    -15.1428,
                    new Outline(new MapColor(245, 215, 118),
                        new Dimension(243.2070),
                        SimpleLineSymbolStyle.Dot,
                        Cap.Round,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(40, 137, 208),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Arrow),
                        421.8450),
                    new MapColor(241, 72, 42)),
                    "nihil",
                    new DefaultSymbol(),
                    "omnis",
                    "cumque",
                    "sit",
                    "distinctio",
                new UniqueValueRendererLegendOptions("tempore commodi ullam"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("vero",
                        new TextSymbol("consequatur consequatur quas",
                            new MapColor(96, 60, 75),
                            new MapColor(81, 53, 235),
                                new Dimension(482.9397),
                            new MapFont(new Dimension(237.3677),
                                    "Times New Roman",
                                MapFontStyle.Italic,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                689.5232,
                            new MapColor(135, 218, 13),
                            new MapColor(92, 218, 96),
                                597.7317,
                            HorizontalAlignment.Left,
                                true,
                                343.3877,
                                new Dimension(1.0021),
                                true),
                        [new UniqueValue("sequi",
                                "libero",
                                "doloribus"),
                        new UniqueValue("quia",
                                "laborum",
                                "ipsum")]),
                    new UniqueValueClass("soluta",
                        new TextSymbol("iusto blanditiis nemo",
                            new MapColor(241, 234, 136),
                            new MapColor(178, 249, 74),
                                new Dimension(608.6421),
                            new MapFont(new Dimension(969.9020),
                                    "Times New Roman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                816.6059,
                            new MapColor(86, 227, 24),
                            new MapColor(117, 218, 61),
                                916.0316,
                            HorizontalAlignment.Center,
                                true,
                                448.3558,
                                new Dimension(684.6058),
                                true),
                        [new UniqueValue("quis",
                                "sit",
                                "sit"),
                        new UniqueValue("voluptatem",
                                "eius",
                                "eius")])],
                        "inventore")],
                [new UniqueValueInfo("et",
                    new TextSymbol("maxime deleniti voluptas",
                        new MapColor(141, 57, 82),
                        new MapColor(13, 195, 63),
                            new Dimension(333.8757),
                        new MapFont(new Dimension(104.2687),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            825.6513,
                        new MapColor(252, 248, 136),
                        new MapColor(205, 233, 49),
                            697.5359,
                        HorizontalAlignment.Center,
                            true,
                            941.7609,
                            new Dimension(702.7233),
                            true),
                        "quidem")],
                    "non",
                    "qui nostrum voluptatem");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "laboriosam",
                    "fugiat",
                    "fugit");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 9, 26, 19, 42, 36),
                    new DateTime(2014, 8, 12, 14, 16, 21));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("laudantium",
                    "est",
                new TimeExtent(new DateTime(2007, 11, 4, 15, 22, 40),
                        new DateTime(2023, 2, 3, 22, 0, 44)),
                new TimeInterval(TemporalTime.Minutes,
                        649.1204),
                    [new DateTime(2022, 3, 12, 19, 27, 25),
                        new DateTime(2020, 10, 21, 9, 48, 6)],
                    "Europe/Rome",
                    "doloremque");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    209.6594);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 10, 18, 11, 24, 27),
                    new DateTime(2000, 1, 16, 5, 22, 48));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
