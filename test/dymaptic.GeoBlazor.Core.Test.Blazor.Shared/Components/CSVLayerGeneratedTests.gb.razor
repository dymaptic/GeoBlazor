@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("sunt voluptate iusto")"
                        Copyright="@("aut")"
                        Opacity="@(0.1981)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.SoftLight)"
                        DefinitionExpression="@("placeat")"
                        Delimiter="@(CSVDelimiter.Space)"
                        DisplayField="@("eos")"
                        Effect="@(new Effect("iste",
                            37589930.0457))"
                        FullExtent="@(new Extent(-159.0627,
                                -96.5505,
                                -12.8309,
                                -58.6672,
                                604.9868,
                                771.9172,
                                243.8022,
                                537.4075,
                            new SpatialReference(2,
                                    "et",
                                    "sit",
                                    "nam"),
                                true,
                                true))"
                        GeometryType="@("delectus")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("cupiditate")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("in")"
                        MaxScale="@(39531454.6837)"
                        MinScale="@(12429.2014)"
                        ObjectIdField="@("asperiores")"
                        OutFields="@(["quas",
                            "quia",
                            "aut",
                            "enim"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(725.0847)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(4,
                                "voluptatem",
                                "modi",
                                "eos"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(784.0768)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("ut")"
                            EndField="@("eum")"
                            Stops="@([new DateTime(2004, 8, 22, 9, 51, 16),
                                new DateTime(2017, 1, 25, 6, 27, 3),
                                new DateTime(2018, 6, 13, 0, 57, 53)])"
                            TimeZone="@("America/Bogota")"
                            TrackIdField="@("sit")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(105.9095)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2016, 8, 22, 11, 41, 23))"
                                End="@(new DateTime(2014, 6, 19, 20, 49, 45))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2013, 11, 3, 9, 52, 39))"
                            End="@(new DateTime(2012, 2, 11, 20, 1, 39))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.EqualInterval,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(231, 105, 169),
                                    new MapColor(148, 241, 174)),
                                    794.2399,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(137.3140,
                                            149.1650)],
                                        "dolorem",
                                        "earum",
                                        "atque"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(989.9434,
                                            276.9747)],
                                        "voluptas",
                                        "vel",
                                        "laborum"),
                                    ["ab",
                                        "sapiente"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "voluptas",
                                    true,
                                LengthUnit.Feet,
                                    101.9326,
                                    521.2105,
                                    253.4339,
                                    340.7428))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("labore numquam sed")"
                            StringContent="@("nam")"
                            OutFields="@(["ut",
                                "doloribus"])"
                            FieldInfos="@([new FieldInfo("group",
                                    "debitis",
                                    "id",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("email",
                                    "saepe",
                                    "possimus",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new RelationshipPopupContent("voluptas libero quisquam",
                                    "doloremque necessitatibus excepturi minima aut repudiandae voluptatem",
                                    3,
                                    "dolorum",
                                [new RelatedRecordsInfoFieldOrder("enim",
                                    OrderBy.Asc)],
                                    7)])"
                            ExpressionInfos="@([new ExpressionInfo("return Date();",
                                    "phone",
                                    "nemo praesentium fuga",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "id",
                                    "eos veniam possimus",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "status",
                                    "perspiciatis minus quaerat",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("ut et nesciunt",
                                    "944a830a-1108-f14f-22f2-e0e24b9b57b0",
                                    () => { Console.WriteLine("sapiente"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "status",
                                    "laboriosam"),
                            new ActionButton("labore blanditiis et",
                                    "https://picsum.photos/640/480/?image=147",
                                    "c87eef22-b38c-6664-cd54-8297fc236a81",
                                    () => { Console.WriteLine("ipsum"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "ut")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("ex")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("explicabo")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterRight)"
                            LabelExpression="@("nihil")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(1526484.8461)"
                            MinScale="@(4091.6724)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(444.6221))"
                            Symbol="@(new TextSymbol("quasi possimus enim",
                                new MapColor(181, 197, 65),
                                new MapColor(178, 181, 173),
                                    new Dimension(477.5113),
                                new MapFont(new Dimension(594.4836),
                                        "Helvetica",
                                    MapFontStyle.Normal,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    170.8460,
                                new MapColor(12, 33, 200),
                                new MapColor(51, 246, 178),
                                    864.5294,
                                HorizontalAlignment.Left,
                                    true,
                                    551.5335,
                                    new Dimension(693.7316),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Street = '123 Main St.'")">
                        </Label>
                        <Field 
                            Name="@("comment")"
                            Alias="@("hic")"
                            Description="@("distinctio architecto ex aut")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "iure" })"
                            ValueType="@(FieldValueType.PercentageOrRatio)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("dolorum",
                                31123136.0483),
                                new Effect("illo",
                                    32813292.1433),
                                new Effect("aperiam",
                                    28966345.7703)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(378.6062,
                                new Polyline([new MapPath([new MapPoint([61.2324,
                                            419.0588,
                                            675.3135,
                                            708.0769]),
                                        new MapPoint([343.7472,
                                            453.8825,
                                            368.4949]),
                                        new MapPoint([162.3322,
                                            630.6289,
                                            476.5894]),
                                        new MapPoint([95.3238,
                                            509.6738,
                                            925.2392])])],
                                    new SpatialReference(1,
                                            "minima",
                                            "qui",
                                            "beatae"),
                                        true,
                                        true),
                                    [6,
                                        2,
                                        1,
                                        3],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2014, 7, 4, 10, 46, 15),
                                        new DateTime(2007, 3, 11, 15, 38, 47)),
                                    QueryUnits.UsNauticalMiles,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([new Effect("quisquam",
                                15667744.4864),
                                new Effect("rerum",
                                    36435924.9812),
                                new Effect("rerum",
                                    27000083.6489),
                                new Effect("magnam",
                                    34155291.5821)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "doloremque et non"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(625.3212)"
                            Unit="@(ElevationUnit.UsFeet)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quia",
                    "veniam",
                    "assumenda"],
                    ["token",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("avatar");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("group",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Extent(76.2837,
                            27.9279,
                            4.6161,
                            60.7418,
                            788.4694,
                            437.9136,
                            374.1106,
                            307.2235,
                        new SpatialReference(1,
                                "omnis",
                                "quasi",
                                "iste"),
                            true,
                            true),
                    new TextSymbol("officia veniam veritatis",
                        new MapColor(8, 238, 50),
                        new MapColor(65, 183, 93),
                            new Dimension(509.0904),
                        new MapFont(new Dimension(541.9578),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            128.7588,
                        new MapColor(197, 65, 105),
                        new MapColor(241, 173, 60),
                            842.3925,
                        HorizontalAlignment.Right,
                            true,
                            614.0572,
                            new Dimension(773.7825),
                            true),
                    new PopupTemplate("amet illo quae",
                            "qui",
                            ["inventore",
                                "sed",
                                "rerum",
                                "distinctio"],
                        [new FieldInfo("group",
                                "vero",
                                "quo",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("comment",
                                "at",
                                "rerum",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYearLongTime24),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new FieldsPopupContent([new FieldInfo("email",
                                    "fugit",
                                    "commodi",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongDateLongTime),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("token",
                                    "dolorem",
                                    "id",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("password",
                                    "recusandae",
                                    "inventore",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "temporibus officiis nobis consequatur iure quaerat",
                                "enim et culpa"),
                        new AttachmentsPopupContent("et doloribus dolores",
                                "natus qui voluptas ipsa eveniet assumenda",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return Date();",
                                "category",
                                "iusto quia assumenda",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "category",
                                "omnis laudantium et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "id",
                                "sit cupiditate non",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("fuga dolorum illum",
                                "a59aae93-dd3e-1d7e-3ce6-fb086bd9784e",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "id",
                                "animi"),
                        new ActionToggle("quis autem quasi",
                                "5cf107ab-1dfc-8c47-dac0-d3af2ab0f416",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "email",
                                "et"),
                        new ActionButton("reprehenderit facilis amet",
                                "https://picsum.photos/640/480/?image=343",
                                "cffdab47-8f31-3f74-d633-18071f1a5a84",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "reprehenderit")]),
                        new AttributesDictionary(),
                        true,
                        "eum",
                        "sed",
                        new GraphicOrigin(Guid.NewGuid(),
                            "doloremque",
                            9))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([6,
                    6,
                    1,
                    4],
                    true,
                    641.3898,
                    497.4075,
                    "6.9.2.2",
                new Point(80.9207,
                        -84.7068,
                        64.8946,
                        76.0442,
                        3.7660,
                    new SpatialReference(4,
                            "placeat",
                            "distinctio",
                            "autem"),
                        true,
                        true,
                        321.0560),
                    3,
                    ["et",
                        "fuga"],
                    "magni",
                    new DateTime(2022, 5, 22, 22, 9, 41),
                    606.3951,
                    8,
                    "deserunt",
                    1),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([9,
                    1,
                    5],
                    true,
                    595.9688,
                    50.1882,
                    "3.2.9.5",
                new Point(-148.0183,
                        60.7059,
                        90.7835,
                        -70.7377,
                        2.7752,
                    new SpatialReference(6,
                            "consequatur",
                            "temporibus",
                            "a"),
                        true,
                        true,
                        116.2337),
                    5,
                    ["impedit",
                        "sed"],
                    "rerum",
                    new DateTime(2019, 8, 11, 13, 43, 1),
                    980.5392,
                    1,
                    "saepe",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([2,
                    3,
                    2,
                    3],
                    true,
                    970.8412,
                    979.5036,
                    "3.3.5.4",
                new Point(-119.3726,
                        -54.2027,
                        78.2410,
                        77.1950,
                        255.8197,
                    new SpatialReference(6,
                            "quos",
                            "incidunt",
                            "illo"),
                        true,
                        true,
                        4.9914),
                    3,
                    ["quia",
                        "veniam",
                        "inventore",
                        "itaque"],
                    "quia",
                    new DateTime(2018, 8, 19, 0, 9, 33),
                    629.3479,
                    5,
                    "placeat",
                    6),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([7,
                    7,
                    5],
                    true,
                    306.6426,
                    993.4531,
                    "4.3.3.3",
                new Extent(165.9062,
                        -16.9411,
                        77.4465,
                        -0.7538,
                        54.7392,
                        937.1700,
                        739.0141,
                        321.7517,
                    new SpatialReference(7,
                            "iusto",
                            "ab",
                            "sed"),
                        true,
                        true),
                    9,
                    ["officiis",
                        "nihil",
                        "placeat"],
                    "pariatur",
                    new DateTime(2004, 3, 16, 21, 22, 27),
                    639.8032,
                    4,
                    "perferendis",
                    1),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("voluptatum voluptas voluptatem",
                    "rerum",
                    ["dolore",
                        "error",
                        "rerum",
                        "hic"],
                [new FieldInfo("createdAt",
                        "molestiae",
                        "soluta",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongMonthDayYearShortTime),
                        true,
                        true,
                    StatisticType.Avg)],
                [new TextPopupContent("ullam quis itaque"),
                new TextPopupContent("eaque exercitationem corrupti"),
                new AttachmentsPopupContent("ut quasi expedita",
                        "ut inventore similique consectetur adipisci aperiam at",
                        AttachmentsPopupContentDisplayType.Preview),
                new RelationshipPopupContent("rerum autem est",
                        "assumenda ratione aut ullam et",
                        5,
                        "iusto",
                    [new RelatedRecordsInfoFieldOrder("dolorum",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("officia",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("aperiam",
                        OrderBy.Desc)],
                        4)],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "avatar",
                        "temporibus asperiores inventore",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "phone",
                        "quisquam eum inventore",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("molestiae aut ab",
                        "fe728601-40bd-5dfe-e3f6-d2208116b62d",
                        () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "email",
                        "error"),
                new ActionButton("veritatis quia soluta",
                        "https://picsum.photos/640/480/?image=567",
                        "70e74c44-97e7-0c11-1d81-ace75c2c3339",
                        () => { Console.WriteLine("enim"); return Task.CompletedTask; },
                        "phone",
                        true,
                        true,
                        true,
                        "omnis"),
                new ActionToggle("est repellendus corrupti",
                        "6c469003-a4b4-9e70-6c3f-0894fa561b75",
                        () => { Console.WriteLine("distinctio"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "category",
                        "natus"),
                new ActionButton("doloribus ut nostrum",
                        "https://picsum.photos/640/480/?image=200",
                        "d43c6296-106e-d086-27cf-dcdf77c7f9f5",
                        () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                        "status",
                        true,
                        true,
                        true,
                        "tempore")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                        "dolorem ut quis"),
                ElevationInfoMode.AbsoluteHeight,
                    800.4272,
                ElevationUnit.Inches);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("molestiae",
                    4186935.7021)],
                    true,
                new FeatureFilter(450.7862,
                    new Polyline([new MapPath([new MapPoint([667.7192,
                                9.0886]),
                            new MapPoint([792.0055,
                                102.8929,
                                96.3166,
                                684.0687]),
                            new MapPoint([220.1471,
                                73.1217])]),
                            new MapPath([new MapPoint([264.8444,
                                    292.0307]),
                                new MapPoint([96.4737,
                                    451.4946]),
                                new MapPoint([433.7994,
                                    251.5049,
                                    189.0924])])],
                        new SpatialReference(4,
                                "nihil",
                                "cupiditate",
                                "aut"),
                            true,
                            true),
                        [1,
                            2,
                            8,
                            8],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2011, 4, 8, 0, 56, 36),
                            new DateTime(2000, 8, 1, 18, 53, 52)),
                        QueryUnits.UsNauticalMiles,
                        "1 = 1"),
                    [new Effect("corporis",
                        12131928.4424),
                        new Effect("voluptatum",
                            20932273.6279)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "temporibus",
                    "sint aspernatur quo voluptas",
                    2,
                    true,
                    true,
                    new { Value = "et" },
                FieldValueType.None,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "status",
                    "eos",
                    "qui architecto quaerat laudantium illum sit et",
                    5,
                    true,
                    true,
                    new { Value = "maiores" },
                FieldValueType.Description,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "password",
                    "praesentium",
                    "asperiores enim fuga esse quas",
                    2,
                    true,
                    true,
                    new { Value = "fuga" },
                FieldValueType.Measurement,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "status",
                    "repellendus",
                    "quibusdam accusamus qui consequatur eum",
                    7,
                    true,
                    true,
                    new { Value = "corrupti" },
                FieldValueType.None,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(38.2143,
                    110.5324,
                    -89.7475,
                    6.7083,
                    829.6315,
                    742.5233,
                    294.1802,
                    926.3644,
                new SpatialReference(9,
                        "sit",
                        "enim",
                        "blanditiis"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterStart,
                    "ipsa",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    36696458.4600,
                    38095.3304,
                    true,
                    new Dimension(67.6405),
                new TextSymbol("reiciendis iure voluptatibus",
                    new MapColor(99, 39, 187),
                    new MapColor(190, 171, 220),
                        new Dimension(346.8819),
                    new MapFont(new Dimension(387.3879),
                            "Verdana",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        859.3598,
                    new MapColor(124, 54, 43),
                    new MapColor(38, 236, 194),
                        804.6161,
                    HorizontalAlignment.Center,
                        true,
                        527.4644,
                        new Dimension(579.3220),
                        true),
                    true,
                    "1 = 1")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("rerum",
                SortOrder.Descending,
                    "porro"),
            new OrderedLayerOrderBy("amet",
                SortOrder.Ascending,
                    "minus")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.StandardDeviation,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(81, 38, 214),
                            new MapColor(62, 180, 163))]),
                        117.4315,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(609.7814,
                                299.6606),
                        new AuthoringInfoField1ClassBreakInfos(848.0774,
                                29.2954),
                        new AuthoringInfoField1ClassBreakInfos(807.9084,
                                82.8544)],
                            "omnis",
                            "ut",
                            "est"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(689.4084,
                                886.4585),
                        new AuthoringInfoField1ClassBreakInfos(512.2412,
                                709.5435),
                        new AuthoringInfoField1ClassBreakInfos(818.1705,
                                988.2705)],
                            "nesciunt",
                            "sunt",
                            "ut"),
                        ["natus",
                            "id",
                            "corporis",
                            "esse"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "ab",
                        true,
                    LengthUnit.Centimeters,
                        993.6244,
                        811.6603,
                        614.7552,
                        664.5018),
                new PictureFillSymbol("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1",
                    new Dimension(22.0504),
                    new Dimension(590.8726),
                    new Dimension(152.6048),
                    new Dimension(866.6941),
                    48.0110,
                    -32.3713,
                    new Outline(new MapColor(191, 75, 149),
                        new Dimension(411.3835),
                        SimpleLineSymbolStyle.Dash,
                        Cap.Butt,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(235, 248, 183),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Diamond),
                        10.6353),
                    new MapColor(206, 127, 252)),
                    "quia",
                    new DefaultSymbol(),
                    "id",
                    "est",
                    "molestiae",
                    "provident",
                new UniqueValueRendererLegendOptions("excepturi natus placeat"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("excepturi",
                        new TextSymbol("dolorem alias asperiores",
                            new MapColor(165, 252, 104),
                            new MapColor(67, 245, 77),
                                new Dimension(318.0553),
                            new MapFont(new Dimension(788.9539),
                                    "Georgia",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                691.6017,
                            new MapColor(66, 40, 93),
                            new MapColor(148, 159, 107),
                                774.2072,
                            HorizontalAlignment.Center,
                                true,
                                226.4216,
                                new Dimension(260.7081),
                                true),
                        [new UniqueValue("sed",
                                "porro",
                                "delectus"),
                        new UniqueValue("quibusdam",
                                "fuga",
                                "illo"),
                        new UniqueValue("blanditiis",
                                "dolores",
                                "facilis"),
                        new UniqueValue("adipisci",
                                "cum",
                                "est")]),
                    new UniqueValueClass("ipsum",
                        new TextSymbol("quis voluptate occaecati",
                            new MapColor(107, 15, 96),
                            new MapColor(236, 137, 90),
                                new Dimension(976.3197),
                            new MapFont(new Dimension(684.6255),
                                    "Georgia",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                247.7664,
                            new MapColor(231, 212, 64),
                            new MapColor(42, 90, 86),
                                904.2180,
                            HorizontalAlignment.Center,
                                true,
                                842.4165,
                                new Dimension(954.2784),
                                true),
                        [new UniqueValue("deserunt",
                                "ut",
                                "dicta"),
                        new UniqueValue("soluta",
                                "praesentium",
                                "architecto")])],
                        "nulla"),
                new UniqueValueGroup([new UniqueValueClass("quo",
                        new TextSymbol("totam nam quo",
                            new MapColor(193, 87, 33),
                            new MapColor(105, 253, 235),
                                new Dimension(118.6483),
                            new MapFont(new Dimension(183.9233),
                                    "Arial",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.Underline),
                                666.2218,
                            new MapColor(2, 157, 127),
                            new MapColor(171, 182, 113),
                                593.5866,
                            HorizontalAlignment.Left,
                                true,
                                833.0278,
                                new Dimension(204.1001),
                                true),
                        [new UniqueValue("est",
                                "omnis",
                                "dolor")]),
                    new UniqueValueClass("minus",
                        new TextSymbol("corrupti iste quibusdam",
                            new MapColor(56, 189, 230),
                            new MapColor(163, 166, 217),
                                new Dimension(229.3750),
                            new MapFont(new Dimension(168.5456),
                                    "Garamond",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.None),
                                227.0201,
                            new MapColor(16, 210, 189),
                            new MapColor(10, 73, 126),
                                576.1177,
                            HorizontalAlignment.Right,
                                true,
                                194.3825,
                                new Dimension(143.9527),
                                true),
                        [new UniqueValue("hic",
                                "aperiam",
                                "necessitatibus"),
                        new UniqueValue("ut",
                                "ea",
                                "ullam"),
                        new UniqueValue("provident",
                                "quam",
                                "ut"),
                        new UniqueValue("esse",
                                "accusamus",
                                "consequatur")])],
                        "et")],
                [new UniqueValueInfo("et",
                    new TextSymbol("aut consequatur esse",
                        new MapColor(16, 66, 91),
                        new MapColor(92, 32, 31),
                            new Dimension(839.8824),
                        new MapFont(new Dimension(164.0080),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            814.2112,
                        new MapColor(119, 249, 23),
                        new MapColor(82, 161, 2),
                            818.0545,
                        HorizontalAlignment.Right,
                            true,
                            818.7864,
                            new Dimension(466.2561),
                            true),
                        "ipsam")],
                    "molestiae",
                    "qui inventore nam");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "qui",
                    "rerum",
                    "voluptas");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2008, 11, 21, 9, 22, 11),
                    new DateTime(2016, 11, 1, 0, 28, 51));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("sed",
                    "aut",
                new TimeExtent(new DateTime(2012, 11, 5, 16, 12, 27),
                        new DateTime(2007, 7, 27, 17, 55, 6)),
                new TimeInterval(TemporalTime.Decades,
                        713.8258),
                    [new DateTime(2015, 9, 12, 16, 20, 13),
                        new DateTime(2001, 5, 19, 20, 12, 48)],
                    "Etc/UTC",
                    "ab");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Decades,
                    417.0167);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2011, 4, 6, 10, 42, 20),
                    new DateTime(2013, 11, 24, 18, 55, 18));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
