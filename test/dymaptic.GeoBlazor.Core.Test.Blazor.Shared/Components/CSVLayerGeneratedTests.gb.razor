@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("odit fugit maxime")"
                        Copyright="@("voluptatibus")"
                        Opacity="@(0.7774)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.VividLight)"
                        DefinitionExpression="@("inventore")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("ut")"
                        Effect="@(new Effect("blanditiis",
                            14376592.5212))"
                        FullExtent="@(new Extent(-124.2038,
                                -32.8359,
                                -60.3591,
                                -49.4890,
                                7.6312,
                                814.3157,
                                654.4816,
                                141.1915,
                            new SpatialReference(3,
                                    "porro",
                                    "qui",
                                    "illum"),
                                true,
                                true))"
                        GeometryType="@("ex")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("quo")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("ex")"
                        MaxScale="@(16946760.3879)"
                        MinScale="@(38550.6609)"
                        ObjectIdField="@("veniam")"
                        OutFields="@(["ut",
                            "blanditiis"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(483.1133)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(5,
                                "omnis",
                                "quas",
                                "qui"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(127.1381)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("natus")"
                            EndField="@("qui")"
                            Stops="@([new DateTime(2008, 5, 11, 16, 19, 22),
                                new DateTime(2023, 5, 4, 20, 17, 26)])"
                            TimeZone="@("Australia/Sydney")"
                            TrackIdField="@("et")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(88.3720)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2008, 3, 6, 1, 6, 29))"
                                End="@(new DateTime(2016, 7, 3, 22, 22, 24))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2001, 10, 19, 8, 58, 19))"
                            End="@(new DateTime(2022, 6, 21, 2, 30, 24))">
                        </TimeExtent>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.StandardDeviation,
                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                    new MapColor(60, 205, 67),
                                    new MapColor(223, 61, 190)),
                                    891.3378,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(93.3350,
                                            198.7932),
                                    new AuthoringInfoField1ClassBreakInfos(240.7140,
                                            952.9654),
                                    new AuthoringInfoField1ClassBreakInfos(70.0744,
                                            57.9388),
                                    new AuthoringInfoField1ClassBreakInfos(691.3492,
                                            674.2240)],
                                        "porro",
                                        "voluptatem",
                                        "soluta"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(214.4020,
                                            540.8432),
                                    new AuthoringInfoField1ClassBreakInfos(398.9866,
                                            215.1389)],
                                        "temporibus",
                                        "voluptatem",
                                        "corrupti"),
                                    ["adipisci",
                                        "repellat"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "sit",
                                    true,
                                LengthUnit.Centimeters,
                                    194.0006,
                                    578.7761,
                                    50.9436,
                                    608.1157))">
                        </UniqueValueRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("possimus")"
                            ApiKey="@("commodi")"
                            AvgRating="@(515.0151)"
                            Categories="@(["tempore",
                                "reprehenderit",
                                "possimus"])"
                            Created="@(new DateTime(2021, 4, 22, 9, 13, 6))"
                            Culture="@("ipsam")"
                            Description="@("illum minus praesentium atque dolor")"
                            Extent="@(new Extent(124.9626,
                                    -74.7349,
                                    54.8869,
                                    -45.4330,
                                    914.0366,
                                    958.4851,
                                    725.0663,
                                    866.9742,
                                new SpatialReference(1,
                                        "quaerat",
                                        "voluptate",
                                        "cum"),
                                    true,
                                    true))"
                            GroupCategories="@(["earum",
                                "culpa"])"
                            LicenseInfo="@("dolore")"
                            Modified="@(new DateTime(2000, 6, 20, 5, 8, 19))"
                            Name="@("token")"
                            NumComments="@(693.7600)"
                            NumRatings="@(155.5059)"
                            NumViews="@(888.3496)"
                            Owner="@("Orland Zemlak")"
                            OwnerFolder="@("Felicity Luettgen")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Immediate,
                                    ["dicta",
                                        "explicabo"],
                                    "voluptatum",
                                    "mollitia",
                                    "sit",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("aut")"
                            Screenshots="@(["ut",
                                "in"])"
                            Size="@(8)"
                            Snippet="@("nulla")"
                            Tags="@(["blanditiis",
                                "rerum"])"
                            Title="@("et ex ut")"
                            TypeKeywords="@(["dicta",
                                "tempora"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("cupiditate quia iusto")"
                            StringContent="@("cumque")"
                            OutFields="@(["architecto",
                                "quod"])"
                            FieldInfos="@([new FieldInfo("title",
                                    "et",
                                    "quaerat",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("name",
                                    "repellat",
                                    "omnis",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("group",
                                    "est",
                                    "suscipit",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("id",
                                    "et",
                                    "occaecati",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new TextPopupContent("ad aut repellat"),
                            new TextPopupContent("dignissimos vero eius"),
                            new FieldsPopupContent([new FieldInfo("phone",
                                        "necessitatibus",
                                        "magni",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.ShortDateLeLongTime24),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("title",
                                        "qui",
                                        "dolorem",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortMonthYear),
                                        true,
                                        true,
                                    StatisticType.Stddev)],
                                    "qui sunt et dignissimos",
                                    "quo commodi quaerat"),
                            new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "numquam",
                                        "vitae magnam eligendi"))])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "avatar",
                                    "ullam fuga earum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "title",
                                    "et reiciendis aut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "comment",
                                    "facilis numquam eum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Name;",
                                    "phone",
                                    "et quam commodi",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("doloremque et incidunt",
                                    "https://picsum.photos/640/480/?image=403",
                                    "46fe9b1b-6b9f-36d3-6e5d-7e41140b3969",
                                    () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "id"),
                            new ActionButton("eveniet deleniti nobis",
                                    "https://picsum.photos/640/480/?image=160",
                                    "63c344cb-62cc-3ab9-6f5d-7540df147f0a",
                                    () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                                    "comment",
                                    true,
                                    true,
                                    true,
                                    "non")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("molestiae")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("odit")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveEnd)"
                            LabelExpression="@("sed")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(41507376.0352)"
                            MinScale="@(29179.1220)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(541.1451))"
                            Symbol="@(new TextSymbol("ut ea atque",
                                new MapColor(224, 205, 206),
                                new MapColor(246, 135, 24),
                                    new Dimension(203.7452),
                                new MapFont(new Dimension(702.6606),
                                        "Courier New",
                                    MapFontStyle.Italic,
                                    FontWeight.Lighter,
                                    TextDecoration.Underline),
                                    158.4589,
                                new MapColor(87, 202, 170),
                                new MapColor(114, 91, 249),
                                    670.3917,
                                HorizontalAlignment.Center,
                                    true,
                                    457.8984,
                                    new Dimension(722.3830),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Age > 21")">
                        </Label>
                        <Field 
                            Name="@("updatedAt")"
                            Alias="@("adipisci")"
                            Description="@("eveniet quo impedit labore aperiam officia")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "dolore" })"
                            ValueType="@(FieldValueType.TypeOrCategory)"
                            Domain="@(new RangeDomain("iusto",
                                    "temporibus",
                                    "avatar"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("ea",
                                24138484.7680),
                                new Effect("alias",
                                    36407969.2840),
                                new Effect("odit",
                                    41154001.8948),
                                new Effect("provident",
                                    19884580.5606)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(267.4954,
                                new Polygon([new MapPath([new MapPoint([904.3353,
                                            175.6310]),
                                        new MapPoint([107.6867,
                                            769.5128,
                                            992.2929]),
                                        new MapPoint([637.9170,
                                            832.7444])])],
                                    new SpatialReference(7,
                                            "accusamus",
                                            "reprehenderit",
                                            "quo"),
                                    new Point(-50.7299,
                                            -19.9867,
                                            -94.1963,
                                            83.9202,
                                            952.7871,
                                        new SpatialReference(1,
                                                "laudantium",
                                                "illum",
                                                "consequatur"),
                                            true,
                                            true,
                                            361.1665),
                                        true,
                                        true,
                                        true),
                                    [5,
                                        8,
                                        3,
                                        4],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2018, 5, 26, 8, 39, 5),
                                        new DateTime(2017, 10, 3, 1, 20, 43)),
                                    QueryUnits.UsNauticalMiles,
                                    "PostalCode = 'M5V 1J9'"))"
                            IncludedEffect="@([new Effect("repudiandae",
                                29655773.0377),
                                new Effect("ut",
                                    26545887.0713),
                                new Effect("recusandae",
                                    928294.5784)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "libero ducimus quae"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(491.1137)"
                            Unit="@(ElevationUnit.UsFeet)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["maxime",
                    "praesentium"],
                    ["phone",
                        "title",
                        "group",
                        "updatedAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("email");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("name",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Point(11.5289,
                            -66.9099,
                            -81.0815,
                            71.7353,
                            941.0947,
                        new SpatialReference(8,
                                "ducimus",
                                "qui",
                                "consequatur"),
                            true,
                            true,
                            811.2942),
                    new TextSymbol("deleniti quam eligendi",
                        new MapColor(9, 251, 136),
                        new MapColor(61, 35, 104),
                            new Dimension(256.7928),
                        new MapFont(new Dimension(878.2636),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            534.0761,
                        new MapColor(228, 201, 158),
                        new MapColor(56, 71, 140),
                            613.8015,
                        HorizontalAlignment.Center,
                            true,
                            828.0404,
                            new Dimension(316.8601),
                            true),
                    new PopupTemplate("sequi eaque modi",
                            "autem",
                            ["sunt",
                                "error",
                                "quo"],
                        [new FieldInfo("id",
                                "mollitia",
                                "nulla",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("updatedAt",
                                "praesentium",
                                "cumque",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDateLeLongTime24),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("phone",
                                "veritatis",
                                "eos",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongDate),
                                true,
                                true,
                            StatisticType.Min)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "commodi",
                                    "porro iusto sit")),
                        new RelationshipPopupContent("delectus deleniti alias",
                                "et omnis et ut aut",
                                5,
                                "qui",
                            [new RelatedRecordsInfoFieldOrder("distinctio",
                                OrderBy.Desc)],
                                1)],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "password",
                                "perferendis esse aut",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "password",
                                "est amet quibusdam",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "createdAt",
                                "quis voluptatibus aut",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "email",
                                "reprehenderit itaque ut",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("tempora qui ex",
                                "d4a116c6-0779-5e95-06dd-11404571f72e",
                                () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "title",
                                "voluptatem"),
                        new ActionButton("incidunt esse voluptatem",
                                "https://picsum.photos/640/480/?image=580",
                                "12c10b2d-6868-4b5c-1cdc-0309c99aa7b6",
                                () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "illum"),
                        new ActionToggle("occaecati error nobis",
                                "4dbddd27-0779-1206-24d5-2aeb26fc4ada",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "name",
                                "tempore")]),
                        new AttributesDictionary(),
                        true,
                        "ea",
                        "illum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "aliquam",
                            4))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([6,
                    4,
                    4,
                    7],
                    true,
                    953.0278,
                    324.5874,
                    "4.1.9.6",
                new Extent(-56.4283,
                        10.6535,
                        84.8824,
                        71.3274,
                        465.6517,
                        196.2646,
                        709.1376,
                        709.5780,
                    new SpatialReference(5,
                            "voluptatem",
                            "cupiditate",
                            "ut"),
                        true,
                        true),
                    8,
                    ["consequatur",
                        "alias",
                        "sit",
                        "voluptates"],
                    "voluptatem",
                    new DateTime(2014, 9, 11, 1, 48, 44),
                    302.4579,
                    7,
                    "est",
                    5),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([3,
                    2,
                    7],
                    true,
                    996.7494,
                    797.8100,
                    "8.4.7.8",
                new Extent(-96.4119,
                        -100.6369,
                        45.1033,
                        -44.7022,
                        911.5735,
                        434.0240,
                        483.6131,
                        75.2361,
                    new SpatialReference(7,
                            "ut",
                            "nobis",
                            "harum"),
                        true,
                        true),
                    7,
                    ["omnis",
                        "nihil"],
                    "commodi",
                    new DateTime(2013, 3, 14, 21, 0, 11),
                    640.5371,
                    7,
                    "error",
                    1),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([3,
                    2,
                    6,
                    3],
                    true,
                    87.5668,
                    723.1707,
                    "3.2.7.2",
                new Polygon([new MapPath([new MapPoint([601.4064,
                            591.1713]),
                        new MapPoint([963.0729,
                            713.5698])]),
                        new MapPath([new MapPoint([348.2846,
                                677.3067]),
                            new MapPoint([84.5458,
                                22.8777,
                                517.1867])]),
                        new MapPath([new MapPoint([525.5663,
                                151.5605,
                                968.3096]),
                            new MapPoint([470.0068,
                                810.6491]),
                            new MapPoint([580.3786,
                                770.2332])]),
                        new MapPath([new MapPoint([815.2254,
                                276.3430,
                                38.8263,
                                630.4025]),
                            new MapPoint([560.3095,
                                364.2315,
                                771.4572,
                                640.4094]),
                            new MapPoint([812.1473,
                                202.0997,
                                103.5966,
                                557.4042])])],
                    new SpatialReference(1,
                            "tenetur",
                            "voluptatem",
                            "qui"),
                    new Point(-158.0898,
                            -38.2988,
                            -60.1707,
                            -16.0640,
                            512.7799,
                        new SpatialReference(7,
                                "corrupti",
                                "ipsam",
                                "excepturi"),
                            true,
                            true,
                            558.4571),
                        true,
                        true,
                        true),
                    7,
                    ["est",
                        "est",
                        "necessitatibus"],
                    "inventore",
                    new DateTime(2022, 1, 26, 7, 12, 55),
                    252.7763,
                    5,
                    "voluptas",
                    5),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([9,
                    1],
                    true,
                    430.9255,
                    726.9184,
                    "9.9.5.7",
                new Extent(-32.2557,
                        157.5346,
                        44.4176,
                        52.2299,
                        880.2221,
                        459.4262,
                        635.1101,
                        45.4455,
                    new SpatialReference(1,
                            "voluptatem",
                            "quibusdam",
                            "porro"),
                        true,
                        true),
                    8,
                    ["dolor",
                        "ut",
                        "sit",
                        "et"],
                    "explicabo",
                    new DateTime(2008, 4, 7, 16, 56, 43),
                    467.8543,
                    8,
                    "autem",
                    2),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("et quaerat quo",
                    "et",
                    ["nihil",
                        "tempore",
                        "commodi",
                        "sit"],
                [new FieldInfo("name",
                        "eos",
                        "amet",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("createdAt",
                        "nisi",
                        "alias",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.ShortDateShortTime24),
                        true,
                        true,
                    StatisticType.Max)],
                [new MediaPopupContent("doloremque qui consequatur",
                        "repellat consequatur eaque earum sed et omnis",
                    [new PieChartMediaInfo("blanditiis cumque officia",
                            "iusto",
                            "et sunt perferendis",
                        new ChartMediaInfoValue(["ea",
                                "ut",
                                "nisi"],
                                "optio",
                                "doloremque",
                            [new ChartMediaInfoValueSeries("group",
                                    "vero",
                                    531.4189),
                            new ChartMediaInfoValueSeries("name",
                                    "qui",
                                    299.8983),
                            new ChartMediaInfoValueSeries("email",
                                    "hic",
                                    555.6007),
                            new ChartMediaInfoValueSeries("status",
                                    "est",
                                    229.3364)],
                            [new MapColor(97, 147, 92),
                            new MapColor(141, 166, 86),
                            new MapColor(235, 164, 100),
                            new MapColor(138, 57, 75)])),
                    new BarChartMediaInfo("sed quae labore",
                            "laboriosam",
                            "perspiciatis velit aut",
                        new ChartMediaInfoValue(["nam",
                                "qui",
                                "error"],
                                "delectus",
                                "assumenda",
                            [new ChartMediaInfoValueSeries("password",
                                    "dolorum",
                                    547.6136),
                            new ChartMediaInfoValueSeries("createdAt",
                                    "molestiae",
                                    80.0622),
                            new ChartMediaInfoValueSeries("status",
                                    "facilis",
                                    6.7234),
                            new ChartMediaInfoValueSeries("name",
                                    "distinctio",
                                    334.2624)],
                            [new MapColor(112, 22, 213),
                            new MapColor(143, 89, 114)])),
                    new BarChartMediaInfo("veniam doloremque natus",
                            "officiis",
                            "quam sapiente sit",
                        new ChartMediaInfoValue(["aut",
                                "et",
                                "ex",
                                "ad"],
                                "deserunt",
                                "voluptatem",
                            [new ChartMediaInfoValueSeries("password",
                                    "laudantium",
                                    260.1970),
                            new ChartMediaInfoValueSeries("comment",
                                    "maiores",
                                    917.9121),
                            new ChartMediaInfoValueSeries("title",
                                    "enim",
                                    817.9148)],
                            [new MapColor(86, 5, 191),
                            new MapColor(249, 93, 198),
                            new MapColor(113, 235, 14),
                            new MapColor(223, 249, 209)])),
                    new LineChartMediaInfo("quidem unde consequuntur",
                            "voluptates",
                            "optio animi rerum",
                        new ChartMediaInfoValue(["quaerat",
                                "quia"],
                                "facere",
                                "illo",
                            [new ChartMediaInfoValueSeries("token",
                                    "dolore",
                                    783.1179)],
                            [new MapColor(236, 139, 238),
                            new MapColor(150, 250, 150)]))],
                        7),
                new RelationshipPopupContent("excepturi consequuntur molestiae",
                        "est qui eaque commodi eligendi",
                        3,
                        "fuga",
                    [new RelatedRecordsInfoFieldOrder("numquam",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("veniam",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("minus",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("minima",
                        OrderBy.Desc)],
                        9),
                new TextPopupContent("iste vero labore"),
                new AttachmentsPopupContent("eligendi deserunt et",
                        "voluptatibus illum et temporibus molestiae veniam",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("return Date();",
                        "email",
                        "consequatur debitis repudiandae",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "id",
                        "est in hic",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "phone",
                        "ea dolor suscipit",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "id",
                        "eos sed rerum",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("pariatur rerum accusamus",
                        "https://picsum.photos/640/480/?image=414",
                        "df70705c-e85b-276a-a2c7-5e94d8494f58",
                        () => { Console.WriteLine("quaerat"); return Task.CompletedTask; },
                        "phone",
                        true,
                        true,
                        true,
                        "atque")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "aliquam error hic"),
                ElevationInfoMode.AbsoluteHeight,
                    75.4262,
                ElevationUnit.Kilometers);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("id",
                    31713024.9423),
                    new Effect("in",
                        18521787.7255)],
                    true,
                new FeatureFilter(911.9771,
                    new Polygon([new MapPath([new MapPoint([552.6963,
                                22.3041,
                                161.1758]),
                            new MapPoint([737.6899,
                                969.4392]),
                            new MapPoint([293.6278,
                                808.3885,
                                184.6274,
                                159.5138])]),
                            new MapPath([new MapPoint([691.8851,
                                    822.8641]),
                                new MapPoint([564.2861,
                                    969.4660,
                                    611.4589]),
                                new MapPoint([477.4934,
                                    936.5676,
                                    254.0859]),
                                new MapPoint([612.5914,
                                    136.8680,
                                    744.4322,
                                    624.7923])]),
                            new MapPath([new MapPoint([113.4466,
                                    341.0832]),
                                new MapPoint([709.8038,
                                    43.0064,
                                    862.8705,
                                    939.1008]),
                                new MapPoint([369.0029,
                                    608.2947,
                                    19.7955,
                                    142.4383])])],
                        new SpatialReference(6,
                                "minus",
                                "eligendi",
                                "distinctio"),
                        new Point(169.5509,
                                87.1570,
                                66.9207,
                                80.6553,
                                101.6337,
                            new SpatialReference(5,
                                    "exercitationem",
                                    "non",
                                    "sint"),
                                true,
                                true,
                                581.0067),
                            true,
                            true,
                            true),
                        [6,
                            9,
                            5,
                            3],
                    SpatialRelationship.Overlaps,
                    new TimeExtent(new DateTime(2016, 1, 17, 16, 42, 11),
                            new DateTime(2007, 8, 9, 1, 31, 30)),
                        QueryUnits.Meters,
                        "Name = 'John Doe'"),
                    [new Effect("provident",
                        21992916.2884),
                        new Effect("impedit",
                            46836521.7544),
                        new Effect("unde",
                            28970069.7903),
                        new Effect("veritatis",
                            27996188.0031)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "token",
                    "repellat",
                    "aut optio laboriosam eum",
                    7,
                    true,
                    true,
                    new { Value = "omnis" },
                FieldValueType.Description,
                new RangeDomain("sit",
                        "voluptatum",
                        "email")),
            new Field(default,
                    "id",
                    "nulla",
                    "reprehenderit qui unde voluptate est",
                    2,
                    true,
                    true,
                    new { Value = "voluptas" },
                FieldValueType.Coordinate,
                new InheritedDomain("phone")),
            new Field(default,
                    "createdAt",
                    "distinctio",
                    "eum nesciunt necessitatibus porro",
                    8,
                    true,
                    true,
                    new { Value = "corrupti" },
                FieldValueType.UniqueIdentifier,
                new RangeDomain("explicabo",
                        "perspiciatis",
                        "phone")),
            new Field(default,
                    "id",
                    "est",
                    "laboriosam aut omnis et accusantium",
                    8,
                    true,
                    true,
                    new { Value = "voluptatem" },
                FieldValueType.LocationOrPlaceName,
                new InheritedDomain("id"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-121.1168,
                    -66.6534,
                    -31.9739,
                    60.6996,
                    116.4068,
                    931.5322,
                    34.0020,
                    159.7737,
                new SpatialReference(1,
                        "et",
                        "reprehenderit",
                        "earum"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowStart,
                    "perferendis",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    30345301.0917,
                    319.4311,
                    true,
                    new Dimension(516.5018),
                new TextSymbol("hic quisquam omnis",
                    new MapColor(182, 224, 66),
                    new MapColor(171, 135, 58),
                        new Dimension(321.2636),
                    new MapFont(new Dimension(325.4102),
                            "Palatino",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        897.7915,
                    new MapColor(211, 243, 194),
                    new MapColor(100, 88, 147),
                        128.9483,
                    HorizontalAlignment.Center,
                        true,
                        10.0278,
                        new Dimension(62.3278),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.CenterRight,
                    "ipsum",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    10778882.6927,
                    1390.6644,
                    true,
                    new Dimension(246.9300),
                new TextSymbol("totam qui molestiae",
                    new MapColor(243, 240, 130),
                    new MapColor(125, 216, 167),
                        new Dimension(526.8741),
                    new MapFont(new Dimension(437.7401),
                            "Palatino",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        881.5415,
                    new MapColor(142, 216, 167),
                    new MapColor(133, 77, 25),
                        414.1843,
                    HorizontalAlignment.Left,
                        true,
                        588.9344,
                        new Dimension(710.1115),
                        true),
                    true,
                    "ObjectID = 1"),
            new Label(LabelPlacement.BelowLeft,
                    "vel",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    5733879.4864,
                    32489.0634,
                    true,
                    new Dimension(706.0567),
                new TextSymbol("vel labore culpa",
                    new MapColor(166, 138, 171),
                    new MapColor(220, 149, 149),
                        new Dimension(814.5017),
                    new MapFont(new Dimension(697.8364),
                            "Courier New",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        946.9054,
                    new MapColor(10, 219, 62),
                    new MapColor(216, 31, 233),
                        335.4759,
                    HorizontalAlignment.Right,
                        true,
                        353.3895,
                        new Dimension(165.0143),
                        true),
                    true,
                    "City = 'Toronto'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("assumenda",
                SortOrder.Ascending,
                    "est")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "eum",
                    "aut",
                    753.5254,
                    ["qui",
                        "sunt",
                        "et"],
                    new DateTime(2022, 10, 17, 8, 51, 23),
                    "ratione",
                    "voluptatibus voluptatem soluta eos doloremque quia cumque",
                new Extent(54.2929,
                        -37.4487,
                        25.8505,
                        -30.2497,
                        80.3922,
                        377.1032,
                        926.9345,
                        477.3304,
                    new SpatialReference(9,
                            "placeat",
                            "tenetur",
                            "deserunt"),
                        true,
                        true),
                    ["aut",
                        "esse",
                        "non",
                        "repudiandae"],
                    "quas",
                    new DateTime(2003, 10, 22, 7, 5, 55),
                    "email",
                    316.3822);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.Manual,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(193, 16, 36),
                        new MapColor(194, 181, 103)),
                        962.7489,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(884.3073,
                                207.0701),
                        new AuthoringInfoField1ClassBreakInfos(22.2259,
                                905.7238)],
                            "aut",
                            "natus",
                            "sit"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(724.8328,
                                976.6157)],
                            "animi",
                            "eum",
                            "voluptatem"),
                        ["et",
                            "non",
                            "repudiandae"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "quia",
                        true,
                    LengthUnit.Inches,
                        759.1393,
                        702.2777,
                        305.7148,
                        678.0580),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0",
                    new Dimension(185.1830),
                    new Dimension(123.5769),
                    new Dimension(64.6908),
                    new Dimension(263.2941),
                    22.4724,
                    -63.5339,
                    new Outline(new MapColor(129, 13, 245),
                        new Dimension(136.2234),
                        SimpleLineSymbolStyle.Dot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(78, 63, 19),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Square),
                        916.5115),
                    new MapColor(229, 29, 29)),
                    "magnam",
                    new DefaultSymbol(),
                    "at",
                    "porro",
                    "non",
                    "soluta",
                new UniqueValueRendererLegendOptions("enim libero amet"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("veniam",
                        new TextSymbol("illo eos et",
                            new MapColor(185, 77, 224),
                            new MapColor(142, 137, 106),
                                new Dimension(556.7983),
                            new MapFont(new Dimension(232.9531),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                598.5260,
                            new MapColor(85, 140, 75),
                            new MapColor(167, 185, 39),
                                10.4473,
                            HorizontalAlignment.Right,
                                true,
                                709.3689,
                                new Dimension(774.6167),
                                true),
                        [new UniqueValue("illo",
                                "et",
                                "iusto"),
                        new UniqueValue("animi",
                                "at",
                                "corrupti"),
                        new UniqueValue("fugiat",
                                "autem",
                                "quaerat")]),
                    new UniqueValueClass("rerum",
                        new TextSymbol("accusamus autem voluptates",
                            new MapColor(10, 62, 1),
                            new MapColor(244, 157, 86),
                                new Dimension(895.4320),
                            new MapFont(new Dimension(424.0747),
                                    "Bookman",
                                MapFontStyle.Normal,
                                FontWeight.Normal,
                                TextDecoration.None),
                                918.0370,
                            new MapColor(240, 30, 163),
                            new MapColor(199, 230, 85),
                                57.1612,
                            HorizontalAlignment.Left,
                                true,
                                340.0385,
                                new Dimension(648.1608),
                                true),
                        [new UniqueValue("consequatur",
                                "pariatur",
                                "perspiciatis"),
                        new UniqueValue("ea",
                                "quisquam",
                                "atque"),
                        new UniqueValue("illo",
                                "quia",
                                "praesentium"),
                        new UniqueValue("repellendus",
                                "praesentium",
                                "repellendus")]),
                    new UniqueValueClass("voluptatum",
                        new TextSymbol("enim illo vero",
                            new MapColor(24, 191, 231),
                            new MapColor(238, 165, 182),
                                new Dimension(865.0365),
                            new MapFont(new Dimension(101.4840),
                                    "Garamond",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                281.1469,
                            new MapColor(197, 189, 168),
                            new MapColor(97, 204, 122),
                                344.6183,
                            HorizontalAlignment.Left,
                                true,
                                63.0946,
                                new Dimension(435.7924),
                                true),
                        [new UniqueValue("qui",
                                "exercitationem",
                                "accusamus"),
                        new UniqueValue("neque",
                                "illum",
                                "et")]),
                    new UniqueValueClass("nesciunt",
                        new TextSymbol("quod officiis mollitia",
                            new MapColor(167, 114, 123),
                            new MapColor(60, 247, 208),
                                new Dimension(190.6907),
                            new MapFont(new Dimension(212.4357),
                                    "Bookman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                88.3156,
                            new MapColor(145, 10, 216),
                            new MapColor(106, 240, 183),
                                99.3273,
                            HorizontalAlignment.Right,
                                true,
                                223.3044,
                                new Dimension(846.4845),
                                true),
                        [new UniqueValue("numquam",
                                "sunt",
                                "voluptatem")])],
                        "praesentium"),
                new UniqueValueGroup([new UniqueValueClass("quos",
                        new TextSymbol("aut vel odio",
                            new MapColor(144, 16, 105),
                            new MapColor(57, 232, 50),
                                new Dimension(756.2130),
                            new MapFont(new Dimension(330.1374),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                100.1541,
                            new MapColor(109, 137, 86),
                            new MapColor(38, 70, 158),
                                324.4950,
                            HorizontalAlignment.Right,
                                true,
                                246.1482,
                                new Dimension(780.7934),
                                true),
                        [new UniqueValue("earum",
                                "animi",
                                "vel"),
                        new UniqueValue("ullam",
                                "quidem",
                                "iste"),
                        new UniqueValue("rerum",
                                "a",
                                "reiciendis")]),
                    new UniqueValueClass("voluptates",
                        new TextSymbol("accusantium hic architecto",
                            new MapColor(195, 7, 232),
                            new MapColor(36, 25, 144),
                                new Dimension(437.3176),
                            new MapFont(new Dimension(481.6332),
                                    "Times New Roman",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                303.5124,
                            new MapColor(143, 141, 116),
                            new MapColor(231, 114, 107),
                                655.1416,
                            HorizontalAlignment.Center,
                                true,
                                467.0761,
                                new Dimension(385.5521),
                                true),
                        [new UniqueValue("nam",
                                "earum",
                                "et"),
                        new UniqueValue("enim",
                                "deserunt",
                                "non"),
                        new UniqueValue("beatae",
                                "saepe",
                                "quidem"),
                        new UniqueValue("sit",
                                "accusantium",
                                "suscipit")]),
                    new UniqueValueClass("voluptatem",
                        new TextSymbol("debitis qui rerum",
                            new MapColor(153, 113, 51),
                            new MapColor(246, 68, 224),
                                new Dimension(317.4842),
                            new MapFont(new Dimension(123.9325),
                                    "Bookman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                621.3471,
                            new MapColor(49, 94, 226),
                            new MapColor(3, 196, 231),
                                447.3827,
                            HorizontalAlignment.Right,
                                true,
                                274.6053,
                                new Dimension(297.4706),
                                true),
                        [new UniqueValue("vel",
                                "aut",
                                "quod"),
                        new UniqueValue("harum",
                                "consectetur",
                                "animi"),
                        new UniqueValue("qui",
                                "ab",
                                "consequuntur"),
                        new UniqueValue("in",
                                "omnis",
                                "sit")]),
                    new UniqueValueClass("tempora",
                        new TextSymbol("quia sint sit",
                            new MapColor(121, 89, 185),
                            new MapColor(46, 224, 224),
                                new Dimension(36.2438),
                            new MapFont(new Dimension(706.5144),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                680.4234,
                            new MapColor(84, 19, 12),
                            new MapColor(24, 131, 64),
                                695.1806,
                            HorizontalAlignment.Left,
                                true,
                                357.5202,
                                new Dimension(604.1150),
                                true),
                        [new UniqueValue("itaque",
                                "maxime",
                                "recusandae"),
                        new UniqueValue("laudantium",
                                "voluptas",
                                "omnis")])],
                        "eum"),
                new UniqueValueGroup([new UniqueValueClass("et",
                        new TextSymbol("culpa consequuntur qui",
                            new MapColor(159, 236, 38),
                            new MapColor(82, 160, 156),
                                new Dimension(751.8855),
                            new MapFont(new Dimension(410.9628),
                                    "Helvetica",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                455.5510,
                            new MapColor(5, 104, 121),
                            new MapColor(217, 136, 93),
                                850.9322,
                            HorizontalAlignment.Center,
                                true,
                                247.8706,
                                new Dimension(258.5132),
                                true),
                        [new UniqueValue("excepturi",
                                "aut",
                                "qui"),
                        new UniqueValue("nam",
                                "voluptas",
                                "excepturi"),
                        new UniqueValue("corrupti",
                                "et",
                                "beatae"),
                        new UniqueValue("neque",
                                "reprehenderit",
                                "suscipit")])],
                        "voluptatem")],
                [new UniqueValueInfo("perferendis",
                    new TextSymbol("laudantium debitis nihil",
                        new MapColor(3, 27, 233),
                        new MapColor(107, 96, 37),
                            new Dimension(662.2761),
                        new MapFont(new Dimension(132.0606),
                                "Helvetica",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            673.6538,
                        new MapColor(20, 77, 11),
                        new MapColor(118, 175, 184),
                            701.1711,
                        HorizontalAlignment.Right,
                            true,
                            657.6908,
                            new Dimension(49.7580),
                            true),
                        "veritatis"),
                new UniqueValueInfo("est",
                    new TextSymbol("doloremque libero cupiditate",
                        new MapColor(155, 97, 38),
                        new MapColor(113, 181, 228),
                            new Dimension(932.6973),
                        new MapFont(new Dimension(21.6231),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            120.0909,
                        new MapColor(208, 223, 109),
                        new MapColor(237, 136, 147),
                            969.2970,
                        HorizontalAlignment.Center,
                            true,
                            784.9347,
                            new Dimension(311.6621),
                            true),
                        "mollitia"),
                new UniqueValueInfo("quos",
                    new TextSymbol("voluptatem consectetur sunt",
                        new MapColor(105, 35, 8),
                        new MapColor(212, 102, 98),
                            new Dimension(609.7880),
                        new MapFont(new Dimension(558.0240),
                                "Palatino",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.LineThrough),
                            96.5163,
                        new MapColor(197, 38, 249),
                        new MapColor(176, 220, 139),
                            333.6228,
                        HorizontalAlignment.Left,
                            true,
                            937.2996,
                            new Dimension(44.0638),
                            true),
                        "illum")],
                    "et",
                    "reiciendis sit ad");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "veniam",
                    "rerum",
                    "laudantium");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2006, 11, 14, 7, 55, 10),
                    new DateTime(2023, 1, 24, 14, 24, 1));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("consequuntur",
                    "nihil",
                new TimeExtent(new DateTime(2014, 7, 19, 13, 20, 29),
                        new DateTime(2015, 6, 12, 6, 23, 17)),
                new TimeInterval(TemporalTime.Days,
                        368.4733),
                    [new DateTime(2002, 9, 27, 3, 14, 58),
                        new DateTime(2009, 11, 2, 22, 38, 48)],
                    "Asia/Kolkata",
                    "aspernatur");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    7.0539);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 3, 23, 2, 53, 16),
                    new DateTime(2016, 6, 5, 9, 44, 28));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
