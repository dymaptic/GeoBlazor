@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("dolores est sint")"
                        Copyright="@("maiores")"
                        Opacity="@(0.2045)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.DestinationIn)"
                        DefinitionExpression="@("pariatur")"
                        Delimiter="@(CSVDelimiter.Semicolon)"
                        DisplayField="@("enim")"
                        Effect="@(new Effect("iusto",
                            42985201.5755))"
                        FullExtent="@(new Extent(-32.6857,
                                34.2291,
                                -76.6429,
                                61.0100,
                                479.8240,
                                255.7112,
                                625.7210,
                                91.7834,
                            new SpatialReference(9,
                                    "ratione",
                                    "quisquam",
                                    "molestiae"),
                                true,
                                true))"
                        GeometryType="@("repudiandae")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("sunt")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("velit")"
                        MaxScale="@(37110471.1780)"
                        MinScale="@(49507.7284)"
                        ObjectIdField="@("fuga")"
                        OutFields="@(["aliquam",
                            "qui",
                            "est",
                            "est"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(977.4393)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(7,
                                "in",
                                "est",
                                "perferendis"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Hours)"
                            Value="@(454.6478)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("ea")"
                            EndField="@("ipsum")"
                            Stops="@([new DateTime(2016, 5, 8, 14, 35, 5),
                                new DateTime(2002, 7, 27, 10, 26, 28),
                                new DateTime(2021, 6, 6, 0, 1, 56),
                                new DateTime(2002, 9, 21, 20, 38, 41)])"
                            TimeZone="@("Asia/Shanghai")"
                            TrackIdField="@("perferendis")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(771.8176)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2005, 6, 17, 15, 35, 23))"
                                End="@(new DateTime(2020, 7, 5, 17, 37, 49))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2018, 4, 23, 22, 23, 24))"
                            End="@(new DateTime(2016, 6, 23, 1, 51, 24))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.EqualInterval,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(223, 62, 233),
                                        new MapColor(242, 99, 25)),
                                    new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(129, 70, 93),
                                        new MapColor(124, 218, 239))]),
                                    828.9068,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(225.5660,
                                            316.1187),
                                    new AuthoringInfoField1ClassBreakInfos(598.6160,
                                            782.6859),
                                    new AuthoringInfoField1ClassBreakInfos(297.6224,
                                            386.8940),
                                    new AuthoringInfoField1ClassBreakInfos(214.5407,
                                            732.7529)],
                                        "incidunt",
                                        "culpa",
                                        "sapiente"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(960.3856,
                                            803.3157),
                                    new AuthoringInfoField1ClassBreakInfos(192.9895,
                                            576.4453),
                                    new AuthoringInfoField1ClassBreakInfos(256.3589,
                                            369.9466),
                                    new AuthoringInfoField1ClassBreakInfos(326.3857,
                                            698.2852)],
                                        "debitis",
                                        "cupiditate",
                                        "hic"),
                                    ["laudantium",
                                        "vero",
                                        "aut",
                                        "error"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "est",
                                    true,
                                LengthUnit.Centimeters,
                                    646.4419,
                                    751.6313,
                                    330.0193,
                                    797.3547))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("cupiditate")"
                            ApiKey="@("et")"
                            AvgRating="@(666.3244)"
                            Categories="@(["sunt",
                                "et",
                                "suscipit",
                                "est"])"
                            Created="@(new DateTime(2003, 8, 7, 10, 57, 17))"
                            Culture="@("blanditiis")"
                            Description="@("molestiae itaque ipsa omnis delectus illum sunt")"
                            Extent="@(new Extent(-47.4124,
                                    79.9586,
                                    -39.7237,
                                    83.8145,
                                    179.3409,
                                    38.6910,
                                    595.7778,
                                    933.5520,
                                new SpatialReference(6,
                                        "alias",
                                        "maiores",
                                        "quis"),
                                    true,
                                    true))"
                            GroupCategories="@(["itaque",
                                "omnis",
                                "ullam"])"
                            LicenseInfo="@("repellat")"
                            Modified="@(new DateTime(2004, 10, 4, 2, 38, 30))"
                            Name="@("status")"
                            NumComments="@(664.4428)"
                            NumRatings="@(599.6828)"
                            NumViews="@(73.4620)"
                            Owner="@("Jocelyn Feil")"
                            OwnerFolder="@("Abagail Bechtelar")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["ad",
                                        "dolores",
                                        "ut"],
                                    "consequuntur",
                                    "est",
                                    "qui",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("nemo")"
                            Screenshots="@(["deleniti",
                                "eligendi"])"
                            Size="@(5)"
                            Snippet="@("esse")"
                            Tags="@(["ad",
                                "quis"])"
                            Title="@("rerum quae nemo")"
                            TypeKeywords="@(["maxime",
                                "perferendis"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("velit nemo voluptatibus")"
                            StringContent="@("ea")"
                            OutFields="@(["facere",
                                "laboriosam",
                                "culpa"])"
                            FieldInfos="@([new FieldInfo("updatedAt",
                                    "impedit",
                                    "quisquam",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("category",
                                        "vitae",
                                        "et",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.ShortDateLongTime24),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("avatar",
                                        "dolorem",
                                        "assumenda",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongMonthYear),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("avatar",
                                        "quam",
                                        "saepe",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.LongMonthDayYear),
                                        true,
                                        true,
                                    StatisticType.Count),
                                new FieldInfo("status",
                                        "est",
                                        "qui",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.ShortDateLeLongTime24),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                    "molestiae dolore qui non vel",
                                    "quia nemo tempora"),
                            new MediaPopupContent("ut tempora nemo",
                                    "eius ipsa minima dicta officia optio",
                                [new LineChartMediaInfo("vero quo eaque",
                                        "omnis",
                                        "animi doloribus sit",
                                    new ChartMediaInfoValue(["est",
                                            "doloribus",
                                            "harum",
                                            "labore"],
                                            "est",
                                            "veritatis",
                                        [new ChartMediaInfoValueSeries("phone",
                                                "et",
                                                894.0307),
                                        new ChartMediaInfoValueSeries("name",
                                                "nam",
                                                939.2772),
                                        new ChartMediaInfoValueSeries("token",
                                                "tempore",
                                                891.5863)],
                                        [new MapColor(249, 111, 92),
                                        new MapColor(3, 1, 49),
                                        new MapColor(238, 73, 189),
                                        new MapColor(208, 84, 60)])),
                                new BarChartMediaInfo("est quos odio",
                                        "magnam",
                                        "similique molestias veniam",
                                    new ChartMediaInfoValue(["expedita",
                                            "et",
                                            "ullam"],
                                            "debitis",
                                            "quaerat",
                                        [new ChartMediaInfoValueSeries("comment",
                                                "qui",
                                                208.8019),
                                        new ChartMediaInfoValueSeries("createdAt",
                                                "amet",
                                                197.0744),
                                        new ChartMediaInfoValueSeries("id",
                                                "et",
                                                661.5987)],
                                        [new MapColor(41, 177, 245)])),
                                new PieChartMediaInfo("sint ut tenetur",
                                        "voluptas",
                                        "sunt a et",
                                    new ChartMediaInfoValue(["eligendi",
                                            "neque",
                                            "nihil",
                                            "vitae"],
                                            "eos",
                                            "quia",
                                        [new ChartMediaInfoValueSeries("avatar",
                                                "est",
                                                172.1608),
                                        new ChartMediaInfoValueSeries("avatar",
                                                "quis",
                                                672.5391)],
                                        [new MapColor(37, 254, 61),
                                        new MapColor(49, 208, 185),
                                        new MapColor(56, 38, 242),
                                        new MapColor(186, 58, 233)]))],
                                    9),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                        "voluptas",
                                        "voluptatibus ipsum mollitia"))])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "title",
                                    "aliquam repudiandae exercitationem",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "comment",
                                    "voluptas dolores quia",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "status",
                                    "cum eos qui",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "createdAt",
                                    "voluptas cum voluptatem",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("neque modi omnis",
                                    "77377827-89cd-7bde-a30d-620798f960de",
                                    () => { Console.WriteLine("temporibus"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "phone",
                                    "dolores"),
                            new ActionToggle("magni soluta sed",
                                    "6657598a-8599-e15d-08d9-d9a29d9fca08",
                                    () => { Console.WriteLine("esse"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "status",
                                    "quia")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("nulla")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("omnis")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterRight)"
                            LabelExpression="@("ipsum")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(27100772.9247)"
                            MinScale="@(548.5973)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(515.6996))"
                            Symbol="@(new TextSymbol("ad perferendis qui",
                                new MapColor(161, 71, 213),
                                new MapColor(68, 27, 206),
                                    new Dimension(125.5514),
                                new MapFont(new Dimension(363.6411),
                                        "Arial",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.Underline),
                                    769.4037,
                                new MapColor(242, 101, 44),
                                new MapColor(104, 162, 201),
                                    576.7968,
                                HorizontalAlignment.Center,
                                    true,
                                    869.5844,
                                    new Dimension(510.0835),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <Field 
                            Name="@("comment")"
                            Alias="@("maxime")"
                            Description="@("cupiditate quisquam placeat molestiae")"
                            Length="@(9)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "consectetur" })"
                            ValueType="@(FieldValueType.OrderedOrRanked)"
                            Domain="@(new InheritedDomain("comment"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("debitis",
                                15265207.0791)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(544.5700,
                                new Point(26.8699,
                                        45.9414,
                                        47.1071,
                                        12.1127,
                                        532.6516,
                                    new SpatialReference(6,
                                            "sunt",
                                            "id",
                                            "sed"),
                                        true,
                                        true,
                                        255.9202),
                                    [8,
                                        7],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2018, 10, 25, 2, 18, 1),
                                        new DateTime(2014, 3, 3, 13, 17, 18)),
                                    QueryUnits.NauticalMiles,
                                    "Country = 'Canada'"))"
                            IncludedEffect="@([new Effect("veritatis",
                                19449428.0930)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "aut et pariatur"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(620.4152)"
                            Unit="@(ElevationUnit.Unknown)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["laborum",
                    "ut",
                    "maiores"],
                    ["name",
                        "email",
                        "status"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("group");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("token",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([105.5562,
                                375.1145]),
                            new MapPoint([534.8910,
                                216.4381,
                                507.7633]),
                            new MapPoint([1.3643,
                                336.6425])]),
                            new MapPath([new MapPoint([171.0428,
                                    455.3930,
                                    438.4362]),
                                new MapPoint([997.2240,
                                    121.0394,
                                    12.4592,
                                    780.0515]),
                                new MapPoint([908.3253,
                                    697.1291])]),
                            new MapPath([new MapPoint([273.9103,
                                    642.6034,
                                    999.5653,
                                    722.2448]),
                                new MapPoint([160.1605,
                                    749.7545,
                                    72.0441,
                                    169.6718])]),
                            new MapPath([new MapPoint([789.9083,
                                    267.6652,
                                    136.7298]),
                                new MapPoint([712.5121,
                                    160.6942]),
                                new MapPoint([78.9105,
                                    762.7689,
                                    100.5244]),
                                new MapPoint([253.0388,
                                    810.7804,
                                    309.8819,
                                    682.5776])])],
                        new SpatialReference(3,
                                "ullam",
                                "ipsam",
                                "voluptatem"),
                        new Point(25.8737,
                                -77.9684,
                                63.4227,
                                -43.0908,
                                125.8620,
                            new SpatialReference(8,
                                    "voluptatem",
                                    "et",
                                    "dolor"),
                                true,
                                true,
                                982.5478),
                            true,
                            true,
                            true),
                    new TextSymbol("placeat earum repellendus",
                        new MapColor(108, 245, 134),
                        new MapColor(151, 137, 207),
                            new Dimension(920.6976),
                        new MapFont(new Dimension(787.6076),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            265.1965,
                        new MapColor(15, 36, 22),
                        new MapColor(163, 219, 141),
                            798.9218,
                        HorizontalAlignment.Right,
                            true,
                            953.1835,
                            new Dimension(14.0892),
                            true),
                    new PopupTemplate("repudiandae voluptas possimus",
                            "corrupti",
                            ["eum",
                                "in"],
                        [new FieldInfo("password",
                                "eum",
                                "velit",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.ShortDateLongTime),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("id",
                                "sed",
                                "fugit",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Min)],
                        [new TextPopupContent("ut omnis quasi")],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "title",
                                "harum occaecati deleniti",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "updatedAt",
                                "qui impedit quos",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("doloribus minus qui",
                                "https://picsum.photos/640/480/?image=240",
                                "a00e885e-265f-ecf2-6f11-e5da27eeafa5",
                                () => { Console.WriteLine("expedita"); return Task.CompletedTask; },
                                "status",
                                true,
                                true,
                                true,
                                "quos"),
                        new ActionButton("rerum quia facilis",
                                "https://picsum.photos/640/480/?image=846",
                                "ba0a8a3c-d1de-e2a3-184d-20602b215a9b",
                                () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "neque"),
                        new ActionToggle("aut corporis quo",
                                "e488ee87-fd31-1d3f-6858-0229c2bfb7f6",
                                () => { Console.WriteLine("fugit"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "name",
                                "blanditiis")]),
                        new AttributesDictionary(),
                        true,
                        "architecto",
                        "accusamus",
                        new GraphicOrigin(Guid.NewGuid(),
                            "quis",
                            3))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([8,
                    2],
                    true,
                    207.0917,
                    378.6522,
                    "6.8.8.0",
                new Extent(134.1218,
                        -129.9763,
                        45.3544,
                        -62.2127,
                        40.0705,
                        407.4780,
                        695.6677,
                        112.4464,
                    new SpatialReference(4,
                            "placeat",
                            "est",
                            "delectus"),
                        true,
                        true),
                    3,
                    ["et",
                        "sed",
                        "earum",
                        "labore"],
                    "dolores",
                    new DateTime(2017, 5, 1, 1, 42, 39),
                    715.7824,
                    9,
                    "voluptas",
                    3),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([5,
                    6,
                    6,
                    3],
                    true,
                    811.0783,
                    174.8111,
                    "0.0.6.4",
                new Point(-113.0808,
                        60.9885,
                        45.6180,
                        -30.5151,
                        37.1856,
                    new SpatialReference(1,
                            "corrupti",
                            "architecto",
                            "non"),
                        true,
                        true,
                        78.5161),
                    6,
                    ["assumenda",
                        "magnam"],
                    "commodi",
                    new DateTime(2017, 8, 19, 8, 3, 43),
                    255.9356,
                    8,
                    "aut",
                    1),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([7,
                    5,
                    5],
                    true,
                    733.4576,
                    323.4901,
                    "3.9.2.2",
                new Polygon([new MapPath([new MapPoint([474.7108,
                            574.7503,
                            21.2179,
                            172.4221]),
                        new MapPoint([753.7948,
                            489.4660])]),
                        new MapPath([new MapPoint([236.9802,
                                479.6697,
                                104.1340]),
                            new MapPoint([575.8706,
                                565.9054,
                                73.8809]),
                            new MapPoint([926.6409,
                                605.5889,
                                168.9597]),
                            new MapPoint([895.2372,
                                733.0222,
                                838.9088,
                                903.9973])]),
                        new MapPath([new MapPoint([89.1573,
                                444.7126]),
                            new MapPoint([942.0697,
                                893.9052]),
                            new MapPoint([684.9319,
                                144.3618]),
                            new MapPoint([862.9846,
                                40.2898,
                                637.0369])]),
                        new MapPath([new MapPoint([786.6400,
                                894.6679,
                                553.2735]),
                            new MapPoint([950.6232,
                                183.6133,
                                932.8382]),
                            new MapPoint([78.1026,
                                598.1882,
                                231.1256,
                                414.6372]),
                            new MapPoint([827.2120,
                                594.2482])])],
                    new SpatialReference(9,
                            "vel",
                            "cupiditate",
                            "qui"),
                    new Point(151.8515,
                            53.0419,
                            118.2261,
                            9.7022,
                            970.1992,
                        new SpatialReference(2,
                                "et",
                                "quaerat",
                                "est"),
                            true,
                            true,
                            331.2431),
                        true,
                        true,
                        true),
                    7,
                    ["quisquam",
                        "commodi"],
                    "earum",
                    new DateTime(2018, 6, 8, 11, 36, 19),
                    83.0529,
                    9,
                    "tenetur",
                    6),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([7,
                    7,
                    6],
                    true,
                    943.0206,
                    328.3010,
                    "4.6.9.4",
                new Polygon([new MapPath([new MapPoint([876.2916,
                            764.8672,
                            422.6266]),
                        new MapPoint([832.6365,
                            813.3311]),
                        new MapPoint([628.9172,
                            313.3295,
                            309.4382])]),
                        new MapPath([new MapPoint([905.0496,
                                552.9179]),
                            new MapPoint([83.1682,
                                199.0884,
                                283.2791]),
                            new MapPoint([956.0472,
                                355.6611]),
                            new MapPoint([594.8829,
                                161.3128,
                                385.4148,
                                405.2839])]),
                        new MapPath([new MapPoint([994.8637,
                                145.7463,
                                558.6018]),
                            new MapPoint([95.0047,
                                179.5905])]),
                        new MapPath([new MapPoint([623.4353,
                                59.5728,
                                494.4627,
                                772.7743]),
                            new MapPoint([815.8549,
                                729.8883]),
                            new MapPoint([600.5767,
                                560.5507,
                                936.7780]),
                            new MapPoint([520.2197,
                                468.4089])])],
                    new SpatialReference(9,
                            "totam",
                            "quia",
                            "dolorum"),
                    new Point(146.1994,
                            -65.4846,
                            47.4102,
                            -29.8153,
                            949.4362,
                        new SpatialReference(4,
                                "illo",
                                "quos",
                                "explicabo"),
                            true,
                            true,
                            732.3545),
                        true,
                        true,
                        true),
                    4,
                    ["iusto",
                        "voluptatem"],
                    "similique",
                    new DateTime(2017, 5, 19, 5, 29, 19),
                    849.4193,
                    9,
                    "aut",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Hue;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("dolorum quisquam velit",
                    "et",
                    ["aut",
                        "illum"],
                [new FieldInfo("comment",
                        "hic",
                        "eaque",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.ShortDateLeLongTime24),
                        true,
                        true,
                    StatisticType.Min)],
                [new RelationshipPopupContent("in quidem placeat",
                        "laborum ut ad odit temporibus",
                        2,
                        "corrupti",
                    [new RelatedRecordsInfoFieldOrder("quisquam",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("illo",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("commodi",
                        OrderBy.Desc)],
                        7)],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "category",
                        "nostrum id qui",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "title",
                        "hic quia porro",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "id",
                        "aut reprehenderit nam",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("perferendis et voluptatem",
                        "20fc8d17-86eb-f98e-23b9-2a938b6e15a0",
                        () => { Console.WriteLine("molestias"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "doloremque"),
                new ActionButton("corporis corporis molestias",
                        "https://picsum.photos/640/480/?image=538",
                        "cbdeeea6-5d4b-f185-61ab-2661f232b116",
                        () => { Console.WriteLine("dignissimos"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "nulla"),
                new ActionButton("nisi alias sit",
                        "https://picsum.photos/640/480/?image=452",
                        "126da80f-ddb0-5ff4-1ff4-473bbfd16220",
                        () => { Console.WriteLine("possimus"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "voluptate")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "nihil vel dolor"),
                ElevationInfoMode.AbsoluteHeight,
                    293.0226,
                ElevationUnit.DecimalDegrees);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("aliquam",
                    47996898.8031),
                    new Effect("omnis",
                        2063355.2509)],
                    true,
                new FeatureFilter(175.5841,
                    new Polyline([new MapPath([new MapPoint([110.5528,
                                225.6845,
                                989.7970,
                                606.9406]),
                            new MapPoint([83.2941,
                                524.1173,
                                370.3573,
                                858.4405])])],
                        new SpatialReference(9,
                                "delectus",
                                "minima",
                                "qui"),
                            true,
                            true),
                        [9,
                            8],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2010, 11, 20, 14, 22, 23),
                            new DateTime(2003, 7, 7, 7, 16, 9)),
                        QueryUnits.Meters,
                        "Phone = '555-555-5555'"),
                    [new Effect("omnis",
                        12627494.1834),
                        new Effect("qui",
                            1431864.7167),
                        new Effect("perspiciatis",
                            42830930.5050)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "avatar",
                    "dolores",
                    "facilis aut nam animi temporibus",
                    5,
                    true,
                    true,
                    new { Value = "beatae" },
                FieldValueType.LocationOrPlaceName,
                new InheritedDomain("id")),
            new Field(default,
                    "createdAt",
                    "esse",
                    "consequatur sunt est voluptatem",
                    5,
                    true,
                    true,
                    new { Value = "et" },
                FieldValueType.NameOrTitle,
                new RangeDomain("quis",
                        "voluptatem",
                        "password"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(69.3793,
                    -21.7906,
                    -4.3351,
                    62.4747,
                    731.4048,
                    413.0817,
                    531.7181,
                    931.7222,
                new SpatialReference(2,
                        "sit",
                        "eos",
                        "aut"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowBefore,
                    "officiis",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    29634675.7337,
                    25212.2335,
                    true,
                    new Dimension(270.8556),
                new TextSymbol("dolorem facere aut",
                    new MapColor(82, 104, 104),
                    new MapColor(203, 140, 42),
                        new Dimension(931.9411),
                    new MapFont(new Dimension(13.0904),
                            "Arial",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        735.5848,
                    new MapColor(178, 235, 15),
                    new MapColor(66, 189, 42),
                        463.9760,
                    HorizontalAlignment.Center,
                        true,
                        849.4657,
                        new Dimension(732.7187),
                        true),
                    true,
                    "ObjectID = 1"),
            new Label(LabelPlacement.BelowStart,
                    "omnis",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    10155383.4809,
                    49333.8370,
                    true,
                    new Dimension(465.1090),
                new TextSymbol("consequatur est sit",
                    new MapColor(73, 12, 3),
                    new MapColor(109, 52, 69),
                        new Dimension(38.9977),
                    new MapFont(new Dimension(289.3546),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        490.1581,
                    new MapColor(220, 211, 107),
                    new MapColor(164, 76, 244),
                        980.5872,
                    HorizontalAlignment.Center,
                        true,
                        648.3072,
                        new Dimension(979.4774),
                        true),
                    true,
                    "Street = '123 Main St.'"),
            new Label(LabelPlacement.AboveEnd,
                    "eius",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    12687057.6902,
                    41844.9203,
                    true,
                    new Dimension(430.7319),
                new TextSymbol("iste est ipsam",
                    new MapColor(195, 109, 57),
                    new MapColor(35, 99, 158),
                        new Dimension(350.1261),
                    new MapFont(new Dimension(832.1719),
                            "Times New Roman",
                        MapFontStyle.Oblique,
                        FontWeight.Normal,
                        TextDecoration.None),
                        60.7961,
                    new MapColor(104, 166, 114),
                    new MapColor(222, 13, 40),
                        590.8493,
                    HorizontalAlignment.Center,
                        true,
                        855.2486,
                        new Dimension(286.0695),
                        true),
                    true,
                    "ObjectID = 1"),
            new Label(LabelPlacement.BelowCenter,
                    "voluptas",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    13047293.5493,
                    4648.4800,
                    true,
                    new Dimension(644.6059),
                new TextSymbol("deserunt debitis corporis",
                    new MapColor(41, 54, 99),
                    new MapColor(241, 150, 111),
                        new Dimension(403.4483),
                    new MapFont(new Dimension(744.8840),
                            "Arial",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        2.8035,
                    new MapColor(133, 25, 239),
                    new MapColor(236, 167, 148),
                        477.6585,
                    HorizontalAlignment.Left,
                        true,
                        911.2865,
                        new Dimension(84.1704),
                        true),
                    true,
                    "Name = 'John Doe'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("veritatis",
                SortOrder.Descending,
                    "iure"),
            new OrderedLayerOrderBy("nisi",
                SortOrder.Ascending,
                    "magni"),
            new OrderedLayerOrderBy("provident",
                SortOrder.Ascending,
                    "laboriosam"),
            new OrderedLayerOrderBy("neque",
                SortOrder.Ascending,
                    "cupiditate")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "voluptates",
                    "error",
                    59.2389,
                    ["fugiat",
                        "molestiae",
                        "minima"],
                    new DateTime(2011, 5, 21, 11, 15, 27),
                    "dolores",
                    "sed ullam autem quo eos",
                new Extent(-60.6142,
                        -42.2725,
                        48.4878,
                        79.8725,
                        274.5490,
                        741.3865,
                        921.0695,
                        472.2493,
                    new SpatialReference(4,
                            "reiciendis",
                            "fuga",
                            "dolores"),
                        true,
                        true),
                    ["aut",
                        "quod"],
                    "eum",
                    new DateTime(2013, 3, 14, 14, 46, 13),
                    "createdAt",
                    242.4014);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("est est repudiandae",
                    new MapColor(120, 67, 205),
                    new MapColor(201, 209, 83),
                        new Dimension(284.9187),
                    new MapFont(new Dimension(442.7718),
                            "Garamond",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        9.0903,
                    new MapColor(86, 157, 104),
                    new MapColor(141, 106, 136),
                        491.3418,
                    HorizontalAlignment.Center,
                        true,
                        313.5608,
                        new Dimension(219.7305),
                        true),
                    "harum",
                [new RotationVariable("provident",
                    Axis.Roll,
                    RotationType.Arithmetic,
                    new VisualVariableLegendOptions(true,
                            "fugit hic iste"),
                        "et",
                        "cumque culpa libero")],
                new AuthoringInfo(ClassificationMethod.Quantile,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(6, 48, 212),
                        new MapColor(48, 152, 216)),
                        516.4639,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(682.1814,
                                991.1337),
                        new AuthoringInfoField1ClassBreakInfos(410.4415,
                                388.0776)],
                            "fuga",
                            "dicta",
                            "porro"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(339.5560,
                                786.8123)],
                            "ut",
                            "rerum",
                            "dignissimos"),
                        ["qui",
                            "omnis",
                            "nulla",
                            "maiores"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "est",
                        true,
                    LengthUnit.Yards,
                        920.7132,
                        669.4046,
                        41.0582,
                        976.8480));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "aut",
                    "tempora",
                    "occaecati");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2005, 4, 19, 22, 8, 1),
                    new DateTime(2008, 10, 18, 18, 46, 54));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quaerat",
                    "blanditiis",
                new TimeExtent(new DateTime(2016, 2, 24, 13, 47, 0),
                        new DateTime(2007, 10, 20, 0, 49, 53)),
                new TimeInterval(TemporalTime.Days,
                        541.1424),
                    [new DateTime(2011, 8, 23, 4, 12, 34),
                        new DateTime(2004, 8, 8, 3, 27, 33),
                        new DateTime(2021, 3, 9, 4, 20, 42),
                        new DateTime(2020, 3, 19, 20, 23, 45)],
                    "Pacific/Auckland",
                    "quos");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    97.6637);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 8, 21, 9, 27, 23),
                    new DateTime(2023, 6, 14, 2, 34, 17));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
