@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("vel voluptatem voluptatem")"
                        Copyright="@("unde")"
                        Opacity="@(0.8940)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.DestinationOut)"
                        DefinitionExpression="@("atque")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("voluptas")"
                        Effect="@(new Effect("aliquam",
                            35196257.0670))"
                        FullExtent="@(new Extent(-38.8064,
                                -54.7713,
                                -16.9803,
                                -85.7781,
                                181.4592,
                                242.5468,
                                580.9690,
                                906.0130,
                            new SpatialReference(9,
                                    "qui",
                                    "ipsum",
                                    "et"),
                                true,
                                true))"
                        GeometryType="@("laboriosam")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("est")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("velit")"
                        MaxScale="@(13899761.3230)"
                        MinScale="@(18287.0179)"
                        ObjectIdField="@("eaque")"
                        OutFields="@(["provident",
                            "eos",
                            "itaque"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(359.4328)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(5,
                                "minima",
                                "quos",
                                "et"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(940.8631)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("vitae")"
                            EndField="@("qui")"
                            Stops="@([new DateTime(2015, 3, 21, 2, 45, 13),
                                new DateTime(2018, 11, 10, 22, 50, 7),
                                new DateTime(2001, 9, 7, 8, 12, 32),
                                new DateTime(2010, 11, 26, 12, 40, 33)])"
                            TimeZone="@("America/Guatemala")"
                            TrackIdField="@("aut")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(228.4956)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2011, 3, 23, 12, 2, 8))"
                                End="@(new DateTime(2010, 6, 12, 15, 39, 17))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2003, 8, 1, 7, 43, 9))"
                            End="@(new DateTime(2022, 9, 8, 22, 24, 25))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(77, 103, 227),
                                        new MapColor(97, 101, 47)),
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(43, 125, 122),
                                        new MapColor(81, 87, 73))]),
                                    610.2494,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(381.8861,
                                            17.8777),
                                    new AuthoringInfoField1ClassBreakInfos(383.6561,
                                            334.7437)],
                                        "qui",
                                        "consequuntur",
                                        "ullam"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(825.7510,
                                            326.4952)],
                                        "assumenda",
                                        "cumque",
                                        "et"),
                                    ["amet",
                                        "culpa"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "iure",
                                    true,
                                LengthUnit.UsFeet,
                                    818.1969,
                                    60.4918,
                                    128.3061,
                                    348.8482))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("quo")"
                            ApiKey="@("eum")"
                            AvgRating="@(794.0623)"
                            Categories="@(["eum",
                                "fuga",
                                "cum"])"
                            Created="@(new DateTime(2018, 9, 1, 19, 42, 8))"
                            Culture="@("necessitatibus")"
                            Description="@("aliquam reprehenderit rerum animi fugiat")"
                            Extent="@(new Extent(143.3275,
                                    86.0300,
                                    53.2008,
                                    -35.5132,
                                    868.5882,
                                    172.8989,
                                    300.3608,
                                    275.6682,
                                new SpatialReference(4,
                                        "atque",
                                        "nisi",
                                        "distinctio"),
                                    true,
                                    true))"
                            GroupCategories="@(["fuga",
                                "est"])"
                            LicenseInfo="@("est")"
                            Modified="@(new DateTime(2017, 2, 14, 1, 35, 0))"
                            Name="@("title")"
                            NumComments="@(881.8171)"
                            NumRatings="@(298.4209)"
                            NumViews="@(978.5618)"
                            Owner="@("Alexandria Parisian")"
                            OwnerFolder="@("Patsy Haley")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["nihil",
                                        "ea",
                                        "libero"],
                                    "sit",
                                    "inventore",
                                    "harum",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("fugit")"
                            Screenshots="@(["dicta",
                                "rerum",
                                "ut",
                                "qui"])"
                            Size="@(4)"
                            Snippet="@("voluptates")"
                            Tags="@(["a",
                                "commodi",
                                "qui"])"
                            Title="@("est similique iusto")"
                            TypeKeywords="@(["qui",
                                "non",
                                "error",
                                "consequatur"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("et vero nulla")"
                            StringContent="@("quod")"
                            OutFields="@(["delectus",
                                "cupiditate",
                                "totam"])"
                            FieldInfos="@([new FieldInfo("avatar",
                                    "aperiam",
                                    "dolor",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("avatar",
                                    "et",
                                    "autem",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("id",
                                    "ab",
                                    "nam",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Stddev)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                        "ut",
                                        "rerum quia exercitationem")),
                            new RelationshipPopupContent("dolores est sit",
                                    "quas non facilis unde",
                                    9,
                                    "omnis",
                                [new RelatedRecordsInfoFieldOrder("architecto",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("molestiae",
                                    OrderBy.Asc)],
                                    2)])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "group",
                                    "officiis et voluptas",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "id",
                                    "sed voluptatem autem",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("eveniet error autem",
                                    "474d66b6-671d-81f2-7b8a-4de6ea6d89f5",
                                    () => { Console.WriteLine("atque"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "avatar",
                                    "vel"),
                            new ActionButton("nisi cumque fuga",
                                    "https://picsum.photos/640/480/?image=855",
                                    "a748d2a7-cf6b-336a-d8f3-4c5755bc886e",
                                    () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "ex")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("quisquam")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("quaerat")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowCenter)"
                            LabelExpression="@("nam")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(6590517.8154)"
                            MinScale="@(2927.7042)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(396.4764))"
                            Symbol="@(new TextSymbol("maiores architecto omnis",
                                new MapColor(209, 56, 250),
                                new MapColor(0, 29, 105),
                                    new Dimension(133.2798),
                                new MapFont(new Dimension(971.3918),
                                        "Arial",
                                    MapFontStyle.Italic,
                                    FontWeight.Normal,
                                    TextDecoration.LineThrough),
                                    527.5328,
                                new MapColor(39, 214, 26),
                                new MapColor(160, 99, 210),
                                    541.0487,
                                HorizontalAlignment.Right,
                                    true,
                                    785.8200,
                                    new Dimension(120.5487),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Phone = '555-555-5555'")">
                        </Label>
                        <Field 
                            Name="@("name")"
                            Alias="@("at")"
                            Description="@("harum quis quia autem possimus")"
                            Length="@(7)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "provident" })"
                            ValueType="@(FieldValueType.DateAndTime)"
                            Domain="@(new InheritedDomain("id"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("et",
                                18129229.9534),
                                new Effect("magni",
                                    48177959.6628),
                                new Effect("in",
                                    47103323.4167),
                                new Effect("eum",
                                    4673435.0172)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(492.7166,
                                new Polyline([new MapPath([new MapPoint([982.1102,
                                            406.2861]),
                                        new MapPoint([605.4320,
                                            385.3221])]),
                                        new MapPath([new MapPoint([886.0810,
                                                161.4273]),
                                            new MapPoint([581.8785,
                                                527.2006,
                                                445.5963,
                                                889.7658]),
                                            new MapPoint([187.9933,
                                                721.3182])]),
                                        new MapPath([new MapPoint([417.1005,
                                                46.9421,
                                                630.8789,
                                                225.3498]),
                                            new MapPoint([670.6835,
                                                622.2006,
                                                635.0945,
                                                305.6283])]),
                                        new MapPath([new MapPoint([728.9767,
                                                766.8000,
                                                80.8266]),
                                            new MapPoint([262.4696,
                                                31.3973,
                                                409.8000,
                                                693.4579]),
                                            new MapPoint([82.6325,
                                                419.2474,
                                                807.8805])])],
                                    new SpatialReference(2,
                                            "ea",
                                            "laborum",
                                            "provident"),
                                        true,
                                        true),
                                    [9,
                                        5,
                                        4,
                                        8],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2016, 9, 12, 13, 21, 55),
                                        new DateTime(2001, 4, 8, 7, 35, 21)),
                                    QueryUnits.Feet,
                                    "Age > 21"))"
                            IncludedEffect="@([new Effect("rem",
                                41810057.5828),
                                new Effect("qui",
                                    48617136.9339),
                                new Effect("aperiam",
                                    26271839.8991)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "voluptatibus eaque et"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(964.2789)"
                            Unit="@(ElevationUnit.Millimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["voluptatum",
                    "distinctio"],
                    ["title",
                        "password",
                        "name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("email");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("phone",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Extent(115.3743,
                            143.1405,
                            42.7295,
                            32.9732,
                            346.2342,
                            822.2889,
                            876.2919,
                            408.9213,
                        new SpatialReference(6,
                                "libero",
                                "eveniet",
                                "consequatur"),
                            true,
                            true),
                    new TextSymbol("debitis numquam iure",
                        new MapColor(76, 224, 106),
                        new MapColor(249, 83, 183),
                            new Dimension(671.4228),
                        new MapFont(new Dimension(264.6136),
                                "Garamond",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            686.8876,
                        new MapColor(13, 167, 8),
                        new MapColor(213, 144, 235),
                            51.5556,
                        HorizontalAlignment.Left,
                            true,
                            667.2912,
                            new Dimension(795.5531),
                            true),
                    new PopupTemplate("similique pariatur nisi",
                            "temporibus",
                            ["perferendis",
                                "accusamus",
                                "distinctio"],
                        [new FieldInfo("name",
                                "non",
                                "aut",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.LongDate),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("title",
                                "qui",
                                "aut",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new AttachmentsPopupContent("autem natus qui",
                                "minus sit consectetur numquam",
                                AttachmentsPopupContentDisplayType.Auto),
                        new MediaPopupContent("non quibusdam aspernatur",
                                "perferendis neque voluptas maiores odit ut vero",
                            [new LineChartMediaInfo("nemo deserunt vel",
                                    "doloremque",
                                    "labore dolor repellendus",
                                new ChartMediaInfoValue(["suscipit",
                                        "laudantium",
                                        "molestias"],
                                        "delectus",
                                        "autem",
                                    [new ChartMediaInfoValueSeries("updatedAt",
                                            "quod",
                                            731.3375),
                                    new ChartMediaInfoValueSeries("avatar",
                                            "aut",
                                            506.1351),
                                    new ChartMediaInfoValueSeries("email",
                                            "quod",
                                            544.1687),
                                    new ChartMediaInfoValueSeries("token",
                                            "vel",
                                            666.5696)],
                                    [new MapColor(177, 57, 132),
                                    new MapColor(72, 67, 230),
                                    new MapColor(42, 91, 194)])),
                            new ColumnChartMediaInfo("laudantium sit saepe",
                                    "necessitatibus",
                                    "minima eius ut",
                                new ChartMediaInfoValue(["qui",
                                        "voluptas"],
                                        "deserunt",
                                        "perferendis",
                                    [new ChartMediaInfoValueSeries("name",
                                            "blanditiis",
                                            475.3769)],
                                    [new MapColor(144, 70, 44)])),
                            new LineChartMediaInfo("et ut numquam",
                                    "minima",
                                    "hic omnis sint",
                                new ChartMediaInfoValue(["laborum",
                                        "cum",
                                        "dolorem"],
                                        "omnis",
                                        "doloribus",
                                    [new ChartMediaInfoValueSeries("token",
                                            "est",
                                            951.9307),
                                    new ChartMediaInfoValueSeries("category",
                                            "expedita",
                                            425.5994),
                                    new ChartMediaInfoValueSeries("updatedAt",
                                            "esse",
                                            728.6656),
                                    new ChartMediaInfoValueSeries("group",
                                            "quaerat",
                                            374.6985)],
                                    [new MapColor(208, 250, 201),
                                    new MapColor(239, 80, 149),
                                    new MapColor(5, 189, 150)]))],
                                1)],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "phone",
                                "blanditiis qui et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "name",
                                "aut ducimus est",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "password",
                                "rerum quo delectus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("modi nulla et",
                                "https://picsum.photos/640/480/?image=215",
                                "298687fa-f6f8-9140-8d62-0ee92f0f24b7",
                                () => { Console.WriteLine("unde"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "doloremque"),
                        new ActionButton("est magnam laborum",
                                "https://picsum.photos/640/480/?image=230",
                                "93e4b573-e244-4e0d-8a2a-0bf3aead70bb",
                                () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "facilis"),
                        new ActionToggle("omnis molestiae suscipit",
                                "621d6967-9b7e-51d5-bcde-e66744066b11",
                                () => { Console.WriteLine("beatae"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "title",
                                "culpa")]),
                        new AttributesDictionary(),
                        true,
                        "est",
                        "aut",
                        new GraphicOrigin(Guid.NewGuid(),
                            "mollitia",
                            1))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([6,
                    6,
                    1,
                    1],
                    true,
                    135.3323,
                    706.5304,
                    "0.9.0.4",
                new Extent(-172.3392,
                        146.5585,
                        66.6097,
                        49.9851,
                        387.8735,
                        460.4273,
                        95.3805,
                        77.7028,
                    new SpatialReference(3,
                            "hic",
                            "eos",
                            "aut"),
                        true,
                        true),
                    8,
                    ["et",
                        "voluptatem",
                        "doloremque",
                        "mollitia"],
                    "quibusdam",
                    new DateTime(2012, 9, 21, 15, 0, 51),
                    832.7193,
                    6,
                    "minima",
                    5),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([1,
                    5,
                    7],
                    true,
                    879.3529,
                    965.7690,
                    "7.3.4.1",
                new Polyline([new MapPath([new MapPoint([337.5190,
                            302.5118,
                            917.3727,
                            70.5647]),
                        new MapPoint([445.2134,
                            398.7123]),
                        new MapPoint([589.0391,
                            93.1024,
                            642.4995,
                            178.2400])]),
                        new MapPath([new MapPoint([32.7965,
                                170.3935,
                                959.3285,
                                369.9349]),
                            new MapPoint([64.9865,
                                276.6926]),
                            new MapPoint([681.7291,
                                225.0432])])],
                    new SpatialReference(4,
                            "aut",
                            "omnis",
                            "tenetur"),
                        true,
                        true),
                    6,
                    ["fugit",
                        "dolorem"],
                    "error",
                    new DateTime(2013, 2, 18, 8, 39, 13),
                    495.6260,
                    5,
                    "doloribus",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([1,
                    9,
                    3,
                    1],
                    true,
                    20.6815,
                    798.3402,
                    "7.5.1.6",
                new Point(120.0164,
                        47.9874,
                        -143.0650,
                        -38.7506,
                        373.4757,
                    new SpatialReference(7,
                            "consequuntur",
                            "sapiente",
                            "magni"),
                        true,
                        true,
                        295.7455),
                    2,
                    ["dolorem",
                        "saepe",
                        "optio",
                        "quia"],
                    "error",
                    new DateTime(2014, 2, 16, 16, 50, 29),
                    301.3191,
                    7,
                    "aut",
                    5),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([6,
                    8,
                    5],
                    true,
                    38.0455,
                    161.0035,
                    "9.7.0.8",
                new Polygon([new MapPath([new MapPoint([80.0480,
                            29.7983,
                            704.9769]),
                        new MapPoint([856.7113,
                            945.3863,
                            709.7851]),
                        new MapPoint([455.0557,
                            357.8406,
                            330.6189,
                            984.6220]),
                        new MapPoint([630.4330,
                            937.6965,
                            554.6894])]),
                        new MapPath([new MapPoint([236.9095,
                                472.3014]),
                            new MapPoint([317.8542,
                                692.8064,
                                125.6303,
                                880.7692])]),
                        new MapPath([new MapPoint([327.2121,
                                716.7061,
                                661.8361]),
                            new MapPoint([307.9528,
                                858.7174]),
                            new MapPoint([746.5355,
                                749.9033,
                                676.4984,
                                145.4722])])],
                    new SpatialReference(5,
                            "sit",
                            "dicta",
                            "harum"),
                    new Point(-135.4454,
                            6.5606,
                            -46.9321,
                            -84.2230,
                            892.0808,
                        new SpatialReference(1,
                                "voluptas",
                                "quasi",
                                "reprehenderit"),
                            true,
                            true,
                            48.4963),
                        true,
                        true,
                        true),
                    3,
                    ["laboriosam",
                        "sunt"],
                    "nobis",
                    new DateTime(2017, 11, 25, 20, 5, 8),
                    767.1590,
                    5,
                    "aliquid",
                    3),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SourceAtop;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("et velit consequatur",
                    "animi",
                    ["aut",
                        "tempore",
                        "eligendi"],
                [new FieldInfo("status",
                        "ea",
                        "ipsum",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongMonthDayYearShortTime),
                        true,
                        true,
                    StatisticType.Var)],
                [new AttachmentsPopupContent("asperiores optio quo",
                        "quia vero quis ut voluptas est ut",
                        AttachmentsPopupContentDisplayType.Auto),
                new AttachmentsPopupContent("aperiam accusamus in",
                        "tenetur nisi eligendi cupiditate",
                        AttachmentsPopupContentDisplayType.Preview),
                new TextPopupContent("culpa fuga in"),
                new FieldsPopupContent([new FieldInfo("comment",
                            "maxime",
                            "doloremque",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.DayShortMonthYearLongTime24),
                            true,
                            true,
                        StatisticType.Var),
                    new FieldInfo("createdAt",
                            "accusamus",
                            "consectetur",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.ShortDateLeShortTime),
                            true,
                            true,
                        StatisticType.Count),
                    new FieldInfo("createdAt",
                            "et",
                            "officia",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(4,
                                true,
                            DateFormat.ShortDateShortTime),
                            true,
                            true,
                        StatisticType.Sum),
                    new FieldInfo("updatedAt",
                            "et",
                            "debitis",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.ShortDateLeLongTime24),
                            true,
                            true,
                        StatisticType.Stddev)],
                        "et tempore dolor iure nostrum molestiae",
                        "quibusdam sit recusandae")],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "createdAt",
                        "id magni sunt",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "comment",
                        "perspiciatis vel repellendus",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("eum voluptatem et",
                        "4c3082b4-f930-74a5-78bb-cb8db6b06de8",
                        () => { Console.WriteLine("a"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "email",
                        "aliquam")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "velit reiciendis fugiat"),
                ElevationInfoMode.OnTheGround,
                    433.7244,
                ElevationUnit.NauticalMiles);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("ducimus",
                    39052912.9003),
                    new Effect("porro",
                        34482485.9129),
                    new Effect("numquam",
                        11366882.9749)],
                    true,
                new FeatureFilter(824.2656,
                    new Extent(21.6857,
                            145.6661,
                            57.6355,
                            48.1683,
                            910.3756,
                            908.1693,
                            589.8153,
                            110.9223,
                        new SpatialReference(7,
                                "libero",
                                "praesentium",
                                "quasi"),
                            true,
                            true),
                        [6,
                            9,
                            5,
                            2],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2007, 6, 4, 17, 8, 58),
                            new DateTime(2009, 11, 22, 12, 35, 43)),
                        QueryUnits.Meters,
                        "Street = '123 Main St.'"),
                    [new Effect("sunt",
                        21260955.3122),
                        new Effect("et",
                            392670.3785),
                        new Effect("modi",
                            20496994.0962)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "token",
                    "placeat",
                    "sed quia qui veritatis voluptatem",
                    1,
                    true,
                    true,
                    new { Value = "et" },
                FieldValueType.LocationOrPlaceName,
                new RangeDomain("quibusdam",
                        "et",
                        "avatar")),
            new Field(default,
                    "password",
                    "facere",
                    "vero aut modi non dolore",
                    8,
                    true,
                    true,
                    new { Value = "est" },
                FieldValueType.TypeOrCategory,
                new RangeDomain("aperiam",
                        "quae",
                        "updatedAt")),
            new Field(default,
                    "group",
                    "eligendi",
                    "sint eius aut harum sit",
                    9,
                    true,
                    true,
                    new { Value = "unde" },
                FieldValueType.Binary,
                new RangeDomain("optio",
                        "rem",
                        "group"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-147.5282,
                    74.4035,
                    41.9017,
                    87.8131,
                    727.1797,
                    852.1982,
                    748.6313,
                    582.9168,
                new SpatialReference(6,
                        "velit",
                        "ut",
                        "ut"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveStart,
                    "nihil",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    43833229.0405,
                    32075.3312,
                    true,
                    new Dimension(518.0794),
                new TextSymbol("molestiae libero delectus",
                    new MapColor(209, 39, 21),
                    new MapColor(21, 97, 20),
                        new Dimension(98.1031),
                    new MapFont(new Dimension(188.8147),
                            "Courier New",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        625.1808,
                    new MapColor(232, 68, 38),
                    new MapColor(214, 164, 70),
                        952.1950,
                    HorizontalAlignment.Center,
                        true,
                        796.9690,
                        new Dimension(719.2709),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.BelowAlong,
                    "quas",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    11288490.7986,
                    5214.6749,
                    true,
                    new Dimension(630.9574),
                new TextSymbol("cumque occaecati soluta",
                    new MapColor(83, 184, 84),
                    new MapColor(59, 142, 120),
                        new Dimension(18.9051),
                    new MapFont(new Dimension(736.1594),
                            "Times New Roman",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        731.8696,
                    new MapColor(197, 74, 107),
                    new MapColor(198, 90, 64),
                        313.5953,
                    HorizontalAlignment.Left,
                        true,
                        655.7461,
                        new Dimension(408.6425),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.BelowBefore,
                    "velit",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    24488203.1877,
                    27052.3109,
                    true,
                    new Dimension(212.1365),
                new TextSymbol("autem dolores et",
                    new MapColor(169, 1, 2),
                    new MapColor(83, 94, 230),
                        new Dimension(688.9212),
                    new MapFont(new Dimension(534.8940),
                            "Courier New",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        471.4484,
                    new MapColor(241, 25, 5),
                    new MapColor(135, 14, 226),
                        957.6852,
                    HorizontalAlignment.Left,
                        true,
                        954.7070,
                        new Dimension(638.3343),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.BelowStart,
                    "consequatur",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    33892620.7736,
                    20303.3181,
                    true,
                    new Dimension(868.0559),
                new TextSymbol("quis suscipit nesciunt",
                    new MapColor(18, 22, 55),
                    new MapColor(147, 55, 62),
                        new Dimension(96.5787),
                    new MapFont(new Dimension(905.4948),
                            "Bookman",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        492.7948,
                    new MapColor(215, 165, 123),
                    new MapColor(166, 229, 248),
                        675.1033,
                    HorizontalAlignment.Center,
                        true,
                        129.3463,
                        new Dimension(562.3047),
                        true),
                    true,
                    "Province = 'Ontario'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("quia",
                SortOrder.Descending,
                    "esse")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "praesentium",
                    "quo",
                    523.3918,
                    ["rerum",
                        "sit"],
                    new DateTime(2013, 7, 1, 14, 26, 10),
                    "aliquid",
                    "alias quia praesentium voluptatem eum aut perferendis",
                new Extent(147.7814,
                        134.0408,
                        -67.7355,
                        -10.4086,
                        929.7292,
                        642.8784,
                        412.0371,
                        961.1799,
                    new SpatialReference(4,
                            "quod",
                            "quos",
                            "eligendi"),
                        true,
                        true),
                    ["ullam",
                        "eveniet"],
                    "velit",
                    new DateTime(2016, 6, 17, 11, 36, 5),
                    "password",
                    921.0173);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer([new UniqueValueInfo("reprehenderit",
                    new TextSymbol("vel possimus est",
                        new MapColor(94, 113, 133),
                        new MapColor(149, 215, 162),
                            new Dimension(198.4235),
                        new MapFont(new Dimension(781.7916),
                                "Times New Roman",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            580.7971,
                        new MapColor(59, 189, 179),
                        new MapColor(104, 177, 222),
                            988.0839,
                        HorizontalAlignment.Left,
                            true,
                            814.3496,
                            new Dimension(495.9989),
                            true),
                        "non"),
                new UniqueValueInfo("debitis",
                    new TextSymbol("quis molestiae maiores",
                        new MapColor(143, 209, 5),
                        new MapColor(30, 20, 34),
                            new Dimension(766.2050),
                        new MapFont(new Dimension(254.8274),
                                "Courier New",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            215.0308,
                        new MapColor(11, 61, 154),
                        new MapColor(236, 78, 31),
                            812.1075,
                        HorizontalAlignment.Center,
                            true,
                            84.7791,
                            new Dimension(52.7881),
                            true),
                        "nulla")],
                new AuthoringInfo(ClassificationMethod.Manual,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                            new MapColor(182, 58, 241),
                            new MapColor(18, 5, 226)),
                        new AlgorithmicColorRamp(Algorithm.LabLch,
                            new MapColor(228, 28, 56),
                            new MapColor(122, 143, 204))]),
                        778.9406,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(948.0600,
                                913.7194),
                        new AuthoringInfoField1ClassBreakInfos(293.8673,
                                511.9198),
                        new AuthoringInfoField1ClassBreakInfos(157.9373,
                                839.5037),
                        new AuthoringInfoField1ClassBreakInfos(45.4835,
                                429.7000)],
                            "dolorum",
                            "unde",
                            "qui"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(35.9581,
                                664.0409)],
                            "aspernatur",
                            "amet",
                            "quisquam"),
                        ["aut",
                            "vel",
                            "animi"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "ipsum",
                        true,
                    LengthUnit.Meters,
                        552.1281,
                        738.4750,
                        434.8807,
                        644.8054),
                new PictureFillSymbol("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0",
                    new Dimension(320.4768),
                    new Dimension(366.7837),
                    new Dimension(255.3989),
                    new Dimension(454.2562),
                    -36.5668,
                    52.4911,
                    new Outline(new MapColor(195, 15, 79),
                        new Dimension(341.0850),
                        SimpleLineSymbolStyle.ShortDot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(59, 121, 50),
                            LinePlacement.End,
                            LineSymbolMarkerStyle.Circle),
                        705.8713),
                    new MapColor(221, 210, 209)),
                    "sed",
                    new DefaultSymbol(),
                    "nemo",
                    "aut",
                    "eos",
                    "sed",
                new UniqueValueRendererLegendOptions("deserunt ut ut"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("eaque",
                        new TextSymbol("deleniti atque totam",
                            new MapColor(0, 232, 91),
                            new MapColor(72, 12, 157),
                                new Dimension(219.7920),
                            new MapFont(new Dimension(211.2924),
                                    "Arial",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                942.6517,
                            new MapColor(7, 217, 184),
                            new MapColor(141, 73, 244),
                                81.5470,
                            HorizontalAlignment.Right,
                                true,
                                261.1192,
                                new Dimension(227.9642),
                                true),
                        [new UniqueValue("consequuntur",
                                "illum",
                                "molestias")])],
                        "asperiores")],
                    "consequatur",
                    "non molestiae ea");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "quod",
                    "non",
                    "iure");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2019, 2, 11, 15, 32, 55),
                    new DateTime(2020, 4, 2, 20, 14, 6));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("assumenda",
                    "distinctio",
                new TimeExtent(new DateTime(2015, 9, 15, 22, 14, 18),
                        new DateTime(2008, 11, 7, 9, 32, 15)),
                new TimeInterval(TemporalTime.Decades,
                        337.9344),
                    [new DateTime(2001, 9, 7, 5, 6, 52),
                        new DateTime(2015, 7, 8, 3, 45, 19)],
                    "Australia/Sydney",
                    "laborum");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    798.8355);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 10, 15, 19, 27, 32),
                    new DateTime(2007, 5, 25, 17, 16, 58));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
