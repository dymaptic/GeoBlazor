@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("dolorem eius necessitatibus")"
                        Copyright="@("corrupti")"
                        Opacity="@(0.1151)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Darken)"
                        DefinitionExpression="@("harum")"
                        Delimiter="@(CSVDelimiter.Semicolon)"
                        DisplayField="@("consectetur")"
                        Effect="@(new Effect("libero",
                            41821621.6322))"
                        FullExtent="@(new Extent(-160.1874,
                                176.3320,
                                -14.8173,
                                35.6566,
                                694.0305,
                                714.0599,
                                364.0215,
                                323.4126,
                            new SpatialReference(2,
                                    "eligendi",
                                    "maiores",
                                    "voluptate"),
                                true,
                                true))"
                        GeometryType="@("cum")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("eligendi")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("eveniet")"
                        MaxScale="@(505094.1019)"
                        MinScale="@(6111.6560)"
                        ObjectIdField="@("distinctio")"
                        OutFields="@(["aspernatur",
                            "ea"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(583.9653)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(9,
                                "a",
                                "aliquam",
                                "consequatur"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(589.9830)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("eum")"
                            EndField="@("et")"
                            Stops="@([new DateTime(2019, 3, 23, 3, 23, 49),
                                new DateTime(2010, 1, 8, 17, 7, 52),
                                new DateTime(2023, 2, 13, 18, 44, 55),
                                new DateTime(2015, 2, 25, 21, 14, 21)])"
                            TimeZone="@("America/Godthab")"
                            TrackIdField="@("quae")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(979.1082)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2004, 6, 3, 19, 30, 35))"
                                End="@(new DateTime(2007, 11, 15, 1, 26, 37))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2002, 2, 24, 8, 34, 27))"
                            End="@(new DateTime(2023, 4, 22, 12, 34, 26))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(132, 189, 103),
                                        new MapColor(126, 16, 16)),
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(10, 139, 57),
                                        new MapColor(94, 191, 186)),
                                    new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(178, 198, 11),
                                        new MapColor(29, 75, 253)),
                                    new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(173, 186, 129),
                                        new MapColor(137, 64, 137))]),
                                    215.1735,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(948.3026,
                                            231.2561)],
                                        "consectetur",
                                        "consectetur",
                                        "aut"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(22.8228,
                                            927.8165),
                                    new AuthoringInfoField1ClassBreakInfos(604.1357,
                                            266.7894),
                                    new AuthoringInfoField1ClassBreakInfos(611.0128,
                                            114.8534)],
                                        "consequuntur",
                                        "exercitationem",
                                        "vel"),
                                    ["ratione",
                                        "accusamus",
                                        "nulla"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "quae",
                                    true,
                                LengthUnit.Kilometers,
                                    351.4822,
                                    491.9280,
                                    515.7095,
                                    684.8044))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("dicta id eos")"
                            StringContent="@("dolorem")"
                            OutFields="@(["cupiditate",
                                "officiis",
                                "ratione"])"
                            FieldInfos="@([new FieldInfo("comment",
                                    "dicta",
                                    "aspernatur",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("token",
                                    "unde",
                                    "expedita",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("phone",
                                    "hic",
                                    "modi",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongDateLongTime),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("comment",
                                        "illo",
                                        "et",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.LongDate),
                                        true,
                                        true,
                                    StatisticType.Stddev)],
                                    "ex totam odio dolorem autem",
                                    "error illo ut"),
                            new RelationshipPopupContent("aut accusamus et",
                                    "non vel perferendis aut voluptatem",
                                    2,
                                    "rem",
                                [new RelatedRecordsInfoFieldOrder("qui",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("quidem",
                                    OrderBy.Desc)],
                                    7),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "laudantium",
                                        "aut est praesentium"))])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "name",
                                    "nobis voluptate praesentium",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "createdAt",
                                    "iste voluptatem alias",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "status",
                                    "et ut sit",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("magni nulla ea",
                                    "87016b04-f955-d7f2-32cd-645390d6a9fe",
                                    () => { Console.WriteLine("maxime"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "password",
                                    "sunt"),
                            new ActionToggle("harum ad alias",
                                    "13a3bbb7-6976-4d01-2817-3097375e0274",
                                    () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "qui")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("veniam")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("ut")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterLeft)"
                            LabelExpression="@("tempora")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(31015976.0602)"
                            MinScale="@(31415.8324)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(542.3536))"
                            Symbol="@(new TextSymbol("tempore id ut",
                                new MapColor(22, 99, 70),
                                new MapColor(247, 14, 15),
                                    new Dimension(111.0335),
                                new MapFont(new Dimension(612.7425),
                                        "Arial",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.Underline),
                                    927.0896,
                                new MapColor(39, 54, 115),
                                new MapColor(30, 0, 29),
                                    47.5402,
                                HorizontalAlignment.Left,
                                    true,
                                    195.4886,
                                    new Dimension(703.8291),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("PostalCode = 'M5V 1J9'")">
                        </Label>
                        <Field 
                            Name="@("comment")"
                            Alias="@("totam")"
                            Description="@("sapiente et autem dolore et natus iure")"
                            Length="@(1)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "omnis" })"
                            ValueType="@(FieldValueType.DateAndTime)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("nisi",
                                21993718.3834),
                                new Effect("recusandae",
                                    48738287.6370),
                                new Effect("voluptatem",
                                    24813171.9586),
                                new Effect("exercitationem",
                                    6520051.5097)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(109.9484,
                                new Polygon([new MapPath([new MapPoint([134.5424,
                                            217.0072,
                                            947.1767,
                                            482.8338]),
                                        new MapPoint([231.4609,
                                            400.5685,
                                            477.8942]),
                                        new MapPoint([529.3555,
                                            60.3451,
                                            311.6787])]),
                                        new MapPath([new MapPoint([264.0647,
                                                797.7282]),
                                            new MapPoint([103.8669,
                                                786.2810,
                                                312.0782])])],
                                    new SpatialReference(1,
                                            "voluptatibus",
                                            "dicta",
                                            "aliquid"),
                                    new Point(-44.1650,
                                            -88.8102,
                                            -106.9078,
                                            -19.3817,
                                            779.2304,
                                        new SpatialReference(2,
                                                "officia",
                                                "aut",
                                                "sunt"),
                                            true,
                                            true,
                                            204.6060),
                                        true,
                                        true,
                                        true),
                                    [8,
                                        7,
                                        6],
                                SpatialRelationship.Touches,
                                new TimeExtent(new DateTime(2003, 8, 2, 2, 14, 37),
                                        new DateTime(2015, 4, 7, 1, 4, 25)),
                                    QueryUnits.UsNauticalMiles,
                                    "City = 'Toronto'"))"
                            IncludedEffect="@([new Effect("nisi",
                                46166555.1785),
                                new Effect("quidem",
                                    5102331.0374),
                                new Effect("sed",
                                    22253542.1361),
                                new Effect("ut",
                                    35820078.8409)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                                    "tempora est alias"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(344.5998)"
                            Unit="@(ElevationUnit.Decimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["delectus",
                    "non"],
                    ["id",
                        "name",
                        "title"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("group");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("status",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([324.8034,
                                728.5014]),
                            new MapPoint([414.7666,
                                720.9737,
                                378.2554,
                                83.4646])])],
                        new SpatialReference(5,
                                "eius",
                                "autem",
                                "architecto"),
                            true,
                            true),
                    new TextSymbol("temporibus veniam doloribus",
                        new MapColor(187, 132, 238),
                        new MapColor(227, 150, 38),
                            new Dimension(805.0869),
                        new MapFont(new Dimension(188.8881),
                                "Helvetica",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            629.2970,
                        new MapColor(168, 67, 42),
                        new MapColor(227, 244, 82),
                            78.8958,
                        HorizontalAlignment.Left,
                            true,
                            50.6742,
                            new Dimension(418.4836),
                            true),
                    new PopupTemplate("et saepe provident",
                            "et",
                            ["ut",
                                "architecto",
                                "voluptas",
                                "quidem"],
                        [new FieldInfo("createdAt",
                                "sequi",
                                "officiis",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.ShortDateLeLongTime),
                                true,
                                true,
                            StatisticType.Stddev),
                        new FieldInfo("comment",
                                "sapiente",
                                "molestias",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.DayShortMonthYearShortTime),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("phone",
                                "quos",
                                "veniam",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.LongMonthDayYearShortTime),
                                true,
                                true,
                            StatisticType.Count)],
                        [new FieldsPopupContent([new FieldInfo("comment",
                                    "vero",
                                    "omnis",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("status",
                                    "quas",
                                    "ut",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("status",
                                    "sit",
                                    "atque",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Count)],
                                "eum voluptatum facilis sed nihil tempore suscipit",
                                "consequatur non sit")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "updatedAt",
                                "omnis dolores architecto",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "avatar",
                                "nam itaque sunt",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "group",
                                "voluptates quis et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "createdAt",
                                "nihil perspiciatis et",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("iusto repellendus dicta",
                                "https://picsum.photos/640/480/?image=877",
                                "eaf5af4f-4282-e923-82d6-cb0a9fcb9a22",
                                () => { Console.WriteLine("unde"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "sit")]),
                        new AttributesDictionary(),
                        true,
                        "cumque",
                        "accusantium",
                        new GraphicOrigin(Guid.NewGuid(),
                            "consequatur",
                            3))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([9,
                    9,
                    6,
                    5],
                    true,
                    166.1160,
                    941.0432,
                    "2.6.5.5",
                new Point(-28.9715,
                        -89.4351,
                        62.9025,
                        -63.4693,
                        102.6784,
                    new SpatialReference(6,
                            "quisquam",
                            "enim",
                            "aliquam"),
                        true,
                        true,
                        513.6023),
                    6,
                    ["ipsum",
                        "odit",
                        "rerum",
                        "ad"],
                    "id",
                    new DateTime(2019, 5, 5, 3, 14, 18),
                    539.5046,
                    6,
                    "consequuntur",
                    1),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([3,
                    3],
                    true,
                    278.6070,
                    309.0067,
                    "2.6.0.3",
                new Polygon([new MapPath([new MapPoint([883.8166,
                            437.6413,
                            121.3172,
                            885.0742]),
                        new MapPoint([830.7741,
                            161.3125,
                            153.0389]),
                        new MapPoint([657.0586,
                            147.0660,
                            828.1859])]),
                        new MapPath([new MapPoint([682.4188,
                                999.4623,
                                405.8877]),
                            new MapPoint([442.1962,
                                653.8155])])],
                    new SpatialReference(4,
                            "dolores",
                            "omnis",
                            "error"),
                    new Point(151.8296,
                            3.3423,
                            102.5554,
                            -89.9508,
                            192.9442,
                        new SpatialReference(5,
                                "laudantium",
                                "veniam",
                                "odio"),
                            true,
                            true,
                            911.8153),
                        true,
                        true,
                        true),
                    5,
                    ["saepe",
                        "nam"],
                    "ut",
                    new DateTime(2023, 3, 20, 20, 3, 17),
                    563.9268,
                    5,
                    "aut",
                    4),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([8,
                    8,
                    6,
                    1],
                    true,
                    917.6092,
                    74.1278,
                    "0.8.4.4",
                new Point(-123.2341,
                        -83.9821,
                        28.6264,
                        -63.2806,
                        150.7133,
                    new SpatialReference(9,
                            "est",
                            "quidem",
                            "aut"),
                        true,
                        true,
                        70.2077),
                    4,
                    ["sunt",
                        "ut",
                        "eum"],
                    "distinctio",
                    new DateTime(2012, 11, 9, 7, 54, 11),
                    946.7482,
                    9,
                    "temporibus",
                    2),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([8,
                    2],
                    true,
                    144.3682,
                    935.4720,
                    "2.2.0.5",
                new Polyline([new MapPath([new MapPoint([551.8541,
                            297.4458,
                            354.6480,
                            531.7318]),
                        new MapPoint([907.1099,
                            531.9493,
                            501.2626])]),
                        new MapPath([new MapPoint([709.3648,
                                100.6459,
                                631.1576,
                                846.8467]),
                            new MapPoint([351.8748,
                                849.9515,
                                909.0038,
                                492.8646]),
                            new MapPoint([974.0453,
                                408.6515,
                                274.2090,
                                608.6774]),
                            new MapPoint([406.2701,
                                980.5058,
                                693.2873,
                                769.6583])]),
                        new MapPath([new MapPoint([342.5981,
                                363.4785,
                                578.2959,
                                306.4715]),
                            new MapPoint([975.3654,
                                972.4603,
                                549.8696])])],
                    new SpatialReference(8,
                            "rerum",
                            "sed",
                            "voluptas"),
                        true,
                        true),
                    7,
                    ["odit",
                        "aliquam"],
                    "mollitia",
                    new DateTime(2022, 6, 8, 10, 36, 43),
                    831.4846,
                    4,
                    "quos",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Reflect;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("dolore at consequatur",
                    "voluptatem",
                    ["quaerat",
                        "autem"],
                [new FieldInfo("title",
                        "rerum",
                        "nihil",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Max)],
                [new FieldsPopupContent([new FieldInfo("updatedAt",
                            "velit",
                            "velit",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.LongDateShortTime),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("updatedAt",
                            "est",
                            "nam",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.ShortDateLongTime),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("phone",
                            "dolorum",
                            "ea",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLeLongTime24),
                            true,
                            true,
                        StatisticType.Var)],
                        "tempore porro accusantium similique sint magnam",
                        "explicabo sit qui"),
                new AttachmentsPopupContent("provident impedit et",
                        "quia perspiciatis qui et voluptatem ipsum culpa",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "avatar",
                        "accusantium qui perferendis",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("nihil optio ea",
                        "beb8321a-82e5-83e1-340c-7aef468415e2",
                        () => { Console.WriteLine("quaerat"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "updatedAt",
                        "amet")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                        "sit quia autem"),
                ElevationInfoMode.AbsoluteHeight,
                    134.3269,
                ElevationUnit.Decimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("ratione",
                    22441399.0639)],
                    true,
                new FeatureFilter(825.5116,
                    new Polyline([new MapPath([new MapPoint([970.6130,
                                93.6001,
                                982.0487,
                                513.9204]),
                            new MapPoint([576.7467,
                                356.3957,
                                44.6295]),
                            new MapPoint([936.4588,
                                428.1171,
                                845.4906,
                                551.3919]),
                            new MapPoint([468.1737,
                                789.8950,
                                148.5514,
                                9.6646])]),
                            new MapPath([new MapPoint([143.4177,
                                    606.4798,
                                    89.9625]),
                                new MapPoint([637.6725,
                                    209.5601,
                                    308.1326]),
                                new MapPoint([596.0188,
                                    584.3748,
                                    641.6721,
                                    862.8869])])],
                        new SpatialReference(9,
                                "voluptatem",
                                "laborum",
                                "vero"),
                            true,
                            true),
                        [2,
                            1],
                    SpatialRelationship.Within,
                    new TimeExtent(new DateTime(2013, 1, 7, 7, 20, 33),
                            new DateTime(2003, 7, 18, 0, 18, 18)),
                        QueryUnits.Feet,
                        "Street = '123 Main St.'"),
                    [new Effect("corporis",
                        21868869.1929)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "maiores",
                    "dignissimos aut eum hic aspernatur porro",
                    1,
                    true,
                    true,
                    new { Value = "aliquam" },
                FieldValueType.OrderedOrRanked,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "status",
                    "aut",
                    "neque optio et eum",
                    3,
                    true,
                    true,
                    new { Value = "autem" },
                FieldValueType.None,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "title",
                    "rerum",
                    "perferendis soluta quia voluptas quos",
                    7,
                    true,
                    true,
                    new { Value = "vitae" },
                FieldValueType.CountOrAmount,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(133.5344,
                    67.8909,
                    54.4607,
                    47.7721,
                    830.2764,
                    61.4698,
                    281.8835,
                    959.7819,
                new SpatialReference(8,
                        "laborum",
                        "animi",
                        "voluptatem"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AlwaysHorizontal,
                    "aliquam",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    30009756.2017,
                    19445.0472,
                    true,
                    new Dimension(178.9152),
                new TextSymbol("non est rem",
                    new MapColor(182, 12, 90),
                    new MapColor(95, 214, 122),
                        new Dimension(606.7386),
                    new MapFont(new Dimension(173.9588),
                            "Arial",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        720.2557,
                    new MapColor(75, 20, 188),
                    new MapColor(92, 37, 25),
                        167.9233,
                    HorizontalAlignment.Left,
                        true,
                        791.2410,
                        new Dimension(180.6921),
                        true),
                    true,
                    "Age > 21"),
            new Label(LabelPlacement.AboveEnd,
                    "adipisci",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    41683464.5572,
                    25904.4262,
                    true,
                    new Dimension(709.0748),
                new TextSymbol("repellat molestiae consequuntur",
                    new MapColor(165, 251, 220),
                    new MapColor(47, 171, 189),
                        new Dimension(517.3301),
                    new MapFont(new Dimension(921.6672),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        123.0262,
                    new MapColor(103, 110, 185),
                    new MapColor(17, 174, 30),
                        39.9078,
                    HorizontalAlignment.Center,
                        true,
                        99.8928,
                        new Dimension(529.4843),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.AboveAfter,
                    "autem",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    10888271.8227,
                    42967.5938,
                    true,
                    new Dimension(101.0117),
                new TextSymbol("deserunt eveniet eos",
                    new MapColor(106, 145, 208),
                    new MapColor(198, 29, 2),
                        new Dimension(568.6580),
                    new MapFont(new Dimension(604.5493),
                            "Courier New",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        778.7282,
                    new MapColor(55, 139, 105),
                    new MapColor(102, 144, 53),
                        280.5984,
                    HorizontalAlignment.Right,
                        true,
                        972.4389,
                        new Dimension(924.4200),
                        true),
                    true,
                    "ObjectID = 1"),
            new Label(LabelPlacement.CenterLeft,
                    "dolorum",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    30448759.7020,
                    46180.1309,
                    true,
                    new Dimension(272.3922),
                new TextSymbol("non pariatur aut",
                    new MapColor(53, 129, 24),
                    new MapColor(14, 92, 107),
                        new Dimension(157.7048),
                    new MapFont(new Dimension(123.4699),
                            "Courier New",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.None),
                        511.9484,
                    new MapColor(199, 26, 134),
                    new MapColor(120, 227, 60),
                        908.3560,
                    HorizontalAlignment.Left,
                        true,
                        517.4426,
                        new Dimension(563.9153),
                        true),
                    true,
                    "Street = '123 Main St.'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("nostrum",
                SortOrder.Ascending,
                    "quasi"),
            new OrderedLayerOrderBy("minus",
                SortOrder.Descending,
                    "occaecati"),
            new OrderedLayerOrderBy("asperiores",
                SortOrder.Ascending,
                    "harum")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("quaerat eaque cumque",
                    new MapColor(199, 197, 152),
                    new MapColor(234, 139, 43),
                        new Dimension(671.4750),
                    new MapFont(new Dimension(575.8558),
                            "Palatino",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        906.8031,
                    new MapColor(215, 98, 117),
                    new MapColor(183, 169, 105),
                        97.2466,
                    HorizontalAlignment.Center,
                        true,
                        56.2674,
                        new Dimension(262.0095),
                        true),
                    "aut",
                [new ColorVariable("debitis",
                        "quis",
                    [new ColorStop(777.2769,
                        new MapColor(24, 25, 192),
                            "voluptatum"),
                    new ColorStop(376.6569,
                        new MapColor(197, 142, 209),
                            "mollitia"),
                    new ColorStop(54.6808,
                        new MapColor(34, 130, 123),
                            "praesentium")],
                    new VisualVariableLegendOptions(true,
                            "modi necessitatibus quia"),
                        "cumque",
                        "ut voluptates quis"),
                new RotationVariable("maiores",
                    Axis.Roll,
                    RotationType.Arithmetic,
                    new VisualVariableLegendOptions(true,
                            "vitae dolores soluta"),
                        "quaerat",
                        "voluptatem illo error")],
                new AuthoringInfo(ClassificationMethod.Manual,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(105, 11, 23),
                        new MapColor(125, 0, 245)),
                        538.8200,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(215.4087,
                                969.4442)],
                            "laborum",
                            "eum",
                            "sint"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(812.9767,
                                552.5196)],
                            "vitae",
                            "et",
                            "consequatur"),
                        ["aut",
                            "corrupti"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "enim",
                        true,
                    LengthUnit.Miles,
                        726.8470,
                        823.8476,
                        765.3966,
                        350.6748));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "impedit",
                    "at",
                    "et");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2001, 5, 27, 0, 45, 56),
                    new DateTime(2015, 9, 15, 2, 1, 20));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("soluta",
                    "quis",
                new TimeExtent(new DateTime(2022, 2, 7, 16, 32, 1),
                        new DateTime(2003, 6, 15, 3, 52, 14)),
                new TimeInterval(TemporalTime.Minutes,
                        87.7162),
                    [new DateTime(2003, 1, 27, 8, 7, 58),
                        new DateTime(2003, 11, 25, 7, 17, 11),
                        new DateTime(2016, 7, 6, 12, 52, 54)],
                    "America/Regina",
                    "provident");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    460.3854);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2003, 11, 14, 10, 25, 55),
                    new DateTime(2013, 5, 20, 14, 20, 45));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
