@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("perspiciatis ipsam est")"
                        Copyright="@("recusandae")"
                        Opacity="@(0.2862)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Multiply)"
                        DefinitionExpression="@("et")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("quia")"
                        Effect="@(new Effect("praesentium",
                            19741245.4579))"
                        GeometryType="@("mollitia")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("repellat")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("laborum")"
                        MaxScale="@(27541772.0286)"
                        MinScale="@(25695.0743)"
                        ObjectIdField="@("fugit")"
                        OutFields="@(["iusto"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(163.3073)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(915.6085)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptas")"
                            EndField="@("tempora")"
                            Stops="@([new DateTime(2008, 4, 11, 3, 32, 36)])"
                            TimeZone="@("Asia/Singapore")"
                            TrackIdField="@("at")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(918.6995)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2020, 8, 5, 14, 30, 54))"
                                End="@(new DateTime(2018, 5, 1, 5, 23, 54))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 11, 18, 4, 22, 7))"
                            End="@(new DateTime(2023, 3, 6, 10, 2, 53))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(6)"
                            ImageCoordinateSystem="@("qui")"
                            Wkt="@("omnis")"
                            Wkt2="@("veniam")">
                        </SpatialReference>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.StandardDeviation,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(111, 248, 92),
                                        new MapColor(199, 230, 240))]),
                                    825.2898,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(235.9176,
                                            69.9274)],
                                        "ut",
                                        "nobis",
                                        "perspiciatis"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(240.4976,
                                            391.0898)],
                                        "error",
                                        "qui",
                                        "earum"),
                                    ["enim",
                                        "magnam"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "ad",
                                    true,
                                LengthUnit.Inches,
                                    966.5659,
                                    263.6793,
                                    546.9874,
                                    292.1870))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("voluptatem dolores eveniet")"
                            StringContent="@("repellat")"
                            OutFields="@(["quo"])"
                            FieldInfos="@([new FieldInfo("avatar",
                                    "sed",
                                    "quasi",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new MediaPopupContent("a similique autem",
                                    "possimus et ab",
                                [new BarChartMediaInfo("adipisci ea quia",
                                        "et",
                                        "aut rerum doloremque",
                                    new ChartMediaInfoValue(["hic",
                                            "vel"],
                                            "adipisci",
                                            "quia",
                                        [new ChartMediaInfoValueSeries("token",
                                                "ab",
                                                858.3929),
                                        new ChartMediaInfoValueSeries("email",
                                                "et",
                                                401.5684)],
                                        [new MapColor(5, 248, 91)]))],
                                    3),
                            new AttachmentsPopupContent("quasi corporis vel",
                                    "velit sed laborum",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "group",
                                    "magnam illum rerum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "email",
                                    "modi architecto magnam",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("quos illum ad",
                                "https://picsum.photos/640/480/?image=850",
                                "984e1225-7a48-d709-3420-95de6aa225ba",
                                () => { Console.WriteLine("minus"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "autem")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("laudantium")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("velit")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterCenter)"
                            LabelExpression="@("quod")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(10709323.3144)"
                            MinScale="@(10784.4995)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(952.0174))"
                            Symbol="@(new TextSymbol("ut quas iure",
                                new MapColor(250, 8, 218),
                                new MapColor(163, 16, 67),
                                    new Dimension(637.9157),
                                new MapFont(new Dimension(848.4481),
                                        "Helvetica",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.LineThrough),
                                    439.9146,
                                new MapColor(191, 246, 159),
                                new MapColor(60, 35, 139),
                                    940.5395,
                                HorizontalAlignment.Right,
                                    true,
                                    337.6827,
                                    new Dimension(873.9587),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Phone = '555-555-5555'")">
                        </Label>
                        <Extent 
                            Xmax="@(179.0493)"
                            Xmin="@(-69.4175)"
                            Ymax="@(-51.5557)"
                            Ymin="@(62.7335)"
                            Zmax="@(825.7774)"
                            Zmin="@(192.2130)"
                            Mmax="@(435.3668)"
                            Mmin="@(63.1157)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("tempora")"
                                Wkt="@("rem")"
                                Wkt2="@("illo")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("title")"
                            Alias="@("voluptatem")"
                            Description="@("saepe inventore velit aperiam")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "in" })"
                            ValueType="@(FieldValueType.Measurement)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("fuga",
                                47701872.0777)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(805.8614,
                                new Polyline([new MapPath([new MapPoint([10.7493]),
                                        new MapPoint([569.4225,
                                            504.4699])]),
                                        new MapPath([new MapPoint([530.9426])])],
                                    new SpatialReference(3,
                                            "quam",
                                            "occaecati",
                                            "error"),
                                        true,
                                        true),
                                    [9],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2003, 3, 7, 10, 57, 9),
                                        new DateTime(2003, 3, 15, 14, 11, 15)),
                                    QueryUnits.Meters,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([new Effect("tempora",
                                45878195.7627)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                                    "sunt rerum laudantium"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(900.1318)"
                            Unit="@(ElevationUnit.Millimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["sunt",
                    "id"],
                    ["group"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("createdAt");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("category",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([147.7822,
                                348.9135]),
                            new MapPoint([21.7994])]),
                            new MapPath([new MapPoint([959.9442])])],
                        new SpatialReference(8,
                                "dicta",
                                "modi",
                                "ut"),
                            true,
                            true),
                    new TextSymbol("odit est ut",
                        new MapColor(219, 144, 251),
                        new MapColor(184, 164, 203),
                            new Dimension(177.8399),
                        new MapFont(new Dimension(699.3100),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            193.3457,
                        new MapColor(113, 152, 212),
                        new MapColor(111, 156, 15),
                            451.2436,
                        HorizontalAlignment.Left,
                            true,
                            871.0707,
                            new Dimension(203.1986),
                            true),
                    new PopupTemplate("aut aperiam neque",
                            "dolorum",
                            ["maxime"],
                        [new FieldInfo("name",
                                "ut",
                                "provident",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Min)],
                        [new TextPopupContent("accusamus suscipit ducimus")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "id",
                                "id veniam amet",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("ut impedit facilis",
                                "https://picsum.photos/640/480/?image=772",
                                "60a1bbe8-0a94-e76d-2724-b7726cff78c8",
                                () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "natus")]),
                        new AttributesDictionary(),
                        true,
                        "a",
                        "voluptates",
                        new GraphicOrigin(Guid.NewGuid(),
                            "eos",
                            8))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([6],
                    true,
                    711.9012,
                    927.1640,
                    "6.7.8.5",
                new Extent(-12.7833,
                        13.4595,
                        -20.1119,
                        7.9079,
                        229.1902,
                        985.1617,
                        573.3478,
                        6.3846,
                    new SpatialReference(4,
                            "sequi",
                            "earum",
                            "aut"),
                        true,
                        true),
                    5,
                    ["et",
                        "exercitationem"],
                    "unde",
                    new DateTime(2012, 1, 24, 4, 42, 19),
                    569.1756,
                    3,
                    "soluta",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([8,
                    4],
                    true,
                    702.5932,
                    249.6029,
                    "7.4.3.6",
                new Polyline([new MapPath([new MapPoint([72.0944])]),
                        new MapPath([new MapPoint([816.1275]),
                            new MapPoint([176.5072,
                                695.2295])])],
                    new SpatialReference(5,
                            "culpa",
                            "deserunt",
                            "alias"),
                        true,
                        true),
                    5,
                    ["et"],
                    "qui",
                    new DateTime(2007, 9, 14, 5, 0, 42),
                    410.7187,
                    8,
                    "ut",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([1],
                    true,
                    618.9987,
                    569.4306,
                    "4.2.1.5",
                new Polyline([new MapPath([new MapPoint([914.8849,
                            314.1805]),
                        new MapPoint([178.3599,
                            910.8152])])],
                    new SpatialReference(9,
                            "maxime",
                            "quam",
                            "et"),
                        true,
                        true),
                    4,
                    ["reprehenderit",
                        "omnis"],
                    "ut",
                    new DateTime(2014, 2, 27, 19, 16, 4),
                    276.1520,
                    9,
                    "vitae",
                    4),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([7],
                    true,
                    329.6237,
                    732.1462,
                    "9.2.9.6",
                new Polyline([new MapPath([new MapPoint([279.1869])]),
                        new MapPath([new MapPoint([672.0125,
                                496.0222])])],
                    new SpatialReference(2,
                            "sit",
                            "eos",
                            "consequatur"),
                        true,
                        true),
                    7,
                    ["deleniti",
                        "itaque"],
                    "aut",
                    new DateTime(2010, 5, 13, 14, 49, 51),
                    537.6960,
                    8,
                    "vero",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("laborum vel accusamus",
                    "sed",
                    ["enim",
                        "assumenda"],
                [new FieldInfo("status",
                        "at",
                        "ut",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Min)],
                [new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                            "expedita",
                            "eligendi rerum mollitia")),
                new MediaPopupContent("quos error quia",
                        "ad animi",
                    [new ImageMediaInfo("est atque est",
                            "est",
                            "eaque nobis suscipit",
                        new ImageMediaInfoValue("http://yadira.com",
                                "http://mina.org"),
                            490.8788),
                    new ColumnChartMediaInfo("esse qui quibusdam",
                            "voluptas",
                            "aliquam excepturi sed",
                        new ChartMediaInfoValue(["a",
                                "dolorem"],
                                "et",
                                "quis",
                            [new ChartMediaInfoValueSeries("phone",
                                    "saepe",
                                    492.7818)],
                            [new MapColor(20, 17, 239)]))],
                        2)],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "email",
                        "nulla occaecati occaecati",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "comment",
                        "et et enim",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("non molestias voluptas",
                        "https://picsum.photos/640/480/?image=918",
                        "05f33588-4e6e-c6a9-5b29-aae9b8a39af0",
                        () => { Console.WriteLine("vero"); return Task.CompletedTask; },
                        "group",
                        true,
                        true,
                        true,
                        "aliquam")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                        "sunt non expedita"),
                ElevationInfoMode.RelativeToScene,
                    690.4961,
                ElevationUnit.Decimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("perferendis",
                    6279675.6709),
                    new Effect("et",
                        16878935.5495)],
                    true,
                new FeatureFilter(955.0473,
                    new Point(119.9400,
                            -78.4623,
                            -75.2638,
                            38.6231,
                            72.4626,
                        new SpatialReference(6,
                                "totam",
                                "officiis",
                                "et"),
                            true,
                            true,
                            237.8549),
                        [5],
                    SpatialRelationship.Crosses,
                    new TimeExtent(new DateTime(2003, 7, 5, 5, 43, 28),
                            new DateTime(2011, 1, 16, 20, 35, 42)),
                        QueryUnits.Meters,
                        "Name = 'John Doe'"),
                    [new Effect("deserunt",
                        5853495.1156)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "name",
                    "expedita",
                    "quis consequatur",
                    5,
                    true,
                    true,
                    new { Value = "a" },
                FieldValueType.TypeOrCategory,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-30.3159,
                    176.7504,
                    43.7766,
                    40.5352,
                    812.6758,
                    784.2615,
                    57.3943,
                    646.1736,
                new SpatialReference(1,
                        "eveniet",
                        "minima",
                        "quis"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowLeft,
                    "beatae",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    12193691.7928,
                    25290.8183,
                    true,
                    new Dimension(931.4753),
                new TextSymbol("nobis et dicta",
                    new MapColor(28, 210, 108),
                    new MapColor(23, 248, 95),
                        new Dimension(53.4387),
                    new MapFont(new Dimension(817.2462),
                            "Courier New",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        572.6878,
                    new MapColor(159, 22, 199),
                    new MapColor(128, 222, 9),
                        146.1652,
                    HorizontalAlignment.Right,
                        true,
                        822.0082,
                        new Dimension(301.8351),
                        true),
                    true,
                    "Street = '123 Main St.'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("ut",
                SortOrder.Ascending,
                    "et")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.Quantile,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(250, 139, 177),
                        new MapColor(220, 201, 220)),
                        798.6585,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(481.7619,
                                292.4579),
                        new AuthoringInfoField1ClassBreakInfos(586.4719,
                                274.8425)],
                            "dolorem",
                            "blanditiis",
                            "eum"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(689.9821,
                                885.3189),
                        new AuthoringInfoField1ClassBreakInfos(368.7545,
                                110.7371)],
                            "occaecati",
                            "vel",
                            "quis"),
                        ["numquam",
                            "qui"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "consectetur",
                        true,
                    LengthUnit.UsFeet,
                        638.2786,
                        891.2483,
                        167.9298,
                        698.2622),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0",
                    new Dimension(403.2455),
                    new Dimension(124.8856),
                    new Dimension(56.5829),
                    new Dimension(148.0739),
                    114.9467,
                    -85.8177,
                    new Outline(new MapColor(42, 153, 101),
                        new Dimension(463.8348),
                        SimpleLineSymbolStyle.DashDot,
                        Cap.Butt,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(26, 54, 217),
                            LinePlacement.End,
                            LineSymbolMarkerStyle.Cross),
                        144.6089),
                    new MapColor(234, 243, 103)),
                    "minus",
                    new DefaultSymbol(),
                    "accusamus",
                    "illo",
                    "earum",
                    "ut",
                new UniqueValueRendererLegendOptions("aut voluptates et"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("dolor",
                        new TextSymbol("recusandae provident commodi",
                            new MapColor(178, 93, 237),
                            new MapColor(163, 150, 248),
                                new Dimension(341.4707),
                            new MapFont(new Dimension(763.4819),
                                    "Times New Roman",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.Underline),
                                592.4464,
                            new MapColor(119, 36, 216),
                            new MapColor(178, 170, 33),
                                325.8643,
                            HorizontalAlignment.Center,
                                true,
                                965.8207,
                                new Dimension(96.4909),
                                true),
                        [new UniqueValue("provident",
                                "autem",
                                "assumenda"),
                        new UniqueValue("suscipit",
                                "natus",
                                "excepturi")])],
                        "tempora")],
                [new UniqueValueInfo("molestiae",
                    new TextSymbol("in aperiam dolorem",
                        new MapColor(226, 117, 78),
                        new MapColor(247, 222, 225),
                            new Dimension(900.2583),
                        new MapFont(new Dimension(681.8526),
                                "Helvetica",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            259.5081,
                        new MapColor(199, 180, 33),
                        new MapColor(128, 4, 128),
                            986.9714,
                        HorizontalAlignment.Left,
                            true,
                            248.1336,
                            new Dimension(916.8615),
                            true),
                        "rerum"),
                new UniqueValueInfo("officiis",
                    new TextSymbol("et sit occaecati",
                        new MapColor(54, 28, 163),
                        new MapColor(142, 160, 43),
                            new Dimension(199.0034),
                        new MapFont(new Dimension(586.9201),
                                "Palatino",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            179.9948,
                        new MapColor(76, 169, 186),
                        new MapColor(232, 108, 222),
                            142.5992,
                        HorizontalAlignment.Left,
                            true,
                            885.4350,
                            new Dimension(105.8947),
                            true),
                        "perspiciatis")],
                    "quae",
                    "minus inventore iure");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "voluptatem",
                    "iure",
                    "velit");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2005, 11, 15, 3, 38, 9),
                    new DateTime(2019, 10, 7, 5, 33, 4));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quos",
                    "qui",
                new TimeExtent(new DateTime(2023, 6, 25, 8, 49, 19),
                        new DateTime(2011, 10, 4, 19, 13, 24)),
                new TimeInterval(TemporalTime.Minutes,
                        243.9384),
                    [new DateTime(2006, 7, 24, 11, 15, 45),
                        new DateTime(2005, 2, 25, 0, 7, 4)],
                    "Australia/Sydney",
                    "eius");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    493.9359);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 4, 4, 18, 24, 19),
                    new DateTime(2020, 10, 19, 13, 41, 24));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
