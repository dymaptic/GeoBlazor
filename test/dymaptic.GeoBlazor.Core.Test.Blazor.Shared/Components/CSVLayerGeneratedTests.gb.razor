@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("ullam et dolor")"
                        Copyright="@("placeat")"
                        Opacity="@(0.9101)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Luminosity)"
                        DefinitionExpression="@("aliquam")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("voluptas")"
                        Effect="@(new Effect("qui",
                            31856833.0540))"
                        GeometryType="@("optio")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("omnis")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("est")"
                        MaxScale="@(9447097.5364)"
                        MinScale="@(2095.0362)"
                        ObjectIdField="@("non")"
                        OutFields="@(["quod"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(226.7284)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Hours)"
                            Value="@(869.6764)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("id")"
                            EndField="@("voluptates")"
                            Stops="@([new DateTime(2005, 4, 11, 13, 0, 40)])"
                            TimeZone="@("Australia/Hobart")"
                            TrackIdField="@("ut")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(749.2611)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2014, 7, 23, 9, 20, 33))"
                                End="@(new DateTime(2023, 8, 16, 15, 36, 23))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2014, 1, 13, 9, 47, 6))"
                            End="@(new DateTime(2022, 10, 18, 3, 52, 37))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(1)"
                            ImageCoordinateSystem="@("est")"
                            Wkt="@("vitae")"
                            Wkt2="@("fugiat")">
                        </SpatialReference>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(197, 57, 115),
                                    new MapColor(163, 57, 80)),
                                    784.2494,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(467.6479,
                                            706.4535),
                                    new AuthoringInfoField1ClassBreakInfos(346.2315,
                                            964.2483)],
                                        "debitis",
                                        "doloremque",
                                        "sit"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(425.0994,
                                            137.2788),
                                    new AuthoringInfoField1ClassBreakInfos(173.5614,
                                            556.0775)],
                                        "velit",
                                        "alias",
                                        "odit"),
                                    ["dolorum",
                                        "aut"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "et",
                                    true,
                                LengthUnit.Miles,
                                    669.5136,
                                    70.6173,
                                    784.7334,
                                    33.1539))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("aut sunt totam")"
                            StringContent="@("qui")"
                            OutFields="@(["sint"])"
                            FieldInfos="@([new FieldInfo("email",
                                    "perferendis",
                                    "qui",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("phone",
                                    "quia",
                                    "nihil",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new AttachmentsPopupContent("pariatur iusto cupiditate",
                                    "vero aut quo",
                                    AttachmentsPopupContentDisplayType.Auto),
                            new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                        "assumenda",
                                        "in cupiditate recusandae"))])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "phone",
                                    "est et eum",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("sit est excepturi",
                                "https://picsum.photos/640/480/?image=68",
                                "dd4f1f6e-daff-a89b-c613-058987ac7659",
                                () => { Console.WriteLine("labore"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "earum"),
                                new ActionButton("velit perspiciatis in",
                                    "https://picsum.photos/640/480/?image=343",
                                    "3fa86a93-07dd-e84a-7055-269b6c11c6f1",
                                    () => { Console.WriteLine("nesciunt"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "tenetur")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("aut")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("aut")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveRight)"
                            LabelExpression="@("eius")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(41739564.4043)"
                            MinScale="@(34295.7292)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(4.9117))"
                            Symbol="@(new TextSymbol("est fugit eius",
                                new MapColor(3, 207, 145),
                                new MapColor(84, 130, 162),
                                    new Dimension(380.6738),
                                new MapFont(new Dimension(151.6596),
                                        "Arial",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.None),
                                    682.9996,
                                new MapColor(49, 223, 141),
                                new MapColor(247, 184, 98),
                                    722.4381,
                                HorizontalAlignment.Left,
                                    true,
                                    727.9994,
                                    new Dimension(415.0019),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Street = '123 Main St.'")">
                        </Label>
                        <Extent 
                            Xmax="@(33.5863)"
                            Xmin="@(79.0430)"
                            Ymax="@(-36.3359)"
                            Ymin="@(-5.4101)"
                            Zmax="@(167.2076)"
                            Zmin="@(752.8904)"
                            Mmax="@(729.7211)"
                            Mmin="@(207.1231)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("fugiat")"
                                Wkt="@("blanditiis")"
                                Wkt2="@("sed")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("createdAt")"
                            Alias="@("laudantium")"
                            Description="@("repellendus velit vero quas")"
                            Length="@(5)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "quam" })"
                            ValueType="@(FieldValueType.NameOrTitle)"
                            Domain="@(new RangeDomain("inventore",
                                    "ducimus",
                                    "name"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("ullam",
                                27355834.0242)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(96.6894,
                                new Point(9.2685,
                                        -31.9967,
                                        150.4050,
                                        -33.5389,
                                        180.4096,
                                    new SpatialReference(3,
                                            "rerum",
                                            "maxime",
                                            "fugiat"),
                                        true,
                                        true,
                                        530.7761),
                                    [1],
                                SpatialRelationship.Crosses,
                                new TimeExtent(new DateTime(2009, 2, 26, 19, 7, 17),
                                        new DateTime(2022, 3, 4, 4, 0, 7)),
                                    QueryUnits.Meters,
                                    "Phone = '555-555-5555'"))"
                            IncludedEffect="@([new Effect("consequatur",
                                17538221.3640),
                                new Effect("veritatis",
                                    10290432.0187)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "nihil porro doloribus"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(14.5962)"
                            Unit="@(ElevationUnit.Decimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["molestiae",
                    "eos"],
                    ["token"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("token");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("phone",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Point(-130.6110,
                            -1.1162,
                            -30.8374,
                            -25.2824,
                            358.0068,
                        new SpatialReference(2,
                                "aspernatur",
                                "amet",
                                "et"),
                            true,
                            true,
                            134.8701),
                    new TextSymbol("consequatur dolor ut",
                        new MapColor(17, 171, 64),
                        new MapColor(234, 235, 89),
                            new Dimension(616.7374),
                        new MapFont(new Dimension(443.5401),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            560.3743,
                        new MapColor(129, 0, 108),
                        new MapColor(93, 209, 137),
                            179.3758,
                        HorizontalAlignment.Left,
                            true,
                            786.6378,
                            new Dimension(251.5739),
                            true),
                    new PopupTemplate("illo quam provident",
                            "illo",
                            ["dolores",
                                "deserunt"],
                        [new FieldInfo("title",
                                "non",
                                "quisquam",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("token",
                                "earum",
                                "sapiente",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new MediaPopupContent("vero magnam totam",
                                "ex voluptatum reprehenderit doloremque",
                            [new ImageMediaInfo("sunt esse deserunt",
                                    "veritatis",
                                    "laboriosam provident repudiandae",
                                new ImageMediaInfoValue("https://malika.org",
                                        "https://oda.name"),
                                    748.8773),
                            new BarChartMediaInfo("repellat quia cum",
                                    "est",
                                    "pariatur quis suscipit",
                                new ChartMediaInfoValue(["quae"],
                                        "minima",
                                        "dolorum",
                                    [new ChartMediaInfoValueSeries("category",
                                            "error",
                                            903.3994)],
                                    [new MapColor(250, 236, 106),
                                    new MapColor(144, 47, 34)]))],
                                8)],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "comment",
                                "eligendi nobis est",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "password",
                                "inventore deleniti quos",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("numquam pariatur aut",
                                "https://picsum.photos/640/480/?image=185",
                                "ea8b26fb-19dc-7d66-6f28-bb8f760f0427",
                                () => { Console.WriteLine("modi"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "qui")]),
                        new AttributesDictionary(),
                        true,
                        "sint",
                        "id",
                        new GraphicOrigin(Guid.NewGuid(),
                            "facilis",
                            2))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([3],
                    true,
                    13.0431,
                    929.7053,
                    "9.7.6.2",
                new Polygon([new MapPath([new MapPoint([83.8044]),
                        new MapPoint([134.2381])]),
                        new MapPath([new MapPoint([793.0529]),
                            new MapPoint([271.7727])])],
                    new SpatialReference(8,
                            "et",
                            "sit",
                            "quam"),
                    new Point(-62.0176,
                            51.0878,
                            56.6749,
                            89.6504,
                            494.4627,
                        new SpatialReference(3,
                                "voluptatum",
                                "soluta",
                                "occaecati"),
                            true,
                            true,
                            250.6248),
                        true,
                        true,
                        true),
                    1,
                    ["et",
                        "inventore"],
                    "quo",
                    new DateTime(2017, 5, 27, 16, 2, 37),
                    301.6554,
                    4,
                    "temporibus",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([7,
                    3],
                    true,
                    657.4763,
                    568.0073,
                    "4.9.3.9",
                new Extent(-54.9856,
                        -51.1257,
                        42.2506,
                        67.3871,
                        471.3701,
                        232.8944,
                        697.6479,
                        912.1244,
                    new SpatialReference(6,
                            "sit",
                            "molestiae",
                            "ea"),
                        true,
                        true),
                    8,
                    ["nisi",
                        "ratione"],
                    "commodi",
                    new DateTime(2005, 1, 27, 20, 1, 19),
                    60.2236,
                    7,
                    "amet",
                    8),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([8,
                    8],
                    true,
                    736.5378,
                    254.4197,
                    "4.6.3.0",
                new Polyline([new MapPath([new MapPoint([428.9080])])],
                    new SpatialReference(7,
                            "commodi",
                            "dicta",
                            "aut"),
                        true,
                        true),
                    1,
                    ["fugiat",
                        "perferendis"],
                    "ab",
                    new DateTime(2018, 4, 14, 12, 18, 46),
                    75.2476,
                    7,
                    "placeat",
                    8),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([1,
                    2],
                    true,
                    286.5849,
                    972.6208,
                    "0.0.2.7",
                new Point(-171.3108,
                        56.0993,
                        -174.0717,
                        -14.2708,
                        201.6419,
                    new SpatialReference(4,
                            "aut",
                            "possimus",
                            "dicta"),
                        true,
                        true,
                        702.3205),
                    1,
                    ["velit",
                        "quis"],
                    "et",
                    new DateTime(2017, 6, 21, 20, 53, 55),
                    673.1069,
                    7,
                    "aut",
                    6),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Lighter;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("et fugit voluptas",
                    "quasi",
                    ["adipisci",
                        "dolores"],
                [new FieldInfo("comment",
                        "perferendis",
                        "repellendus",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.ShortDateLeLongTime),
                        true,
                        true,
                    StatisticType.Count)],
                [new FieldsPopupContent([new FieldInfo("name",
                            "deleniti",
                            "omnis",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.LongMonthDayYearShortTime),
                            true,
                            true,
                        StatisticType.Var)],
                        "repudiandae sit",
                        "voluptate est sed"),
                new TextPopupContent("officia dolorum harum")],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "title",
                        "quos voluptatem est",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "name",
                        "et eaque non",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("veniam incidunt dolorum",
                        "https://picsum.photos/640/480/?image=98",
                        "a5abacf6-7167-f436-3533-5c0b83c06b4e",
                        () => { Console.WriteLine("voluptatibus"); return Task.CompletedTask; },
                        "password",
                        true,
                        true,
                        true,
                        "facilis")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "atque ullam quos"),
                ElevationInfoMode.OnTheGround,
                    744.4950,
                ElevationUnit.DecimalDegrees);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("dolor",
                    21241776.7883)],
                    true,
                new FeatureFilter(1.7932,
                    new Polyline([new MapPath([new MapPoint([15.3450]),
                            new MapPoint([307.0984,
                                227.3692])])],
                        new SpatialReference(5,
                                "qui",
                                "quia",
                                "dolorem"),
                            true,
                            true),
                        [1],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2021, 11, 27, 5, 27, 52),
                            new DateTime(2019, 2, 26, 11, 19, 34)),
                        QueryUnits.Meters,
                        "Country = 'Canada'"),
                    [new Effect("accusantium",
                        34643454.6625),
                        new Effect("et",
                            26730596.0377)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "email",
                    "nihil",
                    "nostrum recusandae reiciendis sit",
                    3,
                    true,
                    true,
                    new { Value = "deleniti" },
                FieldValueType.TypeOrCategory,
                new RangeDomain("excepturi",
                        "consequuntur",
                        "token"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-122.3200,
                    161.0722,
                    -5.7913,
                    -45.5970,
                    69.6806,
                    26.4964,
                    230.8927,
                    137.5445,
                new SpatialReference(6,
                        "repudiandae",
                        "reprehenderit",
                        "eius"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveBefore,
                    "quia",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    9870267.4716,
                    29002.6012,
                    true,
                    new Dimension(116.2507),
                new TextSymbol("nam libero quia",
                    new MapColor(48, 20, 237),
                    new MapColor(214, 165, 15),
                        new Dimension(479.2912),
                    new MapFont(new Dimension(922.8338),
                            "Palatino",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        532.7697,
                    new MapColor(16, 126, 35),
                    new MapColor(117, 115, 199),
                        839.6463,
                    HorizontalAlignment.Left,
                        true,
                        559.3632,
                        new Dimension(496.6947),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("voluptatem",
                SortOrder.Descending,
                    "nobis"),
            new OrderedLayerOrderBy("voluptatem",
                SortOrder.Descending,
                    "ab")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.EqualInterval,
                    new AlgorithmicColorRamp(Algorithm.Hsv,
                        new MapColor(171, 221, 177),
                        new MapColor(223, 199, 42)),
                        7.2187,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(510.6961,
                                473.0202),
                        new AuthoringInfoField1ClassBreakInfos(856.4810,
                                455.6976)],
                            "est",
                            "consequuntur",
                            "molestias"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(283.7599,
                                332.3620)],
                            "voluptas",
                            "impedit",
                            "omnis"),
                        ["maiores",
                            "est"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "voluptas",
                        true,
                    LengthUnit.Meters,
                        287.8853,
                        451.6232,
                        821.5524,
                        310.9623),
                new PictureFillSymbol("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0",
                    new Dimension(127.1554),
                    new Dimension(505.4571),
                    new Dimension(187.0446),
                    new Dimension(647.5755),
                    42.8601,
                    -85.7825,
                    new Outline(new MapColor(103, 221, 38),
                        new Dimension(943.8108),
                        SimpleLineSymbolStyle.DashDot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(24, 220, 102),
                            LinePlacement.End,
                            LineSymbolMarkerStyle.Square),
                        466.9461),
                    new MapColor(132, 239, 41)),
                    "ea",
                    new DefaultSymbol(),
                    "ut",
                    "reiciendis",
                    "cupiditate",
                    "aut",
                new UniqueValueRendererLegendOptions("eos temporibus harum"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("nesciunt",
                        new TextSymbol("et et et",
                            new MapColor(234, 182, 221),
                            new MapColor(117, 235, 112),
                                new Dimension(642.5390),
                            new MapFont(new Dimension(69.2976),
                                    "Garamond",
                                MapFontStyle.Oblique,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                467.5885,
                            new MapColor(13, 196, 82),
                            new MapColor(27, 252, 131),
                                481.5667,
                            HorizontalAlignment.Left,
                                true,
                                73.8002,
                                new Dimension(682.3041),
                                true),
                        [new UniqueValue("enim",
                                "itaque",
                                "aspernatur")]),
                    new UniqueValueClass("mollitia",
                        new TextSymbol("doloremque sit dolor",
                            new MapColor(181, 226, 57),
                            new MapColor(238, 72, 117),
                                new Dimension(844.9719),
                            new MapFont(new Dimension(787.8154),
                                    "Palatino",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.None),
                                362.3290,
                            new MapColor(165, 205, 136),
                            new MapColor(149, 222, 203),
                                443.7245,
                            HorizontalAlignment.Right,
                                true,
                                918.4648,
                                new Dimension(247.2604),
                                true),
                        [new UniqueValue("a",
                                "ut",
                                "consequuntur"),
                        new UniqueValue("ex",
                                "in",
                                "neque")])],
                        "est"),
                new UniqueValueGroup([new UniqueValueClass("recusandae",
                        new TextSymbol("esse est repellat",
                            new MapColor(202, 145, 252),
                            new MapColor(154, 245, 98),
                                new Dimension(654.4325),
                            new MapFont(new Dimension(218.0246),
                                    "Helvetica",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.Underline),
                                860.9077,
                            new MapColor(154, 113, 128),
                            new MapColor(193, 16, 209),
                                420.2711,
                            HorizontalAlignment.Right,
                                true,
                                488.0729,
                                new Dimension(37.8158),
                                true),
                        [new UniqueValue("voluptatem",
                                "laudantium",
                                "possimus")])],
                        "sit")],
                [new UniqueValueInfo("rerum",
                    new TextSymbol("ipsa eos dolores",
                        new MapColor(212, 86, 234),
                        new MapColor(243, 33, 126),
                            new Dimension(844.8235),
                        new MapFont(new Dimension(703.4508),
                                "Palatino",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            669.3566,
                        new MapColor(65, 224, 218),
                        new MapColor(112, 13, 163),
                            481.8213,
                        HorizontalAlignment.Center,
                            true,
                            289.2451,
                            new Dimension(562.8159),
                            true),
                        "eveniet"),
                new UniqueValueInfo("rerum",
                    new TextSymbol("aut ut libero",
                        new MapColor(225, 98, 78),
                        new MapColor(38, 227, 107),
                            new Dimension(229.3644),
                        new MapFont(new Dimension(239.8514),
                                "Bookman",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            890.8050,
                        new MapColor(17, 231, 22),
                        new MapColor(1, 38, 24),
                            683.3320,
                        HorizontalAlignment.Right,
                            true,
                            405.4508,
                            new Dimension(977.3654),
                            true),
                        "totam")],
                    "dolores",
                    "dicta beatae quasi");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "quos",
                    "quis",
                    "suscipit");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 2, 25, 11, 6, 33),
                    new DateTime(2007, 10, 7, 19, 38, 52));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("vitae",
                    "est",
                new TimeExtent(new DateTime(2000, 8, 16, 21, 10, 5),
                        new DateTime(2021, 8, 12, 6, 3, 39)),
                new TimeInterval(TemporalTime.Months,
                        746.7249),
                    [new DateTime(2007, 5, 12, 17, 6, 35),
                        new DateTime(2014, 8, 8, 6, 24, 9)],
                    "America/Juneau",
                    "sapiente");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Decades,
                    736.8272);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 2, 25, 0, 41, 56),
                    new DateTime(2023, 1, 11, 21, 35, 38));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
