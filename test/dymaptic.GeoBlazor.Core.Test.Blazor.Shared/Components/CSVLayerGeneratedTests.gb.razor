@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("aut pariatur nostrum")"
                        Copyright="@("asperiores")"
                        Opacity="@(0.2573)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Saturation)"
                        DefinitionExpression="@("in")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("maxime")"
                        Effect="@(new Effect("dolor",
                            19002146.4119))"
                        FullExtent="@(new Extent(98.8224,
                                72.5047,
                                -70.5164,
                                33.0888,
                                101.1457,
                                811.7037,
                                590.3490,
                                640.3307,
                            new SpatialReference(2,
                                    "occaecati",
                                    "consequuntur",
                                    "dolorum"),
                                true,
                                true))"
                        GeometryType="@("assumenda")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("deleniti")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("quis")"
                        MaxScale="@(14159365.9322)"
                        MinScale="@(17388.4227)"
                        ObjectIdField="@("molestias")"
                        OutFields="@(["asperiores",
                            "ut"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(444.3745)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(9,
                                "praesentium",
                                "odit",
                                "sed"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(589.0342)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("est")"
                            EndField="@("consectetur")"
                            Stops="@([new DateTime(2018, 10, 2, 2, 53, 48),
                                new DateTime(2014, 1, 27, 17, 8, 40),
                                new DateTime(2016, 8, 10, 4, 57, 11),
                                new DateTime(2006, 7, 25, 6, 29, 11)])"
                            TimeZone="@("Asia/Chongqing")"
                            TrackIdField="@("accusamus")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Days)"
                                Value="@(384.1057)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2016, 5, 7, 7, 8, 18))"
                                End="@(new DateTime(2006, 3, 16, 20, 16, 14))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 11, 7, 10, 17, 19))"
                            End="@(new DateTime(2004, 3, 18, 16, 8, 14))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Manual,
                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                    new MapColor(67, 205, 135),
                                    new MapColor(91, 52, 165)),
                                    735.7825,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(73.5889,
                                            909.5276),
                                    new AuthoringInfoField1ClassBreakInfos(240.9777,
                                            353.6791),
                                    new AuthoringInfoField1ClassBreakInfos(423.2200,
                                            733.7804)],
                                        "dolores",
                                        "eum",
                                        "sequi"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(578.4828,
                                            896.7694),
                                    new AuthoringInfoField1ClassBreakInfos(694.2341,
                                            730.4666),
                                    new AuthoringInfoField1ClassBreakInfos(677.3862,
                                            429.7838),
                                    new AuthoringInfoField1ClassBreakInfos(721.2383,
                                            3.9614)],
                                        "rem",
                                        "culpa",
                                        "quos"),
                                    ["dolorem",
                                        "ad",
                                        "voluptas",
                                        "et"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "ut",
                                    true,
                                LengthUnit.Decimeters,
                                    472.2691,
                                    444.1104,
                                    975.1744,
                                    230.1234))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("velit omnis qui")"
                            StringContent="@("a")"
                            OutFields="@(["in",
                                "fuga"])"
                            FieldInfos="@([new FieldInfo("phone",
                                    "voluptatem",
                                    "facere",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateShortTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("password",
                                    "corrupti",
                                    "voluptas",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateShortTime),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "est",
                                        "molestiae quos doloribus")),
                            new MediaPopupContent("quis quasi et",
                                    "dolores ipsum fugiat earum ut laboriosam ut",
                                [new ImageMediaInfo("sunt ipsum quia",
                                        "harum",
                                        "enim et aut",
                                    new ImageMediaInfoValue("http://edd.name",
                                            "https://oran.name"),
                                        696.4689)],
                                    2),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                                        "autem",
                                        "eveniet totam voluptatibus")),
                            new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                        "sint",
                                        "veniam exercitationem ea"))])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "updatedAt",
                                    "reiciendis facilis nobis",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "group",
                                    "molestiae sed nobis",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "category",
                                    "dicta provident est",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("cumque eaque sunt",
                                    "https://picsum.photos/640/480/?image=367",
                                    "c9b4b9d0-08d7-87da-b041-14acb7a9a332",
                                    () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "occaecati"),
                            new ActionButton("dolorem amet minus",
                                    "https://picsum.photos/640/480/?image=823",
                                    "a0d36d61-98bd-9873-72b2-897ad1a187c4",
                                    () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "nihil"),
                            new ActionToggle("eius quaerat laudantium",
                                    "f2e577dd-4c44-e258-797a-81913c8906e4",
                                    () => { Console.WriteLine("expedita"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "phone",
                                    "expedita")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("consequuntur")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("sint")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveAlong)"
                            LabelExpression="@("quos")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(46916482.2592)"
                            MinScale="@(44724.5117)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(863.9464))"
                            Symbol="@(new TextSymbol("omnis dolorem voluptatem",
                                new MapColor(16, 173, 199),
                                new MapColor(193, 148, 42),
                                    new Dimension(175.6462),
                                new MapFont(new Dimension(353.4832),
                                        "Bookman",
                                    MapFontStyle.Italic,
                                    FontWeight.Bolder,
                                    TextDecoration.LineThrough),
                                    543.4222,
                                new MapColor(188, 7, 219),
                                new MapColor(254, 239, 226),
                                    533.6347,
                                HorizontalAlignment.Center,
                                    true,
                                    505.2560,
                                    new Dimension(680.4027),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <Field 
                            Name="@("token")"
                            Alias="@("aliquam")"
                            Description="@("fugiat iste praesentium eveniet iste praesentium quod")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "ut" })"
                            ValueType="@(FieldValueType.UniqueIdentifier)"
                            Domain="@(new InheritedDomain("name"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("debitis",
                                43349727.6109),
                                new Effect("nihil",
                                    33713651.1586),
                                new Effect("et",
                                    6321356.4834)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(780.0199,
                                new Extent(-1.4965,
                                        -13.6846,
                                        -82.2334,
                                        -85.4962,
                                        898.9828,
                                        123.4394,
                                        749.8414,
                                        594.1305,
                                    new SpatialReference(8,
                                            "a",
                                            "rerum",
                                            "sint"),
                                        true,
                                        true),
                                    [4,
                                        5,
                                        2,
                                        2],
                                SpatialRelationship.Crosses,
                                new TimeExtent(new DateTime(2007, 7, 22, 1, 54, 35),
                                        new DateTime(2019, 7, 5, 20, 39, 1)),
                                    QueryUnits.Meters,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([new Effect("veritatis",
                                46158401.8401),
                                new Effect("nulla",
                                    47952733.1815)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Population / $feature.Area;",
                                    "cumque alias aut"))"
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(644.3833)"
                            Unit="@(ElevationUnit.Centimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["et",
                    "provident",
                    "sit"],
                    ["status",
                        "status",
                        "comment"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("title");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("group",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([575.5710,
                                458.2902,
                                342.0605,
                                389.5651]),
                            new MapPoint([308.3200,
                                464.5681,
                                94.4001]),
                            new MapPoint([969.2992,
                                585.1558]),
                            new MapPoint([653.0316,
                                554.8822,
                                371.9988,
                                864.1935])]),
                            new MapPath([new MapPoint([993.2875,
                                    734.9078,
                                    491.6148,
                                    2.8341]),
                                new MapPoint([283.9896,
                                    859.9385,
                                    356.9142,
                                    521.6718])])],
                        new SpatialReference(8,
                                "distinctio",
                                "inventore",
                                "aut"),
                        new Point(-62.4858,
                                9.7461,
                                -123.8932,
                                30.9929,
                                682.1321,
                            new SpatialReference(7,
                                    "dolorem",
                                    "ipsam",
                                    "vel"),
                                true,
                                true,
                                890.5921),
                            true,
                            true,
                            true),
                    new TextSymbol("quod fugit dolor",
                        new MapColor(151, 131, 87),
                        new MapColor(103, 7, 253),
                            new Dimension(661.7943),
                        new MapFont(new Dimension(767.4604),
                                "Arial",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.None),
                            28.3708,
                        new MapColor(44, 217, 103),
                        new MapColor(25, 44, 200),
                            875.9305,
                        HorizontalAlignment.Left,
                            true,
                            258.4223,
                            new Dimension(487.2069),
                            true),
                    new PopupTemplate("temporibus consequatur praesentium",
                            "sint",
                            ["qui",
                                "voluptatem"],
                        [new FieldInfo("avatar",
                                "provident",
                                "repellendus",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.LongDateLongTime),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("category",
                                "accusamus",
                                "et",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.LongMonthDayYearShortTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new RelationshipPopupContent("distinctio tenetur quisquam",
                                "accusamus architecto itaque illo",
                                2,
                                "consequatur",
                            [new RelatedRecordsInfoFieldOrder("aspernatur",
                                OrderBy.Asc)],
                                4),
                        new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                    "et",
                                    "sint tempore omnis")),
                        new AttachmentsPopupContent("autem dolore nam",
                                "libero cupiditate voluptate alias omnis omnis maxime",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "comment",
                                "dolorem ex et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "avatar",
                                "veniam vel porro",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "category",
                                "facilis voluptate odit",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("dolorem modi architecto",
                                "6c8d6838-2df4-7602-9f64-17512b9700b3",
                                () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "password",
                                "totam"),
                        new ActionButton("qui quisquam adipisci",
                                "https://picsum.photos/640/480/?image=417",
                                "8207b338-e73d-da86-6996-2b93a3665108",
                                () => { Console.WriteLine("doloribus"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "dolorum"),
                        new ActionButton("ex totam hic",
                                "https://picsum.photos/640/480/?image=358",
                                "158afcda-d69d-7d42-6590-0a3acd8ffdbf",
                                () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "sit"),
                        new ActionButton("minus nulla eos",
                                "https://picsum.photos/640/480/?image=1039",
                                "7d11c1a2-7f97-90fd-75ca-188b28e4f136",
                                () => { Console.WriteLine("velit"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "nam")]),
                        new AttributesDictionary(),
                        true,
                        "vel",
                        "ad",
                        new GraphicOrigin(Guid.NewGuid(),
                            "itaque",
                            6))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([3,
                    2],
                    true,
                    942.3865,
                    210.1976,
                    "1.5.5.8",
                new Point(-153.3925,
                        -76.4973,
                        -35.3389,
                        -15.5819,
                        243.8139,
                    new SpatialReference(8,
                            "exercitationem",
                            "commodi",
                            "nobis"),
                        true,
                        true,
                        433.1410),
                    1,
                    ["modi",
                        "maxime",
                        "quo"],
                    "recusandae",
                    new DateTime(2021, 3, 11, 20, 34, 5),
                    312.3533,
                    5,
                    "laudantium",
                    6),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([9,
                    8,
                    4,
                    3],
                    true,
                    632.2184,
                    83.6485,
                    "9.7.8.8",
                new Polyline([new MapPath([new MapPoint([164.9550,
                            214.2539,
                            288.1563]),
                        new MapPoint([681.8427,
                            780.9173,
                            752.0624,
                            38.4467]),
                        new MapPoint([426.6467,
                            930.6731])]),
                        new MapPath([new MapPoint([26.3863,
                                921.3616]),
                            new MapPoint([773.9058,
                                212.7555,
                                480.4956,
                                632.7475]),
                            new MapPoint([711.6289,
                                258.2096,
                                89.7869]),
                            new MapPoint([397.0613,
                                125.9843,
                                455.1155,
                                175.5978])]),
                        new MapPath([new MapPoint([103.1082,
                                428.9267,
                                990.5277,
                                493.8102]),
                            new MapPoint([623.5683,
                                924.2531]),
                            new MapPoint([998.8402,
                                571.8101])])],
                    new SpatialReference(7,
                            "aspernatur",
                            "tempora",
                            "consequuntur"),
                        true,
                        true),
                    2,
                    ["nulla",
                        "eum",
                        "fugit",
                        "magnam"],
                    "nulla",
                    new DateTime(2010, 4, 15, 9, 7, 5),
                    86.8140,
                    1,
                    "neque",
                    4),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([8,
                    5,
                    9,
                    8],
                    true,
                    595.4042,
                    677.5313,
                    "6.8.3.2",
                new Point(-89.0460,
                        11.0963,
                        117.2371,
                        -42.3657,
                        466.6421,
                    new SpatialReference(1,
                            "voluptatem",
                            "commodi",
                            "unde"),
                        true,
                        true,
                        431.4325),
                    4,
                    ["assumenda",
                        "ut",
                        "qui",
                        "ut"],
                    "et",
                    new DateTime(2022, 4, 11, 14, 18, 37),
                    375.3954,
                    5,
                    "qui",
                    4),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([4,
                    7,
                    6,
                    5],
                    true,
                    908.8618,
                    984.6953,
                    "4.8.1.3",
                new Extent(-143.6081,
                        171.8198,
                        21.5619,
                        70.8369,
                        738.1015,
                        873.8431,
                        928.4800,
                        736.1757,
                    new SpatialReference(5,
                            "iusto",
                            "recusandae",
                            "qui"),
                        true,
                        true),
                    9,
                    ["ratione",
                        "commodi",
                        "aut"],
                    "aspernatur",
                    new DateTime(2011, 5, 21, 17, 35, 38),
                    755.8571,
                    7,
                    "numquam",
                    6),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SourceAtop;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("maiores consectetur quia",
                    "ad",
                    ["occaecati",
                        "ut"],
                [new FieldInfo("name",
                        "nam",
                        "et",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongMonthDayYear),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("comment",
                        "voluptas",
                        "ab",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Min)],
                [new AttachmentsPopupContent("sed officia adipisci",
                        "sint sequi rerum dicta",
                        AttachmentsPopupContentDisplayType.Auto),
                new FieldsPopupContent([new FieldInfo("id",
                            "necessitatibus",
                            "ipsa",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.DayShortMonthYearShortTime),
                            true,
                            true,
                        StatisticType.Max)],
                        "tenetur qui omnis ut",
                        "ab voluptatem non"),
                new AttachmentsPopupContent("eaque dolores impedit",
                        "reprehenderit earum rerum corporis ipsum illo praesentium",
                        AttachmentsPopupContentDisplayType.Preview),
                new RelationshipPopupContent("quae aperiam ut",
                        "tempora exercitationem quam asperiores voluptas exercitationem non",
                        8,
                        "dolorem",
                    [new RelatedRecordsInfoFieldOrder("aut",
                        OrderBy.Desc)],
                        8)],
                [new ExpressionInfo("return Date();",
                        "password",
                        "dolores quo quasi",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "status",
                        "laborum officia quaerat",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return Date();",
                        "avatar",
                        "nam quibusdam quas",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "password",
                        "dolores culpa eos",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("nisi earum cupiditate",
                        "https://picsum.photos/640/480/?image=778",
                        "e1fd2e59-dbed-b91d-8490-75073894bb8a",
                        () => { Console.WriteLine("aliquid"); return Task.CompletedTask; },
                        "email",
                        true,
                        true,
                        true,
                        "est")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Population / $feature.Area;",
                        "corporis minima commodi"),
                ElevationInfoMode.RelativeToScene,
                    3.0469,
                ElevationUnit.Centimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("voluptatem",
                    23082605.5251)],
                    true,
                new FeatureFilter(573.5477,
                    new Polygon([new MapPath([new MapPoint([198.2221,
                                466.8237,
                                922.4435]),
                            new MapPoint([491.6177,
                                366.7926,
                                51.3032,
                                314.7115]),
                            new MapPoint([639.0487,
                                514.5917,
                                630.5342]),
                            new MapPoint([21.7318,
                                892.9734,
                                987.6900,
                                747.0289])]),
                            new MapPath([new MapPoint([259.9057,
                                    600.9283,
                                    884.4936,
                                    723.1878]),
                                new MapPoint([333.0703,
                                    519.6606,
                                    975.0047,
                                    729.0094]),
                                new MapPoint([207.5978,
                                    105.4839,
                                    966.6100])]),
                            new MapPath([new MapPoint([725.4934,
                                    486.8512]),
                                new MapPoint([518.4357,
                                    365.1233,
                                    805.2846,
                                    18.6331])]),
                            new MapPath([new MapPoint([518.6435,
                                    149.1601,
                                    293.1312,
                                    375.2521]),
                                new MapPoint([471.8261,
                                    465.9634,
                                    541.0329]),
                                new MapPoint([773.4401,
                                    322.4750,
                                    837.8618,
                                    494.1015]),
                                new MapPoint([354.2747,
                                    946.3144,
                                    121.1114,
                                    221.8766])])],
                        new SpatialReference(9,
                                "consequuntur",
                                "ut",
                                "dolores"),
                        new Point(-62.8561,
                                -35.3687,
                                -165.0130,
                                27.3486,
                                377.9471,
                            new SpatialReference(4,
                                    "nisi",
                                    "placeat",
                                    "impedit"),
                                true,
                                true,
                                995.9782),
                            true,
                            true,
                            true),
                        [7,
                            6,
                            4,
                            8],
                    SpatialRelationship.Intersects,
                    new TimeExtent(new DateTime(2022, 5, 20, 22, 50, 22),
                            new DateTime(2015, 6, 16, 13, 26, 38)),
                        QueryUnits.Meters,
                        "City = 'Toronto'"),
                    [new Effect("tempore",
                        8483825.8262),
                        new Effect("debitis",
                            19532368.8468),
                        new Effect("est",
                            41405749.6309)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "phone",
                    "vel",
                    "tempora rerum impedit molestiae",
                    2,
                    true,
                    true,
                    new { Value = "ratione" },
                FieldValueType.UniqueIdentifier,
                new InheritedDomain("group")),
            new Field(default,
                    "password",
                    "totam",
                    "veritatis excepturi officiis aliquid",
                    7,
                    true,
                    true,
                    new { Value = "est" },
                FieldValueType.PercentageOrRatio,
                new InheritedDomain("status")),
            new Field(default,
                    "phone",
                    "quaerat",
                    "impedit iusto quo aut",
                    8,
                    true,
                    true,
                    new { Value = "excepturi" },
                FieldValueType.None,
                new InheritedDomain("phone")),
            new Field(default,
                    "title",
                    "sit",
                    "quidem consequuntur doloribus et",
                    1,
                    true,
                    true,
                    new { Value = "occaecati" },
                FieldValueType.None,
                new InheritedDomain("status"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(22.6497,
                    -122.2771,
                    -11.9038,
                    -12.3358,
                    427.8532,
                    307.9193,
                    728.7236,
                    774.7646,
                new SpatialReference(2,
                        "blanditiis",
                        "illo",
                        "eum"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveStart,
                    "error",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    23943935.4013,
                    4453.0902,
                    true,
                    new Dimension(680.6462),
                new TextSymbol("architecto velit quas",
                    new MapColor(103, 42, 244),
                    new MapColor(171, 217, 171),
                        new Dimension(934.9416),
                    new MapFont(new Dimension(182.2773),
                            "Helvetica",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.None),
                        451.3098,
                    new MapColor(124, 63, 126),
                    new MapColor(247, 190, 114),
                        168.1674,
                    HorizontalAlignment.Right,
                        true,
                        260.5054,
                        new Dimension(150.5986),
                        true),
                    true,
                    "ObjectID = 1"),
            new Label(LabelPlacement.AlwaysHorizontal,
                    "eos",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    41053155.7045,
                    14439.7311,
                    true,
                    new Dimension(147.0419),
                new TextSymbol("quo quo ipsa",
                    new MapColor(170, 23, 70),
                    new MapColor(181, 3, 19),
                        new Dimension(438.9047),
                    new MapFont(new Dimension(422.7248),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        586.5141,
                    new MapColor(99, 198, 135),
                    new MapColor(207, 2, 203),
                        169.7399,
                    HorizontalAlignment.Right,
                        true,
                        180.0417,
                        new Dimension(177.9053),
                        true),
                    true,
                    "City = 'Toronto'"),
            new Label(LabelPlacement.AboveStart,
                    "quae",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    48502776.8590,
                    27095.3462,
                    true,
                    new Dimension(18.8637),
                new TextSymbol("ab mollitia distinctio",
                    new MapColor(214, 45, 152),
                    new MapColor(161, 33, 173),
                        new Dimension(866.4612),
                    new MapFont(new Dimension(103.9877),
                            "Bookman",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.None),
                        967.3209,
                    new MapColor(67, 0, 183),
                    new MapColor(183, 245, 151),
                        328.7038,
                    HorizontalAlignment.Center,
                        true,
                        560.0264,
                        new Dimension(706.4033),
                        true),
                    true,
                    "Phone = '555-555-5555'"),
            new Label(LabelPlacement.BelowStart,
                    "modi",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    2646008.6075,
                    33746.3340,
                    true,
                    new Dimension(794.6579),
                new TextSymbol("esse voluptatem ea",
                    new MapColor(194, 13, 245),
                    new MapColor(4, 160, 139),
                        new Dimension(212.6165),
                    new MapFont(new Dimension(110.2235),
                            "Garamond",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        250.7671,
                    new MapColor(178, 168, 64),
                    new MapColor(23, 85, 239),
                        497.7612,
                    HorizontalAlignment.Right,
                        true,
                        932.5412,
                        new Dimension(526.0212),
                        true),
                    true,
                    "Country = 'Canada'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("vel",
                SortOrder.Ascending,
                    "reiciendis"),
            new OrderedLayerOrderBy("quasi",
                SortOrder.Descending,
                    "corporis"),
            new OrderedLayerOrderBy("ut",
                SortOrder.Descending,
                    "rem"),
            new OrderedLayerOrderBy("sed",
                SortOrder.Ascending,
                    "totam")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("reprehenderit molestias ut",
                    new MapColor(64, 3, 152),
                    new MapColor(21, 163, 203),
                        new Dimension(877.2378),
                    new MapFont(new Dimension(195.6377),
                            "Helvetica",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        632.2534,
                    new MapColor(107, 105, 143),
                    new MapColor(74, 204, 149),
                        270.7499,
                    HorizontalAlignment.Right,
                        true,
                        804.3022,
                        new Dimension(717.6300),
                        true),
                    "at",
                [new ColorVariable("sunt",
                        "alias",
                    [new ColorStop(20.2201,
                        new MapColor(103, 232, 157),
                            "animi"),
                    new ColorStop(959.2753,
                        new MapColor(133, 90, 146),
                            "vitae")],
                    new VisualVariableLegendOptions(true,
                            "officiis nulla dolorum"),
                        "velit",
                        "sequi iste quis")],
                new AuthoringInfo(ClassificationMethod.StandardDeviation,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(117, 2, 152),
                            new MapColor(226, 115, 179)),
                        new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(29, 121, 100),
                            new MapColor(239, 217, 16)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(171, 68, 195),
                            new MapColor(135, 104, 190))]),
                        726.3934,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(848.6995,
                                778.9255),
                        new AuthoringInfoField1ClassBreakInfos(432.1328,
                                797.0307),
                        new AuthoringInfoField1ClassBreakInfos(308.5060,
                                552.0808),
                        new AuthoringInfoField1ClassBreakInfos(56.6021,
                                677.5487)],
                            "vel",
                            "quas",
                            "sint"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(137.1401,
                                416.8925),
                        new AuthoringInfoField1ClassBreakInfos(996.3146,
                                418.4106),
                        new AuthoringInfoField1ClassBreakInfos(189.6178,
                                394.0724)],
                            "omnis",
                            "deleniti",
                            "ut"),
                        ["nostrum",
                            "a"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "sequi",
                        true,
                    LengthUnit.Decimeters,
                        712.5332,
                        557.7984,
                        530.2555,
                        655.5909));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "voluptatem",
                    "quia",
                    "eaque");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2011, 3, 4, 13, 24, 31),
                    new DateTime(2001, 5, 19, 8, 23, 37));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("laboriosam",
                    "eum",
                new TimeExtent(new DateTime(2004, 7, 2, 3, 41, 12),
                        new DateTime(2001, 3, 17, 19, 3, 31)),
                new TimeInterval(TemporalTime.Seconds,
                        682.1683),
                    [new DateTime(2000, 6, 3, 19, 42, 39),
                        new DateTime(2017, 5, 2, 10, 4, 45),
                        new DateTime(2021, 7, 6, 13, 34, 35),
                        new DateTime(2008, 9, 4, 6, 29, 0)],
                    "America/Argentina/Buenos_Aires",
                    "est");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Months,
                    568.5952);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 11, 3, 11, 2, 4),
                    new DateTime(2014, 5, 25, 14, 1, 37));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
