@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("perspiciatis dolorem est")"
                        Copyright="@("ea")"
                        Opacity="@(0.1960)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.DestinationAtop)"
                        DefinitionExpression="@("velit")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("dolor")"
                        Effect="@(new Effect("repudiandae",
                            4574653.3284))"
                        FullExtent="@(new Extent(-60.7722,
                                -112.3732,
                                -19.3286,
                                -74.1243,
                                95.8525,
                                132.7509,
                                913.3048,
                                88.2252,
                            new SpatialReference(9,
                                    "magnam",
                                    "nemo",
                                    "cumque"),
                                true,
                                true))"
                        GeometryType="@("deleniti")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("quia")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("fugit")"
                        MaxScale="@(24568886.2499)"
                        MinScale="@(40926.1153)"
                        ObjectIdField="@("et")"
                        OutFields="@(["aut",
                            "aut",
                            "ut",
                            "ea"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(449.0203)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(6,
                                "qui",
                                "qui",
                                "consequatur"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Weeks)"
                            Value="@(689.5522)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("reiciendis")"
                            EndField="@("mollitia")"
                            Stops="@([new DateTime(2021, 10, 18, 0, 27, 56),
                                new DateTime(2009, 8, 18, 3, 53, 22),
                                new DateTime(2021, 5, 3, 21, 29, 26)])"
                            TimeZone="@("Asia/Kabul")"
                            TrackIdField="@("recusandae")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(205.1346)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2001, 4, 26, 18, 40, 21))"
                                End="@(new DateTime(2007, 8, 1, 3, 35, 52))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2011, 8, 15, 16, 34, 32))"
                            End="@(new DateTime(2012, 9, 26, 22, 8, 53))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(183, 185, 198),
                                        new MapColor(46, 65, 167))]),
                                    760.7086,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(585.9904,
                                            576.4178),
                                    new AuthoringInfoField1ClassBreakInfos(351.1174,
                                            315.5267),
                                    new AuthoringInfoField1ClassBreakInfos(974.2269,
                                            787.6650)],
                                        "eos",
                                        "tempore",
                                        "minima"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(586.2242,
                                            962.4822),
                                    new AuthoringInfoField1ClassBreakInfos(778.3919,
                                            271.2908),
                                    new AuthoringInfoField1ClassBreakInfos(606.7708,
                                            922.6885)],
                                        "totam",
                                        "soluta",
                                        "incidunt"),
                                    ["consequuntur",
                                        "dolorem"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "porro",
                                    true,
                                LengthUnit.Meters,
                                    345.3982,
                                    654.7751,
                                    279.2326,
                                    757.8245))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("autem placeat sed")"
                            StringContent="@("quasi")"
                            OutFields="@(["ratione",
                                "nemo",
                                "temporibus"])"
                            FieldInfos="@([new FieldInfo("name",
                                    "dolor",
                                    "aut",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("id",
                                    "in",
                                    "officia",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("avatar",
                                    "veniam",
                                    "voluptatem",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new AttachmentsPopupContent("quo iste molestias",
                                    "ratione officiis possimus fugiat quia similique",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "id",
                                    "nulla quo facere",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "group",
                                    "aut maiores omnis",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("eius amet fugiat",
                                    "https://picsum.photos/640/480/?image=268",
                                    "2bad5fea-9970-bea2-2f1f-7587aa1c1b4f",
                                    () => { Console.WriteLine("possimus"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "consequuntur"),
                            new ActionButton("eos exercitationem eum",
                                    "https://picsum.photos/640/480/?image=841",
                                    "b47cefb9-c6cb-cc27-ab31-775c10a49c54",
                                    () => { Console.WriteLine("dicta"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "iusto"),
                            new ActionToggle("ea vero enim",
                                    "8098a010-a6a2-e3be-8bdf-3a92e6e5a521",
                                    () => { Console.WriteLine("corporis"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "phone",
                                    "adipisci"),
                            new ActionButton("placeat nam quo",
                                    "https://picsum.photos/640/480/?image=547",
                                    "2fe36402-dde5-6929-64e2-db47c4e1dae0",
                                    () => { Console.WriteLine("repudiandae"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "mollitia")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("enim")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("consectetur")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterRight)"
                            LabelExpression="@("expedita")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(4696560.7909)"
                            MinScale="@(17973.9788)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(722.5566))"
                            Symbol="@(new TextSymbol("dolorum hic optio",
                                new MapColor(160, 145, 198),
                                new MapColor(190, 205, 117),
                                    new Dimension(188.8458),
                                new MapFont(new Dimension(341.5618),
                                        "Palatino",
                                    MapFontStyle.Italic,
                                    FontWeight.Normal,
                                    TextDecoration.LineThrough),
                                    324.0378,
                                new MapColor(169, 225, 52),
                                new MapColor(143, 123, 193),
                                    669.3142,
                                HorizontalAlignment.Center,
                                    true,
                                    28.5239,
                                    new Dimension(249.0290),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Street = '123 Main St.'")">
                        </Label>
                        <Field 
                            Name="@("title")"
                            Alias="@("reiciendis")"
                            Description="@("velit in consectetur magni sit tempora")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "est" })"
                            ValueType="@(FieldValueType.None)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("nobis",
                                24076513.7508),
                                new Effect("veritatis",
                                    26661056.7067),
                                new Effect("sequi",
                                    16678684.6995),
                                new Effect("qui",
                                    6022322.7675)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(864.4241,
                                new Polygon([new MapPath([new MapPoint([326.0974,
                                            523.4271,
                                            160.3086,
                                            828.7673]),
                                        new MapPoint([453.3308,
                                            464.3195,
                                            458.7471,
                                            4.6816])]),
                                        new MapPath([new MapPoint([897.5761,
                                                184.5965,
                                                662.0398,
                                                568.2072]),
                                            new MapPoint([627.6647,
                                                714.0054,
                                                231.5889,
                                                606.7761])])],
                                    new SpatialReference(4,
                                            "qui",
                                            "totam",
                                            "consequatur"),
                                    new Point(-56.8517,
                                            1.9580,
                                            60.0757,
                                            54.0033,
                                            567.9798,
                                        new SpatialReference(8,
                                                "et",
                                                "dicta",
                                                "eos"),
                                            true,
                                            true,
                                            975.9810),
                                        true,
                                        true,
                                        true),
                                    [4,
                                        5],
                                SpatialRelationship.Within,
                                new TimeExtent(new DateTime(2009, 5, 2, 13, 11, 32),
                                        new DateTime(2016, 9, 21, 5, 8, 16)),
                                    QueryUnits.UsNauticalMiles,
                                    "Phone = '555-555-5555'"))"
                            IncludedEffect="@([new Effect("ea",
                                8019839.2662),
                                new Effect("laborum",
                                    3401261.4592)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "velit illum aut"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(454.0185)"
                            Unit="@(ElevationUnit.Feet)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["et",
                    "dolorem"],
                    ["status",
                        "title"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("token");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("id",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([485.2929,
                                197.1807,
                                798.8449]),
                            new MapPoint([149.3983,
                                967.1277,
                                453.5362])]),
                            new MapPath([new MapPoint([904.3983,
                                    376.9185,
                                    45.4118]),
                                new MapPoint([84.2464,
                                    959.4974,
                                    853.6410]),
                                new MapPoint([408.0529,
                                    920.6503,
                                    717.3796])])],
                        new SpatialReference(7,
                                "dolorem",
                                "et",
                                "voluptatem"),
                        new Point(169.7062,
                                -60.6761,
                                -86.0209,
                                -55.8691,
                                438.2083,
                            new SpatialReference(9,
                                    "unde",
                                    "qui",
                                    "aut"),
                                true,
                                true,
                                532.2323),
                            true,
                            true,
                            true),
                    new TextSymbol("delectus ea at",
                        new MapColor(81, 236, 32),
                        new MapColor(106, 170, 94),
                            new Dimension(899.5652),
                        new MapFont(new Dimension(917.5012),
                                "Georgia",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            10.4172,
                        new MapColor(76, 91, 18),
                        new MapColor(163, 40, 153),
                            791.8519,
                        HorizontalAlignment.Right,
                            true,
                            479.8189,
                            new Dimension(376.4251),
                            true),
                    new PopupTemplate("quae mollitia distinctio",
                            "fugiat",
                            ["consectetur",
                                "officia"],
                        [new FieldInfo("group",
                                "neque",
                                "saepe",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Stddev),
                        new FieldInfo("email",
                                "velit",
                                "aut",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("password",
                                "aspernatur",
                                "sed",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("title",
                                "molestiae",
                                "voluptatem",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Count)],
                        [new AttachmentsPopupContent("ad velit molestiae",
                                "dolore hic repudiandae modi libero unde",
                                AttachmentsPopupContentDisplayType.Preview),
                        new RelationshipPopupContent("aut et quam",
                                "ex veniam cum sit provident",
                                3,
                                "consequatur",
                            [new RelatedRecordsInfoFieldOrder("assumenda",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("quia",
                                OrderBy.Asc)],
                                9),
                        new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "odio",
                                    "nihil aut eligendi"))],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "group",
                                "voluptatem pariatur voluptates",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "status",
                                "nisi dolor optio",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "createdAt",
                                "voluptate voluptatibus natus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("et perspiciatis quisquam",
                                "43d2caa1-b3d1-7248-c922-5baa28645057",
                                () => { Console.WriteLine("ea"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "password",
                                "accusantium")]),
                        new AttributesDictionary(),
                        true,
                        "officiis",
                        "hic",
                        new GraphicOrigin(Guid.NewGuid(),
                            "quibusdam",
                            3))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([1,
                    9,
                    8,
                    1],
                    true,
                    881.6388,
                    537.3960,
                    "9.8.2.4",
                new Polygon([new MapPath([new MapPoint([882.4656,
                            746.9978,
                            646.7982]),
                        new MapPoint([606.2281,
                            673.8073,
                            592.0182]),
                        new MapPoint([556.3354,
                            877.7786,
                            521.0756,
                            186.5777]),
                        new MapPoint([590.4430,
                            382.6696,
                            402.8530,
                            973.0646])]),
                        new MapPath([new MapPoint([81.9892,
                                219.7714,
                                882.4120]),
                            new MapPoint([130.3102,
                                192.3569]),
                            new MapPoint([394.4804,
                                199.8544,
                                803.2165])]),
                        new MapPath([new MapPoint([533.9700,
                                978.4065]),
                            new MapPoint([562.1167,
                                133.6313,
                                513.8792,
                                836.4295])]),
                        new MapPath([new MapPoint([634.4423,
                                661.6713]),
                            new MapPoint([819.7083,
                                685.9722,
                                67.6695]),
                            new MapPoint([972.7245,
                                301.1697]),
                            new MapPoint([623.1268,
                                736.4941,
                                303.2928])])],
                    new SpatialReference(7,
                            "eum",
                            "animi",
                            "autem"),
                    new Point(-150.9050,
                            26.6839,
                            99.3377,
                            -30.7075,
                            982.2619,
                        new SpatialReference(6,
                                "assumenda",
                                "dolor",
                                "illo"),
                            true,
                            true,
                            150.9580),
                        true,
                        true,
                        true),
                    5,
                    ["omnis",
                        "id"],
                    "corporis",
                    new DateTime(2015, 6, 3, 11, 52, 48),
                    814.6179,
                    5,
                    "consequatur",
                    8),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([7,
                    1],
                    true,
                    43.2837,
                    163.2111,
                    "9.9.8.4",
                new Point(-161.0991,
                        -81.0231,
                        -72.5693,
                        -39.2018,
                        839.0502,
                    new SpatialReference(9,
                            "vel",
                            "eaque",
                            "omnis"),
                        true,
                        true,
                        393.0859),
                    6,
                    ["et",
                        "voluptatem",
                        "perferendis"],
                    "eius",
                    new DateTime(2018, 5, 5, 1, 52, 46),
                    430.8545,
                    4,
                    "enim",
                    5),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([4,
                    2],
                    true,
                    15.2463,
                    134.8733,
                    "3.5.7.5",
                new Polygon([new MapPath([new MapPoint([21.8947,
                            721.6866,
                            169.0861]),
                        new MapPoint([840.6713,
                            473.1584,
                            141.4841,
                            128.5108]),
                        new MapPoint([510.7390,
                            885.6312]),
                        new MapPoint([206.3880,
                            381.8641])])],
                    new SpatialReference(5,
                            "est",
                            "soluta",
                            "dolor"),
                    new Point(122.5011,
                            12.7633,
                            -165.0869,
                            -37.1294,
                            886.2213,
                        new SpatialReference(8,
                                "voluptatem",
                                "non",
                                "nihil"),
                            true,
                            true,
                            516.7689),
                        true,
                        true,
                        true),
                    6,
                    ["sit",
                        "tenetur",
                        "temporibus",
                        "temporibus"],
                    "asperiores",
                    new DateTime(2005, 8, 11, 17, 13, 36),
                    339.0568,
                    3,
                    "officia",
                    9),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([3,
                    5,
                    1,
                    4],
                    true,
                    961.9863,
                    404.5922,
                    "3.7.1.7",
                new Point(54.6410,
                        12.2423,
                        19.3107,
                        -70.2849,
                        960.6054,
                    new SpatialReference(2,
                            "dolores",
                            "adipisci",
                            "itaque"),
                        true,
                        true,
                        178.4877),
                    2,
                    ["suscipit",
                        "et",
                        "qui"],
                    "suscipit",
                    new DateTime(2010, 7, 27, 13, 40, 51),
                    770.8085,
                    4,
                    "quia",
                    4),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Saturation;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("rerum suscipit est",
                    "ut",
                    ["ea",
                        "debitis"],
                [new FieldInfo("category",
                        "quis",
                        "doloremque",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.DayShortMonthYearLongTime),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("token",
                        "eos",
                        "qui",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateShortTime),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("email",
                        "et",
                        "ut",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("title",
                        "quaerat",
                        "accusantium",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Avg)],
                [new TextPopupContent("aut quia eos"),
                new TextPopupContent("autem facilis eos")],
                [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "avatar",
                        "consectetur nisi voluptas",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("vitae culpa et",
                        "8eeba05d-61d7-e53c-108c-233d5af188bf",
                        () => { Console.WriteLine("eveniet"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "email",
                        "quas"),
                new ActionButton("sed deserunt reprehenderit",
                        "https://picsum.photos/640/480/?image=1027",
                        "314712ba-1dd4-0578-d1e0-1953a66e0c2b",
                        () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "sed"),
                new ActionButton("voluptas occaecati quasi",
                        "https://picsum.photos/640/480/?image=978",
                        "935528a6-61ca-3cbb-a3c0-52060590a04d",
                        () => { Console.WriteLine("repellendus"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "veniam"),
                new ActionButton("asperiores laudantium nobis",
                        "https://picsum.photos/640/480/?image=1049",
                        "f857b5de-0c17-134b-4711-326e0fe8c2c4",
                        () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "voluptates")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("var length = Geometry($feature).length; return length;",
                        "ipsam quo iusto"),
                ElevationInfoMode.RelativeToScene,
                    425.8742,
                ElevationUnit.Yards);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("et",
                    32637421.6989),
                    new Effect("rerum",
                        3308577.3864)],
                    true,
                new FeatureFilter(209.7874,
                    new Polygon([new MapPath([new MapPoint([143.1469,
                                472.9522]),
                            new MapPoint([386.8979,
                                644.7944,
                                494.8401])]),
                            new MapPath([new MapPoint([282.2217,
                                    400.9700]),
                                new MapPoint([305.3132,
                                    302.1223])]),
                            new MapPath([new MapPoint([387.4834,
                                    552.2992]),
                                new MapPoint([907.2478,
                                    15.1083,
                                    742.8446,
                                    52.6240]),
                                new MapPoint([85.9989,
                                    729.6371,
                                    893.6851])]),
                            new MapPath([new MapPoint([612.0376,
                                    384.0558,
                                    303.5015,
                                    506.1555]),
                                new MapPoint([584.4546,
                                    739.7290,
                                    328.4563,
                                    318.3630]),
                                new MapPoint([15.7313,
                                    429.4237,
                                    113.9490]),
                                new MapPoint([310.6497,
                                    31.5466])])],
                        new SpatialReference(1,
                                "quam",
                                "mollitia",
                                "ut"),
                        new Point(-156.7639,
                                -51.8787,
                                117.2059,
                                61.4817,
                                36.5759,
                            new SpatialReference(8,
                                    "ut",
                                    "voluptates",
                                    "qui"),
                                true,
                                true,
                                875.6028),
                            true,
                            true,
                            true),
                        [2,
                            8],
                    SpatialRelationship.Intersects,
                    new TimeExtent(new DateTime(2022, 1, 20, 18, 39, 0),
                            new DateTime(2006, 4, 4, 7, 40, 52)),
                        QueryUnits.NauticalMiles,
                        "Province = 'Ontario'"),
                    [new Effect("similique",
                        33348971.7369),
                        new Effect("illo",
                            4766831.6900)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "category",
                    "error",
                    "aperiam voluptas recusandae ad officia nulla",
                    4,
                    true,
                    true,
                    new { Value = "nobis" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(162.2451,
                    -126.9427,
                    71.7506,
                    -61.1736,
                    117.9623,
                    124.8010,
                    985.6371,
                    983.2654,
                new SpatialReference(1,
                        "magnam",
                        "quo",
                        "soluta"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterCenter,
                    "eos",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    45002850.0795,
                    4403.2153,
                    true,
                    new Dimension(510.3658),
                new TextSymbol("quidem eum aut",
                    new MapColor(185, 119, 222),
                    new MapColor(82, 53, 241),
                        new Dimension(199.6360),
                    new MapFont(new Dimension(674.1933),
                            "Arial",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        703.6955,
                    new MapColor(253, 179, 119),
                    new MapColor(212, 20, 57),
                        337.8907,
                    HorizontalAlignment.Right,
                        true,
                        960.0163,
                        new Dimension(753.1529),
                        true),
                    true,
                    "City = 'Toronto'"),
            new Label(LabelPlacement.BelowLeft,
                    "alias",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    6307251.9027,
                    28126.6157,
                    true,
                    new Dimension(580.1037),
                new TextSymbol("earum praesentium fugiat",
                    new MapColor(49, 218, 135),
                    new MapColor(202, 64, 212),
                        new Dimension(631.3677),
                    new MapFont(new Dimension(215.5725),
                            "Georgia",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        174.1824,
                    new MapColor(103, 82, 177),
                    new MapColor(198, 32, 124),
                        457.3911,
                    HorizontalAlignment.Left,
                        true,
                        158.2291,
                        new Dimension(824.7299),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.AboveAfter,
                    "eveniet",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    18765764.3255,
                    2917.0540,
                    true,
                    new Dimension(913.4984),
                new TextSymbol("ipsa sunt natus",
                    new MapColor(134, 114, 113),
                    new MapColor(196, 125, 24),
                        new Dimension(691.5888),
                    new MapFont(new Dimension(607.5911),
                            "Garamond",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        151.9228,
                    new MapColor(132, 216, 100),
                    new MapColor(4, 251, 176),
                        411.5414,
                    HorizontalAlignment.Right,
                        true,
                        818.2699,
                        new Dimension(659.4678),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.AboveAlong,
                    "aut",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    21462606.1305,
                    28564.8761,
                    true,
                    new Dimension(901.2786),
                new TextSymbol("explicabo et et",
                    new MapColor(96, 129, 55),
                    new MapColor(47, 177, 87),
                        new Dimension(387.9023),
                    new MapFont(new Dimension(87.4160),
                            "Arial",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        659.8472,
                    new MapColor(144, 172, 239),
                    new MapColor(219, 74, 144),
                        429.7842,
                    HorizontalAlignment.Left,
                        true,
                        897.2694,
                        new Dimension(994.1271),
                        true),
                    true,
                    "Street = '123 Main St.'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("odit",
                SortOrder.Ascending,
                    "sunt"),
            new OrderedLayerOrderBy("sint",
                SortOrder.Ascending,
                    "qui"),
            new OrderedLayerOrderBy("aut",
                SortOrder.Ascending,
                    "aliquam")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.EqualInterval,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(97, 6, 46),
                        new MapColor(22, 90, 74)),
                        815.7352,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(268.7244,
                                150.6520),
                        new AuthoringInfoField1ClassBreakInfos(153.4401,
                                653.3969)],
                            "repellendus",
                            "soluta",
                            "quae"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(491.5874,
                                456.0153)],
                            "dolores",
                            "aliquam",
                            "et"),
                        ["doloremque",
                            "quae"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "quo",
                        true,
                    LengthUnit.UsFeet,
                        984.8617,
                        69.2746,
                        553.5896,
                        130.9945),
                new PictureFillSymbol("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0",
                    new Dimension(813.9078),
                    new Dimension(931.8730),
                    new Dimension(917.9789),
                    new Dimension(990.1268),
                    148.9770,
                    59.2585,
                    new Outline(new MapColor(174, 110, 58),
                        new Dimension(634.9827),
                        SimpleLineSymbolStyle.ShortDashDot,
                        Cap.Round,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(210, 175, 147),
                            LinePlacement.End,
                            LineSymbolMarkerStyle.Cross),
                        83.2426),
                    new MapColor(41, 85, 12)),
                    "reiciendis",
                    new DefaultSymbol(),
                    "vitae",
                    "non",
                    "fuga",
                    "voluptas",
                new UniqueValueRendererLegendOptions("dolorem velit laboriosam"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("suscipit",
                        new TextSymbol("aut non tempora",
                            new MapColor(83, 2, 37),
                            new MapColor(76, 137, 217),
                                new Dimension(276.7272),
                            new MapFont(new Dimension(368.9790),
                                    "Bookman",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                349.8919,
                            new MapColor(246, 97, 23),
                            new MapColor(199, 14, 240),
                                215.0414,
                            HorizontalAlignment.Left,
                                true,
                                619.6565,
                                new Dimension(772.8732),
                                true),
                        [new UniqueValue("molestiae",
                                "autem",
                                "quibusdam"),
                        new UniqueValue("et",
                                "natus",
                                "reiciendis"),
                        new UniqueValue("incidunt",
                                "reprehenderit",
                                "nesciunt")]),
                    new UniqueValueClass("labore",
                        new TextSymbol("ex deleniti enim",
                            new MapColor(98, 227, 26),
                            new MapColor(204, 122, 69),
                                new Dimension(540.8278),
                            new MapFont(new Dimension(573.4648),
                                    "Georgia",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                297.7629,
                            new MapColor(240, 180, 147),
                            new MapColor(164, 130, 42),
                                194.5909,
                            HorizontalAlignment.Center,
                                true,
                                13.4900,
                                new Dimension(994.0461),
                                true),
                        [new UniqueValue("accusantium",
                                "qui",
                                "cupiditate"),
                        new UniqueValue("cumque",
                                "aut",
                                "consequatur"),
                        new UniqueValue("blanditiis",
                                "qui",
                                "recusandae"),
                        new UniqueValue("ut",
                                "voluptate",
                                "debitis")])],
                        "ullam"),
                new UniqueValueGroup([new UniqueValueClass("quo",
                        new TextSymbol("est omnis necessitatibus",
                            new MapColor(220, 251, 11),
                            new MapColor(125, 31, 165),
                                new Dimension(864.9654),
                            new MapFont(new Dimension(981.9739),
                                    "Verdana",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                842.6061,
                            new MapColor(63, 27, 21),
                            new MapColor(190, 133, 127),
                                825.4793,
                            HorizontalAlignment.Right,
                                true,
                                121.0726,
                                new Dimension(540.0253),
                                true),
                        [new UniqueValue("dolores",
                                "autem",
                                "ducimus"),
                        new UniqueValue("id",
                                "velit",
                                "odio")]),
                    new UniqueValueClass("aut",
                        new TextSymbol("asperiores id in",
                            new MapColor(100, 118, 163),
                            new MapColor(76, 102, 175),
                                new Dimension(79.7562),
                            new MapFont(new Dimension(806.0032),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.None),
                                299.2557,
                            new MapColor(169, 224, 243),
                            new MapColor(192, 158, 163),
                                76.3892,
                            HorizontalAlignment.Center,
                                true,
                                165.5505,
                                new Dimension(169.7476),
                                true),
                        [new UniqueValue("sunt",
                                "fuga",
                                "tempora"),
                        new UniqueValue("quis",
                                "dicta",
                                "et")])],
                        "enim"),
                new UniqueValueGroup([new UniqueValueClass("velit",
                        new TextSymbol("rerum eum qui",
                            new MapColor(236, 182, 194),
                            new MapColor(40, 105, 175),
                                new Dimension(354.4639),
                            new MapFont(new Dimension(568.0889),
                                    "Helvetica",
                                MapFontStyle.Italic,
                                FontWeight.Normal,
                                TextDecoration.None),
                                217.0917,
                            new MapColor(76, 104, 134),
                            new MapColor(134, 60, 113),
                                141.0223,
                            HorizontalAlignment.Right,
                                true,
                                209.6291,
                                new Dimension(801.1232),
                                true),
                        [new UniqueValue("ex",
                                "libero",
                                "ut"),
                        new UniqueValue("recusandae",
                                "sed",
                                "aut"),
                        new UniqueValue("et",
                                "quod",
                                "fugiat"),
                        new UniqueValue("itaque",
                                "vitae",
                                "sint")]),
                    new UniqueValueClass("velit",
                        new TextSymbol("aut in modi",
                            new MapColor(47, 57, 138),
                            new MapColor(114, 8, 246),
                                new Dimension(797.5514),
                            new MapFont(new Dimension(902.7369),
                                    "Georgia",
                                MapFontStyle.Normal,
                                FontWeight.Lighter,
                                TextDecoration.Underline),
                                65.0674,
                            new MapColor(21, 48, 234),
                            new MapColor(173, 57, 203),
                                414.6830,
                            HorizontalAlignment.Right,
                                true,
                                771.4138,
                                new Dimension(241.6972),
                                true),
                        [new UniqueValue("non",
                                "et",
                                "ut"),
                        new UniqueValue("aut",
                                "non",
                                "voluptas"),
                        new UniqueValue("similique",
                                "delectus",
                                "non")]),
                    new UniqueValueClass("quis",
                        new TextSymbol("nostrum atque vel",
                            new MapColor(231, 251, 132),
                            new MapColor(55, 108, 149),
                                new Dimension(266.6455),
                            new MapFont(new Dimension(470.7067),
                                    "Georgia",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.Underline),
                                451.7712,
                            new MapColor(240, 144, 62),
                            new MapColor(191, 118, 168),
                                801.0496,
                            HorizontalAlignment.Left,
                                true,
                                669.6653,
                                new Dimension(871.8701),
                                true),
                        [new UniqueValue("ipsam",
                                "numquam",
                                "ut"),
                        new UniqueValue("quia",
                                "dicta",
                                "eum"),
                        new UniqueValue("est",
                                "est",
                                "corporis")])],
                        "nesciunt")],
                [new UniqueValueInfo("qui",
                    new TextSymbol("molestiae quae ducimus",
                        new MapColor(40, 21, 77),
                        new MapColor(134, 56, 147),
                            new Dimension(282.3876),
                        new MapFont(new Dimension(581.2839),
                                "Courier New",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.None),
                            832.5266,
                        new MapColor(248, 126, 231),
                        new MapColor(80, 37, 123),
                            960.2166,
                        HorizontalAlignment.Right,
                            true,
                            680.4699,
                            new Dimension(629.2173),
                            true),
                        "sed")],
                    "sequi",
                    "magnam maxime laborum");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "libero",
                    "ut",
                    "earum");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2003, 3, 9, 1, 31, 19),
                    new DateTime(2021, 3, 26, 18, 6, 38));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("nobis",
                    "vero",
                new TimeExtent(new DateTime(2018, 7, 2, 3, 40, 22),
                        new DateTime(2020, 11, 8, 11, 1, 20)),
                new TimeInterval(TemporalTime.Years,
                        562.0783),
                    [new DateTime(2004, 1, 22, 3, 21, 28),
                        new DateTime(2020, 7, 13, 18, 0, 51),
                        new DateTime(2018, 1, 26, 0, 4, 53),
                        new DateTime(2020, 11, 4, 4, 38, 12)],
                    "Australia/Hobart",
                    "earum");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    286.2006);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 10, 25, 2, 48, 51),
                    new DateTime(2015, 9, 16, 18, 41, 54));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
