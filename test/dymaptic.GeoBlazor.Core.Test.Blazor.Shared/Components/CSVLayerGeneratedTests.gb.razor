@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("nisi rerum nisi")"
                        Copyright="@("provident")"
                        Opacity="@(0.7251)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.ColorBurn)"
                        DefinitionExpression="@("aliquam")"
                        Delimiter="@(CSVDelimiter.Pipe)"
                        DisplayField="@("rerum")"
                        Effect="@(new Effect("quam",
                            7234854.0288))"
                        FullExtent="@(new Extent(-168.7882,
                                62.9257,
                                -85.7695,
                                87.8345,
                                164.9565,
                                975.2847,
                                557.3710,
                                216.3839,
                            new SpatialReference(9,
                                    "recusandae",
                                    "nesciunt",
                                    "ea"),
                                true,
                                true))"
                        GeometryType="@("sunt")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("non")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("mollitia")"
                        MaxScale="@(591086.3361)"
                        MinScale="@(24585.4889)"
                        ObjectIdField="@("qui")"
                        OutFields="@(["ratione",
                            "amet"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(739.3082)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(4,
                                "dolorem",
                                "laboriosam",
                                "autem"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(382.6165)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("laboriosam")"
                            EndField="@("possimus")"
                            Stops="@([new DateTime(2022, 3, 24, 6, 47, 2),
                                new DateTime(2023, 8, 8, 16, 44, 22)])"
                            TimeZone="@("Europe/Kiev")"
                            TrackIdField="@("eaque")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Weeks)"
                                Value="@(9.3923)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2007, 7, 7, 21, 0, 30))"
                                End="@(new DateTime(2011, 8, 8, 5, 55, 3))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2005, 8, 1, 10, 2, 5))"
                            End="@(new DateTime(2003, 10, 26, 9, 38, 17))">
                        </TimeExtent>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(115, 191, 3),
                                        new MapColor(13, 158, 74)),
                                    new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(169, 233, 107),
                                        new MapColor(2, 33, 110)),
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(219, 249, 179),
                                        new MapColor(5, 94, 184))]),
                                    402.6729,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(218.5648,
                                            238.5451),
                                    new AuthoringInfoField1ClassBreakInfos(421.2788,
                                            5.0185),
                                    new AuthoringInfoField1ClassBreakInfos(264.4116,
                                            988.2025),
                                    new AuthoringInfoField1ClassBreakInfos(306.0780,
                                            683.7890)],
                                        "laudantium",
                                        "fugiat",
                                        "saepe"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(880.3962,
                                            126.2261),
                                    new AuthoringInfoField1ClassBreakInfos(326.7163,
                                            661.0172)],
                                        "ab",
                                        "iusto",
                                        "ut"),
                                    ["debitis",
                                        "labore"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "enim",
                                    true,
                                LengthUnit.UsFeet,
                                    998.8660,
                                    878.2617,
                                    627.2414,
                                    213.5365))">
                        </UniqueValueRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("nam")"
                            ApiKey="@("consequuntur")"
                            AvgRating="@(625.2727)"
                            Categories="@(["labore",
                                "laborum",
                                "labore",
                                "assumenda"])"
                            Created="@(new DateTime(2003, 6, 3, 12, 6, 38))"
                            Culture="@("est")"
                            Description="@("et accusantium quae accusamus est voluptatem ea")"
                            Extent="@(new Extent(-28.5693,
                                    131.2007,
                                    -3.2553,
                                    -3.0669,
                                    613.2470,
                                    701.7993,
                                    98.7006,
                                    19.2707,
                                new SpatialReference(9,
                                        "quas",
                                        "earum",
                                        "et"),
                                    true,
                                    true))"
                            GroupCategories="@(["et",
                                "sed",
                                "dolore",
                                "eum"])"
                            LicenseInfo="@("inventore")"
                            Modified="@(new DateTime(2003, 8, 24, 2, 37, 47))"
                            Name="@("phone")"
                            NumComments="@(520.3459)"
                            NumRatings="@(830.3757)"
                            NumViews="@(470.1608)"
                            Owner="@("Genoveva White")"
                            OwnerFolder="@("Briana Marvin")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["blanditiis",
                                        "qui",
                                        "amet"],
                                    "illum",
                                    "culpa",
                                    "et",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("architecto")"
                            Screenshots="@(["in",
                                "animi",
                                "cum",
                                "aspernatur"])"
                            Size="@(6)"
                            Snippet="@("voluptatum")"
                            Tags="@(["earum",
                                "maxime"])"
                            Title="@("eligendi et officia")"
                            TypeKeywords="@(["officia",
                                "modi"])"
                            Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("pariatur et aut")"
                            StringContent="@("laborum")"
                            OutFields="@(["perspiciatis",
                                "vitae",
                                "adipisci"])"
                            FieldInfos="@([new FieldInfo("avatar",
                                    "suscipit",
                                    "corrupti",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("name",
                                    "debitis",
                                    "est",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongDate),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("password",
                                    "et",
                                    "dolorem",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("status",
                                        "aut",
                                        "enim",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.ShortDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("name",
                                        "sed",
                                        "non",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.DayShortMonthYear),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("id",
                                        "enim",
                                        "et",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                    "explicabo cum ea accusantium",
                                    "doloremque et aliquid"),
                            new RelationshipPopupContent("placeat modi molestias",
                                    "aliquid quisquam aliquid sunt similique soluta deleniti",
                                    1,
                                    "magni",
                                [new RelatedRecordsInfoFieldOrder("veritatis",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("illo",
                                    OrderBy.Asc)],
                                    6)])"
                            ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "group",
                                    "et voluptatem consequatur",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "group",
                                    "libero quibusdam eveniet",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("blanditiis sint mollitia",
                                    "4abcedb0-1495-5255-db37-22416f76ec35",
                                    () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "ipsa"),
                            new ActionToggle("adipisci non enim",
                                    "8624d590-35cb-8852-e6e3-c579c2b17541",
                                    () => { Console.WriteLine("placeat"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "similique")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("et")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("dolor")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveStart)"
                            LabelExpression="@("non")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(43076402.9613)"
                            MinScale="@(43618.9264)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(796.2019))"
                            Symbol="@(new TextSymbol("sequi iusto et",
                                new MapColor(116, 209, 147),
                                new MapColor(136, 168, 59),
                                    new Dimension(36.2459),
                                new MapFont(new Dimension(565.4886),
                                        "Palatino",
                                    MapFontStyle.Oblique,
                                    FontWeight.Normal,
                                    TextDecoration.LineThrough),
                                    76.9838,
                                new MapColor(211, 207, 159),
                                new MapColor(82, 216, 125),
                                    382.8239,
                                HorizontalAlignment.Left,
                                    true,
                                    858.3618,
                                    new Dimension(380.9362),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Phone = '555-555-5555'")">
                        </Label>
                        <Field 
                            Name="@("createdAt")"
                            Alias="@("animi")"
                            Description="@("excepturi quis aperiam ullam nihil quas")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "eos" })"
                            ValueType="@(FieldValueType.NameOrTitle)"
                            Domain="@(new RangeDomain("aperiam",
                                    "ea",
                                    "token"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("eveniet",
                                14658114.1366),
                                new Effect("nobis",
                                    7480817.4013),
                                new Effect("quam",
                                    4227050.5385),
                                new Effect("repudiandae",
                                    31568072.7692)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(779.2895,
                                new Polyline([new MapPath([new MapPoint([544.0309,
                                            498.1241,
                                            76.7926,
                                            516.0453]),
                                        new MapPoint([949.0061,
                                            360.7492,
                                            535.5856,
                                            671.0828]),
                                        new MapPoint([693.2859,
                                            12.4369,
                                            672.8342]),
                                        new MapPoint([315.6092,
                                            544.8106,
                                            369.4774,
                                            251.7140])]),
                                        new MapPath([new MapPoint([26.5616,
                                                314.8286,
                                                189.7402,
                                                746.4300]),
                                            new MapPoint([863.5331,
                                                376.3980]),
                                            new MapPoint([901.4492,
                                                339.4960]),
                                            new MapPoint([624.9751,
                                                354.1283,
                                                296.6207,
                                                477.4922])])],
                                    new SpatialReference(8,
                                            "maxime",
                                            "omnis",
                                            "saepe"),
                                        true,
                                        true),
                                    [5,
                                        1,
                                        4],
                                SpatialRelationship.Disjoint,
                                new TimeExtent(new DateTime(2006, 7, 25, 10, 18, 33),
                                        new DateTime(2011, 10, 5, 9, 58, 36)),
                                    QueryUnits.Meters,
                                    "City = 'Toronto'"))"
                            IncludedEffect="@([new Effect("expedita",
                                15424527.9194),
                                new Effect("vel",
                                    25484697.6578),
                                new Effect("voluptatem",
                                    30081269.6400),
                                new Effect("aut",
                                    25603623.9531)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "ut facilis tenetur"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(334.8319)"
                            Unit="@(ElevationUnit.Meters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["expedita",
                    "aut",
                    "eos"],
                    ["createdAt",
                        "comment"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("createdAt");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("comment",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([283.8935,
                                699.3228,
                                347.3469]),
                            new MapPoint([663.6181,
                                17.4269,
                                0.5441])]),
                            new MapPath([new MapPoint([416.8174,
                                    848.3895,
                                    439.2900]),
                                new MapPoint([773.0583,
                                    676.9617])]),
                            new MapPath([new MapPoint([292.0245,
                                    470.8043,
                                    158.1836,
                                    334.8475]),
                                new MapPoint([892.0651,
                                    251.8953,
                                    151.7492,
                                    464.2191]),
                                new MapPoint([310.9042,
                                    175.4627,
                                    40.3340])]),
                            new MapPath([new MapPoint([305.5456,
                                    932.1042,
                                    794.8485,
                                    305.5087]),
                                new MapPoint([558.2728,
                                    414.3827,
                                    622.6050,
                                    985.5506]),
                                new MapPoint([791.3118,
                                    729.4308,
                                    355.7090])])],
                        new SpatialReference(9,
                                "eos",
                                "facere",
                                "aut"),
                        new Point(170.2789,
                                62.4482,
                                100.0217,
                                -54.0802,
                                413.1051,
                            new SpatialReference(7,
                                    "aut",
                                    "numquam",
                                    "earum"),
                                true,
                                true,
                                612.6229),
                            true,
                            true,
                            true),
                    new TextSymbol("aut perspiciatis aut",
                        new MapColor(111, 93, 163),
                        new MapColor(124, 155, 69),
                            new Dimension(987.1059),
                        new MapFont(new Dimension(691.3779),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            449.4887,
                        new MapColor(211, 20, 237),
                        new MapColor(233, 162, 80),
                            742.5438,
                        HorizontalAlignment.Left,
                            true,
                            19.4251,
                            new Dimension(268.8736),
                            true),
                    new PopupTemplate("delectus consectetur possimus",
                            "repudiandae",
                            ["est",
                                "reiciendis"],
                        [new FieldInfo("avatar",
                                "est",
                                "eveniet",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("category",
                                "laudantium",
                                "itaque",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortDateLeLongTime24),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("email",
                                "aut",
                                "sed",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("group",
                                "est",
                                "quasi",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongDateLongTime24),
                                true,
                                true,
                            StatisticType.Min)],
                        [new TextPopupContent("cupiditate qui voluptatem"),
                        new AttachmentsPopupContent("non et vel",
                                "eveniet eos dolorem alias quas ut at",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "comment",
                                "quia et consectetur",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "group",
                                "numquam aut quibusdam",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "group",
                                "necessitatibus et natus",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "id",
                                "laboriosam quod a",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("dolorem voluptate quia",
                                "https://picsum.photos/640/480/?image=758",
                                "fe5dcfa2-d48e-6bbd-0a33-8f775a3ad09c",
                                () => { Console.WriteLine("quae"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "iusto"),
                        new ActionToggle("omnis assumenda et",
                                "39b44943-b241-6703-b3f7-90e2d02d7d52",
                                () => { Console.WriteLine("vero"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "updatedAt",
                                "qui"),
                        new ActionToggle("sapiente veniam minus",
                                "616637b7-c060-086d-b098-a0ace7e432ad",
                                () => { Console.WriteLine("adipisci"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "group",
                                "quisquam"),
                        new ActionToggle("qui et necessitatibus",
                                "06a8305e-53ac-a765-2b1c-68cdb9131e4d",
                                () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "password",
                                "fugit")]),
                        new AttributesDictionary(),
                        true,
                        "pariatur",
                        "sunt",
                        new GraphicOrigin(Guid.NewGuid(),
                            "perferendis",
                            2))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([9,
                    2,
                    5,
                    1],
                    true,
                    462.7893,
                    500.9907,
                    "5.6.8.3",
                new Point(20.2750,
                        50.8216,
                        160.1284,
                        54.6642,
                        475.8972,
                    new SpatialReference(4,
                            "reiciendis",
                            "ad",
                            "at"),
                        true,
                        true,
                        388.9127),
                    3,
                    ["assumenda",
                        "beatae"],
                    "laboriosam",
                    new DateTime(2023, 7, 17, 3, 20, 53),
                    55.9387,
                    7,
                    "ea",
                    2),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([1,
                    9,
                    2,
                    3],
                    true,
                    874.7683,
                    560.2293,
                    "3.5.6.3",
                new Point(-46.0464,
                        -8.8478,
                        17.0397,
                        -40.5813,
                        300.7186,
                    new SpatialReference(8,
                            "autem",
                            "vel",
                            "qui"),
                        true,
                        true,
                        728.4595),
                    6,
                    ["odio",
                        "quis",
                        "ipsum",
                        "tempora"],
                    "aut",
                    new DateTime(2005, 8, 14, 15, 33, 4),
                    485.3473,
                    7,
                    "qui",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([2,
                    7,
                    6,
                    1],
                    true,
                    54.6412,
                    554.6958,
                    "2.3.6.4",
                new Polygon([new MapPath([new MapPoint([982.0109,
                            169.6782]),
                        new MapPoint([554.8796,
                            4.3606]),
                        new MapPoint([450.0133,
                            726.4137,
                            657.0196,
                            278.3312]),
                        new MapPoint([302.4741,
                            377.8138])]),
                        new MapPath([new MapPoint([808.8690,
                                706.3506]),
                            new MapPoint([175.2839,
                                715.9549]),
                            new MapPoint([605.0465,
                                166.7158])]),
                        new MapPath([new MapPoint([378.7627,
                                940.3390]),
                            new MapPoint([24.5813,
                                462.2609,
                                490.8618,
                                820.8009])])],
                    new SpatialReference(8,
                            "at",
                            "sunt",
                            "rerum"),
                    new Point(-149.5692,
                            65.7260,
                            -132.5227,
                            -75.0713,
                            244.3958,
                        new SpatialReference(7,
                                "voluptas",
                                "dolores",
                                "quis"),
                            true,
                            true,
                            282.1374),
                        true,
                        true,
                        true),
                    9,
                    ["at",
                        "possimus"],
                    "esse",
                    new DateTime(2005, 3, 13, 21, 2, 33),
                    148.8267,
                    9,
                    "facilis",
                    4),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([3,
                    5,
                    9],
                    true,
                    892.7612,
                    785.8506,
                    "0.0.9.1",
                new Point(-55.7388,
                        -76.8689,
                        94.9572,
                        79.8463,
                        629.2366,
                    new SpatialReference(7,
                            "omnis",
                            "nihil",
                            "beatae"),
                        true,
                        true,
                        358.8833),
                    5,
                    ["sit",
                        "ut"],
                    "sit",
                    new DateTime(2009, 11, 2, 12, 23, 40),
                    296.1659,
                    1,
                    "beatae",
                    3),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("eligendi praesentium incidunt",
                    "ex",
                    ["incidunt",
                        "praesentium",
                        "est",
                        "ad"],
                [new FieldInfo("createdAt",
                        "ipsa",
                        "quibusdam",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateShortTime),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("password",
                        "porro",
                        "nesciunt",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.ShortDateLeShortTime),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("phone",
                        "et",
                        "numquam",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongDateShortTime),
                        true,
                        true,
                    StatisticType.Sum)],
                [new TextPopupContent("aut sit reprehenderit"),
                new FieldsPopupContent([new FieldInfo("status",
                            "distinctio",
                            "repellendus",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.DayShortMonthYear),
                            true,
                            true,
                        StatisticType.Max),
                    new FieldInfo("phone",
                            "eos",
                            "placeat",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.DayShortMonthYearLongTime24),
                            true,
                            true,
                        StatisticType.Avg)],
                        "blanditiis perferendis excepturi non voluptatem officiis est",
                        "vitae rem nisi")],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "comment",
                        "exercitationem tenetur atque",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("voluptatem nobis et",
                        "https://picsum.photos/640/480/?image=512",
                        "9ebf191b-dfa1-d845-b0a1-668c86ae32ee",
                        () => { Console.WriteLine("laborum"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "aut"),
                new ActionToggle("ut aliquid tempora",
                        "aaa3ecc8-438c-824e-9634-ca686428386c",
                        () => { Console.WriteLine("velit"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "illum")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                        "delectus incidunt non"),
                ElevationInfoMode.RelativeToScene,
                    997.3852,
                ElevationUnit.NauticalMiles);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("sed",
                    34457977.6780),
                    new Effect("exercitationem",
                        45161722.0647),
                    new Effect("asperiores",
                        49789188.2430)],
                    true,
                new FeatureFilter(404.8840,
                    new Polyline([new MapPath([new MapPoint([408.0092,
                                493.9720]),
                            new MapPoint([127.7267,
                                218.0805,
                                711.5884]),
                            new MapPoint([232.9590,
                                765.1491,
                                219.5302,
                                857.9968]),
                            new MapPoint([606.6913,
                                271.9343])]),
                            new MapPath([new MapPoint([256.4516,
                                    48.0942,
                                    531.2947]),
                                new MapPoint([17.0251,
                                    426.3732,
                                    733.2206])]),
                            new MapPath([new MapPoint([992.5840,
                                    40.3244]),
                                new MapPoint([162.1896,
                                    423.0604]),
                                new MapPoint([308.4734,
                                    844.1194,
                                    768.1326,
                                    7.9629]),
                                new MapPoint([524.8164,
                                    173.5193,
                                    89.7830,
                                    734.1657])])],
                        new SpatialReference(5,
                                "quaerat",
                                "pariatur",
                                "quam"),
                            true,
                            true),
                        [6,
                            2,
                            5,
                            7],
                    SpatialRelationship.Disjoint,
                    new TimeExtent(new DateTime(2003, 3, 11, 17, 37, 31),
                            new DateTime(2005, 6, 23, 17, 1, 1)),
                        QueryUnits.Feet,
                        "Name = 'John Doe'"),
                    [new Effect("qui",
                        6251210.4611)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "category",
                    "rem",
                    "qui est quos omnis",
                    5,
                    true,
                    true,
                    new { Value = "tempore" },
                FieldValueType.Coordinate,
                new InheritedDomain("group")),
            new Field(default,
                    "comment",
                    "quae",
                    "dolores modi ea vel qui dicta",
                    1,
                    true,
                    true,
                    new { Value = "error" },
                FieldValueType.PercentageOrRatio,
                new RangeDomain("aut",
                        "non",
                        "token")),
            new Field(default,
                    "token",
                    "quis",
                    "tempora est natus distinctio et pariatur fuga",
                    1,
                    true,
                    true,
                    new { Value = "beatae" },
                FieldValueType.TypeOrCategory,
                new InheritedDomain("password")),
            new Field(default,
                    "comment",
                    "et",
                    "repudiandae eaque quae veniam eaque",
                    8,
                    true,
                    true,
                    new { Value = "neque" },
                FieldValueType.CountOrAmount,
                new InheritedDomain("email"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-69.9222,
                    -87.7789,
                    12.0531,
                    -87.0034,
                    595.0892,
                    804.3726,
                    904.0369,
                    992.6794,
                new SpatialReference(8,
                        "rerum",
                        "libero",
                        "laborum"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterAlong,
                    "assumenda",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    1041215.8804,
                    25763.9189,
                    true,
                    new Dimension(518.3563),
                new TextSymbol("vitae sunt delectus",
                    new MapColor(168, 40, 236),
                    new MapColor(46, 194, 176),
                        new Dimension(813.6948),
                    new MapFont(new Dimension(245.6716),
                            "Georgia",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        771.2485,
                    new MapColor(228, 87, 187),
                    new MapColor(164, 96, 136),
                        829.6855,
                    HorizontalAlignment.Center,
                        true,
                        965.3185,
                        new Dimension(836.9866),
                        true),
                    true,
                    "Age > 21"),
            new Label(LabelPlacement.BelowStart,
                    "dolorem",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    11641872.8874,
                    11699.9026,
                    true,
                    new Dimension(234.9982),
                new TextSymbol("eaque nihil minima",
                    new MapColor(120, 34, 234),
                    new MapColor(135, 191, 43),
                        new Dimension(245.8739),
                    new MapFont(new Dimension(153.6568),
                            "Garamond",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        956.0251,
                    new MapColor(247, 77, 194),
                    new MapColor(121, 32, 172),
                        766.3567,
                    HorizontalAlignment.Left,
                        true,
                        126.6027,
                        new Dimension(522.8237),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'"),
            new Label(LabelPlacement.CenterEnd,
                    "amet",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    44612137.7759,
                    24095.3477,
                    true,
                    new Dimension(992.2065),
                new TextSymbol("et et soluta",
                    new MapColor(253, 50, 1),
                    new MapColor(251, 217, 111),
                        new Dimension(405.9459),
                    new MapFont(new Dimension(730.1172),
                            "Garamond",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.None),
                        977.2044,
                    new MapColor(70, 47, 16),
                    new MapColor(182, 254, 190),
                        974.0999,
                    HorizontalAlignment.Left,
                        true,
                        54.1347,
                        new Dimension(283.0495),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.CenterCenter,
                    "eveniet",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    27647223.8459,
                    27998.1733,
                    true,
                    new Dimension(203.7622),
                new TextSymbol("expedita et ea",
                    new MapColor(163, 2, 214),
                    new MapColor(228, 14, 218),
                        new Dimension(155.8803),
                    new MapFont(new Dimension(251.0964),
                            "Times New Roman",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        456.6439,
                    new MapColor(180, 78, 203),
                    new MapColor(124, 117, 237),
                        99.1504,
                    HorizontalAlignment.Center,
                        true,
                        810.3941,
                        new Dimension(230.9980),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("et",
                SortOrder.Ascending,
                    "laborum"),
            new OrderedLayerOrderBy("omnis",
                SortOrder.Descending,
                    "et")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "fugit",
                    "qui",
                    785.5312,
                    ["atque",
                        "tenetur"],
                    new DateTime(2008, 6, 22, 14, 42, 31),
                    "et",
                    "repudiandae dolores reiciendis nihil",
                new Extent(177.8494,
                        -69.0874,
                        78.9484,
                        -62.3481,
                        297.3094,
                        637.2636,
                        789.0383,
                        254.0134,
                    new SpatialReference(4,
                            "doloribus",
                            "quas",
                            "vel"),
                        true,
                        true),
                    ["facere",
                        "sed",
                        "non"],
                    "numquam",
                    new DateTime(2021, 6, 12, 7, 45, 2),
                    "id",
                    344.6555);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer([new UniqueValueInfo("placeat",
                    new TextSymbol("iusto et ea",
                        new MapColor(211, 182, 224),
                        new MapColor(26, 152, 15),
                            new Dimension(440.6594),
                        new MapFont(new Dimension(378.2720),
                                "Helvetica",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            182.4997,
                        new MapColor(8, 164, 202),
                        new MapColor(212, 118, 170),
                            789.0438,
                        HorizontalAlignment.Center,
                            true,
                            282.8859,
                            new Dimension(17.1901),
                            true),
                        "mollitia"),
                new UniqueValueInfo("cum",
                    new TextSymbol("itaque laborum beatae",
                        new MapColor(215, 31, 27),
                        new MapColor(52, 82, 232),
                            new Dimension(41.5141),
                        new MapFont(new Dimension(691.1307),
                                "Palatino",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            93.3789,
                        new MapColor(19, 194, 176),
                        new MapColor(16, 221, 97),
                            431.6183,
                        HorizontalAlignment.Left,
                            true,
                            224.7552,
                            new Dimension(870.8452),
                            true),
                        "fugit"),
                new UniqueValueInfo("consequatur",
                    new TextSymbol("voluptate quaerat porro",
                        new MapColor(120, 55, 55),
                        new MapColor(148, 104, 210),
                            new Dimension(924.5158),
                        new MapFont(new Dimension(692.4295),
                                "Verdana",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            591.5372,
                        new MapColor(222, 219, 185),
                        new MapColor(96, 196, 10),
                            909.7592,
                        HorizontalAlignment.Left,
                            true,
                            161.7522,
                            new Dimension(800.9590),
                            true),
                        "ipsam"),
                new UniqueValueInfo("excepturi",
                    new TextSymbol("officiis repellat laborum",
                        new MapColor(150, 176, 48),
                        new MapColor(49, 130, 194),
                            new Dimension(846.6420),
                        new MapFont(new Dimension(715.1523),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            939.7202,
                        new MapColor(192, 254, 183),
                        new MapColor(9, 160, 59),
                            719.3152,
                        HorizontalAlignment.Right,
                            true,
                            477.7058,
                            new Dimension(810.5643),
                            true),
                        "molestiae")],
                new AuthoringInfo(ClassificationMethod.StandardDeviation,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(139, 109, 73),
                            new MapColor(232, 36, 20)),
                        new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(216, 192, 51),
                            new MapColor(163, 174, 9)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(177, 209, 166),
                            new MapColor(118, 233, 55))]),
                        418.3732,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(115.4560,
                                581.6380),
                        new AuthoringInfoField1ClassBreakInfos(134.1117,
                                692.5509)],
                            "rerum",
                            "quibusdam",
                            "cupiditate"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(597.1649,
                                428.4802),
                        new AuthoringInfoField1ClassBreakInfos(380.9817,
                                405.5011),
                        new AuthoringInfoField1ClassBreakInfos(528.0488,
                                978.9743)],
                            "rerum",
                            "tempora",
                            "ut"),
                        ["sint",
                            "omnis",
                            "est"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "nostrum",
                        true,
                    LengthUnit.Millimeters,
                        64.9130,
                        87.0372,
                        162.5957,
                        524.5596),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0",
                    new Dimension(313.3821),
                    new Dimension(513.0718),
                    new Dimension(444.0823),
                    new Dimension(779.2944),
                    -92.9420,
                    -27.8679,
                    new Outline(new MapColor(41, 232, 231),
                        new Dimension(825.1327),
                        SimpleLineSymbolStyle.LongDashDotDot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(37, 117, 195),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Square),
                        586.9412),
                    new MapColor(72, 80, 238)),
                    "eos",
                    new DefaultSymbol(),
                    "earum",
                    "quis",
                    "voluptatem",
                    "officiis",
                new UniqueValueRendererLegendOptions("deserunt vitae dolorem"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("commodi",
                        new TextSymbol("ut molestiae commodi",
                            new MapColor(209, 113, 56),
                            new MapColor(103, 38, 78),
                                new Dimension(493.5346),
                            new MapFont(new Dimension(778.8827),
                                    "Helvetica",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                777.6493,
                            new MapColor(174, 146, 137),
                            new MapColor(52, 77, 160),
                                551.8095,
                            HorizontalAlignment.Right,
                                true,
                                888.8172,
                                new Dimension(918.5378),
                                true),
                        [new UniqueValue("omnis",
                                "rerum",
                                "fuga"),
                        new UniqueValue("quia",
                                "quia",
                                "possimus")]),
                    new UniqueValueClass("saepe",
                        new TextSymbol("aspernatur facere culpa",
                            new MapColor(221, 110, 189),
                            new MapColor(139, 182, 15),
                                new Dimension(58.8452),
                            new MapFont(new Dimension(163.7519),
                                    "Times New Roman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                111.9778,
                            new MapColor(15, 223, 175),
                            new MapColor(166, 239, 176),
                                201.4047,
                            HorizontalAlignment.Left,
                                true,
                                925.5347,
                                new Dimension(573.6240),
                                true),
                        [new UniqueValue("neque",
                                "ut",
                                "in"),
                        new UniqueValue("iusto",
                                "occaecati",
                                "nulla")]),
                    new UniqueValueClass("ex",
                        new TextSymbol("sint iusto sed",
                            new MapColor(216, 235, 11),
                            new MapColor(90, 161, 162),
                                new Dimension(970.7656),
                            new MapFont(new Dimension(768.2577),
                                    "Bookman",
                                MapFontStyle.Normal,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                973.9981,
                            new MapColor(160, 73, 25),
                            new MapColor(145, 106, 95),
                                838.0680,
                            HorizontalAlignment.Right,
                                true,
                                637.8778,
                                new Dimension(382.0804),
                                true),
                        [new UniqueValue("consequatur",
                                "perspiciatis",
                                "tempore"),
                        new UniqueValue("sequi",
                                "ex",
                                "id"),
                        new UniqueValue("similique",
                                "saepe",
                                "voluptas"),
                        new UniqueValue("suscipit",
                                "nihil",
                                "magnam")])],
                        "id"),
                new UniqueValueGroup([new UniqueValueClass("illo",
                        new TextSymbol("rerum voluptatem est",
                            new MapColor(55, 123, 227),
                            new MapColor(114, 45, 213),
                                new Dimension(772.1634),
                            new MapFont(new Dimension(137.3405),
                                    "Georgia",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.None),
                                951.6524,
                            new MapColor(145, 241, 132),
                            new MapColor(17, 147, 52),
                                562.5977,
                            HorizontalAlignment.Center,
                                true,
                                462.4703,
                                new Dimension(906.9271),
                                true),
                        [new UniqueValue("magnam",
                                "et",
                                "corporis"),
                        new UniqueValue("et",
                                "animi",
                                "voluptatum")]),
                    new UniqueValueClass("ut",
                        new TextSymbol("repellat sint quam",
                            new MapColor(233, 195, 139),
                            new MapColor(60, 200, 100),
                                new Dimension(493.5784),
                            new MapFont(new Dimension(129.9789),
                                    "Helvetica",
                                MapFontStyle.Normal,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                930.5239,
                            new MapColor(166, 186, 105),
                            new MapColor(9, 209, 189),
                                560.0534,
                            HorizontalAlignment.Center,
                                true,
                                900.1721,
                                new Dimension(107.9954),
                                true),
                        [new UniqueValue("et",
                                "nulla",
                                "sed"),
                        new UniqueValue("fuga",
                                "beatae",
                                "iure")]),
                    new UniqueValueClass("quos",
                        new TextSymbol("est error porro",
                            new MapColor(247, 231, 134),
                            new MapColor(10, 141, 215),
                                new Dimension(375.4165),
                            new MapFont(new Dimension(159.0089),
                                    "Verdana",
                                MapFontStyle.Normal,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                319.1341,
                            new MapColor(151, 164, 169),
                            new MapColor(93, 253, 189),
                                402.8255,
                            HorizontalAlignment.Center,
                                true,
                                469.5738,
                                new Dimension(555.3524),
                                true),
                        [new UniqueValue("voluptate",
                                "dolorum",
                                "culpa")])],
                        "ut")],
                    "et",
                    "eaque non cupiditate");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "eius",
                    "rerum",
                    "qui");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2013, 7, 27, 4, 23, 11),
                    new DateTime(2017, 9, 10, 1, 45, 39));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("eos",
                    "ipsam",
                new TimeExtent(new DateTime(2020, 6, 15, 22, 35, 45),
                        new DateTime(2016, 5, 7, 2, 46, 47)),
                new TimeInterval(TemporalTime.Centuries,
                        687.5338),
                    [new DateTime(2002, 5, 6, 6, 14, 45),
                        new DateTime(2007, 11, 9, 12, 4, 7),
                        new DateTime(2018, 7, 16, 1, 8, 9)],
                    "Africa/Cairo",
                    "autem");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    504.1719);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 3, 27, 17, 8, 52),
                    new DateTime(2013, 9, 24, 3, 32, 21));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
