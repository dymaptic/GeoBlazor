@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("nemo est fugiat")"
                        Copyright="@("facere")"
                        Opacity="@(0.2566)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Lighten)"
                        DefinitionExpression="@("vero")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("nam")"
                        Effect="@(new Effect("libero",
                            36406339.6056))"
                        GeometryType="@("aperiam")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("beatae")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("ea")"
                        MaxScale="@(30337011.2665)"
                        MinScale="@(12506.3413)"
                        ObjectIdField="@("saepe")"
                        OutFields="@(["iure",
                            "accusantium"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(49.0616)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(884.3090)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("dolor")"
                            EndField="@("enim")"
                            Stops="@([new DateTime(2020, 5, 13, 20, 38, 6)])"
                            TimeZone="@("America/Phoenix")"
                            TrackIdField="@("recusandae")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(63.9413)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2000, 9, 23, 14, 17, 2))"
                                End="@(new DateTime(2001, 10, 13, 1, 25, 58))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2021, 3, 20, 13, 54, 14))"
                            End="@(new DateTime(2004, 1, 25, 20, 9, 47))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(1)"
                            ImageCoordinateSystem="@("et")"
                            Wkt="@("aut")"
                            Wkt2="@("libero")">
                        </SpatialReference>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                    new MapColor(119, 61, 47),
                                    new MapColor(20, 6, 126)),
                                    187.8955,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(411.9517,
                                            426.5090),
                                    new AuthoringInfoField1ClassBreakInfos(405.8545,
                                            317.2360)],
                                        "rerum",
                                        "qui",
                                        "quasi"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(12.4721,
                                            710.8748),
                                    new AuthoringInfoField1ClassBreakInfos(172.9957,
                                            872.9843)],
                                        "mollitia",
                                        "consequatur",
                                        "voluptatibus"),
                                    ["eveniet",
                                        "reiciendis"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "unde",
                                    true,
                                LengthUnit.Yards,
                                    547.6688,
                                    709.6779,
                                    647.7138,
                                    833.3198))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("dolorum vel voluptatum")"
                            StringContent="@("consequatur")"
                            OutFields="@(["dolore"])"
                            FieldInfos="@([new FieldInfo("phone",
                                    "rerum",
                                    "laborum",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("token",
                                    "magni",
                                    "occaecati",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("category",
                                        "asperiores",
                                        "iste",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("category",
                                        "sed",
                                        "eaque",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.ShortDate),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "minus ullam laborum",
                                    "ut temporibus fugiat"),
                            new FieldsPopupContent([new FieldInfo("token",
                                        "sed",
                                        "non",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.DayShortMonthYearLongTime),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                    "dolores et voluptate facere",
                                    "itaque officia magni")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "createdAt",
                                    "quaerat et eos",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("aut explicabo itaque",
                                "https://picsum.photos/640/480/?image=806",
                                "164dc30a-4065-18d9-fbb2-cd4da0ddd262",
                                () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "et")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("nihil")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("corrupti")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowRight)"
                            LabelExpression="@("animi")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(36959988.0298)"
                            MinScale="@(22786.1534)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(489.1119))"
                            Symbol="@(new TextSymbol("dolores repellendus accusantium",
                                new MapColor(218, 147, 158),
                                new MapColor(104, 96, 142),
                                    new Dimension(678.4475),
                                new MapFont(new Dimension(92.6083),
                                        "Times New Roman",
                                    MapFontStyle.Oblique,
                                    FontWeight.Lighter,
                                    TextDecoration.LineThrough),
                                    639.4532,
                                new MapColor(58, 200, 245),
                                new MapColor(67, 243, 218),
                                    946.6542,
                                HorizontalAlignment.Right,
                                    true,
                                    942.5272,
                                    new Dimension(282.8831),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Province = 'Ontario'")">
                        </Label>
                        <Extent 
                            Xmax="@(66.1699)"
                            Xmin="@(-112.4456)"
                            Ymax="@(-37.2978)"
                            Ymin="@(-47.0798)"
                            Zmax="@(234.6733)"
                            Zmin="@(590.7026)"
                            Mmax="@(123.9976)"
                            Mmin="@(464.6218)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(8)"
                                ImageCoordinateSystem="@("natus")"
                                Wkt="@("fugit")"
                                Wkt2="@("rerum")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("title")"
                            Alias="@("est")"
                            Description="@("omnis natus magni")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "molestiae" })"
                            ValueType="@(FieldValueType.Coordinate)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>()],
                                "phone"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("illum",
                                39494267.5987)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(53.6642,
                                new Polygon([new MapPath([new MapPoint([300.8306])]),
                                        new MapPath([new MapPoint([84.5778]),
                                            new MapPoint([654.3230])])],
                                    new SpatialReference(6,
                                            "sunt",
                                            "aut",
                                            "est"),
                                    new Point(61.1029,
                                            -1.9201,
                                            -129.3773,
                                            45.8560,
                                            453.2148,
                                        new SpatialReference(8,
                                                "vitae",
                                                "voluptatem",
                                                "qui"),
                                            true,
                                            true,
                                            167.1416),
                                        true,
                                        true,
                                        true),
                                    [8],
                                SpatialRelationship.Overlaps,
                                new TimeExtent(new DateTime(2010, 7, 8, 1, 19, 15),
                                        new DateTime(2019, 7, 17, 12, 45, 49)),
                                    QueryUnits.Feet,
                                    "1 = 1"))"
                            IncludedEffect="@([new Effect("placeat",
                                15004299.3599)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "aliquid similique et"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(211.6552)"
                            Unit="@(ElevationUnit.Kilometers)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["facere"],
                    ["avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("email");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("id",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([804.4245])])],
                        new SpatialReference(7,
                                "neque",
                                "explicabo",
                                "suscipit"),
                        new Point(67.4456,
                                -14.6405,
                                -174.8608,
                                40.0857,
                                578.4019,
                            new SpatialReference(5,
                                    "sapiente",
                                    "a",
                                    "qui"),
                                true,
                                true,
                                84.3019),
                            true,
                            true,
                            true),
                    new TextSymbol("voluptates id nostrum",
                        new MapColor(51, 142, 44),
                        new MapColor(90, 180, 92),
                            new Dimension(37.6545),
                        new MapFont(new Dimension(790.8034),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            664.3049,
                        new MapColor(114, 129, 90),
                        new MapColor(82, 89, 253),
                            107.0737,
                        HorizontalAlignment.Right,
                            true,
                            488.6231,
                            new Dimension(353.9757),
                            true),
                    new PopupTemplate("eius corporis reprehenderit",
                            "eaque",
                            ["dolores"],
                        [new FieldInfo("name",
                                "molestiae",
                                "itaque",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Var)],
                        [new AttachmentsPopupContent("rem est adipisci",
                                "natus corrupti repellendus ea",
                                AttachmentsPopupContentDisplayType.Preview),
                        new RelationshipPopupContent("quidem eligendi nobis",
                                "voluptas sapiente",
                                9,
                                "et",
                            [new RelatedRecordsInfoFieldOrder("sunt",
                                OrderBy.Asc)],
                                1)],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "id",
                                "omnis iure autem",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "email",
                                "commodi est qui",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("at culpa non",
                                "https://picsum.photos/640/480/?image=488",
                                "1a3f10c4-2070-10fe-3f33-6152beb0c6a9",
                                () => { Console.WriteLine("voluptatem"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "necessitatibus"),
                                new ActionButton("velit qui dolore",
                                    "https://picsum.photos/640/480/?image=24",
                                    "00cdd103-2d3d-1cfd-aa46-b5ae9ce29dec",
                                    () => { Console.WriteLine("delectus"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "voluptatibus")]),
                        new AttributesDictionary(),
                        true,
                        "rerum",
                        "maiores",
                        new GraphicOrigin(Guid.NewGuid(),
                            "officiis",
                            3))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([7,
                    1],
                    true,
                    739.2110,
                    832.0450,
                    "0.1.4.0",
                new Polygon([new MapPath([new MapPoint([885.3174,
                            330.5124])])],
                    new SpatialReference(1,
                            "enim",
                            "quo",
                            "voluptatem"),
                    new Point(-49.4460,
                            74.2009,
                            -98.2128,
                            -38.2142,
                            579.1191,
                        new SpatialReference(3,
                                "id",
                                "accusamus",
                                "nam"),
                            true,
                            true,
                            898.8917),
                        true,
                        true,
                        true),
                    3,
                    ["dolorem",
                        "perspiciatis"],
                    "ut",
                    new DateTime(2005, 4, 24, 6, 38, 54),
                    428.2086,
                    2,
                    "id",
                    6),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([1,
                    1],
                    true,
                    696.0601,
                    505.6661,
                    "6.5.8.7",
                new Polyline([new MapPath([new MapPoint([258.9195]),
                        new MapPoint([547.9447,
                            263.8238])])],
                    new SpatialReference(1,
                            "fugiat",
                            "suscipit",
                            "ut"),
                        true,
                        true),
                    4,
                    ["dolor",
                        "odio"],
                    "aspernatur",
                    new DateTime(2012, 7, 8, 0, 27, 40),
                    265.9193,
                    9,
                    "ratione",
                    4),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([2],
                    true,
                    440.6025,
                    374.5376,
                    "9.5.8.8",
                new Polyline([new MapPath([new MapPoint([33.7181,
                            364.1590])]),
                        new MapPath([new MapPoint([389.5988,
                                245.0353]),
                            new MapPoint([451.0537])])],
                    new SpatialReference(3,
                            "dicta",
                            "molestiae",
                            "quam"),
                        true,
                        true),
                    5,
                    ["eaque"],
                    "quia",
                    new DateTime(2014, 10, 1, 8, 18, 18),
                    593.6935,
                    3,
                    "sapiente",
                    2),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([6,
                    6],
                    true,
                    693.5377,
                    38.9737,
                    "3.9.6.5",
                new Extent(-98.9813,
                        128.5453,
                        -27.3598,
                        -54.6471,
                        986.0397,
                        993.4106,
                        907.9370,
                        276.1406,
                    new SpatialReference(1,
                            "placeat",
                            "similique",
                            "facere"),
                        true,
                        true),
                    8,
                    ["dolore"],
                    "nemo",
                    new DateTime(2023, 2, 24, 8, 39, 15),
                    786.2687,
                    3,
                    "qui",
                    4),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Screen;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "non praesentium et"),
                ElevationInfoMode.RelativeToScene,
                    231.7445,
                ElevationUnit.Centimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("tempore",
                    38069127.3293),
                    new Effect("molestiae",
                        49620188.9476)],
                    true,
                new FeatureFilter(111.3986,
                    new Polyline([new MapPath([new MapPoint([775.2718])])],
                        new SpatialReference(6,
                                "voluptas",
                                "est",
                                "et"),
                            true,
                            true),
                        [5],
                    SpatialRelationship.Relation,
                    new TimeExtent(new DateTime(2005, 2, 2, 14, 22, 19),
                            new DateTime(2012, 3, 7, 22, 51, 32)),
                        QueryUnits.Miles,
                        "PostalCode = 'M5V 1J9'"),
                    [new Effect("pariatur",
                        31795426.0634)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "email",
                    "vitae",
                    "adipisci sed",
                    1,
                    true,
                    true,
                    new { Value = "quasi" },
                FieldValueType.CountOrAmount,
                    new CodedValueDomain<string>([new CodedValue<string>(),
                        new CodedValue<string>()],
                        "name")),
            new Field(default,
                    "email",
                    "sit",
                    "accusamus et",
                    4,
                    true,
                    true,
                    new { Value = "est" },
                FieldValueType.Measurement,
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "password"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(172.1806,
                    -15.2979,
                    18.8528,
                    -71.8780,
                    218.3369,
                    326.0486,
                    304.8691,
                    313.2351,
                new SpatialReference(2,
                        "veritatis",
                        "natus",
                        "aut"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowRight,
                    "quo",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    47418537.6861,
                    1841.7253,
                    true,
                    new Dimension(226.2127),
                new TextSymbol("doloribus nisi ullam",
                    new MapColor(189, 58, 117),
                    new MapColor(17, 167, 242),
                        new Dimension(212.5632),
                    new MapFont(new Dimension(439.1579),
                            "Garamond",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        471.5795,
                    new MapColor(127, 241, 112),
                    new MapColor(150, 27, 182),
                        512.6968,
                    HorizontalAlignment.Center,
                        true,
                        692.6330,
                        new Dimension(763.2223),
                        true),
                    true,
                    "Age > 21"),
            new Label(LabelPlacement.AboveCenter,
                    "atque",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    35442898.7608,
                    29123.4804,
                    true,
                    new Dimension(312.4505),
                new TextSymbol("amet iusto facilis",
                    new MapColor(77, 32, 22),
                    new MapColor(97, 155, 157),
                        new Dimension(504.5496),
                    new MapFont(new Dimension(88.0864),
                            "Verdana",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        353.6493,
                    new MapColor(171, 122, 251),
                    new MapColor(25, 2, 8),
                        302.5802,
                    HorizontalAlignment.Left,
                        true,
                        634.7664,
                        new Dimension(754.1438),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("sit",
                SortOrder.Descending,
                    "rerum")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("reprehenderit ab est",
                    new MapColor(217, 103, 136),
                    new MapColor(148, 136, 48),
                        new Dimension(368.1961),
                    new MapFont(new Dimension(379.7815),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.None),
                        16.9564,
                    new MapColor(22, 225, 134),
                    new MapColor(90, 81, 38),
                        186.0684,
                    HorizontalAlignment.Left,
                        true,
                        157.8266,
                        new Dimension(201.2639),
                        true),
                    "odit",
                [new RotationVariable("alias",
                    Axis.Tilt,
                    RotationType.Geographic,
                    new VisualVariableLegendOptions(true,
                            "ex vel et"),
                        "itaque",
                        "porro inventore doloremque")],
                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(66, 41, 174),
                        new MapColor(173, 34, 115)),
                        57.7050,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(971.6104,
                                893.8936)],
                            "qui",
                            "nulla",
                            "in"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(172.9114,
                                559.7290),
                        new AuthoringInfoField1ClassBreakInfos(540.1855,
                                455.5115)],
                            "porro",
                            "velit",
                            "eveniet"),
                        ["et"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "consequatur",
                        true,
                    LengthUnit.UsFeet,
                        911.3181,
                        259.4324,
                        202.4609,
                        364.5322));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "voluptas",
                    "in",
                    "eligendi");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2013, 6, 2, 16, 54, 37),
                    new DateTime(2000, 8, 6, 15, 47, 37));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quo",
                    "id",
                new TimeExtent(new DateTime(2023, 11, 11, 22, 42, 32),
                        new DateTime(2019, 11, 20, 10, 33, 44)),
                new TimeInterval(TemporalTime.Minutes,
                        926.6737),
                    [new DateTime(2005, 7, 5, 16, 36, 52),
                        new DateTime(2012, 7, 16, 10, 20, 20)],
                    "Asia/Kolkata",
                    "reiciendis");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    610.3354);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 11, 7, 15, 37, 53),
                    new DateTime(2005, 8, 21, 12, 8, 32));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
