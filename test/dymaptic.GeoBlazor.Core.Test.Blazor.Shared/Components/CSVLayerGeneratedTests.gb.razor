@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("quod non beatae")"
                        Copyright="@("ut")"
                        Opacity="@(0.3528)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.DestinationIn)"
                        DefinitionExpression="@("velit")"
                        Delimiter="@(CSVDelimiter.Space)"
                        DisplayField="@("nobis")"
                        Effect="@(new Effect("perspiciatis",
                            38462672.2472))"
                        FullExtent="@(new Extent(-47.2659,
                                -64.7621,
                                4.2519,
                                35.8237,
                                911.4620,
                                543.9116,
                                54.7210,
                                664.2875,
                            new SpatialReference(7,
                                    "dolores",
                                    "eos",
                                    "non"),
                                true,
                                true))"
                        GeometryType="@("voluptatem")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("nostrum")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("perspiciatis")"
                        MaxScale="@(45693312.7244)"
                        MinScale="@(8952.5178)"
                        ObjectIdField="@("aut")"
                        OutFields="@(["culpa",
                            "non"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(525.4204)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(2,
                                "et",
                                "saepe",
                                "voluptatem"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(427.3738)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("et")"
                            EndField="@("nostrum")"
                            Stops="@([new DateTime(2008, 3, 7, 17, 11, 39),
                                new DateTime(2018, 1, 15, 2, 8, 21)])"
                            TimeZone="@("Asia/Chongqing")"
                            TrackIdField="@("amet")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(124.3169)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2001, 3, 6, 16, 46, 47))"
                                End="@(new DateTime(2015, 8, 23, 8, 19, 38))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2020, 7, 7, 21, 28, 24))"
                            End="@(new DateTime(2012, 3, 20, 8, 10, 27))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(78, 141, 25),
                                    new MapColor(120, 148, 159)),
                                    242.9626,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(154.4847,
                                            744.1594),
                                    new AuthoringInfoField1ClassBreakInfos(733.3004,
                                            671.3785)],
                                        "quae",
                                        "aliquid",
                                        "minima"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(711.7293,
                                            854.5726),
                                    new AuthoringInfoField1ClassBreakInfos(210.0469,
                                            246.2681),
                                    new AuthoringInfoField1ClassBreakInfos(548.3638,
                                            845.2651),
                                    new AuthoringInfoField1ClassBreakInfos(620.5477,
                                            15.6868)],
                                        "beatae",
                                        "enim",
                                        "nesciunt"),
                                    ["laborum",
                                        "dolorum"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "nulla",
                                    true,
                                LengthUnit.Kilometers,
                                    924.7229,
                                    70.1584,
                                    167.0447,
                                    857.1247))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("non")"
                            ApiKey="@("et")"
                            AvgRating="@(826.3372)"
                            Categories="@(["rerum",
                                "et",
                                "officiis",
                                "ex"])"
                            Created="@(new DateTime(2009, 10, 21, 9, 14, 42))"
                            Culture="@("non")"
                            Description="@("cum numquam ut libero qui officiis magni")"
                            Extent="@(new Extent(72.9225,
                                    172.7506,
                                    21.7128,
                                    -37.3703,
                                    889.5883,
                                    137.0569,
                                    688.0829,
                                    603.7882,
                                new SpatialReference(3,
                                        "sint",
                                        "voluptas",
                                        "est"),
                                    true,
                                    true))"
                            GroupCategories="@(["nemo",
                                "porro"])"
                            LicenseInfo="@("fugit")"
                            Modified="@(new DateTime(2002, 3, 26, 5, 39, 37))"
                            Name="@("group")"
                            NumComments="@(425.7485)"
                            NumRatings="@(793.3306)"
                            NumViews="@(20.7545)"
                            Owner="@("Irma Macejkovic")"
                            OwnerFolder="@("Agnes Fadel")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["quibusdam",
                                        "quam"],
                                    "aspernatur",
                                    "ut",
                                    "amet",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("recusandae")"
                            Screenshots="@(["repellat",
                                "rerum"])"
                            Size="@(9)"
                            Snippet="@("ut")"
                            Tags="@(["et",
                                "nisi",
                                "eum"])"
                            Title="@("commodi provident voluptas")"
                            TypeKeywords="@(["consequatur",
                                "illo",
                                "cum",
                                "pariatur"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("molestiae et eaque")"
                            StringContent="@("non")"
                            OutFields="@(["qui",
                                "vero",
                                "eum",
                                "asperiores"])"
                            FieldInfos="@([new FieldInfo("password",
                                    "similique",
                                    "commodi",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("title",
                                    "veritatis",
                                    "dolorum",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new MediaPopupContent("tempore ipsam mollitia",
                                    "ea commodi sed veniam enim fugit ducimus",
                                [new ColumnChartMediaInfo("facere beatae inventore",
                                        "ut",
                                        "suscipit qui et",
                                    new ChartMediaInfoValue(["omnis",
                                            "minima",
                                            "ea",
                                            "consectetur"],
                                            "eum",
                                            "corrupti",
                                        [new ChartMediaInfoValueSeries("avatar",
                                                "voluptas",
                                                344.5022)],
                                        [new MapColor(14, 116, 250),
                                        new MapColor(85, 36, 45)])),
                                new ImageMediaInfo("temporibus porro adipisci",
                                        "facilis",
                                        "qui repellendus et",
                                    new ImageMediaInfoValue("http://heaven.name",
                                            "https://cary.name"),
                                        86.0522),
                                new LineChartMediaInfo("sed unde harum",
                                        "tempora",
                                        "perspiciatis consequatur est",
                                    new ChartMediaInfoValue(["eum",
                                            "magnam",
                                            "voluptatem"],
                                            "eum",
                                            "cumque",
                                        [new ChartMediaInfoValueSeries("updatedAt",
                                                "accusantium",
                                                333.1767)],
                                        [new MapColor(158, 3, 156),
                                        new MapColor(151, 102, 210)])),
                                new ColumnChartMediaInfo("provident nihil quibusdam",
                                        "officiis",
                                        "atque sequi adipisci",
                                    new ChartMediaInfoValue(["id",
                                            "harum",
                                            "vel",
                                            "repellat"],
                                            "consequatur",
                                            "doloremque",
                                        [new ChartMediaInfoValueSeries("id",
                                                "unde",
                                                58.4518),
                                        new ChartMediaInfoValueSeries("password",
                                                "illum",
                                                571.8126)],
                                        [new MapColor(124, 220, 6),
                                        new MapColor(232, 206, 81)]))],
                                    5),
                            new RelationshipPopupContent("exercitationem dolorum expedita",
                                    "et similique pariatur tempore eaque temporibus id",
                                    4,
                                    "illum",
                                [new RelatedRecordsInfoFieldOrder("rerum",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("quis",
                                    OrderBy.Asc)],
                                    6)])"
                            ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "email",
                                    "praesentium minima optio",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("exercitationem aliquid quibusdam",
                                    "16c17a8a-6b78-f131-d7b6-d0373a09f826",
                                    () => { Console.WriteLine("nostrum"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "avatar",
                                    "vitae"),
                            new ActionToggle("voluptatem sunt autem",
                                    "4dddee0a-c78c-a14a-6adb-5218fb14f8c8",
                                    () => { Console.WriteLine("consequatur"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "email",
                                    "unde"),
                            new ActionButton("asperiores natus aut",
                                    "https://picsum.photos/640/480/?image=425",
                                    "5e8b8ab0-84fc-1712-2aa6-b117af7e819e",
                                    () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "non")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("amet")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("sint")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AlwaysHorizontal)"
                            LabelExpression="@("quidem")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(40343603.5877)"
                            MinScale="@(1594.3668)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(737.7322))"
                            Symbol="@(new TextSymbol("qui tempore autem",
                                new MapColor(30, 144, 19),
                                new MapColor(169, 158, 198),
                                    new Dimension(501.5908),
                                new MapFont(new Dimension(538.6323),
                                        "Garamond",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    360.0444,
                                new MapColor(182, 211, 89),
                                new MapColor(83, 84, 126),
                                    510.8392,
                                HorizontalAlignment.Right,
                                    true,
                                    68.5112,
                                    new Dimension(37.4746),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Phone = '555-555-5555'")">
                        </Label>
                        <Field 
                            Name="@("title")"
                            Alias="@("rerum")"
                            Description="@("dolores qui voluptatem alias")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "expedita" })"
                            ValueType="@(FieldValueType.Measurement)"
                            Domain="@(new InheritedDomain("status"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("omnis",
                                23568419.8544),
                                new Effect("assumenda",
                                    3925541.0639)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(847.3105,
                                new Polygon([new MapPath([new MapPoint([273.4284,
                                            462.7081]),
                                        new MapPoint([615.8113,
                                            331.1464]),
                                        new MapPoint([981.9592,
                                            435.0002,
                                            448.3842,
                                            122.1907])]),
                                        new MapPath([new MapPoint([502.0749,
                                                331.8065]),
                                            new MapPoint([616.4151,
                                                820.1109,
                                                633.7254,
                                                183.5735])]),
                                        new MapPath([new MapPoint([919.1310,
                                                427.5285]),
                                            new MapPoint([228.6572,
                                                304.2870,
                                                340.9703,
                                                634.8180]),
                                            new MapPoint([266.3644,
                                                632.4051,
                                                425.4970,
                                                392.2695])]),
                                        new MapPath([new MapPoint([383.5770,
                                                345.6382,
                                                916.6842,
                                                917.1214]),
                                            new MapPoint([510.6805,
                                                882.4924,
                                                262.8925,
                                                853.3638]),
                                            new MapPoint([617.5362,
                                                566.1070,
                                                99.2807]),
                                            new MapPoint([939.3304,
                                                671.2931])])],
                                    new SpatialReference(6,
                                            "error",
                                            "corporis",
                                            "voluptatum"),
                                    new Point(-96.0527,
                                            26.8246,
                                            10.4290,
                                            -27.8855,
                                            662.3670,
                                        new SpatialReference(3,
                                                "facere",
                                                "ab",
                                                "consequatur"),
                                            true,
                                            true,
                                            586.9646),
                                        true,
                                        true,
                                        true),
                                    [3,
                                        6,
                                        2],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2012, 8, 13, 0, 3, 36),
                                        new DateTime(2013, 9, 18, 0, 9, 6)),
                                    QueryUnits.Meters,
                                    "City = 'Toronto'"))"
                            IncludedEffect="@([new Effect("odit",
                                34538423.4409),
                                new Effect("sed",
                                    16277155.9885),
                                new Effect("molestias",
                                    14979933.6447)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "hic maxime impedit"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(288.8202)"
                            Unit="@(ElevationUnit.NauticalMiles)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["tenetur",
                    "ut",
                    "eum",
                    "optio"],
                    ["email",
                        "token",
                        "updatedAt",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("id");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("createdAt",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([663.9376,
                                283.5206,
                                928.5412]),
                            new MapPoint([933.7497,
                                584.0053]),
                            new MapPoint([845.6272,
                                803.2803])]),
                            new MapPath([new MapPoint([324.9676,
                                    325.9114,
                                    321.4044]),
                                new MapPoint([617.7904,
                                    716.7216]),
                                new MapPoint([832.8018,
                                    226.2432])])],
                        new SpatialReference(7,
                                "quod",
                                "optio",
                                "facere"),
                            true,
                            true),
                    new TextSymbol("aliquam ab at",
                        new MapColor(1, 8, 40),
                        new MapColor(168, 88, 243),
                            new Dimension(205.1551),
                        new MapFont(new Dimension(319.3854),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            321.6559,
                        new MapColor(104, 206, 52),
                        new MapColor(29, 72, 172),
                            855.9460,
                        HorizontalAlignment.Left,
                            true,
                            757.7683,
                            new Dimension(812.9238),
                            true),
                    new PopupTemplate("est laudantium odio",
                            "eaque",
                            ["libero",
                                "vitae",
                                "id",
                                "excepturi"],
                        [new FieldInfo("name",
                                "aperiam",
                                "aut",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Stddev),
                        new FieldInfo("password",
                                "vitae",
                                "illum",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("updatedAt",
                                "eligendi",
                                "quis",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthDayYearLongTime24),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new AttachmentsPopupContent("eos ipsum ratione",
                                "repellat vel ad explicabo repellat aut velit",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "id",
                                "quisquam minus quia",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "category",
                                "esse consectetur facilis",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "category",
                                "reprehenderit officia et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "name",
                                "commodi voluptas delectus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("voluptatum dolore esse",
                                "https://picsum.photos/640/480/?image=210",
                                "b427fbff-8009-cdb5-1abc-44568d69a73d",
                                () => { Console.WriteLine("vel"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "dolorum"),
                        new ActionToggle("porro officia culpa",
                                "a90550f2-216b-3c37-465b-ac4a666581f7",
                                () => { Console.WriteLine("temporibus"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "id",
                                "quo")]),
                        new AttributesDictionary(),
                        true,
                        "sit",
                        "consequuntur",
                        new GraphicOrigin(Guid.NewGuid(),
                            "maxime",
                            7))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([2,
                    5,
                    8],
                    true,
                    9.1517,
                    98.8858,
                    "5.6.7.1",
                new Polyline([new MapPath([new MapPoint([950.2430,
                            327.0546]),
                        new MapPoint([157.1438,
                            74.5579,
                            288.2600,
                            227.4232]),
                        new MapPoint([490.9048,
                            378.4152])]),
                        new MapPath([new MapPoint([816.0987,
                                774.5378]),
                            new MapPoint([278.4652,
                                515.1926,
                                643.6982,
                                12.9540]),
                            new MapPoint([963.7686,
                                799.3676])]),
                        new MapPath([new MapPoint([121.3435,
                                424.8771,
                                654.3335]),
                            new MapPoint([399.1616,
                                127.0153])])],
                    new SpatialReference(1,
                            "pariatur",
                            "rerum",
                            "quo"),
                        true,
                        true),
                    6,
                    ["est",
                        "minus",
                        "molestiae",
                        "architecto"],
                    "voluptatum",
                    new DateTime(2008, 3, 9, 20, 47, 23),
                    44.0786,
                    7,
                    "voluptas",
                    3),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([6,
                    7,
                    8],
                    true,
                    852.2074,
                    74.0079,
                    "8.6.7.1",
                new Polyline([new MapPath([new MapPoint([954.6114,
                            832.1886,
                            542.8077,
                            789.6596]),
                        new MapPoint([217.3433,
                            927.4059,
                            684.1176,
                            683.0069])]),
                        new MapPath([new MapPoint([246.0210,
                                133.9176,
                                390.1529,
                                608.2575]),
                            new MapPoint([208.9792,
                                420.1645]),
                            new MapPoint([740.5370,
                                627.7214,
                                716.7347,
                                918.9657]),
                            new MapPoint([757.9479,
                                842.6647,
                                178.1924])]),
                        new MapPath([new MapPoint([291.3856,
                                262.3668,
                                765.6798]),
                            new MapPoint([44.4367,
                                631.4110,
                                212.6547,
                                792.9396]),
                            new MapPoint([950.7817,
                                53.6462,
                                5.1341,
                                743.5381])]),
                        new MapPath([new MapPoint([455.3482,
                                479.6655,
                                256.7523]),
                            new MapPoint([403.1502,
                                540.0841,
                                155.1643,
                                124.5502]),
                            new MapPoint([900.2537,
                                613.1348,
                                771.0247]),
                            new MapPoint([760.4145,
                                202.9714,
                                401.4690])])],
                    new SpatialReference(5,
                            "cum",
                            "qui",
                            "commodi"),
                        true,
                        true),
                    8,
                    ["impedit",
                        "beatae",
                        "itaque",
                        "expedita"],
                    "consequatur",
                    new DateTime(2005, 8, 4, 6, 9, 43),
                    966.7547,
                    5,
                    "quia",
                    4),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([7,
                    2],
                    true,
                    50.6229,
                    491.3174,
                    "6.0.9.3",
                new Polyline([new MapPath([new MapPoint([455.5846,
                            403.5604,
                            872.1708,
                            692.5633]),
                        new MapPoint([80.4993,
                            141.6295,
                            620.8682,
                            747.6924]),
                        new MapPoint([275.5795,
                            260.6063,
                            946.0501]),
                        new MapPoint([165.2244,
                            553.1488,
                            370.8701])])],
                    new SpatialReference(1,
                            "ut",
                            "voluptates",
                            "sequi"),
                        true,
                        true),
                    3,
                    ["sit",
                        "sunt",
                        "sunt"],
                    "odio",
                    new DateTime(2002, 1, 2, 22, 9, 56),
                    42.1093,
                    4,
                    "corporis",
                    1),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([7,
                    3,
                    4],
                    true,
                    669.2773,
                    550.6737,
                    "6.8.0.8",
                new Point(99.3263,
                        65.4386,
                        54.0226,
                        -46.2013,
                        955.9929,
                    new SpatialReference(4,
                            "in",
                            "nemo",
                            "fugit"),
                        true,
                        true,
                        809.2174),
                    5,
                    ["debitis",
                        "id"],
                    "pariatur",
                    new DateTime(2017, 9, 3, 8, 29, 44),
                    645.7275,
                    1,
                    "eius",
                    8),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Average;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("harum aut consectetur",
                    "in",
                    ["ad",
                        "autem"],
                [new FieldInfo("comment",
                        "distinctio",
                        "enim",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateLeLongTime24),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("name",
                        "fugit",
                        "iusto",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Avg)],
                [new RelationshipPopupContent("officia tenetur ab",
                        "aperiam delectus aut aut",
                        4,
                        "sit",
                    [new RelatedRecordsInfoFieldOrder("sed",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("exercitationem",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("totam",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("vel",
                        OrderBy.Asc)],
                        4)],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "phone",
                        "quidem tempore quod",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("consequatur qui earum",
                        "db196dec-6f3c-249a-b44e-e59e772b0f5e",
                        () => { Console.WriteLine("dolores"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "comment",
                        "temporibus"),
                new ActionToggle("nostrum laboriosam magnam",
                        "a5852990-f00f-013f-0355-613efc12b422",
                        () => { Console.WriteLine("consequatur"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "enim"),
                new ActionButton("porro hic voluptatem",
                        "https://picsum.photos/640/480/?image=875",
                        "3296e82a-3b9e-6d3c-1ed1-1be1647a4f5e",
                        () => { Console.WriteLine("expedita"); return Task.CompletedTask; },
                        "status",
                        true,
                        true,
                        true,
                        "vel"),
                new ActionButton("eos dolores iure",
                        "https://picsum.photos/640/480/?image=153",
                        "6ec3f963-97d3-27cc-b4bd-e1b50f83f500",
                        () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                        "title",
                        true,
                        true,
                        true,
                        "provident")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("var length = Geometry($feature).length; return length;",
                        "culpa magnam reprehenderit"),
                ElevationInfoMode.RelativeToScene,
                    945.5339,
                ElevationUnit.Millimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("repudiandae",
                    15519819.5351),
                    new Effect("enim",
                        46027681.0945),
                    new Effect("magni",
                        13841951.7946),
                    new Effect("quae",
                        32052223.5148)],
                    true,
                new FeatureFilter(301.9741,
                    new Extent(-17.5835,
                            114.8066,
                            -63.6459,
                            -30.3881,
                            68.4364,
                            155.3342,
                            724.7706,
                            885.9775,
                        new SpatialReference(4,
                                "tempore",
                                "expedita",
                                "aut"),
                            true,
                            true),
                        [5,
                            7],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2018, 2, 20, 14, 57, 32),
                            new DateTime(2021, 4, 24, 17, 56, 27)),
                        QueryUnits.Meters,
                        "Phone = '555-555-5555'"),
                    [new Effect("deleniti",
                        12344304.5252),
                        new Effect("asperiores",
                            40444035.4885),
                        new Effect("dolorem",
                            18019986.7845),
                        new Effect("autem",
                            5361065.7194)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "dolores",
                    "repellat et dignissimos perspiciatis quo harum quod",
                    8,
                    true,
                    true,
                    new { Value = "velit" },
                FieldValueType.CountOrAmount,
                new RangeDomain("recusandae",
                        "dolorum",
                        "group")),
            new Field(default,
                    "name",
                    "consequatur",
                    "velit a dolorum aut",
                    7,
                    true,
                    true,
                    new { Value = "eaque" },
                FieldValueType.NameOrTitle,
                new RangeDomain("qui",
                        "magni",
                        "updatedAt")),
            new Field(default,
                    "email",
                    "ut",
                    "dolor est voluptatibus nesciunt nobis officia ducimus",
                    3,
                    true,
                    true,
                    new { Value = "eveniet" },
                FieldValueType.Description,
                new RangeDomain("blanditiis",
                        "voluptate",
                        "id")),
            new Field(default,
                    "name",
                    "nulla",
                    "aspernatur ut sunt sint",
                    4,
                    true,
                    true,
                    new { Value = "tempora" },
                FieldValueType.CountOrAmount,
                new RangeDomain("aliquam",
                        "saepe",
                        "email"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-150.7492,
                    -20.1726,
                    -76.7474,
                    -77.5388,
                    298.6267,
                    685.5870,
                    902.9424,
                    264.9658,
                new SpatialReference(1,
                        "quia",
                        "dolore",
                        "blanditiis"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveStart,
                    "similique",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    21892743.6408,
                    35422.2388,
                    true,
                    new Dimension(75.3416),
                new TextSymbol("exercitationem non harum",
                    new MapColor(44, 106, 225),
                    new MapColor(151, 176, 124),
                        new Dimension(466.9300),
                    new MapFont(new Dimension(466.2867),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        778.1417,
                    new MapColor(115, 29, 138),
                    new MapColor(86, 200, 163),
                        585.6778,
                    HorizontalAlignment.Left,
                        true,
                        397.0189,
                        new Dimension(486.9147),
                        true),
                    true,
                    "Name = 'John Doe'"),
            new Label(LabelPlacement.CenterCenter,
                    "alias",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    36233432.6275,
                    47148.8286,
                    true,
                    new Dimension(232.5360),
                new TextSymbol("libero ullam eum",
                    new MapColor(199, 83, 237),
                    new MapColor(238, 64, 86),
                        new Dimension(488.8606),
                    new MapFont(new Dimension(377.5767),
                            "Verdana",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        46.3157,
                    new MapColor(173, 90, 84),
                    new MapColor(85, 57, 157),
                        886.4738,
                    HorizontalAlignment.Right,
                        true,
                        128.4885,
                        new Dimension(889.3190),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("aspernatur",
                SortOrder.Descending,
                    "consequatur")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "voluptas",
                    "aliquam",
                    890.5909,
                    ["eos",
                        "autem"],
                    new DateTime(2010, 3, 12, 18, 8, 42),
                    "sint",
                    "dignissimos ratione ea maxime",
                new Extent(28.0671,
                        151.1328,
                        61.2759,
                        -19.6086,
                        608.5739,
                        562.7258,
                        236.6217,
                        25.0325,
                    new SpatialReference(3,
                            "eum",
                            "esse",
                            "voluptatibus"),
                        true,
                        true),
                    ["libero",
                        "est",
                        "voluptatem",
                        "et"],
                    "nam",
                    new DateTime(2011, 5, 11, 20, 45, 11),
                    "phone",
                    777.4539);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("tenetur quis eum",
                    new MapColor(25, 194, 183),
                    new MapColor(84, 10, 17),
                        new Dimension(163.4509),
                    new MapFont(new Dimension(6.0300),
                            "Garamond",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        521.8136,
                    new MapColor(133, 133, 133),
                    new MapColor(101, 28, 76),
                        927.5026,
                    HorizontalAlignment.Right,
                        true,
                        888.0177,
                        new Dimension(817.4000),
                        true),
                    "corrupti",
                [new OpacityVariable("quo",
                        "et",
                    [new OpacityStop(502.5283,
                            0.8876,
                            "aliquam"),
                    new OpacityStop(877.9661,
                            0.8237,
                            "ex"),
                    new OpacityStop(183.4824,
                            0.1952,
                            "alias"),
                    new OpacityStop(725.0871,
                            0.8190,
                            "est")],
                    new VisualVariableLegendOptions(true,
                            "mollitia ut aliquam"),
                        "omnis",
                        "minus incidunt nihil"),
                new RotationVariable("ut",
                    Axis.Tilt,
                    RotationType.Geographic,
                    new VisualVariableLegendOptions(true,
                            "velit inventore harum"),
                        "quia",
                        "facere aliquam dolorem"),
                new SizeVariable("corrupti",
                        new Dimension(138.0703),
                        new Dimension(819.8344),
                        860.4870,
                        609.1133,
                        VisualValueRepresentation.Width,
                        VisualValueUnit.Feet,
                        "architecto",
                        "expedita",
                        true,
                        VisualAxis.Depth,
                        "omnis",
                        "aut velit ut",
                    new VisualVariableLegendOptions(true,
                            "distinctio animi rerum"))],
                new AuthoringInfo(ClassificationMethod.EqualInterval,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(104, 90, 139),
                        new MapColor(6, 199, 43)),
                        945.5517,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(472.6661,
                                888.4439),
                        new AuthoringInfoField1ClassBreakInfos(362.6353,
                                74.1177),
                        new AuthoringInfoField1ClassBreakInfos(995.0459,
                                223.1678),
                        new AuthoringInfoField1ClassBreakInfos(687.2587,
                                151.2513)],
                            "voluptas",
                            "maiores",
                            "officia"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(61.1913,
                                203.7256),
                        new AuthoringInfoField1ClassBreakInfos(17.1456,
                                479.7382),
                        new AuthoringInfoField1ClassBreakInfos(390.2363,
                                815.9279)],
                            "at",
                            "deserunt",
                            "ratione"),
                        ["qui",
                            "quidem"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "voluptatem",
                        true,
                    LengthUnit.Yards,
                        410.8249,
                        25.7587,
                        521.2421,
                        214.3985));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "corporis",
                    "vero",
                    "vel");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2001, 8, 1, 4, 38, 27),
                    new DateTime(2003, 8, 11, 2, 39, 17));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("laboriosam",
                    "dolores",
                new TimeExtent(new DateTime(2007, 9, 7, 9, 15, 54),
                        new DateTime(2020, 3, 7, 15, 15, 20)),
                new TimeInterval(TemporalTime.Seconds,
                        312.0667),
                    [new DateTime(2007, 7, 26, 14, 12, 43),
                        new DateTime(2004, 7, 18, 18, 19, 8)],
                    "Pacific/Honolulu",
                    "qui");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Minutes,
                    307.5421);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2010, 11, 23, 7, 4, 50),
                    new DateTime(2020, 4, 16, 6, 14, 33));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
