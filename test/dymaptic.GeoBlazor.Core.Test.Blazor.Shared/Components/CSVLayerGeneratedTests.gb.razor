@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("dignissimos similique officiis")"
                        Copyright="@("consequatur")"
                        Opacity="@(0.1314)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Lighter)"
                        DefinitionExpression="@("dolorem")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("aut")"
                        Effect="@(new Effect("porro",
                            37485704.1131))"
                        FullExtent="@(new Extent(-157.4983,
                                17.7643,
                                -52.2086,
                                -54.8979,
                                548.4486,
                                379.9775,
                                382.0742,
                                778.5811,
                            new SpatialReference(2,
                                    "sit",
                                    "distinctio",
                                    "unde"),
                                true,
                                true))"
                        GeometryType="@("alias")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("id")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("vero")"
                        MaxScale="@(31510892.5776)"
                        MinScale="@(49651.0158)"
                        ObjectIdField="@("facilis")"
                        OutFields="@(["voluptates",
                            "aliquam",
                            "tenetur"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(474.0395)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(3,
                                "quia",
                                "et",
                                "sit"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(330.1776)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("aut")"
                            EndField="@("velit")"
                            Stops="@([new DateTime(2015, 11, 16, 6, 27, 26),
                                new DateTime(2021, 7, 24, 3, 58, 39)])"
                            TimeZone="@("America/Denver")"
                            TrackIdField="@("dolore")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(517.1015)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2017, 9, 12, 17, 45, 34))"
                                End="@(new DateTime(2007, 5, 25, 18, 10, 40))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2023, 11, 14, 2, 44, 56))"
                            End="@(new DateTime(2023, 1, 11, 10, 18, 51))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Manual,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(136, 113, 21),
                                    new MapColor(240, 100, 212)),
                                    313.7696,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(73.8270,
                                            561.9042),
                                    new AuthoringInfoField1ClassBreakInfos(654.8395,
                                            876.2802),
                                    new AuthoringInfoField1ClassBreakInfos(981.7118,
                                            169.7560),
                                    new AuthoringInfoField1ClassBreakInfos(324.1585,
                                            303.1926)],
                                        "autem",
                                        "et",
                                        "ab"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(584.7863,
                                            153.5774)],
                                        "nostrum",
                                        "itaque",
                                        "ratione"),
                                    ["deserunt",
                                        "natus"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "rerum",
                                    true,
                                LengthUnit.Inches,
                                    495.3507,
                                    197.5429,
                                    730.1730,
                                    114.2662))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("et libero assumenda")"
                            StringContent="@("soluta")"
                            OutFields="@(["tenetur",
                                "id"])"
                            FieldInfos="@([new FieldInfo("phone",
                                    "odio",
                                    "debitis",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("comment",
                                    "nostrum",
                                    "alias",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("comment",
                                    "unde",
                                    "ab",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("name",
                                    "assumenda",
                                    "nobis",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("avatar",
                                        "nostrum",
                                        "reprehenderit",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.LongMonthDayYearShortTime),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("email",
                                        "cupiditate",
                                        "id",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.DayShortMonthYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "nobis neque nisi sunt doloribus",
                                    "quis dolores eveniet"),
                            new TextPopupContent("et iure et"),
                            new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "est",
                                        "cumque ut quidem"))])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "createdAt",
                                    "officiis sint amet",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "email",
                                    "a molestiae voluptates",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "createdAt",
                                    "et sint ratione",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "createdAt",
                                    "dolorem et velit",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("quia animi officia",
                                    "https://picsum.photos/640/480/?image=561",
                                    "e8bab99e-9223-9a9d-85a9-96fca2267d27",
                                    () => { Console.WriteLine("quas"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "tempora"),
                            new ActionToggle("sint ullam eum",
                                    "e0ebcfb5-3731-f22b-be7a-b9fbc68aaaad",
                                    () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "token",
                                    "eos"),
                            new ActionButton("reprehenderit architecto quas",
                                    "https://picsum.photos/640/480/?image=896",
                                    "40dd909d-cfa3-e56b-c039-6a94a56db2ea",
                                    () => { Console.WriteLine("ab"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "sit"),
                            new ActionButton("sint distinctio corrupti",
                                    "https://picsum.photos/640/480/?image=577",
                                    "41ea7e8c-1b27-f174-1a9a-85437b4b03ea",
                                    () => { Console.WriteLine("blanditiis"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "et")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("et")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("qui")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterStart)"
                            LabelExpression="@("velit")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(19772969.5734)"
                            MinScale="@(39579.4869)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(879.9475))"
                            Symbol="@(new TextSymbol("et aut blanditiis",
                                new MapColor(82, 50, 235),
                                new MapColor(103, 7, 123),
                                    new Dimension(473.7530),
                                new MapFont(new Dimension(175.8223),
                                        "Arial",
                                    MapFontStyle.Normal,
                                    FontWeight.Bolder,
                                    TextDecoration.LineThrough),
                                    745.2756,
                                new MapColor(118, 167, 20),
                                new MapColor(218, 81, 124),
                                    920.6121,
                                HorizontalAlignment.Center,
                                    true,
                                    775.0433,
                                    new Dimension(847.8767),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Province = 'Ontario'")">
                        </Label>
                        <Field 
                            Name="@("id")"
                            Alias="@("omnis")"
                            Description="@("aut quos impedit rerum doloremque")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "cum" })"
                            ValueType="@(FieldValueType.PercentageOrRatio)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("quos",
                                28698230.3916)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(62.5923,
                                new Polygon([new MapPath([new MapPoint([219.7375,
                                            529.4552,
                                            283.7421,
                                            96.4010]),
                                        new MapPoint([149.0661,
                                            791.2842,
                                            195.2996]),
                                        new MapPoint([422.6374,
                                            574.9620,
                                            152.5241])]),
                                        new MapPath([new MapPoint([909.5928,
                                                113.0193,
                                                53.6701]),
                                            new MapPoint([322.2950,
                                                286.2806]),
                                            new MapPoint([771.2306,
                                                269.1482,
                                                899.5594,
                                                791.5656])])],
                                    new SpatialReference(6,
                                            "optio",
                                            "aut",
                                            "iste"),
                                    new Point(-173.8395,
                                            -72.3657,
                                            -175.2906,
                                            -13.7239,
                                            15.5154,
                                        new SpatialReference(8,
                                                "fugiat",
                                                "et",
                                                "aut"),
                                            true,
                                            true,
                                            499.6162),
                                        true,
                                        true,
                                        true),
                                    [5,
                                        4,
                                        7],
                                SpatialRelationship.Crosses,
                                new TimeExtent(new DateTime(2008, 11, 10, 5, 54, 3),
                                        new DateTime(2009, 8, 12, 19, 8, 7)),
                                    QueryUnits.Meters,
                                    "Province = 'Ontario'"))"
                            IncludedEffect="@([new Effect("atque",
                                37964434.0084),
                                new Effect("distinctio",
                                    41019216.2662),
                                new Effect("possimus",
                                    21815808.3595)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "nemo blanditiis fuga"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(654.0026)"
                            Unit="@(ElevationUnit.Inches)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["nemo",
                    "et",
                    "delectus"],
                    ["phone",
                        "password",
                        "password"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("token");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("comment",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([828.6493,
                                89.2251]),
                            new MapPoint([530.3372,
                                391.1438,
                                325.4853,
                                331.2860]),
                            new MapPoint([100.9476,
                                748.1927,
                                486.3290]),
                            new MapPoint([55.4451,
                                759.6838,
                                468.4831,
                                528.9536])])],
                        new SpatialReference(1,
                                "ut",
                                "dignissimos",
                                "ratione"),
                        new Point(-80.4448,
                                48.8281,
                                67.4484,
                                -54.9880,
                                221.4541,
                            new SpatialReference(3,
                                    "perferendis",
                                    "quia",
                                    "ullam"),
                                true,
                                true,
                                73.3656),
                            true,
                            true,
                            true),
                    new TextSymbol("optio rerum et",
                        new MapColor(76, 156, 67),
                        new MapColor(29, 109, 162),
                            new Dimension(82.5256),
                        new MapFont(new Dimension(338.8776),
                                "Arial",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            505.1148,
                        new MapColor(117, 38, 248),
                        new MapColor(66, 172, 219),
                            218.6444,
                        HorizontalAlignment.Left,
                            true,
                            523.5872,
                            new Dimension(304.9371),
                            true),
                    new PopupTemplate("cumque quo voluptas",
                            "sit",
                            ["tenetur",
                                "voluptas"],
                        [new FieldInfo("name",
                                "porro",
                                "commodi",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("createdAt",
                                "praesentium",
                                "numquam",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("token",
                                "totam",
                                "sapiente",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.ShortDateLongTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new TextPopupContent("accusantium qui quia"),
                        new MediaPopupContent("amet debitis officiis",
                                "ut similique ut qui",
                            [new ColumnChartMediaInfo("est vero cupiditate",
                                    "vitae",
                                    "necessitatibus ducimus doloribus",
                                new ChartMediaInfoValue(["maiores",
                                        "qui"],
                                        "inventore",
                                        "esse",
                                    [new ChartMediaInfoValueSeries("avatar",
                                            "ut",
                                            270.1420),
                                    new ChartMediaInfoValueSeries("token",
                                            "expedita",
                                            523.6676)],
                                    [new MapColor(223, 12, 68),
                                    new MapColor(104, 98, 28),
                                    new MapColor(231, 107, 214),
                                    new MapColor(183, 37, 227)]))],
                                4)],
                        [new ExpressionInfo("return Date();",
                                "category",
                                "est qui dicta",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "phone",
                                "et et nesciunt",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("ex consequatur quisquam",
                                "https://picsum.photos/640/480/?image=772",
                                "bfcac865-a275-c554-c3f6-224c5b13d15e",
                                () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                "phone",
                                true,
                                true,
                                true,
                                "at"),
                        new ActionButton("quo eum vel",
                                "https://picsum.photos/640/480/?image=36",
                                "9bfe6b49-4e5d-0018-8589-2aa10a2626db",
                                () => { Console.WriteLine("dicta"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "est"),
                        new ActionToggle("ex officia dolorem",
                                "7d343ce6-b3fd-e73b-4c3e-71f6d233bd9d",
                                () => { Console.WriteLine("dolorum"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "createdAt",
                                "distinctio")]),
                        new AttributesDictionary(),
                        true,
                        "laborum",
                        "provident",
                        new GraphicOrigin(Guid.NewGuid(),
                            "non",
                            3))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([8,
                    9],
                    true,
                    752.5237,
                    136.1718,
                    "0.9.2.8",
                new Polygon([new MapPath([new MapPoint([400.3753,
                            450.0883]),
                        new MapPoint([707.2940,
                            293.1641]),
                        new MapPoint([635.8041,
                            265.0023]),
                        new MapPoint([766.9564,
                            739.4672,
                            527.0886])]),
                        new MapPath([new MapPoint([463.4155,
                                645.7124]),
                            new MapPoint([90.6059,
                                401.3382,
                                551.5685]),
                            new MapPoint([595.8913,
                                368.9814,
                                435.4733,
                                979.8130]),
                            new MapPoint([65.2964,
                                931.9348,
                                59.3553])])],
                    new SpatialReference(9,
                            "non",
                            "aut",
                            "dolores"),
                    new Point(154.5245,
                            42.7745,
                            63.1457,
                            -89.6617,
                            49.2645,
                        new SpatialReference(4,
                                "harum",
                                "itaque",
                                "minima"),
                            true,
                            true,
                            984.6632),
                        true,
                        true,
                        true),
                    1,
                    ["aut",
                        "ab",
                        "et"],
                    "sint",
                    new DateTime(2007, 7, 4, 21, 24, 10),
                    997.7936,
                    7,
                    "similique",
                    3),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([8,
                    2,
                    9,
                    8],
                    true,
                    333.7993,
                    875.2550,
                    "9.7.2.3",
                new Polygon([new MapPath([new MapPoint([978.5747,
                            494.8146,
                            291.5229]),
                        new MapPoint([656.9249,
                            901.9109]),
                        new MapPoint([19.0129,
                            664.7986]),
                        new MapPoint([127.5974,
                            925.2767])])],
                    new SpatialReference(8,
                            "aut",
                            "explicabo",
                            "et"),
                    new Point(-64.8246,
                            -85.1414,
                            -52.0948,
                            5.3738,
                            824.1049,
                        new SpatialReference(3,
                                "accusamus",
                                "quo",
                                "odit"),
                            true,
                            true,
                            158.3186),
                        true,
                        true,
                        true),
                    1,
                    ["ut",
                        "unde",
                        "recusandae"],
                    "eaque",
                    new DateTime(2003, 11, 19, 2, 14, 31),
                    467.7927,
                    7,
                    "et",
                    8),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([8,
                    5],
                    true,
                    572.5134,
                    288.1419,
                    "3.1.7.3",
                new Point(60.7477,
                        -68.1642,
                        -102.3075,
                        52.1283,
                        254.7362,
                    new SpatialReference(2,
                            "aperiam",
                            "tempore",
                            "voluptas"),
                        true,
                        true,
                        540.8251),
                    8,
                    ["aut",
                        "omnis",
                        "doloremque"],
                    "sint",
                    new DateTime(2016, 5, 4, 16, 55, 35),
                    580.5445,
                    1,
                    "fugit",
                    4),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([8,
                    6,
                    1,
                    9],
                    true,
                    117.1366,
                    228.8193,
                    "8.3.9.2",
                new Polygon([new MapPath([new MapPoint([274.3839,
                            499.2345]),
                        new MapPoint([141.4828,
                            334.5265])])],
                    new SpatialReference(7,
                            "dolores",
                            "quos",
                            "possimus"),
                    new Point(88.3315,
                            29.5032,
                            75.1035,
                            30.0696,
                            362.8245,
                        new SpatialReference(3,
                                "sapiente",
                                "qui",
                                "corrupti"),
                            true,
                            true,
                            108.2633),
                        true,
                        true,
                        true),
                    2,
                    ["aut",
                        "cupiditate"],
                    "soluta",
                    new DateTime(2023, 3, 7, 20, 49, 53),
                    106.9316,
                    9,
                    "quo",
                    6),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Reflect;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("ad tenetur quisquam",
                    "soluta",
                    ["suscipit",
                        "quia"],
                [new FieldInfo("name",
                        "eaque",
                        "dolorum",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("group",
                        "error",
                        "aliquam",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongDateLongTime),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("comment",
                        "eius",
                        "quam",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDateLongTime24),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new TextPopupContent("maxime temporibus enim")],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "comment",
                        "nostrum eaque dolores",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "title",
                        "iusto eaque quasi",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "id",
                        "aliquam aut qui",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "comment",
                        "incidunt molestiae magni",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("porro nulla totam",
                        "https://picsum.photos/640/480/?image=114",
                        "b2b63155-2e27-8a47-65fe-f8a5bd131805",
                        () => { Console.WriteLine("nostrum"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "et"),
                new ActionButton("dolores dolor laborum",
                        "https://picsum.photos/640/480/?image=68",
                        "3f68600f-9bde-4531-6a2e-7d35c8cfaac7",
                        () => { Console.WriteLine("dolorum"); return Task.CompletedTask; },
                        "title",
                        true,
                        true,
                        true,
                        "blanditiis"),
                new ActionButton("quisquam maiores nesciunt",
                        "https://picsum.photos/640/480/?image=70",
                        "3ecb63f1-0151-863f-f8a0-a530c80d9860",
                        () => { Console.WriteLine("veritatis"); return Task.CompletedTask; },
                        "group",
                        true,
                        true,
                        true,
                        "aliquam"),
                new ActionButton("nihil aut earum",
                        "https://picsum.photos/640/480/?image=915",
                        "6a2f2ada-2ca4-7c30-be47-dbae37640d89",
                        () => { Console.WriteLine("molestiae"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "consectetur")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "id repudiandae nulla"),
                ElevationInfoMode.AbsoluteHeight,
                    999.5690,
                ElevationUnit.Meters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("sunt",
                    29212202.0674),
                    new Effect("omnis",
                        32827690.1308),
                    new Effect("pariatur",
                        3023923.4660),
                    new Effect("quasi",
                        27197178.1698)],
                    true,
                new FeatureFilter(520.8649,
                    new Extent(-3.4297,
                            -46.3504,
                            -29.3398,
                            -60.7783,
                            665.2530,
                            569.0624,
                            481.7410,
                            640.6583,
                        new SpatialReference(5,
                                "dicta",
                                "laudantium",
                                "amet"),
                            true,
                            true),
                        [7,
                            1],
                    SpatialRelationship.IndexIntersects,
                    new TimeExtent(new DateTime(2000, 10, 9, 5, 29, 38),
                            new DateTime(2012, 11, 5, 9, 8, 45)),
                        QueryUnits.Feet,
                        "Country = 'Canada'"),
                    [new Effect("nemo",
                        3567355.4394)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "phone",
                    "error",
                    "dolorem enim sapiente omnis",
                    4,
                    true,
                    true,
                    new { Value = "iste" },
                FieldValueType.TypeOrCategory,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "avatar",
                    "et",
                    "dolores quaerat ex repellat",
                    6,
                    true,
                    true,
                    new { Value = "ut" },
                FieldValueType.TypeOrCategory,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "phone",
                    "eos",
                    "non cumque quis dignissimos sint explicabo inventore",
                    6,
                    true,
                    true,
                    new { Value = "fuga" },
                FieldValueType.Binary,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "token",
                    "corrupti",
                    "consequatur consequatur numquam et esse",
                    6,
                    true,
                    true,
                    new { Value = "consectetur" },
                FieldValueType.None,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(169.9204,
                    26.3794,
                    45.4396,
                    -51.0097,
                    533.8078,
                    176.2262,
                    687.9926,
                    265.5750,
                new SpatialReference(6,
                        "ut",
                        "perferendis",
                        "aut"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveRight,
                    "qui",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    17035851.9764,
                    15390.9003,
                    true,
                    new Dimension(230.8535),
                new TextSymbol("voluptatem nisi eligendi",
                    new MapColor(96, 210, 15),
                    new MapColor(143, 174, 24),
                        new Dimension(834.1024),
                    new MapFont(new Dimension(211.6176),
                            "Helvetica",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        640.4789,
                    new MapColor(136, 165, 202),
                    new MapColor(199, 43, 209),
                        46.2907,
                    HorizontalAlignment.Center,
                        true,
                        562.7682,
                        new Dimension(811.0854),
                        true),
                    true,
                    "City = 'Toronto'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("necessitatibus",
                SortOrder.Descending,
                    "perspiciatis"),
            new OrderedLayerOrderBy("blanditiis",
                SortOrder.Descending,
                    "dolorum"),
            new OrderedLayerOrderBy("harum",
                SortOrder.Ascending,
                    "consectetur")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("ipsum ipsa dicta",
                    new MapColor(199, 22, 44),
                    new MapColor(8, 83, 28),
                        new Dimension(579.5357),
                    new MapFont(new Dimension(803.7904),
                            "Helvetica",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        718.8319,
                    new MapColor(40, 178, 49),
                    new MapColor(44, 84, 108),
                        745.0806,
                    HorizontalAlignment.Left,
                        true,
                        416.0336,
                        new Dimension(422.7343),
                        true),
                    "praesentium",
                [new SizeVariable("laborum",
                        new Dimension(853.9919),
                        new Dimension(502.5164),
                        807.9431,
                        235.1801,
                        VisualValueRepresentation.Area,
                        VisualValueUnit.Inches,
                        "recusandae",
                        "aut",
                        true,
                        VisualAxis.Height,
                        "provident",
                        "rerum voluptatem odio",
                    new VisualVariableLegendOptions(true,
                            "nisi aut et")),
                new ColorVariable("facilis",
                        "ea",
                    [new ColorStop(432.4476,
                        new MapColor(254, 152, 10),
                            "et")],
                    new VisualVariableLegendOptions(true,
                            "cum nostrum omnis"),
                        "accusamus",
                        "velit dolor autem"),
                new SizeVariable("voluptate",
                        new Dimension(129.3139),
                        new Dimension(60.9689),
                        321.1259,
                        238.1056,
                        VisualValueRepresentation.Radius,
                        VisualValueUnit.Unknown,
                        "repellendus",
                        "autem",
                        true,
                        VisualAxis.Depth,
                        "facere",
                        "corporis error aut",
                    new VisualVariableLegendOptions(true,
                            "fugit voluptatum incidunt")),
                new ColorVariable("reiciendis",
                        "qui",
                    [new ColorStop(988.2746,
                        new MapColor(177, 115, 18),
                            "minus"),
                    new ColorStop(633.1524,
                        new MapColor(113, 29, 85),
                            "ut")],
                    new VisualVariableLegendOptions(true,
                            "ab quidem consequatur"),
                        "id",
                        "rerum deleniti ad")],
                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(186, 230, 109),
                        new MapColor(30, 177, 243)),
                        616.6579,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(704.4110,
                                99.0630),
                        new AuthoringInfoField1ClassBreakInfos(198.5093,
                                173.5898)],
                            "voluptatum",
                            "sapiente",
                            "et"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(883.9285,
                                326.0447),
                        new AuthoringInfoField1ClassBreakInfos(307.9633,
                                495.7141)],
                            "odio",
                            "sapiente",
                            "ex"),
                        ["autem",
                            "odit"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "rem",
                        true,
                    LengthUnit.Millimeters,
                        224.7704,
                        296.7881,
                        625.5353,
                        514.8555));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "culpa",
                    "distinctio",
                    "eum");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 4, 14, 7, 31, 39),
                    new DateTime(2018, 8, 3, 21, 14, 40));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("eveniet",
                    "fugit",
                new TimeExtent(new DateTime(2005, 9, 12, 3, 38, 6),
                        new DateTime(2010, 2, 27, 6, 3, 57)),
                new TimeInterval(TemporalTime.Weeks,
                        906.4222),
                    [new DateTime(2016, 8, 26, 8, 6, 33),
                        new DateTime(2012, 5, 2, 18, 1, 54)],
                    "Pacific/Pago_Pago",
                    "minima");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    267.0415);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 8, 27, 10, 12, 45),
                    new DateTime(2016, 7, 9, 18, 26, 33));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
