@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("et quisquam facilis")"
                        Copyright="@("nemo")"
                        Opacity="@(0.4143)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.SourceAtop)"
                        DefinitionExpression="@("occaecati")"
                        Delimiter="@(CSVDelimiter.Space)"
                        DisplayField="@("alias")"
                        Effect="@(new Effect("sequi",
                            13945933.7835))"
                        FullExtent="@(new Extent(126.8291,
                                107.9712,
                                -65.6281,
                                -28.1395,
                                833.5883,
                                839.5313,
                                894.7702,
                                736.5956,
                            new SpatialReference(3,
                                    "velit",
                                    "fugiat",
                                    "est"),
                                true,
                                true))"
                        GeometryType="@("incidunt")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("reiciendis")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("asperiores")"
                        MaxScale="@(21154033.2741)"
                        MinScale="@(39506.1407)"
                        ObjectIdField="@("dolores")"
                        OutFields="@(["voluptas",
                            "aspernatur",
                            "est",
                            "molestiae"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(251.8129)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(3,
                                "consequatur",
                                "et",
                                "commodi"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(150.7960)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("repellendus")"
                            EndField="@("qui")"
                            Stops="@([new DateTime(2022, 11, 21, 10, 28, 21),
                                new DateTime(2023, 11, 5, 8, 26, 21),
                                new DateTime(2010, 2, 24, 13, 50, 50)])"
                            TimeZone="@("America/Argentina/Buenos_Aires")"
                            TrackIdField="@("reiciendis")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Weeks)"
                                Value="@(665.0480)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2002, 2, 21, 9, 12, 11))"
                                End="@(new DateTime(2003, 11, 18, 5, 0, 5))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2002, 8, 10, 10, 27, 20))"
                            End="@(new DateTime(2023, 6, 24, 21, 12, 55))">
                        </TimeExtent>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(95, 22, 2),
                                    new MapColor(52, 145, 250)),
                                    234.1488,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(485.1259,
                                            384.2144)],
                                        "laudantium",
                                        "omnis",
                                        "enim"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(961.2301,
                                            841.1494),
                                    new AuthoringInfoField1ClassBreakInfos(634.5480,
                                            194.8258)],
                                        "ipsum",
                                        "excepturi",
                                        "esse"),
                                    ["qui",
                                        "est",
                                        "similique",
                                        "accusantium"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "et",
                                    true,
                                LengthUnit.Yards,
                                    117.4096,
                                    964.7621,
                                    231.2872,
                                    27.5600))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("ut vero repellendus")"
                            StringContent="@("minima")"
                            OutFields="@(["provident",
                                "occaecati",
                                "magnam"])"
                            FieldInfos="@([new FieldInfo("phone",
                                    "dicta",
                                    "explicabo",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("group",
                                    "nostrum",
                                    "et",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Stddev)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("phone",
                                        "dolorem",
                                        "natus",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongDateLongTime24),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("password",
                                        "provident",
                                        "alias",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.Year),
                                        true,
                                        true,
                                    StatisticType.Min)],
                                    "qui fuga ut animi eos possimus",
                                    "et ut fugiat"),
                            new RelationshipPopupContent("inventore laudantium architecto",
                                    "aperiam dignissimos soluta beatae quo voluptatibus vero",
                                    7,
                                    "est",
                                [new RelatedRecordsInfoFieldOrder("omnis",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("ut",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("nostrum",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("quas",
                                    OrderBy.Desc)],
                                    2)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "category",
                                    "autem ea ea",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "createdAt",
                                    "et fuga laborum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "title",
                                    "quo dolor ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "createdAt",
                                    "eligendi delectus rerum",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("dolorem inventore sunt",
                                    "https://picsum.photos/640/480/?image=124",
                                    "b330e2f2-03e2-c7e1-4567-a8a070ef0bd9",
                                    () => { Console.WriteLine("soluta"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "blanditiis"),
                            new ActionToggle("at necessitatibus voluptatem",
                                    "c0964922-5f0f-d305-956e-b8d828fb1d28",
                                    () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "name",
                                    "debitis")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("et")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("sit")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowAfter)"
                            LabelExpression="@("beatae")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(46532642.4621)"
                            MinScale="@(15180.9019)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(85.4224))"
                            Symbol="@(new TextSymbol("sunt deserunt facilis",
                                new MapColor(224, 253, 215),
                                new MapColor(186, 155, 148),
                                    new Dimension(711.7229),
                                new MapFont(new Dimension(478.2572),
                                        "Bookman",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.Underline),
                                    438.6197,
                                new MapColor(236, 45, 244),
                                new MapColor(245, 105, 148),
                                    420.8097,
                                HorizontalAlignment.Left,
                                    true,
                                    866.7799,
                                    new Dimension(762.6146),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("PostalCode = 'M5V 1J9'")">
                        </Label>
                        <Field 
                            Name="@("createdAt")"
                            Alias="@("et")"
                            Description="@("dolorem placeat autem eum")"
                            Length="@(1)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "quo" })"
                            ValueType="@(FieldValueType.Coordinate)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("blanditiis",
                                9634917.7776)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(346.9371,
                                new Polyline([new MapPath([new MapPoint([196.1537,
                                            449.5020,
                                            907.9697,
                                            486.0376]),
                                        new MapPoint([343.2890,
                                            93.9477,
                                            492.5177]),
                                        new MapPoint([362.9122,
                                            768.6355,
                                            726.9921])]),
                                        new MapPath([new MapPoint([264.1256,
                                                395.5357,
                                                897.0140]),
                                            new MapPoint([698.8941,
                                                9.6697,
                                                563.8503])]),
                                        new MapPath([new MapPoint([38.3660,
                                                471.0580,
                                                760.0705]),
                                            new MapPoint([78.7336,
                                                386.6887]),
                                            new MapPoint([127.4860,
                                                863.7943,
                                                914.5679,
                                                41.5997]),
                                            new MapPoint([711.7329,
                                                856.8981,
                                                938.7696,
                                                134.0424])])],
                                    new SpatialReference(3,
                                            "aspernatur",
                                            "excepturi",
                                            "quo"),
                                        true,
                                        true),
                                    [1,
                                        4,
                                        4],
                                SpatialRelationship.Intersects,
                                new TimeExtent(new DateTime(2018, 8, 2, 15, 40, 41),
                                        new DateTime(2009, 5, 11, 8, 14, 4)),
                                    QueryUnits.NauticalMiles,
                                    "Province = 'Ontario'"))"
                            IncludedEffect="@([new Effect("magni",
                                5459305.7792),
                                new Effect("ipsa",
                                    31850182.1361),
                                new Effect("magni",
                                    33838415.7801),
                                new Effect("labore",
                                    6546470.7335)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "et corporis excepturi"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(671.8665)"
                            Unit="@(ElevationUnit.UsFeet)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["vero",
                    "fugit",
                    "recusandae",
                    "id"],
                    ["password",
                        "group",
                        "updatedAt",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("password");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("group",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Point(178.8266,
                            -87.9269,
                            -26.4594,
                            -32.5508,
                            116.2049,
                        new SpatialReference(5,
                                "suscipit",
                                "magnam",
                                "qui"),
                            true,
                            true,
                            81.3545),
                    new TextSymbol("ab natus magni",
                        new MapColor(18, 157, 10),
                        new MapColor(238, 222, 210),
                            new Dimension(268.3027),
                        new MapFont(new Dimension(930.4827),
                                "Arial",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            946.2314,
                        new MapColor(193, 108, 193),
                        new MapColor(132, 222, 145),
                            177.0221,
                        HorizontalAlignment.Right,
                            true,
                            369.3799,
                            new Dimension(113.8738),
                            true),
                    new PopupTemplate("accusamus eos facere",
                            "esse",
                            ["qui",
                                "in",
                                "quibusdam"],
                        [new FieldInfo("createdAt",
                                "nemo",
                                "natus",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("createdAt",
                                "omnis",
                                "qui",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Max)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                                    "voluptate",
                                    "corrupti non quas")),
                        new TextPopupContent("voluptatibus ut alias"),
                        new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                    "atque",
                                    "perspiciatis quos ut"))],
                        [new ExpressionInfo("return $feature.Name;",
                                "name",
                                "ut ipsam minima",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "id",
                                "est fugiat deleniti",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "email",
                                "tempora aut quia",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "name",
                                "dolorem delectus perspiciatis",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("sed est rerum",
                                "1987a695-23ac-0875-17ab-0234817351cd",
                                () => { Console.WriteLine("dolor"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "status",
                                "repellendus"),
                        new ActionToggle("inventore possimus tempore",
                                "df230c12-d4a3-bbd3-4ccf-fbf27aa704a1",
                                () => { Console.WriteLine("minima"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "id",
                                "similique"),
                        new ActionToggle("aut quod quia",
                                "e2a14038-c741-889c-d874-889d5aa74dc2",
                                () => { Console.WriteLine("vitae"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "comment",
                                "nisi")]),
                        new AttributesDictionary(),
                        true,
                        "aliquid",
                        "rerum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "dolores",
                            6))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([5,
                    8,
                    7],
                    true,
                    567.8912,
                    132.2499,
                    "6.1.8.0",
                new Extent(-38.1547,
                        87.7207,
                        -14.1651,
                        -48.1070,
                        826.5241,
                        722.3658,
                        810.3097,
                        14.9302,
                    new SpatialReference(1,
                            "voluptatibus",
                            "error",
                            "nihil"),
                        true,
                        true),
                    5,
                    ["quam",
                        "tempore",
                        "qui",
                        "consectetur"],
                    "architecto",
                    new DateTime(2006, 11, 6, 14, 24, 40),
                    380.7711,
                    8,
                    "sit",
                    4),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([9,
                    8,
                    1,
                    9],
                    true,
                    264.2918,
                    317.7376,
                    "2.6.4.7",
                new Extent(-61.3031,
                        42.3981,
                        -11.6612,
                        -72.0409,
                        539.1453,
                        667.4951,
                        724.3462,
                        527.7076,
                    new SpatialReference(6,
                            "nulla",
                            "magnam",
                            "sit"),
                        true,
                        true),
                    3,
                    ["quia",
                        "est",
                        "nulla",
                        "quisquam"],
                    "culpa",
                    new DateTime(2023, 8, 27, 21, 15, 2),
                    487.0414,
                    7,
                    "quia",
                    5),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([2,
                    3,
                    8],
                    true,
                    480.3296,
                    253.8722,
                    "9.5.8.3",
                new Polyline([new MapPath([new MapPoint([120.3891,
                            37.4685,
                            41.6930,
                            51.6130]),
                        new MapPoint([348.4606,
                            288.8666])]),
                        new MapPath([new MapPoint([446.8447,
                                444.1685]),
                            new MapPoint([48.0327,
                                367.9700,
                                281.3755,
                                743.5830]),
                            new MapPoint([387.2716,
                                801.5431,
                                17.4266,
                                129.2994])]),
                        new MapPath([new MapPoint([839.9251,
                                819.2533,
                                441.5751]),
                            new MapPoint([679.8384,
                                757.3209])])],
                    new SpatialReference(7,
                            "occaecati",
                            "et",
                            "nihil"),
                        true,
                        true),
                    4,
                    ["omnis",
                        "nulla",
                        "id",
                        "nesciunt"],
                    "labore",
                    new DateTime(2011, 7, 23, 13, 7, 32),
                    889.6317,
                    1,
                    "consectetur",
                    2),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([6,
                    9],
                    true,
                    863.2098,
                    97.6187,
                    "7.2.2.0",
                new Polyline([new MapPath([new MapPoint([550.7431,
                            11.8240]),
                        new MapPoint([53.8143,
                            200.1222,
                            859.0036]),
                        new MapPoint([918.1837,
                            231.1734,
                            147.1496,
                            621.9960]),
                        new MapPoint([661.1385,
                            50.6528])]),
                        new MapPath([new MapPoint([315.6298,
                                405.0298,
                                468.9629,
                                912.9265]),
                            new MapPoint([646.5897,
                                262.7296,
                                939.7225]),
                            new MapPoint([306.3836,
                                343.5507,
                                27.7884,
                                646.2106]),
                            new MapPoint([589.2136,
                                550.9392,
                                517.0831])]),
                        new MapPath([new MapPoint([24.9957,
                                473.1417]),
                            new MapPoint([640.7127,
                                869.7692]),
                            new MapPoint([475.8587,
                                663.3724,
                                873.9965,
                                84.3408]),
                            new MapPoint([648.2284,
                                783.4986,
                                607.6913])])],
                    new SpatialReference(3,
                            "a",
                            "officia",
                            "et"),
                        true,
                        true),
                    4,
                    ["sed",
                        "et",
                        "non"],
                    "quas",
                    new DateTime(2019, 11, 11, 12, 51, 22),
                    63.2154,
                    2,
                    "ut",
                    1),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Minus;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("porro illo itaque",
                    "officia",
                    ["autem",
                        "accusantium",
                        "molestiae",
                        "nemo"],
                [new FieldInfo("updatedAt",
                        "qui",
                        "est",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.ShortDateLeLongTime24),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("updatedAt",
                        "sint",
                        "magnam",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("email",
                        "asperiores",
                        "laborum",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.ShortDateLongTime24),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("id",
                        "ut",
                        "nihil",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongDate),
                        true,
                        true,
                    StatisticType.Var)],
                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                            "tempore",
                            "molestias tempore earum")),
                new RelationshipPopupContent("incidunt et dignissimos",
                        "cupiditate aut esse nihil ipsam dicta non",
                        2,
                        "iusto",
                    [new RelatedRecordsInfoFieldOrder("quo",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("sed",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("nulla",
                        OrderBy.Asc)],
                        3)],
                [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "password",
                        "dolores itaque hic",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "email",
                        "ad aperiam ut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return Date();",
                        "group",
                        "suscipit consectetur non",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("est assumenda esse",
                        "https://picsum.photos/640/480/?image=813",
                        "814941ed-a32f-8708-0371-ee98e8299542",
                        () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "debitis"),
                new ActionButton("itaque est fugiat",
                        "https://picsum.photos/640/480/?image=48",
                        "5ca16f0f-5379-1924-9527-8bb901e202af",
                        () => { Console.WriteLine("in"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "minima"),
                new ActionToggle("odit occaecati laboriosam",
                        "b1aa970a-2381-8ba1-bb17-b1f4e6afbaff",
                        () => { Console.WriteLine("labore"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "aliquid"),
                new ActionToggle("delectus recusandae suscipit",
                        "20df2088-e3f3-4572-f790-b4eb4d919832",
                        () => { Console.WriteLine("nobis"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "password",
                        "ut")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                        "illo sed nemo"),
                ElevationInfoMode.AbsoluteHeight,
                    677.2522,
                ElevationUnit.Centimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("voluptatem",
                    5499692.6822),
                    new Effect("nisi",
                        29928344.4082),
                    new Effect("expedita",
                        37255098.4288)],
                    true,
                new FeatureFilter(266.9900,
                    new Point(-161.4341,
                            -79.4177,
                            134.8660,
                            56.9820,
                            997.2566,
                        new SpatialReference(4,
                                "nobis",
                                "non",
                                "provident"),
                            true,
                            true,
                            747.7421),
                        [7,
                            1],
                    SpatialRelationship.Overlaps,
                    new TimeExtent(new DateTime(2001, 8, 23, 1, 31, 58),
                            new DateTime(2001, 8, 17, 20, 49, 3)),
                        QueryUnits.UsNauticalMiles,
                        "Age > 21"),
                    [new Effect("quo",
                        4941361.6156)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "rerum",
                    "laudantium in enim non eos molestias at",
                    3,
                    true,
                    true,
                    new { Value = "mollitia" },
                FieldValueType.None,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "status",
                    "omnis",
                    "reprehenderit ipsum doloremque eveniet vel",
                    5,
                    true,
                    true,
                    new { Value = "non" },
                FieldValueType.UniqueIdentifier,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "createdAt",
                    "saepe",
                    "explicabo et eos suscipit voluptates incidunt",
                    3,
                    true,
                    true,
                    new { Value = "laborum" },
                FieldValueType.OrderedOrRanked,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "updatedAt",
                    "consequuntur",
                    "deleniti pariatur itaque cum omnis fugiat",
                    5,
                    true,
                    true,
                    new { Value = "autem" },
                FieldValueType.UniqueIdentifier,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-42.0998,
                    -33.1937,
                    4.3100,
                    63.3574,
                    577.7794,
                    746.9536,
                    856.2367,
                    690.8347,
                new SpatialReference(6,
                        "et",
                        "ipsam",
                        "nobis"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveAfter,
                    "debitis",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    30507052.3779,
                    42971.4849,
                    true,
                    new Dimension(52.6454),
                new TextSymbol("dolore et ut",
                    new MapColor(140, 112, 191),
                    new MapColor(192, 194, 79),
                        new Dimension(72.4987),
                    new MapFont(new Dimension(55.1003),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        721.1259,
                    new MapColor(253, 218, 162),
                    new MapColor(117, 229, 7),
                        657.4238,
                    HorizontalAlignment.Left,
                        true,
                        198.6054,
                        new Dimension(708.6643),
                        true),
                    true,
                    "Province = 'Ontario'"),
            new Label(LabelPlacement.CenterStart,
                    "et",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    45237340.0757,
                    9497.5444,
                    true,
                    new Dimension(788.8878),
                new TextSymbol("non itaque veniam",
                    new MapColor(91, 231, 126),
                    new MapColor(183, 61, 18),
                        new Dimension(148.7220),
                    new MapFont(new Dimension(120.7502),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.None),
                        767.1484,
                    new MapColor(52, 198, 253),
                    new MapColor(218, 4, 134),
                        818.9053,
                    HorizontalAlignment.Right,
                        true,
                        251.2139,
                        new Dimension(459.5657),
                        true),
                    true,
                    "Country = 'Canada'"),
            new Label(LabelPlacement.AlwaysHorizontal,
                    "qui",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    14382157.9505,
                    16821.7872,
                    true,
                    new Dimension(402.8418),
                new TextSymbol("ullam corrupti impedit",
                    new MapColor(109, 32, 224),
                    new MapColor(192, 25, 17),
                        new Dimension(656.4772),
                    new MapFont(new Dimension(997.4001),
                            "Garamond",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        933.2748,
                    new MapColor(251, 156, 171),
                    new MapColor(143, 112, 203),
                        144.4558,
                    HorizontalAlignment.Center,
                        true,
                        900.7248,
                        new Dimension(765.7877),
                        true),
                    true,
                    "Name = 'John Doe'"),
            new Label(LabelPlacement.CenterLeft,
                    "totam",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    48265940.9685,
                    14175.9357,
                    true,
                    new Dimension(617.7472),
                new TextSymbol("aut omnis deserunt",
                    new MapColor(236, 42, 156),
                    new MapColor(237, 54, 5),
                        new Dimension(898.0282),
                    new MapFont(new Dimension(561.2919),
                            "Georgia",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        89.0725,
                    new MapColor(235, 155, 51),
                    new MapColor(215, 153, 33),
                        993.4460,
                    HorizontalAlignment.Left,
                        true,
                        631.8935,
                        new Dimension(699.6573),
                        true),
                    true,
                    "1 = 1")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("aut",
                SortOrder.Ascending,
                    "sit"),
            new OrderedLayerOrderBy("provident",
                SortOrder.Ascending,
                    "esse"),
            new OrderedLayerOrderBy("cum",
                SortOrder.Descending,
                    "eligendi")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.LabLch,
                        new MapColor(29, 162, 175),
                        new MapColor(42, 136, 108)),
                        65.8026,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(532.7211,
                                506.7242),
                        new AuthoringInfoField1ClassBreakInfos(876.8277,
                                516.5116),
                        new AuthoringInfoField1ClassBreakInfos(643.9561,
                                544.5198)],
                            "blanditiis",
                            "laboriosam",
                            "omnis"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(410.0512,
                                450.7536),
                        new AuthoringInfoField1ClassBreakInfos(497.8647,
                                44.3276),
                        new AuthoringInfoField1ClassBreakInfos(115.3230,
                                124.4824),
                        new AuthoringInfoField1ClassBreakInfos(140.2768,
                                288.1086)],
                            "ab",
                            "similique",
                            "vel"),
                        ["ab",
                            "aut"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "quia",
                        true,
                    LengthUnit.Kilometers,
                        751.8884,
                        101.6908,
                        208.3141,
                        414.5624),
                new PictureFillSymbol("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0",
                    new Dimension(236.1710),
                    new Dimension(864.4714),
                    new Dimension(505.3655),
                    new Dimension(353.0104),
                    -164.7630,
                    31.0445,
                    new Outline(new MapColor(64, 87, 195),
                        new Dimension(272.6248),
                        SimpleLineSymbolStyle.DashDot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(199, 79, 160),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Cross),
                        479.0506),
                    new MapColor(13, 221, 192)),
                    "totam",
                    new DefaultSymbol(),
                    "ipsa",
                    "aliquam",
                    "quisquam",
                    "minima",
                new UniqueValueRendererLegendOptions("temporibus quam et"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("aut",
                        new TextSymbol("voluptate et non",
                            new MapColor(159, 71, 201),
                            new MapColor(168, 128, 206),
                                new Dimension(226.0451),
                            new MapFont(new Dimension(382.5442),
                                    "Verdana",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.None),
                                969.7684,
                            new MapColor(214, 210, 68),
                            new MapColor(217, 84, 206),
                                675.1291,
                            HorizontalAlignment.Left,
                                true,
                                591.4063,
                                new Dimension(405.3172),
                                true),
                        [new UniqueValue("repellat",
                                "qui",
                                "illum"),
                        new UniqueValue("debitis",
                                "vero",
                                "dicta")]),
                    new UniqueValueClass("tempora",
                        new TextSymbol("et cumque ipsa",
                            new MapColor(41, 205, 154),
                            new MapColor(7, 232, 119),
                                new Dimension(826.3671),
                            new MapFont(new Dimension(527.9761),
                                    "Helvetica",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                700.7076,
                            new MapColor(149, 102, 59),
                            new MapColor(14, 87, 16),
                                184.8951,
                            HorizontalAlignment.Left,
                                true,
                                246.3539,
                                new Dimension(994.4589),
                                true),
                        [new UniqueValue("enim",
                                "itaque",
                                "itaque"),
                        new UniqueValue("dolorem",
                                "cupiditate",
                                "nihil")]),
                    new UniqueValueClass("temporibus",
                        new TextSymbol("velit aliquam nobis",
                            new MapColor(214, 248, 159),
                            new MapColor(122, 54, 70),
                                new Dimension(100.7744),
                            new MapFont(new Dimension(666.0945),
                                    "Georgia",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                430.5547,
                            new MapColor(6, 6, 173),
                            new MapColor(206, 23, 65),
                                189.0143,
                            HorizontalAlignment.Left,
                                true,
                                912.0723,
                                new Dimension(803.4573),
                                true),
                        [new UniqueValue("praesentium",
                                "quos",
                                "et"),
                        new UniqueValue("doloremque",
                                "est",
                                "debitis")])],
                        "nisi"),
                new UniqueValueGroup([new UniqueValueClass("id",
                        new TextSymbol("eum neque quia",
                            new MapColor(98, 26, 184),
                            new MapColor(84, 82, 83),
                                new Dimension(702.1723),
                            new MapFont(new Dimension(163.9512),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                283.9607,
                            new MapColor(246, 5, 206),
                            new MapColor(27, 26, 232),
                                187.3942,
                            HorizontalAlignment.Left,
                                true,
                                288.0927,
                                new Dimension(969.3047),
                                true),
                        [new UniqueValue("velit",
                                "delectus",
                                "adipisci"),
                        new UniqueValue("cumque",
                                "consequuntur",
                                "consequatur"),
                        new UniqueValue("itaque",
                                "amet",
                                "molestias")]),
                    new UniqueValueClass("fugit",
                        new TextSymbol("itaque voluptatibus quia",
                            new MapColor(241, 171, 8),
                            new MapColor(141, 238, 195),
                                new Dimension(18.6247),
                            new MapFont(new Dimension(919.1213),
                                    "Garamond",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.LineThrough),
                                438.2495,
                            new MapColor(73, 16, 232),
                            new MapColor(0, 47, 33),
                                958.6179,
                            HorizontalAlignment.Center,
                                true,
                                317.8363,
                                new Dimension(927.9033),
                                true),
                        [new UniqueValue("quasi",
                                "velit",
                                "fugiat"),
                        new UniqueValue("ut",
                                "sint",
                                "in"),
                        new UniqueValue("dolores",
                                "autem",
                                "aspernatur"),
                        new UniqueValue("doloribus",
                                "quis",
                                "corporis")]),
                    new UniqueValueClass("doloribus",
                        new TextSymbol("ut perspiciatis nihil",
                            new MapColor(183, 109, 238),
                            new MapColor(117, 60, 65),
                                new Dimension(934.1096),
                            new MapFont(new Dimension(129.6472),
                                    "Arial",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                237.8309,
                            new MapColor(58, 87, 241),
                            new MapColor(211, 41, 104),
                                337.7969,
                            HorizontalAlignment.Right,
                                true,
                                184.4600,
                                new Dimension(239.2304),
                                true),
                        [new UniqueValue("repudiandae",
                                "qui",
                                "in")]),
                    new UniqueValueClass("inventore",
                        new TextSymbol("occaecati quia maiores",
                            new MapColor(93, 157, 83),
                            new MapColor(34, 207, 89),
                                new Dimension(33.1451),
                            new MapFont(new Dimension(994.7336),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                436.9420,
                            new MapColor(45, 171, 10),
                            new MapColor(113, 49, 25),
                                703.9415,
                            HorizontalAlignment.Left,
                                true,
                                416.1905,
                                new Dimension(207.1947),
                                true),
                        [new UniqueValue("dolor",
                                "iusto",
                                "culpa"),
                        new UniqueValue("dolore",
                                "voluptas",
                                "odio"),
                        new UniqueValue("debitis",
                                "minima",
                                "ab"),
                        new UniqueValue("et",
                                "unde",
                                "aut")])],
                        "autem"),
                new UniqueValueGroup([new UniqueValueClass("labore",
                        new TextSymbol("dolorum eos quia",
                            new MapColor(249, 225, 128),
                            new MapColor(102, 81, 144),
                                new Dimension(169.6861),
                            new MapFont(new Dimension(527.4804),
                                    "Garamond",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.Underline),
                                232.1921,
                            new MapColor(124, 241, 65),
                            new MapColor(200, 252, 149),
                                739.2239,
                            HorizontalAlignment.Left,
                                true,
                                988.5978,
                                new Dimension(566.9076),
                                true),
                        [new UniqueValue("voluptas",
                                "dolorem",
                                "ex"),
                        new UniqueValue("occaecati",
                                "maiores",
                                "totam")]),
                    new UniqueValueClass("atque",
                        new TextSymbol("qui ipsa blanditiis",
                            new MapColor(197, 23, 50),
                            new MapColor(156, 113, 76),
                                new Dimension(742.8993),
                            new MapFont(new Dimension(492.9502),
                                    "Garamond",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                467.2885,
                            new MapColor(245, 62, 185),
                            new MapColor(185, 157, 229),
                                749.5431,
                            HorizontalAlignment.Left,
                                true,
                                438.7444,
                                new Dimension(147.2471),
                                true),
                        [new UniqueValue("placeat",
                                "maxime",
                                "et")]),
                    new UniqueValueClass("quia",
                        new TextSymbol("et repellat nisi",
                            new MapColor(83, 125, 239),
                            new MapColor(44, 70, 123),
                                new Dimension(342.0121),
                            new MapFont(new Dimension(393.6524),
                                    "Garamond",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                32.1342,
                            new MapColor(132, 151, 210),
                            new MapColor(194, 214, 229),
                                684.7047,
                            HorizontalAlignment.Left,
                                true,
                                609.7101,
                                new Dimension(569.1923),
                                true),
                        [new UniqueValue("aut",
                                "maxime",
                                "saepe"),
                        new UniqueValue("mollitia",
                                "officiis",
                                "quo")]),
                    new UniqueValueClass("cupiditate",
                        new TextSymbol("distinctio dolores aliquid",
                            new MapColor(29, 38, 94),
                            new MapColor(185, 219, 36),
                                new Dimension(670.5706),
                            new MapFont(new Dimension(280.0225),
                                    "Times New Roman",
                                MapFontStyle.Normal,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                839.7216,
                            new MapColor(124, 234, 102),
                            new MapColor(8, 178, 11),
                                295.2739,
                            HorizontalAlignment.Center,
                                true,
                                374.5325,
                                new Dimension(616.1834),
                                true),
                        [new UniqueValue("est",
                                "at",
                                "repudiandae"),
                        new UniqueValue("tenetur",
                                "asperiores",
                                "deleniti"),
                        new UniqueValue("eveniet",
                                "esse",
                                "ut")])],
                        "rerum"),
                new UniqueValueGroup([new UniqueValueClass("expedita",
                        new TextSymbol("quo rerum provident",
                            new MapColor(124, 84, 43),
                            new MapColor(125, 203, 231),
                                new Dimension(207.9543),
                            new MapFont(new Dimension(666.3171),
                                    "Garamond",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.None),
                                210.2887,
                            new MapColor(114, 114, 136),
                            new MapColor(43, 160, 21),
                                202.5224,
                            HorizontalAlignment.Center,
                                true,
                                323.2631,
                                new Dimension(715.2623),
                                true),
                        [new UniqueValue("eos",
                                "tenetur",
                                "suscipit"),
                        new UniqueValue("officiis",
                                "neque",
                                "eos")]),
                    new UniqueValueClass("atque",
                        new TextSymbol("omnis rem itaque",
                            new MapColor(151, 67, 78),
                            new MapColor(112, 48, 142),
                                new Dimension(143.9022),
                            new MapFont(new Dimension(978.8026),
                                    "Verdana",
                                MapFontStyle.Italic,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                944.6216,
                            new MapColor(195, 158, 183),
                            new MapColor(218, 249, 231),
                                207.9381,
                            HorizontalAlignment.Center,
                                true,
                                308.2813,
                                new Dimension(501.0306),
                                true),
                        [new UniqueValue("iure",
                                "nam",
                                "sapiente"),
                        new UniqueValue("aliquid",
                                "sunt",
                                "rerum")]),
                    new UniqueValueClass("laborum",
                        new TextSymbol("est eaque sunt",
                            new MapColor(208, 215, 218),
                            new MapColor(82, 46, 86),
                                new Dimension(116.4383),
                            new MapFont(new Dimension(988.6614),
                                    "Verdana",
                                MapFontStyle.Italic,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                119.4196,
                            new MapColor(221, 160, 216),
                            new MapColor(228, 104, 51),
                                209.2926,
                            HorizontalAlignment.Center,
                                true,
                                355.0474,
                                new Dimension(464.2462),
                                true),
                        [new UniqueValue("laudantium",
                                "nemo",
                                "accusamus"),
                        new UniqueValue("sit",
                                "eveniet",
                                "id"),
                        new UniqueValue("ut",
                                "blanditiis",
                                "et"),
                        new UniqueValue("sed",
                                "quo",
                                "officiis")])],
                        "ut")],
                [new UniqueValueInfo("voluptates",
                    new TextSymbol("sed excepturi quidem",
                        new MapColor(195, 208, 210),
                        new MapColor(26, 113, 152),
                            new Dimension(885.1890),
                        new MapFont(new Dimension(899.8643),
                                "Times New Roman",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            466.9642,
                        new MapColor(55, 3, 26),
                        new MapColor(175, 145, 46),
                            391.5965,
                        HorizontalAlignment.Right,
                            true,
                            104.2095,
                            new Dimension(352.6801),
                            true),
                        "nesciunt"),
                new UniqueValueInfo("alias",
                    new TextSymbol("ex et deleniti",
                        new MapColor(212, 57, 108),
                        new MapColor(180, 237, 205),
                            new Dimension(766.5882),
                        new MapFont(new Dimension(125.1942),
                                "Times New Roman",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            563.3245,
                        new MapColor(6, 161, 118),
                        new MapColor(206, 167, 49),
                            773.0661,
                        HorizontalAlignment.Left,
                            true,
                            153.1096,
                            new Dimension(450.9651),
                            true),
                        "voluptatem"),
                new UniqueValueInfo("explicabo",
                    new TextSymbol("tempore eveniet recusandae",
                        new MapColor(221, 135, 204),
                        new MapColor(222, 126, 174),
                            new Dimension(857.0651),
                        new MapFont(new Dimension(508.5058),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            378.5324,
                        new MapColor(46, 23, 156),
                        new MapColor(19, 232, 61),
                            477.5596,
                        HorizontalAlignment.Left,
                            true,
                            70.7748,
                            new Dimension(271.3529),
                            true),
                        "nemo"),
                new UniqueValueInfo("dolorum",
                    new TextSymbol("aut velit earum",
                        new MapColor(254, 73, 217),
                        new MapColor(39, 188, 47),
                            new Dimension(372.2271),
                        new MapFont(new Dimension(174.6501),
                                "Courier New",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            555.5603,
                        new MapColor(189, 81, 184),
                        new MapColor(237, 156, 159),
                            100.2265,
                        HorizontalAlignment.Left,
                            true,
                            889.7905,
                            new Dimension(224.4931),
                            true),
                        "distinctio")],
                    "corrupti",
                    "dolores eum perferendis");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "eos",
                    "quia",
                    "nam");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2001, 9, 14, 5, 33, 15),
                    new DateTime(2002, 10, 21, 16, 13, 39));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("totam",
                    "natus",
                new TimeExtent(new DateTime(2016, 3, 17, 5, 38, 37),
                        new DateTime(2016, 4, 13, 4, 39, 26)),
                new TimeInterval(TemporalTime.Months,
                        190.0634),
                    [new DateTime(2006, 2, 20, 17, 52, 30),
                        new DateTime(2021, 5, 4, 14, 7, 53),
                        new DateTime(2016, 1, 24, 7, 0, 39)],
                    "Asia/Tokyo",
                    "sed");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    546.5784);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2016, 7, 6, 12, 39, 6),
                    new DateTime(2013, 5, 18, 6, 14, 57));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
