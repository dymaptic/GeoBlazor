@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("necessitatibus eius enim")"
                        Copyright="@("rem")"
                        Opacity="@(0.7496)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Overlay)"
                        DefinitionExpression="@("minima")"
                        Delimiter="@(CSVDelimiter.Space)"
                        DisplayField="@("repudiandae")"
                        Effect="@(new Effect("qui",
                            49247258.4528))"
                        FullExtent="@(new Extent(100.9505,
                                124.1709,
                                -62.0546,
                                -69.1665,
                                807.7227,
                                420.3865,
                                352.4986,
                                954.9744,
                            new SpatialReference(1,
                                    "repellendus",
                                    "doloribus",
                                    "debitis"),
                                true,
                                true))"
                        GeometryType="@("sequi")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("ut")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("necessitatibus")"
                        MaxScale="@(759380.1915)"
                        MinScale="@(5810.2726)"
                        ObjectIdField="@("voluptatem")"
                        OutFields="@(["at",
                            "perspiciatis",
                            "est"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(266.5790)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(6,
                                "qui",
                                "quod",
                                "quos"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(144.6614)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("aut")"
                            EndField="@("quo")"
                            Stops="@([new DateTime(2004, 4, 22, 12, 46, 30),
                                new DateTime(2019, 1, 5, 13, 8, 15),
                                new DateTime(2006, 10, 20, 12, 6, 8),
                                new DateTime(2008, 3, 3, 19, 44, 5)])"
                            TimeZone="@("Pacific/Auckland")"
                            TrackIdField="@("et")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(59.9888)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 6, 20, 22, 44, 6))"
                                End="@(new DateTime(2009, 2, 18, 12, 54, 57))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2020, 1, 20, 6, 36, 53))"
                            End="@(new DateTime(2006, 6, 8, 15, 45, 18))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                    new MapColor(185, 129, 200),
                                    new MapColor(218, 70, 154)),
                                    340.2605,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(770.8838,
                                            665.1383),
                                    new AuthoringInfoField1ClassBreakInfos(660.1634,
                                            177.5057)],
                                        "voluptas",
                                        "quia",
                                        "quis"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(330.3595,
                                            868.1975),
                                    new AuthoringInfoField1ClassBreakInfos(288.8190,
                                            820.9483)],
                                        "quam",
                                        "iure",
                                        "aperiam"),
                                    ["assumenda",
                                        "aliquam",
                                        "incidunt",
                                        "at"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "sint",
                                    true,
                                LengthUnit.Miles,
                                    671.3353,
                                    966.9302,
                                    720.0367,
                                    146.6013))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("quo")"
                            ApiKey="@("nemo")"
                            AvgRating="@(520.3142)"
                            Categories="@(["cupiditate",
                                "eveniet",
                                "dolorum",
                                "omnis"])"
                            Created="@(new DateTime(2003, 6, 26, 22, 31, 18))"
                            Culture="@("autem")"
                            Description="@("impedit exercitationem quia iure quibusdam dolorum")"
                            Extent="@(new Extent(60.8368,
                                    -89.8291,
                                    44.2183,
                                    -37.7890,
                                    804.1648,
                                    670.0404,
                                    546.0375,
                                    407.1379,
                                new SpatialReference(3,
                                        "molestiae",
                                        "nobis",
                                        "quam"),
                                    true,
                                    true))"
                            GroupCategories="@(["ut",
                                "aspernatur",
                                "voluptas"])"
                            LicenseInfo="@("autem")"
                            Modified="@(new DateTime(2002, 8, 8, 11, 34, 10))"
                            Name="@("token")"
                            NumComments="@(245.5654)"
                            NumRatings="@(741.4436)"
                            NumViews="@(218.4511)"
                            Owner="@("Faustino Osinski")"
                            OwnerFolder="@("Eleanora Vandervort")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["dolor",
                                        "ut",
                                        "aspernatur",
                                        "aut"],
                                    "accusantium",
                                    "quam",
                                    "sunt",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("quaerat")"
                            Screenshots="@(["praesentium",
                                "occaecati",
                                "earum"])"
                            Size="@(4)"
                            Snippet="@("cupiditate")"
                            Tags="@(["perferendis",
                                "rerum"])"
                            Title="@("quibusdam accusantium beatae")"
                            TypeKeywords="@(["sed",
                                "debitis",
                                "voluptates"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("sint sunt dolore")"
                            StringContent="@("omnis")"
                            OutFields="@(["unde",
                                "laboriosam"])"
                            FieldInfos="@([new FieldInfo("email",
                                    "aut",
                                    "consequuntur",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("phone",
                                    "est",
                                    "ut",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.LongDateShortTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("updatedAt",
                                    "eaque",
                                    "laborum",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("status",
                                    "et",
                                    "et",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new RelationshipPopupContent("doloribus quae voluptas",
                                    "eos et sit sunt nostrum sed",
                                    8,
                                    "quis",
                                [new RelatedRecordsInfoFieldOrder("illo",
                                    OrderBy.Desc)],
                                    9)])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "phone",
                                    "odio itaque tempora",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "title",
                                    "ut eligendi quae",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "group",
                                    "et culpa vero",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "createdAt",
                                    "nulla tempora minus",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("deleniti voluptatem eum",
                                    "https://picsum.photos/640/480/?image=548",
                                    "9ced3da6-3387-ce6c-8910-349b8aa71ef6",
                                    () => { Console.WriteLine("dolores"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "possimus"),
                            new ActionButton("quia repellendus eos",
                                    "https://picsum.photos/640/480/?image=867",
                                    "c860775a-e9ff-173b-f952-62f95c13a333",
                                    () => { Console.WriteLine("doloremque"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "voluptatum")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("rerum")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("odio")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveAlong)"
                            LabelExpression="@("quos")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(31010365.8255)"
                            MinScale="@(32328.1124)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(155.5893))"
                            Symbol="@(new TextSymbol("non nisi voluptas",
                                new MapColor(192, 151, 248),
                                new MapColor(53, 93, 190),
                                    new Dimension(682.2914),
                                new MapFont(new Dimension(698.7438),
                                        "Helvetica",
                                    MapFontStyle.Normal,
                                    FontWeight.Normal,
                                    TextDecoration.None),
                                    79.3918,
                                new MapColor(216, 221, 48),
                                new MapColor(220, 239, 246),
                                    770.9754,
                                HorizontalAlignment.Right,
                                    true,
                                    308.5346,
                                    new Dimension(854.4674),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Phone = '555-555-5555'")">
                        </Label>
                        <Field 
                            Name="@("password")"
                            Alias="@("voluptas")"
                            Description="@("corporis vitae corporis voluptates cum")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "asperiores" })"
                            ValueType="@(FieldValueType.Coordinate)"
                            Domain="@(new InheritedDomain("group"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("quibusdam",
                                23813937.9523),
                                new Effect("doloribus",
                                    28613804.8325)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(49.5168,
                                new Polygon([new MapPath([new MapPoint([267.4827,
                                            629.0095]),
                                        new MapPoint([827.5297,
                                            332.7550,
                                            145.1378]),
                                        new MapPoint([800.3709,
                                            405.9245,
                                            594.7475]),
                                        new MapPoint([494.5292,
                                            27.6304])]),
                                        new MapPath([new MapPoint([561.3700,
                                                812.6331,
                                                927.6543]),
                                            new MapPoint([144.1777,
                                                658.9115,
                                                287.7974,
                                                937.1562]),
                                            new MapPoint([45.8368,
                                                695.8258,
                                                388.6441,
                                                832.2197])]),
                                        new MapPath([new MapPoint([797.4654,
                                                628.9903,
                                                955.0597]),
                                            new MapPoint([194.3828,
                                                605.7281])])],
                                    new SpatialReference(9,
                                            "occaecati",
                                            "nihil",
                                            "ipsa"),
                                    new Point(-150.7342,
                                            -51.8363,
                                            44.4553,
                                            -24.2507,
                                            202.2161,
                                        new SpatialReference(4,
                                                "omnis",
                                                "et",
                                                "repellat"),
                                            true,
                                            true,
                                            623.9304),
                                        true,
                                        true,
                                        true),
                                    [6,
                                        5,
                                        9,
                                        7],
                                SpatialRelationship.Overlaps,
                                new TimeExtent(new DateTime(2013, 8, 9, 9, 54, 41),
                                        new DateTime(2019, 3, 4, 4, 55, 35)),
                                    QueryUnits.Feet,
                                    "Street = '123 Main St.'"))"
                            IncludedEffect="@([new Effect("sit",
                                17107942.6908)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "sed sit id"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(307.1070)"
                            Unit="@(ElevationUnit.Miles)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["velit",
                    "ex",
                    "iusto",
                    "doloremque"],
                    ["id",
                        "password",
                        "name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("token");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("updatedAt",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([456.6213,
                                319.8592,
                                126.4837]),
                            new MapPoint([160.1589,
                                254.7750,
                                543.8522])]),
                            new MapPath([new MapPoint([365.9101,
                                    991.5837,
                                    521.1782,
                                    419.5273]),
                                new MapPoint([991.7793,
                                    301.3147,
                                    979.2547,
                                    192.8836]),
                                new MapPoint([744.3210,
                                    831.4458]),
                                new MapPoint([986.3689,
                                    299.3600,
                                    792.1585])]),
                            new MapPath([new MapPoint([675.3879,
                                    344.3118,
                                    777.0398,
                                    538.7606]),
                                new MapPoint([617.2897,
                                    950.8286]),
                                new MapPoint([181.2302,
                                    626.8750,
                                    255.3866,
                                    780.8784])]),
                            new MapPath([new MapPoint([249.3845,
                                    571.3583]),
                                new MapPoint([266.1017,
                                    868.0994,
                                    644.5356]),
                                new MapPoint([856.5422,
                                    974.2992,
                                    525.7664])])],
                        new SpatialReference(5,
                                "beatae",
                                "assumenda",
                                "voluptatem"),
                        new Point(169.3290,
                                -55.6755,
                                -83.5793,
                                -41.2907,
                                782.0063,
                            new SpatialReference(8,
                                    "dicta",
                                    "quod",
                                    "ullam"),
                                true,
                                true,
                                431.9824),
                            true,
                            true,
                            true),
                    new TextSymbol("necessitatibus quia corrupti",
                        new MapColor(172, 11, 226),
                        new MapColor(24, 238, 137),
                            new Dimension(132.3088),
                        new MapFont(new Dimension(86.3075),
                                "Times New Roman",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            174.9268,
                        new MapColor(240, 52, 96),
                        new MapColor(144, 164, 79),
                            617.7994,
                        HorizontalAlignment.Center,
                            true,
                            189.3142,
                            new Dimension(529.9060),
                            true),
                    new PopupTemplate("quam aspernatur id",
                            "ab",
                            ["dolore",
                                "amet",
                                "ratione"],
                        [new FieldInfo("name",
                                "velit",
                                "et",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Stddev),
                        new FieldInfo("name",
                                "aut",
                                "consectetur",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Stddev),
                        new FieldInfo("name",
                                "laudantium",
                                "optio",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.DayShortMonthYearShortTime24),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("avatar",
                                "debitis",
                                "repellat",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Count)],
                        [new AttachmentsPopupContent("laborum atque ab",
                                "recusandae est error ut fugiat hic",
                                AttachmentsPopupContentDisplayType.Auto),
                        new FieldsPopupContent([new FieldInfo("comment",
                                    "et",
                                    "dolorum",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("phone",
                                    "necessitatibus",
                                    "vel",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("title",
                                    "voluptatum",
                                    "asperiores",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "atque molestiae dignissimos quod laborum",
                                "nam sequi ut"),
                        new AttachmentsPopupContent("repellendus amet culpa",
                                "alias exercitationem tempora tempora esse corrupti dolorum",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return Date();",
                                "token",
                                "dolor ex velit",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "id",
                                "occaecati ut reprehenderit",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "group",
                                "doloribus harum enim",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "comment",
                                "suscipit nemo qui",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("iste suscipit velit",
                                "https://picsum.photos/640/480/?image=819",
                                "43a78a93-1cc5-d34e-bb63-715492c827c0",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "iure"),
                        new ActionButton("dolorem aliquam officia",
                                "https://picsum.photos/640/480/?image=467",
                                "6b9bbcb1-08f5-08a5-618c-54a5e11dfc03",
                                () => { Console.WriteLine("fuga"); return Task.CompletedTask; },
                                "name",
                                true,
                                true,
                                true,
                                "a")]),
                        new AttributesDictionary(),
                        true,
                        "quos",
                        "sed",
                        new GraphicOrigin(Guid.NewGuid(),
                            "consequatur",
                            8))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([1,
                    1],
                    true,
                    944.2094,
                    538.4836,
                    "0.0.9.4",
                new Extent(-157.4871,
                        119.7541,
                        16.0079,
                        -23.0591,
                        804.0231,
                        203.9037,
                        647.4771,
                        622.0757,
                    new SpatialReference(8,
                            "qui",
                            "reiciendis",
                            "repudiandae"),
                        true,
                        true),
                    8,
                    ["consequatur",
                        "fuga",
                        "tempora",
                        "iusto"],
                    "et",
                    new DateTime(2020, 3, 8, 6, 56, 42),
                    408.4076,
                    8,
                    "adipisci",
                    4),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([2,
                    6,
                    6,
                    7],
                    true,
                    835.4617,
                    990.7582,
                    "0.1.9.9",
                new Polyline([new MapPath([new MapPoint([657.0407,
                            545.0526,
                            342.3679]),
                        new MapPoint([693.0558,
                            408.7683,
                            545.6793]),
                        new MapPoint([833.2673,
                            159.6354])]),
                        new MapPath([new MapPoint([546.7195,
                                123.1616,
                                2.6801]),
                            new MapPoint([730.1853,
                                345.4749,
                                919.4929])]),
                        new MapPath([new MapPoint([597.9821,
                                725.0171]),
                            new MapPoint([802.3501,
                                893.8641,
                                867.7881]),
                            new MapPoint([351.1766,
                                226.5433])])],
                    new SpatialReference(2,
                            "rem",
                            "dolorum",
                            "culpa"),
                        true,
                        true),
                    9,
                    ["quisquam",
                        "exercitationem",
                        "totam",
                        "ut"],
                    "esse",
                    new DateTime(2021, 6, 17, 7, 1, 37),
                    700.7631,
                    6,
                    "velit",
                    4),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([5,
                    4,
                    8,
                    3],
                    true,
                    154.6721,
                    755.8151,
                    "2.6.4.3",
                new Polygon([new MapPath([new MapPoint([561.1551,
                            382.1009]),
                        new MapPoint([766.4438,
                            523.5310]),
                        new MapPoint([224.1616,
                            34.0871])]),
                        new MapPath([new MapPoint([347.5100,
                                272.9988,
                                112.0577]),
                            new MapPoint([382.2866,
                                862.7017,
                                667.8982])]),
                        new MapPath([new MapPoint([281.2012,
                                808.2148,
                                621.7111]),
                            new MapPoint([811.8834,
                                651.2665]),
                            new MapPoint([135.4638,
                                13.6354])]),
                        new MapPath([new MapPoint([372.6631,
                                823.4426,
                                682.5760,
                                228.8404]),
                            new MapPoint([365.4184,
                                558.7323]),
                            new MapPoint([606.2707,
                                966.0505,
                                645.8024])])],
                    new SpatialReference(8,
                            "modi",
                            "blanditiis",
                            "magni"),
                    new Point(60.2826,
                            -5.2707,
                            106.6041,
                            64.3033,
                            673.6022,
                        new SpatialReference(9,
                                "aut",
                                "debitis",
                                "aut"),
                            true,
                            true,
                            360.6157),
                        true,
                        true,
                        true),
                    7,
                    ["adipisci",
                        "molestiae"],
                    "doloribus",
                    new DateTime(2015, 3, 4, 3, 9, 55),
                    327.6720,
                    4,
                    "quibusdam",
                    8),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([3,
                    6,
                    6],
                    true,
                    59.1326,
                    493.5415,
                    "5.0.9.0",
                new Polygon([new MapPath([new MapPoint([65.3607,
                            516.6616,
                            600.2275,
                            189.4755]),
                        new MapPoint([396.4708,
                            720.0559,
                            647.7019])]),
                        new MapPath([new MapPoint([97.7506,
                                478.2858,
                                833.7485]),
                            new MapPoint([987.9715,
                                458.7333,
                                482.5582,
                                256.5961]),
                            new MapPoint([393.0511,
                                86.9536,
                                526.0547,
                                464.9151])]),
                        new MapPath([new MapPoint([93.6955,
                                151.1478]),
                            new MapPoint([821.6332,
                                902.4129])])],
                    new SpatialReference(1,
                            "magnam",
                            "quidem",
                            "qui"),
                    new Point(-6.5397,
                            15.3433,
                            160.2057,
                            84.1548,
                            426.5198,
                        new SpatialReference(3,
                                "adipisci",
                                "quaerat",
                                "quia"),
                            true,
                            true,
                            893.6844),
                        true,
                        true,
                        true),
                    7,
                    ["deleniti",
                        "quod"],
                    "consectetur",
                    new DateTime(2010, 10, 14, 13, 25, 52),
                    693.2699,
                    7,
                    "saepe",
                    8),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Hue;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("vel qui aut",
                    "neque",
                    ["dicta",
                        "ducimus",
                        "hic"],
                [new FieldInfo("phone",
                        "officia",
                        "doloribus",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("avatar",
                        "enim",
                        "minima",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("avatar",
                        "itaque",
                        "doloribus",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDateLongTime24),
                        true,
                        true,
                    StatisticType.Count)],
                [new AttachmentsPopupContent("molestiae corporis excepturi",
                        "qui quas quia ut incidunt aut ut",
                        AttachmentsPopupContentDisplayType.Auto),
                new TextPopupContent("eius officia modi"),
                new MediaPopupContent("a odio explicabo",
                        "accusamus molestiae et iure nisi nisi iste",
                    [new ColumnChartMediaInfo("omnis harum accusantium",
                            "praesentium",
                            "explicabo amet qui",
                        new ChartMediaInfoValue(["adipisci",
                                "tempora"],
                                "deleniti",
                                "vel",
                            [new ChartMediaInfoValueSeries("phone",
                                    "eaque",
                                    41.4753),
                            new ChartMediaInfoValueSeries("email",
                                    "et",
                                    433.3484),
                            new ChartMediaInfoValueSeries("name",
                                    "dolor",
                                    798.7307)],
                            [new MapColor(24, 128, 212),
                            new MapColor(188, 210, 92)])),
                    new BarChartMediaInfo("quod molestias est",
                            "itaque",
                            "ut sed dolores",
                        new ChartMediaInfoValue(["fugit",
                                "reprehenderit",
                                "ut"],
                                "architecto",
                                "ut",
                            [new ChartMediaInfoValueSeries("createdAt",
                                    "ipsam",
                                    985.8452),
                            new ChartMediaInfoValueSeries("email",
                                    "iusto",
                                    938.1916),
                            new ChartMediaInfoValueSeries("password",
                                    "quibusdam",
                                    593.3047)],
                            [new MapColor(33, 12, 45)])),
                    new PieChartMediaInfo("architecto esse odio",
                            "doloremque",
                            "vitae debitis repellat",
                        new ChartMediaInfoValue(["non",
                                "ad",
                                "nisi",
                                "consequuntur"],
                                "recusandae",
                                "voluptas",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "vel",
                                    464.3973),
                            new ChartMediaInfoValueSeries("phone",
                                    "eos",
                                    152.7669)],
                            [new MapColor(207, 106, 185),
                            new MapColor(130, 222, 138)])),
                    new PieChartMediaInfo("labore officia distinctio",
                            "consequatur",
                            "itaque enim consequuntur",
                        new ChartMediaInfoValue(["ratione",
                                "consequatur",
                                "quasi",
                                "ut"],
                                "eum",
                                "est",
                            [new ChartMediaInfoValueSeries("password",
                                    "quibusdam",
                                    459.2161),
                            new ChartMediaInfoValueSeries("phone",
                                    "soluta",
                                    80.1628),
                            new ChartMediaInfoValueSeries("avatar",
                                    "et",
                                    604.0114),
                            new ChartMediaInfoValueSeries("title",
                                    "eaque",
                                    184.9078)],
                            [new MapColor(99, 214, 188),
                            new MapColor(227, 97, 8),
                            new MapColor(81, 8, 150),
                            new MapColor(104, 29, 251)]))],
                        5)],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "password",
                        "consectetur error magnam",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "createdAt",
                        "perferendis tempora vitae",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "updatedAt",
                        "quae qui voluptas",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "name",
                        "iusto aut voluptatem",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("reiciendis aliquid dolores",
                        "https://picsum.photos/640/480/?image=304",
                        "88100766-751e-873b-2701-d992fab3eeb5",
                        () => { Console.WriteLine("excepturi"); return Task.CompletedTask; },
                        "status",
                        true,
                        true,
                        true,
                        "magni"),
                new ActionToggle("dicta quo dolore",
                        "926d554b-6b80-1baa-dab9-89a3b588963c",
                        () => { Console.WriteLine("veniam"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "group",
                        "mollitia")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "vero quaerat nesciunt"),
                ElevationInfoMode.RelativeToGround,
                    977.8052,
                ElevationUnit.Meters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("id",
                    41203279.0013),
                    new Effect("fuga",
                        19888140.6912),
                    new Effect("placeat",
                        8938887.4215),
                    new Effect("laudantium",
                        24257997.5552)],
                    true,
                new FeatureFilter(273.3293,
                    new Polyline([new MapPath([new MapPoint([286.6700,
                                971.5732]),
                            new MapPoint([585.1070,
                                461.6433,
                                493.6695,
                                568.5812])]),
                            new MapPath([new MapPoint([831.2105,
                                    32.0011,
                                    379.4746]),
                                new MapPoint([286.5860,
                                    441.0385,
                                    369.8445,
                                    682.1316]),
                                new MapPoint([175.0812,
                                    863.6473])]),
                            new MapPath([new MapPoint([554.0565,
                                    679.6356,
                                    290.8967,
                                    989.8778]),
                                new MapPoint([741.8076,
                                    981.2477,
                                    814.5777])]),
                            new MapPath([new MapPoint([230.2797,
                                    610.9101]),
                                new MapPoint([271.3671,
                                    543.3631,
                                    790.7428]),
                                new MapPoint([391.1503,
                                    722.1593,
                                    6.3301,
                                    852.5991])])],
                        new SpatialReference(1,
                                "occaecati",
                                "consequuntur",
                                "aliquid"),
                            true,
                            true),
                        [1,
                            9,
                            8,
                            8],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2002, 9, 13, 20, 41, 52),
                            new DateTime(2001, 8, 21, 17, 42, 35)),
                        QueryUnits.UsNauticalMiles,
                        "Street = '123 Main St.'"),
                    [new Effect("quis",
                        42951490.2403),
                        new Effect("ut",
                            48375898.3122),
                        new Effect("qui",
                            45341513.7523)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "updatedAt",
                    "aspernatur",
                    "vitae rem qui atque",
                    1,
                    true,
                    true,
                    new { Value = "eos" },
                FieldValueType.NameOrTitle,
                new RangeDomain("minima",
                        "ratione",
                        "category")),
            new Field(default,
                    "status",
                    "sapiente",
                    "eos delectus error facilis ut repellendus",
                    2,
                    true,
                    true,
                    new { Value = "et" },
                FieldValueType.Binary,
                new InheritedDomain("password"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-109.6522,
                    72.6603,
                    -32.4238,
                    -82.6349,
                    218.6241,
                    853.9318,
                    866.6273,
                    160.9353,
                new SpatialReference(3,
                        "eligendi",
                        "sequi",
                        "eos"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AlwaysHorizontal,
                    "nihil",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    18197229.2258,
                    15847.8583,
                    true,
                    new Dimension(526.3771),
                new TextSymbol("velit ut ullam",
                    new MapColor(25, 251, 175),
                    new MapColor(250, 186, 19),
                        new Dimension(933.9935),
                    new MapFont(new Dimension(726.2601),
                            "Arial",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        689.5447,
                    new MapColor(41, 69, 174),
                    new MapColor(36, 55, 250),
                        981.6792,
                    HorizontalAlignment.Right,
                        true,
                        190.6925,
                        new Dimension(845.3412),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("voluptatem",
                SortOrder.Ascending,
                    "ut"),
            new OrderedLayerOrderBy("quas",
                SortOrder.Ascending,
                    "sint")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "perspiciatis",
                    "nihil",
                    536.3295,
                    ["beatae",
                        "dicta",
                        "ratione"],
                    new DateTime(2011, 3, 19, 2, 3, 36),
                    "et",
                    "iusto iusto quaerat et accusamus est voluptas",
                new Extent(170.0043,
                        -41.9860,
                        -64.9126,
                        -47.4944,
                        483.1966,
                        916.3939,
                        915.7252,
                        309.2890,
                    new SpatialReference(9,
                            "voluptatem",
                            "est",
                            "nobis"),
                        true,
                        true),
                    ["odit",
                        "facilis",
                        "est",
                        "vel"],
                    "illum",
                    new DateTime(2016, 6, 10, 21, 58, 39),
                    "token",
                    80.0641);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("voluptate et blanditiis",
                    new MapColor(191, 243, 13),
                    new MapColor(253, 160, 144),
                        new Dimension(150.4209),
                    new MapFont(new Dimension(620.6419),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        639.3451,
                    new MapColor(17, 35, 251),
                    new MapColor(73, 173, 153),
                        274.7112,
                    HorizontalAlignment.Left,
                        true,
                        614.0901,
                        new Dimension(155.9383),
                        true),
                    "amet",
                [new RotationVariable("assumenda",
                    Axis.Tilt,
                    RotationType.Geographic,
                    new VisualVariableLegendOptions(true,
                            "aperiam necessitatibus officia"),
                        "maxime",
                        "ut est soluta"),
                new ColorVariable("nihil",
                        "repudiandae",
                    [new ColorStop(518.1402,
                        new MapColor(15, 128, 138),
                            "numquam"),
                    new ColorStop(243.6497,
                        new MapColor(205, 23, 90),
                            "occaecati"),
                    new ColorStop(413.0215,
                        new MapColor(191, 243, 3),
                            "modi")],
                    new VisualVariableLegendOptions(true,
                            "aut aperiam est"),
                        "pariatur",
                        "iusto rem ipsam")],
                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                            new MapColor(49, 51, 103),
                            new MapColor(200, 153, 232)),
                        new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(35, 200, 80),
                            new MapColor(30, 26, 169)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(109, 33, 243),
                            new MapColor(85, 34, 150))]),
                        239.6145,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(902.7057,
                                68.3252),
                        new AuthoringInfoField1ClassBreakInfos(641.0673,
                                154.7536)],
                            "assumenda",
                            "velit",
                            "quis"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(918.2208,
                                266.6228),
                        new AuthoringInfoField1ClassBreakInfos(169.0545,
                                905.0966),
                        new AuthoringInfoField1ClassBreakInfos(872.2607,
                                109.1872),
                        new AuthoringInfoField1ClassBreakInfos(88.4569,
                                990.8859)],
                            "qui",
                            "aut",
                            "eligendi"),
                        ["voluptatem",
                            "cupiditate"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "explicabo",
                        true,
                    LengthUnit.Feet,
                        938.5652,
                        959.4598,
                        736.7663,
                        298.4833));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "vero",
                    "est",
                    "molestiae");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2015, 2, 12, 18, 38, 8),
                    new DateTime(2012, 1, 1, 1, 32, 9));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("dolores",
                    "eius",
                new TimeExtent(new DateTime(2005, 10, 12, 21, 10, 20),
                        new DateTime(2018, 11, 26, 1, 45, 41)),
                new TimeInterval(TemporalTime.Hours,
                        620.0380),
                    [new DateTime(2013, 8, 2, 4, 14, 28),
                        new DateTime(2008, 10, 22, 10, 16, 48),
                        new DateTime(2006, 10, 2, 6, 7, 19)],
                    "America/Juneau",
                    "vel");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Milliseconds,
                    816.4191);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 6, 24, 12, 43, 8),
                    new DateTime(2010, 6, 15, 13, 55, 39));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
