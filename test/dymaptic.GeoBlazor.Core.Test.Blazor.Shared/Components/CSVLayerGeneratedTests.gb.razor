@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("voluptas voluptas quia")"
                        Copyright="@("iste")"
                        Opacity="@(0.1704)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.SourceAtop)"
                        DefinitionExpression="@("occaecati")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("voluptatum")"
                        Effect="@(new Effect("quae",
                            23389869.8069))"
                        FullExtent="@(new Extent(18.3955,
                                -74.6963,
                                47.9156,
                                -80.5393,
                                544.0815,
                                575.2221,
                                826.1801,
                                794.8882,
                            new SpatialReference(1,
                                    "cumque",
                                    "recusandae",
                                    "dolore"),
                                true,
                                true))"
                        GeometryType="@("perspiciatis")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("ad")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("qui")"
                        MaxScale="@(32340985.4847)"
                        MinScale="@(1986.1100)"
                        ObjectIdField="@("animi")"
                        OutFields="@(["voluptatibus",
                            "sed",
                            "reprehenderit",
                            "delectus"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(156.8660)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(2,
                                "inventore",
                                "quae",
                                "voluptatem"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Seconds)"
                            Value="@(34.0676)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("illum")"
                            EndField="@("dolor")"
                            Stops="@([new DateTime(2007, 11, 8, 21, 54, 2),
                                new DateTime(2007, 8, 23, 20, 0, 26),
                                new DateTime(2019, 10, 20, 2, 55, 52),
                                new DateTime(2011, 10, 1, 2, 46, 25)])"
                            TimeZone="@("Pacific/Noumea")"
                            TrackIdField="@("ducimus")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Weeks)"
                                Value="@(384.8861)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2014, 2, 7, 3, 35, 8))"
                                End="@(new DateTime(2002, 1, 1, 11, 43, 40))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2014, 11, 19, 10, 28, 14))"
                            End="@(new DateTime(2019, 10, 14, 10, 57, 1))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.EqualInterval,
                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                    new MapColor(62, 0, 76),
                                    new MapColor(177, 3, 184)),
                                    202.7986,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(317.0576,
                                            541.7304)],
                                        "doloribus",
                                        "sed",
                                        "cupiditate"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(269.8168,
                                            130.0887),
                                    new AuthoringInfoField1ClassBreakInfos(868.6092,
                                            209.5404)],
                                        "quia",
                                        "ipsa",
                                        "et"),
                                    ["soluta",
                                        "et"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "eius",
                                    true,
                                LengthUnit.Decimeters,
                                    498.5857,
                                    774.2523,
                                    44.2837,
                                    823.0650))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("aut")"
                            ApiKey="@("sed")"
                            AvgRating="@(499.7440)"
                            Categories="@(["corporis",
                                "asperiores",
                                "beatae",
                                "nulla"])"
                            Created="@(new DateTime(2006, 10, 26, 4, 0, 11))"
                            Culture="@("exercitationem")"
                            Description="@("voluptas enim qui inventore totam blanditiis")"
                            Extent="@(new Extent(-179.1930,
                                    77.4143,
                                    12.8267,
                                    65.4220,
                                    784.8463,
                                    129.1179,
                                    298.7424,
                                    436.3494,
                                new SpatialReference(5,
                                        "magnam",
                                        "hic",
                                        "et"),
                                    true,
                                    true))"
                            GroupCategories="@(["omnis",
                                "facilis",
                                "aliquam",
                                "ullam"])"
                            LicenseInfo="@("dignissimos")"
                            Modified="@(new DateTime(2022, 3, 19, 11, 25, 18))"
                            Name="@("phone")"
                            NumComments="@(401.4820)"
                            NumRatings="@(581.0499)"
                            NumViews="@(205.6408)"
                            Owner="@("Mariela Padberg")"
                            OwnerFolder="@("Janessa Franecki")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["ducimus",
                                        "culpa",
                                        "et",
                                        "odio"],
                                    "amet",
                                    "ullam",
                                    "nemo",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("nostrum")"
                            Screenshots="@(["optio",
                                "voluptas",
                                "accusantium"])"
                            Size="@(9)"
                            Snippet="@("et")"
                            Tags="@(["illum",
                                "a"])"
                            Title="@("illo et aut")"
                            TypeKeywords="@(["corporis",
                                "impedit",
                                "optio",
                                "est"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("consequuntur natus est")"
                            StringContent="@("ipsa")"
                            OutFields="@(["nihil",
                                "consequatur",
                                "voluptas"])"
                            FieldInfos="@([new FieldInfo("createdAt",
                                    "assumenda",
                                    "quos",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("token",
                                    "iusto",
                                    "repellat",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new RelationshipPopupContent("suscipit mollitia possimus",
                                    "odit distinctio libero voluptas",
                                    9,
                                    "reiciendis",
                                [new RelatedRecordsInfoFieldOrder("similique",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("sit",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("aut",
                                    OrderBy.Desc)],
                                    8)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "token",
                                    "facilis doloremque officia",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "status",
                                    "quae quidem deleniti",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "title",
                                    "repellendus maxime omnis",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("et suscipit earum",
                                    "https://picsum.photos/640/480/?image=458",
                                    "50605581-f486-9d7b-10a2-e4eb44925c14",
                                    () => { Console.WriteLine("cum"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "eum"),
                            new ActionButton("ea occaecati dolore",
                                    "https://picsum.photos/640/480/?image=748",
                                    "7cfabbac-d6a2-81c1-07aa-7d3c20066dee",
                                    () => { Console.WriteLine("in"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "recusandae")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("cupiditate")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("sit")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterRight)"
                            LabelExpression="@("voluptas")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(23060789.1808)"
                            MinScale="@(28841.7923)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(901.8127))"
                            Symbol="@(new TextSymbol("et eveniet nam",
                                new MapColor(80, 186, 53),
                                new MapColor(145, 243, 111),
                                    new Dimension(63.9256),
                                new MapFont(new Dimension(834.7373),
                                        "Times New Roman",
                                    MapFontStyle.Italic,
                                    FontWeight.Lighter,
                                    TextDecoration.None),
                                    229.6069,
                                new MapColor(252, 254, 23),
                                new MapColor(165, 1, 88),
                                    925.4509,
                                HorizontalAlignment.Center,
                                    true,
                                    988.7114,
                                    new Dimension(93.8042),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Age > 21")">
                        </Label>
                        <Field 
                            Name="@("email")"
                            Alias="@("et")"
                            Description="@("voluptatem aut itaque minus voluptatem")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "saepe" })"
                            ValueType="@(FieldValueType.TypeOrCategory)"
                            Domain="@(new InheritedDomain("id"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("iure",
                                33907763.6531),
                                new Effect("error",
                                    9548720.1093)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(239.1083,
                                new Polyline([new MapPath([new MapPoint([851.6714,
                                            166.5601]),
                                        new MapPoint([993.5216,
                                            111.3349,
                                            405.4337]),
                                        new MapPoint([121.1119,
                                            239.5893,
                                            635.1560,
                                            494.8280]),
                                        new MapPoint([146.8938,
                                            346.7461,
                                            743.9586,
                                            635.1597])]),
                                        new MapPath([new MapPoint([186.8867,
                                                975.6407,
                                                466.9859,
                                                69.4970]),
                                            new MapPoint([827.0410,
                                                476.5299]),
                                            new MapPoint([456.9494,
                                                55.5069,
                                                588.1512]),
                                            new MapPoint([748.3067,
                                                187.3970,
                                                194.7489,
                                                612.2230])]),
                                        new MapPath([new MapPoint([924.2818,
                                                260.3881,
                                                693.3635]),
                                            new MapPoint([362.2980,
                                                432.2782,
                                                747.4671,
                                                836.1285])]),
                                        new MapPath([new MapPoint([21.1394,
                                                593.4382,
                                                139.7020,
                                                466.1338]),
                                            new MapPoint([849.3906,
                                                249.6190,
                                                202.2094])])],
                                    new SpatialReference(3,
                                            "ipsa",
                                            "tempora",
                                            "et"),
                                        true,
                                        true),
                                    [2,
                                        1,
                                        4,
                                        2],
                                SpatialRelationship.Overlaps,
                                new TimeExtent(new DateTime(2014, 4, 15, 18, 58, 48),
                                        new DateTime(2005, 9, 19, 9, 41, 4)),
                                    QueryUnits.Miles,
                                    "City = 'Toronto'"))"
                            IncludedEffect="@([new Effect("distinctio",
                                43489512.4429)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "hic et error"))"
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(920.4837)"
                            Unit="@(ElevationUnit.Miles)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["voluptatem",
                    "enim",
                    "aut",
                    "qui"],
                    ["email",
                        "group",
                        "email"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("token");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("updatedAt",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Extent(-4.9867,
                            -0.9064,
                            24.2502,
                            -51.4363,
                            362.6812,
                            685.9020,
                            118.7510,
                            660.4968,
                        new SpatialReference(4,
                                "dolores",
                                "pariatur",
                                "nisi"),
                            true,
                            true),
                    new TextSymbol("qui ratione aut",
                        new MapColor(223, 107, 61),
                        new MapColor(37, 116, 45),
                            new Dimension(140.6338),
                        new MapFont(new Dimension(526.7572),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            100.4366,
                        new MapColor(25, 14, 104),
                        new MapColor(129, 195, 103),
                            153.9945,
                        HorizontalAlignment.Right,
                            true,
                            875.7241,
                            new Dimension(786.2175),
                            true),
                    new PopupTemplate("deleniti voluptas quia",
                            "et",
                            ["molestiae",
                                "maxime",
                                "et"],
                        [new FieldInfo("avatar",
                                "et",
                                "sunt",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongDateLongTime),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("avatar",
                                "rerum",
                                "rerum",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Max)],
                        [new TextPopupContent("magnam recusandae quis"),
                        new RelationshipPopupContent("aut quia corrupti",
                                "non odit tenetur nisi accusantium expedita",
                                9,
                                "quasi",
                            [new RelatedRecordsInfoFieldOrder("distinctio",
                                OrderBy.Asc)],
                                1)],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "avatar",
                                "atque dolores voluptatibus",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "email",
                                "inventore iste nemo",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "title",
                                "rerum perspiciatis minus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("voluptates voluptas et",
                                "c0dd0810-82e5-61d4-b682-618baf5c44f4",
                                () => { Console.WriteLine("neque"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "title",
                                "porro")]),
                        new AttributesDictionary(),
                        true,
                        "necessitatibus",
                        "voluptatibus",
                        new GraphicOrigin(Guid.NewGuid(),
                            "dolor",
                            8))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([6,
                    4],
                    true,
                    336.1835,
                    936.6983,
                    "3.7.9.1",
                new Extent(75.6864,
                        -75.5246,
                        70.1973,
                        -46.9648,
                        369.5463,
                        272.7859,
                        222.0847,
                        312.9092,
                    new SpatialReference(3,
                            "ut",
                            "vero",
                            "possimus"),
                        true,
                        true),
                    3,
                    ["laudantium",
                        "exercitationem",
                        "hic",
                        "sit"],
                    "tenetur",
                    new DateTime(2016, 3, 19, 1, 34, 37),
                    526.7393,
                    6,
                    "tempora",
                    5),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([2,
                    1],
                    true,
                    237.6748,
                    626.5936,
                    "7.8.3.7",
                new Point(-23.7460,
                        80.2995,
                        -48.7952,
                        67.1756,
                        392.2357,
                    new SpatialReference(8,
                            "voluptas",
                            "quia",
                            "iste"),
                        true,
                        true,
                        490.5564),
                    3,
                    ["modi",
                        "eius",
                        "qui"],
                    "tenetur",
                    new DateTime(2002, 8, 3, 9, 30, 29),
                    49.8174,
                    5,
                    "deleniti",
                    9),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([2,
                    8,
                    9],
                    true,
                    331.5831,
                    878.5700,
                    "9.8.1.3",
                new Point(-65.1437,
                        24.6202,
                        176.6135,
                        68.5526,
                        555.4988,
                    new SpatialReference(4,
                            "veniam",
                            "nesciunt",
                            "assumenda"),
                        true,
                        true,
                        475.3645),
                    5,
                    ["aut",
                        "facilis",
                        "omnis",
                        "atque"],
                    "nesciunt",
                    new DateTime(2010, 7, 16, 4, 24, 18),
                    853.7270,
                    9,
                    "et",
                    2),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([2,
                    4,
                    7,
                    3],
                    true,
                    30.4578,
                    735.4460,
                    "3.8.2.1",
                new Polygon([new MapPath([new MapPoint([527.1541,
                            381.0687,
                            394.6387,
                            987.6460]),
                        new MapPoint([717.9155,
                            848.1197,
                            387.5806,
                            463.0963]),
                        new MapPoint([160.3292,
                            1.2410,
                            962.3514,
                            649.8879]),
                        new MapPoint([217.3483,
                            773.0015,
                            36.4828])]),
                        new MapPath([new MapPoint([618.7290,
                                400.0621]),
                            new MapPoint([777.6330,
                                658.0201,
                                957.0499]),
                            new MapPoint([79.4472,
                                41.6875])]),
                        new MapPath([new MapPoint([622.1814,
                                987.4392]),
                            new MapPoint([581.5229,
                                208.5666,
                                360.7046])]),
                        new MapPath([new MapPoint([515.7259,
                                446.4517,
                                436.2300,
                                799.8287]),
                            new MapPoint([99.7091,
                                553.1437,
                                797.0370,
                                577.8755]),
                            new MapPoint([312.1304,
                                82.9326,
                                748.1669,
                                605.3183])])],
                    new SpatialReference(7,
                            "adipisci",
                            "omnis",
                            "dolores"),
                    new Point(-38.2073,
                            32.4092,
                            -149.8534,
                            34.6361,
                            112.4338,
                        new SpatialReference(7,
                                "voluptatem",
                                "qui",
                                "repudiandae"),
                            true,
                            true,
                            869.8353),
                        true,
                        true,
                        true),
                    6,
                    ["rerum",
                        "corporis",
                        "architecto",
                        "consequatur"],
                    "et",
                    new DateTime(2005, 9, 8, 9, 22, 29),
                    747.4394,
                    9,
                    "aperiam",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("accusantium est sunt",
                    "cumque",
                    ["et",
                        "doloremque"],
                [new FieldInfo("email",
                        "et",
                        "aliquid",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.DayShortMonthYearLongTime24),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("title",
                        "deserunt",
                        "non",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.ShortDateLeLongTime24),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("createdAt",
                        "aliquam",
                        "autem",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongDateLongTime24),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("name",
                        "quo",
                        "voluptate",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Max)],
                [new TextPopupContent("illo accusamus ea")],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "group",
                        "odio et molestiae",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "updatedAt",
                        "sunt eveniet et",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("sit sint dolorum",
                        "https://picsum.photos/640/480/?image=550",
                        "a633ea68-2880-f8b0-e839-159cfe3fa392",
                        () => { Console.WriteLine("in"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "ex")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                        "deleniti inventore iste"),
                ElevationInfoMode.AbsoluteHeight,
                    567.1415,
                ElevationUnit.NauticalMiles);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("et",
                    7897713.0424),
                    new Effect("ut",
                        21453430.1428),
                    new Effect("placeat",
                        48538980.2991)],
                    true,
                new FeatureFilter(287.9909,
                    new Polygon([new MapPath([new MapPoint([156.4606,
                                812.7614]),
                            new MapPoint([560.7347,
                                645.1335,
                                872.9139])])],
                        new SpatialReference(8,
                                "sit",
                                "non",
                                "et"),
                        new Point(-113.2542,
                                -23.9459,
                                137.2312,
                                44.8328,
                                731.6145,
                            new SpatialReference(7,
                                    "recusandae",
                                    "hic",
                                    "recusandae"),
                                true,
                                true,
                                79.2218),
                            true,
                            true,
                            true),
                        [7,
                            8,
                            1,
                            6],
                    SpatialRelationship.Overlaps,
                    new TimeExtent(new DateTime(2008, 7, 7, 4, 3, 16),
                            new DateTime(2002, 2, 21, 14, 49, 51)),
                        QueryUnits.Miles,
                        "Street = '123 Main St.'"),
                    [new Effect("qui",
                        43892587.8147)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "email",
                    "quibusdam",
                    "dolore non eum soluta",
                    4,
                    true,
                    true,
                    new { Value = "laboriosam" },
                FieldValueType.DateAndTime,
                new InheritedDomain("token")),
            new Field(default,
                    "status",
                    "et",
                    "quidem architecto tempore sequi ratione reiciendis",
                    8,
                    true,
                    true,
                    new { Value = "fuga" },
                FieldValueType.NameOrTitle,
                new RangeDomain("aliquid",
                        "aut",
                        "title")),
            new Field(default,
                    "title",
                    "sapiente",
                    "exercitationem exercitationem quo voluptas impedit eligendi consequatur",
                    3,
                    true,
                    true,
                    new { Value = "in" },
                FieldValueType.DateAndTime,
                new InheritedDomain("name"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(148.8864,
                    172.9397,
                    -50.1819,
                    41.5782,
                    79.5621,
                    428.6614,
                    364.5267,
                    186.4608,
                new SpatialReference(3,
                        "dolorum",
                        "dolor",
                        "mollitia"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveAlong,
                    "nemo",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    37697659.3243,
                    19584.5761,
                    true,
                    new Dimension(168.6311),
                new TextSymbol("fuga expedita recusandae",
                    new MapColor(80, 130, 234),
                    new MapColor(49, 88, 159),
                        new Dimension(376.8067),
                    new MapFont(new Dimension(411.6640),
                            "Bookman",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        291.8842,
                    new MapColor(37, 213, 216),
                    new MapColor(251, 157, 113),
                        336.6434,
                    HorizontalAlignment.Right,
                        true,
                        36.6237,
                        new Dimension(310.5437),
                        true),
                    true,
                    "Name = 'John Doe'"),
            new Label(LabelPlacement.CenterBefore,
                    "vero",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    49413115.9115,
                    20277.8028,
                    true,
                    new Dimension(671.4622),
                new TextSymbol("aut harum aut",
                    new MapColor(79, 111, 220),
                    new MapColor(210, 187, 18),
                        new Dimension(83.4046),
                    new MapFont(new Dimension(356.0128),
                            "Times New Roman",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.None),
                        326.5070,
                    new MapColor(218, 107, 221),
                    new MapColor(225, 80, 64),
                        997.8676,
                    HorizontalAlignment.Right,
                        true,
                        415.0431,
                        new Dimension(407.6755),
                        true),
                    true,
                    "ObjectID = 1")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("est",
                SortOrder.Descending,
                    "consequatur"),
            new OrderedLayerOrderBy("qui",
                SortOrder.Descending,
                    "quam"),
            new OrderedLayerOrderBy("itaque",
                SortOrder.Ascending,
                    "consectetur")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "nulla",
                    "molestiae",
                    122.4950,
                    ["blanditiis",
                        "molestiae"],
                    new DateTime(2003, 8, 14, 4, 54, 37),
                    "consequatur",
                    "voluptatum quibusdam et officiis assumenda",
                new Extent(119.9885,
                        16.3203,
                        0.3824,
                        5.5661,
                        526.0105,
                        509.5739,
                        60.7708,
                        729.4513,
                    new SpatialReference(8,
                            "consequatur",
                            "enim",
                            "consequuntur"),
                        true,
                        true),
                    ["cupiditate",
                        "nihil"],
                    "ratione",
                    new DateTime(2005, 6, 18, 10, 13, 28),
                    "id",
                    332.4553);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("vel fugit non",
                    new MapColor(34, 239, 194),
                    new MapColor(75, 252, 172),
                        new Dimension(159.2150),
                    new MapFont(new Dimension(691.9206),
                            "Garamond",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.None),
                        141.1802,
                    new MapColor(222, 210, 83),
                    new MapColor(221, 14, 145),
                        662.5972,
                    HorizontalAlignment.Left,
                        true,
                        791.3176,
                        new Dimension(128.6992),
                        true),
                    "et",
                [new SizeVariable("error",
                        new Dimension(364.2992),
                        new Dimension(338.5683),
                        5.6526,
                        879.4246,
                        VisualValueRepresentation.Area,
                        VisualValueUnit.Miles,
                        "at",
                        "illum",
                        true,
                        VisualAxis.Width,
                        "doloremque",
                        "repudiandae et aut",
                    new VisualVariableLegendOptions(true,
                            "modi et libero"))],
                new AuthoringInfo(ClassificationMethod.StandardDeviation,
                    new AlgorithmicColorRamp(Algorithm.Hsv,
                        new MapColor(100, 60, 35),
                        new MapColor(29, 213, 106)),
                        497.4878,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(599.2145,
                                919.9421),
                        new AuthoringInfoField1ClassBreakInfos(109.4608,
                                385.6082)],
                            "deleniti",
                            "tenetur",
                            "sint"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(1.3886,
                                799.3880),
                        new AuthoringInfoField1ClassBreakInfos(58.3115,
                                129.1813),
                        new AuthoringInfoField1ClassBreakInfos(68.8255,
                                287.1930),
                        new AuthoringInfoField1ClassBreakInfos(472.2895,
                                364.8261)],
                            "commodi",
                            "non",
                            "in"),
                        ["dolores",
                            "voluptatem"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "et",
                        true,
                    LengthUnit.Millimeters,
                        479.9108,
                        462.6278,
                        942.2798,
                        982.4468));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "ut",
                    "enim",
                    "impedit");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2012, 8, 18, 22, 4, 21),
                    new DateTime(2006, 8, 18, 9, 50, 53));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("laboriosam",
                    "dolorem",
                new TimeExtent(new DateTime(2012, 7, 12, 15, 22, 16),
                        new DateTime(2010, 6, 9, 1, 16, 4)),
                new TimeInterval(TemporalTime.Centuries,
                        946.4954),
                    [new DateTime(2006, 8, 4, 9, 25, 11),
                        new DateTime(2010, 1, 19, 14, 51, 46),
                        new DateTime(2015, 2, 11, 7, 18, 4),
                        new DateTime(2019, 8, 17, 8, 16, 12)],
                    "Africa/Monrovia",
                    "quae");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Months,
                    60.9635);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 9, 16, 0, 36, 27),
                    new DateTime(2021, 10, 14, 11, 56, 20));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
