@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("vel molestias ratione")"
                        Copyright="@("voluptas")"
                        Opacity="@(0.5077)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.HardLight)"
                        DefinitionExpression="@("consequatur")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("nihil")"
                        Effect="@(new Effect("magnam",
                            30361951.7103))"
                        FullExtent="@(new Extent(160.4179,
                                171.1609,
                                -5.5337,
                                34.0452,
                                75.6841,
                                959.9827,
                                764.6612,
                                328.6216,
                            new SpatialReference(8,
                                    "velit",
                                    "eum",
                                    "debitis"),
                                true,
                                true))"
                        GeometryType="@("eligendi")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("rerum")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("optio")"
                        MaxScale="@(43740825.1146)"
                        MinScale="@(37227.8913)"
                        ObjectIdField="@("ut")"
                        OutFields="@(["laudantium",
                            "qui"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(461.5983)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(9,
                                "nulla",
                                "laborum",
                                "voluptatem"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Milliseconds)"
                            Value="@(769.6592)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("illum")"
                            EndField="@("et")"
                            Stops="@([new DateTime(2017, 1, 19, 2, 42, 35),
                                new DateTime(2020, 5, 20, 1, 46, 26),
                                new DateTime(2006, 5, 23, 4, 15, 20),
                                new DateTime(2006, 5, 9, 2, 5, 14)])"
                            TimeZone="@("Africa/Nairobi")"
                            TrackIdField="@("iusto")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(223.5390)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2022, 7, 27, 8, 20, 42))"
                                End="@(new DateTime(2001, 2, 6, 7, 13, 35))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2001, 9, 19, 3, 5, 6))"
                            End="@(new DateTime(2015, 5, 24, 8, 48, 20))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(130, 181, 189),
                                    new MapColor(79, 229, 2)),
                                    720.7858,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(495.2423,
                                            460.2161),
                                    new AuthoringInfoField1ClassBreakInfos(964.0044,
                                            335.7496)],
                                        "fuga",
                                        "est",
                                        "quis"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(167.6887,
                                            72.6343),
                                    new AuthoringInfoField1ClassBreakInfos(570.6430,
                                            487.4617),
                                    new AuthoringInfoField1ClassBreakInfos(691.4142,
                                            103.8900),
                                    new AuthoringInfoField1ClassBreakInfos(382.3366,
                                            335.7161)],
                                        "ducimus",
                                        "error",
                                        "iusto"),
                                    ["iusto",
                                        "ea"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "ut",
                                    true,
                                LengthUnit.Millimeters,
                                    719.3649,
                                    349.7669,
                                    723.4962,
                                    424.7031))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("est")"
                            ApiKey="@("vel")"
                            AvgRating="@(705.9833)"
                            Categories="@(["totam",
                                "ex"])"
                            Created="@(new DateTime(2023, 1, 23, 13, 34, 21))"
                            Culture="@("aut")"
                            Description="@("dignissimos in eos delectus")"
                            Extent="@(new Extent(-9.2795,
                                    -88.2059,
                                    62.5733,
                                    -5.7934,
                                    674.3800,
                                    549.2203,
                                    906.9167,
                                    367.0897,
                                new SpatialReference(8,
                                        "qui",
                                        "nihil",
                                        "dolorem"),
                                    true,
                                    true))"
                            GroupCategories="@(["eius",
                                "unde",
                                "in"])"
                            LicenseInfo="@("hic")"
                            Modified="@(new DateTime(2016, 4, 10, 0, 17, 21))"
                            Name="@("status")"
                            NumComments="@(73.2074)"
                            NumRatings="@(500.7407)"
                            NumViews="@(740.4622)"
                            Owner="@("Kacie Berge")"
                            OwnerFolder="@("Kenna Schaefer")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["corporis",
                                        "quasi",
                                        "voluptatem"],
                                    "repellendus",
                                    "repudiandae",
                                    "neque",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("non")"
                            Screenshots="@(["numquam",
                                "iste",
                                "quia"])"
                            Size="@(2)"
                            Snippet="@("molestiae")"
                            Tags="@(["voluptatem",
                                "fugiat",
                                "at"])"
                            Title="@("commodi minus eum")"
                            TypeKeywords="@(["possimus",
                                "quis",
                                "doloribus",
                                "eaque"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("pariatur earum et")"
                            StringContent="@("sit")"
                            OutFields="@(["sit",
                                "tenetur",
                                "molestiae"])"
                            FieldInfos="@([new FieldInfo("createdAt",
                                    "pariatur",
                                    "voluptates",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.LongDateShortTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("email",
                                    "ullam",
                                    "ut",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("title",
                                        "similique",
                                        "vel",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("group",
                                        "non",
                                        "rerum",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.ShortDateLeShortTime24),
                                        true,
                                        true,
                                    StatisticType.Count),
                                new FieldInfo("updatedAt",
                                        "reprehenderit",
                                        "aut",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.ShortDateLeLongTime),
                                        true,
                                        true,
                                    StatisticType.Max)],
                                    "accusamus officiis expedita voluptas deserunt",
                                    "voluptatem doloribus occaecati"),
                            new MediaPopupContent("totam vero ea",
                                    "quod illo qui quibusdam error",
                                [new PieChartMediaInfo("reiciendis quidem voluptatem",
                                        "recusandae",
                                        "natus aperiam quam",
                                    new ChartMediaInfoValue(["consectetur",
                                            "sed",
                                            "cumque"],
                                            "consequatur",
                                            "eligendi",
                                        [new ChartMediaInfoValueSeries("updatedAt",
                                                "dicta",
                                                851.2097)],
                                        [new MapColor(187, 72, 151),
                                        new MapColor(127, 81, 7),
                                        new MapColor(167, 253, 146)])),
                                new LineChartMediaInfo("repudiandae labore quia",
                                        "provident",
                                        "iste enim est",
                                    new ChartMediaInfoValue(["perspiciatis",
                                            "tenetur",
                                            "id",
                                            "perspiciatis"],
                                            "et",
                                            "incidunt",
                                        [new ChartMediaInfoValueSeries("email",
                                                "ipsum",
                                                750.9995)],
                                        [new MapColor(125, 84, 11)])),
                                new PieChartMediaInfo("rerum error quis",
                                        "quam",
                                        "sit soluta excepturi",
                                    new ChartMediaInfoValue(["eum",
                                            "voluptate",
                                            "tenetur"],
                                            "architecto",
                                            "ipsum",
                                        [new ChartMediaInfoValueSeries("token",
                                                "delectus",
                                                106.3042)],
                                        [new MapColor(68, 37, 11),
                                        new MapColor(29, 188, 28)])),
                                new PieChartMediaInfo("deserunt aut vel",
                                        "optio",
                                        "rerum ipsa ut",
                                    new ChartMediaInfoValue(["labore",
                                            "velit",
                                            "vel",
                                            "nihil"],
                                            "rerum",
                                            "ut",
                                        [new ChartMediaInfoValueSeries("avatar",
                                                "quos",
                                                933.0456)],
                                        [new MapColor(225, 162, 52),
                                        new MapColor(175, 31, 70)]))],
                                    7),
                            new FieldsPopupContent([new FieldInfo("name",
                                        "aut",
                                        "aliquid",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.ShortDate),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("category",
                                        "accusantium",
                                        "neque",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.ShortDateLeShortTime24),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("avatar",
                                        "et",
                                        "quidem",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.LongDate),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("group",
                                        "sequi",
                                        "pariatur",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.Year),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "sed iusto sapiente labore aspernatur asperiores est",
                                    "dolor nobis maxime")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "updatedAt",
                                    "voluptatibus corporis dolorum",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("nostrum recusandae sed",
                                    "https://picsum.photos/640/480/?image=924",
                                    "46fabdd8-3fd8-5c5a-f8df-738e30d7967b",
                                    () => { Console.WriteLine("tempora"); return Task.CompletedTask; },
                                    "avatar",
                                    true,
                                    true,
                                    true,
                                    "omnis")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("quasi")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("molestiae")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowBefore)"
                            LabelExpression="@("voluptas")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(42278721.7930)"
                            MinScale="@(25427.9056)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(765.8977))"
                            Symbol="@(new TextSymbol("molestiae exercitationem est",
                                new MapColor(242, 253, 183),
                                new MapColor(222, 78, 19),
                                    new Dimension(511.5467),
                                new MapFont(new Dimension(866.6077),
                                        "Palatino",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    699.5499,
                                new MapColor(197, 25, 38),
                                new MapColor(11, 224, 216),
                                    239.6183,
                                HorizontalAlignment.Center,
                                    true,
                                    73.8880,
                                    new Dimension(277.0213),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("PostalCode = 'M5V 1J9'")">
                        </Label>
                        <Field 
                            Name="@("phone")"
                            Alias="@("voluptate")"
                            Description="@("sunt rerum dolores optio dolore molestiae dignissimos")"
                            Length="@(6)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "quas" })"
                            ValueType="@(FieldValueType.Description)"
                            Domain="@(new InheritedDomain("updatedAt"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("et",
                                12751681.0445)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(480.4969,
                                new Polyline([new MapPath([new MapPoint([480.3097,
                                            213.5317]),
                                        new MapPoint([535.5788,
                                            575.2521,
                                            844.0454,
                                            840.1010]),
                                        new MapPoint([569.5025,
                                            98.7240]),
                                        new MapPoint([829.2913,
                                            94.7318,
                                            675.2682,
                                            619.8401])]),
                                        new MapPath([new MapPoint([323.1930,
                                                917.7577,
                                                590.9270,
                                                857.5476]),
                                            new MapPoint([510.8894,
                                                172.5240])]),
                                        new MapPath([new MapPoint([288.1816,
                                                170.9971]),
                                            new MapPoint([408.8738,
                                                311.2887,
                                                113.1448]),
                                            new MapPoint([846.4836,
                                                466.6796,
                                                149.7440,
                                                812.8639]),
                                            new MapPoint([638.1549,
                                                191.9442,
                                                945.5600])]),
                                        new MapPath([new MapPoint([520.4003,
                                                54.1899]),
                                            new MapPoint([90.0091,
                                                778.9570,
                                                349.1053,
                                                489.8132]),
                                            new MapPoint([73.9427,
                                                807.6929,
                                                20.5945]),
                                            new MapPoint([483.7551,
                                                765.2379,
                                                693.3000])])],
                                    new SpatialReference(1,
                                            "quos",
                                            "molestiae",
                                            "ea"),
                                        true,
                                        true),
                                    [9,
                                        3,
                                        8,
                                        5],
                                SpatialRelationship.Within,
                                new TimeExtent(new DateTime(2011, 2, 25, 11, 4, 38),
                                        new DateTime(2004, 5, 5, 21, 42, 46)),
                                    QueryUnits.NauticalMiles,
                                    "1 = 1"))"
                            IncludedEffect="@([new Effect("et",
                                5328956.5588),
                                new Effect("et",
                                    49471381.7020),
                                new Effect("velit",
                                    37313110.7059),
                                new Effect("quam",
                                    47814342.5289)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                                    "voluptatum earum ab"))"
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(859.2412)"
                            Unit="@(ElevationUnit.Yards)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["harum",
                    "amet"],
                    ["title",
                        "password",
                        "token"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("createdAt");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("status",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([935.6625,
                                548.4629,
                                674.4165]),
                            new MapPoint([97.7639,
                                351.4009])])],
                        new SpatialReference(3,
                                "impedit",
                                "temporibus",
                                "eum"),
                            true,
                            true),
                    new TextSymbol("voluptatem accusamus quis",
                        new MapColor(46, 205, 167),
                        new MapColor(241, 48, 216),
                            new Dimension(471.1869),
                        new MapFont(new Dimension(860.8709),
                                "Arial",
                            MapFontStyle.Italic,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            271.8630,
                        new MapColor(245, 99, 186),
                        new MapColor(61, 238, 231),
                            618.8987,
                        HorizontalAlignment.Left,
                            true,
                            390.3290,
                            new Dimension(414.4348),
                            true),
                    new PopupTemplate("perferendis quis qui",
                            "cum",
                            ["alias",
                                "vel"],
                        [new FieldInfo("name",
                                "sint",
                                "velit",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("name",
                                "beatae",
                                "quod",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("status",
                                "quo",
                                "itaque",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongDateLongTime24),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("title",
                                "alias",
                                "impedit",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.DayShortMonthYearLongTime),
                                true,
                                true,
                            StatisticType.Min)],
                        [new MediaPopupContent("qui architecto occaecati",
                                "est qui magnam doloribus",
                            [new BarChartMediaInfo("quidem ut sit",
                                    "expedita",
                                    "iste qui voluptas",
                                new ChartMediaInfoValue(["ducimus",
                                        "amet",
                                        "aut"],
                                        "magnam",
                                        "doloribus",
                                    [new ChartMediaInfoValueSeries("createdAt",
                                            "est",
                                            614.3851)],
                                    [new MapColor(107, 46, 77),
                                    new MapColor(137, 63, 237),
                                    new MapColor(68, 0, 148),
                                    new MapColor(207, 4, 92)])),
                            new BarChartMediaInfo("culpa repellendus laudantium",
                                    "odio",
                                    "rerum quibusdam libero",
                                new ChartMediaInfoValue(["consectetur",
                                        "optio",
                                        "sunt",
                                        "autem"],
                                        "impedit",
                                        "voluptas",
                                    [new ChartMediaInfoValueSeries("title",
                                            "velit",
                                            74.9752),
                                    new ChartMediaInfoValueSeries("phone",
                                            "architecto",
                                            951.3183),
                                    new ChartMediaInfoValueSeries("token",
                                            "dolore",
                                            665.0977)],
                                    [new MapColor(162, 130, 29),
                                    new MapColor(46, 104, 193),
                                    new MapColor(27, 140, 110),
                                    new MapColor(102, 121, 182)])),
                            new ColumnChartMediaInfo("illo enim quas",
                                    "aliquam",
                                    "cupiditate quaerat qui",
                                new ChartMediaInfoValue(["eos",
                                        "earum",
                                        "rem",
                                        "quam"],
                                        "placeat",
                                        "dolor",
                                    [new ChartMediaInfoValueSeries("group",
                                            "vero",
                                            187.3419),
                                    new ChartMediaInfoValueSeries("updatedAt",
                                            "eos",
                                            71.9090),
                                    new ChartMediaInfoValueSeries("category",
                                            "laborum",
                                            680.8689),
                                    new ChartMediaInfoValueSeries("name",
                                            "soluta",
                                            985.5427)],
                                    [new MapColor(176, 129, 136),
                                    new MapColor(216, 186, 78),
                                    new MapColor(72, 47, 27)]))],
                                7),
                        new RelationshipPopupContent("sunt corporis iusto",
                                "iste harum et libero dolorem sunt",
                                3,
                                "quia",
                            [new RelatedRecordsInfoFieldOrder("enim",
                                OrderBy.Asc)],
                                7),
                        new RelationshipPopupContent("deleniti ad aut",
                                "ea neque quo aspernatur atque est doloribus",
                                7,
                                "molestias",
                            [new RelatedRecordsInfoFieldOrder("placeat",
                                OrderBy.Desc)],
                                6)],
                        [new ExpressionInfo("return $feature.Name;",
                                "phone",
                                "nisi et quod",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "group",
                                "dolor modi tenetur",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "comment",
                                "adipisci laudantium et",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("ea ea doloribus",
                                "0ab764c8-d2b9-6687-a800-36a35eccafba",
                                () => { Console.WriteLine("voluptatum"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "avatar",
                                "consequatur"),
                        new ActionToggle("excepturi enim eos",
                                "81d9e2cf-0f0f-dbdc-19c3-c883302fa657",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "status",
                                "et")]),
                        new AttributesDictionary(),
                        true,
                        "voluptate",
                        "saepe",
                        new GraphicOrigin(Guid.NewGuid(),
                            "aut",
                            2))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([1,
                    3,
                    7],
                    true,
                    689.3564,
                    184.6149,
                    "9.8.0.8",
                new Point(158.2973,
                        -6.3049,
                        -112.9227,
                        -35.4408,
                        850.0910,
                    new SpatialReference(7,
                            "voluptatem",
                            "aliquam",
                            "explicabo"),
                        true,
                        true,
                        636.4966),
                    4,
                    ["nulla",
                        "enim",
                        "ipsum",
                        "saepe"],
                    "aut",
                    new DateTime(2022, 11, 20, 21, 57, 37),
                    340.5849,
                    1,
                    "qui",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([7,
                    9,
                    1],
                    true,
                    585.1268,
                    495.2926,
                    "9.8.0.6",
                new Polyline([new MapPath([new MapPoint([179.9087,
                            985.4447,
                            702.0915,
                            77.3452]),
                        new MapPoint([297.7217,
                            13.2163,
                            152.8215]),
                        new MapPoint([720.5283,
                            893.7665,
                            468.3841,
                            510.9337])]),
                        new MapPath([new MapPoint([85.1976,
                                837.4347,
                                802.1726,
                                606.3595]),
                            new MapPoint([281.7548,
                                633.2682]),
                            new MapPoint([328.6296,
                                749.2618,
                                263.6900,
                                439.0508])]),
                        new MapPath([new MapPoint([464.2651,
                                826.2607,
                                844.6465,
                                636.4125]),
                            new MapPoint([547.7600,
                                584.6673]),
                            new MapPoint([757.0911,
                                630.0270,
                                436.7928]),
                            new MapPoint([869.8191,
                                479.3757])]),
                        new MapPath([new MapPoint([986.0419,
                                634.1216]),
                            new MapPoint([469.4992,
                                426.9116]),
                            new MapPoint([475.9060,
                                868.4892,
                                274.8973,
                                888.1675])])],
                    new SpatialReference(8,
                            "autem",
                            "commodi",
                            "est"),
                        true,
                        true),
                    6,
                    ["sed",
                        "perferendis"],
                    "qui",
                    new DateTime(2007, 10, 27, 18, 29, 26),
                    87.5324,
                    3,
                    "sit",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([5,
                    3,
                    7,
                    3],
                    true,
                    997.0333,
                    508.9163,
                    "4.2.6.2",
                new Extent(24.1931,
                        57.3513,
                        -53.5188,
                        -5.7409,
                        75.0412,
                        156.8185,
                        786.7335,
                        509.3980,
                    new SpatialReference(3,
                            "dolore",
                            "facilis",
                            "minima"),
                        true,
                        true),
                    9,
                    ["ipsam",
                        "magnam"],
                    "molestiae",
                    new DateTime(2002, 4, 17, 11, 3, 37),
                    105.8158,
                    5,
                    "blanditiis",
                    9),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([9,
                    9],
                    true,
                    952.8704,
                    976.5917,
                    "4.1.0.3",
                new Polygon([new MapPath([new MapPoint([205.3393,
                            834.8411]),
                        new MapPoint([624.6460,
                            55.9678,
                            165.3568]),
                        new MapPoint([288.3683,
                            752.7673,
                            508.4523,
                            645.2282]),
                        new MapPoint([903.2503,
                            262.3122])])],
                    new SpatialReference(6,
                            "rerum",
                            "fuga",
                            "aut"),
                    new Point(-7.3067,
                            -18.2086,
                            -68.2341,
                            58.3743,
                            377.3510,
                        new SpatialReference(8,
                                "adipisci",
                                "voluptates",
                                "perspiciatis"),
                            true,
                            true,
                            449.3232),
                        true,
                        true,
                        true),
                    2,
                    ["et",
                        "sit",
                        "voluptatem"],
                    "animi",
                    new DateTime(2001, 5, 15, 18, 11, 51),
                    75.9155,
                    5,
                    "est",
                    3),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Average;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("qui voluptatibus corrupti",
                    "odio",
                    ["ea",
                        "voluptatem",
                        "exercitationem",
                        "architecto"],
                [new FieldInfo("status",
                        "inventore",
                        "illum",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortDateShortTime),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("comment",
                        "vel",
                        "harum",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongMonthDayYearLongTime24),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new MediaPopupContent("consequatur rerum ut",
                        "nisi iste fugiat qui adipisci",
                    [new BarChartMediaInfo("aut suscipit corporis",
                            "ullam",
                            "eum magnam ratione",
                        new ChartMediaInfoValue(["velit",
                                "sed",
                                "excepturi"],
                                "ab",
                                "dolorum",
                            [new ChartMediaInfoValueSeries("token",
                                    "dolores",
                                    249.5270),
                            new ChartMediaInfoValueSeries("email",
                                    "molestiae",
                                    799.8158),
                            new ChartMediaInfoValueSeries("avatar",
                                    "cum",
                                    819.9366),
                            new ChartMediaInfoValueSeries("name",
                                    "maiores",
                                    308.2267)],
                            [new MapColor(39, 77, 46),
                            new MapColor(51, 88, 59),
                            new MapColor(39, 197, 134),
                            new MapColor(229, 157, 169)])),
                    new BarChartMediaInfo("quam enim laboriosam",
                            "non",
                            "illo voluptate sunt",
                        new ChartMediaInfoValue(["ipsam",
                                "accusamus",
                                "ab",
                                "temporibus"],
                                "deserunt",
                                "illo",
                            [new ChartMediaInfoValueSeries("comment",
                                    "quod",
                                    606.4864),
                            new ChartMediaInfoValueSeries("phone",
                                    "minima",
                                    714.5488),
                            new ChartMediaInfoValueSeries("createdAt",
                                    "quasi",
                                    518.3719)],
                            [new MapColor(180, 162, 42),
                            new MapColor(94, 165, 182),
                            new MapColor(28, 128, 146)])),
                    new ImageMediaInfo("dicta suscipit et",
                            "consequuntur",
                            "omnis sunt accusantium",
                        new ImageMediaInfoValue("http://dayana.name",
                                "https://harmon.net"),
                            225.8071),
                    new ColumnChartMediaInfo("illo ea sit",
                            "quo",
                            "ut iure quidem",
                        new ChartMediaInfoValue(["quia",
                                "commodi",
                                "odit"],
                                "quia",
                                "et",
                            [new ChartMediaInfoValueSeries("phone",
                                    "doloribus",
                                    376.4304),
                            new ChartMediaInfoValueSeries("comment",
                                    "doloremque",
                                    826.6004),
                            new ChartMediaInfoValueSeries("name",
                                    "dolores",
                                    656.0706)],
                            [new MapColor(101, 244, 111),
                            new MapColor(121, 226, 205),
                            new MapColor(216, 172, 46)]))],
                        1),
                new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                            "odio",
                            "voluptas itaque sed")),
                new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                            "voluptatum",
                            "consectetur molestiae omnis")),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "ipsum",
                            "expedita rerum consectetur"))],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "phone",
                        "asperiores incidunt omnis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "avatar",
                        "nisi inventore at",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("nobis est aliquam",
                        "https://picsum.photos/640/480/?image=792",
                        "eb061cdd-0763-fd5e-6379-b8faff671add",
                        () => { Console.WriteLine("eius"); return Task.CompletedTask; },
                        "group",
                        true,
                        true,
                        true,
                        "ea"),
                new ActionToggle("omnis eaque reprehenderit",
                        "293f00bc-8a5b-1475-dc47-3d78ceff4417",
                        () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "comment",
                        "ipsum")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "sunt velit ad"),
                ElevationInfoMode.AbsoluteHeight,
                    598.2010,
                ElevationUnit.Yards);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("sit",
                    4081997.0982)],
                    true,
                new FeatureFilter(803.9040,
                    new Extent(142.7537,
                            115.0662,
                            11.5533,
                            -46.7176,
                            30.6465,
                            989.1704,
                            99.3110,
                            953.4480,
                        new SpatialReference(5,
                                "corporis",
                                "rem",
                                "vero"),
                            true,
                            true),
                        [7,
                            6],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2006, 8, 20, 20, 11, 37),
                            new DateTime(2023, 2, 1, 11, 7, 51)),
                        QueryUnits.Feet,
                        "City = 'Toronto'"),
                    [new Effect("fugit",
                        37157497.3831),
                        new Effect("reprehenderit",
                            48635086.5592),
                        new Effect("tempora",
                            38330703.9730)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "group",
                    "tenetur",
                    "veniam similique nisi sit earum atque rerum",
                    6,
                    true,
                    true,
                    new { Value = "itaque" },
                FieldValueType.TypeOrCategory,
                new RangeDomain("sapiente",
                        "et",
                        "comment")),
            new Field(default,
                    "name",
                    "et",
                    "praesentium facere quis ut beatae qui numquam",
                    9,
                    true,
                    true,
                    new { Value = "nesciunt" },
                FieldValueType.TypeOrCategory,
                new RangeDomain("eaque",
                        "similique",
                        "email"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(143.1137,
                    144.7383,
                    81.4455,
                    38.3718,
                    771.1994,
                    263.0243,
                    38.9238,
                    128.8992,
                new SpatialReference(1,
                        "vitae",
                        "neque",
                        "corrupti"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterStart,
                    "sunt",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    23394510.0096,
                    17954.3435,
                    true,
                    new Dimension(913.3748),
                new TextSymbol("non sit natus",
                    new MapColor(145, 145, 123),
                    new MapColor(134, 194, 83),
                        new Dimension(392.9298),
                    new MapFont(new Dimension(770.3624),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        510.9603,
                    new MapColor(53, 116, 83),
                    new MapColor(137, 47, 63),
                        666.2665,
                    HorizontalAlignment.Right,
                        true,
                        345.5029,
                        new Dimension(984.6384),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.AboveCenter,
                    "ut",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    5985591.3065,
                    42424.8245,
                    true,
                    new Dimension(203.0092),
                new TextSymbol("esse deserunt nihil",
                    new MapColor(69, 242, 131),
                    new MapColor(121, 185, 17),
                        new Dimension(727.0724),
                    new MapFont(new Dimension(928.2124),
                            "Arial",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        99.2565,
                    new MapColor(110, 15, 134),
                    new MapColor(131, 143, 46),
                        950.0650,
                    HorizontalAlignment.Right,
                        true,
                        118.8059,
                        new Dimension(49.2841),
                        true),
                    true,
                    "Province = 'Ontario'"),
            new Label(LabelPlacement.BelowEnd,
                    "fugiat",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    31910154.6448,
                    24505.1849,
                    true,
                    new Dimension(457.0889),
                new TextSymbol("animi temporibus eum",
                    new MapColor(86, 165, 89),
                    new MapColor(36, 96, 53),
                        new Dimension(463.4702),
                    new MapFont(new Dimension(399.4855),
                            "Courier New",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        193.7977,
                    new MapColor(205, 142, 130),
                    new MapColor(165, 200, 33),
                        6.6995,
                    HorizontalAlignment.Right,
                        true,
                        208.3298,
                        new Dimension(269.1130),
                        true),
                    true,
                    "City = 'Toronto'"),
            new Label(LabelPlacement.CenterEnd,
                    "voluptatem",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    24200160.6814,
                    22951.6889,
                    true,
                    new Dimension(914.8432),
                new TextSymbol("possimus qui id",
                    new MapColor(12, 183, 130),
                    new MapColor(80, 59, 244),
                        new Dimension(243.7132),
                    new MapFont(new Dimension(677.7258),
                            "Courier New",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        608.1611,
                    new MapColor(233, 233, 138),
                    new MapColor(176, 158, 42),
                        2.0715,
                    HorizontalAlignment.Right,
                        true,
                        737.8338,
                        new Dimension(776.2428),
                        true),
                    true,
                    "Province = 'Ontario'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("corporis",
                SortOrder.Ascending,
                    "nesciunt"),
            new OrderedLayerOrderBy("quas",
                SortOrder.Ascending,
                    "asperiores"),
            new OrderedLayerOrderBy("possimus",
                SortOrder.Ascending,
                    "quia"),
            new OrderedLayerOrderBy("assumenda",
                SortOrder.Ascending,
                    "saepe")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "autem",
                    "aliquid",
                    207.3451,
                    ["aliquam",
                        "omnis",
                        "consectetur",
                        "id"],
                    new DateTime(2022, 10, 26, 14, 41, 19),
                    "est",
                    "expedita ex soluta possimus molestiae",
                new Extent(78.9716,
                        162.2190,
                        -60.7437,
                        56.3628,
                        893.1091,
                        940.6344,
                        823.7542,
                        124.2350,
                    new SpatialReference(7,
                            "recusandae",
                            "sunt",
                            "ullam"),
                        true,
                        true),
                    ["ut",
                        "quia",
                        "repellendus",
                        "aut"],
                    "aut",
                    new DateTime(2020, 7, 6, 0, 23, 57),
                    "phone",
                    116.7852);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("asperiores unde nulla",
                    new MapColor(56, 33, 185),
                    new MapColor(164, 43, 205),
                        new Dimension(990.4598),
                    new MapFont(new Dimension(686.8140),
                            "Garamond",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.None),
                        700.8536,
                    new MapColor(88, 119, 248),
                    new MapColor(3, 132, 96),
                        346.9940,
                    HorizontalAlignment.Center,
                        true,
                        658.5408,
                        new Dimension(737.0459),
                        true),
                    "maxime",
                [new ColorVariable("doloremque",
                        "adipisci",
                    [new ColorStop(555.0396,
                        new MapColor(20, 76, 252),
                            "doloremque"),
                    new ColorStop(245.8894,
                        new MapColor(199, 113, 91),
                            "reprehenderit")],
                    new VisualVariableLegendOptions(true,
                            "ut quia in"),
                        "qui",
                        "dolor quo velit")],
                new AuthoringInfo(ClassificationMethod.Quantile,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(73, 73, 73),
                            new MapColor(185, 86, 245)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(242, 109, 82),
                            new MapColor(57, 59, 36)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(145, 141, 132),
                            new MapColor(166, 0, 6))]),
                        983.6156,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(791.3252,
                                285.3264),
                        new AuthoringInfoField1ClassBreakInfos(512.5878,
                                610.4132),
                        new AuthoringInfoField1ClassBreakInfos(209.4886,
                                128.7698),
                        new AuthoringInfoField1ClassBreakInfos(126.8928,
                                232.3771)],
                            "quo",
                            "rerum",
                            "placeat"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(767.5403,
                                385.3035),
                        new AuthoringInfoField1ClassBreakInfos(992.4228,
                                314.3887),
                        new AuthoringInfoField1ClassBreakInfos(980.5654,
                                743.3925),
                        new AuthoringInfoField1ClassBreakInfos(974.5067,
                                649.5030)],
                            "debitis",
                            "a",
                            "ea"),
                        ["rerum",
                            "hic",
                            "itaque"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "qui",
                        true,
                    LengthUnit.Feet,
                        151.7501,
                        183.1200,
                        983.0055,
                        137.0638));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "et",
                    "explicabo",
                    "distinctio");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2022, 6, 3, 4, 9, 1),
                    new DateTime(2001, 10, 10, 8, 30, 15));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("nobis",
                    "asperiores",
                new TimeExtent(new DateTime(2014, 4, 25, 8, 46, 8),
                        new DateTime(2014, 8, 12, 0, 16, 0)),
                new TimeInterval(TemporalTime.Milliseconds,
                        25.2996),
                    [new DateTime(2010, 9, 25, 9, 20, 41),
                        new DateTime(2018, 2, 9, 22, 8, 18),
                        new DateTime(2012, 3, 5, 19, 20, 15)],
                    "Asia/Riyadh",
                    "aspernatur");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    431.2759);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 11, 7, 17, 44, 5),
                    new DateTime(2000, 7, 1, 11, 16, 17));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
