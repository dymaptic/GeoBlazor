@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("rerum ut ex")"
                        Copyright="@("nisi")"
                        Opacity="@(0.4245)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Screen)"
                        DefinitionExpression="@("et")"
                        Delimiter="@(CSVDelimiter.Comma)"
                        DisplayField="@("maiores")"
                        Effect="@(new Effect("aut",
                            33497230.5839))"
                        FullExtent="@(new Extent(-34.9739,
                                -43.7312,
                                -41.0968,
                                -21.9201,
                                48.1990,
                                166.8154,
                                607.0398,
                                960.0730,
                            new SpatialReference(9,
                                    "nihil",
                                    "occaecati",
                                    "delectus"),
                                true,
                                true))"
                        GeometryType="@("impedit")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("unde")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("ab")"
                        MaxScale="@(17005194.3111)"
                        MinScale="@(49695.9479)"
                        ObjectIdField="@("aliquam")"
                        OutFields="@(["quidem",
                            "consequatur",
                            "quibusdam"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(578.0278)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(5,
                                "itaque",
                                "fugit",
                                "quis"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(143.3780)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("aut")"
                            EndField="@("eligendi")"
                            Stops="@([new DateTime(2000, 3, 16, 19, 37, 42),
                                new DateTime(2017, 8, 23, 0, 47, 28),
                                new DateTime(2000, 9, 19, 8, 30, 24)])"
                            TimeZone="@("Pacific/Noumea")"
                            TrackIdField="@("sit")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Hours)"
                                Value="@(794.9256)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2001, 10, 9, 18, 34, 28))"
                                End="@(new DateTime(2023, 3, 11, 19, 19, 31))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2022, 1, 14, 1, 51, 38))"
                            End="@(new DateTime(2006, 9, 13, 17, 18, 51))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new AlgorithmicColorRamp(Algorithm.LabLch,
                                    new MapColor(173, 59, 115),
                                    new MapColor(61, 15, 196)),
                                    858.8876,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(856.7134,
                                            270.8177),
                                    new AuthoringInfoField1ClassBreakInfos(723.3361,
                                            955.7831),
                                    new AuthoringInfoField1ClassBreakInfos(51.2086,
                                            534.9581),
                                    new AuthoringInfoField1ClassBreakInfos(619.6060,
                                            842.1882)],
                                        "eius",
                                        "officiis",
                                        "et"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(32.6453,
                                            959.5961),
                                    new AuthoringInfoField1ClassBreakInfos(907.5160,
                                            755.8834),
                                    new AuthoringInfoField1ClassBreakInfos(273.3876,
                                            537.2840),
                                    new AuthoringInfoField1ClassBreakInfos(977.2785,
                                            522.3481)],
                                        "dolore",
                                        "reiciendis",
                                        "rerum"),
                                    ["provident",
                                        "minus"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "rerum",
                                    true,
                                LengthUnit.Meters,
                                    688.6878,
                                    693.3096,
                                    546.6860,
                                    983.0696))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("facilis")"
                            ApiKey="@("atque")"
                            AvgRating="@(617.0182)"
                            Categories="@(["architecto",
                                "accusantium"])"
                            Created="@(new DateTime(2020, 10, 16, 13, 40, 8))"
                            Culture="@("id")"
                            Description="@("rerum non dolore consequatur")"
                            Extent="@(new Extent(121.3809,
                                    -65.2475,
                                    -86.4143,
                                    -4.8383,
                                    845.1029,
                                    822.1917,
                                    453.7893,
                                    412.8629,
                                new SpatialReference(6,
                                        "excepturi",
                                        "laborum",
                                        "a"),
                                    true,
                                    true))"
                            GroupCategories="@(["consectetur",
                                "labore",
                                "tempora",
                                "qui"])"
                            LicenseInfo="@("vel")"
                            Modified="@(new DateTime(2001, 10, 6, 15, 44, 8))"
                            Name="@("id")"
                            NumComments="@(560.8578)"
                            NumRatings="@(82.8441)"
                            NumViews="@(541.8642)"
                            Owner="@("Evangeline Mueller")"
                            OwnerFolder="@("Buddy Rutherford")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Immediate,
                                    ["quis",
                                        "aut",
                                        "quod"],
                                    "corporis",
                                    "aut",
                                    "neque",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("sit")"
                            Screenshots="@(["nisi",
                                "molestiae",
                                "est",
                                "sed"])"
                            Size="@(3)"
                            Snippet="@("possimus")"
                            Tags="@(["nisi",
                                "distinctio",
                                "delectus"])"
                            Title="@("necessitatibus ullam a")"
                            TypeKeywords="@(["cumque",
                                "ab",
                                "qui",
                                "voluptate"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("commodi exercitationem dolores")"
                            StringContent="@("harum")"
                            OutFields="@(["est",
                                "illum",
                                "voluptatibus",
                                "sit"])"
                            FieldInfos="@([new FieldInfo("password",
                                    "placeat",
                                    "non",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("name",
                                    "ullam",
                                    "sequi",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("title",
                                    "iure",
                                    "vitae",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("avatar",
                                    "cupiditate",
                                    "hic",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new TextPopupContent("dolore ipsa aut")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "id",
                                    "quae facilis eius",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "name",
                                    "laborum illum enim",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("et non sed",
                                    "https://picsum.photos/640/480/?image=189",
                                    "e50d3199-22ed-685a-0ba3-4366792badc8",
                                    () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "numquam"),
                            new ActionButton("voluptas similique et",
                                    "https://picsum.photos/640/480/?image=129",
                                    "c848d639-aa40-8f74-a874-02d537566fd1",
                                    () => { Console.WriteLine("illo"); return Task.CompletedTask; },
                                    "phone",
                                    true,
                                    true,
                                    true,
                                    "cupiditate"),
                            new ActionToggle("sint quae delectus",
                                    "32c3d67c-6dba-fffa-df60-fbf87ee1a7f1",
                                    () => { Console.WriteLine("repudiandae"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "id",
                                    "iste"),
                            new ActionToggle("asperiores placeat officia",
                                    "92e87962-bdfc-0819-b531-d53177e36205",
                                    () => { Console.WriteLine("nesciunt"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "repudiandae")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("ad")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("dolore")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowLeft)"
                            LabelExpression="@("delectus")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(44286057.3783)"
                            MinScale="@(5627.5528)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(662.0739))"
                            Symbol="@(new TextSymbol("exercitationem sapiente aspernatur",
                                new MapColor(210, 191, 4),
                                new MapColor(82, 11, 68),
                                    new Dimension(551.9085),
                                new MapFont(new Dimension(22.4393),
                                        "Courier New",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bolder,
                                    TextDecoration.Underline),
                                    533.8125,
                                new MapColor(165, 38, 39),
                                new MapColor(25, 221, 194),
                                    177.0525,
                                HorizontalAlignment.Left,
                                    true,
                                    535.5264,
                                    new Dimension(467.8092),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <Field 
                            Name="@("createdAt")"
                            Alias="@("esse")"
                            Description="@("explicabo consequatur voluptatem aut fugit assumenda")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "autem" })"
                            ValueType="@(FieldValueType.None)"
                            Domain="@(new InheritedDomain("comment"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("dolorem",
                                21442084.8110),
                                new Effect("cumque",
                                    4023922.3367)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(716.4415,
                                new Extent(90.3839,
                                        -137.9231,
                                        49.2328,
                                        71.5150,
                                        534.2777,
                                        43.6887,
                                        278.3283,
                                        837.1278,
                                    new SpatialReference(9,
                                            "ipsum",
                                            "dolores",
                                            "ipsum"),
                                        true,
                                        true),
                                    [8,
                                        2,
                                        1],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2018, 8, 7, 14, 10, 32),
                                        new DateTime(2009, 2, 9, 21, 24, 1)),
                                    QueryUnits.NauticalMiles,
                                    "1 = 1"))"
                            IncludedEffect="@([new Effect("quas",
                                14012605.7505),
                                new Effect("atque",
                                    28489656.9472),
                                new Effect("nobis",
                                    41473700.5000)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                                    "eos doloribus velit"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(212.1970)"
                            Unit="@(ElevationUnit.Yards)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["explicabo",
                    "ullam",
                    "ullam"],
                    ["group",
                        "avatar",
                        "title",
                        "id"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("comment");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("status",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Extent(160.7562,
                            -136.4156,
                            15.4824,
                            -44.7136,
                            913.5397,
                            107.0128,
                            199.6268,
                            263.4271,
                        new SpatialReference(7,
                                "cumque",
                                "velit",
                                "eos"),
                            true,
                            true),
                    new TextSymbol("ab mollitia magni",
                        new MapColor(159, 112, 237),
                        new MapColor(124, 48, 178),
                            new Dimension(860.9793),
                        new MapFont(new Dimension(435.7377),
                                "Bookman",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            877.7448,
                        new MapColor(6, 80, 209),
                        new MapColor(246, 182, 81),
                            407.8817,
                        HorizontalAlignment.Right,
                            true,
                            452.3182,
                            new Dimension(261.7096),
                            true),
                    new PopupTemplate("neque autem explicabo",
                            "placeat",
                            ["deserunt",
                                "adipisci",
                                "totam",
                                "labore"],
                        [new FieldInfo("name",
                                "ab",
                                "ducimus",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.DayShortMonthYearShortTime24),
                                true,
                                true,
                            StatisticType.Stddev),
                        new FieldInfo("createdAt",
                                "minima",
                                "rerum",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.ShortDateShortTime24),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("email",
                                "et",
                                "quis",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.DayShortMonthYearLongTime),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("status",
                                "ut",
                                "sit",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongDateLongTime24),
                                true,
                                true,
                            StatisticType.Var)],
                        [new MediaPopupContent("sed quae mollitia",
                                "in ullam deleniti aperiam dignissimos sequi nesciunt",
                            [new LineChartMediaInfo("numquam enim ut",
                                    "assumenda",
                                    "molestiae iste inventore",
                                new ChartMediaInfoValue(["non",
                                        "architecto",
                                        "eum",
                                        "dolor"],
                                        "culpa",
                                        "ipsum",
                                    [new ChartMediaInfoValueSeries("id",
                                            "unde",
                                            987.2619),
                                    new ChartMediaInfoValueSeries("email",
                                            "veritatis",
                                            512.6913),
                                    new ChartMediaInfoValueSeries("group",
                                            "magni",
                                            995.7217)],
                                    [new MapColor(50, 135, 189),
                                    new MapColor(48, 89, 45),
                                    new MapColor(60, 38, 121)])),
                            new ImageMediaInfo("necessitatibus assumenda quo",
                                    "consequatur",
                                    "consequatur est similique",
                                new ImageMediaInfoValue("https://adrian.org",
                                        "https://rita.org"),
                                    850.0568),
                            new BarChartMediaInfo("nesciunt sint totam",
                                    "in",
                                    "dolor maxime qui",
                                new ChartMediaInfoValue(["consequatur",
                                        "dolore",
                                        "consequatur"],
                                        "non",
                                        "ratione",
                                    [new ChartMediaInfoValueSeries("comment",
                                            "optio",
                                            981.4353),
                                    new ChartMediaInfoValueSeries("phone",
                                            "rerum",
                                            875.3195),
                                    new ChartMediaInfoValueSeries("password",
                                            "fugit",
                                            575.3427)],
                                    [new MapColor(123, 251, 27),
                                    new MapColor(161, 250, 16)]))],
                                6),
                        new RelationshipPopupContent("fugiat blanditiis omnis",
                                "temporibus non doloremque et nobis nemo labore",
                                9,
                                "alias",
                            [new RelatedRecordsInfoFieldOrder("quas",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("ut",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("nostrum",
                                OrderBy.Asc)],
                                5),
                        new MediaPopupContent("itaque nulla rerum",
                                "numquam enim nihil aliquam omnis placeat",
                            [new ImageMediaInfo("natus est placeat",
                                    "quia",
                                    "aut incidunt perferendis",
                                new ImageMediaInfoValue("http://sofia.net",
                                        "http://fernando.name"),
                                    291.6296),
                            new LineChartMediaInfo("consectetur tenetur enim",
                                    "sed",
                                    "hic dolorem eum",
                                new ChartMediaInfoValue(["accusantium",
                                        "aut"],
                                        "sunt",
                                        "quia",
                                    [new ChartMediaInfoValueSeries("category",
                                            "est",
                                            425.9807),
                                    new ChartMediaInfoValueSeries("group",
                                            "voluptatem",
                                            364.9723),
                                    new ChartMediaInfoValueSeries("status",
                                            "odio",
                                            904.0485),
                                    new ChartMediaInfoValueSeries("phone",
                                            "id",
                                            934.6780)],
                                    [new MapColor(227, 253, 226),
                                    new MapColor(219, 6, 25),
                                    new MapColor(187, 50, 59),
                                    new MapColor(219, 106, 53)])),
                            new LineChartMediaInfo("animi odio aliquam",
                                    "mollitia",
                                    "natus expedita ipsa",
                                new ChartMediaInfoValue(["tenetur",
                                        "velit"],
                                        "numquam",
                                        "earum",
                                    [new ChartMediaInfoValueSeries("updatedAt",
                                            "aut",
                                            422.8071),
                                    new ChartMediaInfoValueSeries("title",
                                            "illo",
                                            150.2898),
                                    new ChartMediaInfoValueSeries("title",
                                            "quis",
                                            192.7192),
                                    new ChartMediaInfoValueSeries("password",
                                            "distinctio",
                                            397.8337)],
                                    [new MapColor(206, 203, 52)]))],
                                2),
                        new FieldsPopupContent([new FieldInfo("category",
                                    "et",
                                    "placeat",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("title",
                                    "sit",
                                    "adipisci",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("id",
                                    "officia",
                                    "a",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("email",
                                    "ad",
                                    "rerum",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "aut consequuntur et perspiciatis in commodi",
                                "sed doloribus eligendi")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "password",
                                "vel sint ipsa",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "id",
                                "iusto explicabo praesentium",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "comment",
                                "explicabo voluptatum quaerat",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("aliquam rem consequatur",
                                "https://picsum.photos/640/480/?image=973",
                                "469cd308-10bc-07d3-3fba-8d4003bee71c",
                                () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "reiciendis"),
                        new ActionButton("id a eius",
                                "https://picsum.photos/640/480/?image=351",
                                "3bc40167-ec60-0e34-e0d1-ede6877dcee1",
                                () => { Console.WriteLine("cupiditate"); return Task.CompletedTask; },
                                "status",
                                true,
                                true,
                                true,
                                "cupiditate")]),
                        new AttributesDictionary(),
                        true,
                        "porro",
                        "quia",
                        new GraphicOrigin(Guid.NewGuid(),
                            "omnis",
                            6))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([1,
                    6],
                    true,
                    125.9535,
                    474.1948,
                    "8.2.7.6",
                new Extent(-125.4043,
                        -166.3073,
                        83.1961,
                        36.1763,
                        950.8654,
                        277.1730,
                        502.5936,
                        797.8061,
                    new SpatialReference(6,
                            "voluptatem",
                            "dolore",
                            "aut"),
                        true,
                        true),
                    1,
                    ["dolores",
                        "ea",
                        "at"],
                    "quia",
                    new DateTime(2022, 6, 18, 8, 50, 11),
                    982.5950,
                    5,
                    "culpa",
                    4),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([1,
                    7,
                    2],
                    true,
                    482.9995,
                    282.4472,
                    "7.7.1.5",
                new Polyline([new MapPath([new MapPoint([484.1039,
                            124.5576,
                            976.8784]),
                        new MapPoint([251.5827,
                            600.8925]),
                        new MapPoint([673.3921,
                            872.5344,
                            312.4178]),
                        new MapPoint([679.9396,
                            51.0881])]),
                        new MapPath([new MapPoint([761.7749,
                                200.1899]),
                            new MapPoint([696.5865,
                                271.3557,
                                849.2493,
                                177.8975]),
                            new MapPoint([928.3015,
                                295.2341,
                                836.9198])]),
                        new MapPath([new MapPoint([381.6757,
                                610.2284]),
                            new MapPoint([451.1554,
                                408.1852,
                                772.2224,
                                735.6809]),
                            new MapPoint([492.2716,
                                391.4025,
                                941.4732]),
                            new MapPoint([631.8058,
                                886.7813])]),
                        new MapPath([new MapPoint([937.3651,
                                235.5519]),
                            new MapPoint([37.0200,
                                655.7805]),
                            new MapPoint([464.8265,
                                907.2505])])],
                    new SpatialReference(8,
                            "perspiciatis",
                            "perferendis",
                            "fugit"),
                        true,
                        true),
                    8,
                    ["quia",
                        "rerum",
                        "explicabo"],
                    "excepturi",
                    new DateTime(2015, 9, 14, 22, 24, 51),
                    817.2943,
                    4,
                    "nesciunt",
                    9),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([1,
                    6,
                    4],
                    true,
                    760.5784,
                    729.0002,
                    "4.9.0.7",
                new Point(-177.3975,
                        -77.4198,
                        -168.8742,
                        89.9249,
                        337.8787,
                    new SpatialReference(9,
                            "consectetur",
                            "et",
                            "eum"),
                        true,
                        true,
                        228.2738),
                    3,
                    ["et",
                        "accusantium",
                        "eaque"],
                    "eius",
                    new DateTime(2018, 8, 14, 2, 2, 49),
                    159.0214,
                    5,
                    "incidunt",
                    2),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([4,
                    7,
                    9],
                    true,
                    698.0723,
                    176.4743,
                    "5.8.8.5",
                new Point(-135.8920,
                        -9.3446,
                        24.4314,
                        22.2037,
                        173.3481,
                    new SpatialReference(8,
                            "rerum",
                            "amet",
                            "nisi"),
                        true,
                        true,
                        365.9469),
                    3,
                    ["quis",
                        "laborum"],
                    "architecto",
                    new DateTime(2004, 3, 1, 0, 6, 46),
                    649.0124,
                    7,
                    "qui",
                    3),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Color;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("ut incidunt consequatur",
                    "voluptatem",
                    ["veritatis",
                        "voluptatem",
                        "voluptas"],
                [new FieldInfo("avatar",
                        "consequatur",
                        "dolores",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDateShortTime),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("title",
                        "illo",
                        "exercitationem",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongDateLongTime24),
                        true,
                        true,
                    StatisticType.Sum)],
                [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "mollitia",
                            "corporis iusto officiis")),
                new MediaPopupContent("fugiat numquam in",
                        "aut quia debitis quia ipsum nam consequuntur",
                    [new ImageMediaInfo("quo sit sint",
                            "inventore",
                            "iusto nihil vel",
                        new ImageMediaInfoValue("https://triston.name",
                                "https://alek.com"),
                            974.6609),
                    new LineChartMediaInfo("eos praesentium sequi",
                            "ea",
                            "molestias nihil possimus",
                        new ChartMediaInfoValue(["itaque",
                                "voluptatem",
                                "quia",
                                "aperiam"],
                                "dolor",
                                "quibusdam",
                            [new ChartMediaInfoValueSeries("email",
                                    "et",
                                    995.1693),
                            new ChartMediaInfoValueSeries("phone",
                                    "quam",
                                    902.8548)],
                            [new MapColor(30, 159, 45),
                            new MapColor(145, 175, 101),
                            new MapColor(79, 150, 111)]))],
                        3),
                new AttachmentsPopupContent("reprehenderit est vel",
                        "qui quis illum dignissimos excepturi",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "password",
                        "et et omnis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "phone",
                        "quo optio possimus",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("non excepturi quas",
                        "https://picsum.photos/640/480/?image=1046",
                        "39bb0f38-af01-37e7-d178-ae4660cdf8ad",
                        () => { Console.WriteLine("illum"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "eos"),
                new ActionButton("praesentium at nostrum",
                        "https://picsum.photos/640/480/?image=594",
                        "a748ec78-63c7-baac-b6bf-2140d03da5bc",
                        () => { Console.WriteLine("molestias"); return Task.CompletedTask; },
                        "phone",
                        true,
                        true,
                        true,
                        "reprehenderit")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Population / $feature.Area;",
                        "ut excepturi qui"),
                ElevationInfoMode.RelativeToGround,
                    668.6827,
                ElevationUnit.UsFeet);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("sint",
                    44161156.9073)],
                    true,
                new FeatureFilter(326.3693,
                    new Polygon([new MapPath([new MapPoint([334.7841,
                                975.8663,
                                491.9452]),
                            new MapPoint([15.2793,
                                884.3722,
                                325.6713,
                                892.1996]),
                            new MapPoint([841.7434,
                                659.8137])]),
                            new MapPath([new MapPoint([250.6506,
                                    791.9970]),
                                new MapPoint([809.8081,
                                    825.8943,
                                    643.0208,
                                    834.4121]),
                                new MapPoint([54.3595,
                                    437.9456])]),
                            new MapPath([new MapPoint([747.5369,
                                    415.0295,
                                    806.6686]),
                                new MapPoint([504.3334,
                                    223.6093,
                                    170.5275]),
                                new MapPoint([150.7379,
                                    11.1036,
                                    694.4029])])],
                        new SpatialReference(2,
                                "ut",
                                "molestias",
                                "odit"),
                        new Point(-12.5885,
                                70.2981,
                                -135.1325,
                                44.7892,
                                286.8329,
                            new SpatialReference(8,
                                    "suscipit",
                                    "facere",
                                    "sit"),
                                true,
                                true,
                                101.1350),
                            true,
                            true,
                            true),
                        [8,
                            7,
                            1,
                            1],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2009, 3, 15, 1, 26, 2),
                            new DateTime(2016, 9, 23, 15, 4, 55)),
                        QueryUnits.UsNauticalMiles,
                        "Age > 21"),
                    [new Effect("eligendi",
                        6229732.5043),
                        new Effect("eveniet",
                            48639764.8464),
                        new Effect("dolorum",
                            1635379.7246)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "avatar",
                    "omnis",
                    "neque consequatur dolor aspernatur qui maxime",
                    2,
                    true,
                    true,
                    new { Value = "quia" },
                FieldValueType.NameOrTitle,
                new RangeDomain("aut",
                        "unde",
                        "category")),
            new Field(default,
                    "name",
                    "illo",
                    "qui sit aut ut labore natus aut",
                    8,
                    true,
                    true,
                    new { Value = "voluptatem" },
                FieldValueType.DateAndTime,
                new InheritedDomain("group")),
            new Field(default,
                    "comment",
                    "odit",
                    "maxime itaque sint error sunt",
                    9,
                    true,
                    true,
                    new { Value = "eaque" },
                FieldValueType.PercentageOrRatio,
                new InheritedDomain("updatedAt")),
            new Field(default,
                    "name",
                    "praesentium",
                    "et nihil quasi consequatur distinctio eum",
                    8,
                    true,
                    true,
                    new { Value = "enim" },
                FieldValueType.Measurement,
                new RangeDomain("qui",
                        "aliquam",
                        "comment"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-161.2916,
                    -77.0140,
                    87.4510,
                    2.3154,
                    960.1097,
                    174.6226,
                    140.2895,
                    240.1984,
                new SpatialReference(3,
                        "quas",
                        "voluptas",
                        "iure"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveStart,
                    "est",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    20557982.6438,
                    40900.1742,
                    true,
                    new Dimension(934.4518),
                new TextSymbol("minus ipsum et",
                    new MapColor(131, 153, 223),
                    new MapColor(229, 63, 135),
                        new Dimension(385.9168),
                    new MapFont(new Dimension(100.2655),
                            "Bookman",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        288.0296,
                    new MapColor(196, 199, 76),
                    new MapColor(31, 95, 3),
                        471.2927,
                    HorizontalAlignment.Right,
                        true,
                        38.6470,
                        new Dimension(177.4418),
                        true),
                    true,
                    "Street = '123 Main St.'"),
            new Label(LabelPlacement.BelowLeft,
                    "quas",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    35727836.4342,
                    15995.4894,
                    true,
                    new Dimension(918.3830),
                new TextSymbol("id aliquam quis",
                    new MapColor(21, 225, 244),
                    new MapColor(200, 53, 151),
                        new Dimension(517.6757),
                    new MapFont(new Dimension(747.5506),
                            "Garamond",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        257.5771,
                    new MapColor(143, 28, 212),
                    new MapColor(134, 0, 104),
                        204.4846,
                    HorizontalAlignment.Right,
                        true,
                        493.7070,
                        new Dimension(513.0469),
                        true),
                    true,
                    "Name = 'John Doe'"),
            new Label(LabelPlacement.CenterEnd,
                    "incidunt",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    17365191.5808,
                    42108.6694,
                    true,
                    new Dimension(768.1528),
                new TextSymbol("praesentium beatae tempore",
                    new MapColor(21, 84, 69),
                    new MapColor(70, 20, 191),
                        new Dimension(83.8614),
                    new MapFont(new Dimension(328.6556),
                            "Times New Roman",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        917.6658,
                    new MapColor(67, 101, 249),
                    new MapColor(217, 172, 28),
                        193.3021,
                    HorizontalAlignment.Right,
                        true,
                        287.0020,
                        new Dimension(715.8727),
                        true),
                    true,
                    "1 = 1"),
            new Label(LabelPlacement.AboveAlong,
                    "odio",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    3801990.1800,
                    29661.6780,
                    true,
                    new Dimension(891.2940),
                new TextSymbol("et numquam vitae",
                    new MapColor(125, 104, 106),
                    new MapColor(234, 232, 28),
                        new Dimension(468.4840),
                    new MapFont(new Dimension(336.2092),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        535.4598,
                    new MapColor(109, 152, 175),
                    new MapColor(168, 240, 108),
                        317.6332,
                    HorizontalAlignment.Left,
                        true,
                        374.1443,
                        new Dimension(202.1695),
                        true),
                    true,
                    "Country = 'Canada'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("optio",
                SortOrder.Ascending,
                    "facilis")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "consequatur",
                    "enim",
                    289.8034,
                    ["est",
                        "autem"],
                    new DateTime(2015, 7, 27, 6, 24, 44),
                    "ut",
                    "maiores nemo totam dolorem quisquam accusamus",
                new Extent(51.4527,
                        38.8925,
                        -44.2738,
                        -41.2001,
                        345.3279,
                        652.5925,
                        154.6147,
                        975.4438,
                    new SpatialReference(1,
                            "qui",
                            "cumque",
                            "aut"),
                        true,
                        true),
                    ["odio",
                        "vero",
                        "qui",
                        "accusamus"],
                    "odit",
                    new DateTime(2003, 9, 26, 1, 36, 31),
                    "createdAt",
                    216.5917);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("et neque voluptatum",
                    new MapColor(102, 180, 19),
                    new MapColor(60, 70, 94),
                        new Dimension(578.8145),
                    new MapFont(new Dimension(380.3924),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.None),
                        613.5031,
                    new MapColor(182, 88, 93),
                    new MapColor(114, 91, 201),
                        541.5073,
                    HorizontalAlignment.Right,
                        true,
                        306.4851,
                        new Dimension(966.2060),
                        true),
                    "delectus",
                [new RotationVariable("porro",
                    Axis.Roll,
                    RotationType.Arithmetic,
                    new VisualVariableLegendOptions(true,
                            "modi labore quae"),
                        "inventore",
                        "et quia commodi"),
                new ColorVariable("odit",
                        "sequi",
                    [new ColorStop(876.6287,
                        new MapColor(181, 184, 191),
                            "nemo"),
                    new ColorStop(689.3496,
                        new MapColor(82, 47, 104),
                            "reiciendis")],
                    new VisualVariableLegendOptions(true,
                            "delectus unde quibusdam"),
                        "enim",
                        "ipsam molestias rem")],
                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(93, 10, 62),
                            new MapColor(56, 78, 80))]),
                        339.1091,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(933.1226,
                                365.6810)],
                            "rerum",
                            "repellat",
                            "et"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(705.3312,
                                292.0458),
                        new AuthoringInfoField1ClassBreakInfos(649.0477,
                                850.2380),
                        new AuthoringInfoField1ClassBreakInfos(481.1199,
                                392.6567),
                        new AuthoringInfoField1ClassBreakInfos(933.9903,
                                204.3262)],
                            "vitae",
                            "dolore",
                            "laborum"),
                        ["mollitia",
                            "pariatur",
                            "nemo",
                            "amet"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "tenetur",
                        true,
                    LengthUnit.Kilometers,
                        6.9224,
                        428.0311,
                        368.1314,
                        326.0387));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "repellat",
                    "voluptatum",
                    "ut");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2014, 1, 2, 0, 55, 44),
                    new DateTime(2014, 7, 5, 9, 11, 28));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aut",
                    "quam",
                new TimeExtent(new DateTime(2020, 7, 7, 17, 1, 8),
                        new DateTime(2008, 11, 26, 17, 45, 7)),
                new TimeInterval(TemporalTime.Weeks,
                        743.0889),
                    [new DateTime(2008, 10, 22, 17, 27, 38),
                        new DateTime(2019, 9, 16, 0, 15, 0),
                        new DateTime(2012, 9, 16, 14, 24, 23)],
                    "Europe/Skopje",
                    "est");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    652.7538);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2003, 5, 19, 6, 44, 55),
                    new DateTime(2013, 2, 26, 10, 1, 5));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
