@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("blanditiis sunt eos")"
                        Copyright="@("ipsam")"
                        Opacity="@(0.6584)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Multiply)"
                        DefinitionExpression="@("blanditiis")"
                        Delimiter="@(CSVDelimiter.Space)"
                        DisplayField="@("qui")"
                        Effect="@(new Effect("at",
                            211612.9847))"
                        GeometryType="@("labore")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("a")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("cum")"
                        MaxScale="@(18749999.8729)"
                        MinScale="@(33577.0498)"
                        ObjectIdField="@("beatae")"
                        OutFields="@(["error",
                            "est"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(816.9273)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Hours)"
                            Value="@(421.6058)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("quisquam")"
                            EndField="@("iste")"
                            Stops="@([new DateTime(2001, 10, 1, 20, 44, 34),
                                new DateTime(2010, 4, 27, 14, 1, 44)])"
                            TimeZone="@("Asia/Kolkata")"
                            TrackIdField="@("quas")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(430.7424)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2011, 10, 12, 6, 31, 43))"
                                End="@(new DateTime(2010, 7, 26, 15, 25, 37))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2005, 5, 18, 20, 53, 37))"
                            End="@(new DateTime(2013, 11, 13, 7, 58, 54))">
                        </TimeExtent>
                        <SpatialReference 
                            Wkid="@(2)"
                            ImageCoordinateSystem="@("consectetur")"
                            Wkt="@("blanditiis")"
                            Wkt2="@("et")">
                        </SpatialReference>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Manual,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(168, 163, 217),
                                        new MapColor(49, 213, 154)),
                                    new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(71, 148, 65),
                                        new MapColor(45, 51, 127))]),
                                    98.5542,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(137.8319,
                                            785.0125)],
                                        "deleniti",
                                        "unde",
                                        "nihil"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(395.8015,
                                            914.8442)],
                                        "sunt",
                                        "inventore",
                                        "enim"),
                                    ["hic",
                                        "optio"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "iusto",
                                    true,
                                LengthUnit.Decimeters,
                                    300.3530,
                                    545.2840,
                                    581.9293,
                                    20.5613))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("ea est est")"
                            StringContent="@("error")"
                            OutFields="@(["molestiae",
                                "qui"])"
                            FieldInfos="@([new FieldInfo("password",
                                    "ad",
                                    "expedita",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.LongDateLongTime),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("id",
                                    "eum",
                                    "tenetur",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new RelationshipPopupContent("inventore voluptatem provident",
                                    "itaque dolorem itaque aut",
                                    2,
                                    "molestias",
                                [new RelatedRecordsInfoFieldOrder("aliquid",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("distinctio",
                                    OrderBy.Desc)],
                                    7),
                            new AttachmentsPopupContent("voluptatem sed veniam",
                                    "possimus laborum asperiores",
                                    AttachmentsPopupContentDisplayType.Preview)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "avatar",
                                    "sed iste quia",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("quibusdam ut quia",
                                "https://picsum.photos/640/480/?image=957",
                                "91d4bad5-453f-8f0b-dd1c-47f750f39e1f",
                                () => { Console.WriteLine("tenetur"); return Task.CompletedTask; },
                                "status",
                                true,
                                true,
                                true,
                                "laborum"),
                                new ActionButton("velit ipsum dolorem",
                                    "https://picsum.photos/640/480/?image=496",
                                    "b5bb54f3-4d1e-8d8d-edde-54d1a5a1cf9c",
                                    () => { Console.WriteLine("beatae"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "et")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("qui")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("rerum")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AboveStart)"
                            LabelExpression="@("et")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(4906875.7040)"
                            MinScale="@(11048.1800)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(897.4902))"
                            Symbol="@(new TextSymbol("similique molestiae recusandae",
                                new MapColor(10, 64, 102),
                                new MapColor(57, 81, 141),
                                    new Dimension(658.1899),
                                new MapFont(new Dimension(538.5020),
                                        "Bookman",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.None),
                                    387.9436,
                                new MapColor(135, 207, 11),
                                new MapColor(9, 105, 64),
                                    125.5926,
                                HorizontalAlignment.Left,
                                    true,
                                    926.8610,
                                    new Dimension(354.5169),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <Extent 
                            Xmax="@(158.6573)"
                            Xmin="@(22.2386)"
                            Ymax="@(-64.2917)"
                            Ymin="@(17.3298)"
                            Zmax="@(205.7140)"
                            Zmin="@(265.2314)"
                            Mmax="@(381.2896)"
                            Mmin="@(327.4211)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("magni")"
                                Wkt="@("modi")"
                                Wkt2="@("sit")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("phone")"
                            Alias="@("odio")"
                            Description="@("aperiam dicta")"
                            Length="@(7)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "in" })"
                            ValueType="@(FieldValueType.NameOrTitle)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("deserunt",
                                37081315.2029)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(127.1138,
                                new Point(47.3593,
                                        20.6781,
                                        -73.2369,
                                        51.9562,
                                        776.8818,
                                    new SpatialReference(9,
                                            "aut",
                                            "enim",
                                            "dolorem"),
                                        true,
                                        true,
                                        616.1697),
                                    [8],
                                SpatialRelationship.Relation,
                                new TimeExtent(new DateTime(2012, 6, 22, 8, 3, 24),
                                        new DateTime(2013, 5, 12, 9, 30, 20)),
                                    QueryUnits.Feet,
                                    "Phone = '555-555-5555'"))"
                            IncludedEffect="@([new Effect("delectus",
                                13793173.1782),
                                new Effect("voluptatum",
                                    25945271.7819)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "totam odit qui"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(919.8934)"
                            Unit="@(ElevationUnit.Miles)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["nulla"],
                    ["createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("password");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("password",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Extent(88.6580,
                            -9.7965,
                            87.9393,
                            -36.4343,
                            928.6625,
                            577.9270,
                            984.4003,
                            661.3792,
                        new SpatialReference(1,
                                "qui",
                                "sed",
                                "ab"),
                            true,
                            true),
                    new TextSymbol("consequatur voluptates ducimus",
                        new MapColor(43, 101, 230),
                        new MapColor(194, 69, 121),
                            new Dimension(469.2306),
                        new MapFont(new Dimension(478.6111),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            796.5681,
                        new MapColor(218, 164, 133),
                        new MapColor(21, 137, 79),
                            953.3616,
                        HorizontalAlignment.Center,
                            true,
                            907.3006,
                            new Dimension(644.7330),
                            true),
                    new PopupTemplate("voluptas ipsam eligendi",
                            "praesentium",
                            ["expedita",
                                "sed"],
                        [new FieldInfo("createdAt",
                                "sed",
                                "adipisci",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new AttachmentsPopupContent("nobis sunt est",
                                "voluptas amet eius",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "title",
                                "voluptatum unde deleniti",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("repellendus delectus iure",
                                "https://picsum.photos/640/480/?image=870",
                                "dc55cd5b-e1e8-ed3c-05ca-0aa27bbd8d03",
                                () => { Console.WriteLine("nam"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "quidem")]),
                        new AttributesDictionary(),
                        true,
                        "soluta",
                        "qui",
                        new GraphicOrigin(Guid.NewGuid(),
                            "pariatur",
                            4))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([9,
                    4],
                    true,
                    209.1272,
                    431.9224,
                    "9.7.9.1",
                new Point(46.9901,
                        15.1620,
                        -91.7099,
                        -15.7966,
                        394.7634,
                    new SpatialReference(1,
                            "et",
                            "ut",
                            "provident"),
                        true,
                        true,
                        458.0177),
                    1,
                    ["quae"],
                    "alias",
                    new DateTime(2015, 10, 9, 15, 28, 50),
                    143.0014,
                    2,
                    "sed",
                    3),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([7],
                    true,
                    696.2645,
                    279.6073,
                    "2.9.1.0",
                new Extent(-76.1522,
                        17.3575,
                        12.6886,
                        -79.8437,
                        863.5983,
                        615.4140,
                        807.0540,
                        632.7976,
                    new SpatialReference(6,
                            "nihil",
                            "qui",
                            "eius"),
                        true,
                        true),
                    6,
                    ["enim"],
                    "voluptas",
                    new DateTime(2020, 1, 24, 22, 23, 45),
                    808.7924,
                    6,
                    "eum",
                    7),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([8],
                    true,
                    865.5677,
                    472.5321,
                    "6.8.5.0",
                new Polygon([new MapPath([new MapPoint([339.6268,
                            826.3684]),
                        new MapPoint([716.0610,
                            438.0597])])],
                    new SpatialReference(2,
                            "qui",
                            "et",
                            "omnis"),
                    new Point(-134.7531,
                            8.7685,
                            -173.4681,
                            87.2737,
                            890.1499,
                        new SpatialReference(7,
                                "consequatur",
                                "sit",
                                "dolores"),
                            true,
                            true,
                            536.9556),
                        true,
                        true,
                        true),
                    7,
                    ["odit"],
                    "velit",
                    new DateTime(2020, 10, 14, 19, 3, 17),
                    619.2182,
                    8,
                    "fuga",
                    1),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([4],
                    true,
                    834.6691,
                    357.1504,
                    "8.1.2.4",
                new Point(9.4090,
                        -59.9224,
                        -103.5623,
                        47.7063,
                        178.2441,
                    new SpatialReference(9,
                            "quisquam",
                            "culpa",
                            "est"),
                        true,
                        true,
                        489.8338),
                    5,
                    ["impedit",
                        "officiis"],
                    "aut",
                    new DateTime(2004, 10, 22, 3, 9, 38),
                    172.0665,
                    4,
                    "fuga",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("dolorem numquam facilis",
                    "omnis",
                    ["qui"],
                [new FieldInfo("updatedAt",
                        "autem",
                        "molestiae",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongDate),
                        true,
                        true,
                    StatisticType.Max)],
                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                            "ut",
                            "et laudantium eveniet"))],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "password",
                        "tenetur pariatur saepe",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "token",
                        "eveniet quia incidunt",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("at accusamus quia",
                        "https://picsum.photos/640/480/?image=438",
                        "444245c1-571c-6dca-64f9-47fb6a7e77c3",
                        () => { Console.WriteLine("non"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "repellendus"),
                        new ActionButton("repellat ut quis",
                            "https://picsum.photos/640/480/?image=980",
                            "6eeb8aa8-acd9-9eae-3352-f3a5f77b8fad",
                            () => { Console.WriteLine("sequi"); return Task.CompletedTask; },
                            "updatedAt",
                            true,
                            true,
                            true,
                            "voluptas")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "beatae itaque esse"),
                ElevationInfoMode.RelativeToGround,
                    515.6464,
                ElevationUnit.Decimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("maiores",
                    14957143.8963),
                    new Effect("minima",
                        42447711.1950)],
                    true,
                new FeatureFilter(266.5170,
                    new Point(-80.2641,
                            84.0672,
                            -16.7460,
                            -77.9138,
                            896.9232,
                        new SpatialReference(6,
                                "vel",
                                "deserunt",
                                "dolore"),
                            true,
                            true,
                            325.3716),
                        [1,
                            7],
                    SpatialRelationship.Overlaps,
                    new TimeExtent(new DateTime(2010, 11, 20, 13, 44, 48),
                            new DateTime(2008, 7, 23, 16, 23, 17)),
                        QueryUnits.UsNauticalMiles,
                        "Age > 21"),
                    [new Effect("sit",
                        39430549.0711)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "createdAt",
                    "aliquid",
                    "laborum culpa tenetur",
                    7,
                    true,
                    true,
                    new { Value = "fugiat" },
                FieldValueType.Binary,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "name",
                    "ut",
                    "officiis veniam porro harum",
                    3,
                    true,
                    true,
                    new { Value = "voluptate" },
                FieldValueType.PercentageOrRatio,
                    new CodedValueDomain<string>())];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(161.5135,
                    -149.7526,
                    34.7188,
                    -89.0800,
                    540.2028,
                    345.8307,
                    73.6045,
                    66.6352,
                new SpatialReference(1,
                        "qui",
                        "cupiditate",
                        "harum"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterAlong,
                    "eum",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    6653905.9968,
                    42358.0128,
                    true,
                    new Dimension(845.0980),
                new TextSymbol("nemo ut ut",
                    new MapColor(80, 92, 243),
                    new MapColor(70, 220, 145),
                        new Dimension(90.2763),
                    new MapFont(new Dimension(516.6590),
                            "Bookman",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        257.7335,
                    new MapColor(168, 156, 68),
                    new MapColor(92, 167, 117),
                        78.1023,
                    HorizontalAlignment.Center,
                        true,
                        640.4698,
                        new Dimension(785.1479),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("blanditiis",
                SortOrder.Descending,
                    "non"),
            new OrderedLayerOrderBy("fuga",
                SortOrder.Descending,
                    "id")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("odit quidem repudiandae",
                    new MapColor(103, 171, 14),
                    new MapColor(180, 118, 79),
                        new Dimension(162.7483),
                    new MapFont(new Dimension(409.3455),
                            "Verdana",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.None),
                        784.0386,
                    new MapColor(176, 42, 73),
                    new MapColor(244, 129, 9),
                        15.5109,
                    HorizontalAlignment.Left,
                        true,
                        124.5920,
                        new Dimension(746.9821),
                        true),
                    "repellat",
                [new RotationVariable("in",
                    Axis.Tilt,
                    RotationType.Arithmetic,
                    new VisualVariableLegendOptions(true,
                            "beatae sed eaque"),
                        "molestiae",
                        "quae dolore et"),
                new RotationVariable("consectetur",
                    Axis.Roll,
                    RotationType.Geographic,
                    new VisualVariableLegendOptions(true,
                            "aut illum nemo"),
                        "aut",
                        "rem ut porro")],
                new AuthoringInfo(ClassificationMethod.EqualInterval,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                            new MapColor(253, 53, 171),
                            new MapColor(44, 56, 48)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(183, 248, 187),
                            new MapColor(30, 29, 208))]),
                        175.1911,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(900.9462,
                                216.7136)],
                            "deserunt",
                            "sed",
                            "non"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(448.6455,
                                637.4285),
                        new AuthoringInfoField1ClassBreakInfos(41.1863,
                                565.7676)],
                            "fuga",
                            "ipsam",
                            "dolores"),
                        ["adipisci",
                            "praesentium"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "dolorum",
                        true,
                    LengthUnit.Inches,
                        813.8349,
                        987.9941,
                        563.0500,
                        397.1134));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "omnis",
                    "eos",
                    "error");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2005, 10, 15, 4, 27, 6),
                    new DateTime(2009, 4, 14, 18, 20, 26));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("voluptatem",
                    "nesciunt",
                new TimeExtent(new DateTime(2022, 4, 1, 21, 0, 15),
                        new DateTime(2015, 6, 14, 12, 31, 0)),
                new TimeInterval(TemporalTime.Months,
                        368.4380),
                    [new DateTime(2023, 5, 27, 13, 58, 55),
                        new DateTime(2005, 9, 16, 0, 9, 37)],
                    "America/La_Paz",
                    "voluptatibus");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    201.8912);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 10, 25, 13, 43, 36),
                    new DateTime(2007, 9, 11, 0, 8, 25));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
