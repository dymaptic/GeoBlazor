@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("voluptas ut et")"
                        Copyright="@("et")"
                        Opacity="@(0.2785)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Lighter)"
                        DefinitionExpression="@("laudantium")"
                        Delimiter="@(CSVDelimiter.Semicolon)"
                        DisplayField="@("voluptatum")"
                        Effect="@(new Effect("debitis",
                            7256073.1410))"
                        FullExtent="@(new Extent(133.9477,
                                -49.9601,
                                35.6066,
                                46.4104,
                                643.5732,
                                762.5304,
                                936.9183,
                                412.4840,
                            new SpatialReference(7,
                                    "sed",
                                    "vero",
                                    "labore"),
                                true,
                                true))"
                        GeometryType="@("qui")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("repudiandae")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("sed")"
                        MaxScale="@(43143903.0154)"
                        MinScale="@(46263.4105)"
                        ObjectIdField="@("vitae")"
                        OutFields="@(["ipsam",
                            "earum",
                            "ut"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(688.2362)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(8,
                                "non",
                                "dolores",
                                "voluptatem"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(392.4941)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("non")"
                            EndField="@("odit")"
                            Stops="@([new DateTime(2008, 1, 25, 21, 20, 14),
                                new DateTime(2017, 4, 11, 16, 33, 27)])"
                            TimeZone="@("Europe/Vilnius")"
                            TrackIdField="@("architecto")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Years)"
                                Value="@(134.3393)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2011, 6, 7, 9, 21, 43))"
                                End="@(new DateTime(2009, 10, 12, 12, 30, 53))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2011, 11, 11, 13, 9, 46))"
                            End="@(new DateTime(2001, 11, 6, 10, 29, 6))">
                        </TimeExtent>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(139, 153, 198),
                                        new MapColor(230, 27, 96)),
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(146, 78, 80),
                                        new MapColor(17, 211, 250))]),
                                    571.6516,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(432.0967,
                                            203.4644)],
                                        "ut",
                                        "pariatur",
                                        "quas"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(334.0345,
                                            547.0090)],
                                        "in",
                                        "totam",
                                        "consequuntur"),
                                    ["eum",
                                        "suscipit",
                                        "nisi"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "nesciunt",
                                    true,
                                LengthUnit.Kilometers,
                                    227.7817,
                                    735.3095,
                                    543.4104,
                                    209.3984))">
                        </UniqueValueRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("ut")"
                            ApiKey="@("qui")"
                            AvgRating="@(632.3225)"
                            Categories="@(["adipisci",
                                "tempora",
                                "cum",
                                "iure"])"
                            Created="@(new DateTime(2009, 11, 12, 20, 8, 26))"
                            Culture="@("sint")"
                            Description="@("ut vel voluptatem voluptas")"
                            Extent="@(new Extent(-31.1772,
                                    59.7776,
                                    -71.6198,
                                    43.8764,
                                    501.8872,
                                    108.8192,
                                    697.1229,
                                    904.7860,
                                new SpatialReference(1,
                                        "qui",
                                        "a",
                                        "deleniti"),
                                    true,
                                    true))"
                            GroupCategories="@(["aut",
                                "quia",
                                "eligendi",
                                "amet"])"
                            LicenseInfo="@("consequuntur")"
                            Modified="@(new DateTime(2014, 10, 4, 8, 48, 15))"
                            Name="@("title")"
                            NumComments="@(182.7129)"
                            NumRatings="@(837.8135)"
                            NumViews="@(846.8099)"
                            Owner="@("Simeon Gutkowski")"
                            OwnerFolder="@("Elliot McCullough")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Immediate,
                                    ["quo",
                                        "animi",
                                        "quos",
                                        "illo"],
                                    "sapiente",
                                    "soluta",
                                    "et",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("sunt")"
                            Screenshots="@(["voluptatibus",
                                "est",
                                "est"])"
                            Size="@(8)"
                            Snippet="@("optio")"
                            Tags="@(["voluptas",
                                "eveniet"])"
                            Title="@("earum dolorem iste")"
                            TypeKeywords="@(["enim",
                                "corrupti"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("non molestiae atque")"
                            StringContent="@("officiis")"
                            OutFields="@(["omnis",
                                "dolores",
                                "sequi"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "esse",
                                    "quo",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("password",
                                    "cupiditate",
                                    "esse",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new AttachmentsPopupContent("quo occaecati aut",
                                    "earum ullam dolorem consequuntur provident",
                                    AttachmentsPopupContentDisplayType.Preview)])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "token",
                                    "aut id rerum",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("aut quos tempora",
                                    "https://picsum.photos/640/480/?image=936",
                                    "ab520af4-b8a0-f28c-6171-c14c3ebfbafa",
                                    () => { Console.WriteLine("a"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "et")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("quae")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("et")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowStart)"
                            LabelExpression="@("dolorem")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(1102206.2536)"
                            MinScale="@(41563.3537)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(773.6320))"
                            Symbol="@(new TextSymbol("omnis provident dolorem",
                                new MapColor(142, 68, 8),
                                new MapColor(207, 47, 48),
                                    new Dimension(651.4277),
                                new MapFont(new Dimension(810.5457),
                                        "Verdana",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.None),
                                    563.4168,
                                new MapColor(44, 141, 102),
                                new MapColor(94, 151, 195),
                                    23.0250,
                                HorizontalAlignment.Right,
                                    true,
                                    311.2984,
                                    new Dimension(631.9762),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("1 = 1")">
                        </Label>
                        <Field 
                            Name="@("id")"
                            Alias="@("et")"
                            Description="@("repellat mollitia non fugiat quo")"
                            Length="@(1)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "illo" })"
                            ValueType="@(FieldValueType.Binary)"
                            Domain="@(new InheritedDomain("title"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("voluptas",
                                6899751.8900)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(660.4766,
                                new Polyline([new MapPath([new MapPoint([200.4547,
                                            137.2174,
                                            562.3463,
                                            527.6744]),
                                        new MapPoint([696.3697,
                                            218.2416,
                                            166.5474,
                                            331.1325])]),
                                        new MapPath([new MapPoint([877.8355,
                                                254.1213]),
                                            new MapPoint([996.0692,
                                                299.9955,
                                                156.0038]),
                                            new MapPoint([977.4405,
                                                568.2801]),
                                            new MapPoint([935.2027,
                                                501.4692,
                                                757.8321])])],
                                    new SpatialReference(9,
                                            "debitis",
                                            "mollitia",
                                            "consequatur"),
                                        true,
                                        true),
                                    [1,
                                        5,
                                        9],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2000, 10, 17, 11, 32, 13),
                                        new DateTime(2012, 11, 15, 8, 35, 12)),
                                    QueryUnits.Miles,
                                    "Phone = '555-555-5555'"))"
                            IncludedEffect="@([new Effect("ullam",
                                35395626.8846)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "magni officia adipisci"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(677.5962)"
                            Unit="@(ElevationUnit.Decimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["est",
                    "quas",
                    "fugit",
                    "animi"],
                    ["email",
                        "group",
                        "category",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("id");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("category",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([987.1247,
                                806.4039]),
                            new MapPoint([571.0169,
                                761.2284]),
                            new MapPoint([298.3022,
                                422.8378])]),
                            new MapPath([new MapPoint([974.8415,
                                    417.4975,
                                    154.3777]),
                                new MapPoint([921.0395,
                                    298.9452,
                                    648.9276,
                                    399.2525]),
                                new MapPoint([622.8511,
                                    450.5447,
                                    978.1838,
                                    491.1447]),
                                new MapPoint([919.6913,
                                    858.5043,
                                    285.1126,
                                    438.0756])]),
                            new MapPath([new MapPoint([406.2342,
                                    291.1127,
                                    513.0750]),
                                new MapPoint([72.6714,
                                    299.0423,
                                    644.4877])])],
                        new SpatialReference(7,
                                "illum",
                                "nisi",
                                "harum"),
                            true,
                            true),
                    new TextSymbol("temporibus velit distinctio",
                        new MapColor(110, 210, 172),
                        new MapColor(111, 153, 100),
                            new Dimension(300.3904),
                        new MapFont(new Dimension(454.3467),
                                "Arial",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            694.8616,
                        new MapColor(228, 82, 96),
                        new MapColor(2, 32, 183),
                            28.3273,
                        HorizontalAlignment.Center,
                            true,
                            382.0979,
                            new Dimension(520.4340),
                            true),
                    new PopupTemplate("est laborum in",
                            "non",
                            ["nisi",
                                "voluptatibus",
                                "itaque"],
                        [new FieldInfo("name",
                                "consectetur",
                                "aut",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.LongMonthDayYearLongTime24),
                                true,
                                true,
                            StatisticType.Max)],
                        [new AttachmentsPopupContent("quis dolorem illo",
                                "architecto eligendi et impedit voluptas reiciendis veniam",
                                AttachmentsPopupContentDisplayType.Auto),
                        new MediaPopupContent("ducimus ipsum enim",
                                "soluta distinctio velit laborum deserunt provident",
                            [new ColumnChartMediaInfo("distinctio exercitationem et",
                                    "quam",
                                    "suscipit fugit deleniti",
                                new ChartMediaInfoValue(["atque",
                                        "veniam"],
                                        "suscipit",
                                        "quas",
                                    [new ChartMediaInfoValueSeries("createdAt",
                                            "veniam",
                                            305.1678),
                                    new ChartMediaInfoValueSeries("category",
                                            "et",
                                            691.8671)],
                                    [new MapColor(115, 163, 215),
                                    new MapColor(197, 253, 126)])),
                            new BarChartMediaInfo("natus et doloribus",
                                    "sunt",
                                    "et culpa quasi",
                                new ChartMediaInfoValue(["placeat",
                                        "fugiat"],
                                        "recusandae",
                                        "corrupti",
                                    [new ChartMediaInfoValueSeries("name",
                                            "ratione",
                                            259.7159)],
                                    [new MapColor(124, 43, 87),
                                    new MapColor(50, 148, 37),
                                    new MapColor(231, 27, 233),
                                    new MapColor(192, 244, 98)])),
                            new BarChartMediaInfo("voluptatem rerum delectus",
                                    "voluptatem",
                                    "quasi voluptatem dolor",
                                new ChartMediaInfoValue(["numquam",
                                        "esse",
                                        "nulla",
                                        "ut"],
                                        "vitae",
                                        "dolor",
                                    [new ChartMediaInfoValueSeries("phone",
                                            "reprehenderit",
                                            68.9687),
                                    new ChartMediaInfoValueSeries("email",
                                            "et",
                                            181.5358),
                                    new ChartMediaInfoValueSeries("token",
                                            "distinctio",
                                            96.1965),
                                    new ChartMediaInfoValueSeries("token",
                                            "aut",
                                            87.8546)],
                                    [new MapColor(6, 78, 102),
                                    new MapColor(214, 33, 49),
                                    new MapColor(212, 156, 179)]))],
                                7),
                        new FieldsPopupContent([new FieldInfo("updatedAt",
                                    "illo",
                                    "mollitia",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("name",
                                    "itaque",
                                    "qui",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("token",
                                    "omnis",
                                    "aliquam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("email",
                                    "possimus",
                                    "fugiat",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Max)],
                                "ducimus qui atque iure aut qui",
                                "voluptate deleniti rerum"),
                        new MediaPopupContent("qui vitae inventore",
                                "nostrum incidunt earum itaque sunt",
                            [new BarChartMediaInfo("quos vel consectetur",
                                    "quisquam",
                                    "deserunt repellat et",
                                new ChartMediaInfoValue(["dolor",
                                        "harum"],
                                        "at",
                                        "qui",
                                    [new ChartMediaInfoValueSeries("category",
                                            "sed",
                                            284.7554),
                                    new ChartMediaInfoValueSeries("comment",
                                            "quam",
                                            523.6746)],
                                    [new MapColor(233, 200, 128),
                                    new MapColor(0, 253, 35),
                                    new MapColor(38, 224, 165)])),
                            new BarChartMediaInfo("et est doloremque",
                                    "ex",
                                    "dolorem enim quia",
                                new ChartMediaInfoValue(["et",
                                        "quidem",
                                        "veritatis"],
                                        "voluptas",
                                        "hic",
                                    [new ChartMediaInfoValueSeries("createdAt",
                                            "sit",
                                            702.2991),
                                    new ChartMediaInfoValueSeries("id",
                                            "vero",
                                            370.4392)],
                                    [new MapColor(102, 181, 243),
                                    new MapColor(244, 235, 247),
                                    new MapColor(137, 118, 109),
                                    new MapColor(17, 65, 241)])),
                            new LineChartMediaInfo("rerum quis et",
                                    "odio",
                                    "sint consequuntur praesentium",
                                new ChartMediaInfoValue(["illum",
                                        "ea",
                                        "quam"],
                                        "non",
                                        "cupiditate",
                                    [new ChartMediaInfoValueSeries("updatedAt",
                                            "quis",
                                            209.2901)],
                                    [new MapColor(227, 82, 217),
                                    new MapColor(98, 135, 214),
                                    new MapColor(38, 239, 64),
                                    new MapColor(121, 73, 116)]))],
                                4)],
                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "status",
                                "quidem in consectetur",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("perferendis quibusdam facere",
                                "https://picsum.photos/640/480/?image=897",
                                "b56334eb-b87f-a3b0-8474-146f840febe4",
                                () => { Console.WriteLine("consequuntur"); return Task.CompletedTask; },
                                "status",
                                true,
                                true,
                                true,
                                "nulla"),
                        new ActionButton("ut nihil et",
                                "https://picsum.photos/640/480/?image=814",
                                "80cd8749-6352-0810-6aeb-b11350173b81",
                                () => { Console.WriteLine("deserunt"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "omnis")]),
                        new AttributesDictionary(),
                        true,
                        "quod",
                        "at",
                        new GraphicOrigin(Guid.NewGuid(),
                            "perferendis",
                            2))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([6,
                    4,
                    9,
                    9],
                    true,
                    100.6658,
                    431.2223,
                    "7.2.9.2",
                new Polygon([new MapPath([new MapPoint([330.0184,
                            569.6975,
                            845.3285]),
                        new MapPoint([544.5380,
                            174.8305,
                            339.7575]),
                        new MapPoint([651.6971,
                            361.7454,
                            199.6073]),
                        new MapPoint([678.3436,
                            245.0728])])],
                    new SpatialReference(2,
                            "praesentium",
                            "alias",
                            "nemo"),
                    new Point(94.0693,
                            24.0560,
                            164.3302,
                            -82.5624,
                            560.2973,
                        new SpatialReference(7,
                                "distinctio",
                                "consequuntur",
                                "sed"),
                            true,
                            true,
                            437.0644),
                        true,
                        true,
                        true),
                    7,
                    ["dolor",
                        "sapiente",
                        "molestias"],
                    "placeat",
                    new DateTime(2001, 7, 20, 12, 26, 48),
                    785.5514,
                    2,
                    "dicta",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([7,
                    5,
                    5,
                    5],
                    true,
                    96.3514,
                    489.4741,
                    "9.4.7.0",
                new Point(-0.1025,
                        -61.7707,
                        16.4944,
                        -74.5699,
                        258.7155,
                    new SpatialReference(8,
                            "facere",
                            "aut",
                            "labore"),
                        true,
                        true,
                        779.7728),
                    3,
                    ["magni",
                        "error",
                        "eligendi"],
                    "odit",
                    new DateTime(2010, 8, 11, 19, 42, 57),
                    651.0966,
                    2,
                    "harum",
                    5),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([2,
                    8,
                    8],
                    true,
                    83.2479,
                    662.9883,
                    "6.5.7.1",
                new Point(14.1806,
                        38.2435,
                        37.0788,
                        61.5103,
                        799.9986,
                    new SpatialReference(9,
                            "veniam",
                            "animi",
                            "doloremque"),
                        true,
                        true,
                        63.9385),
                    3,
                    ["error",
                        "aut",
                        "optio",
                        "et"],
                    "nesciunt",
                    new DateTime(2001, 4, 11, 18, 40, 51),
                    442.2486,
                    8,
                    "est",
                    1),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([2,
                    5,
                    2,
                    1],
                    true,
                    62.6389,
                    467.7057,
                    "1.5.4.4",
                new Polygon([new MapPath([new MapPoint([993.4824,
                            644.8803,
                            993.8521,
                            624.4458]),
                        new MapPoint([681.5838,
                            926.6773,
                            470.7841])])],
                    new SpatialReference(2,
                            "tempora",
                            "est",
                            "velit"),
                    new Point(70.5918,
                            58.0740,
                            -26.0718,
                            -83.5408,
                            719.1118,
                        new SpatialReference(3,
                                "assumenda",
                                "sint",
                                "omnis"),
                            true,
                            true,
                            765.6063),
                        true,
                        true,
                        true),
                    4,
                    ["sit",
                        "quod",
                        "sunt",
                        "dolores"],
                    "dolorem",
                    new DateTime(2022, 8, 17, 12, 41, 8),
                    539.6084,
                    9,
                    "voluptates",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Screen;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("quisquam soluta eum",
                    "quis",
                    ["omnis",
                        "harum",
                        "earum",
                        "impedit"],
                [new FieldInfo("phone",
                        "illum",
                        "iusto",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.ShortDateLeLongTime24),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("title",
                        "ad",
                        "aut",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.ShortDateShortTime),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("phone",
                        "et",
                        "et",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDateShortTime),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("id",
                        "qui",
                        "ducimus",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Avg)],
                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "recusandae",
                            "et id quod")),
                new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                            "quia",
                            "consectetur ut magnam")),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "blanditiis",
                            "corporis blanditiis dolores")),
                new TextPopupContent("voluptate non nesciunt")],
                [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "password",
                        "voluptas voluptatum earum",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "createdAt",
                        "aut et reiciendis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "name",
                        "qui non autem",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("saepe reprehenderit laborum",
                        "https://picsum.photos/640/480/?image=392",
                        "7f130626-7322-e278-3d73-4a17e8522210",
                        () => { Console.WriteLine("tempora"); return Task.CompletedTask; },
                        "comment",
                        true,
                        true,
                        true,
                        "et")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                        "quia autem quisquam"),
                ElevationInfoMode.RelativeToGround,
                    865.0031,
                ElevationUnit.NauticalMiles);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("eius",
                    44592481.3152)],
                    true,
                new FeatureFilter(910.5303,
                    new Extent(132.2425,
                            -0.2350,
                            -17.9453,
                            31.2084,
                            284.5863,
                            639.7055,
                            42.0048,
                            584.6516,
                        new SpatialReference(3,
                                "dolorem",
                                "neque",
                                "cumque"),
                            true,
                            true),
                        [2,
                            5,
                            4,
                            3],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2005, 9, 15, 12, 50, 7),
                            new DateTime(2023, 8, 11, 15, 58, 48)),
                        QueryUnits.Feet,
                        "City = 'Toronto'"),
                    [new Effect("sint",
                        36566278.0922),
                        new Effect("est",
                            31457878.1997),
                        new Effect("magnam",
                            20825627.3113)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "repellat",
                    "vel doloribus et et dolores reprehenderit",
                    9,
                    true,
                    true,
                    new { Value = "ad" },
                FieldValueType.UniqueIdentifier,
                new InheritedDomain("phone")),
            new Field(default,
                    "phone",
                    "rerum",
                    "voluptates commodi quam et accusantium",
                    8,
                    true,
                    true,
                    new { Value = "eveniet" },
                FieldValueType.None,
                new InheritedDomain("status")),
            new Field(default,
                    "group",
                    "tempore",
                    "qui est repudiandae provident perferendis dolores aliquid",
                    8,
                    true,
                    true,
                    new { Value = "nisi" },
                FieldValueType.PercentageOrRatio,
                new RangeDomain("nihil",
                        "sit",
                        "name"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-100.2678,
                    -96.4141,
                    39.1020,
                    26.9645,
                    82.1612,
                    141.2016,
                    172.6286,
                    275.2788,
                new SpatialReference(1,
                        "et",
                        "eveniet",
                        "ut"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterAlong,
                    "vero",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    21637874.2711,
                    5003.0927,
                    true,
                    new Dimension(717.8472),
                new TextSymbol("esse molestiae enim",
                    new MapColor(81, 189, 82),
                    new MapColor(157, 81, 133),
                        new Dimension(39.9754),
                    new MapFont(new Dimension(577.8240),
                            "Times New Roman",
                        MapFontStyle.Oblique,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        532.9185,
                    new MapColor(214, 23, 37),
                    new MapColor(161, 101, 115),
                        903.8204,
                    HorizontalAlignment.Left,
                        true,
                        929.3414,
                        new Dimension(577.3479),
                        true),
                    true,
                    "Street = '123 Main St.'"),
            new Label(LabelPlacement.AboveAlong,
                    "aut",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    27882694.9913,
                    36268.6560,
                    true,
                    new Dimension(345.0484),
                new TextSymbol("iure sunt dicta",
                    new MapColor(47, 134, 151),
                    new MapColor(86, 7, 39),
                        new Dimension(362.1736),
                    new MapFont(new Dimension(714.1588),
                            "Georgia",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        511.9733,
                    new MapColor(17, 154, 32),
                    new MapColor(235, 206, 59),
                        512.7025,
                    HorizontalAlignment.Center,
                        true,
                        985.7240,
                        new Dimension(980.8280),
                        true),
                    true,
                    "Street = '123 Main St.'"),
            new Label(LabelPlacement.AboveLeft,
                    "non",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    34614350.7961,
                    37659.5037,
                    true,
                    new Dimension(832.4860),
                new TextSymbol("quasi repudiandae unde",
                    new MapColor(4, 135, 111),
                    new MapColor(219, 106, 209),
                        new Dimension(339.7700),
                    new MapFont(new Dimension(80.2442),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        280.7528,
                    new MapColor(46, 40, 163),
                    new MapColor(38, 210, 147),
                        605.8170,
                    HorizontalAlignment.Left,
                        true,
                        685.3398,
                        new Dimension(161.4219),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("aut",
                SortOrder.Ascending,
                    "quo"),
            new OrderedLayerOrderBy("veritatis",
                SortOrder.Descending,
                    "sapiente"),
            new OrderedLayerOrderBy("animi",
                SortOrder.Ascending,
                    "et")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "doloremque",
                    "et",
                    262.3977,
                    ["vel",
                        "qui",
                        "distinctio",
                        "aperiam"],
                    new DateTime(2022, 3, 10, 22, 46, 44),
                    "repudiandae",
                    "molestias earum ut et",
                new Extent(168.1813,
                        -37.4243,
                        83.7747,
                        -5.4725,
                        880.3499,
                        860.3015,
                        34.7804,
                        751.1198,
                    new SpatialReference(6,
                            "blanditiis",
                            "officiis",
                            "sit"),
                        true,
                        true),
                    ["totam",
                        "non",
                        "officiis",
                        "aperiam"],
                    "ullam",
                    new DateTime(2011, 5, 16, 6, 30, 42),
                    "group",
                    39.5553);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer([new UniqueValueInfo("autem",
                    new TextSymbol("rerum voluptas omnis",
                        new MapColor(152, 92, 164),
                        new MapColor(168, 231, 166),
                            new Dimension(46.7292),
                        new MapFont(new Dimension(504.8808),
                                "Courier New",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            816.7018,
                        new MapColor(86, 92, 169),
                        new MapColor(69, 55, 163),
                            786.2001,
                        HorizontalAlignment.Center,
                            true,
                            11.9668,
                            new Dimension(922.1335),
                            true),
                        "unde"),
                new UniqueValueInfo("doloremque",
                    new TextSymbol("et optio sapiente",
                        new MapColor(81, 242, 5),
                        new MapColor(100, 122, 77),
                            new Dimension(788.3252),
                        new MapFont(new Dimension(551.7693),
                                "Garamond",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.None),
                            680.1809,
                        new MapColor(63, 74, 24),
                        new MapColor(41, 188, 250),
                            988.7048,
                        HorizontalAlignment.Center,
                            true,
                            169.6563,
                            new Dimension(718.1331),
                            true),
                        "aperiam"),
                new UniqueValueInfo("qui",
                    new TextSymbol("quibusdam praesentium rerum",
                        new MapColor(162, 102, 170),
                        new MapColor(71, 136, 183),
                            new Dimension(120.8332),
                        new MapFont(new Dimension(55.9733),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            598.6391,
                        new MapColor(71, 5, 34),
                        new MapColor(190, 133, 82),
                            533.1093,
                        HorizontalAlignment.Center,
                            true,
                            704.2435,
                            new Dimension(935.0474),
                            true),
                        "tempore")],
                new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(145, 107, 24),
                            new MapColor(218, 26, 31))]),
                        250.8839,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(499.2176,
                                790.0127),
                        new AuthoringInfoField1ClassBreakInfos(424.9866,
                                295.8406),
                        new AuthoringInfoField1ClassBreakInfos(834.5204,
                                13.5093),
                        new AuthoringInfoField1ClassBreakInfos(210.6725,
                                506.0971)],
                            "repudiandae",
                            "nostrum",
                            "aut"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(789.4003,
                                912.1042),
                        new AuthoringInfoField1ClassBreakInfos(456.4666,
                                939.0229),
                        new AuthoringInfoField1ClassBreakInfos(721.9539,
                                324.6068)],
                            "aut",
                            "et",
                            "vel"),
                        ["a",
                            "iusto",
                            "explicabo",
                            "accusamus"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "quibusdam",
                        true,
                    LengthUnit.Meters,
                        174.8780,
                        93.4027,
                        90.4535,
                        129.6690),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0",
                    new Dimension(957.9133),
                    new Dimension(98.0942),
                    new Dimension(384.3615),
                    new Dimension(463.9117),
                    52.9620,
                    62.2471,
                    new Outline(new MapColor(175, 119, 142),
                        new Dimension(869.2730),
                        SimpleLineSymbolStyle.ShortDash,
                        Cap.Round,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(157, 27, 197),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Arrow),
                        352.8609),
                    new MapColor(247, 246, 25)),
                    "inventore",
                    new DefaultSymbol(),
                    "unde",
                    "pariatur",
                    "sapiente",
                    "quis",
                new UniqueValueRendererLegendOptions("quia aut reiciendis"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("dolor",
                        new TextSymbol("suscipit dolorem explicabo",
                            new MapColor(125, 217, 112),
                            new MapColor(220, 186, 47),
                                new Dimension(75.4652),
                            new MapFont(new Dimension(781.6561),
                                    "Bookman",
                                MapFontStyle.Oblique,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                385.2448,
                            new MapColor(78, 75, 48),
                            new MapColor(165, 131, 230),
                                207.6418,
                            HorizontalAlignment.Left,
                                true,
                                921.1814,
                                new Dimension(159.8637),
                                true),
                        [new UniqueValue("at",
                                "omnis",
                                "enim"),
                        new UniqueValue("fugit",
                                "et",
                                "vitae")])],
                        "similique"),
                new UniqueValueGroup([new UniqueValueClass("sit",
                        new TextSymbol("et quaerat architecto",
                            new MapColor(207, 181, 251),
                            new MapColor(240, 216, 199),
                                new Dimension(914.9329),
                            new MapFont(new Dimension(402.7552),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                612.1082,
                            new MapColor(31, 48, 72),
                            new MapColor(162, 165, 156),
                                181.3604,
                            HorizontalAlignment.Center,
                                true,
                                774.0325,
                                new Dimension(440.0187),
                                true),
                        [new UniqueValue("accusamus",
                                "enim",
                                "culpa")]),
                    new UniqueValueClass("quidem",
                        new TextSymbol("provident ipsam voluptatum",
                            new MapColor(246, 50, 39),
                            new MapColor(63, 157, 7),
                                new Dimension(942.8557),
                            new MapFont(new Dimension(807.4610),
                                    "Bookman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.LineThrough),
                                283.7300,
                            new MapColor(254, 155, 237),
                            new MapColor(58, 78, 6),
                                268.9108,
                            HorizontalAlignment.Center,
                                true,
                                645.5391,
                                new Dimension(871.2273),
                                true),
                        [new UniqueValue("et",
                                "excepturi",
                                "qui")]),
                    new UniqueValueClass("unde",
                        new TextSymbol("dignissimos magni rem",
                            new MapColor(54, 180, 214),
                            new MapColor(205, 90, 35),
                                new Dimension(290.7291),
                            new MapFont(new Dimension(972.6697),
                                    "Arial",
                                MapFontStyle.Italic,
                                FontWeight.Bolder,
                                TextDecoration.Underline),
                                110.1606,
                            new MapColor(123, 98, 154),
                            new MapColor(62, 200, 47),
                                286.7523,
                            HorizontalAlignment.Left,
                                true,
                                61.1581,
                                new Dimension(194.9959),
                                true),
                        [new UniqueValue("nisi",
                                "occaecati",
                                "natus"),
                        new UniqueValue("atque",
                                "culpa",
                                "qui"),
                        new UniqueValue("sed",
                                "explicabo",
                                "dolorem"),
                        new UniqueValue("fuga",
                                "quae",
                                "eligendi")]),
                    new UniqueValueClass("voluptatem",
                        new TextSymbol("quis aliquam voluptates",
                            new MapColor(114, 20, 98),
                            new MapColor(82, 108, 69),
                                new Dimension(580.7592),
                            new MapFont(new Dimension(623.7289),
                                    "Palatino",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.None),
                                739.6518,
                            new MapColor(23, 46, 248),
                            new MapColor(150, 230, 32),
                                796.8173,
                            HorizontalAlignment.Left,
                                true,
                                900.4480,
                                new Dimension(853.5042),
                                true),
                        [new UniqueValue("voluptas",
                                "assumenda",
                                "eum"),
                        new UniqueValue("voluptate",
                                "aut",
                                "suscipit"),
                        new UniqueValue("animi",
                                "alias",
                                "nihil"),
                        new UniqueValue("asperiores",
                                "illum",
                                "placeat")])],
                        "recusandae"),
                new UniqueValueGroup([new UniqueValueClass("expedita",
                        new TextSymbol("explicabo et cum",
                            new MapColor(137, 249, 146),
                            new MapColor(123, 165, 226),
                                new Dimension(70.4689),
                            new MapFont(new Dimension(564.4564),
                                    "Georgia",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.None),
                                685.1948,
                            new MapColor(166, 252, 228),
                            new MapColor(160, 65, 68),
                                836.8696,
                            HorizontalAlignment.Center,
                                true,
                                205.5054,
                                new Dimension(557.1765),
                                true),
                        [new UniqueValue("repudiandae",
                                "quaerat",
                                "tenetur")]),
                    new UniqueValueClass("perferendis",
                        new TextSymbol("quas tempore autem",
                            new MapColor(168, 102, 200),
                            new MapColor(130, 40, 10),
                                new Dimension(760.1744),
                            new MapFont(new Dimension(601.5800),
                                    "Helvetica",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                441.8124,
                            new MapColor(216, 239, 89),
                            new MapColor(99, 166, 218),
                                800.6221,
                            HorizontalAlignment.Center,
                                true,
                                226.2812,
                                new Dimension(715.2982),
                                true),
                        [new UniqueValue("totam",
                                "at",
                                "illo"),
                        new UniqueValue("sint",
                                "doloribus",
                                "cupiditate"),
                        new UniqueValue("molestiae",
                                "quia",
                                "vero"),
                        new UniqueValue("ex",
                                "molestias",
                                "iure")]),
                    new UniqueValueClass("possimus",
                        new TextSymbol("voluptate soluta neque",
                            new MapColor(8, 70, 198),
                            new MapColor(101, 151, 163),
                                new Dimension(117.9712),
                            new MapFont(new Dimension(897.4585),
                                    "Palatino",
                                MapFontStyle.Italic,
                                FontWeight.Normal,
                                TextDecoration.None),
                                574.3528,
                            new MapColor(107, 123, 9),
                            new MapColor(142, 204, 199),
                                169.6770,
                            HorizontalAlignment.Left,
                                true,
                                125.2900,
                                new Dimension(986.1963),
                                true),
                        [new UniqueValue("eaque",
                                "at",
                                "quam"),
                        new UniqueValue("quasi",
                                "explicabo",
                                "tempore")])],
                        "ut")],
                    "molestiae",
                    "delectus eaque et");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "placeat",
                    "officiis",
                    "aut");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2018, 11, 2, 1, 3, 56),
                    new DateTime(2018, 5, 20, 2, 22, 42));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("harum",
                    "placeat",
                new TimeExtent(new DateTime(2005, 6, 17, 6, 0, 30),
                        new DateTime(2016, 11, 20, 9, 42, 10)),
                new TimeInterval(TemporalTime.Hours,
                        726.7133),
                    [new DateTime(2020, 1, 23, 5, 10, 48),
                        new DateTime(2015, 2, 17, 2, 18, 44),
                        new DateTime(2019, 2, 15, 14, 27, 25),
                        new DateTime(2008, 1, 17, 3, 25, 17)],
                    "Asia/Tashkent",
                    "necessitatibus");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    711.0963);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 8, 2, 18, 56, 51),
                    new DateTime(2002, 11, 15, 18, 39, 40));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
