@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("ut rem commodi")"
                        Copyright="@("aut")"
                        Opacity="@(0.7638)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Exclusion)"
                        DefinitionExpression="@("temporibus")"
                        Delimiter="@(CSVDelimiter.Semicolon)"
                        DisplayField="@("maiores")"
                        Effect="@(new Effect("provident",
                            5195162.5396))"
                        FullExtent="@(new Extent(-77.6534,
                                -28.1238,
                                14.7902,
                                15.0328,
                                501.8392,
                                548.8925,
                                671.8851,
                                881.8417,
                            new SpatialReference(4,
                                    "nesciunt",
                                    "ipsa",
                                    "sapiente"),
                                true,
                                true))"
                        GeometryType="@("molestiae")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("aut")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("voluptatem")"
                        MaxScale="@(38574460.9147)"
                        MinScale="@(14195.8975)"
                        ObjectIdField="@("reiciendis")"
                        OutFields="@(["reiciendis",
                            "cupiditate"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(614.6168)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(5,
                                "modi",
                                "facilis",
                                "explicabo"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Weeks)"
                            Value="@(686.2180)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptatibus")"
                            EndField="@("et")"
                            Stops="@([new DateTime(2008, 1, 26, 20, 42, 31),
                                new DateTime(2013, 10, 10, 15, 18, 27),
                                new DateTime(2008, 7, 8, 7, 22, 50)])"
                            TimeZone="@("Asia/Tokyo")"
                            TrackIdField="@("est")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(890.6058)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2004, 9, 9, 20, 58, 44))"
                                End="@(new DateTime(2011, 7, 20, 0, 57, 56))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2003, 9, 12, 22, 55, 26))"
                            End="@(new DateTime(2018, 5, 24, 12, 50, 9))">
                        </TimeExtent>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Manual,
                                new AlgorithmicColorRamp(Algorithm.Hsv,
                                    new MapColor(180, 230, 204),
                                    new MapColor(139, 25, 73)),
                                    710.5572,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(942.6613,
                                            469.7958),
                                    new AuthoringInfoField1ClassBreakInfos(205.2859,
                                            40.7137)],
                                        "nisi",
                                        "provident",
                                        "et"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(557.6599,
                                            290.9176)],
                                        "ea",
                                        "eos",
                                        "illo"),
                                    ["velit",
                                        "voluptatem",
                                        "magnam",
                                        "soluta"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "in",
                                    true,
                                LengthUnit.Yards,
                                    295.2187,
                                    461.8794,
                                    287.0380,
                                    557.3125))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("vitae quibusdam deserunt")"
                            StringContent="@("dolor")"
                            OutFields="@(["rerum",
                                "temporibus",
                                "ratione"])"
                            FieldInfos="@([new FieldInfo("title",
                                    "et",
                                    "minus",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("id",
                                    "non",
                                    "nam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("id",
                                    "dolores",
                                    "eaque",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("password",
                                    "consequatur",
                                    "sint",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new TextPopupContent("saepe nesciunt animi")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "comment",
                                    "vel eveniet repudiandae",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "category",
                                    "alias deserunt tempora",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "comment",
                                    "id consequatur totam",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "token",
                                    "nihil quia aliquam",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("exercitationem quos quo",
                                    "https://picsum.photos/640/480/?image=305",
                                    "220b0fe0-e05d-b767-6b64-f4683913f46f",
                                    () => { Console.WriteLine("accusamus"); return Task.CompletedTask; },
                                    "comment",
                                    true,
                                    true,
                                    true,
                                    "autem"),
                            new ActionToggle("aperiam laboriosam tenetur",
                                    "72425a7d-623d-5f16-9a50-66cad8f70313",
                                    () => { Console.WriteLine("enim"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "nihil"),
                            new ActionToggle("eos vitae et",
                                    "44733349-780a-c858-7167-20d24e4f81fe",
                                    () => { Console.WriteLine("reiciendis"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "title",
                                    "sequi"),
                            new ActionButton("qui velit voluptatibus",
                                    "https://picsum.photos/640/480/?image=318",
                                    "6d1a7e3a-c0da-6136-8ad0-d261ff303033",
                                    () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "voluptates")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("quia")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("saepe")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowCenter)"
                            LabelExpression="@("vero")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(26514186.5410)"
                            MinScale="@(27900.7155)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(107.6813))"
                            Symbol="@(new TextSymbol("tempore corrupti ut",
                                new MapColor(96, 197, 142),
                                new MapColor(120, 95, 125),
                                    new Dimension(436.3985),
                                new MapFont(new Dimension(504.5301),
                                        "Times New Roman",
                                    MapFontStyle.Normal,
                                    FontWeight.Bold,
                                    TextDecoration.None),
                                    52.8712,
                                new MapColor(91, 84, 238),
                                new MapColor(44, 127, 143),
                                    179.9267,
                                HorizontalAlignment.Right,
                                    true,
                                    306.4803,
                                    new Dimension(940.1576),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Name = 'John Doe'")">
                        </Label>
                        <Field 
                            Name="@("category")"
                            Alias="@("quaerat")"
                            Description="@("et eveniet iure sint voluptate est id")"
                            Length="@(2)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "pariatur" })"
                            ValueType="@(FieldValueType.Coordinate)"
                            Domain="@(new RangeDomain("inventore",
                                    "laborum",
                                    "password"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("non",
                                34788423.7407),
                                new Effect("doloribus",
                                    159597.6624),
                                new Effect("rerum",
                                    10714288.6485)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(724.2756,
                                new Polyline([new MapPath([new MapPoint([187.6476,
                                            706.8423,
                                            899.7164]),
                                        new MapPoint([934.1638,
                                            21.7607,
                                            827.2529])])],
                                    new SpatialReference(7,
                                            "aut",
                                            "officia",
                                            "nihil"),
                                        true,
                                        true),
                                    [3,
                                        7,
                                        6],
                                SpatialRelationship.Contains,
                                new TimeExtent(new DateTime(2015, 3, 24, 7, 44, 1),
                                        new DateTime(2014, 2, 15, 1, 48, 46)),
                                    QueryUnits.Meters,
                                    "Name = 'John Doe'"))"
                            IncludedEffect="@([new Effect("sint",
                                33324149.9170),
                                new Effect("omnis",
                                    11823369.9550),
                                new Effect("accusantium",
                                    43762730.7368)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                                    "quibusdam incidunt quod"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(132.0182)"
                            Unit="@(ElevationUnit.Centimeters)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["laborum",
                    "sed",
                    "distinctio"],
                    ["name",
                        "token"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("group");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("token",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([255.4643,
                                129.5912,
                                750.4113]),
                            new MapPoint([137.7449,
                                288.2623,
                                300.7252,
                                909.4422])]),
                            new MapPath([new MapPoint([472.7905,
                                    990.5203,
                                    565.6948,
                                    435.6756]),
                                new MapPoint([138.9337,
                                    309.2223,
                                    892.4742,
                                    124.0040])]),
                            new MapPath([new MapPoint([992.5468,
                                    571.8669,
                                    611.8328]),
                                new MapPoint([79.3421,
                                    685.9850,
                                    450.3491])]),
                            new MapPath([new MapPoint([140.2329,
                                    746.8546,
                                    176.9975,
                                    840.0195]),
                                new MapPoint([240.2119,
                                    213.3551,
                                    190.0399]),
                                new MapPoint([125.8200,
                                    934.4277,
                                    43.4587,
                                    704.7422])])],
                        new SpatialReference(6,
                                "non",
                                "omnis",
                                "non"),
                            true,
                            true),
                    new TextSymbol("totam reiciendis culpa",
                        new MapColor(90, 69, 219),
                        new MapColor(247, 212, 247),
                            new Dimension(409.5680),
                        new MapFont(new Dimension(438.0627),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            847.8160,
                        new MapColor(56, 184, 182),
                        new MapColor(181, 95, 50),
                            405.2660,
                        HorizontalAlignment.Left,
                            true,
                            359.1819,
                            new Dimension(937.2310),
                            true),
                    new PopupTemplate("aliquam minima dolor",
                            "dolores",
                            ["iste",
                                "asperiores",
                                "explicabo"],
                        [new FieldInfo("comment",
                                "fuga",
                                "distinctio",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.Year),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("title",
                                "qui",
                                "sunt",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("password",
                                "maxime",
                                "praesentium",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("title",
                                "sed",
                                "unde",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongDateShortTime24),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new MediaPopupContent("accusantium qui repudiandae",
                                "officiis asperiores voluptate sit sint ratione deserunt",
                            [new PieChartMediaInfo("aut similique et",
                                    "tenetur",
                                    "vel hic accusantium",
                                new ChartMediaInfoValue(["non",
                                        "voluptatem",
                                        "ut",
                                        "praesentium"],
                                        "debitis",
                                        "nisi",
                                    [new ChartMediaInfoValueSeries("createdAt",
                                            "odit",
                                            3.8768),
                                    new ChartMediaInfoValueSeries("phone",
                                            "est",
                                            33.0233)],
                                    [new MapColor(156, 197, 42)]))],
                                9),
                        new AttachmentsPopupContent("cum consequuntur sint",
                                "modi non qui reiciendis velit iure",
                                AttachmentsPopupContentDisplayType.Preview),
                        new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "eligendi",
                                    "natus unde perspiciatis")),
                        new RelationshipPopupContent("iste delectus itaque",
                                "et eligendi aut eaque architecto molestiae et",
                                9,
                                "ipsa",
                            [new RelatedRecordsInfoFieldOrder("perspiciatis",
                                OrderBy.Desc)],
                                4)],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "id",
                                "eius sint accusamus",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "email",
                                "adipisci ea et",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionToggle("ipsum sit porro",
                                "2051a4da-a090-1c0c-064b-6d2eb9f2898e",
                                () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                true,
                                true,
                                true,
                                true,
                                "status",
                                "et")]),
                        new AttributesDictionary(),
                        true,
                        "laudantium",
                        "impedit",
                        new GraphicOrigin(Guid.NewGuid(),
                            "recusandae",
                            8))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([5,
                    4,
                    5,
                    3],
                    true,
                    200.1075,
                    370.6541,
                    "8.7.4.4",
                new Polygon([new MapPath([new MapPoint([757.8743,
                            668.1661]),
                        new MapPoint([911.5436,
                            548.2466]),
                        new MapPoint([733.3048,
                            652.4947,
                            498.1482,
                            824.5804])]),
                        new MapPath([new MapPoint([604.0530,
                                240.5079,
                                647.1437]),
                            new MapPoint([291.8735,
                                973.2163,
                                867.6293,
                                119.3755]),
                            new MapPoint([935.5313,
                                266.2867,
                                446.6807])]),
                        new MapPath([new MapPoint([830.9821,
                                309.3138]),
                            new MapPoint([785.5205,
                                927.7815,
                                549.1541,
                                250.5406])])],
                    new SpatialReference(1,
                            "necessitatibus",
                            "perferendis",
                            "officia"),
                    new Point(-89.2947,
                            71.0298,
                            65.6237,
                            -28.2179,
                            827.9259,
                        new SpatialReference(8,
                                "harum",
                                "occaecati",
                                "odit"),
                            true,
                            true,
                            433.1879),
                        true,
                        true,
                        true),
                    2,
                    ["expedita",
                        "vero"],
                    "dicta",
                    new DateTime(2004, 1, 4, 0, 19, 52),
                    70.1980,
                    4,
                    "delectus",
                    5),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([9,
                    8,
                    1,
                    7],
                    true,
                    73.4882,
                    949.4249,
                    "8.2.7.6",
                new Point(100.2360,
                        73.0718,
                        74.1809,
                        -12.8858,
                        288.6754,
                    new SpatialReference(8,
                            "voluptas",
                            "architecto",
                            "provident"),
                        true,
                        true,
                        733.8874),
                    2,
                    ["iure",
                        "ut",
                        "sunt"],
                    "distinctio",
                    new DateTime(2008, 2, 24, 20, 41, 0),
                    956.5819,
                    4,
                    "recusandae",
                    7),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([6,
                    9],
                    true,
                    273.5772,
                    154.1673,
                    "9.0.7.6",
                new Point(114.3731,
                        -80.6807,
                        153.4541,
                        -43.7369,
                        648.9806,
                    new SpatialReference(5,
                            "recusandae",
                            "fuga",
                            "suscipit"),
                        true,
                        true,
                        272.4838),
                    4,
                    ["omnis",
                        "aut",
                        "deserunt"],
                    "iure",
                    new DateTime(2018, 5, 17, 17, 10, 20),
                    891.0325,
                    6,
                    "sed",
                    3),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([2,
                    3,
                    2,
                    2],
                    true,
                    678.5113,
                    264.2640,
                    "4.4.7.7",
                new Point(148.7564,
                        64.0486,
                        42.0743,
                        -50.4446,
                        919.1142,
                    new SpatialReference(6,
                            "et",
                            "quia",
                            "et"),
                        true,
                        true,
                        338.7888),
                    6,
                    ["quidem",
                        "qui",
                        "voluptas"],
                    "illo",
                    new DateTime(2022, 4, 12, 5, 28, 15),
                    376.0036,
                    8,
                    "corrupti",
                    8),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Saturation;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("ad excepturi ut",
                    "nisi",
                    ["quia",
                        "magni",
                        "omnis",
                        "incidunt"],
                [new FieldInfo("name",
                        "exercitationem",
                        "minus",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongMonthYear),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new RelationshipPopupContent("non asperiores qui",
                        "sit amet velit qui ipsa",
                        2,
                        "sed",
                    [new RelatedRecordsInfoFieldOrder("laudantium",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("sed",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("qui",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("et",
                        OrderBy.Asc)],
                        7),
                new MediaPopupContent("libero iure possimus",
                        "autem ab nulla qui ut",
                    [new BarChartMediaInfo("ea facere quaerat",
                            "illo",
                            "alias et exercitationem",
                        new ChartMediaInfoValue(["et",
                                "reprehenderit",
                                "quod"],
                                "vitae",
                                "quae",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "velit",
                                    742.8885),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "doloribus",
                                    441.4811),
                            new ChartMediaInfoValueSeries("createdAt",
                                    "iusto",
                                    894.1552),
                            new ChartMediaInfoValueSeries("status",
                                    "eius",
                                    57.7434)],
                            [new MapColor(80, 60, 147),
                            new MapColor(58, 191, 105),
                            new MapColor(18, 130, 123),
                            new MapColor(32, 35, 86)])),
                    new BarChartMediaInfo("itaque officiis quis",
                            "quidem",
                            "temporibus accusamus adipisci",
                        new ChartMediaInfoValue(["fuga",
                                "sunt",
                                "et",
                                "error"],
                                "mollitia",
                                "ut",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "autem",
                                    62.9651),
                            new ChartMediaInfoValueSeries("password",
                                    "repellendus",
                                    607.9507)],
                            [new MapColor(180, 164, 206),
                            new MapColor(119, 124, 47),
                            new MapColor(158, 93, 72)])),
                    new LineChartMediaInfo("cum magni accusantium",
                            "tempore",
                            "autem voluptatem nostrum",
                        new ChartMediaInfoValue(["temporibus",
                                "ab",
                                "ut"],
                                "quaerat",
                                "sed",
                            [new ChartMediaInfoValueSeries("comment",
                                    "illum",
                                    749.9336),
                            new ChartMediaInfoValueSeries("id",
                                    "non",
                                    95.2965),
                            new ChartMediaInfoValueSeries("token",
                                    "quam",
                                    761.8810)],
                            [new MapColor(119, 73, 254),
                            new MapColor(24, 222, 96)]))],
                        8),
                new AttachmentsPopupContent("molestias accusamus sint",
                        "aut placeat sunt natus",
                        AttachmentsPopupContentDisplayType.Auto),
                new TextPopupContent("et ut porro")],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "avatar",
                        "enim est repellat",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "name",
                        "sapiente a dolores",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "comment",
                        "atque voluptas rerum",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "phone",
                        "non non vitae",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("cupiditate quod aut",
                        "https://picsum.photos/640/480/?image=62",
                        "a22ed2b1-3e14-48de-fe88-80ff1707e48f",
                        () => { Console.WriteLine("quo"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "qui"),
                new ActionButton("quidem enim mollitia",
                        "https://picsum.photos/640/480/?image=41",
                        "5804a05d-679d-2f69-ca3f-1f035e7bcb0a",
                        () => { Console.WriteLine("minima"); return Task.CompletedTask; },
                        "group",
                        true,
                        true,
                        true,
                        "temporibus"),
                new ActionButton("doloribus quo eos",
                        "https://picsum.photos/640/480/?image=611",
                        "ed0d10d9-aecf-4865-1ee6-c3218ca9946d",
                        () => { Console.WriteLine("officia"); return Task.CompletedTask; },
                        "name",
                        true,
                        true,
                        true,
                        "rerum")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "quaerat dignissimos dolorem"),
                ElevationInfoMode.RelativeToScene,
                    197.7043,
                ElevationUnit.Meters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("autem",
                    6457074.5117),
                    new Effect("enim",
                        19191925.2214),
                    new Effect("fugit",
                        7683575.3319)],
                    true,
                new FeatureFilter(639.1740,
                    new Point(137.3633,
                            49.2193,
                            26.2785,
                            -12.4392,
                            793.2265,
                        new SpatialReference(5,
                                "et",
                                "quis",
                                "non"),
                            true,
                            true,
                            793.9765),
                        [4,
                            7],
                    SpatialRelationship.Touches,
                    new TimeExtent(new DateTime(2023, 3, 19, 0, 46, 21),
                            new DateTime(2003, 7, 18, 22, 36, 3)),
                        QueryUnits.Meters,
                        "Age > 21"),
                    [new Effect("ducimus",
                        24339577.4900),
                        new Effect("facilis",
                            37155948.4157),
                        new Effect("magnam",
                            24151502.5868)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "createdAt",
                    "tempora",
                    "rerum velit placeat in et",
                    5,
                    true,
                    true,
                    new { Value = "assumenda" },
                FieldValueType.TypeOrCategory,
                new RangeDomain("eum",
                        "impedit",
                        "password"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(63.0341,
                    147.5494,
                    71.8329,
                    -27.7393,
                    204.4985,
                    877.5907,
                    663.4297,
                    632.5625,
                new SpatialReference(2,
                        "tempora",
                        "laboriosam",
                        "veniam"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveEnd,
                    "necessitatibus",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    35655620.3896,
                    48111.9291,
                    true,
                    new Dimension(568.5361),
                new TextSymbol("deleniti et veritatis",
                    new MapColor(117, 222, 207),
                    new MapColor(18, 69, 200),
                        new Dimension(255.6304),
                    new MapFont(new Dimension(111.9584),
                            "Helvetica",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        757.5946,
                    new MapColor(163, 242, 139),
                    new MapColor(198, 156, 75),
                        406.4673,
                    HorizontalAlignment.Right,
                        true,
                        663.6798,
                        new Dimension(155.6766),
                        true),
                    true,
                    "Country = 'Canada'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("in",
                SortOrder.Ascending,
                    "doloribus"),
            new OrderedLayerOrderBy("rerum",
                SortOrder.Ascending,
                    "omnis"),
            new OrderedLayerOrderBy("dolorem",
                SortOrder.Ascending,
                    "fugiat"),
            new OrderedLayerOrderBy("illo",
                SortOrder.Ascending,
                    "ducimus")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("rerum ut quo",
                    new MapColor(8, 85, 222),
                    new MapColor(121, 211, 95),
                        new Dimension(879.1599),
                    new MapFont(new Dimension(839.1419),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        271.4996,
                    new MapColor(181, 7, 107),
                    new MapColor(156, 79, 92),
                        75.1716,
                    HorizontalAlignment.Right,
                        true,
                        324.7065,
                        new Dimension(590.6736),
                        true),
                    "repudiandae",
                [new OpacityVariable("dolor",
                        "labore",
                    [new OpacityStop(345.8621,
                            0.8664,
                            "quia"),
                    new OpacityStop(696.5750,
                            0.4672,
                            "ipsam")],
                    new VisualVariableLegendOptions(true,
                            "ratione saepe accusantium"),
                        "vel",
                        "porro dolor blanditiis")],
                new AuthoringInfo(ClassificationMethod.DefinedInterval,
                    new AlgorithmicColorRamp(Algorithm.CieLab,
                        new MapColor(83, 201, 98),
                        new MapColor(245, 230, 24)),
                        311.9829,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(783.8547,
                                396.1686),
                        new AuthoringInfoField1ClassBreakInfos(170.0400,
                                153.7139),
                        new AuthoringInfoField1ClassBreakInfos(864.4299,
                                14.9859)],
                            "iusto",
                            "aut",
                            "ut"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(124.5670,
                                884.3382),
                        new AuthoringInfoField1ClassBreakInfos(374.2654,
                                150.9989),
                        new AuthoringInfoField1ClassBreakInfos(367.8512,
                                739.6563),
                        new AuthoringInfoField1ClassBreakInfos(840.8867,
                                163.9736)],
                            "minima",
                            "quisquam",
                            "veritatis"),
                        ["aut",
                            "qui",
                            "quas"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "voluptas",
                        true,
                    LengthUnit.Millimeters,
                        40.5161,
                        167.0211,
                        845.8366,
                        660.7451));
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "vel",
                    "rerum",
                    "aliquam");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2003, 6, 18, 20, 58, 4),
                    new DateTime(2013, 6, 21, 11, 46, 14));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("ex",
                    "iure",
                new TimeExtent(new DateTime(2007, 8, 9, 12, 2, 12),
                        new DateTime(2003, 1, 8, 22, 1, 40)),
                new TimeInterval(TemporalTime.Hours,
                        400.3176),
                    [new DateTime(2018, 2, 23, 5, 24, 4),
                        new DateTime(2004, 5, 9, 12, 43, 56),
                        new DateTime(2002, 2, 9, 9, 3, 28)],
                    "America/Santiago",
                    "sit");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Months,
                    749.4162);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2016, 5, 2, 18, 40, 13),
                    new DateTime(2022, 6, 10, 12, 53, 2));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
