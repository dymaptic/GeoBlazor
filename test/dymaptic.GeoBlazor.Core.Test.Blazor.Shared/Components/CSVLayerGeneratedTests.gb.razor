@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderCSVLayer(Action renderHandler)
    {
        CSVLayer? cSVLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <CSVLayer 
                        Url="@("https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv")"
                        Title="@("eum laudantium quia")"
                        Copyright="@("id")"
                        Opacity="@(0.3987)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Invert)"
                        DefinitionExpression="@("tenetur")"
                        Delimiter="@(CSVDelimiter.Space)"
                        DisplayField="@("odit")"
                        Effect="@(new Effect("quam",
                            37807989.5389))"
                        FullExtent="@(new Extent(6.5861,
                                81.1004,
                                31.6552,
                                9.3917,
                                396.8131,
                                420.3006,
                                588.3026,
                                646.3397,
                            new SpatialReference(2,
                                    "molestiae",
                                    "id",
                                    "non"),
                                true,
                                true))"
                        GeometryType="@("neque")"
                        LabelsVisible="@(true)"
                        LatitudeField="@("qui")"
                        LegendEnabled="@(true)"
                        LongitudeField="@("deserunt")"
                        MaxScale="@(44610385.7992)"
                        MinScale="@(35591.5444)"
                        ObjectIdField="@("et")"
                        OutFields="@(["et",
                            "enim",
                            "quibusdam",
                            "unde"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(953.3235)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(6,
                                "nulla",
                                "non",
                                "illo"))"
                        UseViewTime="@(true)"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Hours)"
                            Value="@(375.9652)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("minus")"
                            EndField="@("nobis")"
                            Stops="@([new DateTime(2001, 2, 13, 22, 30, 42),
                                new DateTime(2010, 2, 15, 10, 58, 20),
                                new DateTime(2008, 3, 11, 11, 1, 9),
                                new DateTime(2001, 7, 22, 18, 29, 28)])"
                            TimeZone="@("America/Halifax")"
                            TrackIdField="@("voluptatum")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Weeks)"
                                Value="@(108.2631)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2018, 6, 9, 3, 32, 50))"
                                End="@(new DateTime(2016, 1, 15, 6, 51, 32))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2017, 11, 27, 3, 37, 45))"
                            End="@(new DateTime(2006, 3, 4, 13, 19, 11))">
                        </TimeExtent>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Quantile,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(215, 208, 41),
                                        new MapColor(138, 117, 153)),
                                    new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(121, 121, 237),
                                        new MapColor(61, 1, 169))]),
                                    112.1333,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(237.3741,
                                            108.6859)],
                                        "suscipit",
                                        "quibusdam",
                                        "molestiae"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(170.0538,
                                            643.2202),
                                    new AuthoringInfoField1ClassBreakInfos(467.0148,
                                            672.3828)],
                                        "iste",
                                        "omnis",
                                        "laboriosam"),
                                    ["est",
                                        "veritatis",
                                        "exercitationem"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "saepe",
                                    true,
                                LengthUnit.Miles,
                                    81.9908,
                                    140.7832,
                                    454.2448,
                                    401.1054))">
                        </SimpleRenderer>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("sunt")"
                            ApiKey="@("eum")"
                            AvgRating="@(961.1369)"
                            Categories="@(["harum",
                                "autem",
                                "in"])"
                            Created="@(new DateTime(2023, 6, 19, 7, 8, 20))"
                            Culture="@("minus")"
                            Description="@("velit sint rerum dignissimos enim est qui")"
                            Extent="@(new Extent(-86.0294,
                                    -61.7974,
                                    83.7820,
                                    -85.5969,
                                    419.0038,
                                    455.0555,
                                    530.2289,
                                    39.9810,
                                new SpatialReference(1,
                                        "tempore",
                                        "voluptas",
                                        "nesciunt"),
                                    true,
                                    true))"
                            GroupCategories="@(["blanditiis",
                                "harum"])"
                            LicenseInfo="@("excepturi")"
                            Modified="@(new DateTime(2004, 6, 13, 4, 45, 54))"
                            Name="@("id")"
                            NumComments="@(279.5317)"
                            NumRatings="@(351.9802)"
                            NumViews="@(657.3324)"
                            Owner="@("Janae Prohaska")"
                            OwnerFolder="@("Rory Becker")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Auto,
                                    ["non",
                                        "nulla",
                                        "nulla"],
                                    "dolorem",
                                    "quod",
                                    "voluptatem",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("consequatur")"
                            Screenshots="@(["quia",
                                "iusto",
                                "vitae",
                                "minus"])"
                            Size="@(9)"
                            Snippet="@("modi")"
                            Tags="@(["laudantium",
                                "aut",
                                "earum",
                                "voluptatem"])"
                            Title="@("repellat corporis quidem")"
                            TypeKeywords="@(["quibusdam",
                                "veniam"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("id ut animi")"
                            StringContent="@("hic")"
                            OutFields="@(["fugiat",
                                "et"])"
                            FieldInfos="@([new FieldInfo("email",
                                    "aut",
                                    "sed",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateShortTime),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("title",
                                    "sint",
                                    "nihil",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("comment",
                                    "est",
                                    "suscipit",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                                        "deserunt",
                                        "id aliquid qui"))])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "updatedAt",
                                    "dolores quibusdam ut",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return Date();",
                                    "createdAt",
                                    "tempore atque asperiores",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("unde sed consequuntur",
                                    "3092e363-8339-b7fe-8dae-62f519f9a5f5",
                                    () => { Console.WriteLine("beatae"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "status",
                                    "commodi"),
                            new ActionToggle("dolores labore cupiditate",
                                    "38802842-f1e1-ffc1-a43c-87ae76ac6e31",
                                    () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "email",
                                    "excepturi"),
                            new ActionButton("laboriosam eum blanditiis",
                                    "https://picsum.photos/640/480/?image=329",
                                    "839bc592-c9b5-4e92-b6be-f8ccb55af4a9",
                                    () => { Console.WriteLine("illum"); return Task.CompletedTask; },
                                    "comment",
                                    true,
                                    true,
                                    true,
                                    "enim")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("voluptatum")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("maiores")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowRight)"
                            LabelExpression="@("aut")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(46438287.7231)"
                            MinScale="@(2940.6119)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(947.0277))"
                            Symbol="@(new TextSymbol("numquam et inventore",
                                new MapColor(36, 192, 197),
                                new MapColor(143, 121, 112),
                                    new Dimension(830.0481),
                                new MapFont(new Dimension(123.2455),
                                        "Georgia",
                                    MapFontStyle.Italic,
                                    FontWeight.Normal,
                                    TextDecoration.None),
                                    704.9991,
                                new MapColor(106, 52, 178),
                                new MapColor(128, 152, 202),
                                    227.0951,
                                HorizontalAlignment.Left,
                                    true,
                                    768.7424,
                                    new Dimension(26.9453),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Province = 'Ontario'")">
                        </Label>
                        <Field 
                            Name="@("phone")"
                            Alias="@("velit")"
                            Description="@("consequuntur veritatis incidunt voluptatem velit eos")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "itaque" })"
                            ValueType="@(FieldValueType.None)"
                            Domain="@(new RangeDomain("minima",
                                    "voluptates",
                                    "email"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("aut",
                                430279.8629),
                                new Effect("aut",
                                    10721792.6147),
                                new Effect("tempora",
                                    34520736.8973),
                                new Effect("cupiditate",
                                    23614244.9286)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(51.1758,
                                new Point(101.2537,
                                        16.1846,
                                        62.2656,
                                        4.3660,
                                        339.7571,
                                    new SpatialReference(2,
                                            "eaque",
                                            "est",
                                            "velit"),
                                        true,
                                        true,
                                        845.1948),
                                    [4,
                                        9],
                                SpatialRelationship.Touches,
                                new TimeExtent(new DateTime(2014, 7, 2, 5, 48, 1),
                                        new DateTime(2012, 5, 3, 6, 24, 34)),
                                    QueryUnits.Feet,
                                    "Province = 'Ontario'"))"
                            IncludedEffect="@([new Effect("unde",
                                14853445.6254),
                                new Effect("quos",
                                    8037337.5483)])">
                        </FeatureEffect>
                        <CSVLayerElevationInfo 
                            FeatureExpressionInfo="@(new CSVLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "rerum molestias atque"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(849.4725)"
                            Unit="@(ElevationUnit.NauticalMiles)">
                        </CSVLayerElevationInfo>
                    </CSVLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(cSVLayer!);
        await AssertJavaScript("dispatchEvent", args: [cSVLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "csv");
        var createPopupTemplateMethodResult = await cSVLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quasi",
                    "iure"],
                    ["createdAt",
                        "password",
                        "group",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await cSVLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await cSVLayer.GetField("password");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await cSVLayer.GetFieldDomain("group",
            new CSVLayerGetFieldDomainOptions(new Graphic(new Point(49.1655,
                            -31.3981,
                            -110.0277,
                            -63.1738,
                            37.8243,
                        new SpatialReference(4,
                                "soluta",
                                "consequuntur",
                                "nisi"),
                            true,
                            true,
                            744.6585),
                    new TextSymbol("alias est eos",
                        new MapColor(239, 19, 12),
                        new MapColor(7, 30, 248),
                            new Dimension(703.8286),
                        new MapFont(new Dimension(96.5359),
                                "Palatino",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            121.0759,
                        new MapColor(117, 150, 27),
                        new MapColor(231, 224, 58),
                            118.5552,
                        HorizontalAlignment.Right,
                            true,
                            40.4797,
                            new Dimension(693.6614),
                            true),
                    new PopupTemplate("ipsum voluptas laborum",
                            "ipsam",
                            ["voluptates",
                                "amet",
                                "repudiandae",
                                "maxime"],
                        [new FieldInfo("comment",
                                "consequatur",
                                "non",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("avatar",
                                "reprehenderit",
                                "natus",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Min)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                                    "praesentium",
                                    "sequi tempore numquam")),
                        new RelationshipPopupContent("distinctio recusandae dolorem",
                                "error magni et harum aut",
                                7,
                                "occaecati",
                            [new RelatedRecordsInfoFieldOrder("provident",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("qui",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("vel",
                                OrderBy.Desc)],
                                8),
                        new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                                    "voluptatem",
                                    "maiores possimus accusamus"))],
                        [new ExpressionInfo("return Date();",
                                "title",
                                "voluptate sapiente numquam",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "updatedAt",
                                "ea quo ut",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "token",
                                "distinctio fuga dolores",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                        [new ActionButton("sapiente voluptate sit",
                                "https://picsum.photos/640/480/?image=707",
                                "2c268925-c457-5dc5-5ce5-d22087218d05",
                                () => { Console.WriteLine("minus"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "suscipit")]),
                        new AttributesDictionary(),
                        true,
                        "nam",
                        "et",
                        new GraphicOrigin(Guid.NewGuid(),
                            "repellendus",
                            3))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await cSVLayer.QueryExtent(new Query([8,
                    8,
                    4,
                    1],
                    true,
                    697.4734,
                    538.6515,
                    "3.0.8.7",
                new Polyline([new MapPath([new MapPoint([980.9928,
                            501.6792]),
                        new MapPoint([589.7674,
                            248.3373]),
                        new MapPoint([315.1047,
                            406.5366])]),
                        new MapPath([new MapPoint([394.3551,
                                823.8659,
                                303.9883]),
                            new MapPoint([226.2754,
                                998.1596]),
                            new MapPoint([540.0523,
                                883.8937,
                                629.0457,
                                61.7207])]),
                        new MapPath([new MapPoint([182.9187,
                                852.3031,
                                180.2789,
                                543.3938]),
                            new MapPoint([548.1843,
                                362.9434,
                                463.0593]),
                            new MapPoint([548.0396,
                                310.0741])]),
                        new MapPath([new MapPoint([502.0610,
                                456.0437,
                                669.7880,
                                595.7702]),
                            new MapPoint([445.8085,
                                697.5437,
                                250.5446,
                                612.5534]),
                            new MapPoint([950.3034,
                                749.2429,
                                812.2760,
                                55.4568]),
                            new MapPoint([696.9498,
                                494.5287])])],
                    new SpatialReference(9,
                            "magni",
                            "ipsa",
                            "est"),
                        true,
                        true),
                    7,
                    ["cumque",
                        "est",
                        "vel"],
                    "cum",
                    new DateTime(2000, 8, 18, 3, 15, 25),
                    254.8976,
                    8,
                    "dignissimos",
                    4),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await cSVLayer.QueryFeatureCount(new Query([5,
                    2,
                    2],
                    true,
                    813.3654,
                    674.0208,
                    "9.5.5.4",
                new Polyline([new MapPath([new MapPoint([230.4769,
                            571.7451,
                            470.8836,
                            174.4843]),
                        new MapPoint([406.5718,
                            203.0568]),
                        new MapPoint([168.5572,
                            80.4111,
                            379.2957,
                            903.6839]),
                        new MapPoint([122.3765,
                            365.4749,
                            510.0351,
                            886.4580])]),
                        new MapPath([new MapPoint([36.2629,
                                330.5776,
                                589.3637,
                                589.8643]),
                            new MapPoint([607.1518,
                                766.7927])])],
                    new SpatialReference(4,
                            "alias",
                            "error",
                            "ratione"),
                        true,
                        true),
                    5,
                    ["debitis",
                        "qui",
                        "quisquam"],
                    "corrupti",
                    new DateTime(2011, 7, 26, 7, 33, 16),
                    341.3291,
                    7,
                    "magnam",
                    5),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await cSVLayer.QueryFeatures(new Query([4,
                    4,
                    8],
                    true,
                    377.7236,
                    696.2653,
                    "3.3.0.8",
                new Extent(-145.5459,
                        20.3021,
                        -53.1677,
                        82.5708,
                        237.0891,
                        185.8013,
                        444.1215,
                        724.8381,
                    new SpatialReference(7,
                            "nobis",
                            "est",
                            "fugiat"),
                        true,
                        true),
                    7,
                    ["dolorum",
                        "qui"],
                    "blanditiis",
                    new DateTime(2001, 9, 12, 5, 31, 11),
                    656.0651,
                    9,
                    "libero",
                    4),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await cSVLayer.QueryObjectIds(new Query([9,
                    7,
                    4,
                    6],
                    true,
                    352.4867,
                    690.1479,
                    "7.6.0.7",
                new Extent(77.7318,
                        -95.4567,
                        3.2647,
                        30.8577,
                        819.7880,
                        619.9805,
                        101.0630,
                        292.5552,
                    new SpatialReference(7,
                            "ipsum",
                            "saepe",
                            "blanditiis"),
                        true,
                        true),
                    4,
                    ["voluptatibus",
                        "repellat",
                        "aperiam"],
                    "labore",
                    new DateTime(2016, 11, 11, 6, 2, 43),
                    398.3918,
                    7,
                    "impedit",
                    3),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await cSVLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await cSVLayer.SetListMode(testListMode);
        var listMode = await cSVLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Difference;
        await cSVLayer.SetBlendMode(testBlendMode);
        var blendMode = await cSVLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        PopupTemplate testPopupTemplate = new PopupTemplate("rerum maiores reiciendis",
                    "est",
                    ["eos",
                        "qui",
                        "est"],
                [new FieldInfo("updatedAt",
                        "corrupti",
                        "et",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("name",
                        "amet",
                        "rem",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongDateShortTime24),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("email",
                        "voluptatibus",
                        "sequi",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Sum)],
                [new RelationshipPopupContent("sed eius occaecati",
                        "temporibus incidunt aut sapiente sequi quis et",
                        8,
                        "et",
                    [new RelatedRecordsInfoFieldOrder("perferendis",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("minima",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("ut",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("dicta",
                        OrderBy.Asc)],
                        8),
                new FieldsPopupContent([new FieldInfo("name",
                            "quo",
                            "et",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateShortTime),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("category",
                            "nemo",
                            "occaecati",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.DayShortMonthYearLongTime),
                            true,
                            true,
                        StatisticType.Count),
                    new FieldInfo("token",
                            "alias",
                            "ut",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLongTime),
                            true,
                            true,
                        StatisticType.Count),
                    new FieldInfo("avatar",
                            "ut",
                            "delectus",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.LongDateLongTime),
                            true,
                            true,
                        StatisticType.Min)],
                        "vel totam laborum aut deserunt qui reprehenderit",
                        "quo assumenda quas"),
                new MediaPopupContent("occaecati officia voluptatem",
                        "ut dolore provident aut et",
                    [new BarChartMediaInfo("inventore debitis enim",
                            "enim",
                            "et qui sunt",
                        new ChartMediaInfoValue(["iusto",
                                "sequi"],
                                "aliquid",
                                "animi",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "in",
                                    925.5613),
                            new ChartMediaInfoValueSeries("avatar",
                                    "amet",
                                    272.4935),
                            new ChartMediaInfoValueSeries("status",
                                    "occaecati",
                                    85.8382),
                            new ChartMediaInfoValueSeries("id",
                                    "numquam",
                                    644.2174)],
                            [new MapColor(189, 27, 245),
                            new MapColor(142, 10, 140),
                            new MapColor(210, 204, 206),
                            new MapColor(89, 160, 195)])),
                    new ImageMediaInfo("voluptatem dolorum quas",
                            "doloremque",
                            "quasi sed non",
                        new ImageMediaInfoValue("https://emelia.biz",
                                "https://donnell.org"),
                            457.2060),
                    new BarChartMediaInfo("est quo accusantium",
                            "dolor",
                            "enim odio facere",
                        new ChartMediaInfoValue(["dolorem",
                                "consequatur",
                                "natus",
                                "aperiam"],
                                "quaerat",
                                "et",
                            [new ChartMediaInfoValueSeries("avatar",
                                    "odit",
                                    577.8661),
                            new ChartMediaInfoValueSeries("group",
                                    "sit",
                                    671.2714),
                            new ChartMediaInfoValueSeries("category",
                                    "voluptatem",
                                    745.3209)],
                            [new MapColor(47, 15, 86),
                            new MapColor(114, 199, 175)]))],
                        2)],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "group",
                        "quod sunt placeat",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "password",
                        "officia cumque itaque",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("iste qui quisquam",
                        "https://picsum.photos/640/480/?image=1068",
                        "fe340a5d-b7fc-6dec-22f5-4a5b80a399a2",
                        () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                        "token",
                        true,
                        true,
                        true,
                        "ut"),
                new ActionButton("facilis nesciunt ea",
                        "https://picsum.photos/640/480/?image=466",
                        "34cc18ed-2003-328e-b577-d3fb9340257e",
                        () => { Console.WriteLine("culpa"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "et"),
                new ActionToggle("laborum ea nesciunt",
                        "81ed8674-10c9-ede2-4a2a-990e4842b763",
                        () => { Console.WriteLine("sapiente"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "phone",
                        "commodi"),
                new ActionToggle("eum nulla accusantium",
                        "a869c808-53dd-65b7-acfc-99bb195afb78",
                        () => { Console.WriteLine("mollitia"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "token",
                        "eaque")]);
        await cSVLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await cSVLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        CSVLayerElevationInfo testElevationInfo = new CSVLayerElevationInfo(new CSVLayerElevationInfoFeatureExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "et sit asperiores"),
                ElevationInfoMode.RelativeToGround,
                    996.7637,
                ElevationUnit.Centimeters);
        await cSVLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await cSVLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("ex",
                    6771453.0395),
                    new Effect("doloribus",
                        20670162.9128),
                    new Effect("nobis",
                        3100655.2947),
                    new Effect("nisi",
                        15269770.7927)],
                    true,
                new FeatureFilter(574.6799,
                    new Polygon([new MapPath([new MapPoint([275.0644,
                                160.2260,
                                810.1262]),
                            new MapPoint([107.9959,
                                971.9887]),
                            new MapPoint([937.7215,
                                198.4707])])],
                        new SpatialReference(5,
                                "minus",
                                "magnam",
                                "est"),
                        new Point(11.6263,
                                7.7696,
                                153.5543,
                                -72.2581,
                                880.1978,
                            new SpatialReference(8,
                                    "mollitia",
                                    "odit",
                                    "aliquam"),
                                true,
                                true,
                                374.8901),
                            true,
                            true,
                            true),
                        [6,
                            8,
                            9],
                    SpatialRelationship.Intersects,
                    new TimeExtent(new DateTime(2001, 7, 10, 0, 55, 22),
                            new DateTime(2005, 10, 26, 6, 35, 1)),
                        QueryUnits.Feet,
                        "Phone = '555-555-5555'"),
                    [new Effect("vel",
                        12571456.4298),
                        new Effect("nemo",
                            28189025.7205)]);
        await cSVLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await cSVLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "category",
                    "similique",
                    "sapiente aspernatur reprehenderit voluptate dolor",
                    1,
                    true,
                    true,
                    new { Value = "officia" },
                FieldValueType.TypeOrCategory,
                new RangeDomain("quia",
                        "omnis",
                        "name"))];
        await cSVLayer.SetFields(testFields);
        var fields = await cSVLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-151.7293,
                    105.9016,
                    -52.4546,
                    -37.7817,
                    750.0708,
                    163.4249,
                    319.8956,
                    487.6285,
                new SpatialReference(3,
                        "et",
                        "ut",
                        "accusamus"),
                    true,
                    true);
        await cSVLayer.SetFullExtent(testFullExtent);
        var fullExtent = await cSVLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveEnd,
                    "rerum",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    27347578.3475,
                    37218.3955,
                    true,
                    new Dimension(153.9805),
                new TextSymbol("non quaerat sunt",
                    new MapColor(83, 82, 161),
                    new MapColor(117, 179, 198),
                        new Dimension(644.0088),
                    new MapFont(new Dimension(883.6173),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        833.2112,
                    new MapColor(40, 130, 108),
                    new MapColor(237, 197, 50),
                        912.1231,
                    HorizontalAlignment.Center,
                        true,
                        333.1773,
                        new Dimension(10.4852),
                        true),
                    true,
                    "Province = 'Ontario'"),
            new Label(LabelPlacement.CenterAlong,
                    "dicta",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    26263176.7272,
                    40581.3021,
                    true,
                    new Dimension(849.2310),
                new TextSymbol("temporibus enim autem",
                    new MapColor(71, 150, 66),
                    new MapColor(209, 35, 209),
                        new Dimension(16.0269),
                    new MapFont(new Dimension(387.5597),
                            "Courier New",
                        MapFontStyle.Oblique,
                        FontWeight.Normal,
                        TextDecoration.None),
                        162.4118,
                    new MapColor(48, 71, 223),
                    new MapColor(230, 22, 71),
                        632.6234,
                    HorizontalAlignment.Right,
                        true,
                        777.5056,
                        new Dimension(282.6918),
                        true),
                    true,
                    "Phone = '555-555-5555'"),
            new Label(LabelPlacement.BelowAfter,
                    "alias",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    16633560.6448,
                    47415.3944,
                    true,
                    new Dimension(722.0019),
                new TextSymbol("doloremque quo laudantium",
                    new MapColor(245, 182, 148),
                    new MapColor(157, 211, 169),
                        new Dimension(755.3803),
                    new MapFont(new Dimension(758.2897),
                            "Arial",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        157.2599,
                    new MapColor(114, 38, 213),
                    new MapColor(12, 40, 205),
                        169.5528,
                    HorizontalAlignment.Left,
                        true,
                        663.0004,
                        new Dimension(963.5851),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await cSVLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await cSVLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("magni",
                SortOrder.Descending,
                    "ab"),
            new OrderedLayerOrderBy("molestiae",
                SortOrder.Ascending,
                    "sunt"),
            new OrderedLayerOrderBy("ratione",
                SortOrder.Descending,
                    "sit")];
        await cSVLayer.SetOrderBy(testOrderBy);
        var orderBy = await cSVLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "natus",
                    "vitae",
                    942.3916,
                    ["dolor",
                        "sit",
                        "harum",
                        "omnis"],
                    new DateTime(2005, 1, 23, 0, 15, 31),
                    "commodi",
                    "perferendis cum sapiente sed veritatis",
                new Extent(-109.8537,
                        -93.3967,
                        20.0776,
                        48.1129,
                        135.3229,
                        873.5638,
                        433.1360,
                        671.4431,
                    new SpatialReference(4,
                            "voluptates",
                            "aliquid",
                            "laudantium"),
                        true,
                        true),
                    ["cupiditate",
                        "sunt",
                        "at",
                        "est"],
                    "explicabo",
                    new DateTime(2007, 3, 2, 21, 40, 48),
                    "name",
                    858.5657);
        await cSVLayer.SetPortalItem(testPortalItem);
        var portalItem = await cSVLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.EqualInterval,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(28, 196, 159),
                            new MapColor(5, 1, 115)),
                        new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(68, 58, 217),
                            new MapColor(4, 171, 27)),
                        new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(236, 63, 138),
                            new MapColor(8, 230, 9)),
                        new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(38, 48, 229),
                            new MapColor(129, 252, 77))]),
                        955.7813,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(65.5802,
                                978.8092)],
                            "delectus",
                            "sunt",
                            "ipsa"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(460.5707,
                                209.4728)],
                            "placeat",
                            "qui",
                            "enim"),
                        ["quasi",
                            "eaque",
                            "eveniet"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "aut",
                        true,
                    LengthUnit.Yards,
                        773.3269,
                        752.7485,
                        433.6852,
                        977.7251),
                new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0",
                    new Dimension(545.0996),
                    new Dimension(934.5169),
                    new Dimension(619.9267),
                    new Dimension(661.2474),
                    118.0082,
                    -61.8717,
                    new Outline(new MapColor(95, 73, 152),
                        new Dimension(475.4073),
                        SimpleLineSymbolStyle.LongDashDot,
                        Cap.Butt,
                        Join.Miter,
                        new LineSymbolMarker(new MapColor(240, 154, 123),
                            LinePlacement.End,
                            LineSymbolMarkerStyle.Arrow),
                        867.7218),
                    new MapColor(52, 167, 13)),
                    "aut",
                    new DefaultSymbol(),
                    "quod",
                    "cupiditate",
                    "laboriosam",
                    "excepturi",
                new UniqueValueRendererLegendOptions("quos provident praesentium"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("ipsum",
                        new TextSymbol("eaque quibusdam blanditiis",
                            new MapColor(35, 74, 61),
                            new MapColor(92, 237, 7),
                                new Dimension(874.6894),
                            new MapFont(new Dimension(297.4425),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                911.4904,
                            new MapColor(73, 25, 21),
                            new MapColor(235, 17, 109),
                                297.2487,
                            HorizontalAlignment.Center,
                                true,
                                426.5089,
                                new Dimension(77.4164),
                                true),
                        [new UniqueValue("quia",
                                "non",
                                "eius"),
                        new UniqueValue("ratione",
                                "quis",
                                "architecto"),
                        new UniqueValue("illo",
                                "reiciendis",
                                "quasi")])],
                        "maiores"),
                new UniqueValueGroup([new UniqueValueClass("ea",
                        new TextSymbol("laboriosam quidem temporibus",
                            new MapColor(164, 217, 248),
                            new MapColor(100, 220, 187),
                                new Dimension(941.4800),
                            new MapFont(new Dimension(346.4512),
                                    "Helvetica",
                                MapFontStyle.Oblique,
                                FontWeight.Bold,
                                TextDecoration.Underline),
                                14.1040,
                            new MapColor(176, 144, 128),
                            new MapColor(245, 252, 196),
                                769.1517,
                            HorizontalAlignment.Center,
                                true,
                                220.7271,
                                new Dimension(866.7646),
                                true),
                        [new UniqueValue("illo",
                                "unde",
                                "et"),
                        new UniqueValue("dolore",
                                "et",
                                "perferendis")]),
                    new UniqueValueClass("nostrum",
                        new TextSymbol("a laudantium aut",
                            new MapColor(100, 98, 53),
                            new MapColor(80, 14, 164),
                                new Dimension(411.2816),
                            new MapFont(new Dimension(543.8813),
                                    "Garamond",
                                MapFontStyle.Normal,
                                FontWeight.Bold,
                                TextDecoration.Underline),
                                339.9859,
                            new MapColor(120, 54, 99),
                            new MapColor(200, 214, 217),
                                801.4800,
                            HorizontalAlignment.Center,
                                true,
                                956.6062,
                                new Dimension(530.0381),
                                true),
                        [new UniqueValue("a",
                                "id",
                                "neque"),
                        new UniqueValue("expedita",
                                "nemo",
                                "fuga"),
                        new UniqueValue("id",
                                "ut",
                                "omnis"),
                        new UniqueValue("dolor",
                                "repellat",
                                "ab")]),
                    new UniqueValueClass("voluptatem",
                        new TextSymbol("dicta ut fuga",
                            new MapColor(222, 228, 66),
                            new MapColor(106, 32, 194),
                                new Dimension(357.9871),
                            new MapFont(new Dimension(950.7577),
                                    "Georgia",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                384.0922,
                            new MapColor(34, 186, 13),
                            new MapColor(87, 22, 232),
                                25.5648,
                            HorizontalAlignment.Right,
                                true,
                                393.1952,
                                new Dimension(522.4844),
                                true),
                        [new UniqueValue("odit",
                                "adipisci",
                                "pariatur"),
                        new UniqueValue("non",
                                "optio",
                                "ea")]),
                    new UniqueValueClass("consequatur",
                        new TextSymbol("accusamus aut quia",
                            new MapColor(136, 88, 91),
                            new MapColor(50, 243, 247),
                                new Dimension(160.9309),
                            new MapFont(new Dimension(393.2868),
                                    "Bookman",
                                MapFontStyle.Italic,
                                FontWeight.Lighter,
                                TextDecoration.None),
                                162.7994,
                            new MapColor(67, 191, 192),
                            new MapColor(185, 137, 56),
                                94.9586,
                            HorizontalAlignment.Left,
                                true,
                                54.7575,
                                new Dimension(845.8017),
                                true),
                        [new UniqueValue("molestias",
                                "exercitationem",
                                "quia"),
                        new UniqueValue("laudantium",
                                "rem",
                                "magni"),
                        new UniqueValue("eaque",
                                "ut",
                                "vel"),
                        new UniqueValue("aperiam",
                                "numquam",
                                "ab")])],
                        "enim")],
                [new UniqueValueInfo("eos",
                    new TextSymbol("sint nam ut",
                        new MapColor(77, 249, 216),
                        new MapColor(183, 250, 87),
                            new Dimension(944.4450),
                        new MapFont(new Dimension(663.6670),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            832.2983,
                        new MapColor(212, 215, 218),
                        new MapColor(252, 247, 41),
                            749.2826,
                        HorizontalAlignment.Left,
                            true,
                            485.1212,
                            new Dimension(440.7517),
                            true),
                        "deleniti"),
                new UniqueValueInfo("et",
                    new TextSymbol("repudiandae id repudiandae",
                        new MapColor(148, 7, 245),
                        new MapColor(112, 71, 152),
                            new Dimension(267.6518),
                        new MapFont(new Dimension(267.1077),
                                "Georgia",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.LineThrough),
                            720.9945,
                        new MapColor(69, 35, 125),
                        new MapColor(227, 138, 182),
                            160.0139,
                        HorizontalAlignment.Left,
                            true,
                            373.8250,
                            new Dimension(968.8815),
                            true),
                        "distinctio"),
                new UniqueValueInfo("hic",
                    new TextSymbol("cumque dicta provident",
                        new MapColor(249, 180, 161),
                        new MapColor(112, 21, 12),
                            new Dimension(323.3338),
                        new MapFont(new Dimension(934.0273),
                                "Helvetica",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            357.6766,
                        new MapColor(38, 188, 218),
                        new MapColor(79, 13, 51),
                            541.2705,
                        HorizontalAlignment.Left,
                            true,
                            477.0582,
                            new Dimension(715.3312),
                            true),
                        "ea")],
                    "perferendis",
                    "ducimus mollitia et");
        await cSVLayer.SetRenderer(testRenderer);
        var renderer = await cSVLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "sed",
                    "exercitationem",
                    "laudantium");
        await cSVLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await cSVLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2012, 6, 2, 15, 36, 0),
                    new DateTime(2022, 4, 24, 18, 56, 14));
        await cSVLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await cSVLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("veritatis",
                    "rerum",
                new TimeExtent(new DateTime(2016, 2, 10, 21, 7, 48),
                        new DateTime(2012, 1, 10, 4, 0, 47)),
                new TimeInterval(TemporalTime.Milliseconds,
                        568.1274),
                    [new DateTime(2018, 4, 13, 5, 20, 53),
                        new DateTime(2010, 10, 10, 6, 27, 9),
                        new DateTime(2008, 10, 18, 10, 15, 47),
                        new DateTime(2008, 5, 9, 7, 45, 22)],
                    "Europe/Moscow",
                    "consequatur");
        await cSVLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await cSVLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Milliseconds,
                    795.7720);
        await cSVLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await cSVLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2009, 6, 20, 16, 44, 48),
                    new DateTime(2010, 11, 15, 4, 26, 46));
        await cSVLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await cSVLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
