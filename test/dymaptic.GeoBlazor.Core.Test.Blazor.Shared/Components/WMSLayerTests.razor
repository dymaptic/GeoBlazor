@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@* ReSharper disable once InconsistentNaming *@

@code {

    [TestMethod]
    public async Task TestCanRenderWMSLayerWithFeatureInfoFormats(Action renderHandler)
    {
#pragma warning disable GeoBlazor_Untested
        WMSLayer? layer = null;
        SceneView? sceneView = null;
        bool layerViewCreated = false;

        void OnLayerViewCreated(LayerViewCreateEvent createEvent)
        {
            Assert.IsInstanceOfType<WMSLayer>(createEvent.Layer);
            WMSLayer createdLayer = (WMSLayer)createEvent.Layer;
            Assert.AreEqual(layer?.Id, createdLayer.Id);
            layerViewCreated = true;
        }

        AddMapRenderFragment(@<SceneView @ref="sceneView"
                                         class="map-view"
                                         OnViewRendered="renderHandler"
                                         OnLayerViewCreate="OnLayerViewCreated">
                <Map>
                    <WMSLayer @ref="layer"
                              Url="https://ows.terrestris.de/osm/service">
                        <WMSSublayer Name="OSM-WMS"/>
                    </WMSLayer>
                </Map>
            </SceneView>);
        await WaitForMapToRender();
        int tries = 100;

        while (!layerViewCreated && tries > 0)
        {
            await Task.Delay(100);
            tries--;
        }

        Assert.IsTrue(layerViewCreated);
        await AssertJavaScript("assertLayerExists", args: "wms");
#pragma warning restore GeoBlazor_Untested
    }

}