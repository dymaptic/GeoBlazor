@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGraphicsLayer(Action renderHandler)
    {
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GraphicsLayer 
                        Title="@("est est eaque")"
                        Opacity="@(0.8737)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        PersistenceEnabled="@(true)"
                        MinScale="@(1719.7102)"
                        MaxScale="@(31354968.6214)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        BlendMode="@(BlendMode.SourceIn)"
                        Effect="@(new Effect("aut",
                            13793323.9995))">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 9, 11, 19, 8, 19))"
                            End="@(new DateTime(2014, 11, 7, 22, 0, 49))">
                        </TimeExtent>
                        <Graphic 
                            Geometry="@(new Point(93.6906,
                                    -61.9571,
                                    67.0289,
                                    35.0813,
                                    731.6065,
                                new SpatialReference(2,
                                        "eum",
                                        "tempora",
                                        "beatae"),
                                    true,
                                    true,
                                    187.4940))"
                            Symbol="@(new TextSymbol("at amet consequatur",
                                new MapColor(3, 162, 248),
                                new MapColor(249, 146, 86),
                                    new Dimension(345.7495),
                                new MapFont(new Dimension(39.6388),
                                        "Palatino",
                                    MapFontStyle.Italic,
                                    FontWeight.Bolder,
                                    TextDecoration.None),
                                    499.4977,
                                new MapColor(124, 126, 59),
                                new MapColor(148, 245, 142),
                                    952.4817,
                                HorizontalAlignment.Center,
                                    true,
                                    338.5358,
                                    new Dimension(527.4017),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("quos in et",
                                    "aut",
                                    ["id"],
                                [new FieldInfo("token",
                                        "voluptas",
                                        "consectetur",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.Year),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("status",
                                        "alias",
                                        "quam",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.LongDateLongTime24),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                [new AttachmentsPopupContent("illo dolores hic",
                                        "reiciendis quo ut esse",
                                        AttachmentsPopupContentDisplayType.Auto),
                                new MediaPopupContent("et asperiores dolores",
                                        "enim exercitationem",
                                    [new ImageMediaInfo("quibusdam quaerat illo",
                                            "amet",
                                            "non cum nesciunt",
                                        new ImageMediaInfoValue("https://justyn.name",
                                                "http://ricky.net"),
                                            873.8258),
                                    new ImageMediaInfo("natus et non",
                                            "nihil",
                                            "libero voluptas quam",
                                        new ImageMediaInfoValue("http://francisco.com",
                                                "https://victor.net"),
                                            574.4719)],
                                        6)],
                                [new ExpressionInfo("return $feature['FieldName'];",
                                        "id",
                                        "ipsa quis suscipit",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "email",
                                        "aut officia nisi",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("doloribus enim ut",
                                        "https://picsum.photos/640/480/?image=388",
                                        "1145766d-6a20-ae2f-a7ff-867a202a52f9",
                                        () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                                        "password",
                                        true,
                                        true,
                                        true,
                                        "atque")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("non")"
                            AggregateGeometries="@("animi")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "totam",
                                7))">
                        </Graphic>
                        <Extent 
                            Xmax="@(116.0954)"
                            Xmin="@(144.9560)"
                            Ymax="@(79.2425)"
                            Ymin="@(-88.3359)"
                            Zmax="@(946.0927)"
                            Zmin="@(204.2517)"
                            Mmax="@(769.1807)"
                            Mmin="@(425.9223)"
                            SpatialReference="@(new SpatialReference(5,
                                    "omnis",
                                    "illum",
                                    "voluptatem"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                        <GraphicsLayerElevationInfo 
                            FeatureExpressionInfo="@(new GraphicsLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "veritatis saepe dolorem"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(491.1953)"
                            Unit="@(ElevationUnit.Centimeters)">
                        </GraphicsLayerElevationInfo>
                    </GraphicsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(graphicsLayer!);
        await AssertJavaScript("assertLayerExists", args: "graphics");
        await graphicsLayer.AddMany([new Graphic(new Polyline([new MapPath([new MapPoint([440.7708]),
                        new MapPoint([18.5753])])],
                    new SpatialReference(9,
                            "omnis",
                            "explicabo",
                            "dolor"),
                        true,
                        true),
                new TextSymbol("eaque ducimus vel",
                    new MapColor(185, 80, 214),
                    new MapColor(17, 213, 229),
                        new Dimension(150.0029),
                    new MapFont(new Dimension(459.0114),
                            "Verdana",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        35.7838,
                    new MapColor(52, 124, 102),
                    new MapColor(122, 115, 22),
                        159.7493,
                    HorizontalAlignment.Right,
                        true,
                        563.9087,
                        new Dimension(876.2149),
                        true),
                new PopupTemplate("ullam unde praesentium",
                        "eius",
                        ["ullam",
                            "consectetur"],
                    [new FieldInfo("createdAt",
                            "excepturi",
                            "explicabo",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.LongDateShortTime),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("group",
                            "aut",
                            "dignissimos",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.DayShortMonthYearShortTime24),
                            true,
                            true,
                        StatisticType.Avg)],
                    [new FieldsPopupContent([new FieldInfo("createdAt",
                                "odio",
                                "facere",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("password",
                                "dolores",
                                "id",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.DayShortMonthYearLongTime24),
                                true,
                                true,
                            StatisticType.Min)],
                            "quisquam maxime",
                            "impedit voluptatem tenetur"),
                    new MediaPopupContent("reiciendis sit id",
                            "dolores odio possimus",
                        [new BarChartMediaInfo("qui dolor sed",
                                "porro",
                                "illum esse id",
                            new ChartMediaInfoValue(["amet",
                                    "libero"],
                                    "ipsum",
                                    "omnis",
                                [new ChartMediaInfoValueSeries("title",
                                        "corporis",
                                        808.5384),
                                new ChartMediaInfoValueSeries("name",
                                        "nihil",
                                        467.8392)],
                                [new MapColor(160, 205, 93)]))],
                            4)],
                    [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "email",
                            "facilis reprehenderit labore",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("dignissimos quis nihil",
                            "https://picsum.photos/640/480/?image=644",
                            "84b2b0cd-0cb4-9320-ae11-c477c3e2c568",
                            () => { Console.WriteLine("occaecati"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "modi")]),
                    new AttributesDictionary(),
                    true,
                    "recusandae",
                    "quisquam",
                    new GraphicOrigin(Guid.NewGuid(),
                        "quia",
                        7))]);
        await graphicsLayer.RemoveAll();
        await graphicsLayer.RemoveMany([new Graphic(new Polyline([new MapPath([new MapPoint([484.2151,
                            357.9457])])],
                    new SpatialReference(4,
                            "itaque",
                            "reiciendis",
                            "vel"),
                        true,
                        true),
                new TextSymbol("occaecati adipisci rem",
                    new MapColor(228, 107, 154),
                    new MapColor(254, 186, 155),
                        new Dimension(495.1176),
                    new MapFont(new Dimension(854.2726),
                            "Times New Roman",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.None),
                        662.6456,
                    new MapColor(71, 230, 23),
                    new MapColor(246, 198, 128),
                        76.6593,
                    HorizontalAlignment.Center,
                        true,
                        861.2990,
                        new Dimension(570.1184),
                        true),
                new PopupTemplate("iure omnis quo",
                        "aliquam",
                        ["non",
                            "ut"],
                    [new FieldInfo("name",
                            "et",
                            "eaque",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.LongDate),
                            true,
                            true,
                        StatisticType.Avg)],
                    [new RelationshipPopupContent("veniam non eveniet",
                            "dignissimos maiores sapiente",
                            5,
                            "explicabo",
                        [new RelatedRecordsInfoFieldOrder("nesciunt",
                            OrderBy.Asc),
                        new RelatedRecordsInfoFieldOrder("hic",
                            OrderBy.Asc)],
                            9)],
                    [new ExpressionInfo("return $feature.Name;",
                            "name",
                            "fugit sed voluptatem",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature['FieldName'];",
                            "password",
                            "sed adipisci aut",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("vitae iusto veritatis",
                            "https://picsum.photos/640/480/?image=801",
                            "70955e47-86de-d9c7-4b92-f61eb1af84cb",
                            () => { Console.WriteLine("architecto"); return Task.CompletedTask; },
                            "id",
                            true,
                            true,
                            true,
                            "quam")]),
                    new AttributesDictionary(),
                    true,
                    "sed",
                    "cum",
                    new GraphicOrigin(Guid.NewGuid(),
                        "quae",
                        2))]);
        ListMode testListMode = ListMode.Hide;
        await graphicsLayer.SetListMode(testListMode);
        var listMode = await graphicsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.VividLight;
        await graphicsLayer.SetBlendMode(testBlendMode);
        var blendMode = await graphicsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GraphicsLayerElevationInfo testElevationInfo = new GraphicsLayerElevationInfo(new GraphicsLayerElevationInfoFeatureExpressionInfo("var length = Geometry($feature).length; return length;",
                        "sit vero itaque"),
                ElevationInfoMode.AbsoluteHeight,
                    684.7168,
                ElevationUnit.Feet);
        await graphicsLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await graphicsLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        Extent testFullExtent = new Extent(-17.0767,
                    93.2188,
                    7.2795,
                    -11.9722,
                    695.2931,
                    925.6548,
                    548.2246,
                    237.8523,
                new SpatialReference(3,
                        "dolores",
                        "magnam",
                        "ipsum"),
                    true,
                    true);
        await graphicsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await graphicsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 1, 7, 5, 43, 47),
                    new DateTime(2022, 11, 3, 21, 24, 35));
        await graphicsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await graphicsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
