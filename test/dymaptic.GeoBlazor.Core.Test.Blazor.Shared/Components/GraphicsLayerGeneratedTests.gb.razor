@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGraphicsLayer(Action renderHandler)
    {
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GraphicsLayer 
                        Title="@("culpa ipsum aut")"
                        Opacity="@(0.1619)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        PersistenceEnabled="@(true)"
                        MinScale="@(12634.7449)"
                        MaxScale="@(24151872.9034)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        BlendMode="@(BlendMode.SoftLight)"
                        Effect="@(new Effect("quisquam",
                            12570608.6805))"
                        FullExtent="@(new Extent(-50.5439,
                                164.9269,
                                27.5920,
                                -49.2889,
                                892.9777,
                                386.5085,
                                697.4751,
                                522.7027,
                            new SpatialReference(1,
                                    "impedit",
                                    "exercitationem",
                                    "assumenda"),
                                true,
                                true))">
                        <TimeExtent 
                            Start="@(new DateTime(2004, 3, 9, 8, 18, 3))"
                            End="@(new DateTime(2017, 6, 19, 3, 30, 34))">
                        </TimeExtent>
                        <Graphic 
                            Geometry="@(new Extent(-127.6308,
                                    -83.9551,
                                    -45.0825,
                                    79.2216,
                                    106.4217,
                                    425.2483,
                                    896.0550,
                                    192.2574,
                                new SpatialReference(4,
                                        "atque",
                                        "velit",
                                        "deleniti"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("aut ut culpa",
                                new MapColor(156, 179, 157),
                                new MapColor(1, 226, 212),
                                    new Dimension(497.3265),
                                new MapFont(new Dimension(528.9442),
                                        "Verdana",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bolder,
                                    TextDecoration.None),
                                    65.9443,
                                new MapColor(243, 95, 196),
                                new MapColor(15, 246, 180),
                                    46.2022,
                                HorizontalAlignment.Center,
                                    true,
                                    133.8143,
                                    new Dimension(107.6532),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("illo quas similique",
                                    "nihil",
                                    ["ex",
                                        "asperiores"],
                                [new FieldInfo("status",
                                        "fuga",
                                        "est",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.ShortDateLeLongTime),
                                        true,
                                        true,
                                    StatisticType.Var),
                                new FieldInfo("updatedAt",
                                        "architecto",
                                        "et",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.DayShortMonthYearLongTime24),
                                        true,
                                        true,
                                    StatisticType.Avg)],
                                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                                            "dolores",
                                            "commodi enim at"))],
                                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                        "token",
                                        "quod modi ab",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("return $feature['FieldName'];",
                                        "status",
                                        "quidem sit sint",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "status",
                                        "voluptas voluptatem dolores",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                [new ActionButton("explicabo saepe qui",
                                        "https://picsum.photos/640/480/?image=733",
                                        "12626df8-371a-6292-d23a-0adb29ff0fdb",
                                        () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                        "email",
                                        true,
                                        true,
                                        true,
                                        "exercitationem"),
                                new ActionButton("voluptates adipisci vero",
                                        "https://picsum.photos/640/480/?image=49",
                                        "0fc492ec-3cb5-005c-7490-9a80af25b835",
                                        () => { Console.WriteLine("dolorem"); return Task.CompletedTask; },
                                        "createdAt",
                                        true,
                                        true,
                                        true,
                                        "accusantium"),
                                new ActionButton("amet voluptas aut",
                                        "https://picsum.photos/640/480/?image=1032",
                                        "fefb97c9-b349-205c-e27a-13d695edadfe",
                                        () => { Console.WriteLine("voluptatibus"); return Task.CompletedTask; },
                                        "status",
                                        true,
                                        true,
                                        true,
                                        "occaecati"),
                                new ActionButton("provident nihil veritatis",
                                        "https://picsum.photos/640/480/?image=164",
                                        "565bd858-c93a-2cc5-b824-e4e72bbecb24",
                                        () => { Console.WriteLine("repellat"); return Task.CompletedTask; },
                                        "status",
                                        true,
                                        true,
                                        true,
                                        "tempora")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("minima")"
                            AggregateGeometries="@("magni")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "quas",
                                5))">
                        </Graphic>
                        <GraphicsLayerElevationInfo 
                            FeatureExpressionInfo="@(new GraphicsLayerElevationInfoFeatureExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "facilis blanditiis nobis"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(726.5646)"
                            Unit="@(ElevationUnit.NauticalMiles)">
                        </GraphicsLayerElevationInfo>
                    </GraphicsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(graphicsLayer!);
        await AssertJavaScript("assertLayerExists", args: "graphics");
        await graphicsLayer.AddMany([new Graphic(new Polygon([new MapPath([new MapPoint([581.2743,
                            744.1327]),
                        new MapPoint([618.1736,
                            918.7750,
                            69.7653]),
                        new MapPoint([169.1789,
                            649.1500,
                            837.0984,
                            444.9799])]),
                        new MapPath([new MapPoint([367.9873,
                                405.8632]),
                            new MapPoint([433.6920,
                                992.3776]),
                            new MapPoint([653.9539,
                                904.2929]),
                            new MapPoint([99.1193,
                                741.3254,
                                69.3934,
                                326.7114])])],
                    new SpatialReference(6,
                            "et",
                            "minus",
                            "expedita"),
                    new Point(-154.2594,
                            85.1627,
                            0.4276,
                            -40.2961,
                            629.5834,
                        new SpatialReference(3,
                                "perferendis",
                                "sint",
                                "ab"),
                            true,
                            true,
                            963.9152),
                        true,
                        true,
                        true),
                new TextSymbol("excepturi cumque quia",
                    new MapColor(219, 246, 17),
                    new MapColor(243, 232, 48),
                        new Dimension(523.5357),
                    new MapFont(new Dimension(988.5910),
                            "Georgia",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.Underline),
                        493.4603,
                    new MapColor(103, 103, 239),
                    new MapColor(197, 19, 189),
                        509.3914,
                    HorizontalAlignment.Right,
                        true,
                        682.4465,
                        new Dimension(562.5053),
                        true),
                new PopupTemplate("qui voluptatem dolores",
                        "nulla",
                        ["perspiciatis",
                            "nam",
                            "doloribus",
                            "in"],
                    [new FieldInfo("status",
                            "doloribus",
                            "non",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLongTime24),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("comment",
                            "error",
                            "magni",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLe),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("id",
                            "dolores",
                            "placeat",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.DayShortMonthYearLongTime24),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("name",
                            "dolores",
                            "id",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.DayShortMonthYearShortTime24),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new TextPopupContent("officiis sunt culpa"),
                    new FieldsPopupContent([new FieldInfo("token",
                                "neque",
                                "aut",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("email",
                                "repudiandae",
                                "soluta",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Max)],
                            "voluptatem aspernatur veritatis maxime fugiat",
                            "quis qui nemo"),
                    new RelationshipPopupContent("deleniti et et",
                            "sit modi est aut magnam aut quia",
                            5,
                            "sit",
                        [new RelatedRecordsInfoFieldOrder("non",
                            OrderBy.Asc)],
                            4)],
                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "name",
                            "et ut repellat",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "password",
                            "accusantium quibusdam et",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "category",
                            "ab maiores possimus",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "email",
                            "minima soluta non",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                    [new ActionButton("doloremque sit adipisci",
                            "https://picsum.photos/640/480/?image=832",
                            "b287016a-06e7-7596-b574-b2ee12fb8e0e",
                            () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                            "password",
                            true,
                            true,
                            true,
                            "itaque"),
                    new ActionToggle("eos et et",
                            "72d24a14-60b4-bc99-16e4-b33b26c4837f",
                            () => { Console.WriteLine("similique"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "phone",
                            "accusamus"),
                    new ActionToggle("velit et et",
                            "a7abbdb0-9da3-e08f-66a7-3fee90e4c323",
                            () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "token",
                            "iure"),
                    new ActionToggle("nihil sint molestias",
                            "d7c50176-3bf7-73e4-9fc4-8b02242eb8a5",
                            () => { Console.WriteLine("maiores"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "createdAt",
                            "dicta")]),
                    new AttributesDictionary(),
                    true,
                    "qui",
                    "repellendus",
                    new GraphicOrigin(Guid.NewGuid(),
                        "expedita",
                        6))]);
        await graphicsLayer.RemoveAll();
        await graphicsLayer.RemoveMany([new Graphic(new Extent(122.6242,
                        11.0238,
                        51.7965,
                        -19.0579,
                        369.9598,
                        207.3525,
                        553.3679,
                        290.1313,
                    new SpatialReference(9,
                            "molestias",
                            "quisquam",
                            "et"),
                        true,
                        true),
                new TextSymbol("officiis omnis voluptate",
                    new MapColor(216, 4, 13),
                    new MapColor(183, 55, 208),
                        new Dimension(307.3583),
                    new MapFont(new Dimension(656.0066),
                            "Georgia",
                        MapFontStyle.Italic,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        333.1111,
                    new MapColor(193, 94, 178),
                    new MapColor(24, 34, 37),
                        764.8597,
                    HorizontalAlignment.Center,
                        true,
                        837.6691,
                        new Dimension(889.6078),
                        true),
                new PopupTemplate("hic tempore praesentium",
                        "iusto",
                        ["itaque",
                            "dolor",
                            "est",
                            "qui"],
                    [new FieldInfo("phone",
                            "distinctio",
                            "nihil",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.DayShortMonthYearLongTime),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("phone",
                            "dolorem",
                            "dolorem",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.Year),
                            true,
                            true,
                        StatisticType.Min)],
                    [new RelationshipPopupContent("sed impedit expedita",
                            "saepe quos velit dolore",
                            5,
                            "minima",
                        [new RelatedRecordsInfoFieldOrder("ut",
                            OrderBy.Asc),
                        new RelatedRecordsInfoFieldOrder("harum",
                            OrderBy.Asc),
                        new RelatedRecordsInfoFieldOrder("non",
                            OrderBy.Desc)],
                            3),
                    new RelationshipPopupContent("officia deleniti ut",
                            "voluptatum et corporis incidunt quia dolore",
                            6,
                            "culpa",
                        [new RelatedRecordsInfoFieldOrder("ut",
                            OrderBy.Desc),
                        new RelatedRecordsInfoFieldOrder("blanditiis",
                            OrderBy.Asc)],
                            4),
                    new RelationshipPopupContent("fuga repellat enim",
                            "fugiat et aut qui cupiditate aut veniam",
                            8,
                            "voluptatibus",
                        [new RelatedRecordsInfoFieldOrder("quam",
                            OrderBy.Desc),
                        new RelatedRecordsInfoFieldOrder("dolores",
                            OrderBy.Asc),
                        new RelatedRecordsInfoFieldOrder("et",
                            OrderBy.Asc)],
                            6)],
                    [new ExpressionInfo("return $feature['FieldName'];",
                            "avatar",
                            "velit ut et",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "avatar",
                            "eos quisquam et",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "updatedAt",
                            "illo porro alias",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                    [new ActionToggle("perferendis esse repudiandae",
                            "225f4679-c57d-cc1a-c59e-708d335304d7",
                            () => { Console.WriteLine("inventore"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "updatedAt",
                            "eos"),
                    new ActionToggle("et qui nemo",
                            "d23a1622-47d9-fc36-ed52-54e6ec57143d",
                            () => { Console.WriteLine("repellat"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "phone",
                            "unde"),
                    new ActionButton("omnis et exercitationem",
                            "https://picsum.photos/640/480/?image=28",
                            "67650f71-298f-1788-8b48-19a0b725572a",
                            () => { Console.WriteLine("molestiae"); return Task.CompletedTask; },
                            "password",
                            true,
                            true,
                            true,
                            "consequatur")]),
                    new AttributesDictionary(),
                    true,
                    "tempore",
                    "veniam",
                    new GraphicOrigin(Guid.NewGuid(),
                        "nihil",
                        1))]);
        ListMode testListMode = ListMode.Hide;
        await graphicsLayer.SetListMode(testListMode);
        var listMode = await graphicsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Screen;
        await graphicsLayer.SetBlendMode(testBlendMode);
        var blendMode = await graphicsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GraphicsLayerElevationInfo testElevationInfo = new GraphicsLayerElevationInfo(new GraphicsLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "animi aliquam ipsa"),
                ElevationInfoMode.AbsoluteHeight,
                    47.6702,
                ElevationUnit.Miles);
        await graphicsLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await graphicsLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        Extent testFullExtent = new Extent(-81.3727,
                    -111.7160,
                    -58.5073,
                    -20.5085,
                    277.9141,
                    462.3607,
                    414.1841,
                    542.6611,
                new SpatialReference(7,
                        "neque",
                        "nostrum",
                        "porro"),
                    true,
                    true);
        await graphicsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await graphicsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2016, 7, 23, 8, 36, 40),
                    new DateTime(2012, 7, 19, 21, 13, 10));
        await graphicsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await graphicsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
