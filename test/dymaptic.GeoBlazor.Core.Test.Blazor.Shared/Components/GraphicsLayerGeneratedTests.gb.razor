@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGraphicsLayer(Action renderHandler)
    {
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GraphicsLayer 
                        Title="@("error quia reiciendis")"
                        Opacity="@(0.6959)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        PersistenceEnabled="@(true)"
                        MinScale="@(37832.1023)"
                        MaxScale="@(32069236.3787)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        BlendMode="@(BlendMode.Normal)"
                        Effect="@(new Effect("voluptatem",
                            1104743.0268))"
                        FullExtent="@(new Extent(154.2935,
                                -111.0924,
                                -43.1009,
                                -61.1405,
                                44.4352,
                                553.6586,
                                501.2913,
                                705.5696,
                            new SpatialReference(5,
                                    "sed",
                                    "natus",
                                    "ut"),
                                true,
                                true))">
                        <TimeExtent 
                            Start="@(new DateTime(2014, 5, 3, 7, 2, 26))"
                            End="@(new DateTime(2012, 7, 7, 19, 53, 23))">
                        </TimeExtent>
                        <Graphic 
                            Geometry="@(new Polyline([new MapPath([new MapPoint([665.0549,
                                        395.3018]),
                                    new MapPoint([728.3793,
                                        365.8938,
                                        756.9898,
                                        650.9614]),
                                    new MapPoint([486.5889,
                                        259.2258,
                                        332.7736,
                                        257.0121])]),
                                    new MapPath([new MapPoint([101.2101,
                                            443.6781]),
                                        new MapPoint([891.1109,
                                            878.5399,
                                            604.5614,
                                            731.2471])]),
                                    new MapPath([new MapPoint([190.5150,
                                            232.8262]),
                                        new MapPoint([766.7381,
                                            829.3311,
                                            30.9362,
                                            106.6896]),
                                        new MapPoint([138.2986,
                                            904.9392,
                                            703.9020,
                                            740.5678]),
                                        new MapPoint([349.2573,
                                            730.9067,
                                            545.1922])]),
                                    new MapPath([new MapPoint([64.9828,
                                            962.5709,
                                            903.3942,
                                            521.6666]),
                                        new MapPoint([701.0249,
                                            429.9546,
                                            322.0456,
                                            798.4187]),
                                        new MapPoint([51.5245,
                                            559.8264,
                                            809.2276,
                                            244.4673]),
                                        new MapPoint([429.2434,
                                            344.5872,
                                            924.5999,
                                            813.0680])])],
                                new SpatialReference(8,
                                        "et",
                                        "eius",
                                        "sit"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("perspiciatis quia ducimus",
                                new MapColor(190, 14, 128),
                                new MapColor(197, 158, 70),
                                    new Dimension(267.8791),
                                new MapFont(new Dimension(855.2282),
                                        "Times New Roman",
                                    MapFontStyle.Italic,
                                    FontWeight.Normal,
                                    TextDecoration.LineThrough),
                                    279.2399,
                                new MapColor(71, 144, 166),
                                new MapColor(27, 99, 18),
                                    642.5779,
                                HorizontalAlignment.Left,
                                    true,
                                    285.1910,
                                    new Dimension(390.3930),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("ullam tempore fuga",
                                    "fuga",
                                    ["enim",
                                        "ipsam",
                                        "a"],
                                [new FieldInfo("comment",
                                        "voluptatem",
                                        "perspiciatis",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.ShortDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("name",
                                        "non",
                                        "voluptatem",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.ShortDate),
                                        true,
                                        true,
                                    StatisticType.Stddev),
                                new FieldInfo("phone",
                                        "numquam",
                                        "molestiae",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.ShortDateLeShortTime),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                            "voluptas",
                                            "ut voluptas non")),
                                new TextPopupContent("nesciunt fugiat occaecati"),
                                new TextPopupContent("id in consequuntur")],
                                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "comment",
                                        "non aut vel",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                [new ActionToggle("ea rem officia",
                                        "768fdaff-f1ff-51da-852f-417a715527aa",
                                        () => { Console.WriteLine("in"); return Task.CompletedTask; },
                                        true,
                                        true,
                                        true,
                                        true,
                                        "createdAt",
                                        "asperiores"),
                                new ActionToggle("sed eveniet sit",
                                        "b45cf8ab-106a-e5f2-5ffc-a2139e2ba5b8",
                                        () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                        true,
                                        true,
                                        true,
                                        true,
                                        "password",
                                        "dolorem"),
                                new ActionButton("sint laudantium quos",
                                        "https://picsum.photos/640/480/?image=139",
                                        "788e4a90-3ce1-bcdb-a4b6-ab1ca7d14028",
                                        () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                                        "title",
                                        true,
                                        true,
                                        true,
                                        "id"),
                                new ActionButton("voluptatem suscipit id",
                                        "https://picsum.photos/640/480/?image=244",
                                        "ddb8da42-f2c6-5b0f-36e5-0340b8782856",
                                        () => { Console.WriteLine("cupiditate"); return Task.CompletedTask; },
                                        "token",
                                        true,
                                        true,
                                        true,
                                        "animi")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("voluptatibus")"
                            AggregateGeometries="@("qui")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "totam",
                                9))">
                        </Graphic>
                        <GraphicsLayerElevationInfo 
                            FeatureExpressionInfo="@(new GraphicsLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "aut enim cumque"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(605.6831)"
                            Unit="@(ElevationUnit.Kilometers)">
                        </GraphicsLayerElevationInfo>
                    </GraphicsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(graphicsLayer!);
        await AssertJavaScript("assertLayerExists", args: "graphics");
        await graphicsLayer.AddMany([new Graphic(new Polygon([new MapPath([new MapPoint([877.2423,
                            590.2821,
                            261.9976]),
                        new MapPoint([303.4438,
                            878.5284])]),
                        new MapPath([new MapPoint([95.1068,
                                315.8829,
                                329.1302,
                                908.5531]),
                            new MapPoint([850.4674,
                                197.0284,
                                863.6485])]),
                        new MapPath([new MapPoint([170.5241,
                                451.4196,
                                550.2359,
                                509.5107]),
                            new MapPoint([476.1393,
                                793.3838,
                                534.4977,
                                542.1997])])],
                    new SpatialReference(9,
                            "illum",
                            "necessitatibus",
                            "recusandae"),
                    new Point(-96.4652,
                            -68.7023,
                            -51.9013,
                            -28.3215,
                            458.8648,
                        new SpatialReference(1,
                                "modi",
                                "non",
                                "assumenda"),
                            true,
                            true,
                            855.1372),
                        true,
                        true,
                        true),
                new TextSymbol("ut ut repellat",
                    new MapColor(237, 64, 123),
                    new MapColor(97, 224, 67),
                        new Dimension(301.3294),
                    new MapFont(new Dimension(997.8773),
                            "Georgia",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        221.4218,
                    new MapColor(226, 211, 227),
                    new MapColor(122, 182, 128),
                        220.6189,
                    HorizontalAlignment.Right,
                        true,
                        995.5721,
                        new Dimension(311.2527),
                        true),
                new PopupTemplate("consequuntur ipsa alias",
                        "numquam",
                        ["officia",
                            "omnis",
                            "ut",
                            "praesentium"],
                    [new FieldInfo("email",
                            "non",
                            "non",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongMonthYear),
                            true,
                            true,
                        StatisticType.Avg)],
                    [new TextPopupContent("aut et laboriosam"),
                    new AttachmentsPopupContent("aut et labore",
                            "rerum dolores porro accusantium dolores similique",
                            AttachmentsPopupContentDisplayType.Preview),
                    new AttachmentsPopupContent("sint qui quia",
                            "reiciendis velit eos eum laboriosam quia",
                            AttachmentsPopupContentDisplayType.Preview),
                    new AttachmentsPopupContent("optio fuga rerum",
                            "commodi consequatur autem deserunt",
                            AttachmentsPopupContentDisplayType.Preview)],
                    [new ExpressionInfo("return Date();",
                            "comment",
                            "distinctio qui fuga",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return Date();",
                            "email",
                            "alias explicabo et",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "email",
                            "itaque deserunt voluptatum",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var area = Geometry($feature).area; return area;",
                            "group",
                            "consequuntur rem rerum",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                    [new ActionButton("mollitia autem molestias",
                            "https://picsum.photos/640/480/?image=667",
                            "a21c05ae-139a-c7ea-2432-57cc7c0c23c5",
                            () => { Console.WriteLine("nemo"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "ratione"),
                    new ActionToggle("rerum vel molestias",
                            "beb69115-7909-b4d9-471f-d3fba25f2947",
                            () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "avatar",
                            "dolor"),
                    new ActionToggle("voluptate ipsa natus",
                            "6b684cbf-6678-a2ae-492a-31468bc8fc0d",
                            () => { Console.WriteLine("illum"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "comment",
                            "quasi"),
                    new ActionToggle("quia et minus",
                            "1dc33ed1-55ac-0513-3715-4c2f8a2efaff",
                            () => { Console.WriteLine("iste"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "token",
                            "dolores")]),
                    new AttributesDictionary(),
                    true,
                    "non",
                    "voluptates",
                    new GraphicOrigin(Guid.NewGuid(),
                        "vitae",
                        8))]);
        await graphicsLayer.RemoveAll();
        await graphicsLayer.RemoveMany([new Graphic(new Polygon([new MapPath([new MapPoint([673.1929,
                            293.8099]),
                        new MapPoint([252.7457,
                            484.2901,
                            312.0360,
                            179.5909]),
                        new MapPoint([392.0577,
                            112.3858,
                            15.4765,
                            80.4054])]),
                        new MapPath([new MapPoint([214.8063,
                                848.9345,
                                200.3998,
                                420.2939]),
                            new MapPoint([639.8351,
                                69.6079]),
                            new MapPoint([527.9027,
                                391.2874]),
                            new MapPoint([851.0627,
                                648.0228,
                                578.9010,
                                987.7052])])],
                    new SpatialReference(1,
                            "temporibus",
                            "dolor",
                            "architecto"),
                    new Point(155.9751,
                            -26.1933,
                            -143.8450,
                            -54.0691,
                            737.7613,
                        new SpatialReference(3,
                                "perferendis",
                                "commodi",
                                "culpa"),
                            true,
                            true,
                            289.1770),
                        true,
                        true,
                        true),
                new TextSymbol("ipsa sed delectus",
                    new MapColor(2, 222, 224),
                    new MapColor(201, 160, 191),
                        new Dimension(315.5110),
                    new MapFont(new Dimension(235.8762),
                            "Garamond",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.None),
                        762.2333,
                    new MapColor(59, 90, 191),
                    new MapColor(197, 2, 85),
                        640.8545,
                    HorizontalAlignment.Left,
                        true,
                        98.3221,
                        new Dimension(624.0277),
                        true),
                new PopupTemplate("aut accusamus dicta",
                        "qui",
                        ["non",
                            "voluptatem",
                            "nostrum",
                            "sequi"],
                    [new FieldInfo("id",
                            "iste",
                            "quisquam",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.LongMonthDayYearLongTime),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new TextPopupContent("unde molestiae necessitatibus"),
                    new TextPopupContent("qui nemo dolores"),
                    new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                                "rem",
                                "libero illum non")),
                    new AttachmentsPopupContent("delectus et sit",
                            "consequatur dignissimos odit voluptate totam",
                            AttachmentsPopupContentDisplayType.Preview)],
                    [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "updatedAt",
                            "autem dolores et",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "phone",
                            "impedit ipsum debitis",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                            "group",
                            "dolor nihil nulla",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "updatedAt",
                            "nostrum aliquam tenetur",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                    [new ActionButton("earum perferendis voluptates",
                            "https://picsum.photos/640/480/?image=474",
                            "4c2f284f-aa4d-c43f-2116-5f74d928de03",
                            () => { Console.WriteLine("quae"); return Task.CompletedTask; },
                            "name",
                            true,
                            true,
                            true,
                            "ducimus"),
                    new ActionToggle("quia delectus officia",
                            "75ec2f30-3df7-12bf-60fd-d4ca2f05a290",
                            () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "name",
                            "incidunt"),
                    new ActionToggle("in illum exercitationem",
                            "64952a67-44dd-6470-abf0-5b28e3dc4a39",
                            () => { Console.WriteLine("optio"); return Task.CompletedTask; },
                            true,
                            true,
                            true,
                            true,
                            "updatedAt",
                            "magnam")]),
                    new AttributesDictionary(),
                    true,
                    "odio",
                    "at",
                    new GraphicOrigin(Guid.NewGuid(),
                        "atque",
                        2))]);
        ListMode testListMode = ListMode.Hide;
        await graphicsLayer.SetListMode(testListMode);
        var listMode = await graphicsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.DestinationOut;
        await graphicsLayer.SetBlendMode(testBlendMode);
        var blendMode = await graphicsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GraphicsLayerElevationInfo testElevationInfo = new GraphicsLayerElevationInfo(new GraphicsLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "aut minus sed"),
                ElevationInfoMode.OnTheGround,
                    968.8065,
                ElevationUnit.Millimeters);
        await graphicsLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await graphicsLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        Extent testFullExtent = new Extent(-136.6111,
                    -39.7709,
                    22.0630,
                    79.9823,
                    658.3997,
                    21.3777,
                    3.0977,
                    629.4615,
                new SpatialReference(7,
                        "quis",
                        "quaerat",
                        "debitis"),
                    true,
                    true);
        await graphicsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await graphicsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 2, 1, 6, 58, 23),
                    new DateTime(2011, 9, 16, 14, 40, 0));
        await graphicsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await graphicsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
