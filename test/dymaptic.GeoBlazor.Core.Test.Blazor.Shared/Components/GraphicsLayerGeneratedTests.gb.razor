@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGraphicsLayer(Action renderHandler)
    {
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GraphicsLayer 
                        Title="@("dolores consequuntur qui")"
                        Opacity="@(0.6941)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        PersistenceEnabled="@(true)"
                        MinScale="@(19394.6193)"
                        MaxScale="@(34165799.1238)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        BlendMode="@(BlendMode.Hue)"
                        Effect="@(new Effect("velit",
                            27900348.0689))">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 5, 26, 21, 27, 36))"
                            End="@(new DateTime(2015, 6, 25, 17, 40, 1))">
                        </TimeExtent>
                        <Graphic 
                            Geometry="@(new Extent(52.3966,
                                    29.4108,
                                    -27.3770,
                                    -80.3733,
                                    155.8944,
                                    790.5418,
                                    39.3120,
                                    739.5648,
                                new SpatialReference(8,
                                        "quia",
                                        "rerum",
                                        "fugit"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("in praesentium officia",
                                new MapColor(120, 78, 218),
                                new MapColor(163, 192, 179),
                                    new Dimension(699.6529),
                                new MapFont(new Dimension(25.8832),
                                        "Helvetica",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bolder,
                                    TextDecoration.None),
                                    184.6606,
                                new MapColor(143, 50, 211),
                                new MapColor(253, 146, 232),
                                    4.3031,
                                HorizontalAlignment.Left,
                                    true,
                                    869.9305,
                                    new Dimension(505.4463),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("consequatur laborum non",
                                    "dolorem",
                                    ["iure"],
                                [new FieldInfo("createdAt",
                                        "consectetur",
                                        "provident",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongDate),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("createdAt",
                                        "est",
                                        "eos",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.ShortDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Stddev)],
                                [new TextPopupContent("saepe voluptas officiis"),
                                new TextPopupContent("mollitia et harum")],
                                [new ExpressionInfo("return Date();",
                                        "group",
                                        "ea nostrum libero",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("non nam natus",
                                        "https://picsum.photos/640/480/?image=141",
                                        "2530c7c3-3e20-85f5-b9aa-8fa06758685a",
                                        () => { Console.WriteLine("nobis"); return Task.CompletedTask; },
                                        "group",
                                        true,
                                        true,
                                        true,
                                        "officia"),
                                        new ActionButton("corrupti sed fugiat",
                                            "https://picsum.photos/640/480/?image=883",
                                            "abea3c11-8433-0986-8737-57736295cf4e",
                                            () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                            "phone",
                                            true,
                                            true,
                                            true,
                                            "nam")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("nisi")"
                            AggregateGeometries="@("est")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "sint",
                                1))">
                        </Graphic>
                        <Extent 
                            Xmax="@(174.2448)"
                            Xmin="@(101.9006)"
                            Ymax="@(37.8535)"
                            Ymin="@(30.5866)"
                            Zmax="@(424.0795)"
                            Zmin="@(175.5712)"
                            Mmax="@(798.0265)"
                            Mmin="@(806.0366)"
                            SpatialReference="@(new SpatialReference(6,
                                    "repudiandae",
                                    "quaerat",
                                    "illum"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                        <GraphicsLayerElevationInfo 
                            FeatureExpressionInfo="@(new GraphicsLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "natus ex eaque"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(229.9615)"
                            Unit="@(ElevationUnit.Meters)">
                        </GraphicsLayerElevationInfo>
                    </GraphicsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(graphicsLayer!);
        await AssertJavaScript("assertLayerExists", args: "graphics");
        await graphicsLayer.AddMany([new Graphic(new Extent(-1.6804,
                        -129.2160,
                        -58.2536,
                        -80.7063,
                        619.8914,
                        148.0804,
                        866.6466,
                        890.0716,
                    new SpatialReference(5,
                            "nesciunt",
                            "et",
                            "et"),
                        true,
                        true),
                new TextSymbol("suscipit maxime quo",
                    new MapColor(116, 55, 165),
                    new MapColor(130, 30, 207),
                        new Dimension(947.4945),
                    new MapFont(new Dimension(144.9469),
                            "Helvetica",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.Underline),
                        793.9612,
                    new MapColor(100, 50, 133),
                    new MapColor(230, 50, 53),
                        720.2644,
                    HorizontalAlignment.Left,
                        true,
                        774.5051,
                        new Dimension(810.8922),
                        true),
                new PopupTemplate("ratione laboriosam dolore",
                        "itaque",
                        ["nam",
                            "tempora"],
                    [new FieldInfo("comment",
                            "id",
                            "dolor",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongDate),
                            true,
                            true,
                        StatisticType.Min),
                    new FieldInfo("createdAt",
                            "sunt",
                            "amet",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.ShortDateLongTime24),
                            true,
                            true,
                        StatisticType.Max)],
                    [new RelationshipPopupContent("non et eligendi",
                            "labore voluptates",
                            4,
                            "et",
                        [new RelatedRecordsInfoFieldOrder("et",
                            OrderBy.Desc)],
                            4),
                    new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "voluptatem",
                                "assumenda et dolore"))],
                    [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "group",
                            "doloribus voluptas cupiditate",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Population / $feature.Area;",
                            "category",
                            "reiciendis inventore impedit",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("praesentium molestiae voluptas",
                            "https://picsum.photos/640/480/?image=480",
                            "2ade7c81-6d4e-59b2-8126-cfc92109412e",
                            () => { Console.WriteLine("est"); return Task.CompletedTask; },
                            "status",
                            true,
                            true,
                            true,
                            "voluptatem")]),
                    new AttributesDictionary(),
                    true,
                    "placeat",
                    "molestiae",
                    new GraphicOrigin(Guid.NewGuid(),
                        "magnam",
                        9))]);
        await graphicsLayer.RemoveAll();
        await graphicsLayer.RemoveMany([new Graphic(new Polyline([new MapPath([new MapPoint([299.5746,
                            317.6727]),
                        new MapPoint([73.4674])])],
                    new SpatialReference(9,
                            "minima",
                            "est",
                            "doloribus"),
                        true,
                        true),
                new TextSymbol("provident quidem et",
                    new MapColor(11, 119, 253),
                    new MapColor(173, 105, 90),
                        new Dimension(910.7669),
                    new MapFont(new Dimension(753.1116),
                            "Helvetica",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        798.2080,
                    new MapColor(9, 200, 7),
                    new MapColor(48, 215, 119),
                        380.5158,
                    HorizontalAlignment.Left,
                        true,
                        702.4948,
                        new Dimension(806.2963),
                        true),
                new PopupTemplate("porro odit iste",
                        "maiores",
                        ["ullam",
                            "culpa"],
                    [new FieldInfo("password",
                            "ea",
                            "sed",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDate),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                "dolorem",
                                "consectetur officiis explicabo")),
                    new AttachmentsPopupContent("quo necessitatibus dolorem",
                            "minus est",
                            AttachmentsPopupContentDisplayType.Auto)],
                    [new ExpressionInfo("return $feature['FieldName'];",
                            "group",
                            "provident non quia",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("expedita autem iste",
                            "https://picsum.photos/640/480/?image=791",
                            "1758c3ba-58fa-c336-d899-1941940cb042",
                            () => { Console.WriteLine("quos"); return Task.CompletedTask; },
                            "id",
                            true,
                            true,
                            true,
                            "molestiae"),
                            new ActionButton("voluptatibus iste voluptate",
                                "https://picsum.photos/640/480/?image=602",
                                "6ae1f827-ced2-4942-f2c9-1ee4eb36ee98",
                                () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "perspiciatis")]),
                    new AttributesDictionary(),
                    true,
                    "eius",
                    "magnam",
                    new GraphicOrigin(Guid.NewGuid(),
                        "illo",
                        3)),
            new Graphic(new Extent(-91.6180,
                        -130.2717,
                        -61.1539,
                        73.7976,
                        412.2941,
                        742.2756,
                        559.3371,
                        545.6185,
                    new SpatialReference(3,
                            "atque",
                            "aut",
                            "consequatur"),
                        true,
                        true),
                new TextSymbol("veritatis magni dolores",
                    new MapColor(196, 132, 108),
                    new MapColor(81, 137, 229),
                        new Dimension(931.4687),
                    new MapFont(new Dimension(691.4911),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        230.5473,
                    new MapColor(0, 49, 106),
                    new MapColor(233, 31, 69),
                        801.7727,
                    HorizontalAlignment.Left,
                        true,
                        231.2520,
                        new Dimension(610.5780),
                        true),
                new PopupTemplate("dolore sed explicabo",
                        "et",
                        ["voluptate",
                            "est"],
                    [new FieldInfo("avatar",
                            "et",
                            "quidem",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLe),
                            true,
                            true,
                        StatisticType.Max),
                    new FieldInfo("name",
                            "molestias",
                            "reiciendis",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(9,
                                true,
                            DateFormat.LongDateShortTime24),
                            true,
                            true,
                        StatisticType.Avg)],
                    [new FieldsPopupContent([new FieldInfo("phone",
                                "labore",
                                "culpa",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.DayShortMonthYear),
                                true,
                                true,
                            StatisticType.Stddev)],
                            "et ullam veritatis",
                            "qui occaecati deserunt"),
                    new FieldsPopupContent([new FieldInfo("status",
                                "beatae",
                                "ut",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Count)],
                            "voluptatem voluptatem vitae",
                            "doloribus laboriosam quia")],
                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "password",
                            "ea quae magni",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("return $feature.Population / $feature.Area;",
                            "title",
                            "dolor amet porro",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("fugiat et quos",
                            "https://picsum.photos/640/480/?image=1024",
                            "a0fd7aa9-f574-2660-5ef1-4124118e1bff",
                            () => { Console.WriteLine("ipsum"); return Task.CompletedTask; },
                            "comment",
                            true,
                            true,
                            true,
                            "error")]),
                    new AttributesDictionary(),
                    true,
                    "et",
                    "aut",
                    new GraphicOrigin(Guid.NewGuid(),
                        "consequuntur",
                        6))]);
        ListMode testListMode = ListMode.Show;
        await graphicsLayer.SetListMode(testListMode);
        var listMode = await graphicsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SourceOut;
        await graphicsLayer.SetBlendMode(testBlendMode);
        var blendMode = await graphicsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GraphicsLayerElevationInfo testElevationInfo = new GraphicsLayerElevationInfo(new GraphicsLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "facilis ab explicabo"),
                ElevationInfoMode.RelativeToScene,
                    732.2689,
                ElevationUnit.Decimeters);
        await graphicsLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await graphicsLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        Extent testFullExtent = new Extent(82.2033,
                    69.5902,
                    -12.5391,
                    -61.8911,
                    312.7089,
                    859.6842,
                    482.1689,
                    424.3763,
                new SpatialReference(2,
                        "quos",
                        "sint",
                        "saepe"),
                    true,
                    true);
        await graphicsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await graphicsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 2, 4, 21, 52, 19),
                    new DateTime(2007, 4, 24, 5, 33, 11));
        await graphicsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await graphicsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
