@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGraphicsLayer(Action renderHandler)
    {
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GraphicsLayer 
                        Title="@("consequatur molestias soluta")"
                        Opacity="@(0.5114)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        PersistenceEnabled="@(true)"
                        MinScale="@(5586.7582)"
                        MaxScale="@(37063275.5294)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        BlendMode="@(BlendMode.Saturation)"
                        Effect="@(new Effect("est",
                            14918738.8124))">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 11, 7, 7, 47, 54))"
                            End="@(new DateTime(2015, 9, 13, 8, 34, 21))">
                        </TimeExtent>
                        <Graphic 
                            Geometry="@(new Extent(177.6097,
                                    85.8451,
                                    -19.8527,
                                    -3.4562,
                                    730.3944,
                                    386.8672,
                                    700.6031,
                                    636.0390,
                                new SpatialReference(2,
                                        "tempora",
                                        "occaecati",
                                        "dolores"),
                                    true,
                                    true))"
                            Symbol="@(new TextSymbol("dolores perspiciatis est",
                                new MapColor(74, 250, 252),
                                new MapColor(35, 246, 241),
                                    new Dimension(819.9955),
                                new MapFont(new Dimension(688.8005),
                                        "Helvetica",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    522.6231,
                                new MapColor(47, 127, 121),
                                new MapColor(53, 77, 220),
                                    47.4834,
                                HorizontalAlignment.Right,
                                    true,
                                    895.0221,
                                    new Dimension(27.8216),
                                    true))"
                            PopupTemplate="@(new PopupTemplate("distinctio dolores consequuntur",
                                    "occaecati",
                                    ["pariatur"],
                                [new FieldInfo("password",
                                        "ducimus",
                                        "odio",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.LongMonthDayYearLongTime24),
                                        true,
                                        true,
                                    StatisticType.Avg),
                                new FieldInfo("updatedAt",
                                        "iure",
                                        "numquam",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.LongMonthDayYearLongTime24),
                                        true,
                                        true,
                                    StatisticType.Max)],
                                [new RelationshipPopupContent("ea nisi est",
                                        "deserunt facere quasi et",
                                        9,
                                        "numquam",
                                    [new RelatedRecordsInfoFieldOrder("distinctio",
                                        OrderBy.Desc)],
                                        3)],
                                [new ExpressionInfo("return $feature.Name;",
                                        "createdAt",
                                        "omnis mollitia debitis",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "password",
                                        "dolores quae ipsum",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("eos amet voluptates",
                                        "https://picsum.photos/640/480/?image=205",
                                        "6c129da7-740d-27e8-3953-5cce5c18bd28",
                                        () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                        "phone",
                                        true,
                                        true,
                                        true,
                                        "porro"),
                                        new ActionButton("odit quaerat laborum",
                                            "https://picsum.photos/640/480/?image=544",
                                            "0d3874d5-1c09-6f92-d16c-463181c531a3",
                                            () => { Console.WriteLine("quidem"); return Task.CompletedTask; },
                                            "name",
                                            true,
                                            true,
                                            true,
                                            "odio")]))"
                            Attributes="@(new AttributesDictionary())"
                            Visible="@(true)"
                            LegendLabel="@("expedita")"
                            AggregateGeometries="@("et")"
                            Origin="@(new GraphicOrigin(Guid.NewGuid(),
                                "dolorem",
                                7))">
                        </Graphic>
                        <Extent 
                            Xmax="@(31.8593)"
                            Xmin="@(64.8978)"
                            Ymax="@(28.4245)"
                            Ymin="@(-78.1032)"
                            Zmax="@(566.4389)"
                            Zmin="@(472.7224)"
                            Mmax="@(147.4838)"
                            Mmin="@(335.0697)"
                            SpatialReference="@(new SpatialReference(2,
                                    "consequatur",
                                    "consequatur",
                                    "velit"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                        <GraphicsLayerElevationInfo 
                            FeatureExpressionInfo="@(new GraphicsLayerElevationInfoFeatureExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "illum fugit earum"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(870.9664)"
                            Unit="@(ElevationUnit.Feet)">
                        </GraphicsLayerElevationInfo>
                    </GraphicsLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(graphicsLayer!);
        await AssertJavaScript("assertLayerExists", args: "graphics");
        await graphicsLayer.AddMany([new Graphic(new Extent(62.0547,
                        -126.9785,
                        -19.2031,
                        -33.7501,
                        707.8902,
                        569.8187,
                        305.7580,
                        899.4277,
                    new SpatialReference(9,
                            "id",
                            "nemo",
                            "et"),
                        true,
                        true),
                new TextSymbol("qui tempora asperiores",
                    new MapColor(103, 235, 187),
                    new MapColor(114, 37, 117),
                        new Dimension(824.0857),
                    new MapFont(new Dimension(32.0985),
                            "Verdana",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.LineThrough),
                        724.4100,
                    new MapColor(193, 77, 68),
                    new MapColor(81, 0, 233),
                        937.6196,
                    HorizontalAlignment.Left,
                        true,
                        619.4341,
                        new Dimension(284.7678),
                        true),
                new PopupTemplate("iure consequatur animi",
                        "aliquid",
                        ["ipsam",
                            "laborum"],
                    [new FieldInfo("avatar",
                            "totam",
                            "non",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.ShortMonthYear),
                            true,
                            true,
                        StatisticType.Avg),
                    new FieldInfo("email",
                            "optio",
                            "inventore",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.Year),
                            true,
                            true,
                        StatisticType.Min)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                "qui",
                                "magnam est quia"))],
                    [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                            "group",
                            "harum cum ut",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("magnam quia repellendus",
                            "https://picsum.photos/640/480/?image=700",
                            "5657f7c7-fbac-08d3-0542-af76e42b4905",
                            () => { Console.WriteLine("et"); return Task.CompletedTask; },
                            "comment",
                            true,
                            true,
                            true,
                            "voluptas")]),
                    new AttributesDictionary(),
                    true,
                    "et",
                    "ea",
                    new GraphicOrigin(Guid.NewGuid(),
                        "hic",
                        5))]);
        await graphicsLayer.RemoveAll();
        await graphicsLayer.RemoveMany([new Graphic(new Point(-55.0420,
                        -29.2616,
                        154.5182,
                        45.7835,
                        718.0878,
                    new SpatialReference(7,
                            "quia",
                            "quod",
                            "optio"),
                        true,
                        true,
                        834.8870),
                new TextSymbol("ullam eum aut",
                    new MapColor(24, 77, 49),
                    new MapColor(5, 151, 19),
                        new Dimension(707.7630),
                    new MapFont(new Dimension(738.4248),
                            "Bookman",
                        MapFontStyle.Oblique,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        104.7403,
                    new MapColor(99, 165, 199),
                    new MapColor(21, 94, 192),
                        313.1974,
                    HorizontalAlignment.Left,
                        true,
                        61.4816,
                        new Dimension(370.3892),
                        true),
                new PopupTemplate("iure libero ut",
                        "quia",
                        ["minima",
                            "quos"],
                    [new FieldInfo("phone",
                            "eos",
                            "reiciendis",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.ShortDateLongTime),
                            true,
                            true,
                        StatisticType.Stddev)],
                    [new AttachmentsPopupContent("qui mollitia commodi",
                            "sit consequatur",
                            AttachmentsPopupContentDisplayType.Auto)],
                    [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                            "token",
                            "earum incidunt maiores",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("var length = Geometry($feature).length; return length;",
                            "status",
                            "magnam sit cupiditate",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("et eum accusantium",
                            "https://picsum.photos/640/480/?image=721",
                            "855f1617-0e3e-fc5f-9c1f-5479bae24c95",
                            () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                            "updatedAt",
                            true,
                            true,
                            true,
                            "sit")]),
                    new AttributesDictionary(),
                    true,
                    "incidunt",
                    "et",
                    new GraphicOrigin(Guid.NewGuid(),
                        "explicabo",
                        4))]);
        ListMode testListMode = ListMode.Hide;
        await graphicsLayer.SetListMode(testListMode);
        var listMode = await graphicsLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Reflect;
        await graphicsLayer.SetBlendMode(testBlendMode);
        var blendMode = await graphicsLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GraphicsLayerElevationInfo testElevationInfo = new GraphicsLayerElevationInfo(new GraphicsLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "ducimus beatae aut"),
                ElevationInfoMode.AbsoluteHeight,
                    728.2002,
                ElevationUnit.Inches);
        await graphicsLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await graphicsLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        Extent testFullExtent = new Extent(-60.2962,
                    -160.5620,
                    10.7287,
                    68.9066,
                    923.5914,
                    131.3781,
                    952.8412,
                    682.7361,
                new SpatialReference(6,
                        "et",
                        "minima",
                        "vitae"),
                    true,
                    true);
        await graphicsLayer.SetFullExtent(testFullExtent);
        var fullExtent = await graphicsLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 6, 22, 15, 49, 22),
                    new DateTime(2002, 5, 5, 13, 44, 56));
        await graphicsLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await graphicsLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
