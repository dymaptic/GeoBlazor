@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedMeasurementWidget(Action renderHandler)
    {
        MeasurementWidget? measurementWidget = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <MeasurementWidget 
                    ActiveTool="@(ActiveTool.Distance)"
                    AreaUnit="@(SystemOrAreaUnit.Metric)"
                    Icon="@("qui")"
                    Label="@("sed")"
                    LinearUnit="@(SystemOrLengthUnit.Kilometers)"
                    WidgetId="@("voluptatum")">
                    <MeasurementViewModel 
                        ActiveTool="@(ActiveTool.DirectLine)"
                        ActiveViewModel="@(new AreaMeasurement2DViewModel(SystemOrAreaUnit.Metric,
                            [SystemOrAreaUnit.Imperial]))"
                        AreaUnit="@(SystemOrAreaUnit.Imperial)"
                        LinearUnit="@(SystemOrLengthUnit.Meters)">
                    </MeasurementViewModel>
                </MeasurementWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(measurementWidget!);
        await AssertJavaScript("assertWidgetExists", args: "measurement");
        await measurementWidget.Clear();
        await measurementWidget.StartMeasurement();
        ActiveTool testActiveTool = ActiveTool.Area;
        await measurementWidget.SetActiveTool(testActiveTool);
        var activeTool = await measurementWidget.GetActiveTool();
        Assert.AreEqual(testActiveTool, activeTool);
        SystemOrAreaUnit testAreaUnit = SystemOrAreaUnit.Imperial;
        await measurementWidget.SetAreaUnit(testAreaUnit);
        var areaUnit = await measurementWidget.GetAreaUnit();
        Assert.AreEqual(testAreaUnit, areaUnit);
        SystemOrLengthUnit testLinearUnit = SystemOrLengthUnit.Kilometers;
        await measurementWidget.SetLinearUnit(testLinearUnit);
        var linearUnit = await measurementWidget.GetLinearUnit();
        Assert.AreEqual(testLinearUnit, linearUnit);
        MeasurementViewModel testViewModel = new MeasurementViewModel(ActiveTool.Area,
                new AreaMeasurement2DViewModel(SystemOrAreaUnit.Metric,
                    [SystemOrAreaUnit.Metric]),
                SystemOrAreaUnit.Imperial,
                SystemOrLengthUnit.Decimeters);
        await measurementWidget.SetViewModel(testViewModel);
        var viewModel = await measurementWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
    }
}
