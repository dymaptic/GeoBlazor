@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWFSLayer(Action renderHandler)
    {
        WFSLayer? wFSLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WFSLayer 
                        BlendMode="@(BlendMode.Xor)"
                        Copyright="@("minus")"
                        DefinitionExpression="@("assumenda")"
                        DisplayField="@("voluptas")"
                        Effect="@(new Effect("accusamus",
                            41917482.0718))"
                        GeometryType="@(SimpleGeometryType.Point)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Hide)"
                        MaxPageCount="@(7)"
                        MaxRecordCount="@(5)"
                        MaxScale="@(16089835.3994)"
                        MinScale="@(2413.8796)"
                        Name="@("avatar")"
                        NamespaceUri="@("title")"
                        ObjectIdField="@("sit")"
                        Opacity="@(0.0394)"
                        OutFields="@(["sit"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(299.9604)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        Title="@("non odio aut")"
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")"
                        OnRefresh="OnRefresh">
                        <TimeExtent 
                            Start="@(new DateTime(2021, 4, 7, 8, 42, 31))"
                            End="@(new DateTime(2005, 10, 10, 20, 44, 35))">
                        </TimeExtent>
                        <SimpleRenderer 
>
                            <AuthoringInfo 
                                ClassificationMethod="@(ClassificationMethod.StandardDeviation)"
                                FadeRatio="@(511.7290)"
                                Fields="@(["labore"])"
                                FlowTheme="@(AuthoringInfoFlowTheme.FlowLine)"
                                Focus="@("dicta")"
                                IsAutoGenerated="@(true)"
                                LengthUnit="@(LengthUnit.Millimeters)"
                                MaxSliderValue="@(869.4539)"
                                MinSliderValue="@(625.7976)"
                                NumClasses="@(451.1312)"
                                StandardDeviationInterval="@(586.8879)"
                                UnivariateSymbolStyle="@(UnivariateSymbolStyle.PlusMinus)"
                                UnivariateTheme="@(UnivariateTheme.Below)">
                                <MultipartColorRamp />
                                <AuthoringInfoVisualVariable 
                                    EndTime="@("molestiae")"
                                    Field="@("sit")"
                                    MaxSliderValue="@(366.7330)"
                                    MinSliderValue="@(127.3915)"
                                    NormalizationField="@("est")"
                                    ReferenceSizeScale="@(481.8286)"
                                    ReferenceSizeSymbolStyle="@(ReferenceSizeSymbolStyle.Diamond)"
                                    StartTime="@("aut")"
                                    Style="@(AuthoringInfoVisualVariableStyle.PercentOfTotal)"
                                    Units="@(AuthoringInfoVisualVariableUnits.Minutes)">
                                    <SizeStop 
                                        Value="@(202.2711)"
                                        Size="@(new Dimension(188.1251))"
                                        Label="@("ducimus")">
                                    </SizeStop>
                                    <Theme 
                                        AccentColor="@(new MapColor(58, 142, 230))"
                                        TextColor="@(new MapColor(32, 251, 42))">
                                    </Theme>
                                </AuthoringInfoVisualVariable>
                                <AuthoringInfoField 
                                    Field="@("atque")"
                                    Label="@("asperiores")"
                                    NormalizationField="@("soluta")">
                                    <AuthoringInfoField1ClassBreakInfos 
                                        MaxValue="@(39.1864)"
                                        MinValue="@(692.1752)">
                                    </AuthoringInfoField1ClassBreakInfos>
                                </AuthoringInfoField>
                                <AuthoringInfoStatistics 
                                    Max="@(579.4629)"
                                    Min="@(923.7385)">
                                </AuthoringInfoStatistics>
                            </AuthoringInfo>
                        </SimpleRenderer>
                        <WFSCapabilities 
>
                            <WFSFeatureType 
                                DefaultSpatialReference="@(135.7972)"
                                Description="@("et assumenda reiciendis")"
                                Name="@("token")"
                                NamespacePrefix="@("name")"
                                NamespaceUri="@("group")"
                                SupportedSpatialReferences="@([856.6182,
                                    179.3108])"
                                Title="@("qui animi non")"
                                TypeName="@("avatar")">
                                <Extent 
                                    Xmax="@(128.9874)"
                                    Xmin="@(-177.0769)"
                                    Ymax="@(85.5585)"
                                    Ymin="@(-80.9721)"
                                    Zmax="@(820.9676)"
                                    Zmin="@(260.7297)"
                                    Mmax="@(731.8327)"
                                    Mmin="@(265.1715)"
                                    HasM="@(true)"
                                    HasZ="@(true)">
                                    <SpatialReference 
                                        Wkid="@(8)"
                                        ImageCoordinateSystem="@("qui")"
                                        Wkt="@("quis")"
                                        Wkt2="@("fugiat")">
                                    </SpatialReference>
                                </Extent>
                            </WFSFeatureType>
                            <WFSOperations 
>
                                <WFSOperationsDescribeFeatureType 
                                    Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                                </WFSOperationsDescribeFeatureType>
                                <WFSOperationsGetCapabilities 
                                    Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                                </WFSOperationsGetCapabilities>
                                <WFSOperationsGetFeature 
                                    OutputFormat="@("accusamus")"
                                    SupportsPagination="@(true)"
                                    Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                                </WFSOperationsGetFeature>
                            </WFSOperations>
                        </WFSCapabilities>
                        <OrderedLayerOrderBy 
                            Field="@("dolorum")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("voluptatem")">
                        </OrderedLayerOrderBy>
                        <PopupTemplate 
                            Title="@("veritatis necessitatibus voluptate")"
                            StringContent="@("nesciunt")"
                            OutFields="@(["nulla",
                                "tempore"])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)">
                            <ExpressionInfo 
                                Expression="@("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }")"
                                Name="@("category")"
                                Title="@("voluptatem aut sed")"
                                ReturnType="@(ExpressionInfoReturnType.String)">
                            </ExpressionInfo>
                            <FieldInfo 
                                FieldName="@("status")"
                                Label="@("doloribus")"
                                Tooltip="@("voluptas")"
                                StringFieldOption="@(StringFieldOption.RichText)"
                                IsEditable="@(true)"
                                Visible="@(true)"
                                StatisticType="@(StatisticType.Sum)">
                                <FieldInfoFormat 
                                    Places="@(5)"
                                    DigitSeparator="@(true)"
                                    DateFormat="@(DateFormat.LongMonthYear)">
                                </FieldInfoFormat>
                            </FieldInfo>
                            <RelationshipPopupContent />
                        </PopupTemplate>
                        <PortalItem />
                        <Field 
                            Name="@("status")"
                            Alias="@("ipsa")"
                            Description="@("qui a voluptates est")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "deserunt" })"
                            ValueType="@(FieldValueType.NameOrTitle)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>()],
                                "title"))">
                        </Field>
                        <Extent 
                            Xmax="@(67.2427)"
                            Xmin="@(-173.0543)"
                            Ymax="@(-35.6734)"
                            Ymin="@(49.8762)"
                            Zmax="@(603.8522)"
                            Zmin="@(38.4921)"
                            Mmax="@(534.7615)"
                            Mmin="@(508.1056)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("similique")"
                                Wkt="@("dolorem")"
                                Wkt2="@("quis")">
                            </SpatialReference>
                        </Extent>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowEnd)"
                            LabelExpression="@("tenetur")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(6050984.7972)"
                            MinScale="@(43949.3385)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(387.2774))"
                            UseCodedValues="@(true)"
                            Where="@("Province = 'Ontario'")">
                            <SimpleFillSymbol 
                                Color="@(new MapColor(22, 104, 227))">
                            </SimpleFillSymbol>
                        </Label>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("cupiditate",
                                36840404.7003)])"
                            ExcludedLabelsVisible="@(true)"
                            IncludedEffect="@([new Effect("tempora",
                                10517369.4517),
                                new Effect("saepe",
                                    24408477.3903)])">
                            <FeatureFilter 
                                Distance="@(102.4085)"
                                ObjectIds="@([7,
                                    9])"
                                SpatialRelationship="@(SpatialRelationship.Relation)"
                                Units="@(QueryUnits.UsNauticalMiles)"
                                Where="@("Country = 'Canada'")">
                                <TimeExtent 
                                    Start="@(new DateTime(2006, 10, 9, 12, 19, 17))"
                                    End="@(new DateTime(2004, 3, 1, 15, 45, 7))">
                                </TimeExtent>
                                <Polygon 
                                    HasM="@(true)"
                                    HasZ="@(true)">
                                    <SpatialReference 
                                        Wkid="@(8)"
                                        ImageCoordinateSystem="@("similique")"
                                        Wkt="@("aperiam")"
                                        Wkt2="@("ex")">
                                    </SpatialReference>
                                </Polygon>
                            </FeatureFilter>
                        </FeatureEffect>
                        <SpatialReference 
                            Wkid="@(1)"
                            ImageCoordinateSystem="@("iste")"
                            Wkt="@("blanditiis")"
                            Wkt2="@("libero")">
                        </SpatialReference>
                        <WFSLayerElevationInfo 
                            Mode="@(ElevationInfoMode.AbsoluteHeight)"
                            Offset="@(815.5989)"
                            Unit="@(ElevationUnit.Inches)">
                            <WFSLayerElevationInfoFeatureExpressionInfo 
                                Expression="@("return $feature.Population / $feature.Area;")"
                                Title="@("mollitia ut amet")">
                            </WFSLayerElevationInfoFeatureExpressionInfo>
                        </WFSLayerElevationInfo>
                    </WFSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(wFSLayer!);
        await AssertJavaScript("dispatchEvent", args: [wFSLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "w-f-s");
        var createPopupTemplateMethodResult = await wFSLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["in",
                    "fugiat"],
                    ["email"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await wFSLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await wFSLayer.GetField("group");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await wFSLayer.GetFieldDomain("status",
            new WFSLayerGetFieldDomainOptions(new Graphic(new Extent(85.8113,
                            -53.8325,
                            43.8495,
                            -57.2536,
                            252.1702,
                            764.1304,
                            419.0033,
                            802.8339,
                        new SpatialReference(6,
                                "laborum",
                                "at",
                                "suscipit"),
                            true,
                            true),
                    new SimpleLineSymbol(new MapColor(221, 23, 173),
                            new Dimension(98.8049),
                        SimpleLineSymbolStyle.Solid,
                        Cap.Butt,
                        Join.Bevel,
                        new LineSymbolMarker(new MapColor(252, 1, 148),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.X),
                            36.9800),
                    new PopupTemplate("ut iusto doloribus",
                            "et",
                            ["rerum"],
                        [new FieldInfo("name",
                                "recusandae",
                                "dolorem",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.DayShortMonthYearShortTime24),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new MediaPopupContent("rerum asperiores maxime",
                                "voluptatem sed veniam harum",
                            [new LineChartMediaInfo("culpa odio enim",
                                    "facere",
                                    "voluptate et dicta",
                                new ChartMediaInfoValue(["nam",
                                        "quod"],
                                        "et",
                                        "voluptate",
                                    [new ChartMediaInfoValueSeries("title",
                                            "dolor",
                                            908.6566),
                                    new ChartMediaInfoValueSeries("name",
                                            "dolores",
                                            392.1074)],
                                        [new MapColor(97, 40, 154),
                                            new MapColor("#612211")]))],
                                9),
                        new TextPopupContent("ab ut enim")],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "comment",
                                "in rerum maxime",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("vel odio sapiente",
                                "https://picsum.photos/640/480/?image=158",
                                "584e6d3a-5d04-722e-9744-c771b97eb8a2",
                                () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                "phone",
                                true,
                                true,
                                true,
                                "velit"),
                                new ActionButton("sint necessitatibus dolore",
                                    "https://picsum.photos/640/480/?image=729",
                                    "e28e6547-7255-17e6-2753-044f70fcadba",
                                    () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "tempore")]),
                        new AttributesDictionary(),
                        true,
                        "dolorem",
                        "maiores",
                        new GraphicOrigin(Guid.NewGuid(),
                            "tempora",
                            5))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await wFSLayer.QueryExtent(new Query([1],
                    true,
                    596.6500,
                    530.7950,
                    "9.2.0.4",
                new Polygon([new MapPath([new MapPoint([342.8853])]),
                        new MapPath([new MapPoint([211.0774])])],
                    new SpatialReference(5,
                            "et",
                            "modi",
                            "ad"),
                    new Point(146.7216,
                            -40.9422,
                            46.8490,
                            64.2869,
                            985.3234,
                        new SpatialReference(5,
                                "cum",
                                "et",
                                "nemo"),
                            true,
                            true,
                            954.4672),
                        true,
                        true,
                        true),
                    8,
                    ["qui"],
                    "ut",
                    new DateTime(2023, 8, 20, 1, 23, 30),
                    473.6575,
                    3,
                    "aut",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await wFSLayer.QueryFeatureCount(new Query([5,
                    9],
                    true,
                    626.5471,
                    6.1984,
                    "0.9.6.0",
                new Extent(166.9806,
                        -41.7622,
                        86.5214,
                        -28.4233,
                        875.3519,
                        292.4727,
                        915.2654,
                        343.8926,
                    new SpatialReference(8,
                            "blanditiis",
                            "et",
                            "et"),
                        true,
                        true),
                    8,
                    ["enim"],
                    "deserunt",
                    new DateTime(2012, 2, 18, 21, 0, 36),
                    665.6116,
                    8,
                    "doloremque",
                    1),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await wFSLayer.QueryFeatures(new Query([8,
                    5],
                    true,
                    589.9621,
                    495.1431,
                    "1.6.0.8",
                new Circle([new MapPath([new MapPoint([249.3648]),
                        new MapPoint([342.1787])])],
                    new Point(-164.2411,
                            5.9272,
                            -102.8829,
                            44.8780,
                            755.1288,
                        new SpatialReference(3,
                                "ut",
                                "dicta",
                                "sit"),
                            true,
                            true,
                            47.7764),
                    new Point(-157.7826,
                            86.4947,
                            -118.4809,
                            4.8118,
                            878.6051,
                        new SpatialReference(9,
                                "cumque",
                                "unde",
                                "deserunt"),
                            true,
                            true,
                            936.1704),
                        true,
                        true,
                        true,
                        true,
                        862.3610,
                        6.7783,
                    RadiusUnit.Meters,
                    new SpatialReference(9,
                            "velit",
                            "laboriosam",
                            "deleniti")),
                    2,
                    ["quia",
                        "accusantium"],
                    "magni",
                    new DateTime(2001, 1, 18, 19, 37, 23),
                    950.9267,
                    9,
                    "molestiae",
                    9),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await wFSLayer.QueryObjectIds(new Query([9],
                    true,
                    447.5167,
                    215.4913,
                    "5.6.6.5",
                new Circle([new MapPath([new MapPoint([674.9150]),
                        new MapPoint([865.8629,
                            639.2767])])],
                    new Point(-103.9938,
                            -33.2212,
                            57.4422,
                            -70.0128,
                            568.2118,
                        new SpatialReference(8,
                                "soluta",
                                "ut",
                                "aperiam"),
                            true,
                            true,
                            604.0789),
                    new Point(159.2193,
                            -85.8290,
                            -18.0069,
                            -65.5779,
                            207.5881,
                        new SpatialReference(6,
                                "expedita",
                                "enim",
                                "voluptas"),
                            true,
                            true,
                            563.7434),
                        true,
                        true,
                        true,
                        true,
                        142.9397,
                        8.0039,
                    RadiusUnit.Kilometers,
                    new SpatialReference(3,
                            "aut",
                            "nam",
                            "rerum")),
                    4,
                    ["molestias",
                        "earum"],
                    "voluptatem",
                    new DateTime(2020, 4, 16, 20, 57, 25),
                    670.6127,
                    4,
                    "ipsum",
                    5),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await wFSLayer.Refresh();
        BlendMode testBlendMode = BlendMode.SourceIn;
        await wFSLayer.SetBlendMode(testBlendMode);
        var blendMode = await wFSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        WFSLayerElevationInfo testElevationInfo = new WFSLayerElevationInfo(new WFSLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "facilis earum quidem"),
                ElevationInfoMode.OnTheGround,
                    684.7610,
                ElevationUnit.Inches);
        await wFSLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await wFSLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("dolore",
                    33792857.6719)],
                    true,
                new FeatureFilter(962.7318,
                    new Polygon([new MapPath([new MapPoint([86.8789]),
                            new MapPoint([547.0302,
                                934.9729])]),
                            new MapPath([new MapPoint([319.9641,
                                    317.3171]),
                                new MapPoint([219.9424,
                                    703.0408])])],
                        new SpatialReference(8,
                                "repudiandae",
                                "officiis",
                                "aut"),
                        new Point(110.8582,
                                -77.7932,
                                125.3767,
                                12.2173,
                                345.0801,
                            new SpatialReference(2,
                                    "vitae",
                                    "repellat",
                                    "nam"),
                                true,
                                true,
                                357.1943),
                            true,
                            true,
                            true),
                        [8],
                    SpatialRelationship.Within,
                    new TimeExtent(new DateTime(2007, 8, 14, 17, 29, 11),
                            new DateTime(2019, 1, 4, 12, 1, 11)),
                        QueryUnits.UsNauticalMiles,
                        "City = 'Toronto'"),
                    [new Effect("voluptatum",
                        31388066.4142),
                        new Effect("explicabo",
                            39480403.8735)]);
        await wFSLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await wFSLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "updatedAt",
                    "eos",
                    "quas aliquam qui",
                    9,
                    true,
                    true,
                    new { Value = "illo" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "updatedAt"))];
        await wFSLayer.SetFields(testFields);
        var fields = await wFSLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-5.7283,
                    -1.9385,
                    -24.2492,
                    -31.7045,
                    423.0003,
                    65.4089,
                    421.6995,
                    374.1396,
                new SpatialReference(7,
                        "non",
                        "quia",
                        "at"),
                    true,
                    true);
        await wFSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await wFSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Polygon;
        await wFSLayer.SetGeometryType(testGeometryType);
        var geometryType = await wFSLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.CenterLeft,
                    "cupiditate",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Parallel,
                    1431249.6797,
                    35553.1191,
                    true,
                    new Dimension(857.2007),
                new SimpleLineSymbol(new MapColor(102, 50, 211),
                        new Dimension(988.0707),
                    SimpleLineSymbolStyle.ShortDash,
                    Cap.Square,
                    Join.Miter,
                    new LineSymbolMarker(new MapColor(186, 95, 62),
                        LinePlacement.Begin,
                        LineSymbolMarkerStyle.Circle),
                        211.5279),
                    true,
                    "Name = 'John Doe'")];
        await wFSLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await wFSLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        ListMode testListMode = ListMode.Hide;
        await wFSLayer.SetListMode(testListMode);
        var listMode = await wFSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("dolor",
                SortOrder.Ascending,
                    "distinctio"),
            new OrderedLayerOrderBy("sit",
                SortOrder.Ascending,
                    "eveniet")];
        await wFSLayer.SetOrderBy(testOrderBy);
        var orderBy = await wFSLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await wFSLayer.SetPortalItem(testPortalItem);
        var portalItem = await wFSLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(157, 147, 210),
                            new MapColor(132, 207, 75)),
                        461.8161,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(499.0729,
                                574.2739)],
                            "non",
                            "ut",
                            "labore"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(359.5898,
                                109.1896),
                        new AuthoringInfoField1ClassBreakInfos(538.9679,
                                516.3802)],
                            "sunt",
                            "et",
                            "maiores"),
                        ["eum",
                            "eum"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "expedita",
                        true,
                    LengthUnit.UsFeet,
                        764.6447,
                        557.2171,
                        600.7477,
                        395.3482),
                new PictureFillSymbol("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0",
                        new Dimension(4.0563),
                        new Dimension(368.0674),
                        new Dimension(976.8920),
                        new Dimension(964.0941),
                        -100.8952,
                        -55.9886,
                        new Outline(new MapColor(238, 16, 107),
                            new Dimension(187.9773),
                            SimpleLineSymbolStyle.LongDash,
                            Cap.Butt,
                            Join.Miter,
                            new LineSymbolMarker(new MapColor(179, 2, 162),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.Arrow),
                            821.3901),
                        new MapColor(37, 83, 10)),
                    "sequi",
                    new DefaultSymbol(),
                    "maxime",
                    "aperiam",
                    "consequatur",
                    "id",
                new UniqueValueRendererLegendOptions("inventore cupiditate porro"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("velit",
                        new SimpleLineSymbol(new MapColor(35, 129, 201),
                                new Dimension(179.3397),
                            SimpleLineSymbolStyle.ShortDashDot,
                            Cap.Square,
                            Join.Bevel,
                            new LineSymbolMarker(new MapColor(249, 71, 193),
                                LinePlacement.Begin,
                                LineSymbolMarkerStyle.Arrow),
                                829.0774),
                        [new UniqueValue("corrupti",
                                "assumenda",
                                "veritatis"),
                        new UniqueValue("sint",
                                "totam",
                                "eos")])],
                        "officia"),
                new UniqueValueGroup([new UniqueValueClass("sunt",
                        new SimpleLineSymbol(new MapColor(32, 221, 89),
                                new Dimension(980.9992),
                            SimpleLineSymbolStyle.None,
                            Cap.Butt,
                            Join.Miter,
                            new LineSymbolMarker(new MapColor(2, 11, 80),
                                LinePlacement.End,
                                LineSymbolMarkerStyle.Circle),
                                238.2596),
                        [new UniqueValue("atque",
                                "repellendus",
                                "asperiores")])],
                        "aut")],
                [new UniqueValueInfo("quaerat",
                    new PictureFillSymbol("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0",
                            new Dimension(117.7825),
                            new Dimension(389.3744),
                            new Dimension(826.7190),
                            new Dimension(429.6630),
                            59.2199,
                            15.6685,
                            new Outline(new MapColor(239, 179, 218),
                                new Dimension(619.5691),
                                SimpleLineSymbolStyle.ShortDash,
                                Cap.Round,
                                Join.Miter,
                                new LineSymbolMarker(new MapColor(156, 27, 196),
                                    LinePlacement.Begin,
                                    LineSymbolMarkerStyle.Square),
                                933.7350),
                            new MapColor(18, 248, 204)),
                        "soluta"),
                new UniqueValueInfo("animi",
                    new TextSymbol("ipsam sint non",
                            new MapColor(81, 186, 171),
                            new MapColor(8, 114, 119),
                            new Dimension(432.2052),
                        new MapFont(new Dimension(529.4246),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.LineThrough),
                            20.6361,
                            new MapColor(131, 59, 79),
                            new MapColor(127, 112, 2),
                            340.9051,
                        HorizontalAlignment.Left,
                            true,
                            726.7138,
                            new Dimension(944.1487),
                            true),
                        "eligendi")],
                    "et",
                    "nobis aut laudantium");
        await wFSLayer.SetRenderer(testRenderer);
        var renderer = await wFSLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "distinctio",
                    "dolores",
                    "sapiente");
        await wFSLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await wFSLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 1, 19, 10, 13, 15),
                    new DateTime(2022, 9, 12, 11, 40, 5));
        await wFSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await wFSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
        WFSCapabilities testWfsCapabilities = new WFSCapabilities([new WFSFeatureType(231.0323,
                        "similique labore provident",
                    new Extent(92.2912,
                            -173.6645,
                            -74.1240,
                            -15.0314,
                            396.7563,
                            228.3771,
                            244.7646,
                            178.2885,
                        new SpatialReference(4,
                                "illum",
                                "nihil",
                                "et"),
                            true,
                            true),
                        "title",
                        "category",
                        "avatar",
                        [601.6622,
                            168.3968],
                        "molestias non error",
                        "name")],
                new WFSOperations(new WFSOperationsDescribeFeatureType("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0"),
                    new WFSOperationsGetCapabilities("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0"),
                    new WFSOperationsGetFeature("nostrum",
                            true,
                            "https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")));
        await wFSLayer.SetWfsCapabilities(testWfsCapabilities);
        var wfsCapabilities = await wFSLayer.GetWfsCapabilities();
        Assert.AreEqual(testWfsCapabilities, wfsCapabilities);
    }
}
