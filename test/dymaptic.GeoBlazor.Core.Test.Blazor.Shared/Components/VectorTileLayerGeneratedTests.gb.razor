@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("doloremque")"
                        BlendMode="@(BlendMode.SoftLight)"
                        Effect="@(new Effect("autem",
                            17660792.4657))"
                        FullExtent="@(new Extent(82.1528,
                                139.4426,
                                3.1370,
                                79.0982,
                                594.8311,
                                105.9182,
                                24.3321,
                                344.7860,
                            new SpatialReference(8,
                                    "et",
                                    "voluptas",
                                    "eius"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-67.9071,
                                162.8798,
                                -59.3243,
                                22.2137,
                                788.2931,
                                622.2768,
                                300.2013,
                                857.1703,
                            new SpatialReference(2,
                                    "dolorum",
                                    "provident",
                                    "suscipit"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(6943361.0669)"
                        MinScale="@(40011.9881)"
                        Opacity="@(0.4786)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(2,
                                "reiciendis",
                                "iste",
                                "aspernatur"))"
                        Style="@("omnis")"
                        Title="@("ut exercitationem odio")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2007, 1, 22, 18, 23, 52))"
                            End="@(new DateTime(2001, 8, 18, 20, 34, 14))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(437.6518)"
                            Format="@(TileInfoFormat.Pdf)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "repellendus",
                                    71.0418,
                                    23545104.8542),
                            new LOD(4,
                                    "consequatur",
                                    46.9091,
                                    48749324.7009)])"
                            Origin="@(new Point(-105.5888,
                                    -70.9181,
                                    -90.7222,
                                    -26.2521,
                                    19.0168,
                                new SpatialReference(7,
                                        "qui",
                                        "ea",
                                        "qui"),
                                    true,
                                    true,
                                    400.7454))"
                            Size="@([7,
                                2,
                                3,
                                4])"
                            SpatialReference="@(new SpatialReference(4,
                                    "assumenda",
                                    "nihil",
                                    "sunt"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("qui");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("architecto");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("expedita");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("totam");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(8);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("dolorem");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("at");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("animi",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("doloremque",
                "id");
        await vectorTileLayer.SetPaintProperties("et",
                "occaecati");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("eligendi",
                5);
        await vectorTileLayer.SetStyleLayerVisibility("debitis",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.DestinationOut;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(13.2759,
                    4.1085,
                    -5.2857,
                    -76.1519,
                    347.7609,
                    828.4146,
                    672.0491,
                    587.7078,
                new SpatialReference(2,
                        "aut",
                        "ex",
                        "ex"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(73.6059,
                    -99.7210,
                    9.3509,
                    61.6859,
                    962.5850,
                    423.9076,
                    658.4492,
                    904.5895,
                new SpatialReference(8,
                        "et",
                        "consequatur",
                        "quia"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(1,
                    "quidem",
                    "consequatur",
                    "commodi");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(161.7406,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(7,
                        "aliquid",
                        77.0262,
                        20187793.0654),
                new LOD(1,
                        "nam",
                        72.7571,
                        26551312.0648),
                new LOD(4,
                        "corrupti",
                        95.0074,
                        4654961.7277)],
                new Point(75.5446,
                        7.7060,
                        30.5902,
                        87.7682,
                        368.5571,
                    new SpatialReference(6,
                            "quae",
                            "vitae",
                            "omnis"),
                        true,
                        true,
                        342.1782),
                    [8,
                        9,
                        7],
                new SpatialReference(8,
                        "quod",
                        "voluptatem",
                        "numquam"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 9, 9, 21, 55, 56),
                    new DateTime(2005, 2, 5, 12, 2, 37));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
