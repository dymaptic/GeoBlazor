@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("in")"
                        BlendMode="@(BlendMode.Color)"
                        Effect="@(new Effect("eius",
                            4491636.2984))"
                        FullExtent="@(new Extent(98.6885,
                                -78.5856,
                                -87.0754,
                                -69.5900,
                                444.6993,
                                700.8702,
                                191.1320,
                                293.4381,
                            new SpatialReference(5,
                                    "magni",
                                    "soluta",
                                    "debitis"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(172.3690,
                                60.0280,
                                -9.9952,
                                -4.6948,
                                647.6241,
                                320.4507,
                                828.5025,
                                162.2648,
                            new SpatialReference(1,
                                    "libero",
                                    "perspiciatis",
                                    "qui"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(32682916.6194)"
                        MinScale="@(39558.0210)"
                        Opacity="@(0.8903)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(3,
                                "rem",
                                "quia",
                                "modi"))"
                        Style="@("qui")"
                        Title="@("ut laudantium eum")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 8, 17, 1, 4, 22))"
                            End="@(new DateTime(2009, 2, 20, 7, 46, 58))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(886.4722)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "ut",
                                    3.2260,
                                    47941512.8935),
                            new LOD(9,
                                    "quod",
                                    58.8312,
                                    22906112.8503),
                            new LOD(6,
                                    "quo",
                                    17.5004,
                                    43642663.8676)])"
                            Origin="@(new Point(-13.6072,
                                    50.6446,
                                    -82.2664,
                                    27.6523,
                                    747.0678,
                                new SpatialReference(2,
                                        "sit",
                                        "est",
                                        "sint"),
                                    true,
                                    true,
                                    522.2214))"
                            Size="@([5,
                                3])"
                            SpatialReference="@(new SpatialReference(3,
                                    "consequatur",
                                    "non",
                                    "ea"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("quae");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("quidem");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("nemo");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("sed");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(7);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("magnam");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("tempore");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("necessitatibus",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("facere",
                "ipsa");
        await vectorTileLayer.SetPaintProperties("sit",
                "molestiae");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("nobis",
                6);
        await vectorTileLayer.SetStyleLayerVisibility("veniam",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(157.7558,
                    -76.2510,
                    -27.9834,
                    -36.7263,
                    613.3135,
                    407.4007,
                    95.9759,
                    427.8572,
                new SpatialReference(3,
                        "rerum",
                        "cupiditate",
                        "quasi"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(2.5327,
                    -141.1062,
                    -43.6131,
                    -25.4733,
                    154.0417,
                    232.9957,
                    516.9462,
                    245.6908,
                new SpatialReference(4,
                        "et",
                        "reprehenderit",
                        "et"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "id",
                    "quo",
                    "sit");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(58.6483,
                    TileInfoFormat.Pdf,
                    true,
                [new LOD(2,
                        "et",
                        30.4713,
                        22675143.9239),
                new LOD(7,
                        "accusamus",
                        22.0461,
                        43060331.1056)],
                new Point(148.3703,
                        34.9429,
                        -71.1852,
                        -66.5759,
                        530.6699,
                    new SpatialReference(1,
                            "delectus",
                            "velit",
                            "consequuntur"),
                        true,
                        true,
                        401.7263),
                    [8,
                        1,
                        3,
                        3],
                new SpatialReference(8,
                        "iure",
                        "iure",
                        "voluptatem"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 6, 25, 19, 51, 51),
                    new DateTime(2004, 4, 1, 15, 3, 55));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
