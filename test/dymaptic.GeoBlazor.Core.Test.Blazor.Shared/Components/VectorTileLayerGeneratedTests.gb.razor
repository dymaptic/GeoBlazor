@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("vero")"
                        BlendMode="@(BlendMode.Lighten)"
                        Effect="@(new Effect("sunt",
                            33792618.9391))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(32872921.4191)"
                        MinScale="@(47655.4543)"
                        Opacity="@(0.5296)"
                        PersistenceEnabled="@(true)"
                        Style="@("sint")"
                        Title="@("minus voluptatem maxime")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2017, 10, 24, 6, 32, 22))"
                            End="@(new DateTime(2018, 7, 5, 13, 57, 47))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(68.3212)"
                            Format="@(TileInfoFormat.Mixed)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(2,
                                    "quia",
                                    10.2111,
                                    48599342.9530)])"
                            Origin="@(new Point(54.3040,
                                    17.2687,
                                    46.5061,
                                    -28.9259,
                                    841.4557,
                                new SpatialReference(4,
                                        "illum",
                                        "voluptatem",
                                        "nostrum"),
                                    true,
                                    true,
                                    585.1678))"
                            Size="@([6])">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("occaecati")"
                                Wkt="@("placeat")"
                                Wkt2="@("voluptatum")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(1)"
                            ImageCoordinateSystem="@("sint")"
                            Wkt="@("ex")"
                            Wkt2="@("tempore")">
                        </SpatialReference>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-178.7908)"
                            Xmin="@(24.8393)"
                            Ymax="@(40.8843)"
                            Ymin="@(-23.7276)"
                            Zmax="@(605.6386)"
                            Zmin="@(896.7719)"
                            Mmax="@(112.8849)"
                            Mmin="@(373.0769)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("in")"
                                Wkt="@("ratione")"
                                Wkt2="@("dolores")">
                            </SpatialReference>
                        </Extent>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("ullam");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("et");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("maiores");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("officia");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("dolorem");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("voluptas");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("ullam",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("sit",
                "cum");
        await vectorTileLayer.SetPaintProperties("quos",
                "corporis");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(new SpriteSourceImageInfo(658.6549,
                new SpriteSourceImageInfoSpriteSource1x(default,
                        new ImageData([default],
                            "magni",
                            9,
                            8),
                    new ImageObject(default,
                            2,
                            3),
                    new SpriteInfo(6,
                            536.5083,
                            700.1099,
                            3,
                            169.9288,
                            -70.8759),
                        "dicta"),
                new SpriteSourceImageInfoSpriteSource2x(default,
                        new ImageData([default],
                            "provident",
                            5,
                            9),
                    new ImageObject(default,
                            6,
                            2),
                    new SpriteInfo(2,
                            276.5397,
                            323.3516,
                            9,
                            -118.9993,
                            -52.8130),
                        "asperiores"),
                    "http://theo.net"));
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("harum",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("tempora",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.SourceIn;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(40.6059,
                    -119.3669,
                    38.8333,
                    81.4355,
                    912.2301,
                    898.8032,
                    408.9303,
                    22.3788,
                new SpatialReference(9,
                        "voluptas",
                        "praesentium",
                        "eligendi"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-124.3218,
                    56.7093,
                    29.1843,
                    49.7165,
                    404.1106,
                    411.4343,
                    893.0984,
                    993.0207,
                new SpatialReference(5,
                        "ab",
                        "sapiente",
                        "tenetur"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "voluptatem",
                    "illo",
                    "pariatur");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(132.4676,
                    TileInfoFormat.Emf,
                    true,
                [new LOD(8,
                        "dolore",
                        29.1693,
                        22372748.6319),
                new LOD(1,
                        "cupiditate",
                        31.6219,
                        1162588.9413)],
                new Point(-55.2366,
                        23.2853,
                        54.5387,
                        31.8772,
                        13.2948,
                    new SpatialReference(3,
                            "et",
                            "debitis",
                            "sequi"),
                        true,
                        true,
                        760.5715),
                    [2,
                        9],
                new SpatialReference(8,
                        "est",
                        "voluptate",
                        "quia"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 1, 4, 14, 4, 58),
                    new DateTime(2003, 5, 3, 18, 11, 41));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
