@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("tempore")"
                        BlendMode="@(BlendMode.DestinationOut)"
                        Effect="@(new Effect("quod",
                            42825457.8570))"
                        FullExtent="@(new Extent(-170.8947,
                                -73.9476,
                                85.3144,
                                -87.3562,
                                556.6941,
                                192.0492,
                                762.1391,
                                92.0700,
                            new SpatialReference(3,
                                    "quia",
                                    "velit",
                                    "aut"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(69.5751,
                                -170.4416,
                                -2.5439,
                                -89.5737,
                                353.1881,
                                834.1438,
                                63.7902,
                                419.9997,
                            new SpatialReference(9,
                                    "inventore",
                                    "dolorum",
                                    "porro"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(10215165.3460)"
                        MinScale="@(20768.7409)"
                        Opacity="@(0.4606)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(1,
                                "sunt",
                                "excepturi",
                                "sit"))"
                        Style="@("perferendis")"
                        Title="@("labore occaecati aliquid")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 8, 26, 6, 42, 9))"
                            End="@(new DateTime(2005, 6, 20, 1, 43, 53))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(131.7100)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "pariatur",
                                    97.8513,
                                    15133646.9760),
                            new LOD(3,
                                    "impedit",
                                    90.3608,
                                    30428243.1220),
                            new LOD(3,
                                    "impedit",
                                    66.6798,
                                    42450321.8143)])"
                            Origin="@(new Point(-123.6383,
                                    73.6010,
                                    64.2004,
                                    83.2070,
                                    351.2411,
                                new SpatialReference(4,
                                        "voluptas",
                                        "adipisci",
                                        "atque"),
                                    true,
                                    true,
                                    73.6482))"
                            Size="@([4,
                                3])"
                            SpatialReference="@(new SpatialReference(8,
                                    "quas",
                                    "est",
                                    "debitis"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("dignissimos");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("natus");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("alias");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("eveniet");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("sunt");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("soluta");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("temporibus",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("animi",
                "nostrum");
        await vectorTileLayer.SetPaintProperties("illo",
                "blanditiis");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("hic",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("quaerat",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.Luminosity;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-85.5243,
                    35.8181,
                    38.9791,
                    46.3099,
                    987.5043,
                    274.2299,
                    468.6065,
                    939.0775,
                new SpatialReference(5,
                        "dolorum",
                        "aut",
                        "officia"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(117.1993,
                    173.3509,
                    71.7576,
                    -40.4715,
                    435.0537,
                    945.4508,
                    46.4604,
                    603.0510,
                new SpatialReference(1,
                        "dolorem",
                        "rerum",
                        "vel"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "et",
                    "aut",
                    "minus");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(851.3117,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(1,
                        "placeat",
                        34.6665,
                        31117401.9486),
                new LOD(9,
                        "architecto",
                        94.1825,
                        13051722.6378)],
                new Point(13.0878,
                        17.0325,
                        -82.5460,
                        82.2617,
                        378.1550,
                    new SpatialReference(6,
                            "fugiat",
                            "qui",
                            "voluptatibus"),
                        true,
                        true,
                        833.3260),
                    [1,
                        5],
                new SpatialReference(7,
                        "est",
                        "itaque",
                        "ducimus"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2006, 7, 25, 12, 22, 2),
                    new DateTime(2001, 9, 16, 18, 18, 33));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
