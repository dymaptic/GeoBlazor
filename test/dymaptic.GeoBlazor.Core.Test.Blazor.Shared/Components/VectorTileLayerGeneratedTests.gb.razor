@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("consectetur")"
                        BlendMode="@(BlendMode.Normal)"
                        Effect="@(new Effect("saepe",
                            35193313.0951))"
                        FullExtent="@(new Extent(-115.7917,
                                -33.3286,
                                -36.9498,
                                76.1801,
                                510.2641,
                                984.6960,
                                557.0276,
                                560.2765,
                            new SpatialReference(4,
                                    "et",
                                    "quibusdam",
                                    "quas"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-102.1948,
                                85.9542,
                                56.4250,
                                -45.5335,
                                906.5827,
                                83.6478,
                                901.8816,
                                931.3603,
                            new SpatialReference(4,
                                    "et",
                                    "saepe",
                                    "omnis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(49482377.7017)"
                        MinScale="@(28090.3693)"
                        Opacity="@(0.5212)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(7,
                                "quae",
                                "voluptatem",
                                "iure"))"
                        Style="@("necessitatibus")"
                        Title="@("reiciendis quia quae")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 6, 17, 21, 25, 58))"
                            End="@(new DateTime(2009, 5, 5, 9, 8, 13))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(376.3524)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "ad",
                                    94.7017,
                                    39049452.0321),
                            new LOD(4,
                                    "voluptas",
                                    78.7035,
                                    41964169.6633),
                            new LOD(3,
                                    "illum",
                                    91.4190,
                                    44154919.2834),
                            new LOD(4,
                                    "alias",
                                    83.2118,
                                    26528698.9439)])"
                            Origin="@(new Point(-124.4179,
                                    73.2172,
                                    4.7040,
                                    42.0994,
                                    7.0445,
                                new SpatialReference(3,
                                        "voluptatem",
                                        "et",
                                        "nemo"),
                                    true,
                                    true,
                                    816.4198))"
                            Size="@([6,
                                5])"
                            SpatialReference="@(new SpatialReference(3,
                                    "expedita",
                                    "itaque",
                                    "eius"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("sapiente")"
                            ApiKey="@("incidunt")"
                            AvgRating="@(648.0258)"
                            Categories="@(["sequi",
                                "et",
                                "quia",
                                "assumenda"])"
                            Created="@(new DateTime(2023, 5, 15, 16, 30, 11))"
                            Culture="@("molestiae")"
                            Description="@("sunt dicta asperiores qui")"
                            Extent="@(new Extent(32.3983,
                                    147.3291,
                                    -8.3514,
                                    -59.4814,
                                    428.9012,
                                    4.8094,
                                    536.7850,
                                    52.6779,
                                new SpatialReference(2,
                                        "quod",
                                        "quis",
                                        "sit"),
                                    true,
                                    true))"
                            GroupCategories="@(["voluptates",
                                "optio"])"
                            LicenseInfo="@("fuga")"
                            Modified="@(new DateTime(2019, 5, 2, 9, 12, 4))"
                            Name="@("updatedAt")"
                            NumComments="@(641.2247)"
                            NumRatings="@(877.9730)"
                            NumViews="@(271.3669)"
                            Owner="@("Soledad Greenholt")"
                            OwnerFolder="@("Hilda Denesik")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["illo",
                                        "dolor",
                                        "rerum",
                                        "doloribus"],
                                    "recusandae",
                                    "minima",
                                    "consequatur",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("est")"
                            Screenshots="@(["quo",
                                "quam"])"
                            Size="@(5)"
                            Snippet="@("cumque")"
                            Tags="@(["est",
                                "officiis"])"
                            Title="@("atque quia maiores")"
                            TypeKeywords="@(["consequatur",
                                "aut"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("sit");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("nostrum");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("maiores");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("nostrum");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("iusto");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("aut");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("asperiores",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("praesentium",
                "sint");
        await vectorTileLayer.SetPaintProperties("ipsam",
                "nemo");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("sed",
                7);
        await vectorTileLayer.SetStyleLayerVisibility("et",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Lighter;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-40.0835,
                    1.4608,
                    69.2177,
                    27.3041,
                    567.8554,
                    555.7845,
                    729.5650,
                    590.6330,
                new SpatialReference(1,
                        "quo",
                        "omnis",
                        "voluptas"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-147.0057,
                    -66.6042,
                    19.3527,
                    86.6915,
                    519.9288,
                    452.4973,
                    936.1061,
                    655.5249,
                new SpatialReference(7,
                        "et",
                        "est",
                        "nihil"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Shared,
                    "id",
                    "rem",
                    71.6027,
                    ["voluptate",
                        "rem",
                        "placeat"],
                    new DateTime(2006, 4, 27, 14, 5, 23),
                    "placeat",
                    "error ut id eum",
                new Extent(-152.9882,
                        129.6160,
                        61.0305,
                        -8.5189,
                        620.8779,
                        425.5976,
                        818.4015,
                        910.7978,
                    new SpatialReference(1,
                            "aspernatur",
                            "et",
                            "culpa"),
                        true,
                        true),
                    ["qui",
                        "in"],
                    "quia",
                    new DateTime(2004, 4, 18, 16, 39, 11),
                    "status",
                    356.1725);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "aut",
                    "numquam",
                    "ad");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(937.7397,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(1,
                        "minus",
                        37.3471,
                        8098483.1678),
                new LOD(7,
                        "delectus",
                        36.5132,
                        23851488.4178)],
                new Point(-158.0520,
                        12.5731,
                        -92.3154,
                        21.5859,
                        192.5842,
                    new SpatialReference(7,
                            "tempore",
                            "optio",
                            "aut"),
                        true,
                        true,
                        304.2389),
                    [1,
                        3,
                        4],
                new SpatialReference(1,
                        "cupiditate",
                        "molestiae",
                        "velit"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 7, 15, 5, 7, 31),
                    new DateTime(2019, 9, 5, 16, 10, 41));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
