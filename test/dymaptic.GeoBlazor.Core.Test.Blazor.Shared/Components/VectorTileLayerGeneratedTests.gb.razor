@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("a")"
                        BlendMode="@(BlendMode.DestinationAtop)"
                        Effect="@(new Effect("quae",
                            22899749.0744))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(18400080.7786)"
                        MinScale="@(5547.7381)"
                        Opacity="@(0.5690)"
                        PersistenceEnabled="@(true)"
                        Style="@("voluptas")"
                        Title="@("libero debitis qui")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2018, 11, 22, 13, 31, 17))"
                            End="@(new DateTime(2012, 7, 7, 4, 31, 34))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(20.0913)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "laudantium",
                                    61.7831,
                                    29734526.3093),
                            new LOD(3,
                                    "sit",
                                    31.1222,
                                    29586079.9338)])"
                            Origin="@(new Point(-151.6274,
                                    45.3150,
                                    127.0914,
                                    -86.4642,
                                    60.3304,
                                new SpatialReference(9,
                                        "sunt",
                                        "harum",
                                        "impedit"),
                                    true,
                                    true,
                                    216.2004))"
                            Size="@([5,
                                3])">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("itaque")"
                                Wkt="@("omnis")"
                                Wkt2="@("architecto")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(2)"
                            ImageCoordinateSystem="@("delectus")"
                            Wkt="@("accusamus")"
                            Wkt2="@("nulla")">
                        </SpatialReference>
                        <PortalItem />
                        <Extent 
                            Xmax="@(-72.1438)"
                            Xmin="@(-54.0205)"
                            Ymax="@(-6.5105)"
                            Ymin="@(26.7082)"
                            Zmax="@(963.6659)"
                            Zmin="@(907.9676)"
                            Mmax="@(16.8396)"
                            Mmin="@(643.7037)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("aut")"
                                Wkt="@("esse")"
                                Wkt2="@("earum")">
                            </SpatialReference>
                        </Extent>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("nostrum");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("totam");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("ut");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("ab");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("molestiae");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("delectus");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("facere",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("inventore",
                "quisquam");
        await vectorTileLayer.SetPaintProperties("voluptatem",
                "eligendi");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("pariatur",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("voluptate",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-14.1152,
                    -22.1772,
                    -41.9980,
                    -83.2641,
                    472.6440,
                    569.7325,
                    941.0280,
                    270.4555,
                new SpatialReference(3,
                        "quas",
                        "non",
                        "rem"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(33.7919,
                    -136.8675,
                    -32.6599,
                    -81.0269,
                    128.5044,
                    68.7012,
                    520.3261,
                    849.4565,
                new SpatialReference(5,
                        "eos",
                        "animi",
                        "illo"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "repudiandae",
                    "sit",
                    "voluptatem");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(322.7706,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(6,
                        "delectus",
                        71.1268,
                        21274410.1791)],
                new Point(-49.6691,
                        62.8544,
                        -150.1526,
                        -15.6249,
                        454.5076,
                    new SpatialReference(9,
                            "consequatur",
                            "at",
                            "laborum"),
                        true,
                        true,
                        174.7559),
                    [8],
                new SpatialReference(9,
                        "veritatis",
                        "et",
                        "cumque"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 5, 23, 13, 11, 46),
                    new DateTime(2004, 10, 25, 17, 20, 52));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
