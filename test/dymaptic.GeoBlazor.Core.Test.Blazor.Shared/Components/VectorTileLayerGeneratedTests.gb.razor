@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("non")"
                        BlendMode="@(BlendMode.ColorDodge)"
                        Effect="@(new Effect("numquam",
                            17277114.0956))"
                        FullExtent="@(new Extent(13.5699,
                                -111.6262,
                                46.6373,
                                -80.3319,
                                279.1099,
                                194.9029,
                                133.2356,
                                519.9296,
                            new SpatialReference(6,
                                    "nemo",
                                    "at",
                                    "dignissimos"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-58.8504,
                                87.8714,
                                -53.2658,
                                -11.8594,
                                326.8827,
                                758.6946,
                                383.1732,
                                252.0617,
                            new SpatialReference(1,
                                    "quis",
                                    "totam",
                                    "aut"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(8774138.5394)"
                        MinScale="@(15425.6537)"
                        Opacity="@(0.2358)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(1,
                                "ut",
                                "nobis",
                                "culpa"))"
                        Style="@("atque")"
                        Title="@("omnis maiores provident")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2007, 7, 17, 12, 19, 38))"
                            End="@(new DateTime(2012, 6, 17, 13, 31, 54))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(880.3254)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "non",
                                    98.5015,
                                    38171678.2514),
                            new LOD(1,
                                    "non",
                                    84.6988,
                                    1702456.3279),
                            new LOD(8,
                                    "soluta",
                                    42.7615,
                                    21518350.4824),
                            new LOD(4,
                                    "sunt",
                                    24.0876,
                                    29023300.5083)])"
                            Origin="@(new Point(-135.0259,
                                    -9.8700,
                                    105.9792,
                                    -58.2219,
                                    967.0192,
                                new SpatialReference(2,
                                        "facere",
                                        "dolor",
                                        "est"),
                                    true,
                                    true,
                                    318.8063))"
                            Size="@([3,
                                4,
                                2])"
                            SpatialReference="@(new SpatialReference(6,
                                    "saepe",
                                    "possimus",
                                    "dolore"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("totam")"
                            ApiKey="@("modi")"
                            AvgRating="@(315.8083)"
                            Categories="@(["officiis",
                                "explicabo",
                                "dolor",
                                "eveniet"])"
                            Created="@(new DateTime(2001, 10, 5, 18, 36, 22))"
                            Culture="@("dolorem")"
                            Description="@("aspernatur id facere rem id dolores tenetur")"
                            Extent="@(new Extent(157.0028,
                                    -19.3092,
                                    57.8307,
                                    63.8935,
                                    18.7040,
                                    74.7623,
                                    106.0352,
                                    8.0614,
                                new SpatialReference(9,
                                        "quia",
                                        "et",
                                        "aut"),
                                    true,
                                    true))"
                            GroupCategories="@(["quidem",
                                "dolor",
                                "perspiciatis",
                                "et"])"
                            LicenseInfo="@("velit")"
                            Modified="@(new DateTime(2019, 5, 14, 12, 10, 24))"
                            Name="@("password")"
                            NumComments="@(367.5949)"
                            NumRatings="@(566.4897)"
                            NumViews="@(835.5777)"
                            Owner="@("Justina Daniel")"
                            OwnerFolder="@("Era Labadie")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Auto,
                                    ["in",
                                        "eum",
                                        "doloribus",
                                        "ad"],
                                    "doloribus",
                                    "pariatur",
                                    "inventore",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("qui")"
                            Screenshots="@(["fugiat",
                                "reprehenderit"])"
                            Size="@(4)"
                            Snippet="@("rerum")"
                            Tags="@(["sit",
                                "odit",
                                "consequatur"])"
                            Title="@("sint et maxime")"
                            TypeKeywords="@(["non",
                                "quam",
                                "iure",
                                "atque"])"
                            Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("doloremque");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("aliquid");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("iusto");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("blanditiis");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(3);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("inventore");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("temporibus");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("eos",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("voluptatem",
                "quis");
        await vectorTileLayer.SetPaintProperties("sunt",
                "ut");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("quidem",
                9);
        await vectorTileLayer.SetStyleLayerVisibility("omnis",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Hue;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(23.7439,
                    -137.8499,
                    -48.6778,
                    -48.0627,
                    145.7908,
                    292.5026,
                    374.7099,
                    535.0916,
                new SpatialReference(5,
                        "non",
                        "doloribus",
                        "necessitatibus"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(115.6301,
                    121.8410,
                    -25.9063,
                    -41.8566,
                    886.9674,
                    371.6672,
                    554.5170,
                    953.0105,
                new SpatialReference(8,
                        "voluptas",
                        "nam",
                        "architecto"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "voluptas",
                    "repellendus",
                    796.9294,
                    ["quod",
                        "voluptatibus",
                        "voluptates"],
                    new DateTime(2011, 8, 26, 16, 56, 3),
                    "rerum",
                    "quo natus enim non dolore odio nihil",
                new Extent(44.2510,
                        -172.8429,
                        77.6372,
                        -79.2746,
                        142.0788,
                        106.1524,
                        586.0303,
                        833.3320,
                    new SpatialReference(6,
                            "rerum",
                            "vel",
                            "vitae"),
                        true,
                        true),
                    ["autem",
                        "nostrum",
                        "provident"],
                    "neque",
                    new DateTime(2001, 11, 23, 6, 14, 18),
                    "createdAt",
                    963.4677);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "commodi",
                    "sunt",
                    "delectus");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(101.1215,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(7,
                        "molestiae",
                        7.1419,
                        10153525.0435),
                new LOD(2,
                        "ea",
                        56.3389,
                        45145711.4906),
                new LOD(8,
                        "fuga",
                        25.2793,
                        16514952.0056)],
                new Point(-170.4937,
                        -22.8730,
                        -179.6037,
                        -41.6089,
                        156.6903,
                    new SpatialReference(1,
                            "minus",
                            "earum",
                            "nisi"),
                        true,
                        true,
                        241.0138),
                    [8,
                        1,
                        4],
                new SpatialReference(3,
                        "aliquid",
                        "eos",
                        "possimus"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 7, 13, 17, 44, 13),
                    new DateTime(2014, 3, 3, 7, 3, 5));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
