@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("debitis")"
                        BlendMode="@(BlendMode.SourceOut)"
                        Effect="@(new Effect("quas",
                            1769567.2428))"
                        FullExtent="@(new Extent(-130.8435,
                                49.8552,
                                75.8474,
                                66.2737,
                                322.8889,
                                546.9620,
                                443.9952,
                                469.7461,
                            new SpatialReference(9,
                                    "ea",
                                    "eum",
                                    "harum"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-68.5855,
                                91.5421,
                                -8.2405,
                                76.8647,
                                812.0194,
                                590.5336,
                                918.0438,
                                322.8936,
                            new SpatialReference(7,
                                    "est",
                                    "laborum",
                                    "voluptas"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(1333889.8519)"
                        MinScale="@(49465.1763)"
                        Opacity="@(0.1840)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(5,
                                "ut",
                                "ullam",
                                "nobis"))"
                        Style="@("et")"
                        Title="@("aut est quidem")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2014, 1, 14, 1, 25, 42))"
                            End="@(new DateTime(2012, 5, 23, 4, 51, 33))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(91.0534)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "nostrum",
                                    82.3507,
                                    10767257.3334)])"
                            Origin="@(new Point(-69.3646,
                                    86.0886,
                                    151.6561,
                                    66.0970,
                                    217.5401,
                                new SpatialReference(4,
                                        "voluptates",
                                        "quam",
                                        "et"),
                                    true,
                                    true,
                                    909.4855))"
                            Size="@([7,
                                3])"
                            SpatialReference="@(new SpatialReference(2,
                                    "aut",
                                    "ex",
                                    "doloremque"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("qui");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("accusamus");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("quod");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("error");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(8);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("accusantium");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("nemo");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("voluptas",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("illum",
                "et");
        await vectorTileLayer.SetPaintProperties("vero",
                "expedita");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("veniam",
                2);
        await vectorTileLayer.SetStyleLayerVisibility("beatae",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(107.9553,
                    -108.6949,
                    84.2339,
                    -35.1162,
                    924.9805,
                    747.2508,
                    897.4149,
                    31.4851,
                new SpatialReference(2,
                        "ipsa",
                        "consequatur",
                        "dolore"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(132.9114,
                    -106.6566,
                    -60.3679,
                    49.1445,
                    981.1558,
                    350.7235,
                    154.4921,
                    422.2620,
                new SpatialReference(8,
                        "libero",
                        "possimus",
                        "est"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "accusantium",
                    "ipsum",
                    "sed");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(804.1318,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(1,
                        "provident",
                        11.6221,
                        9750599.1716),
                new LOD(6,
                        "corrupti",
                        28.9066,
                        23561775.6496),
                new LOD(5,
                        "odit",
                        62.5754,
                        42732933.9385),
                new LOD(3,
                        "autem",
                        47.9196,
                        22189089.2501)],
                new Point(7.9638,
                        44.6298,
                        7.2248,
                        82.1787,
                        718.4484,
                    new SpatialReference(1,
                            "assumenda",
                            "animi",
                            "consequatur"),
                        true,
                        true,
                        260.2433),
                    [1,
                        8],
                new SpatialReference(5,
                        "itaque",
                        "est",
                        "debitis"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2015, 6, 24, 10, 46, 42),
                    new DateTime(2002, 9, 13, 12, 12, 25));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
