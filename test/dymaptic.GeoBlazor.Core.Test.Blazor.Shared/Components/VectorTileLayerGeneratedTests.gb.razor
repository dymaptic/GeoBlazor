@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("qui")"
                        BlendMode="@(BlendMode.Minus)"
                        Effect="@(new Effect("excepturi",
                            20675691.6796))"
                        FullExtent="@(new Extent(-160.8767,
                                -75.7610,
                                -47.2834,
                                -85.2525,
                                706.8650,
                                474.9665,
                                137.6599,
                                901.8225,
                            new SpatialReference(3,
                                    "nam",
                                    "sit",
                                    "eum"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(123.0747,
                                149.9844,
                                -45.6126,
                                76.8911,
                                270.0777,
                                265.8158,
                                800.6374,
                                230.2852,
                            new SpatialReference(4,
                                    "in",
                                    "hic",
                                    "eum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(8990381.6028)"
                        MinScale="@(16549.5185)"
                        Opacity="@(0.0242)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(2,
                                "fuga",
                                "corrupti",
                                "aut"))"
                        Style="@("in")"
                        Title="@("veritatis inventore consequatur")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2013, 10, 13, 20, 22, 23))"
                            End="@(new DateTime(2015, 8, 2, 3, 34, 11))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(877.9475)"
                            Format="@(TileInfoFormat.Tiff)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "aut",
                                    60.6062,
                                    38970930.8845),
                            new LOD(9,
                                    "asperiores",
                                    57.9268,
                                    9784877.8577)])"
                            Origin="@(new Point(68.7765,
                                    -87.5761,
                                    -132.8579,
                                    -61.8174,
                                    380.0514,
                                new SpatialReference(8,
                                        "beatae",
                                        "occaecati",
                                        "atque"),
                                    true,
                                    true,
                                    666.5085))"
                            Size="@([3,
                                9])"
                            SpatialReference="@(new SpatialReference(9,
                                    "illo",
                                    "exercitationem",
                                    "repellendus"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("ut");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("modi");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("est");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("aspernatur");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(1);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("et");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("mollitia");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("sit",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("maiores",
                "temporibus");
        await vectorTileLayer.SetPaintProperties("corporis",
                "enim");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("deserunt",
                8);
        await vectorTileLayer.SetStyleLayerVisibility("totam",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.SourceOut;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(174.3363,
                    179.1968,
                    -26.5323,
                    -1.2911,
                    909.6997,
                    673.1829,
                    88.0976,
                    942.8507,
                new SpatialReference(5,
                        "aliquam",
                        "dolorum",
                        "ut"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-1.6279,
                    -42.2617,
                    26.5936,
                    -89.9877,
                    508.3979,
                    438.1064,
                    622.6102,
                    674.6860,
                new SpatialReference(1,
                        "accusamus",
                        "dolore",
                        "est"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "ut",
                    "odit",
                    "quidem");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(886.5625,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(4,
                        "dolores",
                        78.3875,
                        12167397.5860),
                new LOD(6,
                        "sed",
                        20.6783,
                        39701572.5266)],
                new Point(-176.9434,
                        79.6426,
                        69.9852,
                        7.5933,
                        921.5449,
                    new SpatialReference(9,
                            "corrupti",
                            "voluptatem",
                            "voluptas"),
                        true,
                        true,
                        35.6513),
                    [8,
                        8,
                        3],
                new SpatialReference(4,
                        "ut",
                        "commodi",
                        "sed"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 4, 2, 8, 42, 52),
                    new DateTime(2018, 11, 20, 3, 11, 39));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
