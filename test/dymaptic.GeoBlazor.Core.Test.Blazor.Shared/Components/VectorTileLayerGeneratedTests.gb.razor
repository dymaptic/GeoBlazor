@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("occaecati")"
                        BlendMode="@(BlendMode.VividLight)"
                        Effect="@(new Effect("totam",
                            20209907.3701))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(20913124.9981)"
                        MinScale="@(17134.1645)"
                        Opacity="@(0.6927)"
                        PersistenceEnabled="@(true)"
                        Style="@("architecto")"
                        Title="@("eius est aut")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 7, 22, 0, 40, 23))"
                            End="@(new DateTime(2019, 5, 4, 11, 15, 21))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(289.8842)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(7,
                                    "molestiae",
                                    82.9424,
                                    28180803.1765)])"
                            Origin="@(new Point(-73.1427,
                                    21.7033,
                                    -177.0792,
                                    84.0682,
                                    118.0620,
                                new SpatialReference(7,
                                        "excepturi",
                                        "vitae",
                                        "debitis"),
                                    true,
                                    true,
                                    931.0516))"
                            Size="@([8])">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("cum")"
                                Wkt="@("reiciendis")"
                                Wkt2="@("adipisci")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(6)"
                            ImageCoordinateSystem="@("maiores")"
                            Wkt="@("aspernatur")"
                            Wkt2="@("quaerat")">
                        </SpatialReference>
                        <PortalItem />
                        <Extent 
                            Xmax="@(158.3836)"
                            Xmin="@(-105.9943)"
                            Ymax="@(0.2895)"
                            Ymin="@(4.0259)"
                            Zmax="@(319.2999)"
                            Zmin="@(221.7650)"
                            Mmax="@(505.0979)"
                            Mmin="@(519.5548)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("cupiditate")"
                                Wkt="@("dolorum")"
                                Wkt2="@("exercitationem")">
                            </SpatialReference>
                        </Extent>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("amet");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("vero");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("aut");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("alias");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("quia");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("beatae");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("ipsa",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("consequatur",
                "neque");
        await vectorTileLayer.SetPaintProperties("ut",
                "qui");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(new SpriteSourceUrlInfo(50.7778,
                SpriteFormat.Webp,
                    "https://kasey.info"));
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("et",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("molestiae",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-108.5408,
                    42.6290,
                    79.5328,
                    -48.4464,
                    605.2598,
                    53.2890,
                    90.2139,
                    154.2237,
                new SpatialReference(2,
                        "quis",
                        "sed",
                        "rerum"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-52.1921,
                    -89.5676,
                    -84.6370,
                    -12.3463,
                    446.1596,
                    400.2225,
                    109.4014,
                    325.0445,
                new SpatialReference(1,
                        "nemo",
                        "et",
                        "velit"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "amet",
                    "accusamus",
                    "officia");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(351.6044,
                    TileInfoFormat.Svg,
                    true,
                [new LOD(8,
                        "ducimus",
                        85.5575,
                        6518307.9217)],
                new Point(4.5922,
                        10.0639,
                        -26.5485,
                        82.2518,
                        84.8003,
                    new SpatialReference(7,
                            "amet",
                            "voluptates",
                            "quisquam"),
                        true,
                        true,
                        353.9213),
                    [5,
                        7],
                new SpatialReference(1,
                        "dolor",
                        "doloribus",
                        "totam"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 9, 3, 3, 54, 23),
                    new DateTime(2016, 3, 26, 14, 42, 52));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
