@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("rerum")"
                        BlendMode="@(BlendMode.Darken)"
                        Effect="@(new Effect("aut",
                            22820526.6445))"
                        FullExtent="@(new Extent(-7.8878,
                                -23.6801,
                                -33.3705,
                                5.9653,
                                578.9585,
                                354.1968,
                                689.0614,
                                112.2087,
                            new SpatialReference(7,
                                    "enim",
                                    "necessitatibus",
                                    "ut"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-133.9380,
                                -36.9866,
                                36.0964,
                                -84.8697,
                                634.0030,
                                252.7822,
                                709.2117,
                                529.0644,
                            new SpatialReference(5,
                                    "et",
                                    "reiciendis",
                                    "rerum"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(15962382.1741)"
                        MinScale="@(37195.0793)"
                        Opacity="@(0.0858)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(4,
                                "mollitia",
                                "perspiciatis",
                                "delectus"))"
                        Style="@("minima")"
                        Title="@("est et amet")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2018, 6, 22, 2, 51, 47))"
                            End="@(new DateTime(2021, 1, 11, 12, 14, 13))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(971.7105)"
                            Format="@(TileInfoFormat.Png24)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "deserunt",
                                    60.3760,
                                    16641631.9455)])"
                            Origin="@(new Point(117.5416,
                                    -88.3563,
                                    -157.9817,
                                    -67.3255,
                                    865.8937,
                                new SpatialReference(9,
                                        "perspiciatis",
                                        "et",
                                        "quia"),
                                    true,
                                    true,
                                    972.6678))"
                            Size="@([2,
                                2,
                                5])"
                            SpatialReference="@(new SpatialReference(2,
                                    "rerum",
                                    "omnis",
                                    "magnam"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("iusto");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("ullam");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("omnis");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("rerum");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("dolor");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("aperiam");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("sunt",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("minima",
                "enim");
        await vectorTileLayer.SetPaintProperties("qui",
                "autem");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("voluptas",
                5);
        await vectorTileLayer.SetStyleLayerVisibility("molestias",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(100.5050,
                    115.4762,
                    -63.3800,
                    21.4486,
                    847.3491,
                    652.1564,
                    408.7750,
                    664.9399,
                new SpatialReference(7,
                        "voluptates",
                        "aperiam",
                        "quo"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-95.9129,
                    71.1358,
                    35.6258,
                    62.0880,
                    366.4699,
                    654.3082,
                    261.4115,
                    969.2927,
                new SpatialReference(9,
                        "quia",
                        "nulla",
                        "suscipit"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(9,
                    "voluptates",
                    "id",
                    "numquam");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(861.6762,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(5,
                        "sed",
                        4.8218,
                        13564393.9097),
                new LOD(6,
                        "eos",
                        35.1968,
                        23594700.1115),
                new LOD(8,
                        "in",
                        58.7751,
                        4565486.4960),
                new LOD(5,
                        "suscipit",
                        51.8561,
                        44709451.5606)],
                new Point(-167.0345,
                        13.3024,
                        -10.8292,
                        -27.2002,
                        451.1123,
                    new SpatialReference(7,
                            "accusamus",
                            "qui",
                            "aut"),
                        true,
                        true,
                        401.8737),
                    [1,
                        3],
                new SpatialReference(4,
                        "mollitia",
                        "et",
                        "totam"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 9, 11, 0, 52, 36),
                    new DateTime(2011, 11, 20, 11, 34, 13));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
