@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("eum")"
                        BlendMode="@(BlendMode.Lighten)"
                        Effect="@(new Effect("pariatur",
                            43874758.7156))"
                        FullExtent="@(new Extent(-151.2321,
                                -12.8556,
                                77.3606,
                                29.4631,
                                350.8222,
                                916.2447,
                                664.4494,
                                932.9652,
                            new SpatialReference(9,
                                    "animi",
                                    "maiores",
                                    "deleniti"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-58.5054,
                                -115.2229,
                                53.7080,
                                -12.2920,
                                359.1943,
                                961.6875,
                                80.2643,
                                137.1030,
                            new SpatialReference(1,
                                    "neque",
                                    "ratione",
                                    "illo"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(33796626.9786)"
                        MinScale="@(10510.8262)"
                        Opacity="@(0.7421)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(9,
                                "et",
                                "sequi",
                                "nostrum"))"
                        Style="@("eum")"
                        Title="@("vel ad consectetur")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2006, 10, 20, 16, 35, 58))"
                            End="@(new DateTime(2015, 7, 20, 10, 7, 36))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(460.4420)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "quis",
                                    55.0830,
                                    21511124.4747)])"
                            Origin="@(new Point(-155.4134,
                                    72.9409,
                                    -53.0370,
                                    70.3982,
                                    815.5903,
                                new SpatialReference(6,
                                        "quam",
                                        "assumenda",
                                        "libero"),
                                    true,
                                    true,
                                    605.0493))"
                            Size="@([3,
                                3,
                                2,
                                7])"
                            SpatialReference="@(new SpatialReference(9,
                                    "adipisci",
                                    "in",
                                    "qui"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("consequatur")"
                            ApiKey="@("voluptas")"
                            AvgRating="@(779.9335)"
                            Categories="@(["reiciendis",
                                "ab"])"
                            Created="@(new DateTime(2016, 11, 3, 6, 54, 3))"
                            Culture="@("atque")"
                            Description="@("enim voluptate esse quis minus est animi")"
                            Extent="@(new Extent(-97.4566,
                                    98.9043,
                                    35.7214,
                                    -12.9856,
                                    732.7966,
                                    484.2867,
                                    746.3752,
                                    785.9806,
                                new SpatialReference(8,
                                        "maiores",
                                        "aliquam",
                                        "quae"),
                                    true,
                                    true))"
                            GroupCategories="@(["quaerat",
                                "nam",
                                "est",
                                "ut"])"
                            LicenseInfo="@("autem")"
                            Modified="@(new DateTime(2021, 1, 16, 21, 45, 27))"
                            Name="@("id")"
                            NumComments="@(273.0478)"
                            NumRatings="@(809.5932)"
                            NumViews="@(567.3708)"
                            Owner="@("Sterling Lubowitz")"
                            OwnerFolder="@("Anahi Schaefer")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["eius",
                                        "eaque"],
                                    "cumque",
                                    "et",
                                    "quisquam",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("at")"
                            Screenshots="@(["perferendis",
                                "suscipit",
                                "id"])"
                            Size="@(6)"
                            Snippet="@("labore")"
                            Tags="@(["ut",
                                "fuga"])"
                            Title="@("deleniti omnis voluptatem")"
                            TypeKeywords="@(["error",
                                "quos",
                                "sit"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("incidunt");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("deleniti");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("accusantium");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("est");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(9);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("nemo");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("rerum");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("inventore",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("fugiat",
                "ut");
        await vectorTileLayer.SetPaintProperties("maxime",
                "est");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("non",
                7);
        await vectorTileLayer.SetStyleLayerVisibility("magni",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.Overlay;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(112.1159,
                    70.4223,
                    -30.9199,
                    -21.6493,
                    339.9322,
                    382.9609,
                    42.2700,
                    765.7341,
                new SpatialReference(7,
                        "vero",
                        "consequatur",
                        "voluptates"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-133.1870,
                    -92.0411,
                    -79.5950,
                    49.2813,
                    576.9795,
                    206.1014,
                    910.2315,
                    145.9267,
                new SpatialReference(2,
                        "consequatur",
                        "hic",
                        "sed"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "maxime",
                    "dolor",
                    651.1215,
                    ["quia",
                        "officiis"],
                    new DateTime(2003, 10, 22, 15, 32, 11),
                    "illo",
                    "id enim rerum magni aut totam voluptas",
                new Extent(113.9079,
                        151.2385,
                        52.3803,
                        -36.8294,
                        723.7938,
                        6.4532,
                        918.8942,
                        407.6449,
                    new SpatialReference(7,
                            "quis",
                            "id",
                            "perferendis"),
                        true,
                        true),
                    ["sunt",
                        "non"],
                    "nobis",
                    new DateTime(2009, 2, 21, 5, 15, 24),
                    "category",
                    114.3892);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "quos",
                    "sit",
                    "est");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(157.3505,
                    TileInfoFormat.Png24,
                    true,
                [new LOD(2,
                        "nihil",
                        85.9722,
                        32831113.2322)],
                new Point(157.9965,
                        41.2307,
                        -164.4336,
                        -65.3306,
                        289.5658,
                    new SpatialReference(3,
                            "quas",
                            "necessitatibus",
                            "velit"),
                        true,
                        true,
                        493.1602),
                    [5,
                        8,
                        4],
                new SpatialReference(6,
                        "autem",
                        "reiciendis",
                        "aut"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 4, 4, 12, 7, 11),
                    new DateTime(2023, 1, 17, 19, 41, 57));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
