@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("corrupti")"
                        BlendMode="@(BlendMode.Exclusion)"
                        Effect="@(new Effect("magni",
                            22737396.1183))"
                        FullExtent="@(new Extent(-43.5416,
                                -133.8890,
                                0.7516,
                                -35.8726,
                                865.9245,
                                700.2005,
                                660.1068,
                                501.4932,
                            new SpatialReference(1,
                                    "molestiae",
                                    "odio",
                                    "est"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(165.9964,
                                -124.2359,
                                -9.7063,
                                68.4724,
                                397.4762,
                                801.7361,
                                693.0903,
                                230.6106,
                            new SpatialReference(3,
                                    "nam",
                                    "asperiores",
                                    "officiis"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(19518320.3236)"
                        MinScale="@(48455.7464)"
                        Opacity="@(0.7865)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(8,
                                "ut",
                                "voluptatem",
                                "repellat"))"
                        Style="@("aut")"
                        Title="@("fugiat beatae inventore")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2009, 11, 22, 17, 36, 22))"
                            End="@(new DateTime(2005, 2, 14, 14, 32, 6))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(807.3377)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "tempore",
                                    52.5562,
                                    32085882.8637)])"
                            Origin="@(new Point(148.2248,
                                    75.0799,
                                    -102.6560,
                                    -1.8755,
                                    878.7324,
                                new SpatialReference(1,
                                        "consequatur",
                                        "quaerat",
                                        "dignissimos"),
                                    true,
                                    true,
                                    251.5559))"
                            Size="@([9,
                                2,
                                9])"
                            SpatialReference="@(new SpatialReference(6,
                                    "qui",
                                    "consequatur",
                                    "non"))">
                        </TileInfo>
                        <PortalItem />
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("labore");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("in");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("quis");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("soluta");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(4);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("illo");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("id");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("accusantium",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("esse",
                "accusantium");
        await vectorTileLayer.SetPaintProperties("culpa",
                "quam");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("et",
                1);
        await vectorTileLayer.SetStyleLayerVisibility("quidem",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Screen;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-29.5884,
                    163.5691,
                    42.8073,
                    39.6571,
                    888.2589,
                    215.5735,
                    628.7530,
                    788.3710,
                new SpatialReference(9,
                        "reprehenderit",
                        "et",
                        "esse"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(15.7146,
                    -88.6221,
                    21.0013,
                    59.2980,
                    919.4849,
                    735.0871,
                    238.9029,
                    760.7716,
                new SpatialReference(7,
                        "eos",
                        "ut",
                        "neque"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "et",
                    "consequuntur",
                    "laboriosam");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(87.0739,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(3,
                        "minima",
                        64.8211,
                        28797008.0905),
                new LOD(2,
                        "tempore",
                        37.6857,
                        44615119.2859),
                new LOD(6,
                        "id",
                        50.0960,
                        18886812.5684),
                new LOD(3,
                        "ducimus",
                        81.8663,
                        47560786.5482)],
                new Point(96.8298,
                        -37.6445,
                        90.6324,
                        -1.6513,
                        692.0003,
                    new SpatialReference(2,
                            "est",
                            "maxime",
                            "minus"),
                        true,
                        true,
                        567.4789),
                    [1,
                        5,
                        6],
                new SpatialReference(2,
                        "qui",
                        "debitis",
                        "est"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 7, 27, 4, 34, 14),
                    new DateTime(2022, 3, 10, 19, 22, 15));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
