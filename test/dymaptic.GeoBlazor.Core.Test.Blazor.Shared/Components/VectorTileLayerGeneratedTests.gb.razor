@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("hic")"
                        BlendMode="@(BlendMode.DestinationAtop)"
                        Effect="@(new Effect("deleniti",
                            47379535.1493))"
                        FullExtent="@(new Extent(55.4020,
                                157.8642,
                                -65.2575,
                                -1.2801,
                                288.7557,
                                594.5536,
                                665.0480,
                                422.0478,
                            new SpatialReference(9,
                                    "odit",
                                    "ipsa",
                                    "officia"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-161.9111,
                                -117.7098,
                                72.1912,
                                -40.7437,
                                452.2914,
                                356.6284,
                                484.1196,
                                674.0551,
                            new SpatialReference(4,
                                    "doloribus",
                                    "sequi",
                                    "velit"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(27407017.2538)"
                        MinScale="@(44538.4108)"
                        Opacity="@(0.4061)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(7,
                                "dolores",
                                "dolor",
                                "qui"))"
                        Style="@("quo")"
                        Title="@("ut quos itaque")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2020, 2, 17, 8, 3, 47))"
                            End="@(new DateTime(2007, 11, 5, 22, 14, 40))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(683.5974)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "quo",
                                    10.6722,
                                    20610616.0608),
                            new LOD(3,
                                    "voluptas",
                                    62.0866,
                                    22846343.5193)])"
                            Origin="@(new Point(104.8408,
                                    -26.2717,
                                    -123.6539,
                                    -33.3789,
                                    283.9764,
                                new SpatialReference(4,
                                        "molestiae",
                                        "voluptatem",
                                        "recusandae"),
                                    true,
                                    true,
                                    709.9412))"
                            Size="@([3,
                                7])"
                            SpatialReference="@(new SpatialReference(6,
                                    "dolore",
                                    "totam",
                                    "deserunt"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("voluptatem")"
                            ApiKey="@("quam")"
                            AvgRating="@(315.6494)"
                            Categories="@(["dolorem",
                                "modi",
                                "itaque",
                                "placeat"])"
                            Created="@(new DateTime(2002, 2, 27, 16, 34, 25))"
                            Culture="@("rerum")"
                            Description="@("recusandae velit et consequatur")"
                            Extent="@(new Extent(-0.1052,
                                    -144.6426,
                                    -69.3500,
                                    12.8129,
                                    972.1441,
                                    770.7220,
                                    189.9577,
                                    976.5112,
                                new SpatialReference(2,
                                        "ducimus",
                                        "nulla",
                                        "id"),
                                    true,
                                    true))"
                            GroupCategories="@(["molestiae",
                                "ab",
                                "dolor",
                                "consequatur"])"
                            LicenseInfo="@("aut")"
                            Modified="@(new DateTime(2013, 6, 4, 2, 1, 42))"
                            Name="@("updatedAt")"
                            NumComments="@(327.7190)"
                            NumRatings="@(329.7992)"
                            NumViews="@(870.3593)"
                            Owner="@("Mabelle Schmitt")"
                            OwnerFolder="@("Quinn Kassulke")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["fugit",
                                        "aut",
                                        "repudiandae",
                                        "necessitatibus"],
                                    "minus",
                                    "distinctio",
                                    "consequatur",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("cupiditate")"
                            Screenshots="@(["ex",
                                "molestiae"])"
                            Size="@(9)"
                            Snippet="@("dicta")"
                            Tags="@(["minus",
                                "nulla",
                                "voluptatum",
                                "repudiandae"])"
                            Title="@("ab culpa quia")"
                            TypeKeywords="@(["modi",
                                "fugit"])"
                            Url="@("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("ducimus");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("magni");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("aperiam");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("non");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(5);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("repudiandae");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("ut");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("adipisci",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("facere",
                "vitae");
        await vectorTileLayer.SetPaintProperties("minus",
                "placeat");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("et",
                8);
        await vectorTileLayer.SetStyleLayerVisibility("earum",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Color;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(106.9112,
                    -150.9054,
                    15.4562,
                    -12.3881,
                    596.6123,
                    520.2440,
                    493.9687,
                    50.4802,
                new SpatialReference(7,
                        "dicta",
                        "ea",
                        "sapiente"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-40.1508,
                    -37.6286,
                    5.4776,
                    26.1844,
                    786.1564,
                    278.9168,
                    339.2001,
                    142.5451,
                new SpatialReference(7,
                        "doloremque",
                        "pariatur",
                        "ut"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Org,
                    "quia",
                    "in",
                    584.3644,
                    ["deleniti",
                        "officia"],
                    new DateTime(2004, 3, 20, 3, 3, 16),
                    "fugit",
                    "necessitatibus nulla rem dolorum facilis",
                new Extent(88.0603,
                        123.6537,
                        -51.6666,
                        -70.8523,
                        810.5268,
                        982.8614,
                        70.3384,
                        862.7029,
                    new SpatialReference(7,
                            "nemo",
                            "vel",
                            "doloribus"),
                        true,
                        true),
                    ["voluptatem",
                        "eos",
                        "occaecati",
                        "asperiores"],
                    "esse",
                    new DateTime(2005, 11, 19, 17, 18, 14),
                    "group",
                    268.6874);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "dolorem",
                    "sit",
                    "et");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(492.0581,
                    TileInfoFormat.Jpg,
                    true,
                [new LOD(5,
                        "ut",
                        32.6263,
                        5846641.2712)],
                new Point(-164.0546,
                        44.7750,
                        25.2322,
                        77.1988,
                        19.0264,
                    new SpatialReference(8,
                            "et",
                            "nesciunt",
                            "vero"),
                        true,
                        true,
                        205.5918),
                    [8,
                        5],
                new SpatialReference(9,
                        "ab",
                        "rerum",
                        "delectus"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2000, 3, 1, 0, 6, 50),
                    new DateTime(2023, 7, 11, 19, 35, 19));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
