@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("omnis")"
                        BlendMode="@(BlendMode.Lighten)"
                        Effect="@(new Effect("non",
                            29545095.0726))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(5924337.6164)"
                        MinScale="@(29121.0384)"
                        Opacity="@(0.1270)"
                        PersistenceEnabled="@(true)"
                        Style="@("dolores")"
                        Title="@("et voluptas sunt")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2018, 6, 13, 19, 49, 36))"
                            End="@(new DateTime(2014, 8, 18, 10, 8, 54))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(560.8422)"
                            Format="@(TileInfoFormat.Ps)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "sint",
                                    61.9431,
                                    23835021.3398),
                            new LOD(7,
                                    "dolorem",
                                    81.5288,
                                    17528163.3622)])"
                            Origin="@(new Point(-3.3283,
                                    -37.1780,
                                    48.0013,
                                    57.8495,
                                    11.2048,
                                new SpatialReference(1,
                                        "suscipit",
                                        "sequi",
                                        "ex"),
                                    true,
                                    true,
                                    795.0543))"
                            Size="@([4,
                                9])">
                            <SpatialReference 
                                Wkid="@(6)"
                                ImageCoordinateSystem="@("tempore")"
                                Wkt="@("sunt")"
                                Wkt2="@("minus")">
                            </SpatialReference>
                        </TileInfo>
                        <SpatialReference 
                            Wkid="@(3)"
                            ImageCoordinateSystem="@("qui")"
                            Wkt="@("asperiores")"
                            Wkt2="@("voluptatem")">
                        </SpatialReference>
                        <PortalItem />
                        <Extent 
                            Xmax="@(96.7483)"
                            Xmin="@(38.5808)"
                            Ymax="@(-68.4638)"
                            Ymin="@(-35.7380)"
                            Zmax="@(712.3792)"
                            Zmin="@(447.7950)"
                            Mmax="@(306.9912)"
                            Mmin="@(746.3288)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("eaque")"
                                Wkt="@("eligendi")"
                                Wkt2="@("consectetur")">
                            </SpatialReference>
                        </Extent>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("qui");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("nam");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("ut");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("similique");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(7);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("unde");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("est");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("labore",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("in",
                "enim");
        await vectorTileLayer.SetPaintProperties("consequatur",
                "sint");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(new SpriteSourceUrlInfo(191.4211,
                SpriteFormat.Png,
                    "http://bernard.biz"));
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("et",
                6);
        await vectorTileLayer.SetStyleLayerVisibility("sed",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.SourceAtop;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-45.2458,
                    -45.3172,
                    19.9852,
                    32.2483,
                    641.4163,
                    255.1917,
                    418.4549,
                    388.2429,
                new SpatialReference(5,
                        "nisi",
                        "quos",
                        "modi"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(103.6265,
                    -98.8637,
                    51.2692,
                    53.2996,
                    943.9050,
                    277.4214,
                    574.9160,
                    236.1020,
                new SpatialReference(3,
                        "rerum",
                        "deleniti",
                        "ipsa"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "minus",
                    "aut",
                    "sunt");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(409.2755,
                    TileInfoFormat.Lerc,
                    true,
                [new LOD(6,
                        "omnis",
                        90.9490,
                        14455423.1291)],
                new Point(149.1715,
                        22.1298,
                        -62.3012,
                        -54.1536,
                        166.0709,
                    new SpatialReference(9,
                            "aliquam",
                            "reprehenderit",
                            "saepe"),
                        true,
                        true,
                        507.3248),
                    [6],
                new SpatialReference(2,
                        "id",
                        "ea",
                        "recusandae"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 3, 17, 18, 10, 39),
                    new DateTime(2014, 1, 11, 18, 57, 27));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
