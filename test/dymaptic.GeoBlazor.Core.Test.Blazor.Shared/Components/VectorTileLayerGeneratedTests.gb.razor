@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("ullam")"
                        BlendMode="@(BlendMode.Plus)"
                        Effect="@(new Effect("porro",
                            8197276.9802))"
                        FullExtent="@(new Extent(-52.3179,
                                31.3436,
                                -6.0082,
                                58.3347,
                                582.2094,
                                638.3535,
                                366.3065,
                                349.6018,
                            new SpatialReference(6,
                                    "voluptas",
                                    "aperiam",
                                    "est"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-75.8565,
                                86.8109,
                                42.0775,
                                80.8533,
                                215.4146,
                                743.3929,
                                394.9484,
                                87.2435,
                            new SpatialReference(1,
                                    "velit",
                                    "commodi",
                                    "in"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(32803350.3366)"
                        MinScale="@(41251.5786)"
                        Opacity="@(0.6570)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(4,
                                "ad",
                                "eius",
                                "numquam"))"
                        Style="@("quis")"
                        Title="@("eligendi numquam laborum")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2007, 1, 3, 15, 37, 48))"
                            End="@(new DateTime(2016, 7, 26, 17, 29, 27))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(974.6409)"
                            Format="@(TileInfoFormat.Png)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(3,
                                    "est",
                                    77.8182,
                                    12211537.8798),
                            new LOD(5,
                                    "doloremque",
                                    72.8984,
                                    4708197.8871)])"
                            Origin="@(new Point(144.1872,
                                    17.3509,
                                    17.8996,
                                    -72.1473,
                                    414.5658,
                                new SpatialReference(6,
                                        "voluptates",
                                        "sed",
                                        "consequatur"),
                                    true,
                                    true,
                                    829.5056))"
                            Size="@([8,
                                7,
                                5,
                                9])"
                            SpatialReference="@(new SpatialReference(3,
                                    "commodi",
                                    "et",
                                    "maiores"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("incidunt")"
                            ApiKey="@("quidem")"
                            AvgRating="@(506.3718)"
                            Categories="@(["autem",
                                "in"])"
                            Created="@(new DateTime(2017, 7, 13, 8, 27, 54))"
                            Culture="@("sapiente")"
                            Description="@("voluptas facilis vel nesciunt")"
                            Extent="@(new Extent(-31.5578,
                                    -86.7085,
                                    -68.8367,
                                    -20.9442,
                                    979.1695,
                                    230.3018,
                                    214.6658,
                                    185.2682,
                                new SpatialReference(5,
                                        "officia",
                                        "cumque",
                                        "vel"),
                                    true,
                                    true))"
                            GroupCategories="@(["fuga",
                                "magnam"])"
                            LicenseInfo="@("veritatis")"
                            Modified="@(new DateTime(2016, 4, 7, 7, 35, 25))"
                            Name="@("status")"
                            NumComments="@(545.9399)"
                            NumRatings="@(678.8281)"
                            NumViews="@(168.9647)"
                            Owner="@("Rose Bernier")"
                            OwnerFolder="@("Korey Heaney")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["non",
                                        "voluptate",
                                        "quia",
                                        "consequatur"],
                                    "qui",
                                    "reiciendis",
                                    "at",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("iure")"
                            Screenshots="@(["laudantium",
                                "facilis",
                                "voluptatem",
                                "voluptatum"])"
                            Size="@(3)"
                            Snippet="@("molestiae")"
                            Tags="@(["minus",
                                "eius",
                                "sed",
                                "tenetur"])"
                            Title="@("impedit quis mollitia")"
                            TypeKeywords="@(["quas",
                                "quia",
                                "laudantium"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_National_Parks_Annual_Visitation/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("ut");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("dolores");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("nobis");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("qui");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(1);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("illo");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("pariatur");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("nobis",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("illo",
                "non");
        await vectorTileLayer.SetPaintProperties("animi",
                "est");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("unde",
                1);
        await vectorTileLayer.SetStyleLayerVisibility("tempore",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-119.5916,
                    41.4604,
                    -78.2434,
                    39.3853,
                    483.9392,
                    607.7655,
                    115.4409,
                    942.9011,
                new SpatialReference(9,
                        "perferendis",
                        "eveniet",
                        "qui"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-3.3998,
                    -49.1272,
                    16.5817,
                    -73.4708,
                    21.6008,
                    146.8611,
                    295.3949,
                    426.8722,
                new SpatialReference(1,
                        "eaque",
                        "repudiandae",
                        "est"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "velit",
                    "perferendis",
                    569.4210,
                    ["perferendis",
                        "eum",
                        "dignissimos"],
                    new DateTime(2006, 9, 22, 6, 31, 13),
                    "minima",
                    "vero qui consequatur vel porro",
                new Extent(-179.1512,
                        57.1544,
                        46.4069,
                        51.7773,
                        434.6251,
                        52.0368,
                        489.3954,
                        239.5757,
                    new SpatialReference(3,
                            "quia",
                            "magnam",
                            "delectus"),
                        true,
                        true),
                    ["magni",
                        "explicabo",
                        "quia"],
                    "a",
                    new DateTime(2002, 4, 23, 9, 13, 42),
                    "avatar",
                    495.0567);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "ut",
                    "neque",
                    "aliquid");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(932.2498,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(4,
                        "optio",
                        3.6642,
                        17487502.4482),
                new LOD(8,
                        "tenetur",
                        18.5574,
                        20542614.8771),
                new LOD(3,
                        "sed",
                        80.6819,
                        28686366.8323)],
                new Point(71.3295,
                        -23.7154,
                        136.8937,
                        86.6802,
                        329.5637,
                    new SpatialReference(9,
                            "doloribus",
                            "aut",
                            "consequuntur"),
                        true,
                        true,
                        768.0521),
                    [5,
                        9,
                        4],
                new SpatialReference(8,
                        "modi",
                        "ut",
                        "alias"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 3, 8, 21, 30, 3),
                    new DateTime(2002, 10, 20, 22, 54, 17));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
