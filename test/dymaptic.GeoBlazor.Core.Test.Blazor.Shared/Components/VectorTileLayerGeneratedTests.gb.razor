@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("ducimus")"
                        BlendMode="@(BlendMode.Invert)"
                        Effect="@(new Effect("id",
                            30654062.6246))"
                        FullExtent="@(new Extent(34.2368,
                                -160.9894,
                                -42.4567,
                                5.3055,
                                588.1174,
                                411.7739,
                                817.9052,
                                591.8570,
                            new SpatialReference(6,
                                    "quam",
                                    "totam",
                                    "quasi"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-100.4140,
                                -120.1044,
                                44.6707,
                                -59.0355,
                                17.1131,
                                899.9968,
                                926.6845,
                                998.5994,
                            new SpatialReference(2,
                                    "et",
                                    "quis",
                                    "sint"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(44538983.6045)"
                        MinScale="@(16024.8978)"
                        Opacity="@(0.9412)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(1,
                                "culpa",
                                "veritatis",
                                "quam"))"
                        Style="@("inventore")"
                        Title="@("dolorem eum quos")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2014, 7, 5, 0, 3, 4))"
                            End="@(new DateTime(2019, 1, 21, 17, 56, 45))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(701.5628)"
                            Format="@(TileInfoFormat.Dib)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "in",
                                    96.4464,
                                    28206580.5621),
                            new LOD(4,
                                    "quos",
                                    17.1954,
                                    40730384.6573)])"
                            Origin="@(new Point(-52.6072,
                                    69.6498,
                                    173.4207,
                                    -47.2871,
                                    900.5819,
                                new SpatialReference(9,
                                        "nihil",
                                        "magni",
                                        "voluptatem"),
                                    true,
                                    true,
                                    61.6339))"
                            Size="@([5,
                                9,
                                6])"
                            SpatialReference="@(new SpatialReference(1,
                                    "incidunt",
                                    "qui",
                                    "a"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("recusandae")"
                            ApiKey="@("et")"
                            AvgRating="@(189.4059)"
                            Categories="@(["voluptatem",
                                "et",
                                "amet"])"
                            Created="@(new DateTime(2020, 3, 25, 15, 40, 54))"
                            Culture="@("enim")"
                            Description="@("eveniet at voluptatem aut")"
                            Extent="@(new Extent(164.4007,
                                    79.7432,
                                    82.4077,
                                    3.8856,
                                    916.2423,
                                    41.0537,
                                    292.9057,
                                    640.4031,
                                new SpatialReference(7,
                                        "quod",
                                        "reiciendis",
                                        "dolorem"),
                                    true,
                                    true))"
                            GroupCategories="@(["placeat",
                                "et",
                                "qui",
                                "est"])"
                            LicenseInfo="@("voluptas")"
                            Modified="@(new DateTime(2002, 3, 10, 21, 18, 41))"
                            Name="@("avatar")"
                            NumComments="@(696.6036)"
                            NumRatings="@(498.0450)"
                            NumViews="@(677.0782)"
                            Owner="@("Katlynn Rowe")"
                            OwnerFolder="@("Kole Green")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["sed",
                                        "dolore",
                                        "ut",
                                        "corporis"],
                                    "sed",
                                    "quia",
                                    "eveniet",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("fugiat")"
                            Screenshots="@(["praesentium",
                                "quidem",
                                "laborum",
                                "doloremque"])"
                            Size="@(4)"
                            Snippet="@("voluptatem")"
                            Tags="@(["minima",
                                "quae"])"
                            Title="@("et architecto molestiae")"
                            TypeKeywords="@(["eos",
                                "est",
                                "odit"])"
                            Url="@("https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("iure");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("dolor");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("voluptatem");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("sed");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(5);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("eveniet");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("adipisci");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("perspiciatis",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("laboriosam",
                "molestias");
        await vectorTileLayer.SetPaintProperties("vel",
                "temporibus");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("quis",
                4);
        await vectorTileLayer.SetStyleLayerVisibility("distinctio",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.Color;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-53.0584,
                    15.9283,
                    -15.3019,
                    85.0700,
                    492.4094,
                    746.2359,
                    555.5367,
                    611.1713,
                new SpatialReference(3,
                        "nihil",
                        "eveniet",
                        "odio"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-109.4224,
                    -46.2446,
                    67.8736,
                    -55.0407,
                    234.9760,
                    53.1898,
                    329.3930,
                    606.2083,
                new SpatialReference(6,
                        "maiores",
                        "explicabo",
                        "repellat"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "voluptates",
                    "sit",
                    53.4939,
                    ["ut",
                        "ab"],
                    new DateTime(2004, 4, 10, 4, 32, 5),
                    "et",
                    "quia distinctio quo est itaque",
                new Extent(148.5716,
                        -72.2914,
                        -74.5291,
                        -14.8065,
                        555.7820,
                        846.0247,
                        38.3015,
                        765.9413,
                    new SpatialReference(7,
                            "maxime",
                            "soluta",
                            "est"),
                        true,
                        true),
                    ["est",
                        "numquam",
                        "commodi"],
                    "fuga",
                    new DateTime(2001, 7, 10, 20, 55, 36),
                    "category",
                    637.1670);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "labore",
                    "aut",
                    "et");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(9.3093,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(5,
                        "sit",
                        69.1078,
                        6041446.0769)],
                new Point(42.8051,
                        52.2289,
                        154.2630,
                        0.5860,
                        47.6690,
                    new SpatialReference(3,
                            "earum",
                            "doloremque",
                            "id"),
                        true,
                        true,
                        296.0421),
                    [3,
                        1,
                        1,
                        9],
                new SpatialReference(3,
                        "ullam",
                        "doloremque",
                        "blanditiis"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 10, 6, 7, 24, 51),
                    new DateTime(2006, 4, 6, 1, 31, 45));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
