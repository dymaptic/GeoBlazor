@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("eum")"
                        BlendMode="@(BlendMode.Overlay)"
                        Effect="@(new Effect("optio",
                            11889139.7197))"
                        FullExtent="@(new Extent(97.4105,
                                -171.7221,
                                61.4514,
                                60.0679,
                                917.0325,
                                208.5163,
                                83.6394,
                                930.9957,
                            new SpatialReference(1,
                                    "voluptatem",
                                    "reiciendis",
                                    "ipsum"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-154.4369,
                                12.0666,
                                21.3203,
                                -9.5119,
                                850.9290,
                                679.1119,
                                997.2146,
                                908.0790,
                            new SpatialReference(6,
                                    "inventore",
                                    "sapiente",
                                    "repellat"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(48110687.7329)"
                        MinScale="@(9075.5871)"
                        Opacity="@(0.8253)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(2,
                                "rerum",
                                "veritatis",
                                "et"))"
                        Style="@("illo")"
                        Title="@("placeat laborum odit")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2005, 10, 5, 3, 23, 41))"
                            End="@(new DateTime(2008, 6, 26, 7, 43, 36))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(247.8658)"
                            Format="@(TileInfoFormat.Jpg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "voluptates",
                                    34.4250,
                                    37572573.9081)])"
                            Origin="@(new Point(120.8483,
                                    68.3186,
                                    9.4218,
                                    20.0088,
                                    621.4017,
                                new SpatialReference(9,
                                        "inventore",
                                        "in",
                                        "voluptatem"),
                                    true,
                                    true,
                                    129.3464))"
                            Size="@([1,
                                2,
                                7,
                                7])"
                            SpatialReference="@(new SpatialReference(6,
                                    "ut",
                                    "maxime",
                                    "quae"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("consequatur")"
                            ApiKey="@("sint")"
                            AvgRating="@(642.5663)"
                            Categories="@(["sed",
                                "accusamus",
                                "natus"])"
                            Created="@(new DateTime(2009, 10, 15, 4, 24, 33))"
                            Culture="@("ipsa")"
                            Description="@("commodi quis culpa ut in sed vel")"
                            Extent="@(new Extent(116.9849,
                                    167.4203,
                                    -73.0464,
                                    -56.0313,
                                    171.2562,
                                    148.8860,
                                    778.6882,
                                    664.8570,
                                new SpatialReference(8,
                                        "optio",
                                        "voluptatem",
                                        "culpa"),
                                    true,
                                    true))"
                            GroupCategories="@(["quo",
                                "qui"])"
                            LicenseInfo="@("ducimus")"
                            Modified="@(new DateTime(2019, 11, 20, 14, 42, 25))"
                            Name="@("avatar")"
                            NumComments="@(236.6798)"
                            NumRatings="@(482.0458)"
                            NumViews="@(729.1818)"
                            Owner="@("Mertie Carroll")"
                            OwnerFolder="@("Shad Haley")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["qui",
                                        "sequi"],
                                    "voluptatem",
                                    "molestiae",
                                    "incidunt",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("similique")"
                            Screenshots="@(["nesciunt",
                                "tempora",
                                "tempora",
                                "quia"])"
                            Size="@(6)"
                            Snippet="@("eligendi")"
                            Tags="@(["et",
                                "est",
                                "culpa",
                                "repellat"])"
                            Title="@("vitae sed rerum")"
                            TypeKeywords="@(["esse",
                                "et"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("doloremque");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("ea");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("ducimus");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("ea");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(6);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("laborum");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("autem");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("fuga",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("in",
                "molestiae");
        await vectorTileLayer.SetPaintProperties("id",
                "ea");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("doloremque",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("sint",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.Average;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-63.6052,
                    155.0650,
                    -1.1097,
                    -31.9733,
                    899.3858,
                    645.4340,
                    406.6751,
                    675.1168,
                new SpatialReference(1,
                        "et",
                        "fuga",
                        "aliquam"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-107.5973,
                    155.1759,
                    61.4608,
                    -55.3750,
                    588.8695,
                    316.5759,
                    557.8748,
                    245.9756,
                new SpatialReference(8,
                        "unde",
                        "quod",
                        "ut"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "modi",
                    "ut",
                    4.7717,
                    ["est",
                        "hic",
                        "necessitatibus"],
                    new DateTime(2021, 9, 14, 0, 15, 21),
                    "vel",
                    "tempora est dicta tempora culpa dignissimos",
                new Extent(-58.0706,
                        151.0959,
                        57.0115,
                        -62.7104,
                        539.8273,
                        829.0307,
                        729.5987,
                        275.0361,
                    new SpatialReference(4,
                            "explicabo",
                            "et",
                            "laudantium"),
                        true,
                        true),
                    ["deserunt",
                        "est"],
                    "deleniti",
                    new DateTime(2001, 4, 7, 22, 37, 40),
                    "name",
                    296.0281);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(4,
                    "enim",
                    "aperiam",
                    "nulla");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(56.7858,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(6,
                        "sint",
                        27.6426,
                        23999251.8552),
                new LOD(8,
                        "dolores",
                        99.4894,
                        32204262.3651),
                new LOD(8,
                        "non",
                        35.2031,
                        29732795.2276)],
                new Point(46.3598,
                        -48.2548,
                        18.8094,
                        33.7372,
                        105.4325,
                    new SpatialReference(9,
                            "ipsam",
                            "quas",
                            "doloribus"),
                        true,
                        true,
                        924.0544),
                    [6,
                        2],
                new SpatialReference(9,
                        "nesciunt",
                        "minima",
                        "corporis"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 2, 21, 4, 44, 10),
                    new DateTime(2007, 10, 2, 6, 43, 12));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
