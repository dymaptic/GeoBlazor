@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("repellat")"
                        BlendMode="@(BlendMode.SourceOut)"
                        Effect="@(new Effect("in",
                            13780160.2974))"
                        FullExtent="@(new Extent(10.6509,
                                72.4783,
                                -62.3347,
                                60.7085,
                                630.5190,
                                860.6560,
                                147.4152,
                                499.7651,
                            new SpatialReference(8,
                                    "quis",
                                    "laborum",
                                    "tempora"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-45.5898,
                                -150.5389,
                                34.2888,
                                62.3877,
                                718.7804,
                                198.4366,
                                154.3256,
                                270.2733,
                            new SpatialReference(9,
                                    "omnis",
                                    "animi",
                                    "qui"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(17369536.1751)"
                        MinScale="@(43568.1539)"
                        Opacity="@(0.6043)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(9,
                                "iusto",
                                "qui",
                                "illum"))"
                        Style="@("eligendi")"
                        Title="@("qui deleniti ad")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2009, 10, 19, 14, 46, 32))"
                            End="@(new DateTime(2001, 1, 27, 6, 12, 14))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(922.0598)"
                            Format="@(TileInfoFormat.Gif)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(5,
                                    "quisquam",
                                    57.5924,
                                    13369122.3686),
                            new LOD(3,
                                    "voluptas",
                                    17.9815,
                                    48471921.6982),
                            new LOD(6,
                                    "fuga",
                                    97.6909,
                                    12153450.8675)])"
                            Origin="@(new Point(116.6441,
                                    21.2286,
                                    -106.3429,
                                    59.1271,
                                    422.6431,
                                new SpatialReference(6,
                                        "dolore",
                                        "ea",
                                        "beatae"),
                                    true,
                                    true,
                                    204.9527))"
                            Size="@([3,
                                3,
                                4])"
                            SpatialReference="@(new SpatialReference(1,
                                    "consequuntur",
                                    "consequatur",
                                    "totam"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("nesciunt")"
                            ApiKey="@("fugit")"
                            AvgRating="@(629.7029)"
                            Categories="@(["dolores",
                                "rerum",
                                "ad"])"
                            Created="@(new DateTime(2016, 5, 12, 21, 2, 11))"
                            Culture="@("omnis")"
                            Description="@("et culpa odio qui")"
                            Extent="@(new Extent(-53.8423,
                                    53.4013,
                                    -16.0932,
                                    -64.7189,
                                    401.7288,
                                    649.3574,
                                    150.1831,
                                    225.2892,
                                new SpatialReference(1,
                                        "ex",
                                        "omnis",
                                        "quo"),
                                    true,
                                    true))"
                            GroupCategories="@(["consectetur",
                                "suscipit"])"
                            LicenseInfo="@("dolore")"
                            Modified="@(new DateTime(2011, 4, 22, 18, 32, 38))"
                            Name="@("email")"
                            NumComments="@(87.4673)"
                            NumRatings="@(648.6799)"
                            NumViews="@(551.9352)"
                            Owner="@("Missouri Bernier")"
                            OwnerFolder="@("Kristy Flatley")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["et",
                                        "et"],
                                    "at",
                                    "provident",
                                    "rerum",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("enim")"
                            Screenshots="@(["et",
                                "quaerat"])"
                            Size="@(7)"
                            Snippet="@("vero")"
                            Tags="@(["occaecati",
                                "earum"])"
                            Title="@("optio autem et")"
                            TypeKeywords="@(["itaque",
                                "nobis"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("odio");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("aut");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("eveniet");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("ut");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(3);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("fuga");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("ducimus");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("quidem",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("libero",
                "voluptas");
        await vectorTileLayer.SetPaintProperties("voluptatum",
                "ullam");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("sint",
                3);
        await vectorTileLayer.SetStyleLayerVisibility("voluptatem",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.Hue;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(84.7243,
                    -107.5254,
                    30.8592,
                    74.8979,
                    236.5989,
                    752.0582,
                    796.0002,
                    528.5321,
                new SpatialReference(6,
                        "excepturi",
                        "cupiditate",
                        "atque"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(138.2034,
                    -64.1382,
                    -55.3103,
                    19.7482,
                    121.8934,
                    303.1617,
                    655.8773,
                    555.0421,
                new SpatialReference(1,
                        "quidem",
                        "delectus",
                        "eveniet"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "non",
                    "inventore",
                    729.3813,
                    ["quaerat",
                        "corrupti",
                        "quisquam"],
                    new DateTime(2000, 9, 25, 20, 52, 34),
                    "ipsa",
                    "omnis deleniti nisi voluptatem ipsam aut",
                new Extent(-77.4181,
                        69.9382,
                        9.0548,
                        13.0566,
                        463.6708,
                        809.0796,
                        392.5249,
                        695.3594,
                    new SpatialReference(8,
                            "fugit",
                            "voluptates",
                            "maiores"),
                        true,
                        true),
                    ["sint",
                        "occaecati"],
                    "temporibus",
                    new DateTime(2006, 1, 16, 11, 20, 4),
                    "createdAt",
                    791.4154);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "facilis",
                    "sint",
                    "porro");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(684.3014,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(8,
                        "et",
                        32.0274,
                        394780.2099)],
                new Point(-2.6055,
                        62.0479,
                        109.2006,
                        30.6069,
                        678.3113,
                    new SpatialReference(4,
                            "fuga",
                            "animi",
                            "omnis"),
                        true,
                        true,
                        52.5396),
                    [1,
                        3,
                        6,
                        8],
                new SpatialReference(5,
                        "reiciendis",
                        "laborum",
                        "ut"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2021, 1, 2, 12, 9, 31),
                    new DateTime(2005, 5, 15, 16, 43, 37));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
