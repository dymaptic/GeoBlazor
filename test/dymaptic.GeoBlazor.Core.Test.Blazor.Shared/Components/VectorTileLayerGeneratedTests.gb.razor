@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("omnis")"
                        BlendMode="@(BlendMode.Plus)"
                        Effect="@(new Effect("dolor",
                            28619536.8288))"
                        FullExtent="@(new Extent(-17.9827,
                                -36.5282,
                                60.4493,
                                -48.0722,
                                784.1657,
                                220.4439,
                                179.0354,
                                708.5623,
                            new SpatialReference(5,
                                    "voluptas",
                                    "rem",
                                    "aliquid"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(169.4401,
                                173.9831,
                                -38.3403,
                                11.1977,
                                439.0789,
                                959.5323,
                                968.0503,
                                575.2201,
                            new SpatialReference(6,
                                    "et",
                                    "vero",
                                    "quia"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(13458549.7675)"
                        MinScale="@(8121.6290)"
                        Opacity="@(0.3332)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(3,
                                "quia",
                                "nesciunt",
                                "et"))"
                        Style="@("quis")"
                        Title="@("vero eius quas")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2000, 4, 6, 18, 55, 9))"
                            End="@(new DateTime(2009, 2, 17, 14, 58, 46))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(795.1607)"
                            Format="@(TileInfoFormat.Png32)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(1,
                                    "mollitia",
                                    95.6654,
                                    20531745.8560)])"
                            Origin="@(new Point(-48.1807,
                                    19.6832,
                                    -37.2680,
                                    78.8444,
                                    628.7203,
                                new SpatialReference(7,
                                        "dicta",
                                        "iusto",
                                        "suscipit"),
                                    true,
                                    true,
                                    999.5949))"
                            Size="@([5,
                                5,
                                9,
                                6])"
                            SpatialReference="@(new SpatialReference(2,
                                    "ut",
                                    "illum",
                                    "laudantium"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("voluptate")"
                            ApiKey="@("voluptatum")"
                            AvgRating="@(411.4962)"
                            Categories="@(["placeat",
                                "voluptas"])"
                            Created="@(new DateTime(2003, 5, 16, 0, 23, 10))"
                            Culture="@("aperiam")"
                            Description="@("dolores quia iure ut nulla omnis")"
                            Extent="@(new Extent(-118.0241,
                                    138.0796,
                                    17.8940,
                                    57.1506,
                                    242.3551,
                                    292.6597,
                                    187.2809,
                                    79.1962,
                                new SpatialReference(8,
                                        "iste",
                                        "qui",
                                        "perspiciatis"),
                                    true,
                                    true))"
                            GroupCategories="@(["voluptatibus",
                                "ut"])"
                            LicenseInfo="@("nam")"
                            Modified="@(new DateTime(2018, 2, 10, 11, 56, 8))"
                            Name="@("group")"
                            NumComments="@(552.8688)"
                            NumRatings="@(586.1722)"
                            NumViews="@(7.2030)"
                            Owner="@("Keshawn Considine")"
                            OwnerFolder="@("Geo Schiller")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.Anonymous,
                                    ["odit",
                                        "maxime",
                                        "corrupti",
                                        "ab"],
                                    "minima",
                                    "impedit",
                                    "ipsa",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("aut")"
                            Screenshots="@(["soluta",
                                "sed",
                                "est"])"
                            Size="@(3)"
                            Snippet="@("in")"
                            Tags="@(["consequuntur",
                                "et"])"
                            Title="@("maiores suscipit accusamus")"
                            TypeKeywords="@(["quae",
                                "nulla",
                                "sed"])"
                            Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("aut");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("veritatis");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("sunt");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("sapiente");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(1);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("magni");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("sunt");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("voluptate",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("molestias",
                "qui");
        await vectorTileLayer.SetPaintProperties("similique",
                "a");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("molestiae",
                1);
        await vectorTileLayer.SetStyleLayerVisibility("autem",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.ColorDodge;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(120.0483,
                    62.9044,
                    -1.3962,
                    -21.7082,
                    379.9730,
                    4.6952,
                    697.5242,
                    325.2428,
                new SpatialReference(6,
                        "explicabo",
                        "reiciendis",
                        "accusantium"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(-9.7145,
                    80.5156,
                    41.5117,
                    -26.7522,
                    732.9795,
                    175.0763,
                    698.5236,
                    236.7946,
                new SpatialReference(2,
                        "et",
                        "quam",
                        "neque"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Hide;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "magni",
                    "aut",
                    587.0033,
                    ["rerum",
                        "recusandae"],
                    new DateTime(2002, 8, 15, 19, 19, 36),
                    "dicta",
                    "ea recusandae inventore aut in",
                new Extent(-6.9951,
                        -65.8349,
                        4.6441,
                        17.7630,
                        158.4463,
                        781.1401,
                        837.8516,
                        17.0699,
                    new SpatialReference(4,
                            "dolor",
                            "doloremque",
                            "perferendis"),
                        true,
                        true),
                    ["id",
                        "aperiam"],
                    "perspiciatis",
                    new DateTime(2004, 11, 26, 11, 25, 0),
                    "comment",
                    679.9971);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(7,
                    "odit",
                    "esse",
                    "dolorum");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(479.5760,
                    TileInfoFormat.Mixed,
                    true,
                [new LOD(6,
                        "accusantium",
                        4.3731,
                        24354652.2839),
                new LOD(7,
                        "laudantium",
                        19.7861,
                        1998687.6762),
                new LOD(3,
                        "facere",
                        12.9979,
                        36344064.7162),
                new LOD(1,
                        "quis",
                        68.6869,
                        24151032.5344)],
                new Point(-69.5613,
                        8.3989,
                        98.0383,
                        -14.7586,
                        887.8186,
                    new SpatialReference(4,
                            "eligendi",
                            "quos",
                            "alias"),
                        true,
                        true,
                        810.2532),
                    [3,
                        2,
                        2],
                new SpatialReference(3,
                        "nam",
                        "deleniti",
                        "quas"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 11, 8, 8, 24, 25),
                    new DateTime(2012, 2, 16, 22, 12, 6));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
