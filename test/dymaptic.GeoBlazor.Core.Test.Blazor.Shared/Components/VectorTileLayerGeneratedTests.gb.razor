@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("quidem")"
                        BlendMode="@(BlendMode.Plus)"
                        Effect="@(new Effect("natus",
                            30888766.7260))"
                        FullExtent="@(new Extent(65.3968,
                                -118.5823,
                                -57.9148,
                                46.6550,
                                891.5818,
                                496.1327,
                                886.5540,
                                496.8243,
                            new SpatialReference(6,
                                    "quia",
                                    "aliquid",
                                    "modi"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(38.8735,
                                -31.8620,
                                24.5182,
                                42.1427,
                                703.6877,
                                303.4517,
                                863.7643,
                                913.5266,
                            new SpatialReference(8,
                                    "aut",
                                    "excepturi",
                                    "unde"),
                                true,
                                true))"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(13327529.4895)"
                        MinScale="@(25534.4815)"
                        Opacity="@(0.7858)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(4,
                                "adipisci",
                                "sint",
                                "voluptates"))"
                        Style="@("doloribus")"
                        Title="@("aut officia vel")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2010, 1, 15, 4, 47, 47))"
                            End="@(new DateTime(2017, 5, 12, 19, 22, 32))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(341.9974)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(4,
                                    "aperiam",
                                    91.6560,
                                    20686466.3709),
                            new LOD(1,
                                    "porro",
                                    49.1808,
                                    24957505.5944),
                            new LOD(3,
                                    "ut",
                                    15.5327,
                                    14213519.8650),
                            new LOD(8,
                                    "maiores",
                                    56.3792,
                                    47660602.7273)])"
                            Origin="@(new Point(-55.4058,
                                    52.9796,
                                    3.6419,
                                    -45.9034,
                                    313.0583,
                                new SpatialReference(1,
                                        "aut",
                                        "magni",
                                        "est"),
                                    true,
                                    true,
                                    673.7146))"
                            Size="@([8,
                                7,
                                1,
                                7])"
                            SpatialReference="@(new SpatialReference(7,
                                    "molestiae",
                                    "explicabo",
                                    "deserunt"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("possimus")"
                            ApiKey="@("sequi")"
                            AvgRating="@(235.4473)"
                            Categories="@(["cum",
                                "vel"])"
                            Created="@(new DateTime(2004, 10, 20, 19, 27, 31))"
                            Culture="@("sed")"
                            Description="@("ullam voluptate minus excepturi et nihil ratione")"
                            Extent="@(new Extent(76.1982,
                                    -27.5779,
                                    -42.5141,
                                    38.8117,
                                    130.4197,
                                    814.5761,
                                    913.3126,
                                    385.4400,
                                new SpatialReference(7,
                                        "temporibus",
                                        "dolores",
                                        "nobis"),
                                    true,
                                    true))"
                            GroupCategories="@(["maiores",
                                "cumque",
                                "nostrum"])"
                            LicenseInfo="@("autem")"
                            Modified="@(new DateTime(2021, 5, 3, 14, 58, 56))"
                            Name="@("status")"
                            NumComments="@(937.6512)"
                            NumRatings="@(19.9331)"
                            NumViews="@(730.3788)"
                            Owner="@("Marielle Turner")"
                            OwnerFolder="@("Mireille Wolf")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["sed",
                                        "omnis",
                                        "repellendus",
                                        "fugit"],
                                    "qui",
                                    "veritatis",
                                    "iste",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("repudiandae")"
                            Screenshots="@(["aut",
                                "voluptatem"])"
                            Size="@(6)"
                            Snippet="@("enim")"
                            Tags="@(["voluptas",
                                "expedita",
                                "autem"])"
                            Title="@("consequatur eaque dolorem")"
                            TypeKeywords="@(["unde",
                                "reprehenderit"])"
                            Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("asperiores");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("inventore");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("maiores");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("aut");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(6);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("quae");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("repellendus");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("a",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("distinctio",
                "incidunt");
        await vectorTileLayer.SetPaintProperties("est",
                "eos");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("dolor",
                8);
        await vectorTileLayer.SetStyleLayerVisibility("vero",
            Visibility.None);
        BlendMode testBlendMode = BlendMode.Normal;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(-86.4794,
                    25.3121,
                    48.0486,
                    -83.2305,
                    278.0912,
                    116.2619,
                    986.0822,
                    739.9043,
                new SpatialReference(5,
                        "culpa",
                        "voluptas",
                        "illo"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(61.1295,
                    -172.0226,
                    -57.6182,
                    17.2769,
                    465.2922,
                    481.3065,
                    566.2724,
                    188.4008,
                new SpatialReference(6,
                        "nam",
                        "eum",
                        "nihil"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "explicabo",
                    "tenetur",
                    666.6680,
                    ["voluptas",
                        "sunt",
                        "impedit"],
                    new DateTime(2004, 1, 9, 18, 44, 16),
                    "laudantium",
                    "accusamus placeat culpa facilis",
                new Extent(-89.9292,
                        -161.4111,
                        -73.0186,
                        28.5457,
                        24.1400,
                        330.0048,
                        655.9341,
                        378.6149,
                    new SpatialReference(6,
                            "doloribus",
                            "incidunt",
                            "aut"),
                        true,
                        true),
                    ["est",
                        "ducimus",
                        "tenetur",
                        "possimus"],
                    "ut",
                    new DateTime(2023, 3, 16, 11, 10, 33),
                    "name",
                    36.5905);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "assumenda",
                    "cum",
                    "atque");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(718.5997,
                    TileInfoFormat.Png32,
                    true,
                [new LOD(9,
                        "aperiam",
                        56.9386,
                        10440738.6743)],
                new Point(-134.1912,
                        26.1659,
                        101.2230,
                        -31.5687,
                        87.3814,
                    new SpatialReference(7,
                            "natus",
                            "est",
                            "ab"),
                        true,
                        true,
                        388.3340),
                    [4,
                        1,
                        7,
                        1],
                new SpatialReference(3,
                        "commodi",
                        "explicabo",
                        "adipisci"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 4, 8, 8, 18, 47),
                    new DateTime(2009, 9, 17, 20, 51, 50));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
