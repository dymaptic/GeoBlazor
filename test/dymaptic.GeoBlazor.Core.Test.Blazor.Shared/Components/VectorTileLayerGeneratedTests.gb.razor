@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderVectorTileLayer(Action renderHandler)
    {
        VectorTileLayer? vectorTileLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <VectorTileLayer 
                        ApiKey="@("hic")"
                        BlendMode="@(BlendMode.Lighter)"
                        Effect="@(new Effect("aut",
                            30421035.5380))"
                        FullExtent="@(new Extent(155.1658,
                                -72.7747,
                                32.8937,
                                59.2865,
                                155.1236,
                                742.9463,
                                407.7667,
                                567.0621,
                            new SpatialReference(9,
                                    "adipisci",
                                    "explicabo",
                                    "quasi"),
                                true,
                                true))"
                        InitialExtent="@(new Extent(-14.3689,
                                115.6396,
                                -42.5143,
                                -52.7962,
                                223.3371,
                                678.5504,
                                890.2402,
                                709.1396,
                            new SpatialReference(4,
                                    "quo",
                                    "distinctio",
                                    "incidunt"),
                                true,
                                true))"
                        ListMode="@(ListMode.Hide)"
                        MaxScale="@(44892713.2217)"
                        MinScale="@(43025.2743)"
                        Opacity="@(0.4704)"
                        PersistenceEnabled="@(true)"
                        SpatialReference="@(new SpatialReference(8,
                                "architecto",
                                "nihil",
                                "ut"))"
                        Style="@("est")"
                        Title="@("cupiditate et ut")"
                        Url="@("https://vectortileservices3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Santa_Monica_Mountains_Parcels_VTL/VectorTileServer/")">
                        <TimeExtent 
                            Start="@(new DateTime(2023, 4, 10, 2, 31, 41))"
                            End="@(new DateTime(2009, 5, 1, 18, 11, 3))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(945.4362)"
                            Format="@(TileInfoFormat.Svgz)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(8,
                                    "labore",
                                    10.5378,
                                    39621831.5346),
                            new LOD(6,
                                    "magnam",
                                    22.8319,
                                    2438612.1681),
                            new LOD(6,
                                    "error",
                                    22.3202,
                                    40892646.4194),
                            new LOD(4,
                                    "incidunt",
                                    76.1290,
                                    21660254.8500)])"
                            Origin="@(new Point(-167.3932,
                                    -89.5223,
                                    53.6798,
                                    12.7332,
                                    340.1838,
                                new SpatialReference(6,
                                        "incidunt",
                                        "eos",
                                        "iste"),
                                    true,
                                    true,
                                    200.7166))"
                            Size="@([6,
                                1])"
                            SpatialReference="@(new SpatialReference(7,
                                    "omnis",
                                    "vitae",
                                    "qui"))">
                        </TileInfo>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("qui")"
                            ApiKey="@("omnis")"
                            AvgRating="@(539.8995)"
                            Categories="@(["deserunt",
                                "omnis",
                                "et"])"
                            Created="@(new DateTime(2023, 8, 3, 14, 3, 23))"
                            Culture="@("eos")"
                            Description="@("consequuntur doloremque aut fuga voluptas dignissimos aspernatur")"
                            Extent="@(new Extent(100.7374,
                                    -62.8568,
                                    -19.9932,
                                    46.0613,
                                    430.7537,
                                    225.8744,
                                    527.7985,
                                    74.4009,
                                new SpatialReference(2,
                                        "et",
                                        "id",
                                        "ut"),
                                    true,
                                    true))"
                            GroupCategories="@(["itaque",
                                "minima",
                                "itaque",
                                "corrupti"])"
                            LicenseInfo="@("esse")"
                            Modified="@(new DateTime(2003, 4, 15, 8, 21, 32))"
                            Name="@("avatar")"
                            NumComments="@(944.8609)"
                            NumRatings="@(853.4355)"
                            NumViews="@(30.7082)"
                            Owner="@("Vickie Corwin")"
                            OwnerFolder="@("Imelda Emard")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Auto,
                                    ["nulla",
                                        "ut",
                                        "dolor",
                                        "perspiciatis"],
                                    "optio",
                                    "facilis",
                                    "natus",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("pariatur")"
                            Screenshots="@(["placeat",
                                "alias"])"
                            Size="@(1)"
                            Snippet="@("nam")"
                            Tags="@(["ut",
                                "odio",
                                "non",
                                "nostrum"])"
                            Title="@("maxime voluptate consequatur")"
                            TypeKeywords="@(["sunt",
                                "facere",
                                "sunt"])"
                            Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                        </PortalItem>
                    </VectorTileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(vectorTileLayer!);
        await AssertJavaScript("assertLayerExists", args: "vector-tile");
        await vectorTileLayer.DeleteStyleLayer("quaerat");
        var getLayoutPropertiesMethodResult = await vectorTileLayer.GetLayoutProperties("soluta");
        Assert.IsNotNull(getLayoutPropertiesMethodResult);
        var getPaintPropertiesMethodResult = await vectorTileLayer.GetPaintProperties("ad");
        Assert.IsNotNull(getPaintPropertiesMethodResult);
        var getStyleLayerMethodResult = await vectorTileLayer.GetStyleLayer("esse");
        Assert.IsNotNull(getStyleLayerMethodResult);
        var getStyleLayerIdMethodResult = await vectorTileLayer.GetStyleLayerId(7);
        Assert.IsNotNull(getStyleLayerIdMethodResult);
        var getStyleLayerIndexMethodResult = await vectorTileLayer.GetStyleLayerIndex("omnis");
        Assert.IsNotNull(getStyleLayerIndexMethodResult);
        var getStyleLayerVisibilityMethodResult = await vectorTileLayer.GetStyleLayerVisibility("occaecati");
        Assert.IsNotNull(getStyleLayerVisibilityMethodResult);
        var loadStyleMethodResult = await vectorTileLayer.LoadStyle("eligendi",
                default);
        Assert.IsNotNull(loadStyleMethodResult);
        await vectorTileLayer.SetLayoutProperties("aut",
                "vel");
        await vectorTileLayer.SetPaintProperties("unde",
                "qui");
        var setSpriteSourceMethodResult = await vectorTileLayer.SetSpriteSource(default);
        Assert.IsNotNull(setSpriteSourceMethodResult);
        await vectorTileLayer.SetStyleLayer("dolor",
                9);
        await vectorTileLayer.SetStyleLayerVisibility("sit",
            Visibility.Visible);
        BlendMode testBlendMode = BlendMode.DestinationOver;
        await vectorTileLayer.SetBlendMode(testBlendMode);
        var blendMode = await vectorTileLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        Extent testFullExtent = new Extent(157.7633,
                    -24.4682,
                    -80.3030,
                    15.3693,
                    915.6586,
                    719.3866,
                    442.0724,
                    753.7872,
                new SpatialReference(3,
                        "in",
                        "asperiores",
                        "provident"),
                    true,
                    true);
        await vectorTileLayer.SetFullExtent(testFullExtent);
        var fullExtent = await vectorTileLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Extent testInitialExtent = new Extent(127.9659,
                    -57.8424,
                    58.0809,
                    25.8483,
                    875.3144,
                    791.6334,
                    360.6387,
                    373.2557,
                new SpatialReference(5,
                        "possimus",
                        "qui",
                        "enim"),
                    true,
                    true);
        await vectorTileLayer.SetInitialExtent(testInitialExtent);
        var initialExtent = await vectorTileLayer.GetInitialExtent();
        Assert.AreEqual(testInitialExtent, initialExtent);
        ListMode testListMode = ListMode.Show;
        await vectorTileLayer.SetListMode(testListMode);
        var listMode = await vectorTileLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "facilis",
                    "perferendis",
                    161.4790,
                    ["suscipit",
                        "similique"],
                    new DateTime(2004, 5, 12, 1, 32, 50),
                    "ipsa",
                    "mollitia unde voluptates in quae qui est",
                new Extent(78.5271,
                        -155.7527,
                        -11.5728,
                        -30.9252,
                        629.7121,
                        636.9407,
                        104.7052,
                        820.5710,
                    new SpatialReference(9,
                            "et",
                            "maiores",
                            "exercitationem"),
                        true,
                        true),
                    ["error",
                        "tempore",
                        "voluptatem"],
                    "magni",
                    new DateTime(2000, 11, 26, 8, 34, 47),
                    "email",
                    602.6067);
        await vectorTileLayer.SetPortalItem(testPortalItem);
        var portalItem = await vectorTileLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "odit",
                    "aut",
                    "excepturi");
        await vectorTileLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await vectorTileLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        TileInfo testTileInfo = new TileInfo(407.3630,
                    TileInfoFormat.Gif,
                    true,
                [new LOD(9,
                        "esse",
                        61.9707,
                        49812739.8570),
                new LOD(4,
                        "facilis",
                        28.1798,
                        22521630.1296)],
                new Point(-54.1028,
                        27.8575,
                        166.7196,
                        -81.0062,
                        759.9243,
                    new SpatialReference(9,
                            "qui",
                            "nihil",
                            "ut"),
                        true,
                        true,
                        131.5867),
                    [6,
                        5,
                        7],
                new SpatialReference(7,
                        "et",
                        "est",
                        "odio"));
        await vectorTileLayer.SetTileInfo(testTileInfo);
        var tileInfo = await vectorTileLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2004, 8, 10, 12, 49, 52),
                    new DateTime(2002, 9, 3, 14, 57, 16));
        await vectorTileLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await vectorTileLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
