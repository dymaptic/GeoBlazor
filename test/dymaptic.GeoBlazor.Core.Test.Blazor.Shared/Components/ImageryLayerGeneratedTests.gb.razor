@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(237, 62, 35),
                                new MapColor(50, 130, 147)),
                            true,
                            true,
                            [1],
                            5,
                            2,
                            StretchType.PercentClip,
                            [new RasterBandStatistics(112.3619,
                                4,
                                121.0019,
                                806.9619,
                                429.4468,
                                721.1014,
                                200.4510,
                                183.8266),
                            new RasterBandStatistics(293.6152,
                                1,
                                251.3463,
                                406.3794,
                                542.8659,
                                894.1220,
                                103.2490,
                                465.7757)],
                            true,
                            5))"
                        BandIds="@([1,
                            1])"
                        BlendMode="@(BlendMode.HardLight)"
                        CompressionQuality="@(163.4992)"
                        CompressionTolerance="@(924.0855)"
                        Copyright="@("recusandae")"
                        DefinitionExpression="@("voluptates")"
                        Effect="@(new Effect("et",
                            2014195.1900))"
                        Format="@(ImageFormat.Jpgpng)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(6)"
                        ImageMaxWidth="@(4)"
                        Interpolation="@(Interpolation.Majority)"
                        LegendEnabled="@(true)"
                        MaxScale="@(22770212.6237)"
                        MinScale="@(27113.9519)"
                        NoData="@(new NoData([1,
                            2]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAny)"
                        ObjectIdField="@("eum")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.C64)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(653.9391)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(20.7933,
                                TileInfoFormat.Dib,
                                true,
                            [new LOD(3,
                                    "esse",
                                    37.8306,
                                    533141.6675),
                            new LOD(1,
                                    "et",
                                    99.5286,
                                    32656709.3560)],
                            new Point(-66.0498,
                                    -0.9475,
                                    112.0155,
                                    44.0623,
                                    920.6702,
                                new SpatialReference(5,
                                        "et",
                                        "explicabo",
                                        "velit"),
                                    true,
                                    true,
                                    44.6253),
                                [9],
                            new SpatialReference(6,
                                    "totam",
                                    "suscipit",
                                    "fugiat")))"
                        Title="@("cumque minima earum")"
                        Opacity="@(0.5925)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("corrupti",
                                    "phone",
                                OutputPixelType.F64,
                                    "voluptas",
                                    "email"),
                                [3],
                            Method.Northwest,
                            [new DimensionalDefinition("title",
                                    true,
                                    "updatedAt")],
                                [8],
                            Operation.Sum,
                                "temporibus",
                                "quas",
                            new Point(-7.2256,
                                    -14.7529,
                                    -124.1401,
                                    84.0492,
                                    511.2550,
                                new SpatialReference(7,
                                        "repellendus",
                                        "unde",
                                        "aliquam"),
                                    true,
                                    true,
                                    61.6904),
                                "Country = 'Canada'"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(59.7424)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("pariatur")"
                            EndField="@("dolore")"
                            Stops="@([new DateTime(2010, 7, 10, 14, 47, 51),
                                new DateTime(2021, 3, 16, 8, 17, 12)])"
                            TimeZone="@("Etc/UTC")"
                            TrackIdField="@("earum")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(881.9144)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2009, 1, 14, 22, 37, 44))"
                                End="@(new DateTime(2013, 3, 14, 1, 26, 19))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2013, 10, 3, 19, 45, 15))"
                            End="@(new DateTime(2005, 8, 24, 16, 53, 4))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("mollitia")"
                            FunctionName="@("token")"
                            OutputPixelType="@(OutputPixelType.U2)"
                            RasterFunctionDefinition="@("hic")"
                            VariableName="@("token")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("non consectetur dicta")"
                            StringContent="@("sequi")"
                            OutFields="@(["tempora",
                                "id"])"
                            FieldInfos="@([new FieldInfo("createdAt",
                                    "ut",
                                    "omnis",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("updatedAt",
                                    "nulla",
                                    "quas",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new AttachmentsPopupContent("ratione culpa laborum",
                                    "officiis architecto cumque",
                                    AttachmentsPopupContentDisplayType.Preview),
                            new TextPopupContent("sed sit id")])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "category",
                                    "consequatur nisi a",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("aperiam veritatis et",
                                "https://picsum.photos/640/480/?image=80",
                                "94612097-385c-35a1-09e4-667c15380389",
                                () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "impedit"),
                                new ActionButton("vero quia porro",
                                    "https://picsum.photos/640/480/?image=82",
                                    "f3d31dd0-4fe9-b34c-a207-e3d8272491ed",
                                    () => { Console.WriteLine("voluptatibus"); return Task.CompletedTask; },
                                    "phone",
                                    true,
                                    true,
                                    true,
                                    "dicta")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            SubsetDefinitions="@([new DimensionalDefinition("updatedAt",
                                    true,
                                    "name"),
                            new DimensionalDefinition("email",
                                    true,
                                    "token")])">
                            <Point 
                                HasM="@(true)"
                                HasZ="@(true)"
                                SpatialReference="@(new SpatialReference(6,
                                        "fugiat",
                                        "maxime",
                                        "cum"))">
                            </Point>
                        </MultidimensionalSubset>
                        <Extent 
                            Xmax="@(172.7229)"
                            Xmin="@(-83.2043)"
                            Ymax="@(35.0116)"
                            Ymin="@(11.9234)"
                            Zmax="@(220.0258)"
                            Zmin="@(688.4152)"
                            Mmax="@(441.7066)"
                            Mmin="@(631.0564)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(3)"
                                ImageCoordinateSystem="@("qui")"
                                Wkt="@("minus")"
                                Wkt2="@("illo")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("id")"
                            Alias="@("cumque")"
                            Description="@("aut sit nulla")"
                            Length="@(9)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "est" })"
                            ValueType="@(FieldValueType.Binary)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>()],
                                "updatedAt"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(8,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["category"],
                new Point(113.6892,
                        -31.4191,
                        -150.3848,
                        36.9043,
                        301.4894,
                    new SpatialReference(1,
                            "quisquam",
                            "voluptas",
                            "nulla"),
                        true,
                        true,
                        906.5012),
                    2,
                new SpatialReference(9,
                        "dolores",
                        "ut",
                        "sit")),
                "rerum");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Extent(46.1705,
                        -45.9601,
                        51.3134,
                        -44.8815,
                        732.0389,
                        525.3660,
                        705.7337,
                        237.0050,
                    new SpatialReference(1,
                            "consequatur",
                            "tenetur",
                            "quam"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("est",
                            "status",
                        OutputPixelType.C64,
                            "delectus",
                            "createdAt"),
                        [8],
                    Method.Seamline,
                    [new DimensionalDefinition("id",
                            true,
                            "id")],
                        [4,
                            8],
                    Operation.First,
                        "cum",
                        "eum",
                    new Point(-30.1503,
                            -78.1292,
                            -130.8970,
                            29.8094,
                            683.0679,
                        new SpatialReference(3,
                                "doloremque",
                                "architecto",
                                "excepturi"),
                            true,
                            true,
                            688.4434),
                        "1 = 1"),
                new PixelSize(-36.8828,
                        -81.2158,
                    new PixelSizeSpatialReference(2,
                            960.6331)),
                new RasterFunction("optio",
                        "updatedAt",
                    OutputPixelType.F64,
                        "et",
                        "avatar"),
                new TimeExtent(new DateTime(2002, 8, 4, 1, 48, 54),
                        new DateTime(2013, 2, 5, 6, 21, 30))),
                "aut");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(-71.0779,
                        -4.3369,
                        -7.8780,
                        85.1408,
                        537.7742,
                    new SpatialReference(9,
                            "necessitatibus",
                            "aut",
                            "ducimus"),
                        true,
                        true,
                        852.7513)],
                    7),
                "voluptates");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(81.1771,
                        -38.3849,
                        -0.6525,
                        86.1934,
                        237.9782,
                    new SpatialReference(8,
                            "deserunt",
                            "explicabo",
                            "nemo"),
                        true,
                        true,
                        290.5622),
                new MosaicRule(true,
                    new RasterFunction("consequatur",
                            "updatedAt",
                        OutputPixelType.U4,
                            "magni",
                            "token"),
                        [8,
                            2],
                    Method.Attribute,
                    [new DimensionalDefinition("comment",
                            true,
                            "email")],
                        [5,
                            4],
                    Operation.Min,
                        "est",
                        "non",
                    new Point(-77.6788,
                            19.6490,
                            -150.0788,
                            40.1348,
                            19.0022,
                        new SpatialReference(8,
                                "voluptatem",
                                "consectetur",
                                "amet"),
                            true,
                            true,
                            362.5761),
                        "Age > 21"),
                new PixelSize(91.3053,
                        -24.4786,
                    new PixelSizeSpatialReference(4,
                            581.3768)),
                new RasterFunction("omnis",
                        "comment",
                    OutputPixelType.F32,
                        "quaerat",
                        "updatedAt"),
                new TimeExtent(new DateTime(2017, 9, 21, 4, 16, 49),
                        new DateTime(2015, 4, 11, 16, 0, 16))),
                "eaque");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["iure"],
                    ["comment",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-132.3078,
                    97.7652,
                    64.2882,
                    64.2012,
                    368.3614,
                    112.8624,
                    302.2280,
                    987.8345,
                new SpatialReference(1,
                        "cum",
                        "nisi",
                        "repellendus"),
                    true,
                    true),
                9,
                4,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(-123.0940,
                        -73.5033,
                        110.0578,
                        55.9142,
                        987.4436,
                    new SpatialReference(4,
                            "minima",
                            "doloribus",
                            "laboriosam"),
                        true,
                        true,
                        377.7322),
                    1,
                    [2,
                        5],
                new Point(-30.1081,
                        -67.1937,
                        59.2465,
                        -10.1252,
                        769.5308,
                    new SpatialReference(1,
                            "impedit",
                            "quia",
                            "provident"),
                        true,
                        true,
                        871.1749),
                    "ObjectID = 1"),
                "delectus");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("eum",
                    "password",
                OutputPixelType.U32,
                    "distinctio",
                    "id"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(6,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(6,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(2,
                    "voluptates"),
                "aut");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Extent(-18.8488,
                        31.7199,
                        -45.1448,
                        -12.7416,
                        444.4609,
                        363.9170,
                        700.7090,
                        216.8235,
                    new SpatialReference(3,
                            "alias",
                            "autem",
                            "voluptate"),
                        true,
                        true),
                Interpolation.Cubic,
                [new Point(145.7161,
                        6.3830,
                        -5.2465,
                        12.9794,
                        123.0255,
                    new SpatialReference(4,
                            "molestiae",
                            "dolorem",
                            "nesciunt"),
                        true,
                        true,
                        880.0640),
                new Point(-12.3519,
                        57.6424,
                        -42.8130,
                        3.5352,
                        918.3339,
                    new SpatialReference(9,
                            "laudantium",
                            "dolorem",
                            "qui"),
                        true,
                        true,
                        0.4993)],
                new MosaicRule(true,
                    new RasterFunction("et",
                            "id",
                        OutputPixelType.U32,
                            "aut",
                            "group"),
                        [9,
                            9],
                    Method.None,
                    [new DimensionalDefinition("token",
                            true,
                            "updatedAt")],
                        [6,
                            5],
                    Operation.Blend,
                        "sequi",
                        "labore",
                    new Point(45.1552,
                            5.8481,
                            44.5066,
                            21.3403,
                            259.5857,
                        new SpatialReference(4,
                                "consequatur",
                                "aspernatur",
                                "officiis"),
                            true,
                            true,
                            404.9913),
                        "Street = '123 Main St.'"),
                    ["dolores"],
                new PixelSize(-157.1076,
                        67.3267,
                    new PixelSizeSpatialReference(5,
                            416.6730)),
                    true,
                    1,
                    587.0505,
                    6,
                new TimeExtent(new DateTime(2017, 4, 3, 14, 28, 6),
                        new DateTime(2016, 10, 16, 8, 37, 57))),
                "voluptas");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Point(140.8268,
                        -59.7371,
                        28.5256,
                        -26.0129,
                        677.5357,
                    new SpatialReference(6,
                            "maiores",
                            "est",
                            "eaque"),
                        true,
                        true,
                        369.5512),
                    9,
                new MosaicRule(true,
                    new RasterFunction("voluptatem",
                            "comment",
                        OutputPixelType.S8,
                            "cupiditate",
                            "avatar"),
                        [5,
                            3],
                    Method.Attribute,
                    [new DimensionalDefinition("email",
                            true,
                            "comment"),
                    new DimensionalDefinition("category",
                            true,
                            "id")],
                        [1],
                    Operation.Min,
                        "minus",
                        "saepe",
                    new Point(-120.0487,
                            -2.4298,
                            -151.5124,
                            68.6613,
                            707.2934,
                        new SpatialReference(4,
                                "et",
                                "possimus",
                                "quidem"),
                            true,
                            true,
                            981.2611),
                        "Street = '123 Main St.'"),
                new PixelSize(29.5655,
                        -27.0749,
                    new PixelSizeSpatialReference(4,
                            558.0527)),
                    true,
                new RasterFunction("voluptate",
                        "token",
                    OutputPixelType.Unknown,
                        "iure",
                        "avatar"),
                new RasterFunction("quas",
                        "phone",
                    OutputPixelType.U1,
                        "ipsam",
                        "phone"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2008, 8, 3, 22, 14, 24),
                        new DateTime(2007, 8, 24, 11, 17, 12))),
                "iure");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    245.7477,
                new Point(17.8845,
                        -86.0419,
                        -179.4821,
                        -62.9697,
                        864.1000,
                    new SpatialReference(8,
                            "sunt",
                            "quod",
                            "ea"),
                        true,
                        true,
                        821.2479),
                new SpatialReference(3,
                        "iusto",
                        "fugiat",
                        "aliquam"),
                    8),
                "laboriosam");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Point(11.3378,
                        57.0522,
                        -73.9465,
                        -23.7069,
                        500.9572,
                    new SpatialReference(5,
                            "est",
                            "nulla",
                            "qui"),
                        true,
                        true,
                        135.5692),
                new Extent(-73.6949,
                        30.6527,
                        -6.3858,
                        14.8722,
                        754.3601,
                        731.0002,
                        13.5853,
                        500.2227,
                    new SpatialReference(5,
                            "excepturi",
                            "voluptatem",
                            "illum"),
                        true,
                        true)],
                new SpatialReference(8,
                        "ea",
                        "sit",
                        "quia"),
                    [2]),
                "alias");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Polyline([new MapPath([new MapPoint([962.4364,
                            88.8377]),
                        new MapPoint([977.9921,
                            49.6138])])],
                    new SpatialReference(3,
                            "dolore",
                            "incidunt",
                            "est"),
                        true,
                        true),
                    9,
                    true),
                "voluptas");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("voluptas",
                            "category",
                        OutputPixelType.U8,
                            "et",
                            "createdAt"),
                        [4],
                    Method.Northwest,
                    [new DimensionalDefinition("group",
                            true,
                            "name"),
                    new DimensionalDefinition("token",
                            true,
                            "email")],
                        [4],
                    Operation.Mean,
                        "ad",
                        "corporis",
                    new Point(84.2707,
                            -63.7755,
                            -62.9587,
                            -41.2137,
                            283.9135,
                        new SpatialReference(5,
                                "consectetur",
                                "sit",
                                "dicta"),
                            true,
                            true,
                            867.8673),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(31.1973,
                        -59.4945,
                    new PixelSizeSpatialReference(2,
                            123.5987)),
                ImageAreaUnit.SquareYards,
                new Extent(117.5580,
                        126.3461,
                        58.3373,
                        -84.2371,
                        16.0193,
                        418.2156,
                        515.8644,
                        730.7504,
                    new SpatialReference(6,
                            "inventore",
                            "corporis",
                            "molestiae"),
                        true,
                        true),
                    true,
                LengthUnit.UsFeet),
                "adipisci");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Polyline([new MapPath([new MapPoint([199.0522])]),
                        new MapPath([new MapPoint([630.9764])])],
                    new SpatialReference(8,
                            "qui",
                            "nostrum",
                            "voluptas"),
                        true,
                        true),
                    2),
                "recusandae");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("quia",
                            "group",
                        OutputPixelType.C64,
                            "eligendi",
                            "phone"),
                        [1,
                            6],
                    Method.Viewpoint,
                    [new DimensionalDefinition("password",
                            true,
                            "id")],
                        [8],
                    Operation.Last,
                        "molestiae",
                        "inventore",
                    new Point(-59.8061,
                            -7.0110,
                            -91.7796,
                            29.4106,
                            946.6751,
                        new SpatialReference(3,
                                "error",
                                "dolores",
                                "fugiat"),
                            true,
                            true,
                            934.8486),
                        "Province = 'Ontario'"),
                new PixelSize(61.2150,
                        -56.4433,
                    new PixelSizeSpatialReference(9,
                            662.7273)),
                AngularUnit.Degrees,
                new Point(31.6745,
                        86.0925,
                        101.6958,
                        33.8156,
                        846.3106,
                    new SpatialReference(1,
                            "commodi",
                            "accusamus",
                            "esse"),
                        true,
                        true,
                        453.4043),
                    true,
                LengthUnit.Kilometers,
                new Point(58.0893,
                        -59.0701,
                        -175.2611,
                        -19.7857,
                        846.3454,
                    new SpatialReference(2,
                            "labore",
                            "animi",
                            "non"),
                        true,
                        true,
                        415.7221)),
                "enim");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("ab",
                            "createdAt",
                        OutputPixelType.U8,
                            "delectus",
                            "token"),
                        [3,
                            6],
                    Method.Viewpoint,
                    [new DimensionalDefinition("updatedAt",
                            true,
                            "title")],
                        [2],
                    Operation.Min,
                        "et",
                        "aut",
                    new Point(-61.2266,
                            31.0916,
                            -114.7619,
                            4.4525,
                            951.3271,
                        new SpatialReference(9,
                                "delectus",
                                "aut",
                                "voluptate"),
                            true,
                            true,
                            806.1233),
                        "City = 'Toronto'"),
                new PixelSize(-36.5211,
                        27.9758,
                    new PixelSizeSpatialReference(8,
                            600.6017)),
                new Point(-55.3875,
                        -7.2636,
                        147.2412,
                        -40.4606,
                        56.1446,
                    new SpatialReference(9,
                            "tempore",
                            "vel",
                            "cumque"),
                        true,
                        true,
                        561.6053),
                LengthUnit.Inches,
                OperationType.BaseAndTopShadow,
                new Point(59.7316,
                        84.9729,
                        6.5330,
                        70.3765,
                        227.5321,
                    new SpatialReference(2,
                            "harum",
                            "laudantium",
                            "autem"),
                        true,
                        true,
                        626.7607)),
                "ea");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polygon([new MapPath([new MapPoint([946.3781]),
                        new MapPoint([73.2137])])],
                    new SpatialReference(9,
                            "quas",
                            "natus",
                            "molestiae"),
                    new Point(146.3106,
                            -18.0416,
                            -153.1431,
                            -56.2189,
                            281.9491,
                        new SpatialReference(1,
                                "maiores",
                                "voluptatem",
                                "aspernatur"),
                            true,
                            true,
                            621.3358),
                        true,
                        true,
                        true),
                    2),
                "vero");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("voluptatem",
                            "title",
                        OutputPixelType.C64,
                            "ut",
                            "group"),
                        [7],
                    Method.Nadir,
                    [new DimensionalDefinition("title",
                            true,
                            "title")],
                        [8],
                    Operation.Blend,
                        "non",
                        "saepe",
                    new Point(7.8980,
                            55.2869,
                            135.1246,
                            12.9464,
                            976.7692,
                        new SpatialReference(8,
                                "quos",
                                "autem",
                                "aliquam"),
                            true,
                            true,
                            110.8205),
                        "Street = '123 Main St.'"),
                new PixelSize(19.1767,
                        35.3936,
                    new PixelSizeSpatialReference(6,
                            382.7852)),
                new Polygon([new MapPath([new MapPoint([234.3593,
                            596.1184])]),
                        new MapPath([new MapPoint([671.6252,
                                603.2047])])],
                    new SpatialReference(6,
                            "nesciunt",
                            "sint",
                            "quo"),
                    new Point(82.4045,
                            -33.9295,
                            144.8276,
                            -11.9326,
                            189.9341,
                        new SpatialReference(1,
                                "eum",
                                "ut",
                                "dicta"),
                            true,
                            true,
                            88.3158),
                        true,
                        true,
                        true),
                    true),
                "laudantium");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(7,
                        "error",
                        "nulla",
                        "eaque")),
                "accusamus");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Polyline([new MapPath([new MapPoint([171.4851,
                            230.5630])]),
                        new MapPath([new MapPoint([648.9158,
                                922.6021])])],
                    new SpatialReference(3,
                            "iure",
                            "vel",
                            "vero"),
                        true,
                        true),
                    [3],
                SpatialRelationship.Overlaps,
                new TimeExtent(new DateTime(2007, 9, 9, 18, 54, 9),
                        new DateTime(2021, 11, 7, 20, 0, 40)),
                    "Province = 'Ontario'"),
                "vel");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([7,
                    4],
                    true,
                    585.1188,
                    954.8723,
                    "7.8.4.9",
                new Point(-124.1791,
                        50.8815,
                        -26.5458,
                        -79.4538,
                        457.8518,
                    new SpatialReference(5,
                            "totam",
                            "quia",
                            "inventore"),
                        true,
                        true,
                        538.3239),
                    1,
                    ["doloremque"],
                    "provident",
                    new DateTime(2001, 9, 4, 15, 18, 19),
                    778.5618,
                    4,
                    "non",
                    6),
                "exercitationem");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([9,
                    4],
                    true,
                    674.7103,
                    697.3740,
                    "7.8.6.3",
                new Polyline([new MapPath([new MapPoint([347.8986])]),
                        new MapPath([new MapPoint([783.7088,
                                825.2992])])],
                    new SpatialReference(5,
                            "sapiente",
                            "voluptas",
                            "est"),
                        true,
                        true),
                    1,
                    ["nobis"],
                    "laudantium",
                    new DateTime(2004, 7, 3, 12, 3, 12),
                    191.3890,
                    6,
                    "quas",
                    4),
                "officia");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([4],
                    true,
                    131.3202,
                    386.3908,
                    "5.1.9.0",
                new Polygon([new MapPath([new MapPoint([924.5521])]),
                        new MapPath([new MapPoint([399.8320,
                                873.4158])])],
                    new SpatialReference(7,
                            "placeat",
                            "voluptate",
                            "laudantium"),
                    new Point(176.0314,
                            65.5108,
                            128.5495,
                            84.5722,
                            985.2674,
                        new SpatialReference(4,
                                "inventore",
                                "minima",
                                "dolorem"),
                            true,
                            true,
                            153.6893),
                        true,
                        true,
                        true),
                    8,
                    ["laborum",
                        "quod"],
                    "unde",
                    new DateTime(2015, 4, 1, 9, 6, 48),
                    468.3103,
                    7,
                    "voluptas",
                    1),
                "hic");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        await imageryLayer.Refresh();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2022, 5, 11, 7, 24, 38),
                        "harum",
                        "consequatur libero laudantium"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.SourceIn;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Tiff;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Bilinear;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAll;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.C128;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2001, 2, 8, 16, 52, 24),
                    new DateTime(2014, 7, 27, 21, 11, 39));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("sit",
                    "eum",
                new TimeExtent(new DateTime(2020, 1, 24, 21, 35, 32),
                        new DateTime(2018, 7, 26, 16, 53, 51)),
                new TimeInterval(TemporalTime.Decades,
                        922.9657),
                    [new DateTime(2017, 7, 16, 11, 23, 26),
                        new DateTime(2007, 8, 3, 12, 39, 41)],
                    "Pacific/Honolulu",
                    "sapiente");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    603.2138);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(-53.3889,
                    66.3707,
                    54.1862,
                    75.2007,
                    783.2151,
                    116.7507,
                    896.4260,
                    912.6645,
                new SpatialReference(7,
                        "alias",
                        "maiores",
                        "repellendus"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(6,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "group",
                    "a",
                    "accusantium mollitia",
                    9,
                    true,
                    true,
                    new { Value = "autem" },
                FieldValueType.Description,
                    new CodedValueDomain<string>([new CodedValue<string>(),
                        new CodedValue<string>()],
                        "token"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("nulla",
                        "phone",
                    OutputPixelType.S32,
                        "ratione",
                        "comment"),
                    [1],
                Method.Center,
                [new DimensionalDefinition("id",
                        true,
                        "phone")],
                    [8,
                        9],
                Operation.Min,
                    "est",
                    "error",
                new Point(-136.7755,
                        -78.3512,
                        -119.1689,
                        19.6708,
                        446.1758,
                    new SpatialReference(7,
                            "dolore",
                            "vitae",
                            "culpa"),
                        true,
                        true,
                        757.2553),
                    "ObjectID = 1");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([476.6205])]),
                        new MapPath([new MapPoint([1.8293])])],
                    new SpatialReference(8,
                            "deserunt",
                            "iste",
                            "mollitia"),
                    new Point(-100.9963,
                            82.4533,
                            -61.4507,
                            2.0743,
                            651.7156,
                        new SpatialReference(8,
                                "iure",
                                "qui",
                                "veniam"),
                            true,
                            true,
                            137.8284),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("comment",
                        true,
                        "status"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "phone")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("laudantium alias sed",
                    "facilis",
                    ["minus"],
                [new FieldInfo("token",
                        "temporibus",
                        "recusandae",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongDateLongTime24),
                        true,
                        true,
                    StatisticType.Max)],
                [new FieldsPopupContent([new FieldInfo("title",
                            "error",
                            "dolores",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLongTime24),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("name",
                            "tempora",
                            "iure",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortMonthYear),
                            true,
                            true,
                        StatisticType.Stddev)],
                        "et perspiciatis",
                        "odio magni exercitationem")],
                [new ExpressionInfo("return Date();",
                        "token",
                        "quae molestiae aut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "category",
                        "quo blanditiis expedita",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("voluptatem qui sed",
                        "https://picsum.photos/640/480/?image=979",
                        "9aeca1ec-ae14-4429-6eba-5f54437c0ca1",
                        () => { Console.WriteLine("eum"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "accusantium")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("quam",
                    "email",
                OutputPixelType.U4,
                    "omnis",
                    "status");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 7, 24, 21, 22, 44),
                    new DateTime(2000, 2, 4, 12, 41, 17));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
