@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(200, 125, 113),
                                new MapColor(179, 15, 228)),
                            true,
                            true,
                            [8,
                            5,
                            4],
                            3,
                            8,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(969.2545,
                                1,
                                368.9311,
                                150.0858,
                                435.8608,
                                529.4030,
                                391.8957,
                                572.6211),
                            new RasterBandStatistics(283.1793,
                                8,
                                729.0610,
                                915.3504,
                                314.6523,
                                18.4331,
                                872.5805,
                                160.9148)],
                            true,
                            3))"
                        BandIds="@([9,
                            6,
                            7,
                            9])"
                        BlendMode="@(BlendMode.Darken)"
                        CompressionQuality="@(598.5748)"
                        CompressionTolerance="@(751.0202)"
                        Copyright="@("dolore")"
                        DefinitionExpression="@("quas")"
                        Effect="@(new Effect("et",
                            6541884.5640))"
                        Format="@(ImageFormat.Png32)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(6)"
                        ImageMaxWidth="@(3)"
                        Interpolation="@(Interpolation.Cubic)"
                        LegendEnabled="@(true)"
                        MaxScale="@(43772435.6541)"
                        MinScale="@(29722.7284)"
                        NoData="@(new NoData([8,
                            8]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAll)"
                        ObjectIdField="@("dolorem")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.F64)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(658.7464)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(55.4879,
                                TileInfoFormat.Tiff,
                                true,
                            [new LOD(6,
                                    "qui",
                                    26.3656,
                                    23913526.4917)],
                            new Point(148.0344,
                                    57.1295,
                                    166.6952,
                                    81.7609,
                                    885.9178,
                                new SpatialReference(2,
                                        "sunt",
                                        "harum",
                                        "atque"),
                                    true,
                                    true,
                                    652.2257),
                                [3,
                                    9,
                                    9],
                            new SpatialReference(7,
                                    "voluptas",
                                    "qui",
                                    "in")))"
                        Title="@("molestiae nulla magni")"
                        Opacity="@(0.3155)"
                        ListMode="@(ListMode.Show)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(-95.8719,
                                -149.6436,
                                80.8240,
                                -9.5134,
                                902.4646,
                                360.0975,
                                204.9004,
                                219.0539,
                            new SpatialReference(3,
                                    "dolor",
                                    "minima",
                                    "a"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("sit",
                                    "token",
                                OutputPixelType.U8,
                                    "magnam",
                                    "email"),
                                [3,
                                    2,
                                    9],
                            Method.Seamline,
                            [new DimensionalDefinition("title",
                                    true,
                                    "name"),
                            new DimensionalDefinition("token",
                                    true,
                                    "password")],
                                [2,
                                    7,
                                    4],
                            Operation.Last,
                                "libero",
                                "accusantium",
                            new Point(52.1851,
                                    -78.6050,
                                    -9.1119,
                                    4.6392,
                                    224.8635,
                                new SpatialReference(6,
                                        "ut",
                                        "aliquid",
                                        "adipisci"),
                                    true,
                                    true,
                                    847.6331),
                                "1 = 1"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(359.5630)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("inventore")"
                            EndField="@("hic")"
                            Stops="@([new DateTime(2002, 1, 26, 13, 18, 19),
                                new DateTime(2013, 6, 24, 18, 53, 57),
                                new DateTime(2003, 10, 1, 4, 5, 29),
                                new DateTime(2020, 7, 1, 8, 24, 0)])"
                            TimeZone="@("Europe/Brussels")"
                            TrackIdField="@("eveniet")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Years)"
                                Value="@(349.0582)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2017, 9, 23, 6, 13, 58))"
                                End="@(new DateTime(2009, 3, 27, 13, 31, 55))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 3, 26, 8, 9, 24))"
                            End="@(new DateTime(2001, 4, 21, 0, 22, 51))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("consequatur")"
                            FunctionName="@("updatedAt")"
                            OutputPixelType="@(OutputPixelType.F64)"
                            RasterFunctionDefinition="@("qui")"
                            VariableName="@("updatedAt")">
                        </RasterFunction>
                        <PopupTemplate 
                            Title="@("quod qui blanditiis")"
                            StringContent="@("quibusdam")"
                            OutFields="@(["nihil",
                                "quia"])"
                            FieldInfos="@([new FieldInfo("phone",
                                    "voluptatum",
                                    "et",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.LongMonthDayYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("phone",
                                    "odit",
                                    "eum",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new MediaPopupContent("corporis tempore omnis",
                                    "eligendi quam ut et labore laborum illum",
                                [new LineChartMediaInfo("libero labore et",
                                        "et",
                                        "eaque quia et",
                                    new ChartMediaInfoValue(["ea",
                                            "nulla",
                                            "sed",
                                            "quibusdam"],
                                            "aut",
                                            "dolor",
                                        [new ChartMediaInfoValueSeries("token",
                                                "enim",
                                                323.6711),
                                        new ChartMediaInfoValueSeries("token",
                                                "velit",
                                                378.0952)],
                                        [new MapColor(26, 55, 239),
                                        new MapColor(230, 156, 138),
                                        new MapColor(186, 35, 17)])),
                                new PieChartMediaInfo("minima possimus fuga",
                                        "et",
                                        "eum fuga optio",
                                    new ChartMediaInfoValue(["optio",
                                            "ratione",
                                            "officia",
                                            "aspernatur"],
                                            "molestiae",
                                            "blanditiis",
                                        [new ChartMediaInfoValueSeries("name",
                                                "culpa",
                                                751.0963),
                                        new ChartMediaInfoValueSeries("title",
                                                "itaque",
                                                184.4575),
                                        new ChartMediaInfoValueSeries("comment",
                                                "est",
                                                35.3168),
                                        new ChartMediaInfoValueSeries("comment",
                                                "consequatur",
                                                206.0861)],
                                        [new MapColor(186, 156, 231),
                                        new MapColor(184, 28, 14),
                                        new MapColor(125, 231, 33)]))],
                                    8),
                            new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                        "et",
                                        "voluptas maiores itaque")),
                            new FieldsPopupContent([new FieldInfo("avatar",
                                        "aliquam",
                                        "incidunt",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.ShortDateLongTime),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("name",
                                        "possimus",
                                        "repellendus",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.ShortDateLongTime24),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("password",
                                        "dolorem",
                                        "alias",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.ShortDate),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("title",
                                        "aut",
                                        "repellendus",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.DayShortMonthYearShortTime),
                                        true,
                                        true,
                                    StatisticType.Stddev)],
                                    "dolores consequuntur hic esse et ex",
                                    "et corrupti adipisci")])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "password",
                                    "est accusamus qui",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature['FieldName'];",
                                    "token",
                                    "sint cumque voluptatibus",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("deleniti est optio",
                                    "https://picsum.photos/640/480/?image=463",
                                    "fc62153c-9848-a639-19d2-df135b06329b",
                                    () => { Console.WriteLine("quia"); return Task.CompletedTask; },
                                    "createdAt",
                                    true,
                                    true,
                                    true,
                                    "voluptatem"),
                            new ActionButton("ut at ab",
                                    "https://picsum.photos/640/480/?image=589",
                                    "9a6afc6d-9b1e-ffd2-ce20-4ab268ec8b63",
                                    () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "ut"),
                            new ActionToggle("doloribus inventore fugit",
                                    "31ab09b0-f2ba-2593-d18f-cbcaaebb3353",
                                    () => { Console.WriteLine("ipsa"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "ab"),
                            new ActionToggle("ea id in",
                                    "8af218fb-32a4-9ea2-011c-397b7911e7f9",
                                    () => { Console.WriteLine("porro"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "avatar",
                                    "natus")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            SubsetDefinitions="@([new DimensionalDefinition("email",
                                    true,
                                    "password"),
                            new DimensionalDefinition("email",
                                    true,
                                    "comment"),
                            new DimensionalDefinition("name",
                                    true,
                                    "createdAt"),
                            new DimensionalDefinition("title",
                                    true,
                                    "comment")])"
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([298.3341,
                                        463.7883]),
                                    new MapPoint([790.6072,
                                        4.0501,
                                        774.6253,
                                        25.1044])]),
                                    new MapPath([new MapPoint([559.5217,
                                            328.9639,
                                            666.0295]),
                                        new MapPoint([560.1492,
                                            632.5358,
                                            430.8699]),
                                        new MapPoint([956.6033,
                                            733.9727,
                                            65.0852]),
                                        new MapPoint([322.3002,
                                            93.8850,
                                            133.1785])])],
                                new SpatialReference(2,
                                        "unde",
                                        "quis",
                                        "et"),
                                new Point(46.8616,
                                        -58.4497,
                                        177.4570,
                                        -89.4133,
                                        527.6721,
                                    new SpatialReference(3,
                                            "rem",
                                            "in",
                                            "aut"),
                                        true,
                                        true,
                                        321.6196),
                                    true,
                                    true,
                                    true))">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("title")"
                            Alias="@("dignissimos")"
                            Description="@("temporibus quis non necessitatibus et sapiente")"
                            Length="@(2)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "sed" })"
                            ValueType="@(FieldValueType.Measurement)"
                            Domain="@(new InheritedDomain("createdAt"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(5,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["phone",
                    "comment",
                    "updatedAt"],
                new Point(66.9578,
                        5.1850,
                        -165.9765,
                        -61.2204,
                        999.8321,
                    new SpatialReference(3,
                            "sequi",
                            "et",
                            "molestiae"),
                        true,
                        true,
                        760.1134),
                    3,
                new SpatialReference(7,
                        "voluptates",
                        "iure",
                        "sint")),
                "adipisci");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Extent(-32.5857,
                        136.4404,
                        67.4076,
                        84.1650,
                        187.2863,
                        712.6672,
                        799.6498,
                        448.0911,
                    new SpatialReference(6,
                            "unde",
                            "quam",
                            "consequatur"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("rerum",
                            "createdAt",
                        OutputPixelType.S32,
                            "ducimus",
                            "id"),
                        [2,
                            7,
                            8],
                    Method.Northwest,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "email"),
                    new DimensionalDefinition("category",
                            true,
                            "name"),
                    new DimensionalDefinition("password",
                            true,
                            "token")],
                        [1,
                            9,
                            8,
                            5],
                    Operation.Blend,
                        "ab",
                        "velit",
                    new Point(-61.9890,
                            -84.7444,
                            142.7268,
                            -24.3414,
                            487.0604,
                        new SpatialReference(5,
                                "enim",
                                "quas",
                                "repellat"),
                            true,
                            true,
                            992.7360),
                        "Street = '123 Main St.'"),
                new PixelSize(104.1882,
                        39.9052,
                    new PixelSizeSpatialReference(2,
                            44.0551)),
                new RasterFunction("molestias",
                        "comment",
                    OutputPixelType.U8,
                        "rerum",
                        "phone"),
                new TimeExtent(new DateTime(2016, 6, 25, 9, 41, 31),
                        new DateTime(2012, 9, 9, 0, 42, 34))),
                "aspernatur");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(50.6980,
                        75.4598,
                        -128.4082,
                        28.7808,
                        531.6565,
                    new SpatialReference(1,
                            "maiores",
                            "suscipit",
                            "incidunt"),
                        true,
                        true,
                        370.2402),
                new Point(-108.0367,
                        -24.9819,
                        -35.8664,
                        -16.7529,
                        53.1758,
                    new SpatialReference(1,
                            "non",
                            "consequatur",
                            "sed"),
                        true,
                        true,
                        58.7689),
                new Point(31.1809,
                        -11.2485,
                        148.1261,
                        41.3746,
                        684.9723,
                    new SpatialReference(7,
                            "vel",
                            "qui",
                            "molestias"),
                        true,
                        true,
                        515.7624)],
                    8),
                "velit");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(82.0216,
                        157.2249,
                        52.0809,
                        -38.5948,
                        466.9911,
                        534.3288,
                        502.1470,
                        831.0822,
                    new SpatialReference(7,
                            "quisquam",
                            "quis",
                            "eaque"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("maiores",
                            "group",
                        OutputPixelType.F32,
                            "atque",
                            "title"),
                        [6,
                            5,
                            4],
                    Method.Viewpoint,
                    [new DimensionalDefinition("category",
                            true,
                            "phone")],
                        [4,
                            5],
                    Operation.Min,
                        "animi",
                        "similique",
                    new Point(-159.6036,
                            -47.5488,
                            -61.8193,
                            -27.3196,
                            801.2620,
                        new SpatialReference(2,
                                "molestias",
                                "distinctio",
                                "cum"),
                            true,
                            true,
                            249.9114),
                        "Name = 'John Doe'"),
                new PixelSize(-72.0382,
                        55.1294,
                    new PixelSizeSpatialReference(2,
                            670.0137)),
                new RasterFunction("omnis",
                        "createdAt",
                    OutputPixelType.Unknown,
                        "non",
                        "email"),
                new TimeExtent(new DateTime(2017, 11, 26, 16, 3, 35),
                        new DateTime(2018, 2, 2, 19, 41, 43))),
                "ut");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["ut",
                    "excepturi",
                    "ea"],
                    ["status",
                        "avatar",
                        "phone"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-111.0911,
                    111.0937,
                    -45.4629,
                    -15.5694,
                    674.9674,
                    952.5938,
                    871.2834,
                    841.9461,
                new SpatialReference(8,
                        "qui",
                        "est",
                        "ullam"),
                    true,
                    true),
                1,
                9,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(-102.4113,
                        -65.3644,
                        120.5642,
                        81.4827,
                        176.4113,
                    new SpatialReference(6,
                            "quidem",
                            "consequuntur",
                            "est"),
                        true,
                        true,
                        436.6837),
                    5,
                    [3,
                        6,
                        8],
                new Point(84.6269,
                        26.8337,
                        57.8365,
                        -44.9802,
                        410.7033,
                    new SpatialReference(7,
                            "exercitationem",
                            "voluptatem",
                            "sit"),
                        true,
                        true,
                        924.0841),
                    "PostalCode = 'M5V 1J9'"),
                "esse");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("ut",
                    "status",
                OutputPixelType.U4,
                    "quia",
                    "createdAt"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(1,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(9,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(5,
                    "nisi"),
                "optio");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Point(70.2364,
                        49.8501,
                        8.0089,
                        -30.9269,
                        32.5361,
                    new SpatialReference(4,
                            "non",
                            "dolores",
                            "modi"),
                        true,
                        true,
                        315.7860),
                Interpolation.Majority,
                [new Point(157.5663,
                        -24.5353,
                        109.4750,
                        -82.6840,
                        971.0564,
                    new SpatialReference(4,
                            "ea",
                            "nobis",
                            "necessitatibus"),
                        true,
                        true,
                        57.1252),
                new Point(143.6769,
                        21.0476,
                        20.9545,
                        -74.2067,
                        725.4214,
                    new SpatialReference(1,
                            "quasi",
                            "dolorum",
                            "officiis"),
                        true,
                        true,
                        845.1552)],
                new MosaicRule(true,
                    new RasterFunction("eaque",
                            "createdAt",
                        OutputPixelType.S8,
                            "voluptatibus",
                            "email"),
                        [5,
                            4,
                            2,
                            2],
                    Method.None,
                    [new DimensionalDefinition("name",
                            true,
                            "avatar"),
                    new DimensionalDefinition("category",
                            true,
                            "createdAt"),
                    new DimensionalDefinition("id",
                            true,
                            "status"),
                    new DimensionalDefinition("token",
                            true,
                            "id")],
                        [4,
                            1,
                            3],
                    Operation.Last,
                        "at",
                        "officiis",
                    new Point(45.9279,
                            -89.5331,
                            -132.2073,
                            56.4303,
                            878.1371,
                        new SpatialReference(6,
                                "in",
                                "quia",
                                "vitae"),
                            true,
                            true,
                            271.5557),
                        "1 = 1"),
                    ["nulla",
                        "accusantium",
                        "consectetur",
                        "nobis"],
                new PixelSize(109.4116,
                        4.0401,
                    new PixelSizeSpatialReference(9,
                            734.7913)),
                    true,
                    7,
                    259.0233,
                    3,
                new TimeExtent(new DateTime(2013, 11, 19, 6, 42, 47),
                        new DateTime(2017, 8, 17, 10, 41, 20))),
                "asperiores");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Polyline([new MapPath([new MapPoint([308.4390,
                            343.6135,
                            302.6167]),
                        new MapPoint([337.4833,
                            800.6552,
                            149.8725])]),
                        new MapPath([new MapPoint([187.2500,
                                331.6929]),
                            new MapPoint([354.3919,
                                450.1791]),
                            new MapPoint([1.0109,
                                574.0034,
                                602.4510])]),
                        new MapPath([new MapPoint([394.5321,
                                129.2142,
                                184.5875]),
                            new MapPoint([668.6321,
                                151.6802,
                                933.2011,
                                842.2149]),
                            new MapPoint([731.2250,
                                340.8776,
                                568.1309])]),
                        new MapPath([new MapPoint([180.3167,
                                560.7609,
                                608.8885,
                                260.5123]),
                            new MapPoint([486.0990,
                                5.3121,
                                995.8447]),
                            new MapPoint([714.2275,
                                308.5138,
                                866.7024])])],
                    new SpatialReference(3,
                            "sunt",
                            "adipisci",
                            "voluptatibus"),
                        true,
                        true),
                    1,
                new MosaicRule(true,
                    new RasterFunction("quo",
                            "email",
                        OutputPixelType.U4,
                            "laborum",
                            "token"),
                        [1,
                            9,
                            9,
                            9],
                    Method.Center,
                    [new DimensionalDefinition("comment",
                            true,
                            "phone"),
                    new DimensionalDefinition("token",
                            true,
                            "createdAt"),
                    new DimensionalDefinition("phone",
                            true,
                            "group"),
                    new DimensionalDefinition("comment",
                            true,
                            "token")],
                        [6,
                            2,
                            6,
                            1],
                    Operation.First,
                        "nihil",
                        "adipisci",
                    new Point(133.8657,
                            -76.2354,
                            -84.7607,
                            -75.3085,
                            437.3327,
                        new SpatialReference(2,
                                "laudantium",
                                "aliquid",
                                "voluptas"),
                            true,
                            true,
                            280.2746),
                        "1 = 1"),
                new PixelSize(60.6397,
                        -49.6992,
                    new PixelSizeSpatialReference(6,
                            226.2422)),
                    true,
                new RasterFunction("quia",
                        "status",
                    OutputPixelType.U2,
                        "harum",
                        "token"),
                new RasterFunction("laudantium",
                        "status",
                    OutputPixelType.C128,
                        "ut",
                        "email"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2007, 5, 5, 3, 3, 19),
                        new DateTime(2012, 8, 10, 14, 16, 6))),
                "ea");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    580.4565,
                new Polygon([new MapPath([new MapPoint([709.1904,
                            659.9839,
                            793.9764]),
                        new MapPoint([4.2832,
                            316.7211,
                            376.5494,
                            922.3166]),
                        new MapPoint([420.1740,
                            720.7193,
                            728.3362])])],
                    new SpatialReference(8,
                            "ut",
                            "ut",
                            "est"),
                    new Point(-90.1540,
                            -37.6651,
                            23.3958,
                            87.4416,
                            806.8664,
                        new SpatialReference(5,
                                "sapiente",
                                "cumque",
                                "illo"),
                            true,
                            true,
                            964.4216),
                        true,
                        true,
                        true),
                new SpatialReference(1,
                        "ut",
                        "expedita",
                        "molestiae"),
                    7),
                "nesciunt");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Extent(-171.7411,
                        161.8415,
                        41.4582,
                        46.7455,
                        312.5458,
                        127.2599,
                        783.5899,
                        254.6284,
                    new SpatialReference(6,
                            "optio",
                            "ipsum",
                            "natus"),
                        true,
                        true),
                new Extent(-134.7325,
                        -133.7661,
                        -21.4466,
                        -42.1332,
                        265.6423,
                        433.2858,
                        666.0497,
                        626.7902,
                    new SpatialReference(4,
                            "adipisci",
                            "enim",
                            "libero"),
                        true,
                        true),
                new Extent(-35.3467,
                        100.4485,
                        38.8026,
                        58.4867,
                        182.7754,
                        880.2544,
                        123.2308,
                        295.5719,
                    new SpatialReference(7,
                            "aut",
                            "dignissimos",
                            "unde"),
                        true,
                        true),
                new Point(-3.5511,
                        -34.1098,
                        93.4552,
                        66.2805,
                        333.3915,
                    new SpatialReference(8,
                            "consequatur",
                            "officiis",
                            "cum"),
                        true,
                        true,
                        470.5917)],
                new SpatialReference(3,
                        "minima",
                        "sit",
                        "rerum"),
                    [6,
                        8,
                        4]),
                "eius");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Polyline([new MapPath([new MapPoint([306.0376,
                            251.7402,
                            591.9112]),
                        new MapPoint([316.5520,
                            319.3944,
                            484.6900,
                            515.3810]),
                        new MapPoint([359.5683,
                            601.0072,
                            745.0333]),
                        new MapPoint([435.9801,
                            672.4544,
                            333.5445,
                            964.0015])]),
                        new MapPath([new MapPoint([611.0482,
                                663.7045,
                                275.4006,
                                701.7188]),
                            new MapPoint([424.7673,
                                672.1060,
                                875.2030,
                                311.6491])]),
                        new MapPath([new MapPoint([612.0805,
                                454.9040,
                                570.1244]),
                            new MapPoint([549.9120,
                                330.1776,
                                925.7092,
                                893.3943])]),
                        new MapPath([new MapPoint([839.2474,
                                409.0490,
                                369.5812,
                                871.5470]),
                            new MapPoint([231.5988,
                                632.4201,
                                584.8354]),
                            new MapPoint([594.0031,
                                215.1264,
                                556.3588,
                                717.6308]),
                            new MapPoint([935.1852,
                                27.5527])])],
                    new SpatialReference(8,
                            "ipsum",
                            "a",
                            "voluptatem"),
                        true,
                        true),
                    5,
                    true),
                "vel");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("ipsa",
                            "title",
                        OutputPixelType.U32,
                            "exercitationem",
                            "status"),
                        [5,
                            3],
                    Method.LockRaster,
                    [new DimensionalDefinition("status",
                            true,
                            "comment"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "status"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "token"),
                    new DimensionalDefinition("password",
                            true,
                            "updatedAt")],
                        [8,
                            3,
                            9,
                            8],
                    Operation.Min,
                        "omnis",
                        "non",
                    new Point(66.4598,
                            -24.7035,
                            7.5443,
                            -62.9838,
                            415.8582,
                        new SpatialReference(2,
                                "amet",
                                "sint",
                                "earum"),
                            true,
                            true,
                            770.8872),
                        "Phone = '555-555-5555'"),
                new PixelSize(31.6499,
                        82.3096,
                    new PixelSizeSpatialReference(3,
                            57.5695)),
                ImageAreaUnit.Acres,
                new Point(-62.9171,
                        58.5673,
                        175.2596,
                        -87.3202,
                        349.7034,
                    new SpatialReference(6,
                            "hic",
                            "aliquam",
                            "adipisci"),
                        true,
                        true,
                        554.4692),
                    true,
                LengthUnit.Kilometers),
                "velit");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Point(-171.5749,
                        -73.6089,
                        -167.4724,
                        -27.5822,
                        243.3604,
                    new SpatialReference(9,
                            "est",
                            "et",
                            "nisi"),
                        true,
                        true,
                        756.9494),
                    2),
                "consequatur");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("dolores",
                            "id",
                        OutputPixelType.F64,
                            "alias",
                            "id"),
                        [4,
                            1,
                            9,
                            2],
                    Method.Attribute,
                    [new DimensionalDefinition("phone",
                            true,
                            "group"),
                    new DimensionalDefinition("category",
                            true,
                            "category"),
                    new DimensionalDefinition("name",
                            true,
                            "group"),
                    new DimensionalDefinition("email",
                            true,
                            "group")],
                        [7,
                            2,
                            3],
                    Operation.Blend,
                        "nostrum",
                        "qui",
                    new Point(87.1051,
                            5.1095,
                            176.7926,
                            -28.8658,
                            703.3687,
                        new SpatialReference(7,
                                "debitis",
                                "ea",
                                "est"),
                            true,
                            true,
                            544.2992),
                        "Street = '123 Main St.'"),
                new PixelSize(126.7422,
                        87.5755,
                    new PixelSizeSpatialReference(3,
                            461.9166)),
                AngularUnit.Degrees,
                new Point(33.4483,
                        -9.1722,
                        -71.7704,
                        -33.5317,
                        523.4241,
                    new SpatialReference(8,
                            "voluptatem",
                            "aperiam",
                            "illum"),
                        true,
                        true,
                        283.2037),
                    true,
                LengthUnit.Millimeters,
                new Point(-113.2756,
                        -2.8695,
                        -141.2352,
                        -28.2444,
                        448.8191,
                    new SpatialReference(9,
                            "est",
                            "qui",
                            "laboriosam"),
                        true,
                        true,
                        987.5814)),
                "aliquam");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("ut",
                            "createdAt",
                        OutputPixelType.C128,
                            "facere",
                            "createdAt"),
                        [8,
                            1],
                    Method.Center,
                    [new DimensionalDefinition("phone",
                            true,
                            "token"),
                    new DimensionalDefinition("token",
                            true,
                            "name"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "token"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "createdAt")],
                        [6,
                            7],
                    Operation.Blend,
                        "quam",
                        "et",
                    new Point(-4.1672,
                            65.3720,
                            -171.8840,
                            -77.4240,
                            980.8752,
                        new SpatialReference(7,
                                "qui",
                                "at",
                                "aliquam"),
                            true,
                            true,
                            209.1435),
                        "Phone = '555-555-5555'"),
                new PixelSize(-81.3276,
                        26.0675,
                    new PixelSizeSpatialReference(6,
                            555.0592)),
                new Point(7.1262,
                        -81.6016,
                        139.0351,
                        -33.2759,
                        587.1212,
                    new SpatialReference(4,
                            "unde",
                            "quae",
                            "adipisci"),
                        true,
                        true,
                        966.3674),
                LengthUnit.Millimeters,
                OperationType.TopAndTopShadow,
                new Point(-68.9726,
                        23.0525,
                        -121.9026,
                        67.4448,
                        502.5601,
                    new SpatialReference(2,
                            "consequatur",
                            "voluptatem",
                            "neque"),
                        true,
                        true,
                        894.8900)),
                "molestiae");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polyline([new MapPath([new MapPoint([82.7922,
                            22.7554]),
                        new MapPoint([279.7963,
                            424.5604,
                            564.0809]),
                        new MapPoint([536.0662,
                            870.1034,
                            714.7546]),
                        new MapPoint([117.3403,
                            321.7808,
                            300.9893])]),
                        new MapPath([new MapPoint([834.1762,
                                119.4597]),
                            new MapPoint([585.5258,
                                581.1806,
                                835.3607,
                                851.6015]),
                            new MapPoint([13.4732,
                                168.5868])])],
                    new SpatialReference(5,
                            "quia",
                            "mollitia",
                            "enim"),
                        true,
                        true),
                    9),
                "sed");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("et",
                            "token",
                        OutputPixelType.U4,
                            "necessitatibus",
                            "status"),
                        [3,
                            9],
                    Method.Nadir,
                    [new DimensionalDefinition("email",
                            true,
                            "email"),
                    new DimensionalDefinition("comment",
                            true,
                            "comment"),
                    new DimensionalDefinition("avatar",
                            true,
                            "updatedAt")],
                        [6,
                            1,
                            7],
                    Operation.Mean,
                        "fugiat",
                        "sed",
                    new Point(68.7088,
                            80.0930,
                            2.9281,
                            -12.1799,
                            977.0639,
                        new SpatialReference(5,
                                "sit",
                                "iusto",
                                "veritatis"),
                            true,
                            true,
                            101.9327),
                        "Province = 'Ontario'"),
                new PixelSize(-164.1020,
                        55.8710,
                    new PixelSizeSpatialReference(4,
                            244.9732)),
                new Point(97.8472,
                        -38.9823,
                        -94.4797,
                        57.2693,
                        832.9279,
                    new SpatialReference(9,
                            "vel",
                            "ex",
                            "est"),
                        true,
                        true,
                        316.6674),
                    true),
                "amet");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(6,
                        "veritatis",
                        "et",
                        "porro")),
                "recusandae");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Polygon([new MapPath([new MapPoint([138.9912,
                            291.5708,
                            459.3665]),
                        new MapPoint([199.3674,
                            156.2008])])],
                    new SpatialReference(4,
                            "alias",
                            "earum",
                            "aut"),
                    new Point(113.1448,
                            -30.4751,
                            -136.1505,
                            -51.6356,
                            42.2952,
                        new SpatialReference(5,
                                "qui",
                                "et",
                                "porro"),
                            true,
                            true,
                            11.5506),
                        true,
                        true,
                        true),
                    [9,
                        2,
                        8],
                SpatialRelationship.Crosses,
                new TimeExtent(new DateTime(2013, 9, 24, 21, 38, 34),
                        new DateTime(2002, 1, 12, 11, 32, 37)),
                    "Street = '123 Main St.'"),
                "sunt");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([3,
                    8,
                    4,
                    6],
                    true,
                    955.7345,
                    444.0504,
                    "9.7.2.4",
                new Polygon([new MapPath([new MapPoint([487.6335,
                            182.1296,
                            85.7270,
                            105.5099]),
                        new MapPoint([682.2126,
                            948.0625])]),
                        new MapPath([new MapPoint([72.6606,
                                968.9985,
                                454.0212,
                                150.9631]),
                            new MapPoint([951.2014,
                                462.5859]),
                            new MapPoint([767.3550,
                                250.6841,
                                926.4668]),
                            new MapPoint([421.6916,
                                542.5476,
                                2.9273,
                                485.6896])]),
                        new MapPath([new MapPoint([914.5906,
                                683.4281,
                                517.9498]),
                            new MapPoint([217.3547,
                                823.0456,
                                807.4245,
                                554.5657]),
                            new MapPoint([163.0592,
                                478.7856,
                                34.9613,
                                740.0685]),
                            new MapPoint([661.0132,
                                954.3684,
                                419.9357])])],
                    new SpatialReference(5,
                            "minima",
                            "et",
                            "ratione"),
                    new Point(-44.3137,
                            35.8188,
                            -82.5352,
                            89.6546,
                            12.9152,
                        new SpatialReference(9,
                                "ullam",
                                "non",
                                "harum"),
                            true,
                            true,
                            667.5933),
                        true,
                        true,
                        true),
                    9,
                    ["ea",
                        "consequatur",
                        "in"],
                    "voluptas",
                    new DateTime(2002, 1, 19, 5, 14, 36),
                    724.0160,
                    1,
                    "delectus",
                    3),
                "et");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([2,
                    5],
                    true,
                    835.8140,
                    169.1496,
                    "4.5.9.5",
                new Point(25.3954,
                        -27.4015,
                        40.6220,
                        -29.5752,
                        671.8219,
                    new SpatialReference(7,
                            "veniam",
                            "voluptatum",
                            "suscipit"),
                        true,
                        true,
                        361.5905),
                    7,
                    ["deleniti",
                        "fugit",
                        "praesentium"],
                    "autem",
                    new DateTime(2002, 4, 13, 11, 26, 34),
                    804.0765,
                    9,
                    "quia",
                    3),
                "tenetur");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([9,
                    4],
                    true,
                    28.7998,
                    564.3941,
                    "7.0.3.8",
                new Polyline([new MapPath([new MapPoint([965.6615,
                            17.3666]),
                        new MapPoint([759.2313,
                            984.3013,
                            86.7227,
                            227.6610]),
                        new MapPoint([655.1076,
                            442.0618,
                            539.5375,
                            710.3024]),
                        new MapPoint([326.2276,
                            523.6970,
                            851.5899])]),
                        new MapPath([new MapPoint([330.3580,
                                930.3685,
                                346.2160]),
                            new MapPoint([700.2621,
                                974.4106,
                                541.1245,
                                721.3579]),
                            new MapPoint([62.0701,
                                640.0395])])],
                    new SpatialReference(9,
                            "sit",
                            "dolorem",
                            "error"),
                        true,
                        true),
                    2,
                    ["inventore",
                        "eos",
                        "et",
                        "magni"],
                    "corrupti",
                    new DateTime(2009, 4, 6, 12, 21, 22),
                    758.7608,
                    6,
                    "et",
                    8),
                "possimus");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(PortalItemAccess.Org,
                    "minima",
                    "repellendus",
                    692.4566,
                    ["officia",
                        "quod"],
                    new DateTime(2012, 8, 13, 20, 17, 3),
                    "voluptatem",
                    "provident sed et reiciendis",
                new Extent(-37.9800,
                        -128.0128,
                        75.9041,
                        -33.5697,
                        90.0228,
                        478.8098,
                        910.4222,
                        591.6332,
                    new SpatialReference(2,
                            "quia",
                            "voluptatem",
                            "suscipit"),
                        true,
                        true),
                    ["est",
                        "sunt"],
                    "eaque",
                    new DateTime(2016, 11, 2, 17, 33, 22),
                    "avatar",
                    971.8491),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2001, 4, 19, 8, 50, 24),
                        "rerum",
                        "totam iusto minima"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "quia",
                    "quaerat",
                    656.7185,
                    ["atque",
                        "provident"],
                    new DateTime(2018, 3, 21, 4, 45, 52),
                    "non",
                    "et cupiditate temporibus sint",
                new Extent(-149.7950,
                        -10.4924,
                        45.9290,
                        -2.0273,
                        74.4484,
                        218.5584,
                        192.2846,
                        856.5653,
                    new SpatialReference(6,
                            "voluptatum",
                            "aut",
                            "vero"),
                        true,
                        true),
                    ["qui",
                        "id",
                        "eos"],
                    "consequatur",
                    new DateTime(2017, 5, 14, 2, 1, 4),
                    "token",
                    251.2784);
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.ColorBurn;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Jpg;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Nearest;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAll;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.U2;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2018, 2, 14, 12, 19, 14),
                    new DateTime(2002, 1, 7, 16, 19, 5));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("at",
                    "odio",
                new TimeExtent(new DateTime(2013, 10, 3, 11, 25, 13),
                        new DateTime(2012, 9, 17, 12, 18, 5)),
                new TimeInterval(TemporalTime.Weeks,
                        902.5679),
                    [new DateTime(2019, 4, 21, 2, 10, 30),
                        new DateTime(2011, 7, 22, 4, 5, 7),
                        new DateTime(2012, 10, 1, 1, 2, 25)],
                    "America/La_Paz",
                    "velit");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    722.6405);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(122.7554,
                    57.0567,
                    -23.3697,
                    32.7292,
                    397.3062,
                    929.9242,
                    87.0179,
                    877.6488,
                new SpatialReference(8,
                        "quo",
                        "atque",
                        "eaque"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(3,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "possimus",
                    "dignissimos sit officia tenetur eos",
                    6,
                    true,
                    true,
                    new { Value = "explicabo" },
                FieldValueType.Binary,
                new InheritedDomain("comment"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("autem",
                        "email",
                    OutputPixelType.S8,
                        "doloremque",
                        "token"),
                    [9,
                        6],
                Method.None,
                [new DimensionalDefinition("token",
                        true,
                        "createdAt"),
                new DimensionalDefinition("password",
                        true,
                        "password"),
                new DimensionalDefinition("token",
                        true,
                        "category"),
                new DimensionalDefinition("password",
                        true,
                        "token")],
                    [6,
                        1],
                Operation.Min,
                    "doloribus",
                    "ab",
                new Point(43.9004,
                        75.3395,
                        34.5581,
                        47.0826,
                        246.8136,
                    new SpatialReference(6,
                            "quis",
                            "veniam",
                            "molestiae"),
                        true,
                        true,
                        824.6605),
                    "1 = 1");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset([new DimensionalDefinition("password",
                        true,
                        "avatar")],
                new Point(179.1394,
                        -59.0333,
                        -56.2296,
                        -23.6544,
                        528.2804,
                    new SpatialReference(8,
                            "exercitationem",
                            "quos",
                            "et"),
                        true,
                        true,
                        958.4504));
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("eum voluptas dolores",
                    "quo",
                    ["ab",
                        "sint",
                        "id"],
                [new FieldInfo("category",
                        "et",
                        "omnis",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Sum),
                new FieldInfo("email",
                        "iusto",
                        "qui",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDate),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("category",
                        "ut",
                        "beatae",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.LongDateShortTime),
                        true,
                        true,
                    StatisticType.Sum)],
                [new RelationshipPopupContent("dolores molestiae minus",
                        "sint eum et est",
                        4,
                        "vel",
                    [new RelatedRecordsInfoFieldOrder("labore",
                        OrderBy.Desc)],
                        9),
                new AttachmentsPopupContent("distinctio expedita sed",
                        "dolorum quos libero voluptas consectetur et similique",
                        AttachmentsPopupContentDisplayType.Auto)],
                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "phone",
                        "magni laboriosam veritatis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "group",
                        "ipsa et exercitationem",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                        "status",
                        "occaecati atque excepturi",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("qui incidunt enim",
                        "258f98b1-723a-63ae-c546-9137c075bcac",
                        () => { Console.WriteLine("molestias"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "status",
                        "praesentium"),
                new ActionToggle("temporibus nostrum in",
                        "985c1fbb-3ef5-065a-ff3b-8d22e8515a10",
                        () => { Console.WriteLine("fugit"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "comment",
                        "harum")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("ut",
                    "id",
                OutputPixelType.Unknown,
                    "tempora",
                    "group");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2018, 7, 27, 5, 37, 0),
                    new DateTime(2018, 8, 21, 6, 6, 50));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
