@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(243, 113, 10),
                                new MapColor(103, 64, 232)),
                            true,
                            true,
                            [2,
                            6,
                            3],
                            4,
                            7,
                            StretchType.HistogramEqualization,
                            [new RasterBandStatistics(912.1738,
                                6,
                                966.5224,
                                996.2563,
                                313.6626,
                                522.3060,
                                361.6120,
                                535.0742),
                            new RasterBandStatistics(870.7972,
                                9,
                                367.3471,
                                691.9904,
                                666.9733,
                                267.9252,
                                469.4189,
                                311.1118),
                            new RasterBandStatistics(732.5948,
                                5,
                                166.1352,
                                683.0814,
                                60.2321,
                                829.3873,
                                678.8328,
                                183.4663)],
                            true,
                            6))"
                        BandIds="@([1,
                            6,
                            1])"
                        BlendMode="@(BlendMode.SourceIn)"
                        CompressionQuality="@(531.5555)"
                        CompressionTolerance="@(8.7297)"
                        Copyright="@("impedit")"
                        DefinitionExpression="@("perspiciatis")"
                        Effect="@(new Effect("expedita",
                            48136508.8081))"
                        Format="@(ImageFormat.Bsq)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(8)"
                        ImageMaxWidth="@(1)"
                        Interpolation="@(Interpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        MaxScale="@(25357523.4428)"
                        MinScale="@(21066.5878)"
                        NoData="@(new NoData([7,
                            4,
                            3]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAll)"
                        ObjectIdField="@("quos")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.U32)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(567.4246)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(810.2038,
                                TileInfoFormat.Png24,
                                true,
                            [new LOD(2,
                                    "nihil",
                                    53.2443,
                                    35762078.1718),
                            new LOD(4,
                                    "harum",
                                    32.2384,
                                    15369646.9534),
                            new LOD(9,
                                    "commodi",
                                    93.0076,
                                    25502914.6840)],
                            new Point(-160.1687,
                                    53.3742,
                                    26.4908,
                                    -49.0622,
                                    179.1137,
                                new SpatialReference(1,
                                        "qui",
                                        "commodi",
                                        "ut"),
                                    true,
                                    true,
                                    896.1949),
                                [3,
                                    1,
                                    4],
                            new SpatialReference(9,
                                    "porro",
                                    "amet",
                                    "cumque")))"
                        Title="@("soluta autem voluptatibus")"
                        Opacity="@(0.2479)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(89.1718,
                                -150.1478,
                                -66.5309,
                                -31.9490,
                                321.8274,
                                240.1884,
                                956.4648,
                                46.0192,
                            new SpatialReference(3,
                                    "rem",
                                    "corrupti",
                                    "voluptas"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("aspernatur",
                                    "createdAt",
                                OutputPixelType.S16,
                                    "molestiae",
                                    "id"),
                                [5,
                                    2,
                                    4,
                                    3],
                            Method.Viewpoint,
                            [new DimensionalDefinition("id",
                                    true,
                                    "createdAt"),
                            new DimensionalDefinition("group",
                                    true,
                                    "category"),
                            new DimensionalDefinition("id",
                                    true,
                                    "updatedAt"),
                            new DimensionalDefinition("status",
                                    true,
                                    "group")],
                                [1,
                                    3,
                                    9,
                                    7],
                            Operation.Blend,
                                "quis",
                                "omnis",
                            new Point(100.6817,
                                    12.3257,
                                    167.9230,
                                    51.8728,
                                    617.6673,
                                new SpatialReference(5,
                                        "voluptas",
                                        "repudiandae",
                                        "iure"),
                                    true,
                                    true,
                                    114.8331),
                                "ObjectID = 1"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(258.6044)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("debitis")"
                            EndField="@("quia")"
                            Stops="@([new DateTime(2017, 11, 21, 11, 48, 16),
                                new DateTime(2003, 4, 15, 9, 14, 43)])"
                            TimeZone="@("Asia/Dhaka")"
                            TrackIdField="@("deserunt")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(676.2525)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2001, 8, 9, 18, 12, 46))"
                                End="@(new DateTime(2021, 5, 24, 8, 53, 1))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2018, 7, 26, 4, 39, 50))"
                            End="@(new DateTime(2002, 3, 17, 22, 0, 40))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("eum")"
                            FunctionName="@("group")"
                            OutputPixelType="@(OutputPixelType.U1)"
                            RasterFunctionDefinition="@("et")"
                            VariableName="@("phone")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("impedit quia cumque")"
                            StringContent="@("cumque")"
                            OutFields="@(["enim",
                                "est",
                                "amet",
                                "cum"])"
                            FieldInfos="@([new FieldInfo("comment",
                                    "quo",
                                    "odit",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongDateLongTime24),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("category",
                                    "voluptatum",
                                    "nemo",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("avatar",
                                    "dolorem",
                                    "ullam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDateLe),
                                    true,
                                    true,
                                StatisticType.Avg),
                            new FieldInfo("status",
                                    "delectus",
                                    "enim",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new AttachmentsPopupContent("ut quas natus",
                                    "hic nemo ut ea",
                                    AttachmentsPopupContentDisplayType.Preview),
                            new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                        "praesentium",
                                        "saepe velit rerum")),
                            new MediaPopupContent("qui dolorum laborum",
                                    "qui consequuntur repellat voluptas",
                                [new ColumnChartMediaInfo("molestiae facere esse",
                                        "sit",
                                        "itaque ipsum nemo",
                                    new ChartMediaInfoValue(["voluptates",
                                            "non"],
                                            "et",
                                            "ab",
                                        [new ChartMediaInfoValueSeries("password",
                                                "explicabo",
                                                567.9107),
                                        new ChartMediaInfoValueSeries("comment",
                                                "rerum",
                                                623.3874),
                                        new ChartMediaInfoValueSeries("id",
                                                "temporibus",
                                                498.7597),
                                        new ChartMediaInfoValueSeries("updatedAt",
                                                "et",
                                                471.3870)],
                                        [new MapColor(95, 174, 100),
                                        new MapColor(52, 146, 204),
                                        new MapColor(145, 222, 197),
                                        new MapColor(222, 208, 130)])),
                                new PieChartMediaInfo("voluptatem aut harum",
                                        "beatae",
                                        "optio suscipit rerum",
                                    new ChartMediaInfoValue(["magni",
                                            "libero"],
                                            "non",
                                            "placeat",
                                        [new ChartMediaInfoValueSeries("phone",
                                                "quis",
                                                28.9556),
                                        new ChartMediaInfoValueSeries("phone",
                                                "illo",
                                                320.5367),
                                        new ChartMediaInfoValueSeries("token",
                                                "ab",
                                                699.7984),
                                        new ChartMediaInfoValueSeries("avatar",
                                                "ipsam",
                                                82.6781)],
                                        [new MapColor(24, 148, 197),
                                        new MapColor(221, 12, 151),
                                        new MapColor(132, 244, 171),
                                        new MapColor(186, 253, 247)]))],
                                    9)])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "title",
                                    "est eum praesentium",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "email",
                                    "quisquam reprehenderit atque",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("quo officiis non",
                                    "d075362e-41df-ce97-cb24-f9aa7ffe3786",
                                    () => { Console.WriteLine("sint"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "comment",
                                    "expedita"),
                            new ActionToggle("illum officia accusamus",
                                    "ff28ab8c-a0c6-a818-f44c-721c64d6fab4",
                                    () => { Console.WriteLine("placeat"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "updatedAt",
                                    "laboriosam")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([208.1779,
                                        66.4216,
                                        861.2855]),
                                    new MapPoint([427.7924,
                                        833.6833])])],
                                new SpatialReference(8,
                                        "quam",
                                        "et",
                                        "in"),
                                new Point(22.2494,
                                        -31.8341,
                                        -63.4296,
                                        -63.6489,
                                        696.6302,
                                    new SpatialReference(3,
                                            "ut",
                                            "et",
                                            "quia"),
                                        true,
                                        true,
                                        594.4842),
                                    true,
                                    true,
                                    true))"
                            SubsetDefinitions="@([new DimensionalDefinition("updatedAt",
                                    true,
                                    "email"),
                            new DimensionalDefinition("createdAt",
                                    true,
                                    "email")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("password")"
                            Alias="@("sint")"
                            Description="@("veritatis et enim omnis occaecati")"
                            Length="@(6)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "voluptas" })"
                            ValueType="@(FieldValueType.PercentageOrRatio)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(9,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["comment",
                    "title"],
                new Point(-154.7373,
                        60.9430,
                        -28.0507,
                        -72.6685,
                        621.3989,
                    new SpatialReference(7,
                            "dolorum",
                            "eos",
                            "doloribus"),
                        true,
                        true,
                        469.2282),
                    9,
                new SpatialReference(7,
                        "dolorum",
                        "aspernatur",
                        "sequi")),
                "occaecati");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Point(20.6299,
                        16.3552,
                        -126.9201,
                        -11.3317,
                        23.0773,
                    new SpatialReference(8,
                            "voluptatem",
                            "velit",
                            "ut"),
                        true,
                        true,
                        926.6384),
                new MosaicRule(true,
                    new RasterFunction("provident",
                            "id",
                        OutputPixelType.U16,
                            "est",
                            "password"),
                        [9,
                            2],
                    Method.Attribute,
                    [new DimensionalDefinition("comment",
                            true,
                            "name"),
                    new DimensionalDefinition("name",
                            true,
                            "token")],
                        [7,
                            2,
                            8,
                            5],
                    Operation.Mean,
                        "natus",
                        "eos",
                    new Point(-156.0984,
                            0.0488,
                            134.6640,
                            82.7239,
                            937.0032,
                        new SpatialReference(4,
                                "sapiente",
                                "voluptate",
                                "dolores"),
                            true,
                            true,
                            470.4295),
                        "Street = '123 Main St.'"),
                new PixelSize(-149.9751,
                        57.0583,
                    new PixelSizeSpatialReference(4,
                            643.5017)),
                new RasterFunction("et",
                        "category",
                    OutputPixelType.U32,
                        "praesentium",
                        "status"),
                new TimeExtent(new DateTime(2022, 4, 25, 4, 53, 52),
                        new DateTime(2021, 6, 2, 7, 13, 2))),
                "non");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(112.4834,
                        -67.7653,
                        94.6725,
                        64.0566,
                        662.0734,
                    new SpatialReference(8,
                            "laudantium",
                            "occaecati",
                            "quos"),
                        true,
                        true,
                        581.8533),
                new Point(68.5319,
                        -75.8156,
                        -117.3606,
                        -86.1731,
                        935.4731,
                    new SpatialReference(5,
                            "sit",
                            "praesentium",
                            "magni"),
                        true,
                        true,
                        11.5692),
                new Point(-46.7304,
                        -19.3808,
                        -95.3035,
                        51.9605,
                        851.4876,
                    new SpatialReference(9,
                            "nulla",
                            "nihil",
                            "molestiae"),
                        true,
                        true,
                        248.6830)],
                    6),
                "dolorem");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(26.8627,
                        -80.5434,
                        92.1048,
                        5.2821,
                        924.8158,
                    new SpatialReference(3,
                            "nihil",
                            "ut",
                            "iste"),
                        true,
                        true,
                        668.3836),
                new MosaicRule(true,
                    new RasterFunction("aut",
                            "name",
                        OutputPixelType.S8,
                            "deleniti",
                            "comment"),
                        [6,
                            6,
                            5],
                    Method.Attribute,
                    [new DimensionalDefinition("title",
                            true,
                            "password"),
                    new DimensionalDefinition("avatar",
                            true,
                            "comment"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "password"),
                    new DimensionalDefinition("id",
                            true,
                            "id")],
                        [4,
                            5,
                            1,
                            5],
                    Operation.Mean,
                        "maiores",
                        "qui",
                    new Point(-179.9218,
                            -73.2646,
                            17.4948,
                            17.5239,
                            996.2286,
                        new SpatialReference(9,
                                "quam",
                                "esse",
                                "tempora"),
                            true,
                            true,
                            635.2221),
                        "City = 'Toronto'"),
                new PixelSize(-150.4047,
                        65.2123,
                    new PixelSizeSpatialReference(4,
                            600.8357)),
                new RasterFunction("rerum",
                        "title",
                    OutputPixelType.Unknown,
                        "et",
                        "name"),
                new TimeExtent(new DateTime(2022, 2, 9, 7, 17, 23),
                        new DateTime(2011, 11, 17, 0, 50, 5))),
                "quae");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["sit",
                    "voluptatem",
                    "quidem",
                    "nihil"],
                    ["createdAt",
                        "avatar",
                        "createdAt",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-72.3680,
                    -120.9465,
                    -50.9410,
                    -50.1526,
                    541.5922,
                    152.9484,
                    413.6919,
                    951.1032,
                new SpatialReference(4,
                        "vel",
                        "voluptatum",
                        "debitis"),
                    true,
                    true),
                2,
                3,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(81.8707,
                        -77.3653,
                        -134.0030,
                        -44.3850,
                        881.3164,
                    new SpatialReference(2,
                            "et",
                            "repellendus",
                            "id"),
                        true,
                        true,
                        388.0096),
                    4,
                    [4,
                        2,
                        8,
                        6],
                new Point(161.0965,
                        25.9985,
                        -76.4490,
                        -72.6893,
                        577.1379,
                    new SpatialReference(2,
                            "voluptatum",
                            "provident",
                            "distinctio"),
                        true,
                        true,
                        585.6400),
                    "Name = 'John Doe'"),
                "perferendis");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("quaerat",
                    "group",
                OutputPixelType.S32,
                    "labore",
                    "phone"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(3,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(1,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(6,
                    "cumque"),
                "voluptatem");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Polygon([new MapPath([new MapPoint([494.8141,
                            147.9363,
                            603.5336]),
                        new MapPoint([704.1646,
                            5.4558,
                            0.5441,
                            554.5795]),
                        new MapPoint([2.8534,
                            308.2013,
                            613.9200]),
                        new MapPoint([262.9696,
                            582.3718,
                            701.7774,
                            722.3221])]),
                        new MapPath([new MapPoint([94.4601,
                                741.8043,
                                597.1776]),
                            new MapPoint([464.8931,
                                876.5542,
                                502.1647,
                                331.8660]),
                            new MapPoint([990.9011,
                                8.7093,
                                496.9571,
                                77.2473])]),
                        new MapPath([new MapPoint([847.9206,
                                72.8619]),
                            new MapPoint([479.7573,
                                657.8874]),
                            new MapPoint([930.5318,
                                672.0555,
                                241.1097]),
                            new MapPoint([984.8733,
                                659.3797,
                                934.0577,
                                819.8058])]),
                        new MapPath([new MapPoint([432.7884,
                                98.0638,
                                941.6857,
                                446.4543]),
                            new MapPoint([714.7468,
                                442.6940,
                                299.7013])])],
                    new SpatialReference(3,
                            "qui",
                            "velit",
                            "aut"),
                    new Point(169.8129,
                            -79.7466,
                            135.9660,
                            13.1825,
                            751.3256,
                        new SpatialReference(5,
                                "perferendis",
                                "voluptas",
                                "ipsum"),
                            true,
                            true,
                            853.3025),
                        true,
                        true,
                        true),
                Interpolation.Majority,
                [new Point(-123.1552,
                        -58.1201,
                        -172.2319,
                        2.0323,
                        772.6477,
                    new SpatialReference(4,
                            "delectus",
                            "ut",
                            "aut"),
                        true,
                        true,
                        135.8562),
                new Point(-63.5548,
                        51.6818,
                        -49.5897,
                        -68.6559,
                        451.2786,
                    new SpatialReference(5,
                            "veniam",
                            "quod",
                            "dolor"),
                        true,
                        true,
                        35.5722),
                new Point(128.6751,
                        -22.4402,
                        11.7296,
                        -32.0243,
                        704.1783,
                    new SpatialReference(1,
                            "voluptatum",
                            "deserunt",
                            "quas"),
                        true,
                        true,
                        530.4649)],
                new MosaicRule(true,
                    new RasterFunction("cupiditate",
                            "email",
                        OutputPixelType.S16,
                            "molestiae",
                            "title"),
                        [8,
                            6,
                            3],
                    Method.Attribute,
                    [new DimensionalDefinition("phone",
                            true,
                            "status"),
                    new DimensionalDefinition("comment",
                            true,
                            "comment")],
                        [2,
                            4],
                    Operation.Blend,
                        "ut",
                        "dolore",
                    new Point(169.2287,
                            48.2375,
                            -148.9049,
                            -66.7172,
                            155.2556,
                        new SpatialReference(7,
                                "laboriosam",
                                "soluta",
                                "facilis"),
                            true,
                            true,
                            858.3594),
                        "ObjectID = 1"),
                    ["laudantium",
                        "praesentium",
                        "eum"],
                new PixelSize(-149.0409,
                        35.0124,
                    new PixelSizeSpatialReference(8,
                            74.0562)),
                    true,
                    7,
                    625.4893,
                    1,
                new TimeExtent(new DateTime(2023, 5, 22, 10, 25, 4),
                        new DateTime(2019, 3, 9, 22, 23, 58))),
                "aliquam");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Polygon([new MapPath([new MapPoint([186.3742,
                            575.2547]),
                        new MapPoint([149.1029,
                            529.7501,
                            756.9211,
                            565.7802]),
                        new MapPoint([735.4299,
                            205.1791,
                            828.8820]),
                        new MapPoint([679.4648,
                            276.7803])]),
                        new MapPath([new MapPoint([344.4297,
                                4.0871]),
                            new MapPoint([585.0480,
                                354.3806,
                                461.5937,
                                37.3010]),
                            new MapPoint([437.6987,
                                514.0277,
                                457.1710,
                                638.3330]),
                            new MapPoint([771.3811,
                                543.6971,
                                992.6996,
                                212.2671])]),
                        new MapPath([new MapPoint([180.6919,
                                648.5811]),
                            new MapPoint([235.3856,
                                975.5120]),
                            new MapPoint([867.1154,
                                80.0411,
                                982.0258]),
                            new MapPoint([280.3959,
                                380.0483,
                                919.9181])]),
                        new MapPath([new MapPoint([934.5390,
                                567.3687,
                                591.5920,
                                322.0373]),
                            new MapPoint([715.3032,
                                350.0497,
                                513.9540]),
                            new MapPoint([904.3048,
                                332.6770]),
                            new MapPoint([492.0279,
                                19.8787,
                                496.2322])])],
                    new SpatialReference(9,
                            "ab",
                            "culpa",
                            "rerum"),
                    new Point(-153.6120,
                            -23.8920,
                            81.0731,
                            18.3338,
                            988.5010,
                        new SpatialReference(8,
                                "consequatur",
                                "vitae",
                                "omnis"),
                            true,
                            true,
                            688.5953),
                        true,
                        true,
                        true),
                    5,
                new MosaicRule(true,
                    new RasterFunction("debitis",
                            "avatar",
                        OutputPixelType.U4,
                            "dolore",
                            "phone"),
                        [9,
                            8],
                    Method.Viewpoint,
                    [new DimensionalDefinition("group",
                            true,
                            "avatar"),
                    new DimensionalDefinition("category",
                            true,
                            "phone")],
                        [6,
                            8,
                            2],
                    Operation.Mean,
                        "ullam",
                        "earum",
                    new Point(-85.3781,
                            -89.9359,
                            14.8768,
                            -51.8204,
                            152.2557,
                        new SpatialReference(1,
                                "a",
                                "et",
                                "distinctio"),
                            true,
                            true,
                            507.1870),
                        "ObjectID = 1"),
                new PixelSize(80.0993,
                        27.9046,
                    new PixelSizeSpatialReference(6,
                            528.7766)),
                    true,
                new RasterFunction("dolorum",
                        "category",
                    OutputPixelType.S8,
                        "quia",
                        "group"),
                new RasterFunction("ipsum",
                        "avatar",
                    OutputPixelType.U1,
                        "quia",
                        "status"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2019, 9, 21, 16, 47, 22),
                        new DateTime(2007, 11, 5, 13, 40, 40))),
                "qui");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    282.8016,
                new Point(-173.6496,
                        27.0334,
                        127.0801,
                        24.5752,
                        114.5613,
                    new SpatialReference(9,
                            "incidunt",
                            "ea",
                            "fuga"),
                        true,
                        true,
                        250.4218),
                new SpatialReference(8,
                        "ut",
                        "omnis",
                        "numquam"),
                    3),
                "aut");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Extent(173.0521,
                        79.9996,
                        17.8748,
                        11.7821,
                        762.1722,
                        316.6106,
                        492.3756,
                        294.0722,
                    new SpatialReference(2,
                            "animi",
                            "eum",
                            "magni"),
                        true,
                        true),
                new Extent(-28.1242,
                        -98.6583,
                        74.4331,
                        83.5585,
                        459.1042,
                        554.3530,
                        159.7509,
                        352.0720,
                    new SpatialReference(7,
                            "aut",
                            "dignissimos",
                            "a"),
                        true,
                        true)],
                new SpatialReference(4,
                        "ullam",
                        "eaque",
                        "consequatur"),
                    [7,
                        1]),
                "consequatur");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Extent(-114.2850,
                        77.3174,
                        -21.2666,
                        -8.9998,
                        759.9981,
                        257.8792,
                        897.6158,
                        695.3195,
                    new SpatialReference(7,
                            "quia",
                            "rerum",
                            "est"),
                        true,
                        true),
                    2,
                    true),
                "mollitia");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("quia",
                            "category",
                        OutputPixelType.U1,
                            "id",
                            "group"),
                        [5,
                            5,
                            3,
                            9],
                    Method.Viewpoint,
                    [new DimensionalDefinition("comment",
                            true,
                            "phone"),
                    new DimensionalDefinition("comment",
                            true,
                            "email")],
                        [7,
                            7,
                            2],
                    Operation.Last,
                        "omnis",
                        "qui",
                    new Point(-64.1871,
                            51.5597,
                            36.2399,
                            -27.1701,
                            127.6419,
                        new SpatialReference(4,
                                "ad",
                                "facere",
                                "repellendus"),
                            true,
                            true,
                            269.5999),
                        "1 = 1"),
                new PixelSize(5.1721,
                        -36.8289,
                    new PixelSizeSpatialReference(7,
                            206.9669)),
                ImageAreaUnit.SquareMillimeters,
                new Point(84.9041,
                        13.6008,
                        139.0010,
                        55.9768,
                        886.5399,
                    new SpatialReference(2,
                            "omnis",
                            "et",
                            "laudantium"),
                        true,
                        true,
                        259.2450),
                    true,
                LengthUnit.Kilometers),
                "aut");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Extent(172.5023,
                        -125.4114,
                        82.2506,
                        76.9904,
                        498.1666,
                        102.2041,
                        890.0344,
                        992.4718,
                    new SpatialReference(7,
                            "necessitatibus",
                            "ex",
                            "et"),
                        true,
                        true),
                    8),
                "delectus");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("labore",
                            "status",
                        OutputPixelType.U1,
                            "error",
                            "token"),
                        [6,
                            5,
                            3],
                    Method.Viewpoint,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "title"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "comment"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "createdAt")],
                        [6,
                            1,
                            4],
                    Operation.Max,
                        "voluptas",
                        "aut",
                    new Point(-12.2200,
                            -68.2258,
                            69.9589,
                            5.6953,
                            229.4107,
                        new SpatialReference(3,
                                "modi",
                                "corporis",
                                "impedit"),
                            true,
                            true,
                            95.0904),
                        "Street = '123 Main St.'"),
                new PixelSize(172.0574,
                        -38.2405,
                    new PixelSizeSpatialReference(8,
                            14.5580)),
                AngularUnit.Degrees,
                new Point(101.5604,
                        30.8227,
                        -18.9700,
                        1.1310,
                        527.4091,
                    new SpatialReference(9,
                            "id",
                            "sed",
                            "quia"),
                        true,
                        true,
                        779.0227),
                    true,
                LengthUnit.UsFeet,
                new Point(-153.3710,
                        -14.3252,
                        -117.1709,
                        89.1959,
                        756.2090,
                    new SpatialReference(7,
                            "quasi",
                            "sint",
                            "inventore"),
                        true,
                        true,
                        683.2294)),
                "incidunt");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("iure",
                            "email",
                        OutputPixelType.C128,
                            "qui",
                            "createdAt"),
                        [1,
                            6,
                            3],
                    Method.Northwest,
                    [new DimensionalDefinition("title",
                            true,
                            "name"),
                    new DimensionalDefinition("category",
                            true,
                            "token")],
                        [8,
                            8,
                            3,
                            1],
                    Operation.Mean,
                        "numquam",
                        "mollitia",
                    new Point(150.6039,
                            43.4604,
                            -14.5419,
                            30.3554,
                            426.4393,
                        new SpatialReference(6,
                                "qui",
                                "magnam",
                                "expedita"),
                            true,
                            true,
                            555.7214),
                        "ObjectID = 1"),
                new PixelSize(107.9748,
                        80.1186,
                    new PixelSizeSpatialReference(2,
                            575.7384)),
                new Point(139.5276,
                        1.1857,
                        160.2205,
                        0.5912,
                        815.6939,
                    new SpatialReference(8,
                            "omnis",
                            "explicabo",
                            "et"),
                        true,
                        true,
                        945.2902),
                LengthUnit.Millimeters,
                OperationType.TopAndTopShadow,
                new Point(44.7833,
                        62.6143,
                        -84.9396,
                        22.3010,
                        177.3727,
                    new SpatialReference(2,
                            "praesentium",
                            "error",
                            "veritatis"),
                        true,
                        true,
                        799.5853)),
                "voluptatem");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polyline([new MapPath([new MapPoint([527.3188,
                            646.3468,
                            6.2336,
                            540.3165]),
                        new MapPoint([529.5587,
                            119.2235,
                            169.4696])]),
                        new MapPath([new MapPoint([235.9850,
                                561.0383]),
                            new MapPoint([845.9061,
                                856.7881,
                                896.6821]),
                            new MapPoint([100.7903,
                                995.2990]),
                            new MapPoint([217.8126,
                                605.9016,
                                916.6642])]),
                        new MapPath([new MapPoint([403.6100,
                                179.6349]),
                            new MapPoint([82.4360,
                                684.9624,
                                524.4087])])],
                    new SpatialReference(7,
                            "natus",
                            "ut",
                            "non"),
                        true,
                        true),
                    1),
                "doloremque");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("numquam",
                            "updatedAt",
                        OutputPixelType.U2,
                            "quia",
                            "password"),
                        [4,
                            9,
                            7,
                            9],
                    Method.LockRaster,
                    [new DimensionalDefinition("avatar",
                            true,
                            "category"),
                    new DimensionalDefinition("phone",
                            true,
                            "category"),
                    new DimensionalDefinition("id",
                            true,
                            "email")],
                        [9,
                            9,
                            5,
                            1],
                    Operation.Last,
                        "cum",
                        "repellat",
                    new Point(109.1198,
                            -13.7875,
                            154.1546,
                            -33.2293,
                            494.8477,
                        new SpatialReference(8,
                                "explicabo",
                                "consequatur",
                                "temporibus"),
                            true,
                            true,
                            234.9057),
                        "Province = 'Ontario'"),
                new PixelSize(-124.3614,
                        51.5411,
                    new PixelSizeSpatialReference(1,
                            872.7114)),
                new Polygon([new MapPath([new MapPoint([117.8448,
                            391.0453,
                            177.9083]),
                        new MapPoint([104.0493,
                            937.0175,
                            89.8816,
                            708.5350]),
                        new MapPoint([965.2881,
                            637.7476])]),
                        new MapPath([new MapPoint([469.4483,
                                284.9303]),
                            new MapPoint([842.0527,
                                485.1092,
                                397.1885]),
                            new MapPoint([370.7283,
                                389.7395,
                                509.9760,
                                372.3144])])],
                    new SpatialReference(9,
                            "id",
                            "ut",
                            "necessitatibus"),
                    new Point(117.0175,
                            -20.2158,
                            -161.1071,
                            34.9389,
                            717.0063,
                        new SpatialReference(6,
                                "alias",
                                "unde",
                                "tempora"),
                            true,
                            true,
                            133.7909),
                        true,
                        true,
                        true),
                    true),
                "omnis");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(3,
                        "natus",
                        "illo",
                        "qui")),
                "voluptas");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Extent(5.0114,
                        -46.0807,
                        66.5527,
                        6.9601,
                        118.6598,
                        463.5440,
                        902.6579,
                        420.6802,
                    new SpatialReference(6,
                            "dolor",
                            "asperiores",
                            "sint"),
                        true,
                        true),
                    [2,
                        2,
                        3],
                SpatialRelationship.Intersects,
                new TimeExtent(new DateTime(2000, 9, 16, 20, 8, 24),
                        new DateTime(2014, 7, 5, 6, 1, 29)),
                    "Country = 'Canada'"),
                "magnam");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([3,
                    8,
                    9,
                    6],
                    true,
                    700.8512,
                    433.5465,
                    "1.3.9.7",
                new Extent(-56.2817,
                        72.8573,
                        16.2745,
                        -76.4639,
                        229.5176,
                        853.4197,
                        871.8916,
                        736.5174,
                    new SpatialReference(2,
                            "et",
                            "perferendis",
                            "inventore"),
                        true,
                        true),
                    7,
                    ["aut",
                        "eligendi"],
                    "iure",
                    new DateTime(2022, 4, 11, 12, 58, 16),
                    475.3092,
                    4,
                    "officia",
                    9),
                "accusantium");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([5,
                    6],
                    true,
                    710.7091,
                    206.5385,
                    "8.4.6.2",
                new Polyline([new MapPath([new MapPoint([51.6012,
                            550.0838]),
                        new MapPoint([349.7593,
                            793.3858,
                            294.4172])]),
                        new MapPath([new MapPoint([768.2701,
                                615.8349,
                                889.7814,
                                208.2196]),
                            new MapPoint([181.3108,
                                408.2039,
                                248.1970,
                                901.1450])]),
                        new MapPath([new MapPoint([238.0056,
                                202.0294,
                                612.6548]),
                            new MapPoint([11.2751,
                                199.0993,
                                565.1222,
                                933.5290]),
                            new MapPoint([6.3970,
                                785.7820,
                                961.1004,
                                196.8461])]),
                        new MapPath([new MapPoint([921.4196,
                                636.4887]),
                            new MapPoint([487.0586,
                                489.2628,
                                196.5032]),
                            new MapPoint([982.8205,
                                995.5347]),
                            new MapPoint([997.7420,
                                57.5226])])],
                    new SpatialReference(4,
                            "modi",
                            "dolorem",
                            "et"),
                        true,
                        true),
                    9,
                    ["voluptatem",
                        "velit"],
                    "sit",
                    new DateTime(2007, 10, 4, 5, 23, 57),
                    168.7408,
                    3,
                    "voluptatem",
                    4),
                "consectetur");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([9,
                    2,
                    5,
                    9],
                    true,
                    131.8273,
                    991.7645,
                    "5.1.7.5",
                new Point(133.0385,
                        27.2087,
                        -78.0950,
                        37.1405,
                        332.7645,
                    new SpatialReference(2,
                            "eveniet",
                            "cumque",
                            "consequatur"),
                        true,
                        true,
                        114.4876),
                    3,
                    ["ex",
                        "aspernatur",
                        "ad",
                        "perferendis"],
                    "sit",
                    new DateTime(2015, 3, 16, 6, 20, 18),
                    551.0099,
                    8,
                    "et",
                    7),
                "a");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2017, 11, 12, 12, 19, 15),
                        "fugit",
                        "doloremque porro aspernatur"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Xor;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Jpg;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Bilinear;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAny;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.S8;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2020, 8, 11, 19, 58, 38),
                    new DateTime(2002, 4, 26, 15, 14, 32));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("dignissimos",
                    "modi",
                new TimeExtent(new DateTime(2019, 3, 16, 12, 37, 16),
                        new DateTime(2002, 8, 13, 13, 56, 42)),
                new TimeInterval(TemporalTime.Seconds,
                        838.4431),
                    [new DateTime(2014, 11, 21, 1, 35, 4),
                        new DateTime(2003, 5, 23, 7, 55, 5),
                        new DateTime(2013, 10, 3, 7, 31, 21)],
                    "Australia/Darwin",
                    "autem");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Milliseconds,
                    87.4147);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(56.5255,
                    -84.9719,
                    37.3199,
                    -27.6643,
                    270.7851,
                    393.7274,
                    370.1490,
                    584.1617,
                new SpatialReference(1,
                        "vel",
                        "unde",
                        "voluptas"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(8,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "password",
                    "nihil",
                    "consequatur sed numquam minima dolores",
                    5,
                    true,
                    true,
                    new { Value = "totam" },
                FieldValueType.Description,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "email",
                    "quia",
                    "quod provident sint tempora et voluptatum soluta",
                    3,
                    true,
                    true,
                    new { Value = "repellat" },
                FieldValueType.Binary,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "createdAt",
                    "quia",
                    "voluptas odio exercitationem ad temporibus",
                    5,
                    true,
                    true,
                    new { Value = "quia" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "password",
                    "quas",
                    "ut quia ducimus iusto ut",
                    5,
                    true,
                    true,
                    new { Value = "omnis" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>())];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("ipsa",
                        "title",
                    OutputPixelType.U8,
                        "aut",
                        "phone"),
                    [2,
                        6,
                        6],
                Method.LockRaster,
                [new DimensionalDefinition("category",
                        true,
                        "phone"),
                new DimensionalDefinition("title",
                        true,
                        "category"),
                new DimensionalDefinition("category",
                        true,
                        "token")],
                    [5,
                        7,
                        5],
                Operation.Max,
                    "iure",
                    "est",
                new Point(-79.7102,
                        -17.1805,
                        76.7136,
                        -83.6994,
                        218.1176,
                    new SpatialReference(7,
                            "quis",
                            "quis",
                            "debitis"),
                        true,
                        true,
                        900.5206),
                    "Age > 21");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([452.2630,
                            843.1009]),
                        new MapPoint([616.4984,
                            138.6972])]),
                        new MapPath([new MapPoint([700.4593,
                                423.6127,
                                43.1685,
                                4.5080]),
                            new MapPoint([815.0293,
                                686.4632,
                                649.3473,
                                864.5969]),
                            new MapPoint([810.5536,
                                831.0453,
                                825.9473])]),
                        new MapPath([new MapPoint([402.5726,
                                180.1835]),
                            new MapPoint([699.5275,
                                75.4241]),
                            new MapPoint([921.7572,
                                685.2210,
                                399.4152])])],
                    new SpatialReference(6,
                            "ad",
                            "voluptatem",
                            "et"),
                        true,
                        true),
                [new DimensionalDefinition("token",
                        true,
                        "id")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("iusto et numquam",
                    "cumque",
                    ["voluptatibus",
                        "minus",
                        "a"],
                [new FieldInfo("status",
                        "unde",
                        "voluptatem",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.Year),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("avatar",
                        "qui",
                        "velit",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(8,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Sum)],
                [new AttachmentsPopupContent("nihil iure debitis",
                        "quam dicta qui et rem officiis autem",
                        AttachmentsPopupContentDisplayType.Preview),
                new AttachmentsPopupContent("quia non repudiandae",
                        "ab sed excepturi saepe ut illum ea",
                        AttachmentsPopupContentDisplayType.Preview),
                new RelationshipPopupContent("est impedit quia",
                        "nobis necessitatibus et in consequatur laboriosam provident",
                        6,
                        "voluptatem",
                    [new RelatedRecordsInfoFieldOrder("accusantium",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("unde",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("enim",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("illum",
                        OrderBy.Desc)],
                        5)],
                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "updatedAt",
                        "saepe aut quia",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "updatedAt",
                        "quae sit tempora",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("dolore provident exercitationem",
                        "1c5196df-85e0-a26e-7889-933b1c3ade7d",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "category",
                        "iste"),
                new ActionButton("id in tenetur",
                        "https://picsum.photos/640/480/?image=377",
                        "632f83a1-4bdf-c7ad-9510-4ba1c47387de",
                        () => { Console.WriteLine("minus"); return Task.CompletedTask; },
                        "email",
                        true,
                        true,
                        true,
                        "ipsum"),
                new ActionButton("quasi ducimus laboriosam",
                        "https://picsum.photos/640/480/?image=1038",
                        "3dcd0ac8-b61f-5cb8-d7d7-f7b6f488e1f7",
                        () => { Console.WriteLine("esse"); return Task.CompletedTask; },
                        "comment",
                        true,
                        true,
                        true,
                        "velit"),
                new ActionToggle("ducimus recusandae dolorum",
                        "b026c4ac-19a0-531c-a3a2-308367202c6b",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "token",
                        "et")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("veniam",
                    "title",
                OutputPixelType.C64,
                    "est",
                    "updatedAt");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2019, 1, 17, 4, 57, 55),
                    new DateTime(2019, 3, 22, 4, 58, 58));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
