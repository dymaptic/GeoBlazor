@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(133, 22, 14),
                                new MapColor(48, 113, 117)),
                            true,
                            true,
                            [3,
                            9],
                            8,
                            9,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(870.8305,
                                8,
                                935.6431,
                                700.4081,
                                783.9504,
                                917.9177,
                                526.1366,
                                861.5191),
                            new RasterBandStatistics(53.5529,
                                1,
                                307.0604,
                                876.6783,
                                881.3544,
                                89.3438,
                                353.4767,
                                340.1565)],
                            true,
                            2))"
                        BandIds="@([2,
                            6,
                            1])"
                        BlendMode="@(BlendMode.ColorDodge)"
                        CompressionQuality="@(132.7144)"
                        CompressionTolerance="@(36.0316)"
                        Copyright="@("molestiae")"
                        DefinitionExpression="@("dolor")"
                        Effect="@(new Effect("vel",
                            37496903.6193))"
                        Format="@(ImageFormat.Tiff)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(1)"
                        ImageMaxWidth="@(2)"
                        Interpolation="@(Interpolation.Nearest)"
                        LegendEnabled="@(true)"
                        MaxScale="@(25100040.0179)"
                        MinScale="@(28094.1463)"
                        NoData="@(new NoData([3,
                            2]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAny)"
                        ObjectIdField="@("voluptas")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.U4)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(817.1937)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(262.0424,
                                TileInfoFormat.Tiff,
                                true,
                            [new LOD(8,
                                    "ea",
                                    4.4886,
                                    4308523.4466),
                            new LOD(2,
                                    "ea",
                                    38.6242,
                                    19201758.5166)],
                            new Point(120.1912,
                                    -3.9503,
                                    80.8432,
                                    -49.8116,
                                    845.7610,
                                new SpatialReference(1,
                                        "facere",
                                        "magni",
                                        "rerum"),
                                    true,
                                    true,
                                    853.0819),
                                [8,
                                    6],
                            new SpatialReference(6,
                                    "optio",
                                    "omnis",
                                    "reiciendis")))"
                        Title="@("maiores quae corporis")"
                        Opacity="@(0.7179)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(-151.3778,
                                -109.2029,
                                70.5607,
                                3.2986,
                                736.0240,
                                527.8655,
                                596.9042,
                                153.8359,
                            new SpatialReference(9,
                                    "similique",
                                    "est",
                                    "minus"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("nisi",
                                    "comment",
                                OutputPixelType.F64,
                                    "et",
                                    "createdAt"),
                                [4,
                                    2,
                                    9,
                                    5],
                            Method.Attribute,
                            [new DimensionalDefinition("status",
                                    true,
                                    "title"),
                            new DimensionalDefinition("name",
                                    true,
                                    "avatar"),
                            new DimensionalDefinition("group",
                                    true,
                                    "name"),
                            new DimensionalDefinition("id",
                                    true,
                                    "name")],
                                [1,
                                    1,
                                    1],
                            Operation.Mean,
                                "amet",
                                "officiis",
                            new Point(93.2681,
                                    -68.3965,
                                    179.0321,
                                    54.9343,
                                    143.1178,
                                new SpatialReference(4,
                                        "iusto",
                                        "ex",
                                        "aut"),
                                    true,
                                    true,
                                    613.7825),
                                "Age > 21"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(28.5268)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("fugiat")"
                            EndField="@("vitae")"
                            Stops="@([new DateTime(2015, 5, 5, 5, 1, 30),
                                new DateTime(2004, 4, 26, 20, 31, 40)])"
                            TimeZone="@("America/Chihuahua")"
                            TrackIdField="@("explicabo")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(823.8096)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2014, 1, 27, 17, 22, 20))"
                                End="@(new DateTime(2019, 5, 1, 3, 25, 6))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2010, 10, 16, 16, 11, 0))"
                            End="@(new DateTime(2008, 4, 7, 18, 38, 2))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("nihil")"
                            FunctionName="@("category")"
                            OutputPixelType="@(OutputPixelType.U2)"
                            RasterFunctionDefinition="@("dolor")"
                            VariableName="@("group")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Private)"
                            AccessInformation="@("autem")"
                            ApiKey="@("eius")"
                            AvgRating="@(202.7566)"
                            Categories="@(["voluptas",
                                "sed"])"
                            Created="@(new DateTime(2010, 2, 1, 6, 35, 9))"
                            Culture="@("hic")"
                            Description="@("dolores quisquam consequuntur perferendis asperiores quis")"
                            Extent="@(new Extent(-158.2314,
                                    -137.4514,
                                    88.7114,
                                    -69.5853,
                                    177.6972,
                                    703.7466,
                                    635.1469,
                                    287.2145,
                                new SpatialReference(3,
                                        "qui",
                                        "vero",
                                        "suscipit"),
                                    true,
                                    true))"
                            GroupCategories="@(["omnis",
                                "aut",
                                "est"])"
                            LicenseInfo="@("alias")"
                            Modified="@(new DateTime(2015, 7, 15, 8, 13, 54))"
                            Name="@("email")"
                            NumComments="@(972.6150)"
                            NumRatings="@(605.6619)"
                            NumViews="@(739.8205)"
                            Owner="@("Bo Rice")"
                            OwnerFolder="@("Webster Grant")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Immediate,
                                    ["sed",
                                        "velit",
                                        "vero"],
                                    "nihil",
                                    "quia",
                                    "odio",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("tenetur")"
                            Screenshots="@(["ab",
                                "cum",
                                "et",
                                "unde"])"
                            Size="@(3)"
                            Snippet="@("explicabo")"
                            Tags="@(["vero",
                                "sunt",
                                "et",
                                "natus"])"
                            Title="@("corrupti eveniet voluptatem")"
                            TypeKeywords="@(["eligendi",
                                "quas",
                                "porro"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("et voluptatum ab")"
                            StringContent="@("autem")"
                            OutFields="@(["culpa",
                                "eos",
                                "explicabo"])"
                            FieldInfos="@([new FieldInfo("group",
                                    "ea",
                                    "fugit",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("status",
                                    "provident",
                                    "consequatur",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Sum)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("email",
                                        "corporis",
                                        "est",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.ShortDateShortTime24),
                                        true,
                                        true,
                                    StatisticType.Max)],
                                    "est nam cumque temporibus officia culpa",
                                    "perspiciatis eos ex"),
                            new RelationshipPopupContent("ipsum fugit ea",
                                    "perferendis dolorum harum quisquam dolorem eos",
                                    6,
                                    "dolorem",
                                [new RelatedRecordsInfoFieldOrder("impedit",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("qui",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("error",
                                    OrderBy.Asc)],
                                    5),
                            new RelationshipPopupContent("iure reprehenderit commodi",
                                    "nisi nostrum sapiente ipsam dolores occaecati autem",
                                    2,
                                    "nemo",
                                [new RelatedRecordsInfoFieldOrder("quia",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("illum",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("alias",
                                    OrderBy.Desc),
                                new RelatedRecordsInfoFieldOrder("non",
                                    OrderBy.Desc)],
                                    3),
                            new RelationshipPopupContent("mollitia ut ut",
                                    "aut est voluptatem voluptatem ut et",
                                    7,
                                    "qui",
                                [new RelatedRecordsInfoFieldOrder("eum",
                                    OrderBy.Asc),
                                new RelatedRecordsInfoFieldOrder("dolorem",
                                    OrderBy.Desc)],
                                    5)])"
                            ExpressionInfos="@([new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "title",
                                    "aperiam velit fugiat",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("atque quia earum",
                                    "https://picsum.photos/640/480/?image=376",
                                    "d6000530-fb08-d090-7743-53776451f3ff",
                                    () => { Console.WriteLine("perferendis"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "qui"),
                            new ActionToggle("commodi velit molestias",
                                    "50601cfc-b851-1458-6ee8-e566acc77872",
                                    () => { Console.WriteLine("ex"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "comment",
                                    "eveniet"),
                            new ActionButton("qui harum placeat",
                                    "https://picsum.photos/640/480/?image=323",
                                    "17fce744-5097-a707-a925-945cce39258c",
                                    () => { Console.WriteLine("quasi"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "porro")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([953.6710,
                                        79.2604,
                                        176.6324]),
                                    new MapPoint([357.0970,
                                        669.7931]),
                                    new MapPoint([659.8308,
                                        432.5845,
                                        153.8883])]),
                                    new MapPath([new MapPoint([576.1321,
                                            142.5871,
                                            20.6944]),
                                        new MapPoint([518.3302,
                                            12.2939,
                                            472.1661]),
                                        new MapPoint([679.8697,
                                            604.1566,
                                            702.0451,
                                            137.4107]),
                                        new MapPoint([713.4591,
                                            416.7286,
                                            926.9599])]),
                                    new MapPath([new MapPoint([197.8066,
                                            650.3676]),
                                        new MapPoint([975.8729,
                                            903.0194,
                                            14.2795]),
                                        new MapPoint([414.1654,
                                            405.7813,
                                            775.1634])])],
                                new SpatialReference(2,
                                        "quia",
                                        "quo",
                                        "nemo"),
                                new Point(-159.3975,
                                        24.4239,
                                        -166.8891,
                                        75.6041,
                                        966.0478,
                                    new SpatialReference(8,
                                            "dolorem",
                                            "dolores",
                                            "beatae"),
                                        true,
                                        true,
                                        817.1847),
                                    true,
                                    true,
                                    true))"
                            SubsetDefinitions="@([new DimensionalDefinition("title",
                                    true,
                                    "id"),
                            new DimensionalDefinition("token",
                                    true,
                                    "createdAt"),
                            new DimensionalDefinition("token",
                                    true,
                                    "comment")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("password")"
                            Alias="@("ex")"
                            Description="@("eaque tempore dolor nobis delectus est et")"
                            Length="@(2)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "quia" })"
                            ValueType="@(FieldValueType.Coordinate)"
                            Domain="@(new InheritedDomain("status"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(7,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["updatedAt",
                    "title"],
                new Point(-50.5753,
                        -30.1085,
                        86.7441,
                        88.8519,
                        446.8791,
                    new SpatialReference(4,
                            "vero",
                            "necessitatibus",
                            "fuga"),
                        true,
                        true,
                        166.2386),
                    2,
                new SpatialReference(2,
                        "necessitatibus",
                        "labore",
                        "maiores")),
                "animi");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([428.9538,
                            464.6348,
                            461.6088,
                            551.4505]),
                        new MapPoint([636.3716,
                            458.2064])])],
                    new SpatialReference(6,
                            "illum",
                            "officiis",
                            "quibusdam"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("modi",
                            "updatedAt",
                        OutputPixelType.S16,
                            "ex",
                            "title"),
                        [9,
                            6,
                            5,
                            3],
                    Method.Nadir,
                    [new DimensionalDefinition("avatar",
                            true,
                            "createdAt"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "token")],
                        [7,
                            4,
                            1],
                    Operation.Sum,
                        "quisquam",
                        "aut",
                    new Point(-59.4276,
                            -62.7975,
                            147.0637,
                            -26.8506,
                            409.3285,
                        new SpatialReference(7,
                                "mollitia",
                                "dicta",
                                "repudiandae"),
                            true,
                            true,
                            127.3754),
                        "Street = '123 Main St.'"),
                new PixelSize(113.6172,
                        4.9101,
                    new PixelSizeSpatialReference(5,
                            47.2880)),
                new RasterFunction("animi",
                        "name",
                    OutputPixelType.S16,
                        "et",
                        "title"),
                new TimeExtent(new DateTime(2009, 10, 26, 10, 48, 13),
                        new DateTime(2023, 3, 27, 3, 46, 46))),
                "necessitatibus");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(93.2001,
                        -42.2044,
                        -28.6434,
                        52.7858,
                        220.7515,
                    new SpatialReference(3,
                            "aliquam",
                            "velit",
                            "minus"),
                        true,
                        true,
                        520.3970),
                new Point(-15.2739,
                        -59.8646,
                        -94.5805,
                        -7.3498,
                        285.6633,
                    new SpatialReference(9,
                            "quam",
                            "harum",
                            "est"),
                        true,
                        true,
                        968.3298),
                new Point(125.1276,
                        -8.8246,
                        69.8252,
                        41.0614,
                        723.6501,
                    new SpatialReference(4,
                            "asperiores",
                            "doloremque",
                            "quis"),
                        true,
                        true,
                        803.2319),
                new Point(-19.1418,
                        -87.1187,
                        122.8371,
                        2.7927,
                        782.4497,
                    new SpatialReference(6,
                            "architecto",
                            "hic",
                            "accusantium"),
                        true,
                        true,
                        715.1170)],
                    3),
                "at");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(148.6565,
                        79.1490,
                        71.9470,
                        11.5507,
                        938.5208,
                    new SpatialReference(1,
                            "quia",
                            "hic",
                            "est"),
                        true,
                        true,
                        172.1459),
                new MosaicRule(true,
                    new RasterFunction("minima",
                            "status",
                        OutputPixelType.F32,
                            "excepturi",
                            "status"),
                        [8,
                            3,
                            7,
                            5],
                    Method.Attribute,
                    [new DimensionalDefinition("name",
                            true,
                            "name")],
                        [8,
                            9,
                            9,
                            6],
                    Operation.Mean,
                        "ipsa",
                        "voluptas",
                    new Point(-58.4916,
                            81.9106,
                            -54.8363,
                            -30.7172,
                            35.2261,
                        new SpatialReference(3,
                                "autem",
                                "voluptate",
                                "consectetur"),
                            true,
                            true,
                            411.3459),
                        "1 = 1"),
                new PixelSize(-62.9329,
                        85.2836,
                    new PixelSizeSpatialReference(4,
                            389.5674)),
                new RasterFunction("perferendis",
                        "title",
                    OutputPixelType.U4,
                        "dolorem",
                        "name"),
                new TimeExtent(new DateTime(2007, 9, 5, 6, 5, 38),
                        new DateTime(2000, 3, 10, 5, 45, 14))),
                "nostrum");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quo",
                    "porro"],
                    ["id",
                        "comment"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-45.2365,
                    119.6743,
                    81.2456,
                    -30.4074,
                    813.3322,
                    441.6287,
                    724.6376,
                    891.3113,
                new SpatialReference(5,
                        "non",
                        "reprehenderit",
                        "placeat"),
                    true,
                    true),
                4,
                9,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(-95.6334,
                        66.9590,
                        179.2552,
                        -14.4622,
                        204.1392,
                    new SpatialReference(7,
                            "doloribus",
                            "maiores",
                            "iste"),
                        true,
                        true,
                        269.7636),
                    6,
                    [8,
                        5,
                        6],
                new Point(-129.5516,
                        -48.1124,
                        160.6264,
                        -10.1302,
                        913.1710,
                    new SpatialReference(8,
                            "ut",
                            "quae",
                            "aspernatur"),
                        true,
                        true,
                        914.7367),
                    "Country = 'Canada'"),
                "quas");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("omnis",
                    "category",
                OutputPixelType.F32,
                    "expedita",
                    "status"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(7,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(1,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(9,
                    "et"),
                "quia");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Extent(169.5204,
                        33.1533,
                        64.4830,
                        -64.2562,
                        339.2390,
                        781.2153,
                        735.6814,
                        87.5848,
                    new SpatialReference(3,
                            "sed",
                            "nam",
                            "animi"),
                        true,
                        true),
                Interpolation.Bilinear,
                [new Point(31.7342,
                        3.6422,
                        -165.6233,
                        -48.4201,
                        40.6245,
                    new SpatialReference(4,
                            "rem",
                            "omnis",
                            "dolor"),
                        true,
                        true,
                        573.2456)],
                new MosaicRule(true,
                    new RasterFunction("consequatur",
                            "status",
                        OutputPixelType.C128,
                            "itaque",
                            "category"),
                        [4,
                            7,
                            8,
                            1],
                    Method.Northwest,
                    [new DimensionalDefinition("token",
                            true,
                            "avatar"),
                    new DimensionalDefinition("group",
                            true,
                            "email"),
                    new DimensionalDefinition("phone",
                            true,
                            "comment"),
                    new DimensionalDefinition("token",
                            true,
                            "title")],
                        [5,
                            2],
                    Operation.Last,
                        "est",
                        "nulla",
                    new Point(92.4557,
                            -0.9161,
                            -27.5643,
                            5.5842,
                            604.1719,
                        new SpatialReference(4,
                                "quidem",
                                "ex",
                                "aliquid"),
                            true,
                            true,
                            962.0733),
                        "Country = 'Canada'"),
                    ["non",
                        "praesentium",
                        "modi",
                        "expedita"],
                new PixelSize(152.0925,
                        38.7293,
                    new PixelSizeSpatialReference(4,
                            315.4608)),
                    true,
                    9,
                    952.3764,
                    3,
                new TimeExtent(new DateTime(2014, 7, 1, 20, 45, 5),
                        new DateTime(2013, 5, 2, 1, 18, 28))),
                "aliquid");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Polyline([new MapPath([new MapPoint([841.2502,
                            583.4533,
                            762.2578]),
                        new MapPoint([868.6338,
                            735.9694,
                            311.8265]),
                        new MapPoint([961.9028,
                            471.7756,
                            650.3690])]),
                        new MapPath([new MapPoint([675.2403,
                                891.4108]),
                            new MapPoint([974.0033,
                                178.0673,
                                57.9044]),
                            new MapPoint([768.4975,
                                177.3755,
                                131.0270,
                                902.2326]),
                            new MapPoint([657.9112,
                                844.2655])]),
                        new MapPath([new MapPoint([540.5254,
                                255.2004]),
                            new MapPoint([547.5581,
                                511.4880,
                                980.7793,
                                168.7956]),
                            new MapPoint([143.3626,
                                668.3712,
                                257.2002]),
                            new MapPoint([124.2672,
                                633.3090])])],
                    new SpatialReference(1,
                            "sed",
                            "maxime",
                            "et"),
                        true,
                        true),
                    9,
                new MosaicRule(true,
                    new RasterFunction("est",
                            "token",
                        OutputPixelType.U4,
                            "aperiam",
                            "updatedAt"),
                        [3,
                            1,
                            5],
                    Method.Attribute,
                    [new DimensionalDefinition("email",
                            true,
                            "name"),
                    new DimensionalDefinition("category",
                            true,
                            "category")],
                        [9,
                            2,
                            5,
                            3],
                    Operation.Min,
                        "et",
                        "repellendus",
                    new Point(156.1434,
                            -49.3925,
                            29.9110,
                            -70.2984,
                            955.4277,
                        new SpatialReference(4,
                                "harum",
                                "ullam",
                                "quod"),
                            true,
                            true,
                            337.9304),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(0.6241,
                        12.7891,
                    new PixelSizeSpatialReference(7,
                            665.3629)),
                    true,
                new RasterFunction("delectus",
                        "comment",
                    OutputPixelType.C64,
                        "iure",
                        "phone"),
                new RasterFunction("officia",
                        "group",
                    OutputPixelType.C128,
                        "corporis",
                        "password"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2020, 10, 3, 4, 52, 29),
                        new DateTime(2011, 1, 24, 12, 51, 21))),
                "et");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    98.8717,
                new Extent(148.1581,
                        -70.6403,
                        73.2279,
                        13.5506,
                        563.1800,
                        551.8985,
                        225.5366,
                        425.1784,
                    new SpatialReference(9,
                            "neque",
                            "nisi",
                            "est"),
                        true,
                        true),
                new SpatialReference(5,
                        "est",
                        "eveniet",
                        "cum"),
                    4),
                "itaque");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Polyline([new MapPath([new MapPoint([862.0473,
                            146.4925,
                            576.7097,
                            398.3223]),
                        new MapPoint([996.2928,
                            519.8098]),
                        new MapPoint([376.1819,
                            886.1986,
                            475.7413,
                            195.9642]),
                        new MapPoint([941.3432,
                            954.4844,
                            802.1821,
                            66.3839])])],
                    new SpatialReference(1,
                            "dolorem",
                            "voluptate",
                            "deserunt"),
                        true,
                        true),
                new Polygon([new MapPath([new MapPoint([143.1716,
                            813.4437,
                            586.4221]),
                        new MapPoint([257.8037,
                            334.1515,
                            801.2721])]),
                        new MapPath([new MapPoint([978.4045,
                                395.4914]),
                            new MapPoint([85.7656,
                                774.8760,
                                666.0772,
                                590.7137]),
                            new MapPoint([504.3882,
                                163.2715,
                                710.0999])])],
                    new SpatialReference(9,
                            "eum",
                            "libero",
                            "quod"),
                    new Point(130.2701,
                            12.1410,
                            -102.5043,
                            -82.5115,
                            388.6991,
                        new SpatialReference(8,
                                "hic",
                                "ea",
                                "exercitationem"),
                            true,
                            true,
                            161.7079),
                        true,
                        true,
                        true),
                new Polyline([new MapPath([new MapPoint([421.2174,
                            689.5840]),
                        new MapPoint([477.4961,
                            656.9425,
                            355.8176]),
                        new MapPoint([314.1072,
                            481.7745,
                            779.8030,
                            265.5976])]),
                        new MapPath([new MapPoint([743.0114,
                                724.5139,
                                286.9366]),
                            new MapPoint([103.3696,
                                823.2573,
                                321.9407]),
                            new MapPoint([883.7182,
                                411.0688]),
                            new MapPoint([178.3270,
                                541.0585,
                                15.2485])]),
                        new MapPath([new MapPoint([830.6566,
                                590.9515,
                                629.7386,
                                986.4327]),
                            new MapPoint([377.6384,
                                688.1583,
                                466.8734,
                                389.0066]),
                            new MapPoint([217.2710,
                                3.8921,
                                452.5185])])],
                    new SpatialReference(3,
                            "velit",
                            "cumque",
                            "iste"),
                        true,
                        true)],
                new SpatialReference(6,
                        "soluta",
                        "autem",
                        "et"),
                    [4,
                        2]),
                "doloremque");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Point(-179.8494,
                        28.1687,
                        17.5483,
                        5.2935,
                        385.4490,
                    new SpatialReference(2,
                            "culpa",
                            "fugit",
                            "dolores"),
                        true,
                        true,
                        891.2182),
                    7,
                    true),
                "fuga");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("minus",
                            "title",
                        OutputPixelType.S32,
                            "cum",
                            "status"),
                        [3,
                            3,
                            7],
                    Method.Nadir,
                    [new DimensionalDefinition("email",
                            true,
                            "id"),
                    new DimensionalDefinition("avatar",
                            true,
                            "name")],
                        [2,
                            1,
                            1,
                            4],
                    Operation.Max,
                        "atque",
                        "unde",
                    new Point(129.5228,
                            21.0553,
                            -24.6581,
                            36.3512,
                            184.0150,
                        new SpatialReference(9,
                                "quasi",
                                "ea",
                                "praesentium"),
                            true,
                            true,
                            200.9708),
                        "Street = '123 Main St.'"),
                new PixelSize(27.3218,
                        25.3591,
                    new PixelSizeSpatialReference(9,
                            135.9059)),
                ImageAreaUnit.Hectares,
                new Polyline([new MapPath([new MapPoint([88.4941,
                            842.7661,
                            342.3375,
                            914.0102]),
                        new MapPoint([333.1820,
                            411.4073]),
                        new MapPoint([239.5773,
                            372.8084,
                            883.8898,
                            931.8302])])],
                    new SpatialReference(1,
                            "harum",
                            "numquam",
                            "ullam"),
                        true,
                        true),
                    true,
                LengthUnit.Kilometers),
                "et");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Extent(99.8709,
                        94.9565,
                        -20.2369,
                        -61.0324,
                        35.1830,
                        490.1276,
                        439.3857,
                        27.2388,
                    new SpatialReference(1,
                            "sequi",
                            "qui",
                            "rerum"),
                        true,
                        true),
                    9),
                "et");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("ipsum",
                            "status",
                        OutputPixelType.C128,
                            "aut",
                            "token"),
                        [5,
                            9,
                            4,
                            6],
                    Method.LockRaster,
                    [new DimensionalDefinition("title",
                            true,
                            "token"),
                    new DimensionalDefinition("email",
                            true,
                            "name")],
                        [1,
                            7,
                            1,
                            2],
                    Operation.Blend,
                        "sequi",
                        "voluptatum",
                    new Point(120.1962,
                            -2.6228,
                            26.9684,
                            -64.0721,
                            315.0718,
                        new SpatialReference(6,
                                "consequatur",
                                "consequatur",
                                "repudiandae"),
                            true,
                            true,
                            162.2853),
                        "Street = '123 Main St.'"),
                new PixelSize(-17.0818,
                        -13.3392,
                    new PixelSizeSpatialReference(5,
                            54.3271)),
                AngularUnit.Degrees,
                new Point(-119.4026,
                        50.2625,
                        82.6741,
                        19.9529,
                        297.1874,
                    new SpatialReference(9,
                            "est",
                            "nostrum",
                            "repellendus"),
                        true,
                        true,
                        866.9684),
                    true,
                LengthUnit.Yards,
                new Point(-155.3030,
                        -38.4177,
                        72.7728,
                        71.5402,
                        522.6445,
                    new SpatialReference(8,
                            "quia",
                            "est",
                            "aliquid"),
                        true,
                        true,
                        192.0495)),
                "omnis");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("qui",
                            "id",
                        OutputPixelType.S32,
                            "minus",
                            "title"),
                        [2,
                            2,
                            1],
                    Method.Seamline,
                    [new DimensionalDefinition("email",
                            true,
                            "password")],
                        [6,
                            3,
                            5],
                    Operation.Min,
                        "suscipit",
                        "maiores",
                    new Point(65.8060,
                            -47.9723,
                            30.6118,
                            -1.3091,
                            10.9109,
                        new SpatialReference(5,
                                "corrupti",
                                "voluptatem",
                                "adipisci"),
                            true,
                            true,
                            59.7093),
                        "Country = 'Canada'"),
                new PixelSize(37.5099,
                        33.4609,
                    new PixelSizeSpatialReference(6,
                            476.8476)),
                new Point(42.6013,
                        -87.0049,
                        34.4234,
                        4.7907,
                        335.5775,
                    new SpatialReference(2,
                            "voluptatem",
                            "voluptas",
                            "nostrum"),
                        true,
                        true,
                        939.1779),
                LengthUnit.Yards,
                OperationType.BaseAndTop,
                new Point(65.0614,
                        -11.8669,
                        45.8565,
                        -7.1163,
                        716.7781,
                    new SpatialReference(8,
                            "aliquid",
                            "et",
                            "voluptatem"),
                        true,
                        true,
                        351.0823)),
                "et");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Point(-137.8983,
                        -35.1798,
                        124.6968,
                        -89.2449,
                        335.1967,
                    new SpatialReference(3,
                            "ab",
                            "id",
                            "deserunt"),
                        true,
                        true,
                        724.3040),
                    2),
                "natus");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("beatae",
                            "createdAt",
                        OutputPixelType.U32,
                            "eum",
                            "token"),
                        [6,
                            5,
                            5,
                            2],
                    Method.None,
                    [new DimensionalDefinition("token",
                            true,
                            "comment"),
                    new DimensionalDefinition("email",
                            true,
                            "category"),
                    new DimensionalDefinition("id",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("category",
                            true,
                            "createdAt")],
                        [5,
                            5,
                            7,
                            7],
                    Operation.Max,
                        "nesciunt",
                        "debitis",
                    new Point(112.1698,
                            -33.3428,
                            -36.9462,
                            73.2134,
                            796.4062,
                        new SpatialReference(3,
                                "cumque",
                                "cupiditate",
                                "minus"),
                            true,
                            true,
                            336.5486),
                        "Phone = '555-555-5555'"),
                new PixelSize(26.5700,
                        30.4425,
                    new PixelSizeSpatialReference(4,
                            417.9748)),
                new Extent(150.1138,
                        17.3049,
                        -14.6179,
                        74.8520,
                        326.1924,
                        610.4293,
                        568.3625,
                        500.2579,
                    new SpatialReference(3,
                            "sed",
                            "fugit",
                            "et"),
                        true,
                        true),
                    true),
                "sit");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(4,
                        "ad",
                        "facere",
                        "iusto")),
                "doloremque");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Polyline([new MapPath([new MapPoint([43.6599,
                            549.5526]),
                        new MapPoint([964.0621,
                            274.6966,
                            0.2238]),
                        new MapPoint([930.6863,
                            929.2847])])],
                    new SpatialReference(3,
                            "sit",
                            "autem",
                            "officia"),
                        true,
                        true),
                    [3,
                        6,
                        7],
                SpatialRelationship.IndexIntersects,
                new TimeExtent(new DateTime(2016, 3, 23, 3, 13, 58),
                        new DateTime(2006, 11, 2, 4, 21, 48)),
                    "PostalCode = 'M5V 1J9'"),
                "explicabo");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([3,
                    5,
                    2],
                    true,
                    719.9251,
                    169.6024,
                    "1.1.9.7",
                new Point(173.8401,
                        -66.8876,
                        152.1285,
                        44.0895,
                        981.1427,
                    new SpatialReference(6,
                            "ab",
                            "molestiae",
                            "sed"),
                        true,
                        true,
                        890.9181),
                    8,
                    ["omnis",
                        "sapiente",
                        "nihil",
                        "fugiat"],
                    "voluptatum",
                    new DateTime(2018, 6, 22, 12, 52, 36),
                    831.6765,
                    6,
                    "reprehenderit",
                    9),
                "ut");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([5,
                    3,
                    9],
                    true,
                    287.6908,
                    225.5655,
                    "6.0.2.5",
                new Polyline([new MapPath([new MapPoint([310.8064,
                            881.2176]),
                        new MapPoint([972.6728,
                            755.0285,
                            688.7433,
                            349.2431])]),
                        new MapPath([new MapPoint([919.0025,
                                358.3823]),
                            new MapPoint([682.4041,
                                695.0321])]),
                        new MapPath([new MapPoint([675.0768,
                                216.3490,
                                284.9184]),
                            new MapPoint([320.4540,
                                989.2980]),
                            new MapPoint([566.6194,
                                348.8152,
                                483.0412])])],
                    new SpatialReference(8,
                            "explicabo",
                            "voluptas",
                            "voluptas"),
                        true,
                        true),
                    1,
                    ["rerum",
                        "ad",
                        "veritatis",
                        "hic"],
                    "nostrum",
                    new DateTime(2019, 1, 14, 0, 36, 9),
                    237.7094,
                    2,
                    "voluptatibus",
                    4),
                "iusto");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([6,
                    9],
                    true,
                    994.7107,
                    581.5497,
                    "4.1.7.3",
                new Polygon([new MapPath([new MapPoint([935.8167,
                            617.4471,
                            571.4597]),
                        new MapPoint([230.1870,
                            720.7289,
                            250.2782]),
                        new MapPoint([684.6138,
                            99.3192,
                            0.8343]),
                        new MapPoint([795.3125,
                            943.3655])]),
                        new MapPath([new MapPoint([670.5705,
                                467.1331,
                                993.9647,
                                556.6005]),
                            new MapPoint([592.1863,
                                265.5694]),
                            new MapPoint([469.9205,
                                505.7030,
                                136.3592])])],
                    new SpatialReference(4,
                            "quod",
                            "quaerat",
                            "laborum"),
                    new Point(-118.8627,
                            21.7590,
                            156.3885,
                            79.4745,
                            246.0302,
                        new SpatialReference(8,
                                "et",
                                "sit",
                                "ratione"),
                            true,
                            true,
                            50.5007),
                        true,
                        true,
                        true),
                    4,
                    ["ut",
                        "pariatur"],
                    "qui",
                    new DateTime(2005, 11, 3, 3, 31, 28),
                    76.1762,
                    9,
                    "eos",
                    5),
                "tenetur");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(PortalItemAccess.Private,
                    "cumque",
                    "dicta",
                    719.9029,
                    ["voluptas",
                        "sint",
                        "eum"],
                    new DateTime(2019, 9, 4, 1, 38, 41),
                    "a",
                    "harum rerum doloribus voluptatum modi et",
                new Extent(59.6889,
                        -23.4546,
                        74.8023,
                        84.1052,
                        628.4969,
                        893.4518,
                        13.2163,
                        865.4819,
                    new SpatialReference(7,
                            "vel",
                            "id",
                            "debitis"),
                        true,
                        true),
                    ["est",
                        "optio",
                        "omnis",
                        "rerum"],
                    "autem",
                    new DateTime(2011, 4, 5, 17, 0, 48),
                    "name",
                    631.6718),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2017, 1, 1, 5, 15, 33),
                        "nihil",
                        "aut provident corporis"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "aliquam",
                    "nesciunt",
                    872.8649,
                    ["esse",
                        "rerum",
                        "optio"],
                    new DateTime(2012, 4, 12, 16, 2, 35),
                    "eos",
                    "neque tempora magnam aut",
                new Extent(85.7643,
                        134.2514,
                        -80.8587,
                        -8.7526,
                        537.5742,
                        22.4285,
                        838.9139,
                        93.0724,
                    new SpatialReference(6,
                            "voluptatem",
                            "aut",
                            "ut"),
                        true,
                        true),
                    ["aut",
                        "eligendi",
                        "et",
                        "quia"],
                    "necessitatibus",
                    new DateTime(2007, 7, 2, 0, 48, 53),
                    "title",
                    706.4158);
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Multiply;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Png8;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Bilinear;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAny;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.S32;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2002, 1, 17, 6, 0, 14),
                    new DateTime(2001, 2, 17, 9, 51, 27));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aut",
                    "est",
                new TimeExtent(new DateTime(2000, 10, 8, 5, 56, 19),
                        new DateTime(2020, 8, 12, 21, 22, 45)),
                new TimeInterval(TemporalTime.Decades,
                        59.4129),
                    [new DateTime(2006, 10, 2, 9, 48, 20),
                        new DateTime(2010, 4, 22, 5, 11, 30),
                        new DateTime(2017, 6, 5, 4, 13, 13),
                        new DateTime(2010, 4, 8, 7, 27, 18)],
                    "Europe/Prague",
                    "dolorem");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    14.5640);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(24.7796,
                    42.3721,
                    -66.9593,
                    -59.6550,
                    816.6319,
                    438.2146,
                    378.7804,
                    858.0484,
                new SpatialReference(8,
                        "quaerat",
                        "excepturi",
                        "ut"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(1,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "email",
                    "blanditiis",
                    "numquam enim nobis ipsam perferendis",
                    2,
                    true,
                    true,
                    new { Value = "et" },
                FieldValueType.Measurement,
                new RangeDomain("non",
                        "sit",
                        "avatar")),
            new Field(default,
                    "token",
                    "vel",
                    "aut ipsa temporibus sed dolor rerum",
                    1,
                    true,
                    true,
                    new { Value = "alias" },
                FieldValueType.LocationOrPlaceName,
                new RangeDomain("et",
                        "ipsam",
                        "token")),
            new Field(default,
                    "createdAt",
                    "sit",
                    "omnis est minima quam voluptas sequi",
                    9,
                    true,
                    true,
                    new { Value = "voluptate" },
                FieldValueType.Description,
                new InheritedDomain("status"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("ducimus",
                        "title",
                    OutputPixelType.C64,
                        "quasi",
                        "token"),
                    [7,
                        8],
                Method.None,
                [new DimensionalDefinition("token",
                        true,
                        "category")],
                    [1,
                        2,
                        2],
                Operation.Sum,
                    "odio",
                    "dolores",
                new Point(71.6304,
                        -79.8582,
                        -123.2460,
                        -62.9785,
                        457.3331,
                    new SpatialReference(5,
                            "et",
                            "recusandae",
                            "quae"),
                        true,
                        true,
                        278.5232),
                    "Name = 'John Doe'");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([840.8653,
                            389.2350,
                            210.1343,
                            953.5059]),
                        new MapPoint([193.5522,
                            264.1352]),
                        new MapPoint([109.9058,
                            50.3761]),
                        new MapPoint([581.5130,
                            257.4147,
                            237.6751,
                            137.3154])]),
                        new MapPath([new MapPoint([494.0573,
                                761.9396,
                                638.5934]),
                            new MapPoint([461.2072,
                                374.2473]),
                            new MapPoint([373.1017,
                                935.6623])])],
                    new SpatialReference(5,
                            "consequuntur",
                            "sapiente",
                            "aspernatur"),
                        true,
                        true),
                [new DimensionalDefinition("status",
                        true,
                        "phone"),
                new DimensionalDefinition("password",
                        true,
                        "password"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "createdAt")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("sapiente quasi optio",
                    "perspiciatis",
                    ["eum",
                        "itaque"],
                [new FieldInfo("createdAt",
                        "pariatur",
                        "excepturi",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.DayShortMonthYear),
                        true,
                        true,
                    StatisticType.Sum)],
                [new AttachmentsPopupContent("fugit dolores autem",
                        "blanditiis veniam accusantium tempore voluptatem",
                        AttachmentsPopupContentDisplayType.Preview),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                            "nesciunt",
                            "dolore velit id")),
                new TextPopupContent("eius sint non"),
                new MediaPopupContent("iure fugit necessitatibus",
                        "atque facere voluptatibus quia nisi est commodi",
                    [new ColumnChartMediaInfo("est perferendis hic",
                            "alias",
                            "quo quia rerum",
                        new ChartMediaInfoValue(["cum",
                                "rerum",
                                "dolores"],
                                "dignissimos",
                                "ea",
                            [new ChartMediaInfoValueSeries("status",
                                    "et",
                                    29.1445),
                            new ChartMediaInfoValueSeries("createdAt",
                                    "enim",
                                    986.5239)],
                            [new MapColor(157, 182, 167),
                            new MapColor(66, 222, 186),
                            new MapColor(120, 60, 12),
                            new MapColor(206, 243, 60)])),
                    new ColumnChartMediaInfo("quibusdam omnis dolores",
                            "est",
                            "laborum qui atque",
                        new ChartMediaInfoValue(["quo",
                                "dolores"],
                                "autem",
                                "esse",
                            [new ChartMediaInfoValueSeries("comment",
                                    "quo",
                                    902.4403),
                            new ChartMediaInfoValueSeries("group",
                                    "dignissimos",
                                    180.2249),
                            new ChartMediaInfoValueSeries("group",
                                    "aspernatur",
                                    906.3051)],
                            [new MapColor(238, 183, 84),
                            new MapColor(127, 51, 133),
                            new MapColor(116, 250, 10)])),
                    new ColumnChartMediaInfo("sit saepe dignissimos",
                            "illo",
                            "magni voluptatum fugit",
                        new ChartMediaInfoValue(["dolorem",
                                "est"],
                                "quod",
                                "accusamus",
                            [new ChartMediaInfoValueSeries("group",
                                    "est",
                                    264.9215)],
                            [new MapColor(43, 130, 50),
                            new MapColor(141, 222, 228),
                            new MapColor(73, 214, 174),
                            new MapColor(180, 149, 253)]))],
                        7)],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "updatedAt",
                        "saepe nobis vero",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "token",
                        "eos exercitationem aut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "title",
                        "cum quibusdam porro",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "password",
                        "est ea quod",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("iste qui quos",
                        "https://picsum.photos/640/480/?image=1052",
                        "8420d21f-27c6-b62d-c5a9-06e1bb83b84a",
                        () => { Console.WriteLine("perferendis"); return Task.CompletedTask; },
                        "avatar",
                        true,
                        true,
                        true,
                        "sit")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("quam",
                    "token",
                OutputPixelType.U8,
                    "illo",
                    "category");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2023, 3, 20, 16, 28, 44),
                    new DateTime(2012, 3, 26, 19, 57, 46));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
