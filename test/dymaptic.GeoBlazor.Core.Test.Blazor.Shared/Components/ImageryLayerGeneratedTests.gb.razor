@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(246, 50, 129),
                                new MapColor(43, 0, 103)),
                            true,
                            true,
                            [9,
                            7,
                            9],
                            9,
                            5,
                            StretchType.MinMax,
                            [new RasterBandStatistics(906.5938,
                                6,
                                411.7359,
                                672.9413,
                                692.3258,
                                527.2543,
                                355.2210,
                                597.1049),
                            new RasterBandStatistics(695.5157,
                                3,
                                433.6544,
                                873.8121,
                                563.9307,
                                550.6868,
                                820.6182,
                                373.8165)],
                            true,
                            3))"
                        BandIds="@([5,
                            2])"
                        BlendMode="@(BlendMode.VividLight)"
                        CompressionQuality="@(837.0892)"
                        CompressionTolerance="@(328.4172)"
                        Copyright="@("sed")"
                        DefinitionExpression="@("iste")"
                        Effect="@(new Effect("iusto",
                            15782469.7929))"
                        Format="@(ImageFormat.Bmp)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(7)"
                        ImageMaxWidth="@(8)"
                        Interpolation="@(Interpolation.Cubic)"
                        LegendEnabled="@(true)"
                        MaxScale="@(48783872.3459)"
                        MinScale="@(46901.7908)"
                        NoData="@(new NoData([1,
                            7,
                            8]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAll)"
                        ObjectIdField="@("quaerat")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.U8)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(439.1259)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(435.6369,
                                TileInfoFormat.Gif,
                                true,
                            [new LOD(3,
                                    "explicabo",
                                    48.4659,
                                    36942269.4464),
                            new LOD(8,
                                    "nihil",
                                    23.3718,
                                    44947758.5388),
                            new LOD(4,
                                    "sint",
                                    10.5959,
                                    23328955.0600),
                            new LOD(2,
                                    "qui",
                                    52.1001,
                                    46956951.1822)],
                            new Point(-107.4319,
                                    20.0182,
                                    -45.3554,
                                    -57.0563,
                                    795.7686,
                                new SpatialReference(9,
                                        "pariatur",
                                        "ut",
                                        "expedita"),
                                    true,
                                    true,
                                    953.1632),
                                [8,
                                    6,
                                    9],
                            new SpatialReference(4,
                                    "unde",
                                    "ad",
                                    "unde")))"
                        Title="@("aliquam autem impedit")"
                        Opacity="@(0.8740)"
                        ListMode="@(ListMode.Show)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(-8.5782,
                                -18.2815,
                                -5.3262,
                                4.1300,
                                42.1699,
                                541.3899,
                                286.5691,
                                809.7654,
                            new SpatialReference(7,
                                    "sunt",
                                    "porro",
                                    "in"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("numquam",
                                    "avatar",
                                OutputPixelType.F64,
                                    "voluptatem",
                                    "group"),
                                [5,
                                    5],
                            Method.None,
                            [new DimensionalDefinition("comment",
                                    true,
                                    "group"),
                            new DimensionalDefinition("title",
                                    true,
                                    "token"),
                            new DimensionalDefinition("updatedAt",
                                    true,
                                    "password")],
                                [1,
                                    2,
                                    2,
                                    8],
                            Operation.Sum,
                                "non",
                                "nostrum",
                            new Point(129.1312,
                                    32.4625,
                                    18.6307,
                                    -47.5680,
                                    440.5909,
                                new SpatialReference(2,
                                        "inventore",
                                        "et",
                                        "reiciendis"),
                                    true,
                                    true,
                                    915.4091),
                                "1 = 1"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(661.8424)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("possimus")"
                            EndField="@("voluptatem")"
                            Stops="@([new DateTime(2011, 4, 22, 4, 56, 42),
                                new DateTime(2006, 2, 21, 6, 19, 7)])"
                            TimeZone="@("Asia/Kolkata")"
                            TrackIdField="@("esse")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(684.5774)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2007, 7, 24, 3, 29, 48))"
                                End="@(new DateTime(2014, 3, 25, 6, 41, 53))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2006, 5, 1, 8, 38, 28))"
                            End="@(new DateTime(2022, 6, 24, 13, 32, 18))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("nihil")"
                            FunctionName="@("id")"
                            OutputPixelType="@(OutputPixelType.S32)"
                            RasterFunctionDefinition="@("quam")"
                            VariableName="@("updatedAt")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Shared)"
                            AccessInformation="@("voluptate")"
                            ApiKey="@("voluptas")"
                            AvgRating="@(628.1547)"
                            Categories="@(["impedit",
                                "et",
                                "sed"])"
                            Created="@(new DateTime(2014, 8, 4, 14, 54, 56))"
                            Culture="@("ullam")"
                            Description="@("non non voluptas at quia delectus nam")"
                            Extent="@(new Extent(124.7956,
                                    -35.7602,
                                    -36.8805,
                                    53.4701,
                                    749.2492,
                                    197.7184,
                                    124.8379,
                                    125.5840,
                                new SpatialReference(7,
                                        "molestiae",
                                        "temporibus",
                                        "velit"),
                                    true,
                                    true))"
                            GroupCategories="@(["architecto",
                                "ab"])"
                            LicenseInfo="@("facilis")"
                            Modified="@(new DateTime(2022, 9, 19, 0, 7, 21))"
                            Name="@("phone")"
                            NumComments="@(661.9525)"
                            NumRatings="@(413.5707)"
                            NumViews="@(784.1693)"
                            Owner="@("Marcella Ferry")"
                            OwnerFolder="@("Armani Bashirian")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.NoPrompt,
                                    ["illum",
                                        "et"],
                                    "tempore",
                                    "accusantium",
                                    "cum",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("expedita")"
                            Screenshots="@(["ipsa",
                                "molestias",
                                "aut"])"
                            Size="@(9)"
                            Snippet="@("delectus")"
                            Tags="@(["omnis",
                                "nostrum"])"
                            Title="@("fugit dolorem qui")"
                            TypeKeywords="@(["soluta",
                                "omnis",
                                "quo"])"
                            Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("quibusdam eveniet nobis")"
                            StringContent="@("eos")"
                            OutFields="@(["voluptatem",
                                "quo",
                                "ipsa"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "ratione",
                                    "doloremque",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("name",
                                    "quidem",
                                    "tempore",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("updatedAt",
                                    "asperiores",
                                    "quia",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("updatedAt",
                                    "autem",
                                    "aut",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                        "labore",
                                        "et sit molestiae")),
                            new MediaPopupContent("velit ab tempore",
                                    "quisquam ea consequatur accusamus neque expedita",
                                [new ColumnChartMediaInfo("iusto quod iusto",
                                        "eligendi",
                                        "quam quia aperiam",
                                    new ChartMediaInfoValue(["omnis",
                                            "adipisci",
                                            "minus"],
                                            "distinctio",
                                            "et",
                                        [new ChartMediaInfoValueSeries("phone",
                                                "voluptatem",
                                                792.1792),
                                        new ChartMediaInfoValueSeries("status",
                                                "dicta",
                                                130.5958),
                                        new ChartMediaInfoValueSeries("createdAt",
                                                "temporibus",
                                                250.2535)],
                                        [new MapColor(116, 120, 67),
                                        new MapColor(114, 138, 194),
                                        new MapColor(76, 206, 115),
                                        new MapColor(229, 23, 179)])),
                                new ImageMediaInfo("enim accusamus quis",
                                        "voluptas",
                                        "voluptates voluptates quasi",
                                    new ImageMediaInfoValue("https://shanie.biz",
                                            "http://shanelle.name"),
                                        6.9944),
                                new ImageMediaInfo("est ut dicta",
                                        "totam",
                                        "aut repellat qui",
                                    new ImageMediaInfoValue("http://kiel.com",
                                            "http://misty.net"),
                                        320.4783)],
                                    3),
                            new FieldsPopupContent([new FieldInfo("id",
                                        "dolorem",
                                        "totam",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.ShortDateLeShortTime24),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("email",
                                        "vel",
                                        "alias",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "sed pariatur sed quia optio",
                                    "reiciendis dicta ea")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "status",
                                    "aut blanditiis cum",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "email",
                                    "voluptatem error consequatur",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "updatedAt",
                                    "nam aliquid aliquid",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("ut qui veniam",
                                    "dc2ce28b-f737-8241-7b4e-fc5f8745051b",
                                    () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "category",
                                    "voluptatem"),
                            new ActionButton("quis ut veritatis",
                                    "https://picsum.photos/640/480/?image=1040",
                                    "a4465f06-f20f-e622-bfaa-e7d4deef01dc",
                                    () => { Console.WriteLine("minima"); return Task.CompletedTask; },
                                    "comment",
                                    true,
                                    true,
                                    true,
                                    "nobis"),
                            new ActionToggle("omnis ut culpa",
                                    "92eed11c-28e0-4991-760e-03d07902d9fc",
                                    () => { Console.WriteLine("esse"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "id",
                                    "adipisci"),
                            new ActionToggle("possimus occaecati quia",
                                    "03535569-3210-e64a-0930-117a3b60c0a9",
                                    () => { Console.WriteLine("alias"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "category",
                                    "sunt")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(-110.8472,
                                    -50.3270,
                                    -169.1968,
                                    -16.9581,
                                    825.3879,
                                new SpatialReference(9,
                                        "consequatur",
                                        "et",
                                        "sit"),
                                    true,
                                    true,
                                    10.4044))"
                            SubsetDefinitions="@([new DimensionalDefinition("id",
                                    true,
                                    "category")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("category")"
                            Alias="@("ab")"
                            Description="@("beatae aut necessitatibus sed id")"
                            Length="@(9)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "eveniet" })"
                            ValueType="@(FieldValueType.Binary)"
                            Domain="@(new RangeDomain("est",
                                    "sunt",
                                    "id"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(7,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["status",
                    "password"],
                new Point(112.4047,
                        -19.7590,
                        -40.0117,
                        63.5126,
                        727.9960,
                    new SpatialReference(5,
                            "aspernatur",
                            "quod",
                            "enim"),
                        true,
                        true,
                        712.8220),
                    6,
                new SpatialReference(6,
                        "vitae",
                        "dolore",
                        "repudiandae")),
                "mollitia");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Extent(110.6580,
                        114.4091,
                        27.6460,
                        -43.7678,
                        885.4345,
                        303.4702,
                        237.2307,
                        531.9231,
                    new SpatialReference(7,
                            "recusandae",
                            "alias",
                            "voluptates"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("omnis",
                            "group",
                        OutputPixelType.U1,
                            "iure",
                            "id"),
                        [3,
                            5,
                            5],
                    Method.Seamline,
                    [new DimensionalDefinition("avatar",
                            true,
                            "title"),
                    new DimensionalDefinition("avatar",
                            true,
                            "token"),
                    new DimensionalDefinition("avatar",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("comment",
                            true,
                            "status")],
                        [5,
                            1,
                            1,
                            9],
                    Operation.Last,
                        "magni",
                        "ut",
                    new Point(37.9006,
                            56.4790,
                            -129.4713,
                            -2.3649,
                            282.2711,
                        new SpatialReference(1,
                                "labore",
                                "velit",
                                "consectetur"),
                            true,
                            true,
                            604.9177),
                        "Province = 'Ontario'"),
                new PixelSize(132.1677,
                        -40.9905,
                    new PixelSizeSpatialReference(2,
                            350.9340)),
                new RasterFunction("ea",
                        "comment",
                    OutputPixelType.Unknown,
                        "aliquam",
                        "title"),
                new TimeExtent(new DateTime(2005, 11, 23, 22, 26, 15),
                        new DateTime(2022, 8, 5, 21, 22, 7))),
                "ab");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(-161.2260,
                        66.0089,
                        72.5262,
                        4.3994,
                        113.7852,
                    new SpatialReference(5,
                            "corporis",
                            "aut",
                            "et"),
                        true,
                        true,
                        231.7375),
                new Point(-118.1187,
                        -67.6878,
                        -141.0580,
                        -80.7561,
                        142.6016,
                    new SpatialReference(4,
                            "explicabo",
                            "dolores",
                            "est"),
                        true,
                        true,
                        821.5570),
                new Point(-158.1725,
                        -70.6858,
                        -77.0328,
                        16.3475,
                        355.3828,
                    new SpatialReference(5,
                            "quod",
                            "voluptates",
                            "aut"),
                        true,
                        true,
                        546.2178),
                new Point(-20.2864,
                        6.9402,
                        12.6128,
                        71.5767,
                        435.2831,
                    new SpatialReference(5,
                            "sed",
                            "qui",
                            "nihil"),
                        true,
                        true,
                        136.0823)],
                    8),
                "quia");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([564.7822,
                            907.0598,
                            721.1646]),
                        new MapPoint([168.0333,
                            924.1446])]),
                        new MapPath([new MapPoint([232.1206,
                                369.4543,
                                462.3912]),
                            new MapPoint([185.6226,
                                810.3424,
                                88.0263,
                                420.9428]),
                            new MapPoint([244.6352,
                                40.4189,
                                970.4170,
                                310.0279]),
                            new MapPoint([207.1863,
                                595.6897,
                                49.4710])])],
                    new SpatialReference(6,
                            "voluptas",
                            "error",
                            "harum"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("et",
                            "category",
                        OutputPixelType.U1,
                            "molestias",
                            "group"),
                        [8,
                            4,
                            3],
                    Method.None,
                    [new DimensionalDefinition("password",
                            true,
                            "name"),
                    new DimensionalDefinition("token",
                            true,
                            "createdAt")],
                        [7,
                            8,
                            7,
                            9],
                    Operation.Last,
                        "eveniet",
                        "quasi",
                    new Point(-166.4385,
                            -23.1302,
                            -25.7293,
                            -42.9442,
                            244.1039,
                        new SpatialReference(3,
                                "delectus",
                                "consequatur",
                                "hic"),
                            true,
                            true,
                            600.1521),
                        "Province = 'Ontario'"),
                new PixelSize(20.1851,
                        -77.8684,
                    new PixelSizeSpatialReference(4,
                            878.2513)),
                new RasterFunction("in",
                        "title",
                    OutputPixelType.S16,
                        "autem",
                        "title"),
                new TimeExtent(new DateTime(2021, 1, 2, 20, 16, 49),
                        new DateTime(2005, 6, 4, 2, 51, 48))),
                "porro");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["asperiores",
                    "sint",
                    "similique"],
                    ["name",
                        "name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-88.2212,
                    66.7527,
                    56.0127,
                    -39.8200,
                    899.2922,
                    825.1623,
                    960.3707,
                    583.2463,
                new SpatialReference(8,
                        "temporibus",
                        "omnis",
                        "repellendus"),
                    true,
                    true),
                7,
                5,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(174.9203,
                        37.8332,
                        -121.1624,
                        -62.0141,
                        78.6268,
                    new SpatialReference(9,
                            "ullam",
                            "accusantium",
                            "velit"),
                        true,
                        true,
                        399.2397),
                    7,
                    [7,
                        2],
                new Point(78.0400,
                        80.8598,
                        159.5318,
                        -20.4043,
                        593.9733,
                    new SpatialReference(6,
                            "explicabo",
                            "maiores",
                            "voluptas"),
                        true,
                        true,
                        355.6520),
                    "1 = 1"),
                "consequatur");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("culpa",
                    "category",
                OutputPixelType.S16,
                    "optio",
                    "updatedAt"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(5,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(5,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(3,
                    "optio"),
                "autem");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Extent(-13.3371,
                        -38.6462,
                        -86.6138,
                        -20.4670,
                        951.8819,
                        433.6173,
                        262.9577,
                        295.4792,
                    new SpatialReference(5,
                            "est",
                            "illo",
                            "facilis"),
                        true,
                        true),
                Interpolation.Majority,
                [new Point(-134.2758,
                        -61.0695,
                        -165.3848,
                        -78.7982,
                        161.3481,
                    new SpatialReference(2,
                            "excepturi",
                            "numquam",
                            "non"),
                        true,
                        true,
                        268.1654),
                new Point(-161.7722,
                        -65.6757,
                        145.4487,
                        76.9171,
                        588.4654,
                    new SpatialReference(8,
                            "animi",
                            "sunt",
                            "dolor"),
                        true,
                        true,
                        138.3247),
                new Point(-74.9734,
                        7.1863,
                        98.2616,
                        -87.2786,
                        186.2067,
                    new SpatialReference(7,
                            "et",
                            "qui",
                            "fugiat"),
                        true,
                        true,
                        999.2499),
                new Point(-14.1994,
                        -87.3614,
                        -31.7038,
                        6.1448,
                        123.4030,
                    new SpatialReference(9,
                            "laudantium",
                            "commodi",
                            "pariatur"),
                        true,
                        true,
                        523.7376)],
                new MosaicRule(true,
                    new RasterFunction("consequatur",
                            "phone",
                        OutputPixelType.U2,
                            "harum",
                            "group"),
                        [1,
                            6,
                            8],
                    Method.Attribute,
                    [new DimensionalDefinition("email",
                            true,
                            "status"),
                    new DimensionalDefinition("group",
                            true,
                            "id"),
                    new DimensionalDefinition("name",
                            true,
                            "name")],
                        [7,
                            2,
                            9,
                            2],
                    Operation.Mean,
                        "voluptate",
                        "quisquam",
                    new Point(-96.5730,
                            -52.7861,
                            161.5201,
                            37.0032,
                            948.7679,
                        new SpatialReference(2,
                                "perferendis",
                                "et",
                                "omnis"),
                            true,
                            true,
                            715.2705),
                        "Province = 'Ontario'"),
                    ["doloremque",
                        "quibusdam",
                        "doloremque"],
                new PixelSize(74.4701,
                        -11.4989,
                    new PixelSizeSpatialReference(8,
                            967.5325)),
                    true,
                    3,
                    364.3398,
                    5,
                new TimeExtent(new DateTime(2023, 9, 14, 8, 36, 47),
                        new DateTime(2000, 9, 14, 2, 19, 20))),
                "unde");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Polyline([new MapPath([new MapPoint([725.0131,
                            325.8602,
                            382.7385]),
                        new MapPoint([523.5367,
                            49.9750,
                            225.9836])]),
                        new MapPath([new MapPoint([655.2656,
                                463.6387,
                                173.6825,
                                320.9763]),
                            new MapPoint([78.6492,
                                822.0277,
                                420.2984]),
                            new MapPoint([117.2011,
                                384.3774,
                                449.6090])]),
                        new MapPath([new MapPoint([85.9181,
                                636.6773]),
                            new MapPoint([517.3104,
                                637.5357,
                                221.7636])]),
                        new MapPath([new MapPoint([470.4263,
                                580.7197,
                                203.6280]),
                            new MapPoint([94.7820,
                                937.0075]),
                            new MapPoint([774.3456,
                                84.4502]),
                            new MapPoint([913.8549,
                                961.5813,
                                66.3296,
                                1.5020])])],
                    new SpatialReference(4,
                            "fugit",
                            "odit",
                            "eius"),
                        true,
                        true),
                    2,
                new MosaicRule(true,
                    new RasterFunction("necessitatibus",
                            "status",
                        OutputPixelType.U8,
                            "modi",
                            "name"),
                        [6,
                            4,
                            5],
                    Method.Seamline,
                    [new DimensionalDefinition("phone",
                            true,
                            "password"),
                    new DimensionalDefinition("phone",
                            true,
                            "title"),
                    new DimensionalDefinition("avatar",
                            true,
                            "phone")],
                        [4,
                            1,
                            8],
                    Operation.Min,
                        "sint",
                        "itaque",
                    new Point(-128.9029,
                            79.6830,
                            -142.1182,
                            83.3272,
                            977.5526,
                        new SpatialReference(6,
                                "cumque",
                                "aut",
                                "ipsa"),
                            true,
                            true,
                            888.7424),
                        "Country = 'Canada'"),
                new PixelSize(-75.2848,
                        36.3313,
                    new PixelSizeSpatialReference(1,
                            635.0693)),
                    true,
                new RasterFunction("quae",
                        "category",
                    OutputPixelType.F32,
                        "debitis",
                        "updatedAt"),
                new RasterFunction("beatae",
                        "comment",
                    OutputPixelType.F32,
                        "eaque",
                        "name"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2009, 3, 8, 3, 28, 55),
                        new DateTime(2000, 9, 18, 21, 37, 28))),
                "facere");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    371.3465,
                new Extent(64.6616,
                        -47.5450,
                        19.7911,
                        -46.6037,
                        945.8129,
                        358.1281,
                        803.9336,
                        688.5906,
                    new SpatialReference(8,
                            "quos",
                            "qui",
                            "omnis"),
                        true,
                        true),
                new SpatialReference(3,
                        "aspernatur",
                        "officiis",
                        "laudantium"),
                    1),
                "ipsam");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Polyline([new MapPath([new MapPoint([921.1717,
                            997.5149,
                            630.8230,
                            616.2608]),
                        new MapPoint([923.1051,
                            76.8801,
                            389.1857])]),
                        new MapPath([new MapPoint([410.3141,
                                754.6726]),
                            new MapPoint([869.7205,
                                480.0401,
                                633.7099,
                                837.8985])])],
                    new SpatialReference(7,
                            "perspiciatis",
                            "sit",
                            "rerum"),
                        true,
                        true),
                new Polygon([new MapPath([new MapPoint([521.1807,
                            70.4480]),
                        new MapPoint([44.9730,
                            650.1969]),
                        new MapPoint([369.5857,
                            600.1421,
                            671.4093,
                            257.2764]),
                        new MapPoint([599.0135,
                            313.5421,
                            17.9687,
                            655.0714])]),
                        new MapPath([new MapPoint([108.4542,
                                150.4290]),
                            new MapPoint([158.8911,
                                661.3686,
                                477.0745,
                                123.4975]),
                            new MapPoint([30.4238,
                                144.9000])]),
                        new MapPath([new MapPoint([994.0530,
                                149.6359,
                                4.0540]),
                            new MapPoint([118.8568,
                                993.1963,
                                166.8698])]),
                        new MapPath([new MapPoint([568.3671,
                                781.6401,
                                177.2944,
                                184.7154]),
                            new MapPoint([389.7248,
                                463.1352,
                                898.2820]),
                            new MapPoint([493.5382,
                                582.7839,
                                395.4743,
                                838.3155]),
                            new MapPoint([747.0266,
                                287.7502])])],
                    new SpatialReference(2,
                            "quis",
                            "sint",
                            "ab"),
                    new Point(42.9682,
                            -52.6958,
                            153.7522,
                            65.2781,
                            325.6752,
                        new SpatialReference(5,
                                "delectus",
                                "consequatur",
                                "unde"),
                            true,
                            true,
                            840.1579),
                        true,
                        true,
                        true),
                new Point(115.7811,
                        65.3146,
                        -66.3747,
                        41.2498,
                        925.6043,
                    new SpatialReference(3,
                            "quibusdam",
                            "aut",
                            "possimus"),
                        true,
                        true,
                        592.1163),
                new Point(-51.1880,
                        11.6823,
                        -111.6020,
                        -73.1606,
                        103.8497,
                    new SpatialReference(9,
                            "ratione",
                            "molestias",
                            "et"),
                        true,
                        true,
                        144.5521)],
                new SpatialReference(7,
                        "numquam",
                        "ut",
                        "laborum"),
                    [1,
                        4,
                        4]),
                "veniam");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Point(81.3335,
                        -28.8049,
                        -149.3062,
                        -21.0653,
                        939.7526,
                    new SpatialReference(3,
                            "distinctio",
                            "autem",
                            "eum"),
                        true,
                        true,
                        53.4745),
                    3,
                    true),
                "natus");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("ut",
                            "status",
                        OutputPixelType.S32,
                            "ea",
                            "email"),
                        [4,
                            3,
                            2,
                            6],
                    Method.LockRaster,
                    [new DimensionalDefinition("comment",
                            true,
                            "id"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "status"),
                    new DimensionalDefinition("group",
                            true,
                            "category")],
                        [2,
                            9,
                            6],
                    Operation.Min,
                        "molestiae",
                        "adipisci",
                    new Point(58.0489,
                            50.8609,
                            45.9581,
                            -48.5470,
                            434.1427,
                        new SpatialReference(2,
                                "non",
                                "illo",
                                "pariatur"),
                            true,
                            true,
                            617.4655),
                        "Country = 'Canada'"),
                new PixelSize(26.7353,
                        -26.4840,
                    new PixelSizeSpatialReference(7,
                            774.5411)),
                ImageAreaUnit.SquareInches,
                new Extent(-111.9050,
                        -18.1093,
                        22.8405,
                        -33.8551,
                        675.1019,
                        175.9064,
                        658.9604,
                        943.7888,
                    new SpatialReference(1,
                            "voluptatibus",
                            "quidem",
                            "ipsum"),
                        true,
                        true),
                    true,
                LengthUnit.UsFeet),
                "aut");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Point(40.1117,
                        15.7376,
                        81.7466,
                        32.9011,
                        936.7797,
                    new SpatialReference(7,
                            "cum",
                            "aliquid",
                            "voluptas"),
                        true,
                        true,
                        661.4851),
                    6),
                "iste");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("et",
                            "status",
                        OutputPixelType.F32,
                            "deleniti",
                            "phone"),
                        [8,
                            5],
                    Method.Viewpoint,
                    [new DimensionalDefinition("password",
                            true,
                            "phone"),
                    new DimensionalDefinition("token",
                            true,
                            "name"),
                    new DimensionalDefinition("title",
                            true,
                            "createdAt"),
                    new DimensionalDefinition("category",
                            true,
                            "phone")],
                        [6,
                            8],
                    Operation.Last,
                        "aut",
                        "iusto",
                    new Point(-94.8046,
                            87.4003,
                            -33.0962,
                            18.8770,
                            758.8041,
                        new SpatialReference(4,
                                "tempora",
                                "aperiam",
                                "eum"),
                            true,
                            true,
                            319.3697),
                        "City = 'Toronto'"),
                new PixelSize(126.0725,
                        58.9722,
                    new PixelSizeSpatialReference(9,
                            150.0737)),
                AngularUnit.Degrees,
                new Point(-107.6333,
                        22.6417,
                        -81.8761,
                        27.1947,
                        594.5231,
                    new SpatialReference(5,
                            "dolor",
                            "modi",
                            "aliquam"),
                        true,
                        true,
                        180.5113),
                    true,
                LengthUnit.Miles,
                new Point(122.7807,
                        -41.3202,
                        -130.7813,
                        -64.2167,
                        996.9193,
                    new SpatialReference(4,
                            "ut",
                            "ipsam",
                            "inventore"),
                        true,
                        true,
                        574.4800)),
                "cumque");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("repudiandae",
                            "password",
                        OutputPixelType.S8,
                            "laborum",
                            "name"),
                        [8,
                            8],
                    Method.LockRaster,
                    [new DimensionalDefinition("token",
                            true,
                            "token")],
                        [3,
                            8,
                            7,
                            5],
                    Operation.Max,
                        "eum",
                        "incidunt",
                    new Point(-72.4385,
                            61.0350,
                            109.7211,
                            -17.5122,
                            258.5162,
                        new SpatialReference(8,
                                "autem",
                                "consectetur",
                                "cupiditate"),
                            true,
                            true,
                            614.3662),
                        "Province = 'Ontario'"),
                new PixelSize(-149.9285,
                        57.6423,
                    new PixelSizeSpatialReference(6,
                            248.5945)),
                new Point(-37.6177,
                        38.1602,
                        135.1015,
                        -21.1780,
                        878.1096,
                    new SpatialReference(7,
                            "minima",
                            "omnis",
                            "est"),
                        true,
                        true,
                        341.3801),
                LengthUnit.Meters,
                OperationType.BaseAndTop,
                new Point(-122.7396,
                        74.5076,
                        -171.2592,
                        -41.1444,
                        687.6682,
                    new SpatialReference(6,
                            "magnam",
                            "pariatur",
                            "quia"),
                        true,
                        true,
                        416.3778)),
                "totam");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polyline([new MapPath([new MapPoint([328.4330,
                            832.0315]),
                        new MapPoint([552.7906,
                            67.1653,
                            230.6297]),
                        new MapPoint([71.0251,
                            908.8570,
                            5.5630,
                            762.6266])])],
                    new SpatialReference(5,
                            "quis",
                            "quas",
                            "quam"),
                        true,
                        true),
                    2),
                "unde");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("perferendis",
                            "createdAt",
                        OutputPixelType.U8,
                            "asperiores",
                            "category"),
                        [5,
                            6],
                    Method.LockRaster,
                    [new DimensionalDefinition("avatar",
                            true,
                            "email")],
                        [9,
                            3],
                    Operation.Sum,
                        "optio",
                        "non",
                    new Point(23.3861,
                            -55.3859,
                            172.9013,
                            60.1199,
                            347.2663,
                        new SpatialReference(6,
                                "dolores",
                                "rerum",
                                "illo"),
                            true,
                            true,
                            302.3510),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(58.9858,
                        24.2217,
                    new PixelSizeSpatialReference(6,
                            984.5787)),
                new Polygon([new MapPath([new MapPoint([303.5054,
                            458.4772,
                            284.9126,
                            151.9423]),
                        new MapPoint([814.3822,
                            198.4325,
                            664.3156]),
                        new MapPoint([652.3286,
                            242.0429,
                            365.0524]),
                        new MapPoint([27.0876,
                            398.7330,
                            385.1747])]),
                        new MapPath([new MapPoint([931.6252,
                                685.3480]),
                            new MapPoint([214.8923,
                                466.9452,
                                442.5203,
                                839.9667]),
                            new MapPoint([469.4455,
                                875.9869])]),
                        new MapPath([new MapPoint([768.0037,
                                134.7262,
                                871.9003,
                                853.8365]),
                            new MapPoint([981.6501,
                                154.7440,
                                945.1277])])],
                    new SpatialReference(7,
                            "cumque",
                            "deserunt",
                            "adipisci"),
                    new Point(74.5555,
                            15.2586,
                            174.6800,
                            -81.8075,
                            76.7657,
                        new SpatialReference(4,
                                "saepe",
                                "doloribus",
                                "neque"),
                            true,
                            true,
                            974.2440),
                        true,
                        true,
                        true),
                    true),
                "deserunt");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(8,
                        "aspernatur",
                        "sint",
                        "odit")),
                "fugit");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Polyline([new MapPath([new MapPoint([197.9239,
                            251.1587,
                            781.0719]),
                        new MapPoint([932.1529,
                            768.7928,
                            479.5916,
                            617.7287]),
                        new MapPoint([411.1022,
                            53.6056]),
                        new MapPoint([777.6707,
                            608.9665,
                            304.0730])]),
                        new MapPath([new MapPoint([184.6225,
                                905.2098,
                                738.1274]),
                            new MapPoint([209.7968,
                                140.7344,
                                769.4869,
                                577.4363])])],
                    new SpatialReference(3,
                            "voluptas",
                            "atque",
                            "nemo"),
                        true,
                        true),
                    [2,
                        4],
                SpatialRelationship.Intersects,
                new TimeExtent(new DateTime(2002, 8, 8, 8, 56, 34),
                        new DateTime(2016, 7, 19, 7, 56, 33)),
                    "Country = 'Canada'"),
                "cupiditate");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([4,
                    1,
                    7,
                    8],
                    true,
                    927.5237,
                    407.8362,
                    "9.4.5.2",
                new Point(63.9496,
                        72.5875,
                        -19.9321,
                        32.5785,
                        28.8562,
                    new SpatialReference(8,
                            "aut",
                            "repellendus",
                            "quas"),
                        true,
                        true,
                        293.8206),
                    4,
                    ["qui",
                        "neque"],
                    "dolorem",
                    new DateTime(2002, 2, 26, 4, 2, 48),
                    384.5955,
                    6,
                    "consequatur",
                    6),
                "et");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([4,
                    2,
                    3],
                    true,
                    110.9063,
                    527.7030,
                    "6.3.4.7",
                new Extent(-112.6057,
                        56.4502,
                        -42.1947,
                        -52.2016,
                        431.9012,
                        457.7605,
                        273.4572,
                        557.3109,
                    new SpatialReference(5,
                            "rem",
                            "voluptatem",
                            "voluptas"),
                        true,
                        true),
                    7,
                    ["adipisci",
                        "maxime",
                        "quos",
                        "ut"],
                    "consequuntur",
                    new DateTime(2008, 5, 7, 16, 8, 16),
                    160.2528,
                    5,
                    "dolor",
                    4),
                "eum");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([6,
                    5],
                    true,
                    242.4523,
                    487.2543,
                    "6.8.9.1",
                new Point(26.5532,
                        -51.2514,
                        -137.2887,
                        -13.6913,
                        184.2063,
                    new SpatialReference(4,
                            "et",
                            "non",
                            "qui"),
                        true,
                        true,
                        373.4614),
                    4,
                    ["molestiae",
                        "enim"],
                    "dolores",
                    new DateTime(2015, 6, 19, 2, 27, 12),
                    800.2848,
                    1,
                    "veniam",
                    7),
                "libero");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "nulla",
                    "veniam",
                    963.8619,
                    ["voluptatibus",
                        "porro",
                        "cumque"],
                    new DateTime(2005, 7, 26, 14, 43, 19),
                    "dolores",
                    "temporibus animi ut aut tenetur est",
                new Extent(-120.8416,
                        -131.7185,
                        11.1780,
                        -68.6424,
                        173.5749,
                        883.6660,
                        609.8597,
                        644.8239,
                    new SpatialReference(8,
                            "et",
                            "est",
                            "quae"),
                        true,
                        true),
                    ["voluptates",
                        "architecto",
                        "perspiciatis",
                        "magnam"],
                    "vitae",
                    new DateTime(2013, 8, 15, 13, 54, 17),
                    "group",
                    773.8235),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2020, 2, 16, 5, 25, 56),
                        "est",
                        "aut deserunt ipsam"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Private,
                    "eum",
                    "fugit",
                    719.8219,
                    ["labore",
                        "cupiditate"],
                    new DateTime(2013, 7, 6, 18, 21, 26),
                    "ut",
                    "modi molestias provident at dolor velit et",
                new Extent(-79.8304,
                        179.9531,
                        -80.3269,
                        -71.1692,
                        113.1791,
                        925.4681,
                        6.2486,
                        426.2078,
                    new SpatialReference(8,
                            "quae",
                            "ut",
                            "rem"),
                        true,
                        true),
                    ["tenetur",
                        "neque",
                        "iusto"],
                    "tenetur",
                    new DateTime(2008, 2, 8, 11, 32, 32),
                    "category",
                    245.8563);
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Screen;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Tiff;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Nearest;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAll;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.S16;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2020, 9, 12, 9, 13, 49),
                    new DateTime(2019, 11, 26, 15, 10, 42));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("modi",
                    "qui",
                new TimeExtent(new DateTime(2013, 6, 21, 2, 50, 19),
                        new DateTime(2012, 1, 27, 6, 3, 56)),
                new TimeInterval(TemporalTime.Centuries,
                        87.3752),
                    [new DateTime(2018, 5, 20, 12, 53, 3),
                        new DateTime(2021, 11, 24, 8, 32, 31)],
                    "Australia/Adelaide",
                    "quia");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    669.5100);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(-46.0728,
                    28.8584,
                    4.8230,
                    44.0244,
                    82.8805,
                    183.9477,
                    446.5698,
                    304.4510,
                new SpatialReference(3,
                        "id",
                        "labore",
                        "est"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(5,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "status",
                    "delectus",
                    "laudantium et assumenda molestiae natus ipsam rem",
                    6,
                    true,
                    true,
                    new { Value = "illum" },
                FieldValueType.OrderedOrRanked,
                new InheritedDomain("status")),
            new Field(default,
                    "id",
                    "accusantium",
                    "accusantium quam eligendi illum consequatur",
                    3,
                    true,
                    true,
                    new { Value = "aut" },
                FieldValueType.LocationOrPlaceName,
                new RangeDomain("incidunt",
                        "ullam",
                        "password"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("sint",
                        "id",
                    OutputPixelType.U8,
                        "quisquam",
                        "group"),
                    [7,
                        5],
                Method.Nadir,
                [new DimensionalDefinition("phone",
                        true,
                        "createdAt"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "token"),
                new DimensionalDefinition("createdAt",
                        true,
                        "group"),
                new DimensionalDefinition("status",
                        true,
                        "status")],
                    [7,
                        1],
                Operation.Max,
                    "nihil",
                    "eligendi",
                new Point(-155.5140,
                        14.2231,
                        121.7316,
                        39.6368,
                        258.5446,
                    new SpatialReference(1,
                            "et",
                            "sed",
                            "eaque"),
                        true,
                        true,
                        523.0568),
                    "Phone = '555-555-5555'");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polyline([new MapPath([new MapPoint([184.8609,
                            663.9940]),
                        new MapPoint([695.7744,
                            63.4335,
                            611.0731]),
                        new MapPoint([607.1252,
                            959.5341,
                            174.2707])]),
                        new MapPath([new MapPoint([739.5650,
                                211.4554]),
                            new MapPoint([637.9221,
                                815.6588]),
                            new MapPoint([517.0843,
                                663.2262,
                                589.6929])]),
                        new MapPath([new MapPoint([517.3901,
                                878.4130,
                                975.4725,
                                56.7107]),
                            new MapPoint([75.6740,
                                250.1542,
                                17.9104,
                                500.8542]),
                            new MapPoint([842.9686,
                                888.0706])]),
                        new MapPath([new MapPoint([157.2498,
                                889.6322]),
                            new MapPoint([426.3004,
                                117.8072,
                                971.8928]),
                            new MapPoint([602.7234,
                                486.7847,
                                420.3815,
                                743.2282]),
                            new MapPoint([533.1727,
                                701.0600,
                                608.3600])])],
                    new SpatialReference(8,
                            "beatae",
                            "nesciunt",
                            "aliquid"),
                        true,
                        true),
                [new DimensionalDefinition("comment",
                        true,
                        "token"),
                new DimensionalDefinition("comment",
                        true,
                        "createdAt"),
                new DimensionalDefinition("category",
                        true,
                        "group")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("nisi labore repudiandae",
                    "unde",
                    ["consequatur",
                        "sed",
                        "dolores",
                        "est"],
                [new FieldInfo("password",
                        "dolor",
                        "autem",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateShortTime),
                        true,
                        true,
                    StatisticType.Max),
                new FieldInfo("id",
                        "aliquam",
                        "magni",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.LongMonthDayYearLongTime24),
                        true,
                        true,
                    StatisticType.Sum)],
                [new AttachmentsPopupContent("eum maiores officia",
                        "totam molestiae quis autem ab est praesentium",
                        AttachmentsPopupContentDisplayType.Preview),
                new TextPopupContent("sit et debitis")],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "name",
                        "dolores consequatur perferendis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "token",
                        "modi mollitia quia",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "status",
                        "officiis rerum temporibus",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature['FieldName'];",
                        "group",
                        "minima dolor error",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("optio laudantium occaecati",
                        "c213d539-a108-b761-c8b7-85683ccbe3ba",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "status",
                        "dicta"),
                new ActionToggle("dolore est molestiae",
                        "0620bf48-c080-368e-537e-91eff6bb7e7a",
                        () => { Console.WriteLine("est"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "comment",
                        "quo"),
                new ActionToggle("excepturi ullam et",
                        "ac2a4411-2245-b174-0deb-b10341f1f9a8",
                        () => { Console.WriteLine("quo"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "token",
                        "occaecati")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("repellendus",
                    "name",
                OutputPixelType.U1,
                    "odio",
                    "createdAt");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2016, 8, 26, 16, 42, 36),
                    new DateTime(2007, 5, 16, 8, 41, 28));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
