@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(25, 75, 66),
                                new MapColor(39, 211, 93)),
                            true,
                            true,
                            [5,
                            7,
                            3,
                            8],
                            4,
                            2,
                            StretchType.HistogramEqualization,
                            [new RasterBandStatistics(521.5720,
                                2,
                                546.1200,
                                447.1638,
                                632.9238,
                                127.2824,
                                975.2772,
                                698.4975),
                            new RasterBandStatistics(799.6607,
                                6,
                                255.2029,
                                700.6689,
                                522.1724,
                                625.9930,
                                395.0047,
                                330.3148),
                            new RasterBandStatistics(612.7611,
                                4,
                                74.1240,
                                940.1118,
                                789.0084,
                                584.7357,
                                375.7810,
                                811.4886)],
                            true,
                            5))"
                        BandIds="@([5,
                            8])"
                        BlendMode="@(BlendMode.Lighter)"
                        CompressionQuality="@(490.0300)"
                        CompressionTolerance="@(900.7152)"
                        Copyright="@("ratione")"
                        DefinitionExpression="@("hic")"
                        Effect="@(new Effect("ut",
                            35394813.7592))"
                        Format="@(ImageFormat.Png)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(8)"
                        ImageMaxWidth="@(7)"
                        Interpolation="@(Interpolation.Majority)"
                        LegendEnabled="@(true)"
                        MaxScale="@(31550894.9848)"
                        MinScale="@(31044.8557)"
                        NoData="@(new NoData([3,
                            7]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAny)"
                        ObjectIdField="@("soluta")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.S8)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(953.2945)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(254.2240,
                                TileInfoFormat.Dib,
                                true,
                            [new LOD(7,
                                    "esse",
                                    10.1250,
                                    24147333.7974)],
                            new Point(-55.2272,
                                    -88.5888,
                                    -103.5602,
                                    83.8082,
                                    404.0148,
                                new SpatialReference(2,
                                        "fuga",
                                        "atque",
                                        "nostrum"),
                                    true,
                                    true,
                                    778.7379),
                                [1,
                                    5,
                                    5],
                            new SpatialReference(2,
                                    "beatae",
                                    "maxime",
                                    "incidunt")))"
                        Title="@("et nihil quisquam")"
                        Opacity="@(0.9111)"
                        ListMode="@(ListMode.Show)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(154.9455,
                                -23.1380,
                                2.9823,
                                80.4185,
                                490.1364,
                                200.3600,
                                74.4595,
                                735.7400,
                            new SpatialReference(6,
                                    "aliquid",
                                    "vero",
                                    "fugit"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("voluptas",
                                    "category",
                                OutputPixelType.U8,
                                    "aut",
                                    "phone"),
                                [6,
                                    6],
                            Method.Nadir,
                            [new DimensionalDefinition("category",
                                    true,
                                    "token"),
                            new DimensionalDefinition("name",
                                    true,
                                    "group")],
                                [1,
                                    4],
                            Operation.Mean,
                                "non",
                                "ipsam",
                            new Point(46.8740,
                                    46.3396,
                                    -21.8863,
                                    64.7525,
                                    663.2804,
                                new SpatialReference(4,
                                        "qui",
                                        "vel",
                                        "in"),
                                    true,
                                    true,
                                    676.8409),
                                "Age > 21"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Minutes)"
                            Value="@(408.3706)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptatem")"
                            EndField="@("quis")"
                            Stops="@([new DateTime(2004, 5, 12, 14, 55, 45),
                                new DateTime(2018, 6, 20, 6, 11, 25),
                                new DateTime(2004, 10, 17, 22, 7, 12),
                                new DateTime(2011, 1, 9, 11, 55, 7)])"
                            TimeZone="@("America/Phoenix")"
                            TrackIdField="@("et")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Decades)"
                                Value="@(462.9021)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2021, 6, 24, 0, 25, 19))"
                                End="@(new DateTime(2012, 9, 16, 19, 5, 18))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2011, 7, 25, 5, 32, 2))"
                            End="@(new DateTime(2022, 1, 15, 21, 19, 30))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("iste")"
                            FunctionName="@("phone")"
                            OutputPixelType="@(OutputPixelType.C128)"
                            RasterFunctionDefinition="@("neque")"
                            VariableName="@("token")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("voluptas numquam quia")"
                            StringContent="@("vel")"
                            OutFields="@(["iste",
                                "suscipit",
                                "et"])"
                            FieldInfos="@([new FieldInfo("password",
                                    "odit",
                                    "quis",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new MediaPopupContent("velit harum architecto",
                                    "nesciunt adipisci illo minima non",
                                [new LineChartMediaInfo("corporis autem et",
                                        "est",
                                        "sapiente maiores quia",
                                    new ChartMediaInfoValue(["in",
                                            "blanditiis"],
                                            "ea",
                                            "aut",
                                        [new ChartMediaInfoValueSeries("name",
                                                "dolores",
                                                369.0240),
                                        new ChartMediaInfoValueSeries("password",
                                                "dolorem",
                                                417.2733),
                                        new ChartMediaInfoValueSeries("createdAt",
                                                "dolores",
                                                600.6348)],
                                        [new MapColor(239, 194, 250),
                                        new MapColor(168, 53, 9)])),
                                new ColumnChartMediaInfo("dolor molestiae consequatur",
                                        "quis",
                                        "molestiae omnis aut",
                                    new ChartMediaInfoValue(["quas",
                                            "in",
                                            "nihil",
                                            "nostrum"],
                                            "molestias",
                                            "ut",
                                        [new ChartMediaInfoValueSeries("group",
                                                "reprehenderit",
                                                318.7540),
                                        new ChartMediaInfoValueSeries("email",
                                                "non",
                                                190.5505),
                                        new ChartMediaInfoValueSeries("password",
                                                "placeat",
                                                792.6791),
                                        new ChartMediaInfoValueSeries("category",
                                                "dolores",
                                                342.5092)],
                                        [new MapColor(75, 225, 231),
                                        new MapColor(5, 172, 153),
                                        new MapColor(138, 66, 49),
                                        new MapColor(28, 17, 70)])),
                                new PieChartMediaInfo("magni nesciunt officiis",
                                        "aliquam",
                                        "laboriosam qui asperiores",
                                    new ChartMediaInfoValue(["dolorum",
                                            "eaque",
                                            "quia"],
                                            "dignissimos",
                                            "et",
                                        [new ChartMediaInfoValueSeries("name",
                                                "rerum",
                                                892.1136),
                                        new ChartMediaInfoValueSeries("title",
                                                "odio",
                                                273.8515)],
                                        [new MapColor(62, 174, 76),
                                        new MapColor(5, 163, 123),
                                        new MapColor(206, 121, 203),
                                        new MapColor(243, 157, 183)])),
                                new BarChartMediaInfo("et id veritatis",
                                        "iusto",
                                        "aut expedita est",
                                    new ChartMediaInfoValue(["aperiam",
                                            "temporibus",
                                            "sunt"],
                                            "voluptas",
                                            "et",
                                        [new ChartMediaInfoValueSeries("phone",
                                                "vitae",
                                                876.6452),
                                        new ChartMediaInfoValueSeries("status",
                                                "alias",
                                                449.7027)],
                                        [new MapColor(77, 96, 24)]))],
                                    6),
                            new TextPopupContent("dolores facilis et"),
                            new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                                        "excepturi",
                                        "tempore quia magnam"))])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "updatedAt",
                                    "totam illo qui",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "password",
                                    "aut iste et",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "status",
                                    "officia maxime mollitia",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("nam assumenda quis",
                                    "https://picsum.photos/640/480/?image=393",
                                    "4682ae52-5747-7362-8047-506d40a62bc3",
                                    () => { Console.WriteLine("omnis"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "aut"),
                            new ActionToggle("accusantium quos autem",
                                    "3de8681d-0d30-e2e8-c9c7-a2b86e56e815",
                                    () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "phone",
                                    "possimus"),
                            new ActionButton("aspernatur et adipisci",
                                    "https://picsum.photos/640/480/?image=229",
                                    "23b08527-157d-e47d-4c44-84a7c1ecc6a3",
                                    () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                                    "title",
                                    true,
                                    true,
                                    true,
                                    "vero"),
                            new ActionButton("officia repellendus accusantium",
                                    "https://picsum.photos/640/480/?image=23",
                                    "3c158931-f5df-7b63-7341-6fa7aab9d2ab",
                                    () => { Console.WriteLine("quae"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "ullam")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Point(46.7917,
                                    -25.3232,
                                    -37.8762,
                                    26.6000,
                                    690.6558,
                                new SpatialReference(2,
                                        "ullam",
                                        "iusto",
                                        "dolor"),
                                    true,
                                    true,
                                    45.5445))"
                            SubsetDefinitions="@([new DimensionalDefinition("status",
                                    true,
                                    "createdAt"),
                            new DimensionalDefinition("createdAt",
                                    true,
                                    "comment"),
                            new DimensionalDefinition("updatedAt",
                                    true,
                                    "comment"),
                            new DimensionalDefinition("token",
                                    true,
                                    "createdAt")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("token")"
                            Alias="@("voluptatem")"
                            Description="@("quo voluptatem perspiciatis tempore illo aut")"
                            Length="@(6)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "dolorem" })"
                            ValueType="@(FieldValueType.LocationOrPlaceName)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(6,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["id",
                    "category",
                    "password",
                    "updatedAt"],
                new Point(97.1429,
                        83.2273,
                        -44.1292,
                        40.9557,
                        649.6381,
                    new SpatialReference(4,
                            "similique",
                            "corrupti",
                            "iste"),
                        true,
                        true,
                        737.5089),
                    5,
                new SpatialReference(3,
                        "eos",
                        "quaerat",
                        "ipsum")),
                "quas");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([89.5938,
                            414.3337]),
                        new MapPoint([1.6811,
                            763.0401,
                            827.5936,
                            270.4343])]),
                        new MapPath([new MapPoint([225.1800,
                                154.1152,
                                128.3055]),
                            new MapPoint([156.0361,
                                108.0225,
                                400.6022]),
                            new MapPoint([686.1988,
                                487.5659]),
                            new MapPoint([816.8975,
                                517.5724,
                                38.2955])]),
                        new MapPath([new MapPoint([986.6754,
                                679.2711]),
                            new MapPoint([103.4049,
                                175.7011,
                                905.3482]),
                            new MapPoint([290.1407,
                                10.9792,
                                111.0250,
                                669.1277]),
                            new MapPoint([725.4362,
                                187.9103,
                                470.4467])]),
                        new MapPath([new MapPoint([822.1442,
                                845.4089,
                                784.4638,
                                381.3682]),
                            new MapPoint([453.7488,
                                20.1041]),
                            new MapPoint([599.8742,
                                141.2501,
                                338.5998,
                                727.3459])])],
                    new SpatialReference(2,
                            "accusantium",
                            "aut",
                            "quisquam"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("ut",
                            "password",
                        OutputPixelType.S32,
                            "qui",
                            "name"),
                        [4,
                            7],
                    Method.Seamline,
                    [new DimensionalDefinition("group",
                            true,
                            "category"),
                    new DimensionalDefinition("title",
                            true,
                            "name"),
                    new DimensionalDefinition("password",
                            true,
                            "phone"),
                    new DimensionalDefinition("password",
                            true,
                            "password")],
                        [2,
                            1,
                            4,
                            9],
                    Operation.Max,
                        "ad",
                        "excepturi",
                    new Point(-60.3881,
                            28.7399,
                            162.3614,
                            77.0365,
                            826.0417,
                        new SpatialReference(5,
                                "rem",
                                "quod",
                                "blanditiis"),
                            true,
                            true,
                            557.8946),
                        "Province = 'Ontario'"),
                new PixelSize(-137.3421,
                        -62.9364,
                    new PixelSizeSpatialReference(7,
                            869.0347)),
                new RasterFunction("reiciendis",
                        "createdAt",
                    OutputPixelType.U1,
                        "nisi",
                        "category"),
                new TimeExtent(new DateTime(2007, 9, 8, 16, 32, 25),
                        new DateTime(2003, 7, 5, 9, 36, 15))),
                "blanditiis");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(49.3846,
                        6.3111,
                        -127.1841,
                        37.7318,
                        33.8855,
                    new SpatialReference(3,
                            "omnis",
                            "illum",
                            "error"),
                        true,
                        true,
                        328.7889),
                new Point(-138.0798,
                        -60.3334,
                        88.5857,
                        41.1222,
                        622.4963,
                    new SpatialReference(2,
                            "modi",
                            "voluptatem",
                            "ducimus"),
                        true,
                        true,
                        865.9710),
                new Point(156.1375,
                        -20.7855,
                        -46.2411,
                        -55.4875,
                        374.7026,
                    new SpatialReference(5,
                            "quo",
                            "at",
                            "porro"),
                        true,
                        true,
                        774.9143),
                new Point(-68.9961,
                        59.8443,
                        -18.6027,
                        72.2992,
                        109.5028,
                    new SpatialReference(5,
                            "iste",
                            "deleniti",
                            "veniam"),
                        true,
                        true,
                        380.5972)],
                    8),
                "quia");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Point(62.2332,
                        78.9075,
                        151.8565,
                        35.9728,
                        981.8999,
                    new SpatialReference(5,
                            "recusandae",
                            "laboriosam",
                            "modi"),
                        true,
                        true,
                        941.7002),
                new MosaicRule(true,
                    new RasterFunction("vel",
                            "avatar",
                        OutputPixelType.C128,
                            "reiciendis",
                            "title"),
                        [6,
                            3,
                            7],
                    Method.Center,
                    [new DimensionalDefinition("title",
                            true,
                            "group"),
                    new DimensionalDefinition("phone",
                            true,
                            "group")],
                        [7,
                            2,
                            4],
                    Operation.Min,
                        "consectetur",
                        "maiores",
                    new Point(25.4170,
                            46.5630,
                            -51.0274,
                            -83.5664,
                            732.1326,
                        new SpatialReference(7,
                                "distinctio",
                                "voluptatem",
                                "eius"),
                            true,
                            true,
                            544.7675),
                        "1 = 1"),
                new PixelSize(-79.3165,
                        -31.9059,
                    new PixelSizeSpatialReference(3,
                            544.0483)),
                new RasterFunction("repellat",
                        "createdAt",
                    OutputPixelType.S8,
                        "qui",
                        "updatedAt"),
                new TimeExtent(new DateTime(2004, 9, 11, 0, 46, 15),
                        new DateTime(2019, 4, 24, 8, 30, 44))),
                "nesciunt");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["hic",
                    "cum"],
                    ["password",
                        "status"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-128.3090,
                    -41.2525,
                    54.9317,
                    -89.8712,
                    546.5269,
                    560.2821,
                    612.6352,
                    634.1750,
                new SpatialReference(7,
                        "ut",
                        "vel",
                        "veniam"),
                    true,
                    true),
                9,
                3,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(-113.6488,
                        7.5948,
                        -50.0987,
                        77.4969,
                        499.6312,
                    new SpatialReference(1,
                            "nulla",
                            "architecto",
                            "tempora"),
                        true,
                        true,
                        788.1411),
                    7,
                    [9,
                        2],
                new Point(-175.8920,
                        5.0489,
                        -20.5686,
                        -77.4447,
                        99.0953,
                    new SpatialReference(7,
                            "esse",
                            "nostrum",
                            "non"),
                        true,
                        true,
                        107.8535),
                    "Age > 21"),
                "quidem");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("ut",
                    "token",
                OutputPixelType.F64,
                    "quae",
                    "group"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(9,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(3,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(7,
                    "ab"),
                "quis");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Extent(137.5319,
                        -174.8100,
                        -86.1521,
                        11.1104,
                        781.0335,
                        877.4380,
                        274.6861,
                        330.9809,
                    new SpatialReference(9,
                            "magni",
                            "eos",
                            "libero"),
                        true,
                        true),
                Interpolation.Cubic,
                [new Point(-18.8793,
                        24.6821,
                        153.1991,
                        89.1510,
                        349.4327,
                    new SpatialReference(3,
                            "aut",
                            "velit",
                            "exercitationem"),
                        true,
                        true,
                        92.8191),
                new Point(33.4052,
                        -10.1645,
                        118.3510,
                        -84.9500,
                        880.4651,
                    new SpatialReference(9,
                            "quasi",
                            "debitis",
                            "quo"),
                        true,
                        true,
                        441.6204)],
                new MosaicRule(true,
                    new RasterFunction("minima",
                            "createdAt",
                        OutputPixelType.Unknown,
                            "dolor",
                            "updatedAt"),
                        [7,
                            5,
                            8,
                            5],
                    Method.Seamline,
                    [new DimensionalDefinition("updatedAt",
                            true,
                            "group"),
                    new DimensionalDefinition("name",
                            true,
                            "token"),
                    new DimensionalDefinition("title",
                            true,
                            "group"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "password")],
                        [3,
                            8,
                            5,
                            7],
                    Operation.Mean,
                        "et",
                        "veniam",
                    new Point(-47.9528,
                            52.2564,
                            -160.1541,
                            81.2786,
                            100.5888,
                        new SpatialReference(5,
                                "aut",
                                "aspernatur",
                                "est"),
                            true,
                            true,
                            119.4885),
                        "Street = '123 Main St.'"),
                    ["quo",
                        "quo"],
                new PixelSize(97.6146,
                        -75.5401,
                    new PixelSizeSpatialReference(3,
                            889.8482)),
                    true,
                    2,
                    50.1371,
                    4,
                new TimeExtent(new DateTime(2007, 10, 3, 1, 9, 44),
                        new DateTime(2011, 4, 17, 13, 47, 9))),
                "est");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Polygon([new MapPath([new MapPoint([517.8082,
                            826.2577,
                            744.3156,
                            120.5830]),
                        new MapPoint([924.4328,
                            549.2862,
                            152.6935]),
                        new MapPoint([755.3216,
                            409.4068,
                            505.2153,
                            851.5517])]),
                        new MapPath([new MapPoint([16.6673,
                                299.1387,
                                777.9644,
                                850.7435]),
                            new MapPoint([703.4071,
                                259.4691]),
                            new MapPoint([435.2943,
                                929.2487,
                                516.7655,
                                784.6562]),
                            new MapPoint([800.4229,
                                659.6107])]),
                        new MapPath([new MapPoint([4.7753,
                                175.7097]),
                            new MapPoint([739.3360,
                                537.0622]),
                            new MapPoint([313.0148,
                                104.5765]),
                            new MapPoint([786.2090,
                                515.4689])])],
                    new SpatialReference(4,
                            "necessitatibus",
                            "aut",
                            "et"),
                    new Point(-64.7434,
                            39.4519,
                            -139.3028,
                            -71.3750,
                            725.3397,
                        new SpatialReference(8,
                                "magni",
                                "ipsam",
                                "voluptates"),
                            true,
                            true,
                            440.4662),
                        true,
                        true,
                        true),
                    1,
                new MosaicRule(true,
                    new RasterFunction("sint",
                            "name",
                        OutputPixelType.F64,
                            "est",
                            "token"),
                        [6,
                            3,
                            1,
                            9],
                    Method.Nadir,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "createdAt"),
                    new DimensionalDefinition("email",
                            true,
                            "comment"),
                    new DimensionalDefinition("token",
                            true,
                            "name"),
                    new DimensionalDefinition("avatar",
                            true,
                            "createdAt")],
                        [6,
                            2,
                            2],
                    Operation.Sum,
                        "voluptates",
                        "id",
                    new Point(119.3418,
                            55.4861,
                            -11.3685,
                            11.0042,
                            80.6894,
                        new SpatialReference(2,
                                "rem",
                                "quia",
                                "sequi"),
                            true,
                            true,
                            194.0516),
                        "ObjectID = 1"),
                new PixelSize(-130.9471,
                        72.8179,
                    new PixelSizeSpatialReference(5,
                            747.0205)),
                    true,
                new RasterFunction("saepe",
                        "updatedAt",
                    OutputPixelType.F32,
                        "dignissimos",
                        "title"),
                new RasterFunction("perferendis",
                        "id",
                    OutputPixelType.C128,
                        "pariatur",
                        "comment"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2007, 2, 3, 15, 22, 0),
                        new DateTime(2010, 6, 8, 15, 1, 56))),
                "omnis");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    788.2585,
                new Polyline([new MapPath([new MapPoint([56.1159,
                            468.1605,
                            528.8289]),
                        new MapPoint([675.4969,
                            161.0059,
                            968.9594,
                            123.2495]),
                        new MapPoint([183.2090,
                            835.5515,
                            52.8035])])],
                    new SpatialReference(7,
                            "vel",
                            "eveniet",
                            "sed"),
                        true,
                        true),
                new SpatialReference(6,
                        "iure",
                        "quidem",
                        "in"),
                    5),
                "quod");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Polyline([new MapPath([new MapPoint([393.2649,
                            424.5182,
                            341.8004]),
                        new MapPoint([447.3017,
                            354.6955,
                            705.1696,
                            748.2339]),
                        new MapPoint([456.1021,
                            536.6317,
                            527.9463]),
                        new MapPoint([700.8649,
                            568.1533])]),
                        new MapPath([new MapPoint([241.6848,
                                781.5797,
                                256.4695,
                                469.3552]),
                            new MapPoint([653.1535,
                                241.3427,
                                130.4052])]),
                        new MapPath([new MapPoint([83.4318,
                                308.8566,
                                550.5528,
                                316.3779]),
                            new MapPoint([852.0615,
                                90.5287]),
                            new MapPoint([868.8379,
                                769.1358,
                                876.1351])])],
                    new SpatialReference(3,
                            "vero",
                            "similique",
                            "in"),
                        true,
                        true)],
                new SpatialReference(7,
                        "consequatur",
                        "maiores",
                        "aliquam"),
                    [7,
                        2,
                        1]),
                "rerum");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Extent(91.7202,
                        11.1505,
                        -35.4984,
                        5.9031,
                        706.6891,
                        594.3605,
                        250.6752,
                        743.4014,
                    new SpatialReference(5,
                            "voluptas",
                            "odio",
                            "libero"),
                        true,
                        true),
                    5,
                    true),
                "et");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("enim",
                            "status",
                        OutputPixelType.F64,
                            "architecto",
                            "group"),
                        [1,
                            7,
                            5,
                            5],
                    Method.None,
                    [new DimensionalDefinition("comment",
                            true,
                            "id"),
                    new DimensionalDefinition("category",
                            true,
                            "title"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "phone"),
                    new DimensionalDefinition("token",
                            true,
                            "updatedAt")],
                        [4,
                            2,
                            2],
                    Operation.Sum,
                        "aperiam",
                        "harum",
                    new Point(-38.5564,
                            53.7497,
                            151.3236,
                            -50.6475,
                            519.5083,
                        new SpatialReference(9,
                                "cum",
                                "facilis",
                                "sint"),
                            true,
                            true,
                            619.9998),
                        "Name = 'John Doe'"),
                new PixelSize(-120.5999,
                        66.5387,
                    new PixelSizeSpatialReference(5,
                            623.9430)),
                ImageAreaUnit.SquareDecimeters,
                new Point(-143.4774,
                        -46.1483,
                        -3.8758,
                        -43.8666,
                        603.0779,
                    new SpatialReference(4,
                            "tenetur",
                            "odit",
                            "in"),
                        true,
                        true,
                        710.8306),
                    true,
                LengthUnit.Kilometers),
                "sed");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Extent(82.9016,
                        -145.1431,
                        57.3088,
                        5.4614,
                        464.2663,
                        995.5924,
                        378.7835,
                        23.8640,
                    new SpatialReference(1,
                            "voluptatum",
                            "porro",
                            "pariatur"),
                        true,
                        true),
                    5),
                "voluptate");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("modi",
                            "updatedAt",
                        OutputPixelType.S32,
                            "repudiandae",
                            "group"),
                        [8,
                            2,
                            8],
                    Method.Center,
                    [new DimensionalDefinition("title",
                            true,
                            "category"),
                    new DimensionalDefinition("comment",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("updatedAt",
                            true,
                            "comment")],
                        [1,
                            8],
                    Operation.Last,
                        "consequuntur",
                        "quasi",
                    new Point(74.4739,
                            64.3960,
                            -34.8770,
                            -73.6163,
                            773.4793,
                        new SpatialReference(7,
                                "nihil",
                                "eum",
                                "aut"),
                            true,
                            true,
                            432.3157),
                        "Age > 21"),
                new PixelSize(117.2652,
                        -39.4656,
                    new PixelSizeSpatialReference(5,
                            527.4018)),
                AngularUnit.Degrees,
                new Point(0.1181,
                        6.8125,
                        143.7480,
                        -2.8343,
                        169.1358,
                    new SpatialReference(3,
                            "ipsum",
                            "ea",
                            "quia"),
                        true,
                        true,
                        608.4325),
                    true,
                LengthUnit.Yards,
                new Point(-124.4798,
                        74.2683,
                        -154.4861,
                        45.6969,
                        909.7960,
                    new SpatialReference(7,
                            "nobis",
                            "quisquam",
                            "commodi"),
                        true,
                        true,
                        924.3584)),
                "ipsam");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("ad",
                            "createdAt",
                        OutputPixelType.U2,
                            "sint",
                            "email"),
                        [4,
                            3,
                            2,
                            7],
                    Method.Northwest,
                    [new DimensionalDefinition("status",
                            true,
                            "group"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "comment"),
                    new DimensionalDefinition("email",
                            true,
                            "title"),
                    new DimensionalDefinition("password",
                            true,
                            "email")],
                        [2,
                            2,
                            2,
                            3],
                    Operation.First,
                        "sapiente",
                        "iure",
                    new Point(-28.5433,
                            48.9079,
                            164.6953,
                            -88.0154,
                            513.8395,
                        new SpatialReference(1,
                                "autem",
                                "sunt",
                                "ab"),
                            true,
                            true,
                            531.9901),
                        "Phone = '555-555-5555'"),
                new PixelSize(109.5611,
                        -47.8181,
                    new PixelSizeSpatialReference(4,
                            62.5316)),
                new Point(132.5895,
                        -37.7915,
                        -51.0349,
                        -79.3552,
                        489.7519,
                    new SpatialReference(5,
                            "eum",
                            "sed",
                            "repellat"),
                        true,
                        true,
                        370.2941),
                LengthUnit.Millimeters,
                OperationType.BaseAndTop,
                new Point(-148.6586,
                        78.2918,
                        172.3888,
                        -28.0162,
                        778.7201,
                    new SpatialReference(9,
                            "et",
                            "enim",
                            "sapiente"),
                        true,
                        true,
                        460.5057)),
                "ut");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Point(-54.7872,
                        -15.7954,
                        108.8074,
                        -79.1153,
                        893.5485,
                    new SpatialReference(7,
                            "assumenda",
                            "nesciunt",
                            "quas"),
                        true,
                        true,
                        263.0824),
                    2),
                "rem");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("fugit",
                            "status",
                        OutputPixelType.U8,
                            "dolores",
                            "status"),
                        [3,
                            2,
                            8,
                            6],
                    Method.Viewpoint,
                    [new DimensionalDefinition("password",
                            true,
                            "group")],
                        [9,
                            3,
                            6],
                    Operation.Blend,
                        "aut",
                        "facere",
                    new Point(160.1506,
                            1.2462,
                            -146.6948,
                            -67.2447,
                            407.2251,
                        new SpatialReference(1,
                                "et",
                                "id",
                                "iusto"),
                            true,
                            true,
                            356.3190),
                        "Country = 'Canada'"),
                new PixelSize(11.5401,
                        -55.4465,
                    new PixelSizeSpatialReference(8,
                            243.6439)),
                new Polygon([new MapPath([new MapPoint([197.5218,
                            903.1067,
                            961.3007]),
                        new MapPoint([581.0355,
                            575.5659])]),
                        new MapPath([new MapPoint([458.4859,
                                395.9336,
                                594.7884]),
                            new MapPoint([590.7250,
                                620.6826,
                                976.5019]),
                            new MapPoint([889.6243,
                                384.0394,
                                308.0944]),
                            new MapPoint([46.3698,
                                759.5388,
                                114.3233,
                                321.7019])])],
                    new SpatialReference(1,
                            "quibusdam",
                            "aut",
                            "ad"),
                    new Point(146.6401,
                            79.2421,
                            -92.2109,
                            -47.0660,
                            565.5634,
                        new SpatialReference(5,
                                "odit",
                                "maxime",
                                "rerum"),
                            true,
                            true,
                            908.1338),
                        true,
                        true,
                        true),
                    true),
                "sint");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(9,
                        "aut",
                        "dignissimos",
                        "aut")),
                "tempora");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Point(96.8423,
                        77.8328,
                        -40.4719,
                        47.4098,
                        31.4514,
                    new SpatialReference(5,
                            "rerum",
                            "neque",
                            "earum"),
                        true,
                        true,
                        890.4593),
                    [6,
                        5],
                SpatialRelationship.Within,
                new TimeExtent(new DateTime(2017, 1, 15, 20, 30, 43),
                        new DateTime(2010, 9, 1, 11, 6, 40)),
                    "ObjectID = 1"),
                "adipisci");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([7,
                    9],
                    true,
                    45.9102,
                    645.3989,
                    "9.8.3.4",
                new Polyline([new MapPath([new MapPoint([275.3329,
                            146.7401,
                            131.1420,
                            688.3727]),
                        new MapPoint([640.3016,
                            556.3840,
                            525.4759]),
                        new MapPoint([901.2212,
                            747.7810,
                            818.2602,
                            261.9581]),
                        new MapPoint([701.1326,
                            636.3580])]),
                        new MapPath([new MapPoint([97.8796,
                                369.3093]),
                            new MapPoint([257.5289,
                                945.4054]),
                            new MapPoint([59.9111,
                                826.4530,
                                802.4179])])],
                    new SpatialReference(6,
                            "neque",
                            "omnis",
                            "possimus"),
                        true,
                        true),
                    8,
                    ["dolor",
                        "deleniti"],
                    "qui",
                    new DateTime(2005, 3, 11, 5, 44, 5),
                    443.6814,
                    9,
                    "consequatur",
                    6),
                "non");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([5,
                    6,
                    6],
                    true,
                    719.6235,
                    282.9597,
                    "3.3.5.9",
                new Extent(-34.0684,
                        148.9825,
                        -5.5192,
                        -77.0691,
                        994.2453,
                        402.4290,
                        322.9232,
                        499.1778,
                    new SpatialReference(3,
                            "numquam",
                            "velit",
                            "qui"),
                        true,
                        true),
                    4,
                    ["quo",
                        "illum",
                        "velit"],
                    "voluptas",
                    new DateTime(2012, 4, 9, 17, 34, 19),
                    201.2993,
                    5,
                    "ea",
                    8),
                "iste");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([7,
                    2,
                    6,
                    8],
                    true,
                    522.9377,
                    67.0187,
                    "5.6.5.1",
                new Polyline([new MapPath([new MapPoint([526.8934,
                            131.0720,
                            193.8393,
                            118.5641]),
                        new MapPoint([135.2400,
                            835.3920]),
                        new MapPoint([986.3272,
                            453.0622,
                            474.5748,
                            983.4783])])],
                    new SpatialReference(6,
                            "ab",
                            "rerum",
                            "ut"),
                        true,
                        true),
                    6,
                    ["eaque",
                        "et",
                        "molestiae",
                        "quae"],
                    "ratione",
                    new DateTime(2022, 7, 5, 9, 17, 23),
                    512.1640,
                    1,
                    "sequi",
                    2),
                "est");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2009, 11, 6, 12, 12, 31),
                        "corrupti",
                        "eos aperiam consectetur"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Minus;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Gif;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Bilinear;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAll;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.U2;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2007, 2, 24, 19, 24, 18),
                    new DateTime(2014, 6, 20, 11, 35, 25));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("quod",
                    "eos",
                new TimeExtent(new DateTime(2001, 9, 2, 7, 37, 0),
                        new DateTime(2003, 1, 14, 7, 43, 5)),
                new TimeInterval(TemporalTime.Milliseconds,
                        491.3939),
                    [new DateTime(2005, 1, 18, 15, 11, 16),
                        new DateTime(2012, 8, 4, 12, 18, 43),
                        new DateTime(2014, 7, 2, 8, 52, 25)],
                    "Asia/Dhaka",
                    "ratione");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Milliseconds,
                    633.9880);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(14.5759,
                    -153.3621,
                    -67.7651,
                    41.7044,
                    860.3696,
                    140.2989,
                    630.1914,
                    345.0970,
                new SpatialReference(7,
                        "quis",
                        "voluptatum",
                        "deserunt"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(1,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "token",
                    "et",
                    "magnam quisquam et non aspernatur non sint",
                    1,
                    true,
                    true,
                    new { Value = "est" },
                FieldValueType.Binary,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "title",
                    "molestias",
                    "quia fugit dignissimos accusamus iste incidunt",
                    9,
                    true,
                    true,
                    new { Value = "illo" },
                FieldValueType.CountOrAmount,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "comment",
                    "velit",
                    "quos hic quod sapiente atque",
                    9,
                    true,
                    true,
                    new { Value = "mollitia" },
                FieldValueType.Description,
                    new CodedValueDomain<string>())];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("et",
                        "updatedAt",
                    OutputPixelType.U1,
                        "eos",
                        "title"),
                    [3,
                        6,
                        9],
                Method.Center,
                [new DimensionalDefinition("email",
                        true,
                        "category"),
                new DimensionalDefinition("password",
                        true,
                        "title"),
                new DimensionalDefinition("password",
                        true,
                        "password"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "group")],
                    [5,
                        8,
                        5,
                        9],
                Operation.Blend,
                    "iste",
                    "error",
                new Point(36.8016,
                        -42.5280,
                        67.2675,
                        77.3371,
                        400.4140,
                    new SpatialReference(3,
                            "distinctio",
                            "velit",
                            "optio"),
                        true,
                        true,
                        355.6993),
                    "Province = 'Ontario'");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Point(-115.6979,
                        -31.2053,
                        -20.7174,
                        -26.8949,
                        729.3560,
                    new SpatialReference(2,
                            "quod",
                            "saepe",
                            "illum"),
                        true,
                        true,
                        284.0923),
                [new DimensionalDefinition("group",
                        true,
                        "id")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("qui et dolor",
                    "consequatur",
                    ["odio",
                        "aut"],
                [new FieldInfo("phone",
                        "voluptates",
                        "ea",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("comment",
                        "quam",
                        "dolores",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(5,
                            true,
                        DateFormat.ShortDate),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("group",
                        "dicta",
                        "quis",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthDayYearLongTime),
                        true,
                        true,
                    StatisticType.Count),
                new FieldInfo("title",
                        "molestiae",
                        "eos",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.DayShortMonthYearShortTime24),
                        true,
                        true,
                    StatisticType.Var)],
                [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "possimus",
                            "est voluptatibus reiciendis")),
                new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                            "aperiam",
                            "ex quia quod")),
                new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                            "tempore",
                            "quis autem fuga"))],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "avatar",
                        "est accusamus repellendus",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "phone",
                        "laudantium et quia",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                        "name",
                        "repudiandae magnam vel",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "email",
                        "voluptatem nam fugit",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("possimus id sed",
                        "7535b0aa-ec97-8da5-1b7e-938d3938124a",
                        () => { Console.WriteLine("error"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "phone",
                        "in"),
                new ActionToggle("odio doloribus molestiae",
                        "446b1f5a-b434-5756-3033-d736c492a3de",
                        () => { Console.WriteLine("natus"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "createdAt",
                        "et")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("dolores",
                    "category",
                OutputPixelType.U16,
                    "ad",
                    "phone");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2012, 1, 5, 16, 56, 40),
                    new DateTime(2002, 5, 14, 8, 25, 33));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
