@using dymaptic.GeoBlazor.Core.Functions
@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(33, 180, 78),
                                new MapColor(18, 142, 92)),
                            true,
                            true,
                            [5,
                            4],
                            7,
                            6,
                            StretchType.MinMax,
                            [new RasterBandStatistics(864.2201,
                                7,
                                697.2439,
                                62.1537,
                                250.4251,
                                779.3367,
                                671.2901,
                                266.3289),
                            new RasterBandStatistics(747.4381,
                                7,
                                510.8073,
                                602.0586,
                                622.0335,
                                39.0965,
                                130.1715,
                                253.9651)],
                            true,
                            3))"
                        BandIds="@([3,
                            9,
                            2,
                            9])"
                        BlendMode="@(BlendMode.HardLight)"
                        CompressionQuality="@(733.0051)"
                        CompressionTolerance="@(334.2642)"
                        Copyright="@("maiores")"
                        DefinitionExpression="@("deserunt")"
                        Effect="@(new Effect("placeat",
                            35257239.9125))"
                        Format="@(ImageFormat.Bsq)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(5)"
                        ImageMaxWidth="@(5)"
                        Interpolation="@(Interpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        MaxScale="@(29557625.2281)"
                        MinScale="@(26913.0087)"
                        NoData="@(new NoData([5,
                            8,
                            3,
                            1]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAny)"
                        ObjectIdField="@("delectus")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.U4)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(341.4013)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(829.6557,
                                TileInfoFormat.Gif,
                                true,
                            [new LOD(3,
                                    "nesciunt",
                                    56.5535,
                                    47708907.5488),
                            new LOD(8,
                                    "eum",
                                    10.4056,
                                    44520850.4829)],
                            new Point(54.1519,
                                    -33.8451,
                                    28.1515,
                                    -53.1502,
                                    581.5132,
                                new SpatialReference(4,
                                        "odio",
                                        "tempore",
                                        "ea"),
                                    true,
                                    true,
                                    194.2360),
                                [7,
                                    4,
                                    7],
                            new SpatialReference(8,
                                    "facere",
                                    "sed",
                                    "aut")))"
                        Title="@("illum ea doloribus")"
                        Opacity="@(0.0841)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(-141.1572,
                                -53.1822,
                                -12.7293,
                                37.4022,
                                348.8749,
                                713.4698,
                                477.7276,
                                204.7246,
                            new SpatialReference(7,
                                    "deserunt",
                                    "aut",
                                    "reprehenderit"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("porro",
                                    "token",
                                OutputPixelType.U16,
                                    "eos",
                                    "name"),
                                [4,
                                    9],
                            Method.Viewpoint,
                            [new DimensionalDefinition("title",
                                    true,
                                    "title")],
                                [3,
                                    2,
                                    6,
                                    5],
                            Operation.Sum,
                                "amet",
                                "nisi",
                            new Point(88.4529,
                                    46.3819,
                                    94.1792,
                                    66.5133,
                                    818.0522,
                                new SpatialReference(2,
                                        "repellat",
                                        "incidunt",
                                        "fugit"),
                                    true,
                                    true,
                                    546.4125),
                                "PostalCode = 'M5V 1J9'"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(896.5704)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("a")"
                            EndField="@("atque")"
                            Stops="@([new DateTime(2021, 4, 20, 1, 11, 3),
                                new DateTime(2007, 1, 19, 10, 51, 5),
                                new DateTime(2021, 4, 25, 11, 18, 27)])"
                            TimeZone="@("Europe/Tallinn")"
                            TrackIdField="@("consequatur")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Minutes)"
                                Value="@(143.4488)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2016, 8, 26, 13, 37, 27))"
                                End="@(new DateTime(2015, 1, 19, 21, 31, 0))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2014, 6, 5, 16, 43, 26))"
                            End="@(new DateTime(2003, 3, 1, 10, 47, 10))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("voluptate")"
                            FunctionName="@("id")"
                            OutputPixelType="@(OutputPixelType.U16)"
                            RasterFunctionDefinition="@("error")"
                            VariableName="@("token")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Org)"
                            AccessInformation="@("magni")"
                            ApiKey="@("dolore")"
                            AvgRating="@(891.1576)"
                            Categories="@(["et",
                                "asperiores"])"
                            Created="@(new DateTime(2005, 3, 20, 11, 21, 6))"
                            Culture="@("facere")"
                            Description="@("dolores quo sint magni odio officiis eaque")"
                            Extent="@(new Extent(-179.1506,
                                    26.4230,
                                    33.5725,
                                    4.8624,
                                    667.6962,
                                    688.6965,
                                    124.7441,
                                    901.3291,
                                new SpatialReference(9,
                                        "et",
                                        "soluta",
                                        "asperiores"),
                                    true,
                                    true))"
                            GroupCategories="@(["corporis",
                                "perferendis"])"
                            LicenseInfo="@("totam")"
                            Modified="@(new DateTime(2005, 5, 4, 17, 56, 19))"
                            Name="@("id")"
                            NumComments="@(211.2750)"
                            NumRatings="@(619.4969)"
                            NumViews="@(708.4547)"
                            Owner="@("Nicholas Schoen")"
                            OwnerFolder="@("Javon Johns")"
                            Portal="@(new Portal(PortalAccess.Private,
                                    true,
                                AuthMode.Auto,
                                    ["nulla",
                                        "ad",
                                        "modi"],
                                    "perspiciatis",
                                    "magni",
                                    "in",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("dolor")"
                            Screenshots="@(["perferendis",
                                "et"])"
                            Size="@(5)"
                            Snippet="@("vel")"
                            Tags="@(["ad",
                                "dolore",
                                "veniam",
                                "fuga"])"
                            Title="@("aperiam reiciendis dicta")"
                            TypeKeywords="@(["sed",
                                "dicta",
                                "magnam",
                                "sit"])"
                            Url="@("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Countries_(Generalized)/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("quaerat voluptatibus iste")"
                            StringContent="@("officiis")"
                            OutFields="@(["eligendi",
                                "facilis",
                                "provident"])"
                            FieldInfos="@([new FieldInfo("updatedAt",
                                    "dolorem",
                                    "beatae",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDateShortTime),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("phone",
                                    "ratione",
                                    "rerum",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("email",
                                    "at",
                                    "provident",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("id",
                                    "in",
                                    "et",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new RelationshipPopupContent("quae quia optio",
                                    "adipisci est quae sint ut est rerum",
                                    1,
                                    "aut",
                                [new RelatedRecordsInfoFieldOrder("perferendis",
                                    OrderBy.Desc)],
                                    9),
                            new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                        "dolor",
                                        "quo alias rerum")),
                            new FieldsPopupContent([new FieldInfo("title",
                                        "et",
                                        "eum",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(4,
                                            true,
                                        DateFormat.ShortMonthYear),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                    "recusandae aspernatur doloremque consequuntur incidunt",
                                    "nulla cupiditate voluptas"),
                            new TextPopupContent("ut quisquam omnis")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "token",
                                    "doloribus repellat veniam",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "avatar",
                                    "doloribus doloremque quisquam",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "category",
                                    "doloribus a et",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("quia in hic",
                                    "https://picsum.photos/640/480/?image=315",
                                    "eb7a984c-568c-ed34-46af-360d5c129d05",
                                    () => { Console.WriteLine("animi"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "sint")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polygon([new MapPath([new MapPoint([181.4824,
                                        299.7541]),
                                    new MapPoint([100.6069,
                                        927.2689,
                                        122.5186,
                                        79.7829]),
                                    new MapPoint([489.3043,
                                        907.4240,
                                        496.9416,
                                        244.5689])]),
                                    new MapPath([new MapPoint([436.7380,
                                            793.5859,
                                            602.7955,
                                            988.5114]),
                                        new MapPoint([607.5835,
                                            587.6476,
                                            793.1844,
                                            799.2702])]),
                                    new MapPath([new MapPoint([492.5142,
                                            949.4162,
                                            202.8725,
                                            947.1939]),
                                        new MapPoint([178.4729,
                                            234.6804,
                                            521.2917,
                                            186.5159]),
                                        new MapPoint([596.7713,
                                            422.2118,
                                            244.8003,
                                            649.7259]),
                                        new MapPoint([334.1881,
                                            284.8912,
                                            38.7759])])],
                                new SpatialReference(4,
                                        "natus",
                                        "totam",
                                        "quisquam"),
                                new Point(-120.4625,
                                        -55.7187,
                                        -17.6998,
                                        -62.9907,
                                        596.9081,
                                    new SpatialReference(8,
                                            "iste",
                                            "et",
                                            "rerum"),
                                        true,
                                        true,
                                        810.6231),
                                    true,
                                    true,
                                    true))"
                            SubsetDefinitions="@([new DimensionalDefinition("title",
                                    true,
                                    "title"),
                            new DimensionalDefinition("phone",
                                    true,
                                    "name")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("comment")"
                            Alias="@("pariatur")"
                            Description="@("cupiditate eum doloribus ratione aperiam")"
                            Length="@(5)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "ullam" })"
                            ValueType="@(FieldValueType.PercentageOrRatio)"
                            Domain="@(new InheritedDomain("name"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(2,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["group",
                    "email",
                    "token"],
                new Point(-51.3861,
                        -1.7359,
                        -149.5434,
                        3.7552,
                        366.4842,
                    new SpatialReference(4,
                            "est",
                            "mollitia",
                            "officia"),
                        true,
                        true,
                        59.4967),
                    7,
                new SpatialReference(4,
                        "excepturi",
                        "repellendus",
                        "maxime")),
                "sunt");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Polygon([new MapPath([new MapPoint([895.3339,
                            412.8230,
                            885.7490,
                            80.4190]),
                        new MapPoint([793.7800,
                            385.2640]),
                        new MapPoint([209.9658,
                            457.2749]),
                        new MapPoint([682.1134,
                            350.6921,
                            830.6526,
                            189.2701])]),
                        new MapPath([new MapPoint([779.5766,
                                391.1728,
                                156.0458]),
                            new MapPoint([611.2010,
                                898.0748,
                                543.8610])])],
                    new SpatialReference(7,
                            "neque",
                            "optio",
                            "suscipit"),
                    new Point(4.4689,
                            67.0473,
                            96.6204,
                            72.3411,
                            96.9893,
                        new SpatialReference(6,
                                "sed",
                                "aperiam",
                                "nam"),
                            true,
                            true,
                            857.9370),
                        true,
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("nihil",
                            "password",
                        OutputPixelType.F64,
                            "dolore",
                            "createdAt"),
                        [5,
                            7,
                            2,
                            5],
                    Method.Attribute,
                    [new DimensionalDefinition("avatar",
                            true,
                            "status")],
                        [9,
                            6,
                            7,
                            8],
                    Operation.First,
                        "quas",
                        "voluptatem",
                    new Point(93.7559,
                            -34.2364,
                            149.4514,
                            16.9413,
                            252.5435,
                        new SpatialReference(9,
                                "dolore",
                                "dolore",
                                "vel"),
                            true,
                            true,
                            153.8984),
                        "Street = '123 Main St.'"),
                new PixelSize(-32.5712,
                        57.7432,
                    new PixelSizeSpatialReference(4,
                            697.1368)),
                new RasterFunction("vero",
                        "category",
                    OutputPixelType.F64,
                        "cum",
                        "category"),
                new TimeExtent(new DateTime(2005, 9, 14, 15, 49, 36),
                        new DateTime(2011, 5, 25, 0, 53, 8))),
                "sit");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(139.1126,
                        30.0698,
                        -62.4633,
                        23.6583,
                        730.7120,
                    new SpatialReference(7,
                            "veritatis",
                            "saepe",
                            "voluptatem"),
                        true,
                        true,
                        271.3394),
                new Point(103.6100,
                        47.6590,
                        5.4180,
                        -69.5983,
                        194.8979,
                    new SpatialReference(2,
                            "similique",
                            "dolor",
                            "aliquam"),
                        true,
                        true,
                        972.2575)],
                    4),
                "tenetur");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([232.9987,
                            52.0188,
                            671.4509,
                            426.1942]),
                        new MapPoint([544.0430,
                            978.1661]),
                        new MapPoint([432.2430,
                            173.4865])]),
                        new MapPath([new MapPoint([430.3868,
                                850.0224]),
                            new MapPoint([76.0070,
                                147.4398]),
                            new MapPoint([626.1601,
                                317.2887,
                                952.5893,
                                437.7381])])],
                    new SpatialReference(9,
                            "beatae",
                            "incidunt",
                            "voluptatibus"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("ea",
                            "updatedAt",
                        OutputPixelType.F64,
                            "iste",
                            "name"),
                        [2,
                            2],
                    Method.Nadir,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "email"),
                    new DimensionalDefinition("title",
                            true,
                            "avatar")],
                        [3,
                            1,
                            6,
                            5],
                    Operation.Min,
                        "cumque",
                        "facere",
                    new Point(-35.2619,
                            -53.6458,
                            76.9851,
                            -62.1779,
                            88.3062,
                        new SpatialReference(4,
                                "ut",
                                "quidem",
                                "aut"),
                            true,
                            true,
                            473.0593),
                        "1 = 1"),
                new PixelSize(-125.5860,
                        14.5734,
                    new PixelSizeSpatialReference(6,
                            863.4656)),
                new RasterFunction("quia",
                        "title",
                    OutputPixelType.U32,
                        "autem",
                        "status"),
                new TimeExtent(new DateTime(2007, 7, 8, 12, 23, 52),
                        new DateTime(2017, 6, 3, 14, 11, 46))),
                "porro");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["suscipit",
                    "eius",
                    "quia",
                    "libero"],
                    ["id",
                        "title",
                        "id",
                        "updatedAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(-145.2259,
                    117.1809,
                    -65.7936,
                    77.9706,
                    937.5583,
                    866.3466,
                    542.1232,
                    509.8874,
                new SpatialReference(5,
                        "rerum",
                        "hic",
                        "laborum"),
                    true,
                    true),
                8,
                4,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(-42.2106,
                        86.4493,
                        -146.6844,
                        -28.2491,
                        510.5938,
                    new SpatialReference(7,
                            "velit",
                            "eos",
                            "consectetur"),
                        true,
                        true,
                        135.8955),
                    3,
                    [9,
                        5,
                        1,
                        5],
                new Point(-153.7467,
                        81.5127,
                        44.1301,
                        14.7040,
                        669.1678,
                    new SpatialReference(8,
                            "qui",
                            "ut",
                            "nostrum"),
                        true,
                        true,
                        185.4230),
                    "Phone = '555-555-5555'"),
                "delectus");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("repudiandae",
                    "group",
                OutputPixelType.S32,
                    "architecto",
                    "updatedAt"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(2,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(4,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(3,
                    "id"),
                "ea");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Polyline([new MapPath([new MapPoint([946.2470,
                            127.1225]),
                        new MapPoint([478.9721,
                            956.2854]),
                        new MapPoint([116.8738,
                            350.3612,
                            39.9544]),
                        new MapPoint([655.7940,
                            599.5184,
                            617.3281])]),
                        new MapPath([new MapPoint([322.3928,
                                925.1245,
                                432.1990,
                                772.6699]),
                            new MapPoint([621.3981,
                                162.4986,
                                61.1817,
                                263.0116])]),
                        new MapPath([new MapPoint([340.1604,
                                274.0408,
                                795.1559,
                                30.2277]),
                            new MapPoint([444.6936,
                                233.4226]),
                            new MapPoint([486.9339,
                                907.5844,
                                298.0674]),
                            new MapPoint([903.1558,
                                220.2156,
                                554.6170,
                                184.1853])])],
                    new SpatialReference(3,
                            "doloribus",
                            "architecto",
                            "ut"),
                        true,
                        true),
                Interpolation.Majority,
                [new Point(12.7357,
                        49.2357,
                        61.3617,
                        -61.5614,
                        133.3526,
                    new SpatialReference(3,
                            "labore",
                            "quibusdam",
                            "aliquid"),
                        true,
                        true,
                        286.8558),
                new Point(68.7675,
                        49.1734,
                        -170.1770,
                        35.6952,
                        350.2360,
                    new SpatialReference(6,
                            "sit",
                            "dolore",
                            "asperiores"),
                        true,
                        true,
                        260.1709),
                new Point(66.9023,
                        85.8020,
                        -145.9314,
                        -29.0489,
                        898.0912,
                    new SpatialReference(6,
                            "doloremque",
                            "est",
                            "consequatur"),
                        true,
                        true,
                        234.8136),
                new Point(70.0004,
                        -46.1946,
                        -160.3745,
                        -71.8567,
                        647.4612,
                    new SpatialReference(5,
                            "possimus",
                            "qui",
                            "et"),
                        true,
                        true,
                        924.6460)],
                new MosaicRule(true,
                    new RasterFunction("tempora",
                            "email",
                        OutputPixelType.F32,
                            "ex",
                            "updatedAt"),
                        [3,
                            3,
                            1],
                    Method.Center,
                    [new DimensionalDefinition("title",
                            true,
                            "password"),
                    new DimensionalDefinition("phone",
                            true,
                            "id"),
                    new DimensionalDefinition("category",
                            true,
                            "avatar"),
                    new DimensionalDefinition("group",
                            true,
                            "id")],
                        [5,
                            9],
                    Operation.Sum,
                        "pariatur",
                        "voluptatem",
                    new Point(9.1328,
                            -43.6044,
                            -137.4335,
                            10.3058,
                            169.7796,
                        new SpatialReference(8,
                                "dicta",
                                "at",
                                "quae"),
                            true,
                            true,
                            920.5354),
                        "1 = 1"),
                    ["a",
                        "ab",
                        "doloribus",
                        "est"],
                new PixelSize(106.9300,
                        40.9211,
                    new PixelSizeSpatialReference(8,
                            919.6382)),
                    true,
                    6,
                    360.9955,
                    8,
                new TimeExtent(new DateTime(2010, 4, 5, 9, 28, 38),
                        new DateTime(2018, 9, 4, 10, 37, 52))),
                "amet");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Extent(45.6250,
                        -91.7889,
                        75.3898,
                        11.9265,
                        346.6395,
                        399.4299,
                        928.5702,
                        49.0501,
                    new SpatialReference(9,
                            "mollitia",
                            "et",
                            "in"),
                        true,
                        true),
                    9,
                new MosaicRule(true,
                    new RasterFunction("in",
                            "status",
                        OutputPixelType.S16,
                            "minima",
                            "group"),
                        [9,
                            5,
                            2],
                    Method.None,
                    [new DimensionalDefinition("category",
                            true,
                            "category"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "password")],
                        [7,
                            6,
                            9],
                    Operation.Blend,
                        "illum",
                        "eum",
                    new Point(110.0747,
                            37.1588,
                            -66.7089,
                            -67.8333,
                            802.2801,
                        new SpatialReference(9,
                                "eius",
                                "nihil",
                                "provident"),
                            true,
                            true,
                            748.2390),
                        "Street = '123 Main St.'"),
                new PixelSize(-57.5891,
                        -86.8570,
                    new PixelSizeSpatialReference(7,
                            350.6225)),
                    true,
                new RasterFunction("veritatis",
                        "name",
                    OutputPixelType.C64,
                        "eum",
                        "category"),
                new RasterFunction("qui",
                        "category",
                    OutputPixelType.C64,
                        "facere",
                        "status"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2017, 5, 24, 12, 44, 49),
                        new DateTime(2002, 2, 18, 18, 7, 49))),
                "impedit");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    361.6269,
                new Polygon([new MapPath([new MapPoint([583.0815,
                            21.1597]),
                        new MapPoint([520.8393,
                            655.7150,
                            210.9852,
                            270.8931]),
                        new MapPoint([96.7187,
                            345.4099])]),
                        new MapPath([new MapPoint([559.1908,
                                948.5397,
                                960.5323,
                                159.0321]),
                            new MapPoint([931.3402,
                                740.0923,
                                568.8301])])],
                    new SpatialReference(8,
                            "sit",
                            "nobis",
                            "sit"),
                    new Point(76.6695,
                            78.0003,
                            62.3532,
                            39.4987,
                            446.4083,
                        new SpatialReference(9,
                                "numquam",
                                "ipsum",
                                "et"),
                            true,
                            true,
                            285.5072),
                        true,
                        true,
                        true),
                new SpatialReference(7,
                        "explicabo",
                        "in",
                        "culpa"),
                    2),
                "repellat");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Polyline([new MapPath([new MapPoint([195.7643,
                            185.0326,
                            528.8356,
                            242.3056]),
                        new MapPoint([634.9362,
                            42.4862,
                            886.1824,
                            614.6772]),
                        new MapPoint([289.1543,
                            24.5675]),
                        new MapPoint([601.0420,
                            825.4819,
                            444.2520,
                            306.5574])]),
                        new MapPath([new MapPoint([309.9340,
                                688.8253,
                                858.1165]),
                            new MapPoint([230.5414,
                                419.2548,
                                243.1111,
                                651.1340]),
                            new MapPoint([54.6947,
                                836.8989]),
                            new MapPoint([721.1070,
                                523.2770,
                                56.4965,
                                737.6226])]),
                        new MapPath([new MapPoint([481.2081,
                                414.3359]),
                            new MapPoint([357.9993,
                                751.7132,
                                769.9000]),
                            new MapPoint([27.5332,
                                261.4835]),
                            new MapPoint([241.8340,
                                564.3231,
                                893.7687])])],
                    new SpatialReference(9,
                            "dignissimos",
                            "molestiae",
                            "atque"),
                        true,
                        true),
                new Polygon([new MapPath([new MapPoint([634.1021,
                            653.4525,
                            774.1557]),
                        new MapPoint([312.3010,
                            147.6055]),
                        new MapPoint([250.4005,
                            63.1727,
                            708.1142]),
                        new MapPoint([141.9873,
                            106.4820])]),
                        new MapPath([new MapPoint([915.4753,
                                863.5556]),
                            new MapPoint([758.7155,
                                562.0902,
                                175.1508])]),
                        new MapPath([new MapPoint([369.7611,
                                56.1865,
                                160.4420]),
                            new MapPoint([763.6872,
                                717.4720])]),
                        new MapPath([new MapPoint([342.0721,
                                953.9592,
                                278.1377]),
                            new MapPoint([605.8155,
                                380.5426,
                                238.5241]),
                            new MapPoint([113.4355,
                                765.3437,
                                337.6089])])],
                    new SpatialReference(6,
                            "vero",
                            "sunt",
                            "culpa"),
                    new Point(97.4245,
                            -71.3944,
                            54.7642,
                            -29.7077,
                            302.1533,
                        new SpatialReference(5,
                                "nam",
                                "eius",
                                "iste"),
                            true,
                            true,
                            496.7849),
                        true,
                        true,
                        true),
                new Extent(-96.4432,
                        -59.7055,
                        -84.6288,
                        36.2194,
                        250.5640,
                        584.3363,
                        893.6763,
                        314.8870,
                    new SpatialReference(6,
                            "cumque",
                            "voluptatem",
                            "amet"),
                        true,
                        true)],
                new SpatialReference(1,
                        "deserunt",
                        "consequatur",
                        "ea"),
                    [6,
                        7,
                        4,
                        3]),
                "modi");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Polyline([new MapPath([new MapPoint([248.5090,
                            738.7192,
                            744.3665,
                            223.7980]),
                        new MapPoint([986.7486,
                            609.9928]),
                        new MapPoint([543.1361,
                            512.9944,
                            550.0329]),
                        new MapPoint([919.6722,
                            554.9590,
                            999.4353,
                            747.4789])]),
                        new MapPath([new MapPoint([143.9888,
                                992.0239,
                                500.6655]),
                            new MapPoint([791.1030,
                                927.1350])])],
                    new SpatialReference(8,
                            "non",
                            "mollitia",
                            "quia"),
                        true,
                        true),
                    2,
                    true),
                "reiciendis");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("laboriosam",
                            "group",
                        OutputPixelType.S16,
                            "sint",
                            "category"),
                        [6,
                            8,
                            7],
                    Method.LockRaster,
                    [new DimensionalDefinition("name",
                            true,
                            "avatar"),
                    new DimensionalDefinition("avatar",
                            true,
                            "token")],
                        [8,
                            1,
                            5,
                            4],
                    Operation.Blend,
                        "sit",
                        "reiciendis",
                    new Point(-0.5855,
                            85.3409,
                            161.9308,
                            6.7856,
                            444.2444,
                        new SpatialReference(8,
                                "omnis",
                                "est",
                                "aut"),
                            true,
                            true,
                            114.9942),
                        "Province = 'Ontario'"),
                new PixelSize(154.5140,
                        9.9181,
                    new PixelSizeSpatialReference(4,
                            542.5683)),
                ImageAreaUnit.SquareFeet,
                new Polyline([new MapPath([new MapPoint([904.8713,
                            966.6206,
                            453.4587,
                            30.9568]),
                        new MapPoint([733.4793,
                            905.2126])]),
                        new MapPath([new MapPoint([658.3550,
                                996.1530,
                                304.1821]),
                            new MapPoint([680.2147,
                                387.6485,
                                459.5667]),
                            new MapPoint([850.5962,
                                731.8039]),
                            new MapPoint([341.2154,
                                471.8218,
                                384.8139])]),
                        new MapPath([new MapPoint([71.4013,
                                565.6982,
                                835.9399]),
                            new MapPoint([392.8941,
                                115.1655]),
                            new MapPoint([304.9444,
                                564.5882,
                                865.2506]),
                            new MapPoint([746.2716,
                                501.2526])])],
                    new SpatialReference(6,
                            "ratione",
                            "aut",
                            "sit"),
                        true,
                        true),
                    true,
                LengthUnit.Miles),
                "possimus");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Extent(82.8866,
                        138.1234,
                        -19.3741,
                        -77.3045,
                        103.9800,
                        216.6317,
                        322.4560,
                        102.6990,
                    new SpatialReference(4,
                            "iusto",
                            "ullam",
                            "sit"),
                        true,
                        true),
                    9),
                "nesciunt");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("quia",
                            "password",
                        OutputPixelType.F64,
                            "omnis",
                            "phone"),
                        [3,
                            1],
                    Method.LockRaster,
                    [new DimensionalDefinition("token",
                            true,
                            "avatar"),
                    new DimensionalDefinition("name",
                            true,
                            "comment")],
                        [1,
                            9],
                    Operation.Mean,
                        "neque",
                        "libero",
                    new Point(-17.0729,
                            -70.4909,
                            -146.9856,
                            89.8128,
                            333.1304,
                        new SpatialReference(3,
                                "nostrum",
                                "delectus",
                                "numquam"),
                            true,
                            true,
                            824.0686),
                        "Phone = '555-555-5555'"),
                new PixelSize(76.2674,
                        62.1505,
                    new PixelSizeSpatialReference(9,
                            494.0317)),
                AngularUnit.Degrees,
                new Point(-101.9722,
                        -66.5814,
                        105.4377,
                        -78.3493,
                        195.6697,
                    new SpatialReference(8,
                            "praesentium",
                            "minus",
                            "enim"),
                        true,
                        true,
                        870.4045),
                    true,
                LengthUnit.Millimeters,
                new Point(-171.0773,
                        9.3502,
                        -107.5954,
                        5.0107,
                        18.3878,
                    new SpatialReference(3,
                            "sit",
                            "ad",
                            "quis"),
                        true,
                        true,
                        302.4088)),
                "commodi");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("et",
                            "id",
                        OutputPixelType.S32,
                            "impedit",
                            "token"),
                        [2,
                            8],
                    Method.LockRaster,
                    [new DimensionalDefinition("token",
                            true,
                            "category"),
                    new DimensionalDefinition("group",
                            true,
                            "token")],
                        [8,
                            8],
                    Operation.Max,
                        "animi",
                        "quibusdam",
                    new Point(87.4584,
                            76.0650,
                            -18.3857,
                            -86.0438,
                            62.2682,
                        new SpatialReference(3,
                                "atque",
                                "non",
                                "dolor"),
                            true,
                            true,
                            910.9692),
                        "Name = 'John Doe'"),
                new PixelSize(-55.9750,
                        -55.6480,
                    new PixelSizeSpatialReference(6,
                            82.6462)),
                new Point(-127.1948,
                        -72.4451,
                        105.9966,
                        -56.0945,
                        287.4498,
                    new SpatialReference(1,
                            "aliquam",
                            "sunt",
                            "magni"),
                        true,
                        true,
                        839.7978),
                LengthUnit.Millimeters,
                OperationType.BaseAndTopShadow,
                new Point(-140.7672,
                        -17.7789,
                        116.2724,
                        36.1269,
                        406.9674,
                    new SpatialReference(8,
                            "reprehenderit",
                            "molestiae",
                            "voluptate"),
                        true,
                        true,
                        698.1018)),
                "in");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polygon([new MapPath([new MapPoint([19.4601,
                            751.6769,
                            375.1547,
                            183.3404]),
                        new MapPoint([151.4723,
                            205.2791])]),
                        new MapPath([new MapPoint([849.5895,
                                958.1766,
                                99.1214]),
                            new MapPoint([39.8736,
                                465.8538,
                                170.4949]),
                            new MapPoint([608.7256,
                                46.8930])]),
                        new MapPath([new MapPoint([478.8702,
                                891.9352]),
                            new MapPoint([882.6487,
                                470.0367]),
                            new MapPoint([338.3477,
                                439.0293])])],
                    new SpatialReference(7,
                            "adipisci",
                            "tempore",
                            "voluptatum"),
                    new Point(50.1923,
                            -44.7261,
                            44.7071,
                            -70.2655,
                            34.2397,
                        new SpatialReference(1,
                                "reiciendis",
                                "nulla",
                                "recusandae"),
                            true,
                            true,
                            967.8797),
                        true,
                        true,
                        true),
                    8),
                "et");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("quia",
                            "status",
                        OutputPixelType.S16,
                            "cupiditate",
                            "password"),
                        [5,
                            5,
                            1,
                            5],
                    Method.Attribute,
                    [new DimensionalDefinition("email",
                            true,
                            "group")],
                        [5,
                            4,
                            7,
                            4],
                    Operation.Max,
                        "id",
                        "veniam",
                    new Point(-13.9486,
                            27.5135,
                            -156.2169,
                            13.0800,
                            650.9888,
                        new SpatialReference(7,
                                "autem",
                                "beatae",
                                "consequatur"),
                            true,
                            true,
                            226.4927),
                        "Street = '123 Main St.'"),
                new PixelSize(106.3641,
                        -66.1964,
                    new PixelSizeSpatialReference(5,
                            434.9703)),
                new Polygon([new MapPath([new MapPoint([73.4126,
                            931.4180,
                            477.8138,
                            594.9949]),
                        new MapPoint([229.1009,
                            135.2173,
                            538.2285]),
                        new MapPoint([274.5009,
                            549.9315,
                            61.1663,
                            572.4378]),
                        new MapPoint([832.9290,
                            667.1188])]),
                        new MapPath([new MapPoint([836.1222,
                                315.0051,
                                531.8858,
                                642.7867]),
                            new MapPoint([76.7571,
                                180.9973,
                                848.9909]),
                            new MapPoint([126.4417,
                                547.6889,
                                596.5615,
                                85.7957]),
                            new MapPoint([635.3537,
                                380.5000])]),
                        new MapPath([new MapPoint([498.8970,
                                686.7885,
                                717.4654,
                                911.8755]),
                            new MapPoint([898.6640,
                                441.8533,
                                486.9474]),
                            new MapPoint([684.1427,
                                306.2472,
                                968.3758,
                                163.6483]),
                            new MapPoint([842.3644,
                                312.8846,
                                535.3061])])],
                    new SpatialReference(1,
                            "dicta",
                            "maxime",
                            "aliquam"),
                    new Point(-29.4865,
                            -4.9586,
                            -48.4545,
                            36.6369,
                            200.3237,
                        new SpatialReference(2,
                                "harum",
                                "delectus",
                                "natus"),
                            true,
                            true,
                            127.5487),
                        true,
                        true,
                        true),
                    true),
                "perspiciatis");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(2,
                        "velit",
                        "asperiores",
                        "deleniti")),
                "doloremque");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Extent(-170.1792,
                        -57.1880,
                        -82.0975,
                        34.5465,
                        53.2660,
                        814.1384,
                        626.3495,
                        670.1987,
                    new SpatialReference(9,
                            "quaerat",
                            "ut",
                            "cupiditate"),
                        true,
                        true),
                    [6,
                        2,
                        1],
                SpatialRelationship.Relation,
                new TimeExtent(new DateTime(2014, 5, 13, 22, 21, 18),
                        new DateTime(2019, 9, 15, 11, 41, 50)),
                    "ObjectID = 1"),
                "voluptates");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([4,
                    1,
                    1],
                    true,
                    250.6951,
                    752.1974,
                    "1.0.5.2",
                new Point(-12.7945,
                        82.5039,
                        91.1534,
                        51.3295,
                        505.0289,
                    new SpatialReference(4,
                            "velit",
                            "placeat",
                            "voluptatem"),
                        true,
                        true,
                        511.0763),
                    2,
                    ["omnis",
                        "minima"],
                    "quasi",
                    new DateTime(2016, 5, 1, 12, 1, 41),
                    580.1477,
                    2,
                    "eos",
                    1),
                "reiciendis");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([1,
                    8,
                    6,
                    3],
                    true,
                    859.2153,
                    576.3886,
                    "4.2.0.7",
                new Polygon([new MapPath([new MapPoint([799.3461,
                            200.6576,
                            826.7811]),
                        new MapPoint([648.9472,
                            555.8601])])],
                    new SpatialReference(6,
                            "qui",
                            "culpa",
                            "aliquam"),
                    new Point(-24.1376,
                            16.3274,
                            81.1962,
                            -41.8291,
                            662.2518,
                        new SpatialReference(7,
                                "tenetur",
                                "rerum",
                                "iusto"),
                            true,
                            true,
                            825.7850),
                        true,
                        true,
                        true),
                    3,
                    ["voluptas",
                        "alias",
                        "quia",
                        "impedit"],
                    "ut",
                    new DateTime(2006, 10, 4, 16, 47, 39),
                    118.7863,
                    8,
                    "dolor",
                    2),
                "similique");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([4,
                    8],
                    true,
                    98.9943,
                    18.2132,
                    "6.1.4.4",
                new Polygon([new MapPath([new MapPoint([58.2504,
                            760.9467]),
                        new MapPoint([487.5936,
                            936.1512,
                            112.0714,
                            839.4771]),
                        new MapPoint([300.2426,
                            908.8094,
                            654.6302])]),
                        new MapPath([new MapPoint([641.2467,
                                853.4721]),
                            new MapPoint([73.8160,
                                78.4506,
                                313.1294]),
                            new MapPoint([899.3729,
                                383.0029,
                                446.3155,
                                241.3035])])],
                    new SpatialReference(6,
                            "ullam",
                            "et",
                            "maxime"),
                    new Point(-59.8626,
                            33.6903,
                            155.3423,
                            2.6395,
                            770.8274,
                        new SpatialReference(3,
                                "qui",
                                "ut",
                                "sint"),
                            true,
                            true,
                            607.7714),
                        true,
                        true,
                        true),
                    2,
                    ["quidem",
                        "repudiandae",
                        "error",
                        "assumenda"],
                    "enim",
                    new DateTime(2003, 1, 10, 15, 58, 16),
                    485.1944,
                    5,
                    "aut",
                    8),
                "pariatur");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "laudantium",
                    "nihil",
                    649.1006,
                    ["non",
                        "id",
                        "ipsa"],
                    new DateTime(2004, 1, 12, 6, 54, 15),
                    "a",
                    "quo autem tempore qui repellat",
                new Extent(-34.5561,
                        -75.2171,
                        -86.5804,
                        -6.5805,
                        705.1882,
                        863.2714,
                        295.1684,
                        27.9843,
                    new SpatialReference(9,
                            "fuga",
                            "a",
                            "blanditiis"),
                        true,
                        true),
                    ["pariatur",
                        "totam",
                        "ea",
                        "voluptatibus"],
                    "quo",
                    new DateTime(2019, 8, 26, 13, 53, 29),
                    "email",
                    348.1959),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2004, 6, 16, 20, 29, 31),
                        "qui",
                        "dolores iure sapiente"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "reprehenderit",
                    "voluptates",
                    299.3813,
                    ["eos",
                        "officiis",
                        "quia",
                        "voluptatem"],
                    new DateTime(2009, 9, 5, 21, 21, 38),
                    "sed",
                    "at sapiente possimus et enim voluptatem",
                new Extent(120.9201,
                        -89.0010,
                        26.0005,
                        -20.0631,
                        919.6128,
                        530.6974,
                        944.1469,
                        331.4009,
                    new SpatialReference(7,
                            "non",
                            "dolor",
                            "in"),
                        true,
                        true),
                    ["nobis",
                        "magni"],
                    "enim",
                    new DateTime(2009, 10, 16, 13, 0, 38),
                    "group",
                    817.9548);
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Minus;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Bsq;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Cubic;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAll;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.C128;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2000, 2, 27, 18, 24, 49),
                    new DateTime(2010, 2, 9, 21, 10, 16));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("est",
                    "eum",
                new TimeExtent(new DateTime(2021, 11, 22, 1, 8, 54),
                        new DateTime(2001, 2, 12, 5, 6, 44)),
                new TimeInterval(TemporalTime.Hours,
                        14.0980),
                    [new DateTime(2004, 3, 2, 18, 53, 7),
                        new DateTime(2000, 2, 7, 13, 13, 7),
                        new DateTime(2021, 6, 9, 20, 43, 2)],
                    "Europe/London",
                    "dolores");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Hours,
                    524.0330);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Show;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(-24.1924,
                    117.6852,
                    -41.6551,
                    -73.0370,
                    870.0721,
                    164.1588,
                    199.2282,
                    545.2499,
                new SpatialReference(8,
                        "nihil",
                        "est",
                        "laborum"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(3,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "password",
                    "qui",
                    "est voluptatem aliquam cupiditate iusto",
                    5,
                    true,
                    true,
                    new { Value = "consequuntur" },
                FieldValueType.UniqueIdentifier,
                new RangeDomain("qui",
                        "mollitia",
                        "comment"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("unde",
                        "title",
                    OutputPixelType.S16,
                        "corrupti",
                        "email"),
                    [5,
                        1,
                        3,
                        2],
                Method.Viewpoint,
                [new DimensionalDefinition("category",
                        true,
                        "email"),
                new DimensionalDefinition("avatar",
                        true,
                        "category"),
                new DimensionalDefinition("createdAt",
                        true,
                        "group"),
                new DimensionalDefinition("comment",
                        true,
                        "updatedAt")],
                    [5,
                        7],
                Operation.Blend,
                    "officiis",
                    "delectus",
                new Point(178.4963,
                        -14.4402,
                        -162.0348,
                        -11.8231,
                        590.1428,
                    new SpatialReference(4,
                            "nisi",
                            "qui",
                            "temporibus"),
                        true,
                        true,
                        583.3184),
                    "1 = 1");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Point(-88.7722,
                        44.1373,
                        97.4131,
                        -57.5195,
                        401.6493,
                    new SpatialReference(8,
                            "amet",
                            "repellat",
                            "ducimus"),
                        true,
                        true,
                        163.0126),
                [new DimensionalDefinition("name",
                        true,
                        "createdAt"),
                new DimensionalDefinition("category",
                        true,
                        "password"),
                new DimensionalDefinition("title",
                        true,
                        "createdAt")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("nostrum cupiditate animi",
                    "et",
                    ["distinctio",
                        "quam"],
                [new FieldInfo("password",
                        "ea",
                        "molestiae",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.Year),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("group",
                        "rerum",
                        "eligendi",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.DayShortMonthYearLongTime24),
                        true,
                        true,
                    StatisticType.Min)],
                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                            "autem",
                            "et maiores officia")),
                new TextPopupContent("omnis quod amet"),
                new MediaPopupContent("sit tempore maiores",
                        "odio iste soluta aut nemo aspernatur",
                    [new LineChartMediaInfo("eaque facilis ut",
                            "eligendi",
                            "voluptas quia quod",
                        new ChartMediaInfoValue(["alias",
                                "et",
                                "rerum",
                                "eos"],
                                "totam",
                                "unde",
                            [new ChartMediaInfoValueSeries("status",
                                    "est",
                                    137.5045)],
                            [new MapColor(180, 217, 119)])),
                    new LineChartMediaInfo("a nobis delectus",
                            "in",
                            "voluptate provident quaerat",
                        new ChartMediaInfoValue(["quam",
                                "est",
                                "excepturi"],
                                "perferendis",
                                "earum",
                            [new ChartMediaInfoValueSeries("phone",
                                    "ut",
                                    202.4224),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "sequi",
                                    729.2649)],
                            [new MapColor(99, 233, 20),
                            new MapColor(227, 87, 175),
                            new MapColor(38, 82, 70),
                            new MapColor(13, 174, 19)])),
                    new BarChartMediaInfo("inventore saepe harum",
                            "non",
                            "autem est architecto",
                        new ChartMediaInfoValue(["distinctio",
                                "eum",
                                "necessitatibus",
                                "beatae"],
                                "quia",
                                "et",
                            [new ChartMediaInfoValueSeries("id",
                                    "rem",
                                    685.3646),
                            new ChartMediaInfoValueSeries("comment",
                                    "veritatis",
                                    381.9455)],
                            [new MapColor(204, 117, 82),
                            new MapColor(229, 87, 232)])),
                    new LineChartMediaInfo("qui qui non",
                            "est",
                            "nobis omnis culpa",
                        new ChartMediaInfoValue(["ut",
                                "at"],
                                "eum",
                                "vel",
                            [new ChartMediaInfoValueSeries("createdAt",
                                    "aspernatur",
                                    107.9495),
                            new ChartMediaInfoValueSeries("status",
                                    "est",
                                    777.5294),
                            new ChartMediaInfoValueSeries("id",
                                    "mollitia",
                                    964.3648),
                            new ChartMediaInfoValueSeries("phone",
                                    "veritatis",
                                    832.8738)],
                            [new MapColor(170, 244, 32)]))],
                        1),
                new FieldsPopupContent([new FieldInfo("title",
                            "commodi",
                            "inventore",
                        StringFieldOption.TextArea,
                        new FieldInfoFormat(8,
                                true,
                            DateFormat.DayShortMonthYearLongTime),
                            true,
                            true,
                        StatisticType.Sum),
                    new FieldInfo("updatedAt",
                            "modi",
                            "ea",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(5,
                                true,
                            DateFormat.ShortDateShortTime24),
                            true,
                            true,
                        StatisticType.Stddev),
                    new FieldInfo("name",
                            "nam",
                            "et",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(7,
                                true,
                            DateFormat.DayShortMonthYearShortTime24),
                            true,
                            true,
                        StatisticType.Max),
                    new FieldInfo("comment",
                            "sed",
                            "totam",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(2,
                                true,
                            DateFormat.ShortDateLe),
                            true,
                            true,
                        StatisticType.Max)],
                        "cumque maxime eum quod minima consequatur",
                        "corporis quia sit")],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "category",
                        "eaque non corrupti",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                        "status",
                        "rerum deserunt eos",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "name",
                        "dolorem illum aut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "group",
                        "commodi facere pariatur",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionToggle("dolorum ullam optio",
                        "0aeb981f-dca0-6d00-140f-b2c21b7a83f0",
                        () => { Console.WriteLine("magni"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "email",
                        "error")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("provident",
                    "email",
                OutputPixelType.C64,
                    "repellat",
                    "status");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 9, 22, 1, 40, 39),
                    new DateTime(2005, 4, 17, 12, 9, 4));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
