@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(43, 77, 5),
                                new MapColor(186, 188, 252)),
                            true,
                            true,
                            [2,
                            2,
                            6,
                            5],
                            8,
                            9,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(341.7791,
                                4,
                                595.4655,
                                867.9447,
                                104.8627,
                                127.2453,
                                404.9296,
                                199.1295),
                            new RasterBandStatistics(682.7375,
                                9,
                                153.4106,
                                394.8166,
                                824.3047,
                                558.7222,
                                946.7646,
                                264.9862)],
                            true,
                            9))"
                        BandIds="@([7,
                            4,
                            1,
                            7])"
                        BlendMode="@(BlendMode.VividLight)"
                        CompressionQuality="@(500.7664)"
                        CompressionTolerance="@(262.2177)"
                        Copyright="@("exercitationem")"
                        DefinitionExpression="@("officia")"
                        Effect="@(new Effect("omnis",
                            46378610.2049))"
                        Format="@(ImageFormat.Png8)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(2)"
                        ImageMaxWidth="@(5)"
                        Interpolation="@(Interpolation.Cubic)"
                        LegendEnabled="@(true)"
                        MaxScale="@(28102245.1922)"
                        MinScale="@(46048.5430)"
                        NoData="@(new NoData([7,
                            2,
                            8]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAll)"
                        ObjectIdField="@("ab")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.C64)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(733.7361)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(466.3987,
                                TileInfoFormat.Mixed,
                                true,
                            [new LOD(8,
                                    "porro",
                                    78.6062,
                                    31564092.4875),
                            new LOD(6,
                                    "autem",
                                    72.5800,
                                    18254058.2723),
                            new LOD(7,
                                    "in",
                                    35.1975,
                                    32066724.5246)],
                            new Point(-61.2701,
                                    8.9437,
                                    -28.8455,
                                    44.8424,
                                    150.0882,
                                new SpatialReference(2,
                                        "alias",
                                        "fugiat",
                                        "ratione"),
                                    true,
                                    true,
                                    225.2506),
                                [6,
                                    7,
                                    4],
                            new SpatialReference(7,
                                    "qui",
                                    "eligendi",
                                    "assumenda")))"
                        Title="@("aperiam ratione omnis")"
                        Opacity="@(0.6108)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(-24.9300,
                                -11.1915,
                                -2.3769,
                                -21.8251,
                                572.0357,
                                309.7582,
                                776.0659,
                                484.9603,
                            new SpatialReference(5,
                                    "optio",
                                    "aut",
                                    "minima"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("dolore",
                                    "createdAt",
                                OutputPixelType.U8,
                                    "quae",
                                    "id"),
                                [8,
                                    3,
                                    6],
                            Method.Nadir,
                            [new DimensionalDefinition("group",
                                    true,
                                    "password")],
                                [4,
                                    3,
                                    1,
                                    9],
                            Operation.First,
                                "et",
                                "amet",
                            new Point(-50.4971,
                                    3.0585,
                                    -140.6934,
                                    85.1928,
                                    261.6606,
                                new SpatialReference(6,
                                        "officia",
                                        "itaque",
                                        "nesciunt"),
                                    true,
                                    true,
                                    370.3876),
                                "PostalCode = 'M5V 1J9'"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(81.3268)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("aut")"
                            EndField="@("quia")"
                            Stops="@([new DateTime(2001, 8, 26, 20, 1, 49),
                                new DateTime(2010, 9, 4, 21, 20, 7),
                                new DateTime(2006, 7, 26, 15, 0, 18),
                                new DateTime(2007, 9, 25, 16, 34, 32)])"
                            TimeZone="@("Pacific/Auckland")"
                            TrackIdField="@("qui")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Years)"
                                Value="@(62.5194)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2008, 11, 15, 14, 3, 24))"
                                End="@(new DateTime(2018, 2, 15, 5, 0, 55))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2015, 2, 7, 22, 15, 8))"
                            End="@(new DateTime(2010, 1, 13, 10, 49, 14))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("recusandae")"
                            FunctionName="@("id")"
                            OutputPixelType="@(OutputPixelType.S16)"
                            RasterFunctionDefinition="@("odio")"
                            VariableName="@("updatedAt")">
                        </RasterFunction>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("quibusdam modi qui")"
                            StringContent="@("cupiditate")"
                            OutFields="@(["vel",
                                "aut",
                                "quia"])"
                            FieldInfos="@([new FieldInfo("createdAt",
                                    "consequatur",
                                    "cum",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("token",
                                    "ipsa",
                                    "sunt",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDate),
                                    true,
                                    true,
                                StatisticType.Min),
                            new FieldInfo("createdAt",
                                    "libero",
                                    "suscipit",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Count)])"
                            Content="@([new TextPopupContent("quia velit autem"),
                            new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                        "quis",
                                        "ipsa et beatae"))])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "id",
                                    "quis quo architecto",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "status",
                                    "accusantium ad temporibus",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("repudiandae rerum autem",
                                    "fb3ad76c-aed1-4a20-aaba-a2f5ad9e6911",
                                    () => { Console.WriteLine("quod"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "email",
                                    "ut"),
                            new ActionButton("quo facere dolores",
                                    "https://picsum.photos/640/480/?image=105",
                                    "ceafc470-1f40-04db-59e9-5801d2ee18f6",
                                    () => { Console.WriteLine("nulla"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "dolorem"),
                            new ActionToggle("sapiente laudantium rerum",
                                    "9421cab6-d917-7eaa-eec4-232ef1757ca0",
                                    () => { Console.WriteLine("minima"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "category",
                                    "vero")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([252.8544,
                                        228.4844,
                                        995.1067,
                                        901.1855]),
                                    new MapPoint([296.6556,
                                        454.7010,
                                        844.5487]),
                                    new MapPoint([266.8096,
                                        345.5501])])],
                                new SpatialReference(2,
                                        "dolore",
                                        "et",
                                        "fuga"),
                                    true,
                                    true))"
                            SubsetDefinitions="@([new DimensionalDefinition("token",
                                    true,
                                    "name"),
                            new DimensionalDefinition("token",
                                    true,
                                    "avatar")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("id")"
                            Alias="@("iure")"
                            Description="@("quia occaecati provident voluptatibus quasi")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "hic" })"
                            ValueType="@(FieldValueType.None)"
                            Domain="@(new RangeDomain("nemo",
                                    "iste",
                                    "avatar"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(6,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["status",
                    "id"],
                new Point(168.6708,
                        -48.0592,
                        109.0733,
                        -64.1943,
                        332.5075,
                    new SpatialReference(4,
                            "doloremque",
                            "est",
                            "nesciunt"),
                        true,
                        true,
                        818.2507),
                    6,
                new SpatialReference(9,
                        "et",
                        "nostrum",
                        "quisquam")),
                "quod");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Polyline([new MapPath([new MapPoint([311.2671,
                            323.8720,
                            659.9960,
                            170.6708]),
                        new MapPoint([507.6123,
                            319.2619])]),
                        new MapPath([new MapPoint([557.9367,
                                332.1003,
                                330.1324,
                                336.8514]),
                            new MapPoint([286.6919,
                                340.6270,
                                788.6376]),
                            new MapPoint([933.1540,
                                11.4817,
                                871.6612,
                                566.5659])]),
                        new MapPath([new MapPoint([167.8014,
                                215.1048,
                                389.5127]),
                            new MapPoint([990.7354,
                                547.4668]),
                            new MapPoint([439.8927,
                                605.0183,
                                942.8671,
                                150.0677])]),
                        new MapPath([new MapPoint([635.7455,
                                843.5508]),
                            new MapPoint([682.2553,
                                565.9332,
                                766.6461]),
                            new MapPoint([543.0796,
                                562.8950,
                                878.3985,
                                40.5050])])],
                    new SpatialReference(5,
                            "consequuntur",
                            "eaque",
                            "nemo"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("rerum",
                            "email",
                        OutputPixelType.U32,
                            "a",
                            "phone"),
                        [6,
                            3],
                    Method.Seamline,
                    [new DimensionalDefinition("token",
                            true,
                            "group"),
                    new DimensionalDefinition("id",
                            true,
                            "phone"),
                    new DimensionalDefinition("password",
                            true,
                            "password")],
                        [7,
                            5],
                    Operation.Mean,
                        "quis",
                        "aut",
                    new Point(-172.4257,
                            -53.7895,
                            68.9954,
                            65.7590,
                            905.0918,
                        new SpatialReference(1,
                                "quo",
                                "veniam",
                                "totam"),
                            true,
                            true,
                            869.6021),
                        "Street = '123 Main St.'"),
                new PixelSize(-145.6089,
                        78.0200,
                    new PixelSizeSpatialReference(8,
                            520.3734)),
                new RasterFunction("velit",
                        "phone",
                    OutputPixelType.S16,
                        "inventore",
                        "password"),
                new TimeExtent(new DateTime(2002, 3, 17, 0, 45, 39),
                        new DateTime(2013, 6, 23, 14, 10, 28))),
                "asperiores");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(12.3060,
                        -39.5118,
                        60.4781,
                        -4.0214,
                        781.4566,
                    new SpatialReference(7,
                            "iusto",
                            "repudiandae",
                            "voluptatem"),
                        true,
                        true,
                        567.5993),
                new Point(64.2782,
                        -58.8255,
                        43.3510,
                        29.2809,
                        393.9887,
                    new SpatialReference(4,
                            "at",
                            "sequi",
                            "sit"),
                        true,
                        true,
                        993.1348),
                new Point(85.8973,
                        -24.3866,
                        -0.4899,
                        49.6241,
                        932.2716,
                    new SpatialReference(1,
                            "totam",
                            "tempora",
                            "et"),
                        true,
                        true,
                        225.2725),
                new Point(-66.6787,
                        20.8985,
                        109.3288,
                        -76.8264,
                        182.1418,
                    new SpatialReference(9,
                            "tenetur",
                            "nisi",
                            "et"),
                        true,
                        true,
                        270.2850)],
                    3),
                "eos");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(-131.8180,
                        131.9219,
                        81.8874,
                        -23.2343,
                        418.5889,
                        986.4105,
                        15.1495,
                        201.8977,
                    new SpatialReference(3,
                            "hic",
                            "et",
                            "recusandae"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("numquam",
                            "updatedAt",
                        OutputPixelType.Unknown,
                            "cumque",
                            "category"),
                        [5,
                            1,
                            9],
                    Method.Northwest,
                    [new DimensionalDefinition("title",
                            true,
                            "token"),
                    new DimensionalDefinition("avatar",
                            true,
                            "comment")],
                        [2,
                            8],
                    Operation.Last,
                        "non",
                        "dolor",
                    new Point(-115.3711,
                            -53.5393,
                            115.7455,
                            37.3521,
                            601.1093,
                        new SpatialReference(6,
                                "impedit",
                                "aperiam",
                                "repellat"),
                            true,
                            true,
                            138.9869),
                        "Age > 21"),
                new PixelSize(28.7828,
                        16.8125,
                    new PixelSizeSpatialReference(8,
                            275.8512)),
                new RasterFunction("at",
                        "updatedAt",
                    OutputPixelType.S8,
                        "placeat",
                        "createdAt"),
                new TimeExtent(new DateTime(2009, 1, 25, 13, 6, 41),
                        new DateTime(2002, 4, 24, 2, 43, 31))),
                "rem");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["quod",
                    "cumque",
                    "quos"],
                    ["id",
                        "password"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(44.7334,
                    -158.9138,
                    -58.0299,
                    -73.6514,
                    928.2658,
                    81.4021,
                    927.9107,
                    177.6168,
                new SpatialReference(5,
                        "sint",
                        "ea",
                        "distinctio"),
                    true,
                    true),
                8,
                2,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(71.5379,
                        85.0187,
                        176.1788,
                        13.8487,
                        567.7199,
                    new SpatialReference(7,
                            "quia",
                            "qui",
                            "quia"),
                        true,
                        true,
                        506.3476),
                    3,
                    [9,
                        7,
                        7],
                new Point(144.0090,
                        45.4516,
                        -169.7130,
                        54.9542,
                        143.2285,
                    new SpatialReference(6,
                            "sapiente",
                            "quaerat",
                            "ipsum"),
                        true,
                        true,
                        808.4231),
                    "PostalCode = 'M5V 1J9'"),
                "non");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("labore",
                    "password",
                OutputPixelType.F64,
                    "dicta",
                    "avatar"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(8,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(4,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(9,
                    "ut"),
                "quas");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Polygon([new MapPath([new MapPoint([473.7343,
                            311.9602,
                            938.1914]),
                        new MapPoint([730.4309,
                            229.3811,
                            47.6552]),
                        new MapPoint([819.9494,
                            439.3031]),
                        new MapPoint([26.1920,
                            905.1644,
                            620.0950])]),
                        new MapPath([new MapPoint([684.4708,
                                550.7264,
                                765.1199,
                                19.5732]),
                            new MapPoint([112.8615,
                                834.3741])]),
                        new MapPath([new MapPoint([997.7558,
                                943.3184,
                                368.2537,
                                852.5249]),
                            new MapPoint([317.4325,
                                461.2589]),
                            new MapPoint([888.1029,
                                202.4198])])],
                    new SpatialReference(3,
                            "excepturi",
                            "expedita",
                            "eos"),
                    new Point(-156.0426,
                            8.1828,
                            -107.3138,
                            -82.4544,
                            900.0690,
                        new SpatialReference(8,
                                "doloremque",
                                "ex",
                                "ipsum"),
                            true,
                            true,
                            744.5896),
                        true,
                        true,
                        true),
                Interpolation.Nearest,
                [new Point(161.6846,
                        36.1532,
                        -157.2710,
                        67.1401,
                        495.4532,
                    new SpatialReference(8,
                            "similique",
                            "in",
                            "soluta"),
                        true,
                        true,
                        428.1459),
                new Point(-31.6987,
                        -12.3968,
                        174.4810,
                        53.3997,
                        359.6925,
                    new SpatialReference(9,
                            "quos",
                            "voluptate",
                            "odio"),
                        true,
                        true,
                        845.9320),
                new Point(97.4949,
                        60.3931,
                        21.8173,
                        70.2251,
                        200.2215,
                    new SpatialReference(4,
                            "provident",
                            "qui",
                            "deserunt"),
                        true,
                        true,
                        986.5568),
                new Point(1.0643,
                        -26.2828,
                        131.8835,
                        -88.7491,
                        888.5307,
                    new SpatialReference(3,
                            "quis",
                            "fugit",
                            "quo"),
                        true,
                        true,
                        521.6785)],
                new MosaicRule(true,
                    new RasterFunction("veritatis",
                            "token",
                        OutputPixelType.Unknown,
                            "nemo",
                            "group"),
                        [3,
                            2],
                    Method.Attribute,
                    [new DimensionalDefinition("category",
                            true,
                            "id"),
                    new DimensionalDefinition("email",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("avatar",
                            true,
                            "token")],
                        [2,
                            7],
                    Operation.Min,
                        "voluptatem",
                        "nemo",
                    new Point(153.8253,
                            -86.6185,
                            4.9024,
                            -3.3120,
                            95.9618,
                        new SpatialReference(8,
                                "eos",
                                "eos",
                                "laudantium"),
                            true,
                            true,
                            104.0336),
                        "Street = '123 Main St.'"),
                    ["est",
                        "non",
                        "dolor",
                        "rerum"],
                new PixelSize(43.3727,
                        22.1034,
                    new PixelSizeSpatialReference(6,
                            901.4602)),
                    true,
                    4,
                    492.1359,
                    2,
                new TimeExtent(new DateTime(2001, 9, 15, 12, 23, 38),
                        new DateTime(2013, 8, 23, 1, 53, 12))),
                "aut");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Polygon([new MapPath([new MapPoint([859.4750,
                            557.4321,
                            86.1094,
                            178.9293]),
                        new MapPoint([667.2948,
                            802.1462,
                            262.6811,
                            552.5724]),
                        new MapPoint([621.4660,
                            338.5076])]),
                        new MapPath([new MapPoint([381.4889,
                                847.6547,
                                834.6611]),
                            new MapPoint([112.6710,
                                395.9790,
                                394.2450,
                                887.3230])]),
                        new MapPath([new MapPoint([41.5547,
                                214.8854,
                                960.3017,
                                548.7510]),
                            new MapPoint([77.2260,
                                940.6475,
                                305.6197])])],
                    new SpatialReference(2,
                            "ut",
                            "eos",
                            "omnis"),
                    new Point(37.4428,
                            25.3385,
                            -118.1568,
                            -44.1821,
                            216.1078,
                        new SpatialReference(7,
                                "voluptatibus",
                                "nihil",
                                "eos"),
                            true,
                            true,
                            370.8661),
                        true,
                        true,
                        true),
                    3,
                new MosaicRule(true,
                    new RasterFunction("saepe",
                            "email",
                        OutputPixelType.S32,
                            "laboriosam",
                            "comment"),
                        [8,
                            3,
                            6,
                            1],
                    Method.Northwest,
                    [new DimensionalDefinition("status",
                            true,
                            "status"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "id"),
                    new DimensionalDefinition("id",
                            true,
                            "password"),
                    new DimensionalDefinition("email",
                            true,
                            "email")],
                        [2,
                            9,
                            1],
                    Operation.Blend,
                        "laudantium",
                        "iure",
                    new Point(-50.2956,
                            -30.4078,
                            -120.3568,
                            12.1354,
                            158.4735,
                        new SpatialReference(2,
                                "sit",
                                "voluptate",
                                "ipsa"),
                            true,
                            true,
                            382.9524),
                        "1 = 1"),
                new PixelSize(-171.6015,
                        46.2022,
                    new PixelSizeSpatialReference(3,
                            104.9589)),
                    true,
                new RasterFunction("velit",
                        "category",
                    OutputPixelType.F32,
                        "possimus",
                        "title"),
                new RasterFunction("rerum",
                        "title",
                    OutputPixelType.C128,
                        "animi",
                        "email"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2017, 10, 21, 1, 25, 39),
                        new DateTime(2013, 2, 26, 17, 40, 49))),
                "excepturi");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    802.3362,
                new Polygon([new MapPath([new MapPoint([491.1262,
                            349.2340]),
                        new MapPoint([139.2631,
                            992.8200,
                            993.6024,
                            813.1143]),
                        new MapPoint([994.5941,
                            464.7710,
                            991.4047]),
                        new MapPoint([682.9387,
                            714.9445])]),
                        new MapPath([new MapPoint([748.3386,
                                151.5487,
                                48.7899]),
                            new MapPoint([845.9634,
                                803.6341,
                                346.8982,
                                16.4200])]),
                        new MapPath([new MapPoint([242.0966,
                                714.9446,
                                368.6957,
                                833.0209]),
                            new MapPoint([855.1000,
                                436.2634,
                                13.5504,
                                578.9947]),
                            new MapPoint([384.2070,
                                751.1041,
                                382.6197])]),
                        new MapPath([new MapPoint([925.2251,
                                135.1210,
                                276.8569]),
                            new MapPoint([634.1328,
                                804.3114,
                                872.7484,
                                816.7118]),
                            new MapPoint([557.9872,
                                557.0914,
                                50.8501]),
                            new MapPoint([207.0087,
                                418.7153,
                                744.9651,
                                390.1832])])],
                    new SpatialReference(3,
                            "hic",
                            "occaecati",
                            "nam"),
                    new Point(36.6767,
                            -79.7750,
                            -35.2322,
                            64.3236,
                            986.8483,
                        new SpatialReference(3,
                                "enim",
                                "voluptas",
                                "in"),
                            true,
                            true,
                            68.7502),
                        true,
                        true,
                        true),
                new SpatialReference(8,
                        "eos",
                        "reiciendis",
                        "adipisci"),
                    7),
                "in");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Polyline([new MapPath([new MapPoint([478.7097,
                            877.1781]),
                        new MapPoint([82.9488,
                            491.4431]),
                        new MapPoint([586.3105,
                            89.3890,
                            846.3667])]),
                        new MapPath([new MapPoint([815.0030,
                                260.9515,
                                489.9976,
                                242.6858]),
                            new MapPoint([486.1327,
                                675.0363,
                                544.2441]),
                            new MapPoint([516.0573,
                                628.6063]),
                            new MapPoint([6.3393,
                                743.0696,
                                850.1470,
                                552.8145])]),
                        new MapPath([new MapPoint([102.2026,
                                392.1101,
                                137.1715,
                                574.9892]),
                            new MapPoint([971.3312,
                                930.3912,
                                884.5299]),
                            new MapPoint([667.8044,
                                138.2018,
                                845.8938,
                                227.4823]),
                            new MapPoint([547.1747,
                                419.8017])])],
                    new SpatialReference(1,
                            "cumque",
                            "ipsum",
                            "est"),
                        true,
                        true)],
                new SpatialReference(9,
                        "et",
                        "ipsum",
                        "impedit"),
                    [6,
                        9,
                        1,
                        4]),
                "doloremque");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Extent(138.2184,
                        101.4130,
                        -6.9309,
                        -18.3984,
                        829.3669,
                        12.2485,
                        555.6247,
                        230.7871,
                    new SpatialReference(3,
                            "qui",
                            "et",
                            "minima"),
                        true,
                        true),
                    7,
                    true),
                "at");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("consectetur",
                            "phone",
                        OutputPixelType.F64,
                            "asperiores",
                            "id"),
                        [3,
                            6,
                            8,
                            6],
                    Method.Seamline,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "comment"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("title",
                            true,
                            "phone")],
                        [7,
                            2,
                            2],
                    Operation.Mean,
                        "vitae",
                        "amet",
                    new Point(0.3563,
                            68.9767,
                            13.2940,
                            -89.5363,
                            933.6882,
                        new SpatialReference(1,
                                "consequatur",
                                "eligendi",
                                "ex"),
                            true,
                            true,
                            139.2015),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(54.6843,
                        44.4732,
                    new PixelSizeSpatialReference(4,
                            986.9674)),
                ImageAreaUnit.SquareUsFeet,
                new Point(-18.6887,
                        -88.7431,
                        -24.3929,
                        54.1499,
                        760.5129,
                    new SpatialReference(8,
                            "enim",
                            "omnis",
                            "aspernatur"),
                        true,
                        true,
                        551.3430),
                    true,
                LengthUnit.Inches),
                "dolor");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Point(60.1665,
                        5.7588,
                        -53.5871,
                        -15.7286,
                        491.1083,
                    new SpatialReference(6,
                            "laboriosam",
                            "tenetur",
                            "molestiae"),
                        true,
                        true,
                        624.7147),
                    6),
                "facilis");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("explicabo",
                            "avatar",
                        OutputPixelType.Unknown,
                            "est",
                            "comment"),
                        [9,
                            8,
                            1,
                            9],
                    Method.Center,
                    [new DimensionalDefinition("token",
                            true,
                            "avatar"),
                    new DimensionalDefinition("id",
                            true,
                            "title")],
                        [5,
                            2],
                    Operation.Sum,
                        "ut",
                        "quibusdam",
                    new Point(75.9418,
                            32.9676,
                            -56.2490,
                            -48.6579,
                            963.7196,
                        new SpatialReference(6,
                                "illum",
                                "nam",
                                "iusto"),
                            true,
                            true,
                            416.7236),
                        "Street = '123 Main St.'"),
                new PixelSize(-178.7862,
                        -33.6496,
                    new PixelSizeSpatialReference(1,
                            278.2311)),
                AngularUnit.Radians,
                new Point(-155.0803,
                        6.5381,
                        -165.1389,
                        -24.5802,
                        794.6708,
                    new SpatialReference(7,
                            "sequi",
                            "soluta",
                            "repellat"),
                        true,
                        true,
                        120.4742),
                    true,
                LengthUnit.Meters,
                new Point(-134.3684,
                        -38.1651,
                        -166.6998,
                        -28.9327,
                        417.2662,
                    new SpatialReference(4,
                            "reprehenderit",
                            "similique",
                            "molestiae"),
                        true,
                        true,
                        55.0903)),
                "dolorem");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("libero",
                            "email",
                        OutputPixelType.S8,
                            "ea",
                            "phone"),
                        [8,
                            3,
                            8],
                    Method.Northwest,
                    [new DimensionalDefinition("comment",
                            true,
                            "updatedAt"),
                    new DimensionalDefinition("id",
                            true,
                            "phone")],
                        [6,
                            1],
                    Operation.Last,
                        "veniam",
                        "quo",
                    new Point(40.2145,
                            1.9047,
                            134.9941,
                            -39.0351,
                            658.4968,
                        new SpatialReference(3,
                                "ullam",
                                "sapiente",
                                "quam"),
                            true,
                            true,
                            778.5238),
                        "1 = 1"),
                new PixelSize(-39.9854,
                        -81.9162,
                    new PixelSizeSpatialReference(1,
                            255.4964)),
                new Point(-174.0676,
                        36.5421,
                        -92.1809,
                        32.6171,
                        967.4006,
                    new SpatialReference(3,
                            "nostrum",
                            "nemo",
                            "enim"),
                        true,
                        true,
                        261.6690),
                LengthUnit.Yards,
                OperationType.TopAndTopShadow,
                new Point(-117.7671,
                        -28.8591,
                        178.8576,
                        -24.5640,
                        843.4759,
                    new SpatialReference(1,
                            "ut",
                            "dolorum",
                            "odio"),
                        true,
                        true,
                        765.8244)),
                "rerum");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polyline([new MapPath([new MapPoint([726.0974,
                            383.0829]),
                        new MapPoint([253.0293,
                            454.4455]),
                        new MapPoint([101.3351,
                            602.4668]),
                        new MapPoint([769.0596,
                            852.4496])]),
                        new MapPath([new MapPoint([122.8385,
                                490.5300]),
                            new MapPoint([433.2087,
                                758.7649])]),
                        new MapPath([new MapPoint([888.2988,
                                411.1445,
                                683.3551]),
                            new MapPoint([422.7365,
                                778.2568])])],
                    new SpatialReference(3,
                            "eveniet",
                            "commodi",
                            "doloremque"),
                        true,
                        true),
                    4),
                "quae");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("qui",
                            "name",
                        OutputPixelType.U32,
                            "commodi",
                            "password"),
                        [8,
                            4],
                    Method.None,
                    [new DimensionalDefinition("comment",
                            true,
                            "name"),
                    new DimensionalDefinition("name",
                            true,
                            "email"),
                    new DimensionalDefinition("status",
                            true,
                            "createdAt")],
                        [8,
                            1,
                            2],
                    Operation.Max,
                        "doloremque",
                        "architecto",
                    new Point(-120.8227,
                            -25.7251,
                            117.9217,
                            -63.6932,
                            362.5977,
                        new SpatialReference(3,
                                "minus",
                                "iusto",
                                "in"),
                            true,
                            true,
                            107.1630),
                        "Age > 21"),
                new PixelSize(31.8137,
                        84.0825,
                    new PixelSizeSpatialReference(1,
                            599.3321)),
                new Extent(179.8051,
                        90.5708,
                        -61.6626,
                        66.6717,
                        867.9348,
                        784.2886,
                        284.3174,
                        590.5575,
                    new SpatialReference(9,
                            "dolorem",
                            "minima",
                            "ut"),
                        true,
                        true),
                    true),
                "et");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(1,
                        "eius",
                        "reprehenderit",
                        "modi")),
                "quae");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Polygon([new MapPath([new MapPoint([374.1727,
                            904.5862,
                            909.1869,
                            730.7948]),
                        new MapPoint([927.9012,
                            225.5357]),
                        new MapPoint([629.0086,
                            733.2663,
                            301.5696]),
                        new MapPoint([234.2009,
                            43.8809,
                            813.6676,
                            223.7909])]),
                        new MapPath([new MapPoint([66.9766,
                                775.4908]),
                            new MapPoint([253.9094,
                                767.7433,
                                534.1843,
                                96.0427])]),
                        new MapPath([new MapPoint([18.7918,
                                962.2513,
                                171.7405,
                                720.5077]),
                            new MapPoint([340.3797,
                                107.6958,
                                17.0499]),
                            new MapPoint([715.9891,
                                62.5165,
                                328.0452,
                                233.6562])]),
                        new MapPath([new MapPoint([951.2577,
                                991.0121,
                                726.7151,
                                219.0966]),
                            new MapPoint([856.0942,
                                960.9954]),
                            new MapPoint([857.9907,
                                710.2761,
                                984.6607,
                                778.2576]),
                            new MapPoint([275.4760,
                                311.3295])])],
                    new SpatialReference(4,
                            "repudiandae",
                            "eos",
                            "aut"),
                    new Point(60.1975,
                            -23.3328,
                            90.7887,
                            -60.6800,
                            48.7818,
                        new SpatialReference(5,
                                "illo",
                                "ut",
                                "sequi"),
                            true,
                            true,
                            625.2554),
                        true,
                        true,
                        true),
                    [7,
                        5],
                SpatialRelationship.Touches,
                new TimeExtent(new DateTime(2017, 1, 1, 11, 42, 14),
                        new DateTime(2011, 5, 22, 14, 32, 42)),
                    "Street = '123 Main St.'"),
                "nostrum");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([1,
                    6,
                    6,
                    5],
                    true,
                    666.8513,
                    539.8846,
                    "0.8.3.6",
                new Point(91.8213,
                        64.6691,
                        -61.9482,
                        -37.5907,
                        192.5274,
                    new SpatialReference(4,
                            "in",
                            "laboriosam",
                            "qui"),
                        true,
                        true,
                        754.1280),
                    2,
                    ["tempore",
                        "fuga",
                        "quia",
                        "nobis"],
                    "neque",
                    new DateTime(2016, 6, 7, 21, 8, 47),
                    374.0098,
                    3,
                    "non",
                    3),
                "veritatis");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([3,
                    3,
                    2],
                    true,
                    823.0214,
                    503.2258,
                    "0.9.8.7",
                new Polygon([new MapPath([new MapPoint([339.4688,
                            909.1042,
                            851.4830,
                            778.4315]),
                        new MapPoint([759.8690,
                            485.6811,
                            825.1489])]),
                        new MapPath([new MapPoint([62.3809,
                                220.9089,
                                637.0052,
                                787.8036]),
                            new MapPoint([481.0976,
                                864.0956,
                                833.2418,
                                245.4068]),
                            new MapPoint([576.1199,
                                734.9307]),
                            new MapPoint([271.5855,
                                143.9477,
                                832.3141,
                                594.7974])]),
                        new MapPath([new MapPoint([58.1909,
                                296.1929,
                                170.7155]),
                            new MapPoint([929.2136,
                                587.5477]),
                            new MapPoint([801.2410,
                                350.9193,
                                429.7982,
                                846.2313]),
                            new MapPoint([145.0895,
                                733.7023,
                                462.0282])])],
                    new SpatialReference(4,
                            "eius",
                            "eum",
                            "quasi"),
                    new Point(-149.7272,
                            -52.1408,
                            -9.8191,
                            5.4642,
                            28.1340,
                        new SpatialReference(6,
                                "dolor",
                                "voluptatem",
                                "quis"),
                            true,
                            true,
                            742.1388),
                        true,
                        true,
                        true),
                    6,
                    ["eaque",
                        "rerum"],
                    "velit",
                    new DateTime(2018, 7, 15, 6, 48, 14),
                    211.4368,
                    7,
                    "voluptatem",
                    4),
                "nihil");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([3,
                    7,
                    5,
                    1],
                    true,
                    684.0495,
                    281.2102,
                    "5.0.3.8",
                new Extent(-118.7194,
                        128.3176,
                        82.0483,
                        10.6992,
                        452.0332,
                        645.0425,
                        544.0136,
                        175.4834,
                    new SpatialReference(3,
                            "quaerat",
                            "vel",
                            "corrupti"),
                        true,
                        true),
                    3,
                    ["cumque",
                        "assumenda"],
                    "ut",
                    new DateTime(2012, 6, 2, 4, 5, 33),
                    875.2917,
                    9,
                    "dolorem",
                    6),
                "in");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2001, 5, 13, 15, 24, 6),
                        "dignissimos",
                        "veniam voluptatem quidem"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem();
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Difference;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Png8;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Cubic;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAll;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.F64;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2019, 6, 18, 15, 23, 22),
                    new DateTime(2012, 6, 4, 4, 18, 6));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("veniam",
                    "rerum",
                new TimeExtent(new DateTime(2011, 4, 1, 11, 44, 34),
                        new DateTime(2004, 2, 3, 12, 19, 22)),
                new TimeInterval(TemporalTime.Hours,
                        541.1475),
                    [new DateTime(2007, 2, 19, 6, 39, 8),
                        new DateTime(2015, 11, 18, 1, 39, 50),
                        new DateTime(2014, 11, 26, 22, 23, 52)],
                    "America/Juneau",
                    "reiciendis");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Weeks,
                    798.6114);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Hide;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(27.1525,
                    -43.5294,
                    87.7409,
                    58.2497,
                    697.4077,
                    912.6598,
                    885.5919,
                    560.6425,
                new SpatialReference(6,
                        "laborum",
                        "nulla",
                        "libero"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(5,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "updatedAt",
                    "eos",
                    "in illum numquam optio iure",
                    8,
                    true,
                    true,
                    new { Value = "deserunt" },
                FieldValueType.UniqueIdentifier,
                new InheritedDomain("createdAt"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("praesentium",
                        "createdAt",
                    OutputPixelType.U32,
                        "fugit",
                        "title"),
                    [8,
                        9],
                Method.LockRaster,
                [new DimensionalDefinition("token",
                        true,
                        "title")],
                    [4,
                        1,
                        9,
                        2],
                Operation.Mean,
                    "ad",
                    "necessitatibus",
                new Point(-140.4689,
                        88.1829,
                        -18.2645,
                        -62.0244,
                        891.8860,
                    new SpatialReference(6,
                            "itaque",
                            "doloremque",
                            "autem"),
                        true,
                        true,
                        788.0859),
                    "City = 'Toronto'");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Extent(113.7483,
                        4.9064,
                        -66.2822,
                        -46.3994,
                        245.6665,
                        297.3978,
                        273.3099,
                        909.5040,
                    new SpatialReference(6,
                            "corrupti",
                            "temporibus",
                            "est"),
                        true,
                        true),
                [new DimensionalDefinition("createdAt",
                        true,
                        "id"),
                new DimensionalDefinition("password",
                        true,
                        "avatar"),
                new DimensionalDefinition("comment",
                        true,
                        "avatar"),
                new DimensionalDefinition("token",
                        true,
                        "phone")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("ea dolorum minus",
                    "ad",
                    ["cum",
                        "consequatur",
                        "enim",
                        "aliquid"],
                [new FieldInfo("createdAt",
                        "ad",
                        "voluptatum",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("avatar",
                        "quaerat",
                        "non",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(3,
                            true,
                        DateFormat.LongDate),
                        true,
                        true,
                    StatisticType.Min),
                new FieldInfo("email",
                        "est",
                        "omnis",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("email",
                        "quidem",
                        "beatae",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Max)],
                [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Population / $feature.Area;",
                            "natus",
                            "voluptatem corporis velit")),
                new ExpressionPopupContent(new ElementExpressionInfo("var area = Geometry($feature).area; return area;",
                            "at",
                            "minima reprehenderit id"))],
                [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "email",
                        "ad consequuntur quis",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "category",
                        "non est ducimus",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("molestias voluptatum iste",
                        "https://picsum.photos/640/480/?image=167",
                        "3bf8b606-2aa4-bc40-4833-99c07c73eab1",
                        () => { Console.WriteLine("similique"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "dolores"),
                new ActionToggle("quis sed eos",
                        "ec3e879e-580b-ebc0-63b7-4551b3a3264b",
                        () => { Console.WriteLine("minima"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "phone",
                        "et"),
                new ActionToggle("placeat et qui",
                        "572f4882-be0f-9064-73a6-2698b20e7040",
                        () => { Console.WriteLine("laborum"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "createdAt",
                        "voluptates")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("qui",
                    "updatedAt",
                OutputPixelType.S32,
                    "nemo",
                    "status");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2005, 8, 3, 11, 0, 35),
                    new DateTime(2022, 10, 17, 13, 30, 14));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
