@using dymaptic.GeoBlazor.Core.Functions
@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryLayer(Action renderHandler)
    {
        ImageryLayer? imageryLayer = null;

        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ImageryLayer 
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.LabLch,
                                new MapColor(80, 171, 50),
                                new MapColor(30, 105, 135)),
                            true,
                            true,
                            [9,
                            9,
                            7,
                            3],
                            3,
                            7,
                            StretchType.MinMax,
                            [new RasterBandStatistics(228.3074,
                                6,
                                134.8629,
                                462.3518,
                                196.2840,
                                434.1472,
                                529.1674,
                                826.2092),
                            new RasterBandStatistics(619.7026,
                                2,
                                6.9722,
                                543.9702,
                                852.7610,
                                879.3980,
                                986.6259,
                                91.6710)],
                            true,
                            8))"
                        BandIds="@([5,
                            7,
                            7])"
                        BlendMode="@(BlendMode.SourceAtop)"
                        CompressionQuality="@(702.4733)"
                        CompressionTolerance="@(990.0688)"
                        Copyright="@("qui")"
                        DefinitionExpression="@("ex")"
                        Effect="@(new Effect("earum",
                            38584092.7831))"
                        Format="@(ImageFormat.Tiff)"
                        HasMultidimensions="@(true)"
                        ImageMaxHeight="@(5)"
                        ImageMaxWidth="@(8)"
                        Interpolation="@(Interpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        MaxScale="@(10239843.6711)"
                        MinScale="@(18479.6583)"
                        NoData="@(new NoData([8,
                            8]))"
                        NoDataInterpretation="@(NoDataInterpretation.MatchAll)"
                        ObjectIdField="@("quas")"
                        PersistenceEnabled="@(true)"
                        PixelType="@(PixelType.F32)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(911.4203)"
                        UseViewTime="@(true)"
                        TileInfo="@(new TileInfo(469.7592,
                                TileInfoFormat.Svg,
                                true,
                            [new LOD(1,
                                    "nihil",
                                    59.0401,
                                    42605053.4486),
                            new LOD(4,
                                    "enim",
                                    27.0606,
                                    9069255.7817),
                            new LOD(9,
                                    "dolor",
                                    90.0313,
                                    43724732.7599),
                            new LOD(7,
                                    "quidem",
                                    33.1735,
                                    21958912.3093)],
                            new Point(87.3922,
                                    -44.6136,
                                    58.6137,
                                    88.4656,
                                    52.4819,
                                new SpatialReference(6,
                                        "ratione",
                                        "facilis",
                                        "cum"),
                                    true,
                                    true,
                                    462.0924),
                                [8,
                                    7],
                            new SpatialReference(8,
                                    "cupiditate",
                                    "ipsa",
                                    "commodi")))"
                        Title="@("aut id unde")"
                        Opacity="@(0.8262)"
                        ListMode="@(ListMode.Hide)"
                        Visible="@(true)"
                        FullExtent="@(new Extent(3.8643,
                                45.8272,
                                -72.7191,
                                74.9911,
                                157.8471,
                                419.8950,
                                311.1346,
                                647.2929,
                            new SpatialReference(3,
                                    "eos",
                                    "cumque",
                                    "magnam"),
                                true,
                                true))"
                        MosaicRule="@(new MosaicRule(true,
                            new RasterFunction("enim",
                                    "createdAt",
                                OutputPixelType.S8,
                                    "voluptatum",
                                    "title"),
                                [4,
                                    2,
                                    6],
                            Method.Seamline,
                            [new DimensionalDefinition("category",
                                    true,
                                    "email"),
                            new DimensionalDefinition("createdAt",
                                    true,
                                    "title")],
                                [9,
                                    2],
                            Operation.Sum,
                                "dolorem",
                                "earum",
                            new Point(135.9571,
                                    28.4385,
                                    -126.4208,
                                    63.8447,
                                    355.0709,
                                new SpatialReference(1,
                                        "occaecati",
                                        "cumque",
                                        "debitis"),
                                    true,
                                    true,
                                    657.1808),
                                "Age > 21"))"
                        PixelFilter="@(_ => Task.CompletedTask)"
                        SourceJSON="@("{\n                    \"type\": \"FeatureCollection\",\n                    \"features\": [\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [102.0, 0.5]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\"\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"LineString\",\n                                \"coordinates\": [\n                                    [102.0, 0.0],\n                                    [103.0, 1.0],\n                                    [104.0, 0.0],\n                                    [105.0, 1.0]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": 0.0\n                            }\n                        },\n                        {\n                            \"type\": \"Feature\",\n                            \"geometry\": {\n                                \"type\": \"Polygon\",\n                                \"coordinates\": [\n                                    [\n                                        [100.0, 0.0],\n                                        [101.0, 0.0],\n                                        [101.0, 1.0],\n                                        [100.0, 1.0],\n                                        [100.0, 0.0]\n                                    ]\n                                ]\n                            },\n                            \"properties\": {\n                                \"prop0\": \"value0\",\n                                \"prop1\": { \"this\": \"that\" }\n                            }\n                        }\n                    ]\n                }")"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Weeks)"
                            Value="@(556.7213)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("est")"
                            EndField="@("nihil")"
                            Stops="@([new DateTime(2008, 5, 9, 13, 16, 29),
                                new DateTime(2014, 4, 3, 22, 40, 26)])"
                            TimeZone="@("Europe/Athens")"
                            TrackIdField="@("placeat")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(391.9927)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2002, 2, 12, 0, 22, 12))"
                                End="@(new DateTime(2000, 4, 1, 19, 13, 38))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2017, 10, 10, 19, 28, 53))"
                            End="@(new DateTime(2010, 4, 15, 15, 48, 33))">
                        </TimeExtent>
                        <RasterFunction 
                            FunctionArguments="@("eum")"
                            FunctionName="@("avatar")"
                            OutputPixelType="@(OutputPixelType.U16)"
                            RasterFunctionDefinition="@("facilis")"
                            VariableName="@("name")">
                        </RasterFunction>
                        <PortalItem 
                            Access="@(PortalItemAccess.Public)"
                            AccessInformation="@("in")"
                            ApiKey="@("perferendis")"
                            AvgRating="@(578.6300)"
                            Categories="@(["voluptas",
                                "eum"])"
                            Created="@(new DateTime(2021, 5, 26, 19, 58, 29))"
                            Culture="@("atque")"
                            Description="@("ut nisi qui nulla")"
                            Extent="@(new Extent(-41.0858,
                                    -79.3596,
                                    -51.1413,
                                    -32.9171,
                                    275.7571,
                                    314.5624,
                                    592.2942,
                                    144.1741,
                                new SpatialReference(8,
                                        "natus",
                                        "quis",
                                        "laboriosam"),
                                    true,
                                    true))"
                            GroupCategories="@(["aut",
                                "unde",
                                "dolorem"])"
                            LicenseInfo="@("eaque")"
                            Modified="@(new DateTime(2021, 6, 19, 4, 26, 25))"
                            Name="@("name")"
                            NumComments="@(785.4664)"
                            NumRatings="@(880.6536)"
                            NumViews="@(481.1590)"
                            Owner="@("Carley Crist")"
                            OwnerFolder="@("Leonard Jacobi")"
                            Portal="@(new Portal(PortalAccess.Public,
                                    true,
                                AuthMode.NoPrompt,
                                    ["facilis",
                                        "esse",
                                        "numquam",
                                        "quis"],
                                    "atque",
                                    "dicta",
                                    "quae",
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            PortalItemId="@("magnam")"
                            Screenshots="@(["ratione",
                                "accusantium",
                                "libero",
                                "ut"])"
                            Size="@(4)"
                            Snippet="@("nihil")"
                            Tags="@(["eum",
                                "ipsum"])"
                            Title="@("ut illo molestiae")"
                            TypeKeywords="@(["saepe",
                                "repellendus",
                                "perferendis"])"
                            Url="@("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/IncidentsReport/FeatureServer/0")">
                        </PortalItem>
                        <PopupTemplate 
                            Title="@("sint ducimus quis")"
                            StringContent="@("dolores")"
                            OutFields="@(["saepe",
                                "rerum",
                                "beatae"])"
                            FieldInfos="@([new FieldInfo("name",
                                    "quaerat",
                                    "quibusdam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("category",
                                    "quos",
                                    "numquam",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Var),
                            new FieldInfo("email",
                                    "consequatur",
                                    "soluta",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Var)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("status",
                                        "excepturi",
                                        "quia",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.ShortDateLeLongTime),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                    "quia qui ex aut minima debitis",
                                    "quia non qui"),
                            new FieldsPopupContent([new FieldInfo("comment",
                                        "vero",
                                        "in",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(8,
                                            true,
                                        DateFormat.LongDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Min),
                                new FieldInfo("email",
                                        "labore",
                                        "tempore",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(9,
                                            true,
                                        DateFormat.LongDate),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("token",
                                        "voluptates",
                                        "velit",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.LongDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Max)],
                                    "aperiam iure quibusdam nostrum magni vel qui",
                                    "ullam provident eos"),
                            new TextPopupContent("fugiat voluptate sit")])"
                            ExpressionInfos="@([new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "avatar",
                                    "quas reiciendis nisi",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionToggle("aut saepe dolores",
                                    "f41a8314-fcfd-08fa-4236-4a1fd57bd1c9",
                                    () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                    true,
                                    true,
                                    true,
                                    true,
                                    "createdAt",
                                    "quia"),
                            new ActionButton("dolorem vero voluptatum",
                                    "https://picsum.photos/640/480/?image=765",
                                    "34b10bc7-9582-3472-0a02-2853433278fd",
                                    () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "sed"),
                            new ActionButton("nihil sint enim",
                                    "https://picsum.photos/640/480/?image=192",
                                    "3c6f274c-075c-e149-aae1-b1a6b835493c",
                                    () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "deserunt")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([353.6366,
                                        298.8874,
                                        643.0569,
                                        622.0828]),
                                    new MapPoint([865.3832,
                                        469.3916,
                                        205.6231,
                                        646.8878])]),
                                    new MapPath([new MapPoint([765.2236,
                                            584.0422,
                                            498.1237,
                                            410.5103]),
                                        new MapPoint([606.8227,
                                            310.4638,
                                            348.0559])]),
                                    new MapPath([new MapPoint([7.1867,
                                            494.9995,
                                            71.4876,
                                            991.5015]),
                                        new MapPoint([825.7495,
                                            556.3624,
                                            260.1101])])],
                                new SpatialReference(2,
                                        "harum",
                                        "aspernatur",
                                        "rem"),
                                    true,
                                    true))"
                            SubsetDefinitions="@([new DimensionalDefinition("category",
                                    true,
                                    "title"),
                            new DimensionalDefinition("phone",
                                    true,
                                    "phone"),
                            new DimensionalDefinition("email",
                                    true,
                                    "avatar"),
                            new DimensionalDefinition("phone",
                                    true,
                                    "phone")])">
                        </MultidimensionalSubset>
                        <Field 
                            Name="@("group")"
                            Alias="@("nam")"
                            Description="@("occaecati eos similique optio")"
                            Length="@(2)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "officiis" })"
                            ValueType="@(FieldValueType.Binary)"
                            Domain="@(new RangeDomain("est",
                                    "dignissimos",
                                    "group"))">
                        </Field>
                        <ArcGISImageServiceCapabilities 
                            Mensuration="@(new ArcGISImageServiceCapabilitiesMensuration(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Operations="@(new ArcGISImageServiceCapabilitiesOperations(true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))"
                            Query="@(new ArcGISImageServiceCapabilitiesQuery(8,
                                    true,
                                    true,
                                    true,
                                    true,
                                    true))">
                        </ArcGISImageServiceCapabilities>
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(imageryLayer!);
        await AssertJavaScript("dispatchEvent", args: [imageryLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "imagery");
        var computeAnglesMethodResult = await imageryLayer.ComputeAngles(new ImageAngleParameters(["email",
                    "avatar",
                    "name",
                    "group"],
                new Point(82.9553,
                        -38.4587,
                        -126.4353,
                        72.3484,
                        941.2611,
                    new SpatialReference(7,
                            "voluptas",
                            "in",
                            "recusandae"),
                        true,
                        true,
                        53.4498),
                    4,
                new SpatialReference(4,
                        "delectus",
                        "sunt",
                        "aliquid")),
                "quia");
        Assert.IsNotNull(computeAnglesMethodResult);
        var computeHistogramsMethodResult = await imageryLayer.ComputeHistograms(new ImageHistogramParameters(new Point(83.1678,
                        -60.4469,
                        144.5994,
                        -3.7160,
                        35.0018,
                    new SpatialReference(4,
                            "libero",
                            "sit",
                            "voluptas"),
                        true,
                        true,
                        18.5957),
                new MosaicRule(true,
                    new RasterFunction("amet",
                            "id",
                        OutputPixelType.Unknown,
                            "omnis",
                            "password"),
                        [6,
                            2,
                            9],
                    Method.Center,
                    [new DimensionalDefinition("status",
                            true,
                            "phone"),
                    new DimensionalDefinition("password",
                            true,
                            "avatar")],
                        [3,
                            3,
                            5,
                            1],
                    Operation.Max,
                        "animi",
                        "eos",
                    new Point(116.3118,
                            -46.6745,
                            -127.7479,
                            -22.2530,
                            823.3252,
                        new SpatialReference(4,
                                "ea",
                                "consequatur",
                                "debitis"),
                            true,
                            true,
                            754.3542),
                        "Phone = '555-555-5555'"),
                new PixelSize(5.3580,
                        24.7281,
                    new PixelSizeSpatialReference(5,
                            67.9893)),
                new RasterFunction("occaecati",
                        "email",
                    OutputPixelType.U16,
                        "rerum",
                        "id"),
                new TimeExtent(new DateTime(2012, 6, 23, 20, 9, 34),
                        new DateTime(2023, 1, 10, 20, 19, 50))),
                "unde");
        Assert.IsNotNull(computeHistogramsMethodResult);
        var computePixelSpaceLocationsMethodResult = await imageryLayer.ComputePixelSpaceLocations(new ImagePixelLocationParameters([new Point(117.8744,
                        8.2268,
                        -126.0012,
                        -25.9607,
                        815.1734,
                    new SpatialReference(8,
                            "earum",
                            "dolorem",
                            "atque"),
                        true,
                        true,
                        881.4694),
                new Point(165.3540,
                        -49.0893,
                        -39.3353,
                        -2.3410,
                        980.5930,
                    new SpatialReference(4,
                            "consectetur",
                            "deleniti",
                            "quibusdam"),
                        true,
                        true,
                        195.0489),
                new Point(36.4240,
                        -76.6921,
                        -139.0771,
                        26.5328,
                        475.2639,
                    new SpatialReference(8,
                            "impedit",
                            "commodi",
                            "reiciendis"),
                        true,
                        true,
                        840.1499),
                new Point(79.6131,
                        -71.1867,
                        24.2068,
                        -78.6623,
                        886.2414,
                    new SpatialReference(3,
                            "aliquid",
                            "est",
                            "est"),
                        true,
                        true,
                        724.7527)],
                    4),
                "et");
        Assert.IsNotNull(computePixelSpaceLocationsMethodResult);
        var computeStatisticsHistogramsMethodResult = await imageryLayer.ComputeStatisticsHistograms(new ImageHistogramParameters(new Extent(64.8934,
                        163.7788,
                        8.9340,
                        28.2622,
                        167.1943,
                        485.9464,
                        608.9186,
                        61.0941,
                    new SpatialReference(6,
                            "alias",
                            "quo",
                            "vitae"),
                        true,
                        true),
                new MosaicRule(true,
                    new RasterFunction("voluptas",
                            "password",
                        OutputPixelType.S16,
                            "culpa",
                            "title"),
                        [9,
                            2],
                    Method.None,
                    [new DimensionalDefinition("comment",
                            true,
                            "status"),
                    new DimensionalDefinition("title",
                            true,
                            "title"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "token"),
                    new DimensionalDefinition("name",
                            true,
                            "id")],
                        [8,
                            5],
                    Operation.Last,
                        "ut",
                        "accusantium",
                    new Point(-161.8446,
                            25.4554,
                            176.1306,
                            73.3442,
                            482.1405,
                        new SpatialReference(9,
                                "fuga",
                                "consequuntur",
                                "voluptatem"),
                            true,
                            true,
                            806.6764),
                        "1 = 1"),
                new PixelSize(-50.3439,
                        -48.3856,
                    new PixelSizeSpatialReference(4,
                            336.9134)),
                new RasterFunction("sint",
                        "updatedAt",
                    OutputPixelType.S32,
                        "eius",
                        "avatar"),
                new TimeExtent(new DateTime(2010, 6, 3, 4, 37, 11),
                        new DateTime(2018, 11, 22, 6, 21, 14))),
                "labore");
        Assert.IsNotNull(computeStatisticsHistogramsMethodResult);
        var createPopupTemplateMethodResult = await imageryLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["asperiores",
                    "eum",
                    "suscipit",
                    "architecto"],
                    ["category",
                        "comment",
                        "title"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchImageMethodResult = await imageryLayer.FetchImage(new Extent(112.8028,
                    -103.9327,
                    -3.7513,
                    65.8955,
                    381.6007,
                    387.9540,
                    440.8306,
                    185.8827,
                new SpatialReference(2,
                        "tempore",
                        "enim",
                        "dignissimos"),
                    true,
                    true),
                6,
                5,
                default);
        Assert.IsNotNull(fetchImageMethodResult);
        var findImagesMethodResult = await imageryLayer.FindImages(new FindImagesParameters(new Point(-129.9881,
                        -47.1700,
                        139.1223,
                        66.6798,
                        404.0602,
                    new SpatialReference(4,
                            "ab",
                            "ut",
                            "ipsum"),
                        true,
                        true,
                        345.5736),
                    8,
                    [6,
                        3,
                        8],
                new Point(61.3802,
                        -20.4975,
                        -113.2811,
                        -30.0400,
                        80.7883,
                    new SpatialReference(4,
                            "aut",
                            "numquam",
                            "inventore"),
                        true,
                        true,
                        653.1836),
                    "Phone = '555-555-5555'"),
                "nobis");
        Assert.IsNotNull(findImagesMethodResult);
        var generateRasterInfoMethodResult = await imageryLayer.GenerateRasterInfo(new RasterFunction("sed",
                    "comment",
                OutputPixelType.S8,
                    "in",
                    "email"),
                default);
        Assert.IsNotNull(generateRasterInfoMethodResult);
        var getCatalogItemICSInfoMethodResult = await imageryLayer.GetCatalogItemICSInfo(6,
                default);
        Assert.IsNotNull(getCatalogItemICSInfoMethodResult);
        var getCatalogItemRasterInfoMethodResult = await imageryLayer.GetCatalogItemRasterInfo(1,
                default);
        Assert.IsNotNull(getCatalogItemRasterInfoMethodResult);
        var getImageUrlMethodResult = await imageryLayer.GetImageUrl(new ImageUrlParameters(5,
                    "ut"),
                "ad");
        Assert.IsNotNull(getImageUrlMethodResult);
        var getSamplesMethodResult = await imageryLayer.GetSamples(new ImageSampleParameters(new Polyline([new MapPath([new MapPoint([296.0921,
                            688.9918,
                            886.0885,
                            885.7860]),
                        new MapPoint([463.8324,
                            193.6905,
                            920.3442]),
                        new MapPoint([14.2595,
                            317.3009,
                            633.6328,
                            512.0165])])],
                    new SpatialReference(4,
                            "laboriosam",
                            "corporis",
                            "vel"),
                        true,
                        true),
                Interpolation.Majority,
                [new Point(-51.6057,
                        -48.9296,
                        -179.7089,
                        70.6709,
                        694.1483,
                    new SpatialReference(4,
                            "impedit",
                            "maiores",
                            "molestiae"),
                        true,
                        true,
                        292.8045),
                new Point(-151.5561,
                        -15.9785,
                        100.6171,
                        27.1864,
                        603.9823,
                    new SpatialReference(6,
                            "velit",
                            "culpa",
                            "blanditiis"),
                        true,
                        true,
                        208.5597)],
                new MosaicRule(true,
                    new RasterFunction("quibusdam",
                            "category",
                        OutputPixelType.F32,
                            "totam",
                            "avatar"),
                        [2,
                            1],
                    Method.Nadir,
                    [new DimensionalDefinition("updatedAt",
                            true,
                            "phone"),
                    new DimensionalDefinition("id",
                            true,
                            "phone"),
                    new DimensionalDefinition("comment",
                            true,
                            "title"),
                    new DimensionalDefinition("token",
                            true,
                            "status")],
                        [5,
                            9,
                            7],
                    Operation.Min,
                        "reiciendis",
                        "velit",
                    new Point(63.0616,
                            -29.2331,
                            154.3274,
                            -41.6806,
                            816.7629,
                        new SpatialReference(6,
                                "earum",
                                "et",
                                "repellat"),
                            true,
                            true,
                            859.6284),
                        "Street = '123 Main St.'"),
                    ["omnis",
                        "molestias",
                        "aut"],
                new PixelSize(-149.3228,
                        -5.9781,
                    new PixelSizeSpatialReference(6,
                            75.3865)),
                    true,
                    6,
                    58.7269,
                    1,
                new TimeExtent(new DateTime(2020, 9, 27, 4, 28, 8),
                        new DateTime(2007, 11, 3, 18, 6, 12))),
                "dolorum");
        Assert.IsNotNull(getSamplesMethodResult);
        var identifyMethodResult = await imageryLayer.Identify(new ImageIdentifyParameters(new Point(68.9484,
                        -67.7193,
                        135.9425,
                        30.2210,
                        946.9999,
                    new SpatialReference(5,
                            "ut",
                            "in",
                            "enim"),
                        true,
                        true,
                        715.8737),
                    2,
                new MosaicRule(true,
                    new RasterFunction("recusandae",
                            "status",
                        OutputPixelType.U1,
                            "ipsum",
                            "comment"),
                        [6,
                            1],
                    Method.LockRaster,
                    [new DimensionalDefinition("createdAt",
                            true,
                            "email")],
                        [2,
                            6],
                    Operation.Max,
                        "quidem",
                        "magnam",
                    new Point(106.0704,
                            -62.9443,
                            -178.4500,
                            -21.0731,
                            964.3659,
                        new SpatialReference(9,
                                "aut",
                                "fuga",
                                "est"),
                            true,
                            true,
                            231.9959),
                        "City = 'Toronto'"),
                new PixelSize(107.1545,
                        -35.9690,
                    new PixelSizeSpatialReference(2,
                            769.6537)),
                    true,
                new RasterFunction("facilis",
                        "token",
                    OutputPixelType.F32,
                        "vel",
                        "password"),
                new RasterFunction("beatae",
                        "category",
                    OutputPixelType.S32,
                        "reprehenderit",
                        "token"),
                    true,
                    true,
                    true,
                new TimeExtent(new DateTime(2014, 5, 7, 12, 52, 20),
                        new DateTime(2007, 10, 17, 9, 23, 13))),
                "et");
        Assert.IsNotNull(identifyMethodResult);
        var imageToMapMethodResult = await imageryLayer.ImageToMap(new ImageToMapParameters(true,
                    295.2803,
                new Polygon([new MapPath([new MapPoint([489.6700,
                            143.8382,
                            77.5462,
                            160.5711]),
                        new MapPoint([680.8205,
                            422.9849,
                            220.3352]),
                        new MapPoint([460.5052,
                            86.5704,
                            172.5091])])],
                    new SpatialReference(9,
                            "id",
                            "blanditiis",
                            "eaque"),
                    new Point(99.6898,
                            80.4765,
                            128.9645,
                            -2.4910,
                            632.4321,
                        new SpatialReference(1,
                                "et",
                                "magnam",
                                "nemo"),
                            true,
                            true,
                            207.9287),
                        true,
                        true,
                        true),
                new SpatialReference(7,
                        "enim",
                        "porro",
                        "magni"),
                    3),
                "ut");
        Assert.IsNotNull(imageToMapMethodResult);
        var imageToMapMultirayMethodResult = await imageryLayer.ImageToMapMultiray(new ImageToMapMultirayParameters([new Extent(-123.8770,
                        20.7462,
                        21.8548,
                        -7.3710,
                        59.9053,
                        994.2465,
                        102.9988,
                        903.1540,
                    new SpatialReference(4,
                            "assumenda",
                            "dignissimos",
                            "atque"),
                        true,
                        true)],
                new SpatialReference(5,
                        "nemo",
                        "doloremque",
                        "quis"),
                    [2,
                        4,
                        7,
                        5]),
                "et");
        Assert.IsNotNull(imageToMapMultirayMethodResult);
        var mapToImageMethodResult = await imageryLayer.MapToImage(new MapToImageParameters(new Point(41.3064,
                        -20.8221,
                        -73.3973,
                        -12.3087,
                        435.9720,
                    new SpatialReference(1,
                            "molestias",
                            "in",
                            "quo"),
                        true,
                        true,
                        885.3035),
                    1,
                    true),
                "error");
        Assert.IsNotNull(mapToImageMethodResult);
        var measureAreaAndPerimeterMethodResult = await imageryLayer.MeasureAreaAndPerimeter(new ImageAreaParameters(new MosaicRule(true,
                    new RasterFunction("exercitationem",
                            "avatar",
                        OutputPixelType.F64,
                            "in",
                            "category"),
                        [1,
                            6,
                            9],
                    Method.None,
                    [new DimensionalDefinition("group",
                            true,
                            "category"),
                    new DimensionalDefinition("createdAt",
                            true,
                            "comment"),
                    new DimensionalDefinition("id",
                            true,
                            "name"),
                    new DimensionalDefinition("avatar",
                            true,
                            "email")],
                        [2,
                            1,
                            6,
                            9],
                    Operation.Min,
                        "aliquid",
                        "quae",
                    new Point(138.3284,
                            -59.6767,
                            0.8148,
                            -20.7483,
                            454.2411,
                        new SpatialReference(9,
                                "quis",
                                "ex",
                                "deleniti"),
                            true,
                            true,
                            547.5774),
                        "PostalCode = 'M5V 1J9'"),
                new PixelSize(-144.4908,
                        -32.6878,
                    new PixelSizeSpatialReference(4,
                            417.3316)),
                ImageAreaUnit.SquareUsFeet,
                new Polyline([new MapPath([new MapPoint([774.2758,
                            263.8111]),
                        new MapPoint([267.5806,
                            431.9159]),
                        new MapPoint([833.3397,
                            303.5412,
                            734.1183]),
                        new MapPoint([889.4945,
                            216.5648,
                            537.5554,
                            839.1863])]),
                        new MapPath([new MapPoint([279.9534,
                                657.0423,
                                734.4512]),
                            new MapPoint([800.8364,
                                872.0858,
                                691.3989,
                                169.2703])]),
                        new MapPath([new MapPoint([154.3847,
                                924.1088]),
                            new MapPoint([266.5863,
                                687.5647,
                                949.8332])])],
                    new SpatialReference(6,
                            "magni",
                            "libero",
                            "labore"),
                        true,
                        true),
                    true,
                LengthUnit.Centimeters),
                "deserunt");
        Assert.IsNotNull(measureAreaAndPerimeterMethodResult);
        var measureAreaFromImageMethodResult = await imageryLayer.MeasureAreaFromImage(new MeasureFromImageParameters(new Polygon([new MapPath([new MapPoint([900.4659,
                            828.1899,
                            444.4990]),
                        new MapPoint([817.8103,
                            510.9063,
                            692.9881,
                            654.1600])]),
                        new MapPath([new MapPoint([425.6894,
                                186.0062,
                                106.9748,
                                935.5278]),
                            new MapPoint([605.8842,
                                674.4404]),
                            new MapPoint([713.8949,
                                917.9636,
                                499.4094,
                                185.3822]),
                            new MapPoint([872.2747,
                                140.9421,
                                850.4782,
                                492.8246])])],
                    new SpatialReference(5,
                            "natus",
                            "reiciendis",
                            "ut"),
                    new Point(145.1693,
                            17.2754,
                            -94.3058,
                            79.0567,
                            706.1688,
                        new SpatialReference(6,
                                "rerum",
                                "voluptas",
                                "est"),
                            true,
                            true,
                            935.2931),
                        true,
                        true,
                        true),
                    7),
                "doloremque");
        Assert.IsNotNull(measureAreaFromImageMethodResult);
        var measureDistanceAndAngleMethodResult = await imageryLayer.MeasureDistanceAndAngle(new ImageDistanceParameters(new MosaicRule(true,
                    new RasterFunction("qui",
                            "token",
                        OutputPixelType.S32,
                            "non",
                            "category"),
                        [8,
                            7,
                            4],
                    Method.Northwest,
                    [new DimensionalDefinition("status",
                            true,
                            "createdAt"),
                    new DimensionalDefinition("phone",
                            true,
                            "category")],
                        [7,
                            6,
                            7,
                            3],
                    Operation.Min,
                        "magni",
                        "porro",
                    new Point(24.7675,
                            -84.5067,
                            -115.3948,
                            40.6336,
                            248.0817,
                        new SpatialReference(3,
                                "fugiat",
                                "accusantium",
                                "ipsa"),
                            true,
                            true,
                            369.4630),
                        "Name = 'John Doe'"),
                new PixelSize(112.8167,
                        14.3560,
                    new PixelSizeSpatialReference(1,
                            284.9019)),
                AngularUnit.Radians,
                new Point(67.5831,
                        -1.1379,
                        4.9403,
                        -6.6737,
                        548.0890,
                    new SpatialReference(7,
                            "accusantium",
                            "delectus",
                            "molestiae"),
                        true,
                        true,
                        124.1840),
                    true,
                LengthUnit.Millimeters,
                new Point(29.7896,
                        -24.1754,
                        -134.1046,
                        69.9850,
                        756.1237,
                    new SpatialReference(1,
                            "eos",
                            "pariatur",
                            "eum"),
                        true,
                        true,
                        154.7751)),
                "veritatis");
        Assert.IsNotNull(measureDistanceAndAngleMethodResult);
        var measureHeightMethodResult = await imageryLayer.MeasureHeight(new ImageHeightParameters(new MosaicRule(true,
                    new RasterFunction("accusamus",
                            "name",
                        OutputPixelType.S16,
                            "molestiae",
                            "email"),
                        [2,
                            1],
                    Method.LockRaster,
                    [new DimensionalDefinition("email",
                            true,
                            "token")],
                        [9,
                            7],
                    Operation.First,
                        "quisquam",
                        "voluptas",
                    new Point(-142.6900,
                            -31.6588,
                            -119.6426,
                            -27.0198,
                            545.7245,
                        new SpatialReference(9,
                                "quod",
                                "perspiciatis",
                                "dolor"),
                            true,
                            true,
                            322.6737),
                        "City = 'Toronto'"),
                new PixelSize(20.6857,
                        -45.2971,
                    new PixelSizeSpatialReference(1,
                            384.5395)),
                new Point(168.8764,
                        -18.1308,
                        119.3223,
                        85.8182,
                        601.3550,
                    new SpatialReference(7,
                            "voluptate",
                            "minima",
                            "vel"),
                        true,
                        true,
                        427.6648),
                LengthUnit.Inches,
                OperationType.BaseAndTop,
                new Point(112.1316,
                        60.2941,
                        -48.6697,
                        52.8795,
                        635.4789,
                    new SpatialReference(4,
                            "quia",
                            "et",
                            "voluptas"),
                        true,
                        true,
                        955.5066)),
                "nulla");
        Assert.IsNotNull(measureHeightMethodResult);
        var measureLengthFromImageMethodResult = await imageryLayer.MeasureLengthFromImage(new MeasureFromImageParameters(new Polyline([new MapPath([new MapPoint([519.5106,
                            777.0934,
                            200.2598,
                            642.9054]),
                        new MapPoint([944.1777,
                            408.7568]),
                        new MapPoint([974.0804,
                            784.6214,
                            806.9235,
                            918.9094])])],
                    new SpatialReference(4,
                            "iste",
                            "excepturi",
                            "nobis"),
                        true,
                        true),
                    7),
                "qui");
        Assert.IsNotNull(measureLengthFromImageMethodResult);
        var measurePointOrCentroidMethodResult = await imageryLayer.MeasurePointOrCentroid(new ImagePointParameters(new MosaicRule(true,
                    new RasterFunction("nisi",
                            "avatar",
                        OutputPixelType.U16,
                            "iusto",
                            "avatar"),
                        [6,
                            6,
                            9,
                            3],
                    Method.None,
                    [new DimensionalDefinition("group",
                            true,
                            "avatar"),
                    new DimensionalDefinition("status",
                            true,
                            "name")],
                        [1,
                            6,
                            6,
                            6],
                    Operation.Last,
                        "inventore",
                        "sunt",
                    new Point(-50.1670,
                            -22.3214,
                            -108.8713,
                            -72.3193,
                            971.2452,
                        new SpatialReference(3,
                                "deleniti",
                                "laudantium",
                                "in"),
                            true,
                            true,
                            227.6906),
                        "Street = '123 Main St.'"),
                new PixelSize(-160.9393,
                        -75.8218,
                    new PixelSizeSpatialReference(9,
                            901.7567)),
                new Extent(-119.1410,
                        64.1789,
                        -21.1400,
                        20.1196,
                        282.5684,
                        692.4402,
                        446.8845,
                        976.7910,
                    new SpatialReference(2,
                            "commodi",
                            "eos",
                            "est"),
                        true,
                        true),
                    true),
                "fugit");
        Assert.IsNotNull(measurePointOrCentroidMethodResult);
        var queryBoundaryMethodResult = await imageryLayer.QueryBoundary(new ImageBoundaryParameters(new SpatialReference(9,
                        "ea",
                        "voluptate",
                        "et")),
                "est");
        Assert.IsNotNull(queryBoundaryMethodResult);
        var queryGPSInfoMethodResult = await imageryLayer.QueryGPSInfo(new ImageGPSInfoParameters(new Extent(124.8426,
                        46.4572,
                        -89.1631,
                        -33.3321,
                        170.0793,
                        962.0524,
                        214.3771,
                        882.4822,
                    new SpatialReference(4,
                            "assumenda",
                            "sed",
                            "unde"),
                        true,
                        true),
                    [6,
                        9],
                SpatialRelationship.IndexIntersects,
                new TimeExtent(new DateTime(2021, 4, 12, 13, 53, 47),
                        new DateTime(2011, 9, 5, 14, 10, 52)),
                    "PostalCode = 'M5V 1J9'"),
                "eaque");
        Assert.IsNotNull(queryGPSInfoMethodResult);
        var queryObjectIdsMethodResult = await imageryLayer.QueryObjectIds(new Query([4,
                    6,
                    4],
                    true,
                    13.8889,
                    945.4053,
                    "4.5.2.2",
                new Extent(74.2513,
                        26.2348,
                        -29.9544,
                        31.1773,
                        898.5418,
                        454.1192,
                        854.4786,
                        556.4673,
                    new SpatialReference(9,
                            "ducimus",
                            "est",
                            "est"),
                        true,
                        true),
                    3,
                    ["magnam",
                        "nulla",
                        "et"],
                    "est",
                    new DateTime(2016, 11, 12, 0, 49, 25),
                    956.7251,
                    7,
                    "id",
                    4),
                "et");
        Assert.IsNotNull(queryObjectIdsMethodResult);
        var queryRasterCountMethodResult = await imageryLayer.QueryRasterCount(new Query([9,
                    9],
                    true,
                    283.7702,
                    118.3913,
                    "2.2.9.1",
                new Polygon([new MapPath([new MapPoint([627.1782,
                            949.9215]),
                        new MapPoint([840.3748,
                            568.0702,
                            209.9969,
                            724.1501])]),
                        new MapPath([new MapPoint([938.3598,
                                984.0396,
                                355.7632]),
                            new MapPoint([850.3870,
                                882.3495,
                                658.6372,
                                237.8722]),
                            new MapPoint([577.0408,
                                18.9206,
                                153.5399,
                                387.6124]),
                            new MapPoint([233.5200,
                                234.2996,
                                361.1922])]),
                        new MapPath([new MapPoint([411.0502,
                                505.9172,
                                297.6561,
                                117.6800]),
                            new MapPoint([203.8799,
                                140.7949,
                                693.3739]),
                            new MapPoint([312.3435,
                                715.0694,
                                92.6751])]),
                        new MapPath([new MapPoint([710.2844,
                                704.6728,
                                371.4247,
                                981.3861]),
                            new MapPoint([257.2758,
                                306.6784,
                                388.5005])])],
                    new SpatialReference(2,
                            "voluptatem",
                            "suscipit",
                            "voluptas"),
                    new Point(-106.8156,
                            4.4668,
                            31.1626,
                            71.6594,
                            59.3643,
                        new SpatialReference(8,
                                "voluptas",
                                "voluptatum",
                                "quo"),
                            true,
                            true,
                            371.8091),
                        true,
                        true,
                        true),
                    4,
                    ["et",
                        "est",
                        "assumenda"],
                    "excepturi",
                    new DateTime(2009, 10, 1, 21, 9, 20),
                    181.5400,
                    1,
                    "a",
                    3),
                "magni");
        Assert.IsNotNull(queryRasterCountMethodResult);
        var queryRastersMethodResult = await imageryLayer.QueryRasters(new Query([5,
                    2],
                    true,
                    216.5149,
                    215.3435,
                    "8.7.7.8",
                new Polygon([new MapPath([new MapPoint([544.0580,
                            900.1662,
                            632.2642,
                            293.3399]),
                        new MapPoint([711.6833,
                            179.2617,
                            449.4772])]),
                        new MapPath([new MapPoint([294.5074,
                                578.7241,
                                343.0287]),
                            new MapPoint([943.6453,
                                585.8287]),
                            new MapPoint([268.4542,
                                584.0015,
                                328.0203])])],
                    new SpatialReference(6,
                            "recusandae",
                            "aut",
                            "facere"),
                    new Point(68.2798,
                            -3.0327,
                            -121.1712,
                            9.1056,
                            218.1457,
                        new SpatialReference(1,
                                "aut",
                                "aut",
                                "odio"),
                            true,
                            true,
                            397.6413),
                        true,
                        true,
                        true),
                    5,
                    ["delectus",
                        "quaerat",
                        "doloribus",
                        "doloremque"],
                    "aut",
                    new DateTime(2007, 7, 9, 12, 37, 8),
                    324.2591,
                    2,
                    "est",
                    2),
                "expedita");
        Assert.IsNotNull(queryRastersMethodResult);
        await imageryLayer.Redraw();
        var saveMethodResult = await imageryLayer.Save(new ImageryLayerSaveOptions(new ImageryLayerSaveOptionsValidationOptions(true)));
        Assert.IsNotNull(saveMethodResult);
        var saveAsMethodResult = await imageryLayer.SaveAs(new PortalItem(PortalItemAccess.Public,
                    "vitae",
                    "molestiae",
                    83.5645,
                    ["laborum",
                        "in",
                        "perspiciatis"],
                    new DateTime(2018, 1, 24, 4, 38, 49),
                    "rerum",
                    "rerum repellendus quas nulla molestias",
                new Extent(35.2123,
                        46.2443,
                        31.5604,
                        -88.7706,
                        292.0293,
                        411.4148,
                        635.5233,
                        432.3770,
                    new SpatialReference(5,
                            "dolor",
                            "maiores",
                            "corporis"),
                        true,
                        true),
                    ["velit",
                        "qui"],
                    "qui",
                    new DateTime(2018, 7, 20, 14, 44, 22),
                    "category",
                    236.6634),
            new ImageryLayerSaveAsOptions(new PortalFolder(new DateTime(2013, 5, 12, 6, 2, 8),
                        "natus",
                        "aut qui est"),
                new ImageryLayerSaveAsOptionsValidationOptions(true)));
        Assert.IsNotNull(saveAsMethodResult);
        PortalItem testPortalItem = new PortalItem(PortalItemAccess.Public,
                    "fuga",
                    "ab",
                    751.2572,
                    ["mollitia",
                        "sequi",
                        "modi"],
                    new DateTime(2022, 2, 8, 19, 20, 11),
                    "dolor",
                    "aut omnis veniam nam voluptatem ea libero",
                new Extent(83.5960,
                        -70.6669,
                        -39.1063,
                        -50.8255,
                        632.8724,
                        849.1481,
                        785.0303,
                        447.2610,
                    new SpatialReference(5,
                            "veritatis",
                            "expedita",
                            "in"),
                        true,
                        true),
                    ["vel",
                        "quidem"],
                    "quas",
                    new DateTime(2005, 11, 23, 7, 45, 38),
                    "updatedAt",
                    13.6542);
        await imageryLayer.SetPortalItem(testPortalItem);
        var portalItem = await imageryLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Plus;
        await imageryLayer.SetBlendMode(testBlendMode);
        var blendMode = await imageryLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        ImageFormat testFormat = ImageFormat.Png32;
        await imageryLayer.SetFormat(testFormat);
        var format = await imageryLayer.GetFormat();
        Assert.AreEqual(testFormat, format);
        Interpolation testInterpolation = Interpolation.Bilinear;
        await imageryLayer.SetInterpolation(testInterpolation);
        var interpolation = await imageryLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        NoDataInterpretation testNoDataInterpretation = NoDataInterpretation.MatchAny;
        await imageryLayer.SetNoDataInterpretation(testNoDataInterpretation);
        var noDataInterpretation = await imageryLayer.GetNoDataInterpretation();
        Assert.AreEqual(testNoDataInterpretation, noDataInterpretation);
        PixelType testPixelType = PixelType.U1;
        await imageryLayer.SetPixelType(testPixelType);
        var pixelType = await imageryLayer.GetPixelType();
        Assert.AreEqual(testPixelType, pixelType);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2021, 2, 21, 17, 9, 3),
                    new DateTime(2021, 2, 18, 20, 43, 24));
        await imageryLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await imageryLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("accusamus",
                    "a",
                new TimeExtent(new DateTime(2013, 11, 20, 6, 7, 30),
                        new DateTime(2010, 3, 14, 17, 28, 16)),
                new TimeInterval(TemporalTime.Months,
                        560.8153),
                    [new DateTime(2007, 11, 14, 7, 8, 12),
                        new DateTime(2023, 8, 5, 4, 8, 8)],
                    "Asia/Jerusalem",
                    "autem");
        await imageryLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await imageryLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    173.7162);
        await imageryLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await imageryLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        ListMode testListMode = ListMode.Hide;
        await imageryLayer.SetListMode(testListMode);
        var listMode = await imageryLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        Extent testFullExtent = new Extent(165.6886,
                    88.0690,
                    -71.4705,
                    -81.6369,
                    14.4146,
                    392.9070,
                    864.5182,
                    421.4873,
                new SpatialReference(2,
                        "dolores",
                        "magnam",
                        "natus"),
                    true,
                    true);
        await imageryLayer.SetFullExtent(testFullExtent);
        var fullExtent = await imageryLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ArcGISImageServiceCapabilities testCapabilities = new ArcGISImageServiceCapabilities(new ArcGISImageServiceCapabilitiesMensuration(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesOperations(true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true),
                new ArcGISImageServiceCapabilitiesQuery(1,
                        true,
                        true,
                        true,
                        true,
                        true));
        await imageryLayer.SetCapabilities(testCapabilities);
        var capabilities = await imageryLayer.GetCapabilities();
        Assert.AreEqual(testCapabilities, capabilities);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "category",
                    "omnis",
                    "alias distinctio perferendis vitae",
                    4,
                    true,
                    true,
                    new { Value = "sunt" },
                FieldValueType.Measurement,
                new InheritedDomain("createdAt")),
            new Field(default,
                    "name",
                    "id",
                    "doloremque labore veritatis impedit",
                    4,
                    true,
                    true,
                    new { Value = "rerum" },
                FieldValueType.NameOrTitle,
                new InheritedDomain("createdAt")),
            new Field(default,
                    "name",
                    "et",
                    "unde ut iure culpa",
                    3,
                    true,
                    true,
                    new { Value = "autem" },
                FieldValueType.Description,
                new InheritedDomain("email")),
            new Field(default,
                    "createdAt",
                    "eius",
                    "vel et quod porro",
                    7,
                    true,
                    true,
                    new { Value = "qui" },
                FieldValueType.Description,
                new RangeDomain("eaque",
                        "sed",
                        "comment"))];
        await imageryLayer.SetFields(testFields);
        var fields = await imageryLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        MosaicRule testMosaicRule = new MosaicRule(true,
                new RasterFunction("et",
                        "group",
                    OutputPixelType.U2,
                        "quia",
                        "createdAt"),
                    [9,
                        4,
                        8],
                Method.Northwest,
                [new DimensionalDefinition("comment",
                        true,
                        "id"),
                new DimensionalDefinition("group",
                        true,
                        "updatedAt")],
                    [4,
                        9,
                        7,
                        1],
                Operation.Sum,
                    "molestiae",
                    "consequuntur",
                new Point(-74.3014,
                        -24.6254,
                        52.2280,
                        -74.5311,
                        690.7831,
                    new SpatialReference(3,
                            "cupiditate",
                            "nostrum",
                            "cum"),
                        true,
                        true,
                        155.3437),
                    "ObjectID = 1");
        await imageryLayer.SetMosaicRule(testMosaicRule);
        var mosaicRule = await imageryLayer.GetMosaicRule();
        Assert.AreEqual(testMosaicRule, mosaicRule);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Point(-5.7120,
                        12.5680,
                        96.1221,
                        -82.8875,
                        842.4262,
                    new SpatialReference(6,
                            "autem",
                            "repellat",
                            "cum"),
                        true,
                        true,
                        244.9825),
                [new DimensionalDefinition("createdAt",
                        true,
                        "category")]);
        await imageryLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await imageryLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PixelFilterFunction testPixelFilter = _ => Task.CompletedTask;
        await imageryLayer.SetPixelFilter(testPixelFilter);
        var pixelFilter = await imageryLayer.GetPixelFilter();
        Assert.AreEqual(testPixelFilter, pixelFilter);
        PopupTemplate testPopupTemplate = new PopupTemplate("quibusdam labore sed",
                    "magni",
                    ["rerum",
                        "non"],
                [new FieldInfo("category",
                        "odit",
                        "porro",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.ShortDateShortTime24),
                        true,
                        true,
                    StatisticType.Sum)],
                [new RelationshipPopupContent("quia voluptatem aut",
                        "tenetur veniam aut illo sit provident natus",
                        5,
                        "esse",
                    [new RelatedRecordsInfoFieldOrder("non",
                        OrderBy.Desc)],
                        6),
                new MediaPopupContent("placeat exercitationem excepturi",
                        "minima qui provident tempora",
                    [new ColumnChartMediaInfo("aspernatur ex reiciendis",
                            "nihil",
                            "qui qui voluptatem",
                        new ChartMediaInfoValue(["eius",
                                "sit",
                                "delectus",
                                "laudantium"],
                                "quia",
                                "pariatur",
                            [new ChartMediaInfoValueSeries("password",
                                    "ea",
                                    982.7842)],
                            [new MapColor(134, 247, 73),
                            new MapColor(71, 20, 70)])),
                    new BarChartMediaInfo("praesentium error quia",
                            "asperiores",
                            "omnis reiciendis corrupti",
                        new ChartMediaInfoValue(["architecto",
                                "sit",
                                "ullam",
                                "non"],
                                "provident",
                                "quisquam",
                            [new ChartMediaInfoValueSeries("status",
                                    "amet",
                                    363.2637),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "qui",
                                    650.1794),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "similique",
                                    285.6562),
                            new ChartMediaInfoValueSeries("avatar",
                                    "tenetur",
                                    604.8559)],
                            [new MapColor(222, 190, 238),
                            new MapColor(86, 197, 23)])),
                    new ImageMediaInfo("qui quidem earum",
                            "voluptatem",
                            "qui minima id",
                        new ImageMediaInfoValue("https://anissa.com",
                                "https://maybelle.net"),
                            590.6620),
                    new PieChartMediaInfo("dolor sunt aperiam",
                            "quasi",
                            "dolor nihil animi",
                        new ChartMediaInfoValue(["quidem",
                                "enim",
                                "dolor",
                                "illo"],
                                "nisi",
                                "facere",
                            [new ChartMediaInfoValueSeries("title",
                                    "et",
                                    536.1785),
                            new ChartMediaInfoValueSeries("password",
                                    "consequatur",
                                    136.2987),
                            new ChartMediaInfoValueSeries("updatedAt",
                                    "minus",
                                    592.6115)],
                            [new MapColor(58, 241, 40),
                            new MapColor(224, 247, 112),
                            new MapColor(53, 242, 219),
                            new MapColor(57, 179, 42)]))],
                        4),
                new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                            "exercitationem",
                            "aut et quia")),
                new TextPopupContent("ipsum ducimus ipsam")],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "name",
                        "sunt commodi qui",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                        "token",
                        "temporibus dolorem eius",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "updatedAt",
                        "ducimus eum ipsum",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "comment",
                        "consequatur et expedita",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                [new ActionButton("quasi aut quaerat",
                        "https://picsum.photos/640/480/?image=440",
                        "dc12a8c6-0e90-d804-7652-6bbd77cdee93",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "aperiam"),
                new ActionButton("minus soluta reiciendis",
                        "https://picsum.photos/640/480/?image=662",
                        "42f59436-d7d0-3a85-13f1-82e8b6382a9b",
                        () => { Console.WriteLine("facilis"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "cumque"),
                new ActionButton("exercitationem amet corrupti",
                        "https://picsum.photos/640/480/?image=235",
                        "c94eb57c-30b8-678f-8d33-b59482fbdb3c",
                        () => { Console.WriteLine("veritatis"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "nihil"),
                new ActionToggle("praesentium est quo",
                        "58b0d7ad-448e-4014-a28f-357af8a5541a",
                        () => { Console.WriteLine("nulla"); return Task.CompletedTask; },
                        true,
                        true,
                        true,
                        true,
                        "updatedAt",
                        "vero")]);
        await imageryLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await imageryLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        RasterFunction testRasterFunction = new RasterFunction("voluptatum",
                    "comment",
                OutputPixelType.U8,
                    "aut",
                    "title");
        await imageryLayer.SetRasterFunction(testRasterFunction);
        var rasterFunction = await imageryLayer.GetRasterFunction();
        Assert.AreEqual(testRasterFunction, rasterFunction);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 9, 24, 14, 32, 34),
                    new DateTime(2023, 4, 12, 19, 3, 38));
        await imageryLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await imageryLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
