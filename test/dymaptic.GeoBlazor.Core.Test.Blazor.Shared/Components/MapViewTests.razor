@using dymaptic.GeoBlazor.Core.Results
@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanSetCenter(Action renderHandler)
    {
        MapView? view = null;
        AddMapRenderFragment(
        @<MapView @ref="view" class="map-view" OnViewRendered="renderHandler">
            <Map>
                <Basemap>
                    <BasemapStyle Name="BasemapStyleName.ArcgisImagery" />
                </Basemap>
            </Map>
        </MapView>);
        await WaitForMapToRender();

        Point center = (await view!.GetCenter())!;
        Extent extent = (await view!.GetExtent())!;
        Point newCenter = new Point(center.X + 10, center.Y + 10);
        await view!.SetCenter(newCenter);
        Extent newExtent = (await view.GetExtent())!;
        Assert.AreNotEqual(extent, newExtent);
    }

    [TestMethod]
    public async Task TestCanHitViewReturnCountryPolygon(Action renderHandler)
    {
        MapView? view = null;
        FeatureLayer? countriesLayer = null;
        AddMapRenderFragment(
            @<MapView @ref="view" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <FeatureLayer @ref="countriesLayer" Title="Countries">
                        <PortalItem PortalItemId="ac80670eb213440ea5899bbf92a04998"/>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        
        Point mapPoint = new Point(-74.0059, 40.7127);
        await view!.AddGraphic(new Graphic(mapPoint, new SimpleMarkerSymbol(color: new MapColor("green"))));
        ScreenPoint screenPoint = await view!.ToScreen(mapPoint);
        HitTestResult result = await view!.HitTest(screenPoint);
        Assert.IsNotNull(result);
    }

    [TestMethod]
    public async Task TestCanTakeScreenshot(Action renderHandler)
    {
        MapView? view = null;

        AddMapRenderFragment(@<MapView @ref="view" class="map-view" OnViewRendered="renderHandler">
                                 <Map>
                                     <Basemap>
                                         <BasemapStyle Name="BasemapStyleName.ArcgisNavigation" />
                                     </Basemap>
                                 </Map>
                             </MapView>);
        await WaitForMapToRender();

        Screenshot screenshot = await view!.TakeScreenshot();
        Assert.IsNotNull(screenshot);
        Assert.IsNotNull(screenshot.DataUrl);
        Assert.IsTrue(screenshot.DataUrl.StartsWith("data:image/png;base64,"));

        AddMapRenderFragment(@<img id="screenshot1" src="@screenshot.DataUrl" alt="screenshot" />);
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        await AssertJavaScript("assertImageExists", args: ["screenshot1"]);
    }

    [TestMethod]
    public async Task TestCanTakeScreenshotWithOptions(Action renderHandler)
    {
        MapView? view = null;
        FeatureLayer? layer = null;
        AddMapRenderFragment(
            @<MapView @ref="view" class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisNavigation" />
                    </Basemap>
                    <FeatureLayer @ref="layer" Title="Countries">
                        <PortalItem PortalItemId="ac80670eb213440ea5899bbf92a04998"/>
                    </FeatureLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        
        ScreenshotOptions options = new()
        {
            Width = 80,
            Height = 80,
            Format = ScreenshotFormat.Jpg,
            LayerIds = [layer!.Id],
            Quality = 50,
            IgnoreBackground = true
        };
        Screenshot screenshot = await view!.TakeScreenshot(options);
        Assert.IsNotNull(screenshot);
        Assert.IsNotNull(screenshot.DataUrl);
        Assert.IsTrue(screenshot.DataUrl.StartsWith("data:image/jpg;base64,"));
        
        AddMapRenderFragment(@<img id="screenshot2" src="@screenshot.DataUrl" alt="screenshot" />);
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        await AssertJavaScript("assertImageExists", args: ["screenshot2"]);
    }
}