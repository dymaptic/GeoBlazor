@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedElevationLayer(Action renderHandler)
    {
        ElevationLayer? elevationLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <ElevationLayer 
                        Copyright="@("saepe")"
                        ListMode="@(ListMode.Show)"
                        Opacity="@(0.2830)"
                        PersistenceEnabled="@(true)"
                        Title="@("dolorem amet harum")"
                        Url="@("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1")">
                        <TimeExtent 
                            Start="@(new DateTime(2003, 3, 23, 4, 15, 22))"
                            End="@(new DateTime(2000, 3, 2, 12, 25, 11))">
                        </TimeExtent>
                        <TileInfo 
                            Dpi="@(932.4889)"
                            Format="@(TileInfoFormat.Svg)"
                            IsWrappable="@(true)"
                            Lods="@([new LOD(6,
                                    "odit",
                                    22.5924,
                                    39391475.8603)])"
                            Origin="@(new Point(42.9952,
                                    -1.0781,
                                    -124.0364,
                                    -72.6660,
                                    913.6993,
                                new SpatialReference(4,
                                        "quam",
                                        "error",
                                        "amet"),
                                    true,
                                    true,
                                    578.7141))"
                            Size="@([3,
                                2])">
                            <SpatialReference 
                                Wkid="@(4)"
                                ImageCoordinateSystem="@("quos")"
                                Wkt="@("sint")"
                                Wkt2="@("et")">
                            </SpatialReference>
                        </TileInfo>
                        <PortalItem />
                        <Extent 
                            Xmax="@(72.1278)"
                            Xmin="@(-73.5325)"
                            Ymax="@(-65.6253)"
                            Ymin="@(65.4873)"
                            Zmax="@(284.8070)"
                            Zmin="@(301.0184)"
                            Mmax="@(134.8706)"
                            Mmin="@(382.7031)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("deserunt")"
                                Wkt="@("facere")"
                                Wkt2="@("sapiente")">
                            </SpatialReference>
                        </Extent>
                    </ElevationLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(elevationLayer!);
        await AssertJavaScript("assertLayerExists", args: "elevation");
        var createElevationSamplerMethodResult = await elevationLayer.CreateElevationSampler(new Extent(-174.8029,
                    30.4326,
                    -54.2981,
                    87.6519,
                    532.2339,
                    566.5916,
                    311.1915,
                    451.8761,
                new SpatialReference(9,
                        "optio",
                        "laborum",
                        "vitae"),
                    true,
                    true),
            new ElevationLayerCreateElevationSamplerOptions("laudantium",
                    378.0566));
        Assert.IsNotNull(createElevationSamplerMethodResult);
        var fetchTileMethodResult = await elevationLayer.FetchTile(792.1890,
                768.1757,
                997.8043,
            new ElevationLayerFetchTileOptions(561.1354));
        Assert.IsNotNull(fetchTileMethodResult);
        var getTileUrlMethodResult = await elevationLayer.GetTileUrl(791.2461,
                526.6229,
                804.5550);
        Assert.IsNotNull(getTileUrlMethodResult);
        var queryElevationMethodResult = await elevationLayer.QueryElevation(new Point(-9.9301,
                    -6.1485,
                    -92.1897,
                    29.1103,
                    527.3617,
                new SpatialReference(6,
                        "sit",
                        "quasi",
                        "quia"),
                    true,
                    true,
                    456.6293),
            new ElevationLayerQueryElevationOptions("est",
                    825.0557,
                    true));
        Assert.IsNotNull(queryElevationMethodResult);
        Extent testFullExtent = new Extent(62.0286,
                    116.5303,
                    41.7205,
                    -83.9212,
                    173.6490,
                    665.8195,
                    249.5839,
                    868.7944,
                new SpatialReference(2,
                        "distinctio",
                        "occaecati",
                        "recusandae"),
                    true,
                    true);
        await elevationLayer.SetFullExtent(testFullExtent);
        var fullExtent = await elevationLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        ListMode testListMode = ListMode.Hide;
        await elevationLayer.SetListMode(testListMode);
        var listMode = await elevationLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        PortalItem testPortalItem = new PortalItem();
        await elevationLayer.SetPortalItem(testPortalItem);
        var portalItem = await elevationLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        TileInfo testTileInfo = new TileInfo(816.7856,
                    TileInfoFormat.Svgz,
                    true,
                [new LOD(9,
                        "soluta",
                        25.0865,
                        28178277.5493),
                new LOD(4,
                        "nulla",
                        26.0764,
                        34520125.1453)],
                new Point(59.3286,
                        80.5044,
                        80.5841,
                        -11.7585,
                        362.0114,
                    new SpatialReference(4,
                            "nisi",
                            "consequatur",
                            "nihil"),
                        true,
                        true,
                        254.5783),
                    [4,
                        4],
                new SpatialReference(3,
                        "aut",
                        "facere",
                        "est"));
        await elevationLayer.SetTileInfo(testTileInfo);
        var tileInfo = await elevationLayer.GetTileInfo();
        Assert.AreEqual(testTileInfo, tileInfo);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 5, 13, 22, 0, 46),
                    new DateTime(2008, 9, 24, 17, 43, 28));
        await elevationLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await elevationLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
