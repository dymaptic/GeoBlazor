@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedLocateWidget(Action renderHandler)
    {
        LocateWidget? locateWidget = null;

        LocateEvent? locateResult = null;
        void OnLocate(LocateEvent result)
        {
            locateResult = result;
        }
        LocateErrorEvent? locateErrorResult = null;
        void OnLocateError(LocateErrorEvent result)
        {
            locateErrorResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <LocateWidget 
                    GeolocationOptions="@("voluptas")"
                    GoToLocationEnabled="@(true)"
                    GoToOverride="@(new GoToOverride())"
                    Icon="@("laboriosam")"
                    Label="@("vel")"
                    PopupEnabled="@(true)"
                    Scale="@(4)"
                    ViewModel="@(new LocateViewModel(new Error("title",
                            "consectetur quas eos commodi",
                            new { Value = "blanditiis" }),
                            "voluptates",
                            true,
                        new GoToOverride(),
                        new Graphic(new Polyline([new MapPath([new MapPoint([582.2764,
                                        74.5732]),
                                    new MapPoint([124.0520])]),
                                    new MapPath([new MapPoint([120.6558,
                                            310.3362])])],
                                new SpatialReference(2,
                                        "cupiditate",
                                        "vel",
                                        "iusto"),
                                    true,
                                    true),
                            new TextSymbol("non labore eius",
                                new MapColor(175, 65, 204),
                                new MapColor(95, 203, 104),
                                    new Dimension(956.2438),
                                new MapFont(new Dimension(988.3204),
                                        "Georgia",
                                    MapFontStyle.Normal,
                                    FontWeight.Bolder,
                                    TextDecoration.None),
                                    361.6859,
                                new MapColor(47, 134, 195),
                                new MapColor(226, 42, 246),
                                    48.5495,
                                HorizontalAlignment.Right,
                                    true,
                                    91.7174,
                                    new Dimension(978.6588),
                                    true),
                            new PopupTemplate("doloribus voluptate iste",
                                    "reprehenderit",
                                    ["nulla"],
                                [new FieldInfo("createdAt",
                                        "cumque",
                                        "maxime",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.ShortDateLeShortTime24),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                [new FieldsPopupContent([new FieldInfo("password",
                                            "ex",
                                            "magnam",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(5,
                                                true,
                                            DateFormat.LongMonthDayYearLongTime24),
                                            true,
                                            true,
                                        StatisticType.Count),
                                    new FieldInfo("id",
                                            "voluptas",
                                            "eum",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(3,
                                                true,
                                            DateFormat.ShortMonthYear),
                                            true,
                                            true,
                                        StatisticType.Var)],
                                        "delectus modi",
                                        "reiciendis qui eos"),
                                new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                            "sunt",
                                            "dolorem aut nihil"))],
                                [new ExpressionInfo("return $feature['FieldName'];",
                                        "name",
                                        "exercitationem nobis debitis",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                        "createdAt",
                                        "minima quasi animi",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("sed quis tempore",
                                        "https://picsum.photos/640/480/?image=1078",
                                        "45a86e59-8eee-2132-084e-ec903c50208f",
                                        () => { Console.WriteLine("vel"); return Task.CompletedTask; },
                                        "title",
                                        true,
                                        true,
                                        true,
                                        "ut")]),
                                new AttributesDictionary(),
                                true,
                                "vero",
                                "quisquam",
                                new GraphicOrigin(Guid.NewGuid(),
                                    "placeat",
                                    6)),
                            true,
                            18301281.5458))"
                    WidgetId="@("aut")"
                    OnLocate="OnLocate"
                    OnLocateError="OnLocateError">
                    <Graphic 
                        Geometry="@(new Polyline([new MapPath([new MapPoint([267.4174]),
                                new MapPoint([54.4266,
                                    772.5933])]),
                                new MapPath([new MapPoint([649.6392,
                                        175.4076])])],
                            new SpatialReference(3,
                                    "delectus",
                                    "recusandae",
                                    "illo"),
                                true,
                                true))"
                        Symbol="@(new TextSymbol("dicta ipsum fugiat",
                            new MapColor(153, 42, 24),
                            new MapColor(184, 128, 28),
                                new Dimension(557.5852),
                            new MapFont(new Dimension(565.0486),
                                    "Courier New",
                                MapFontStyle.Italic,
                                FontWeight.Bold,
                                TextDecoration.LineThrough),
                                256.0066,
                            new MapColor(181, 214, 35),
                            new MapColor(7, 247, 176),
                                765.0377,
                            HorizontalAlignment.Left,
                                true,
                                712.8007,
                                new Dimension(75.1272),
                                true))"
                        PopupTemplate="@(new PopupTemplate("ratione adipisci numquam",
                                "vel",
                                ["est"],
                            [new FieldInfo("group",
                                    "aliquam",
                                    "in",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Count)],
                            [new TextPopupContent("repudiandae autem sequi"),
                            new RelationshipPopupContent("qui ut laborum",
                                    "saepe suscipit voluptate ex",
                                    3,
                                    "quos",
                                [new RelatedRecordsInfoFieldOrder("qui",
                                    OrderBy.Desc)],
                                    9)],
                            [new ExpressionInfo("return Date();",
                                    "phone",
                                    "et veritatis non",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "category",
                                    "architecto accusamus nesciunt",
                                    ExpressionInfoReturnType.String)],
                                true,
                                true,
                                [new ActionButton("voluptatem officiis veniam",
                                    "https://picsum.photos/640/480/?image=513",
                                    "880e7c73-243c-7c89-0223-e5c5d6720ce6",
                                    () => { Console.WriteLine("modi"); return Task.CompletedTask; },
                                    "group",
                                    true,
                                    true,
                                    true,
                                    "est"),
                                    new ActionButton("cupiditate voluptatem saepe",
                                        "https://picsum.photos/640/480/?image=793",
                                        "3c5f37e5-6587-9b2c-70d6-e5bfd7398277",
                                        () => { Console.WriteLine("alias"); return Task.CompletedTask; },
                                        "status",
                                        true,
                                        true,
                                        true,
                                        "qui")]))"
                        Attributes="@(new AttributesDictionary())"
                        Visible="@(true)"
                        LegendLabel="@("et")"
                        AggregateGeometries="@("ducimus")"
                        Origin="@(new GraphicOrigin(Guid.NewGuid(),
                            "ipsa",
                            2))">
                    </Graphic>
                </LocateWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(locateWidget!);
        await AssertJavaScript("dispatchEvent", args: [locateWidget!.Id, "locate"]);
        await AssertJavaScript("dispatchEvent", args: [locateWidget!.Id, "locate-error"]);
        int tries = 100;
        while (tries > 0 &&
            (locateResult is null || 
            locateErrorResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<LocateEvent>(locateResult);
        Assert.IsInstanceOfType<LocateErrorEvent>(locateErrorResult);
        await AssertJavaScript("assertWidgetExists", args: "locate");
        await locateWidget.CancelLocate();
        var locateMethodResult = await locateWidget.Locate();
        Assert.IsNotNull(locateMethodResult);
        Graphic testGraphic = new Graphic(new Polyline([new MapPath([new MapPoint([647.8436])]),
                        new MapPath([new MapPoint([746.1126])])],
                    new SpatialReference(2,
                            "libero",
                            "modi",
                            "mollitia"),
                        true,
                        true),
                new TextSymbol("eos et soluta",
                    new MapColor(134, 247, 20),
                    new MapColor(232, 118, 50),
                        new Dimension(720.3663),
                    new MapFont(new Dimension(775.0378),
                            "Courier New",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        407.2539,
                    new MapColor(236, 146, 112),
                    new MapColor(173, 116, 49),
                        245.9440,
                    HorizontalAlignment.Right,
                        true,
                        654.9066,
                        new Dimension(631.7383),
                        true),
                new PopupTemplate("ad vitae quam",
                        "molestiae",
                        ["dolorem",
                            "dolorum"],
                    [new FieldInfo("category",
                            "reiciendis",
                            "vitae",
                        StringFieldOption.RichText,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.LongDateLongTime24),
                            true,
                            true,
                        StatisticType.Min)],
                    [new ExpressionPopupContent(new ElementExpressionInfo("return $feature['FieldName'];",
                                "dolorem",
                                "pariatur placeat quia"))],
                    [new ExpressionInfo("return Date();",
                            "phone",
                            "et delectus doloremque",
                            ExpressionInfoReturnType.String),
                    new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "comment",
                            "aut inventore dolor",
                            ExpressionInfoReturnType.String)],
                        true,
                        true,
                        [new ActionButton("qui reprehenderit et",
                            "https://picsum.photos/640/480/?image=447",
                            "430edd0c-082a-6669-20a8-e15c16bdfc57",
                            () => { Console.WriteLine("dolores"); return Task.CompletedTask; },
                            "group",
                            true,
                            true,
                            true,
                            "dolor")]),
                    new AttributesDictionary(),
                    true,
                    "laudantium",
                    "magni",
                    new GraphicOrigin(Guid.NewGuid(),
                        "impedit",
                        4));
        await locateWidget.SetGraphic(testGraphic);
        var graphic = await locateWidget.GetGraphic();
        Assert.AreEqual(testGraphic, graphic);
        LocateViewModel testViewModel = new LocateViewModel(new Error("token",
                    "numquam architecto maxime",
                    new { Value = "quisquam" }),
                    "et",
                    true,
                new GoToOverride(),
                new Graphic(new Extent(166.9272,
                            -58.6049,
                            -45.3724,
                            9.7656,
                            315.7585,
                            916.4089,
                            921.5930,
                            534.2582,
                        new SpatialReference(7,
                                "inventore",
                                "ut",
                                "qui"),
                            true,
                            true),
                    new TextSymbol("earum dolores saepe",
                        new MapColor(234, 149, 116),
                        new MapColor(168, 38, 168),
                            new Dimension(387.1734),
                        new MapFont(new Dimension(391.4975),
                                "Palatino",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            897.1631,
                        new MapColor(38, 123, 59),
                        new MapColor(164, 93, 237),
                            931.6847,
                        HorizontalAlignment.Center,
                            true,
                            932.7099,
                            new Dimension(814.1406),
                            true),
                    new PopupTemplate("ex repudiandae recusandae",
                            "quibusdam",
                            ["nemo",
                                "sunt"],
                        [new FieldInfo("phone",
                                "nam",
                                "nesciunt",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Var)],
                        [new FieldsPopupContent([new FieldInfo("status",
                                    "excepturi",
                                    "cum",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("phone",
                                    "rem",
                                    "autem",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLeShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum)],
                                "enim saepe labore",
                                "earum quasi sit")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "updatedAt",
                                "autem id tempora",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("assumenda velit nihil",
                                "https://picsum.photos/640/480/?image=890",
                                "6a7d1e52-1b7f-0197-cf98-2fcda9db100e",
                                () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "rerum")]),
                        new AttributesDictionary(),
                        true,
                        "eum",
                        "quia",
                        new GraphicOrigin(Guid.NewGuid(),
                            "consequatur",
                            8)),
                    true,
                    41126430.0972);
        await locateWidget.SetViewModel(testViewModel);
        var viewModel = await locateWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
    }
}
