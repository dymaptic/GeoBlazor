@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedSliderWidget(Action renderHandler)
    {
        SliderWidget? sliderWidget = null;

        SliderMaxChangeEvent? maxChangeResult = null;
        void OnMaxChange(SliderMaxChangeEvent result)
        {
            maxChangeResult = result;
        }
        SliderMaxClickEvent? maxClickResult = null;
        void OnMaxClick(SliderMaxClickEvent result)
        {
            maxClickResult = result;
        }
        SliderMinChangeEvent? minChangeResult = null;
        void OnMinChange(SliderMinChangeEvent result)
        {
            minChangeResult = result;
        }
        SliderMinClickEvent? minClickResult = null;
        void OnMinClick(SliderMinClickEvent result)
        {
            minClickResult = result;
        }
        SliderSegmentClickEvent? segmentClickResult = null;
        void OnSegmentClick(SliderSegmentClickEvent result)
        {
            segmentClickResult = result;
        }
        SliderSegmentDragEvent? segmentDragResult = null;
        void OnSegmentDrag(SliderSegmentDragEvent result)
        {
            segmentDragResult = result;
        }
        SliderThumbChangeEvent? thumbChangeResult = null;
        void OnThumbChange(SliderThumbChangeEvent result)
        {
            thumbChangeResult = result;
        }
        SliderThumbClickEvent? thumbClickResult = null;
        void OnThumbClick(SliderThumbClickEvent result)
        {
            thumbClickResult = result;
        }
        SliderThumbDragEvent? thumbDragResult = null;
        void OnThumbDrag(SliderThumbDragEvent result)
        {
            thumbDragResult = result;
        }
        SliderTickClickEvent? tickClickResult = null;
        void OnTickClick(SliderTickClickEvent result)
        {
            tickClickResult = result;
        }
        SliderTrackClickEvent? trackClickResult = null;
        void OnTrackClick(SliderTrackClickEvent result)
        {
            trackClickResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                </Map>
                <SliderWidget 
                    ContainerId="@("perspiciatis")"
                    Disabled="@(true)"
                    DraggableSegmentsEnabled="@(true)"
                    EffectiveMax="@(309.8564)"
                    EffectiveMin="@(281.5501)"
                    Label="@("deserunt")"
                    LabelInputsEnabled="@(true)"
                    Layout="@(SliderLayout.VerticalReversed)"
                    Max="@(375.2439)"
                    Min="@(154.8544)"
                    Precision="@(927.4710)"
                    RangeLabelInputsEnabled="@(true)"
                    SnapOnClickEnabled="@(true)"
                    Steps="@([962.6591,
                        868.2810])"
                    StepInterval="@(102.2686)"
                    SyncedSegmentsEnabled="@(true)"
                    ThumbsConstrained="@(true)"
                    Values="@([556.1294])"
                    InputCreatedFunction="@(new InputCreatedFunction())"
                    InputFormatFunction="@(new SliderLabelFormatter(456.0000,
                        SliderLabelFormatterType.Max,
                            8,
                            "ut"))"
                    InputParseFunction="@(new InputParserFunction("quidem",
                        SliderInputParserType.Tick,
                        8,
                        "dolor"))"
                    LabelFormatFunction="@(new SliderLabelFormatter(174.7801,
                        SliderLabelFormatterType.Average,
                            5,
                            "rem"))"
                    ThumbCreatedFunction="@(new ThumbCreatedFunction())"
                    Visible="@(true)"
                    Icon="@("magni")"
                    WidgetId="@("consequatur")"
                    OnMaxChange="OnMaxChange"
                    OnMaxClick="OnMaxClick"
                    OnMinChange="OnMinChange"
                    OnMinClick="OnMinClick"
                    OnSegmentClick="OnSegmentClick"
                    OnSegmentDrag="OnSegmentDrag"
                    OnThumbChange="OnThumbChange"
                    OnThumbClick="OnThumbClick"
                    OnThumbDrag="OnThumbDrag"
                    OnTickClick="OnTickClick"
                    OnTrackClick="OnTrackClick">
                    <SliderVisibleElements 
                        Labels="@(true)"
                        RangeLabels="@(true)">
                    </SliderVisibleElements>
                    <SliderViewModel 
                        EffectiveMax="@(110.2490)"
                        EffectiveMin="@(150.3151)"
                        InputFormatFunction="@(new SliderLabelFormatter(415.4037,
                            SliderLabelFormatterType.Max,
                                9,
                                "tempora"))"
                        InputParseFunction="@(new InputParser("iusto",
                            InputParserType.Max,
                                9,
                                "sapiente"))"
                        LabelFormatFunction="@(new SliderLabelFormatter(822.4566,
                            SliderLabelFormatterType.Max,
                                2,
                                "quas"))"
                        Max="@(246.3099)"
                        Min="@(448.1300)"
                        Precision="@(900.9483)"
                        ThumbsConstrained="@(true)"
                        Values="@([408.5878])">
                    </SliderViewModel>
                    <TickConfig 
                        Mode="@(TickConfigMode.Count)"
                        DoubleCollectionValues="@([446.5933,
                            259.4399])"
                        DoubleValues="@(390.5319)"
                        LabelFormatFunction="@(new SliderLabelFormatter(758.8241,
                            SliderLabelFormatterType.Tick,
                                6,
                                "consequuntur"))"
                        LabelsVisible="@(true)"
                        TickCreatedFunction="@(new TickCreatedFunction())">
                    </TickConfig>
                </SliderWidget>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(sliderWidget!);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "max-change"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "max-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "min-change"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "min-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "segment-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "segment-drag"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "thumb-change"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "thumb-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "thumb-drag"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "tick-click"]);
        await AssertJavaScript("dispatchEvent", args: [sliderWidget!.Id, "track-click"]);
        int tries = 100;
        while (tries > 0 &&
            (maxChangeResult is null || 
            maxClickResult is null || 
            minChangeResult is null || 
            minClickResult is null || 
            segmentClickResult is null || 
            segmentDragResult is null || 
            thumbChangeResult is null || 
            thumbClickResult is null || 
            thumbDragResult is null || 
            tickClickResult is null || 
            trackClickResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<SliderMaxChangeEvent>(maxChangeResult);
        Assert.IsInstanceOfType<SliderMaxClickEvent>(maxClickResult);
        Assert.IsInstanceOfType<SliderMinChangeEvent>(minChangeResult);
        Assert.IsInstanceOfType<SliderMinClickEvent>(minClickResult);
        Assert.IsInstanceOfType<SliderSegmentClickEvent>(segmentClickResult);
        Assert.IsInstanceOfType<SliderSegmentDragEvent>(segmentDragResult);
        Assert.IsInstanceOfType<SliderThumbChangeEvent>(thumbChangeResult);
        Assert.IsInstanceOfType<SliderThumbClickEvent>(thumbClickResult);
        Assert.IsInstanceOfType<SliderThumbDragEvent>(thumbDragResult);
        Assert.IsInstanceOfType<SliderTickClickEvent>(tickClickResult);
        Assert.IsInstanceOfType<SliderTrackClickEvent>(trackClickResult);
        await AssertJavaScript("assertWidgetExists", args: "slider");
        SliderLayout testLayout = SliderLayout.Horizontal;
        await sliderWidget.SetLayout(testLayout);
        var layout = await sliderWidget.GetLayout();
        Assert.AreEqual(testLayout, layout);
        InputCreatedFunction testInputCreatedFunction = new InputCreatedFunction();
        await sliderWidget.SetInputCreatedFunction(testInputCreatedFunction);
        var inputCreatedFunction = await sliderWidget.GetInputCreatedFunction();
        Assert.AreEqual(testInputCreatedFunction, inputCreatedFunction);
        SliderLabelFormatter testInputFormatFunction = new SliderLabelFormatter(343.0862,
                SliderLabelFormatterType.Value,
                    4,
                    "iure");
        await sliderWidget.SetInputFormatFunction(testInputFormatFunction);
        var inputFormatFunction = await sliderWidget.GetInputFormatFunction();
        Assert.AreEqual(testInputFormatFunction, inputFormatFunction);
        SliderLabelFormatter testLabelFormatFunction = new SliderLabelFormatter(517.4542,
                SliderLabelFormatterType.Average,
                    3,
                    "ipsa");
        await sliderWidget.SetLabelFormatFunction(testLabelFormatFunction);
        var labelFormatFunction = await sliderWidget.GetLabelFormatFunction();
        Assert.AreEqual(testLabelFormatFunction, labelFormatFunction);
        ThumbCreatedFunction testThumbCreatedFunction = new ThumbCreatedFunction();
        await sliderWidget.SetThumbCreatedFunction(testThumbCreatedFunction);
        var thumbCreatedFunction = await sliderWidget.GetThumbCreatedFunction();
        Assert.AreEqual(testThumbCreatedFunction, thumbCreatedFunction);
        IReadOnlyList<TickConfig> testTickConfigs = [new TickConfig(TickConfigMode.Position,
                    [585.7764,
                        798.0967],
                    733.5754,
                new SliderLabelFormatter(985.5829,
                    SliderLabelFormatterType.Max,
                        9,
                        "reiciendis"),
                    true,
                new TickCreatedFunction()),
            new TickConfig(TickConfigMode.Position,
                    [172.8586],
                    701.2663,
                new SliderLabelFormatter(983.9585,
                    SliderLabelFormatterType.Min,
                        5,
                        "repellat"),
                    true,
                new TickCreatedFunction())];
        await sliderWidget.SetTickConfigs(testTickConfigs);
        var tickConfigs = await sliderWidget.GetTickConfigs();
        Assert.AreEqual(testTickConfigs, tickConfigs);
        SliderVisibleElements testVisibleElements = new SliderVisibleElements(true,
                    true);
        await sliderWidget.SetVisibleElements(testVisibleElements);
        var visibleElements = await sliderWidget.GetVisibleElements();
        Assert.AreEqual(testVisibleElements, visibleElements);
        SliderViewModel testViewModel = new SliderViewModel(576.7631,
                    653.5954,
                new SliderLabelFormatter(607.1682,
                    SliderLabelFormatterType.Max,
                        2,
                        "dolores"),
                new InputParser("odit",
                    InputParserType.Value,
                        4,
                        "dolor"),
                new SliderLabelFormatter(252.1716,
                    SliderLabelFormatterType.Value,
                        8,
                        "asperiores"),
                    130.1197,
                    706.0811,
                    249.5124,
                    true,
                    [786.8768]);
        await sliderWidget.SetViewModel(testViewModel);
        var viewModel = await sliderWidget.GetViewModel();
        Assert.AreEqual(testViewModel, viewModel);
    }
}
