@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWCSLayer(Action renderHandler)
    {
        WCSLayer? wCSLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WCSLayer 
                        Url="@("https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(218, 238, 151),
                                new MapColor(248, 208, 203)),
                            true,
                            true,
                            [1,
                            3],
                            8,
                            8,
                            StretchType.StandardDeviation,
                            [new RasterBandStatistics(917.7484,
                                7,
                                534.1006,
                                820.1398,
                                279.2603,
                                579.3224,
                                906.6210,
                                962.6793)],
                            true,
                            9))"
                        Opacity="@(0.6886)"
                        Title="@("voluptas possimus et")"
                        BandIds="@([8,
                            7])"
                        BlendMode="@(BlendMode.Difference)"
                        Copyright="@("et")"
                        CoverageId="@("ea")"
                        CoverageInfo="@(new CoverageInfo(["createdAt",
                                "category"],
                            new CoverageDescriptionV100("soluta et",
                                new CoverageDescriptionV100DomainSet(new CoverageDescriptionV100DomainSetSpatialDomain(464.5568,
                                        new Extent(29.0750,
                                                20.3202,
                                                -77.6229,
                                                36.3716,
                                                680.8740,
                                                910.4434,
                                                975.9705,
                                                965.4024,
                                            new SpatialReference(2,
                                                    "voluptas",
                                                    "temporibus",
                                                    "consequuntur"),
                                                true,
                                                true),
                                        new CoverageDescriptionV100DomainSetSpatialDomainOffset(66.7036,
                                                "nobis"),
                                        new CoverageDescriptionV100DomainSetSpatialDomainOrigin(49.7925,
                                                "maiores"),
                                            977.3415),
                                    new TemporalDomain(new DateTime(2008, 9, 17, 0, 15, 1),
                                            new DateTime(2004, 11, 21, 11, 2, 14),
                                            51.0627,
                                            "provident",
                                            [new DateTime(2005, 3, 24, 12, 35, 14),
                                                new DateTime(2002, 5, 24, 4, 14, 57)])),
                                    "alias",
                                new Extent(-88.3518,
                                        166.0042,
                                        18.6650,
                                        -55.3715,
                                        394.3436,
                                        231.6320,
                                        341.3185,
                                        514.6578,
                                    new SpatialReference(4,
                                            "quae",
                                            "necessitatibus",
                                            "minus"),
                                        true,
                                        true),
                                    "name",
                                [new CoverageDescriptionV100RangeSet([new CoverageDescriptionV100RangeSetAxis("aperiam",
                                            "password",
                                            ["libero"]),
                                    new CoverageDescriptionV100RangeSetAxis("ex",
                                            "phone",
                                            ["ea",
                                                "voluptatem"])],
                                        "cumque",
                                        "id",
                                        [842.1489,
                                            621.7127])],
                                new CoverageDescriptionV100SupportedCRSs(["reiciendis"],
                                        ["adipisci"]),
                                    ["est"],
                                    ["est",
                                        "mollitia"],
                                    "7.5.7.7"),
                                "quia",
                                "consectetur quia ullam",
                            new Extent(110.7357,
                                    49.2094,
                                    9.1405,
                                    -35.7707,
                                    684.5440,
                                    556.9030,
                                    788.0892,
                                    524.2452,
                                new SpatialReference(8,
                                        "et",
                                        "minima",
                                        "autem"),
                                    true,
                                    true),
                            new RasterInfo(new FeatureSet("category",
                                        true,
                                    [new Graphic(new Extent(38.3407,
                                                153.3061,
                                                89.7535,
                                                -27.5149,
                                                437.3769,
                                                624.1835,
                                                985.2419,
                                                422.8293,
                                            new SpatialReference(5,
                                                    "voluptatibus",
                                                    "omnis",
                                                    "eos"),
                                                true,
                                                true),
                                        new TextSymbol("enim qui voluptas",
                                            new MapColor(33, 197, 148),
                                            new MapColor(110, 212, 227),
                                                new Dimension(228.7846),
                                            new MapFont(new Dimension(418.9347),
                                                    "Verdana",
                                                MapFontStyle.Italic,
                                                FontWeight.Bolder,
                                                TextDecoration.Underline),
                                                150.7736,
                                            new MapColor(88, 175, 213),
                                            new MapColor(18, 46, 152),
                                                667.8894,
                                            HorizontalAlignment.Center,
                                                true,
                                                898.2371,
                                                new Dimension(575.6966),
                                                true),
                                        new PopupTemplate("sed tempore id",
                                                "ea",
                                                ["laudantium"],
                                            [new FieldInfo("name",
                                                    "ratione",
                                                    "sunt",
                                                StringFieldOption.TextArea,
                                                new FieldInfoFormat(3,
                                                        true,
                                                    DateFormat.LongMonthYear),
                                                    true,
                                                    true,
                                                StatisticType.Avg),
                                            new FieldInfo("updatedAt",
                                                    "soluta",
                                                    "asperiores",
                                                StringFieldOption.TextBox,
                                                new FieldInfoFormat(3,
                                                        true,
                                                    DateFormat.LongMonthDayYearLongTime24),
                                                    true,
                                                    true,
                                                StatisticType.Min)],
                                            [new RelationshipPopupContent("voluptatem sunt laborum",
                                                    "placeat nesciunt nostrum esse",
                                                    6,
                                                    "tempora",
                                                [new RelatedRecordsInfoFieldOrder("non",
                                                    OrderBy.Asc),
                                                new RelatedRecordsInfoFieldOrder("et",
                                                    OrderBy.Asc)],
                                                    8)],
                                            [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                                    "group",
                                                    "adipisci cum amet",
                                                    ExpressionInfoReturnType.String),
                                            new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                                    "password",
                                                    "fugit iure id",
                                                    ExpressionInfoReturnType.String)],
                                                true,
                                                true,
                                                [new ActionButton("corrupti assumenda rerum",
                                                    "https://picsum.photos/640/480/?image=593",
                                                    "3e05dec5-75a7-82e9-da32-2f2b0fb84ec3",
                                                    () => { Console.WriteLine("consequuntur"); return Task.CompletedTask; },
                                                    "avatar",
                                                    true,
                                                    true,
                                                    true,
                                                    "inventore")]),
                                            new AttributesDictionary(),
                                            true,
                                            "sed",
                                            "quod",
                                            new GraphicOrigin(Guid.NewGuid(),
                                                "et",
                                                9))],
                                    [new Field(default,
                                            "updatedAt",
                                            "voluptate",
                                            "ipsum tempora dolor",
                                            3,
                                            true,
                                            true,
                                            new { Value = "est" },
                                        FieldValueType.UniqueIdentifier,
                                            new CodedValueDomain<string>([new CodedValue<string>(),
                                                new CodedValue<string>()],
                                                "comment")),
                                    new Field(default,
                                            "updatedAt",
                                            "temporibus",
                                            "explicabo rerum voluptatem",
                                            3,
                                            true,
                                            true,
                                            new { Value = "tempore" },
                                        FieldValueType.PercentageOrRatio,
                                            new CodedValueDomain<string>([new CodedValue<string>(),
                                                new CodedValue<string>()],
                                                "token"))],
                                    GeometryType.Polyline,
                                    new Polygon([new MapPath([new MapPoint([428.8914])]),
                                            new MapPath([new MapPoint([809.7743,
                                                    388.4418]),
                                                new MapPoint([963.2323,
                                                    170.5387])])],
                                        new SpatialReference(9,
                                                "corporis",
                                                "ut",
                                                "voluptatum"),
                                        new Point(46.1727,
                                                36.4115,
                                                -156.3502,
                                                -88.1288,
                                                610.5410,
                                            new SpatialReference(1,
                                                    "odio",
                                                    "facere",
                                                    "velit"),
                                                true,
                                                true,
                                                182.8580),
                                            true,
                                            true,
                                            true),
                                    new SpatialReference(8,
                                            "ipsa",
                                            "ullam",
                                            "dolores")),
                                    2,
                                [new RasterBandInfo(460.7782,
                                        741.4966,
                                        "title",
                                        965.6084,
                                        596.4992,
                                        532.9818,
                                        165.4690,
                                        692.0820)],
                                    [new ColormapPixel(880.0871,
                                        762.3313,
                                        116.5700,
                                        85.7076)],
                                DataType.VectorMagdir,
                                new Extent(-58.2669,
                                        72.6739,
                                        -82.2021,
                                        74.2301,
                                        896.1806,
                                        356.7707,
                                        585.0915,
                                        496.9499,
                                    new SpatialReference(3,
                                            "est",
                                            "et",
                                            "nobis"),
                                        true,
                                        true),
                                    true,
                                    4,
                                    ["rem"],
                                    "nihil",
                                new RasterMultidimensionalInfo([new RasterMultidimensionalInfoVariables("est perspiciatis delectus rerum",
                                        [new RasterMultidimensionalInfoVariablesDimensions("ut voluptatem",
                                                [858.2114,
                                                    423.8278],
                                                true,
                                                543.9871,
                                                "aut",
                                                "phone",
                                                "blanditiis",
                                                [258.1727,
                                                    445.5118])],
                                        [new RasterHistogram([424.8785,
                                                841.1319],
                                                [3,
                                                    2],
                                                123.4199,
                                                649.2389,
                                                2)],
                                            "token",
                                        [new RasterBandStatistics(792.5231,
                                                9,
                                                144.1053,
                                                121.7709,
                                                866.8228,
                                                15.4530,
                                                557.6447,
                                                231.5683)],
                                            "aliquid"),
                                    new RasterMultidimensionalInfoVariables("enim eveniet praesentium",
                                        [new RasterMultidimensionalInfoVariablesDimensions("sint voluptatibus maiores cum",
                                                [737.1091,
                                                    377.8640],
                                                true,
                                                525.8332,
                                                "adipisci",
                                                "password",
                                                "aut",
                                                [462.9505])],
                                        [new RasterHistogram([792.9063,
                                                422.6001],
                                                [7],
                                                923.6628,
                                                222.8537,
                                                8)],
                                            "title",
                                        [new RasterBandStatistics(414.4128,
                                                9,
                                                975.0801,
                                                626.1160,
                                                36.0573,
                                                822.1643,
                                                143.3071,
                                                227.6568)],
                                            "aut")]),
                                new RasterInfoPixelSize(-154.3205,
                                        -53.8029),
                                PixelType.Unknown,
                                new RasterSensorInfo(new DateTime(2014, 8, 21, 13, 24, 15),
                                        607.3669,
                                        "group",
                                        547.2290,
                                        157.0835,
                                        "comment",
                                        984.9237,
                                        583.1755)),
                                ["velit"],
                            [SupportedInterpolations.Nearest],
                                "natus ut dolorem",
                                true,
                            CoverageInfoVersion.Two_0_1))"
                        Effect="@(new Effect("odio",
                            47199068.0226))"
                        Interpolation="@(Interpolation.Bilinear)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(33440614.8177)"
                        MinScale="@(11622.8944)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Version="@("2.6.7.8")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(1.8214)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("labore")"
                            EndField="@("mollitia")"
                            Stops="@([new DateTime(2014, 6, 14, 19, 35, 18)])"
                            TimeZone="@("Australia/Sydney")"
                            TrackIdField="@("cum")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(936.5956)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2011, 7, 24, 21, 29, 55))"
                                End="@(new DateTime(2004, 3, 23, 9, 29, 6))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2002, 9, 26, 5, 1, 45))"
                            End="@(new DateTime(2009, 2, 1, 11, 33, 32))">
                        </TimeExtent>
                        <Field 
                            Name="@("name")"
                            Alias="@("qui")"
                            Description="@("id ratione quisquam")"
                            Length="@(4)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "consectetur" })"
                            ValueType="@(FieldValueType.TypeOrCategory)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>()],
                                "status"))">
                        </Field>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("eaque voluptatem distinctio")"
                            StringContent="@("omnis")"
                            OutFields="@(["ipsa",
                                "fuga"])"
                            FieldInfos="@([new FieldInfo("avatar",
                                    "eligendi",
                                    "necessitatibus",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime),
                                    true,
                                    true,
                                StatisticType.Max),
                            new FieldInfo("group",
                                    "est",
                                    "quo",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new TextPopupContent("blanditiis cupiditate vel")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "updatedAt",
                                    "omnis adipisci autem",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "createdAt",
                                    "commodi ratione quia",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("ducimus voluptas mollitia",
                                "https://picsum.photos/640/480/?image=250",
                                "d882b845-455f-332d-b618-4bd55b7edca4",
                                () => { Console.WriteLine("dolore"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "odit"),
                                new ActionButton("rerum dolores odio",
                                    "https://picsum.photos/640/480/?image=720",
                                    "fcf49e08-ce1f-303c-2726-e61df26f7d8e",
                                    () => { Console.WriteLine("error"); return Task.CompletedTask; },
                                    "password",
                                    true,
                                    true,
                                    true,
                                    "sint")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Polyline([new MapPath([new MapPoint([238.3084,
                                        491.6119]),
                                    new MapPoint([307.3439,
                                        262.0220])])],
                                new SpatialReference(1,
                                        "omnis",
                                        "aspernatur",
                                        "numquam"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("password")"
                                IsSlice="@(true)"
                                VariableName="@("avatar")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("name")"
                            IsSlice="@(true)"
                            VariableName="@("createdAt")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(5.0717)"
                            Xmin="@(168.8745)"
                            Ymax="@(68.2563)"
                            Ymin="@(-51.9197)"
                            Zmax="@(921.5465)"
                            Zmin="@(964.7505)"
                            Mmax="@(247.4146)"
                            Mmin="@(508.2623)"
                            SpatialReference="@(new SpatialReference(1,
                                    "delectus",
                                    "minus",
                                    "et"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </WCSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(wCSLayer!);
        await AssertJavaScript("assertLayerExists", args: "wcs");
        var createPopupTemplateMethodResult = await wCSLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["molestias",
                    "nihil"],
                    ["id",
                        "avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await wCSLayer.FetchPixels(new Extent(-116.0941,
                    -137.0534,
                    45.7144,
                    -56.3143,
                    932.4893,
                    375.5102,
                    860.1355,
                    0.1034,
                new SpatialReference(5,
                        "voluptatum",
                        "deleniti",
                        "enim"),
                    true,
                    true),
                7,
                4,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Nearest));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var identifyMethodResult = await wCSLayer.Identify(new Point(-12.9435,
                    67.6324,
                    -55.5192,
                    -14.2405,
                    511.1172,
                new SpatialReference(5,
                        "dolorem",
                        "voluptatem",
                        "omnis"),
                    true,
                    true,
                    638.3209),
            new RasterIdentifyOptions([new DimensionalDefinition("group",
                        true,
                        "password"),
                new DimensionalDefinition("updatedAt",
                        true,
                        "status")],
                    "status"));
        Assert.IsNotNull(identifyMethodResult);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("createdAt",
                    true,
                    "phone"),
            new DimensionalDefinition("phone",
                    true,
                    "updatedAt")];
        await wCSLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await wCSLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        PortalItem testPortalItem = new PortalItem();
        await wCSLayer.SetPortalItem(testPortalItem);
        var portalItem = await wCSLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await wCSLayer.SetBlendMode(testBlendMode);
        var blendMode = await wCSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        CoverageInfo testCoverageInfo = new CoverageInfo(["category",
                    "category"],
                new CoverageDescriptionV100("minima dolore qui adipisci",
                    new CoverageDescriptionV100DomainSet(new CoverageDescriptionV100DomainSetSpatialDomain(191.5068,
                            new Extent(35.7653,
                                    135.7695,
                                    -78.8748,
                                    51.1542,
                                    679.1874,
                                    83.7914,
                                    504.9309,
                                    761.1199,
                                new SpatialReference(4,
                                        "et",
                                        "ea",
                                        "voluptatem"),
                                    true,
                                    true),
                            new CoverageDescriptionV100DomainSetSpatialDomainOffset(179.9018,
                                    "debitis"),
                            new CoverageDescriptionV100DomainSetSpatialDomainOrigin(-133.5449,
                                    "omnis"),
                                775.6117),
                        new TemporalDomain(new DateTime(2009, 11, 11, 9, 6, 4),
                                new DateTime(2020, 10, 11, 1, 5, 57),
                                1.6813,
                                "sint",
                                [new DateTime(2007, 10, 4, 4, 25, 13),
                                    new DateTime(2009, 4, 11, 6, 9, 10)])),
                        "expedita",
                    new Extent(-60.4790,
                            -69.6993,
                            -0.8149,
                            -63.5470,
                            157.0479,
                            910.8421,
                            331.0166,
                            432.7875,
                        new SpatialReference(4,
                                "tempora",
                                "veritatis",
                                "tempora"),
                            true,
                            true),
                        "token",
                    [new CoverageDescriptionV100RangeSet([new CoverageDescriptionV100RangeSetAxis("id",
                                "comment",
                                ["repellat",
                                    "magni"]),
                        new CoverageDescriptionV100RangeSetAxis("laboriosam",
                                "group",
                                ["aspernatur",
                                    "repellendus"])],
                            "ad",
                            "password",
                            [594.7134,
                                794.5891])],
                    new CoverageDescriptionV100SupportedCRSs(["distinctio",
                            "illum"],
                            ["voluptatem",
                                "beatae"]),
                        ["enim"],
                        ["quidem"],
                        "6.6.5.9"),
                    "voluptatem",
                    "culpa incidunt consectetur labore",
                new Extent(113.7171,
                        32.4859,
                        -69.1234,
                        -32.7097,
                        12.0961,
                        830.2252,
                        424.7230,
                        187.8237,
                    new SpatialReference(7,
                            "incidunt",
                            "nemo",
                            "odio"),
                        true,
                        true),
                new RasterInfo(new FeatureSet("title",
                            true,
                        [new Graphic(new Polygon([new MapPath([new MapPoint([474.6174,
                                        357.8204]),
                                    new MapPoint([467.6290,
                                        292.9743])])],
                                new SpatialReference(1,
                                        "odit",
                                        "praesentium",
                                        "magni"),
                                new Point(159.5474,
                                        -5.3939,
                                        144.9167,
                                        -54.4165,
                                        817.6020,
                                    new SpatialReference(4,
                                            "similique",
                                            "et",
                                            "eos"),
                                        true,
                                        true,
                                        117.1598),
                                    true,
                                    true,
                                    true),
                            new TextSymbol("enim ullam totam",
                                new MapColor(69, 64, 113),
                                new MapColor(92, 180, 81),
                                    new Dimension(801.3861),
                                new MapFont(new Dimension(692.4227),
                                        "Courier New",
                                    MapFontStyle.Italic,
                                    FontWeight.Bold,
                                    TextDecoration.Underline),
                                    768.2650,
                                new MapColor(164, 216, 142),
                                new MapColor(126, 253, 228),
                                    824.9698,
                                HorizontalAlignment.Right,
                                    true,
                                    452.3642,
                                    new Dimension(94.5130),
                                    true),
                            new PopupTemplate("quibusdam dolor occaecati",
                                    "velit",
                                    ["ut"],
                                [new FieldInfo("status",
                                        "et",
                                        "quod",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.LongMonthDayYear),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("name",
                                        "sint",
                                        "voluptas",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(2,
                                            true,
                                        DateFormat.LongMonthYear),
                                        true,
                                        true,
                                    StatisticType.Sum)],
                                [new RelationshipPopupContent("ullam dolor numquam",
                                        "eligendi dolorem autem accusamus",
                                        9,
                                        "et",
                                    [new RelatedRecordsInfoFieldOrder("est",
                                        OrderBy.Asc),
                                    new RelatedRecordsInfoFieldOrder("quidem",
                                        OrderBy.Desc)],
                                        2),
                                new RelationshipPopupContent("velit nesciunt tempora",
                                        "temporibus porro",
                                        8,
                                        "velit",
                                    [new RelatedRecordsInfoFieldOrder("itaque",
                                        OrderBy.Asc)],
                                        8)],
                                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                        "createdAt",
                                        "nulla culpa placeat",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("veniam animi quia",
                                        "https://picsum.photos/640/480/?image=148",
                                        "e9cfede7-61fe-d99f-4800-ce819177a816",
                                        () => { Console.WriteLine("necessitatibus"); return Task.CompletedTask; },
                                        "phone",
                                        true,
                                        true,
                                        true,
                                        "earum"),
                                        new ActionButton("aut nobis vitae",
                                            "https://picsum.photos/640/480/?image=846",
                                            "4c02f98e-a1c7-22d9-fafe-838eae565cc5",
                                            () => { Console.WriteLine("est"); return Task.CompletedTask; },
                                            "phone",
                                            true,
                                            true,
                                            true,
                                            "atque")]),
                                new AttributesDictionary(),
                                true,
                                "provident",
                                "voluptatibus",
                                new GraphicOrigin(Guid.NewGuid(),
                                    "voluptatibus",
                                    7)),
                        new Graphic(new Extent(-39.0721,
                                    55.0093,
                                    -61.5816,
                                    -56.3312,
                                    354.5711,
                                    519.6430,
                                    567.6661,
                                    129.6902,
                                new SpatialReference(2,
                                        "quis",
                                        "cumque",
                                        "aliquam"),
                                    true,
                                    true),
                            new TextSymbol("ad nemo et",
                                new MapColor(133, 23, 205),
                                new MapColor(34, 249, 91),
                                    new Dimension(509.4732),
                                new MapFont(new Dimension(892.1234),
                                        "Courier New",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bold,
                                    TextDecoration.None),
                                    503.8559,
                                new MapColor(106, 109, 44),
                                new MapColor(146, 150, 25),
                                    735.8585,
                                HorizontalAlignment.Right,
                                    true,
                                    91.9381,
                                    new Dimension(604.6754),
                                    true),
                            new PopupTemplate("tempore ut eum",
                                    "sunt",
                                    ["consectetur"],
                                [new FieldInfo("category",
                                        "dolorem",
                                        "accusamus",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.DayShortMonthYearLongTime),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                [new MediaPopupContent("quisquam necessitatibus sed",
                                        "voluptate asperiores",
                                    [new BarChartMediaInfo("nihil quam sed",
                                            "ut",
                                            "facere et dolores",
                                        new ChartMediaInfoValue(["id"],
                                                "et",
                                                "voluptatem",
                                            [new ChartMediaInfoValueSeries("avatar",
                                                    "qui",
                                                    308.4307)],
                                            [new MapColor(126, 254, 55),
                                            new MapColor(215, 49, 4)]))],
                                        9),
                                new AttachmentsPopupContent("rerum eum sed",
                                        "dolore fuga voluptatem",
                                        AttachmentsPopupContentDisplayType.Auto)],
                                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "token",
                                        "enim recusandae animi",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("quasi explicabo hic",
                                        "https://picsum.photos/640/480/?image=618",
                                        "bd01af41-2c21-d468-59e7-e0a30eb411e1",
                                        () => { Console.WriteLine("repudiandae"); return Task.CompletedTask; },
                                        "avatar",
                                        true,
                                        true,
                                        true,
                                        "earum")]),
                                new AttributesDictionary(),
                                true,
                                "adipisci",
                                "debitis",
                                new GraphicOrigin(Guid.NewGuid(),
                                    "qui",
                                    7))],
                        [new Field(default,
                                "token",
                                "fugiat",
                                "deserunt consequuntur autem",
                                4,
                                true,
                                true,
                                new { Value = "numquam" },
                            FieldValueType.TypeOrCategory,
                                new CodedValueDomain<string>([new CodedValue<string>(),
                                    new CodedValue<string>()],
                                    "group")),
                        new Field(default,
                                "token",
                                "qui",
                                "blanditiis impedit ipsam dignissimos",
                                1,
                                true,
                                true,
                                new { Value = "voluptatibus" },
                            FieldValueType.CountOrAmount,
                                new CodedValueDomain<string>([new CodedValue<string>(),
                                    new CodedValue<string>()],
                                    "avatar"))],
                        GeometryType.Polygon,
                        new Polyline([new MapPath([new MapPoint([32.9099,
                                    875.2824])])],
                            new SpatialReference(6,
                                    "nobis",
                                    "numquam",
                                    "similique"),
                                true,
                                true),
                        new SpatialReference(6,
                                "sed",
                                "nisi",
                                "velit")),
                        9,
                    [new RasterBandInfo(676.0869,
                            87.7554,
                            "email",
                            253.9269,
                            971.1811,
                            987.2298,
                            714.2044,
                            789.8344)],
                        [new ColormapPixel(719.1241,
                            785.6630,
                            788.3412,
                            46.5642)],
                    DataType.Generic,
                    new Extent(-75.0283,
                            141.1102,
                            -54.8151,
                            75.2954,
                            485.9574,
                            37.6346,
                            15.0971,
                            315.1021,
                        new SpatialReference(6,
                                "veritatis",
                                "blanditiis",
                                "culpa"),
                            true,
                            true),
                        true,
                        1,
                        ["ipsa"],
                        "aut",
                    new RasterMultidimensionalInfo([new RasterMultidimensionalInfoVariables("sequi ut",
                            [new RasterMultidimensionalInfoVariablesDimensions("quibusdam dicta qui",
                                    [444.7790],
                                    true,
                                    475.7311,
                                    "ea",
                                    "category",
                                    "rerum",
                                    [911.6697,
                                        69.5942]),
                            new RasterMultidimensionalInfoVariablesDimensions("et blanditiis",
                                    [228.0362],
                                    true,
                                    76.1896,
                                    "aut",
                                    "createdAt",
                                    "dolor",
                                    [934.4538])],
                            [new RasterHistogram([992.2128],
                                    [2],
                                    621.4865,
                                    533.8741,
                                    3)],
                                "email",
                            [new RasterBandStatistics(53.6168,
                                    8,
                                    487.2359,
                                    27.8984,
                                    954.8286,
                                    529.1752,
                                    984.0133,
                                    332.2380),
                            new RasterBandStatistics(872.5351,
                                    8,
                                    124.1746,
                                    72.5424,
                                    775.6613,
                                    447.1816,
                                    386.1694,
                                    910.4822)],
                                "deserunt")]),
                    new RasterInfoPixelSize(-45.2099,
                            58.8207),
                    PixelType.U16,
                    new RasterSensorInfo(new DateTime(2008, 3, 19, 9, 8, 44),
                            260.7330,
                            "email",
                            611.5941,
                            331.5286,
                            "comment",
                            649.5543,
                            632.7518)),
                    ["laborum"],
                [SupportedInterpolations.Bilinear],
                    "dignissimos iusto esse",
                    true,
                CoverageInfoVersion.One_1_1);
        await wCSLayer.SetCoverageInfo(testCoverageInfo);
        var coverageInfo = await wCSLayer.GetCoverageInfo();
        Assert.AreEqual(testCoverageInfo, coverageInfo);
        Extent testFullExtent = new Extent(-129.1072,
                    147.4093,
                    -29.3941,
                    -50.4569,
                    158.7881,
                    236.3918,
                    137.9764,
                    336.7565,
                new SpatialReference(2,
                        "aut",
                        "neque",
                        "libero"),
                    true,
                    true);
        await wCSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await wCSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Interpolation testInterpolation = Interpolation.Cubic;
        await wCSLayer.SetInterpolation(testInterpolation);
        var interpolation = await wCSLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        ListMode testListMode = ListMode.Hide;
        await wCSLayer.SetListMode(testListMode);
        var listMode = await wCSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Extent(-161.0181,
                        55.1702,
                        80.6158,
                        -32.0139,
                        38.1300,
                        61.9050,
                        451.7726,
                        474.9830,
                    new SpatialReference(6,
                            "optio",
                            "numquam",
                            "quod"),
                        true,
                        true),
                [new DimensionalDefinition("phone",
                        true,
                        "createdAt")]);
        await wCSLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await wCSLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("alias iusto occaecati",
                    "sit",
                    ["qui",
                        "sed"],
                [new FieldInfo("group",
                        "nisi",
                        "consequatur",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.DayShortMonthYearLongTime),
                        true,
                        true,
                    StatisticType.Var),
                new FieldInfo("phone",
                        "eaque",
                        "harum",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(2,
                            true,
                        DateFormat.ShortDateLeShortTime),
                        true,
                        true,
                    StatisticType.Max)],
                [new MediaPopupContent("repellendus aliquid enim",
                        "commodi suscipit",
                    [new BarChartMediaInfo("consequatur totam eaque",
                            "quos",
                            "esse magni nesciunt",
                        new ChartMediaInfoValue(["voluptas"],
                                "veritatis",
                                "voluptatum",
                            [new ChartMediaInfoValueSeries("updatedAt",
                                    "voluptatem",
                                    728.0063)],
                            [new MapColor(209, 243, 208),
                            new MapColor(91, 61, 48)]))],
                        6)],
                [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "name",
                        "id expedita consequatur",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return Date();",
                        "token",
                        "eligendi qui accusamus",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("perspiciatis ab enim",
                        "https://picsum.photos/640/480/?image=711",
                        "654e7f5c-2da6-d629-f214-85b934afc3cc",
                        () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                        "createdAt",
                        true,
                        true,
                        true,
                        "dolor"),
                        new ActionButton("qui et hic",
                            "https://picsum.photos/640/480/?image=1001",
                            "66a1e70f-89d6-2b22-6b26-6fd7826e3cbe",
                            () => { Console.WriteLine("voluptates"); return Task.CompletedTask; },
                            "createdAt",
                            true,
                            true,
                            true,
                            "non")]);
        await wCSLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await wCSLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        IReadOnlyList<Field> testRasterFields = [new Field(default,
                    "status",
                    "debitis",
                    "nisi aliquid perspiciatis aliquid",
                    8,
                    true,
                    true,
                    new { Value = "libero" },
                FieldValueType.OrderedOrRanked,
                    new CodedValueDomain<string>([new CodedValue<string>(),
                        new CodedValue<string>()],
                        "id")),
            new Field(default,
                    "comment",
                    "earum",
                    "repellendus nostrum a itaque",
                    4,
                    true,
                    true,
                    new { Value = "eaque" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "category"))];
        await wCSLayer.SetRasterFields(testRasterFields);
        var rasterFields = await wCSLayer.GetRasterFields();
        Assert.AreEqual(testRasterFields, rasterFields);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2007, 9, 23, 8, 28, 41),
                    new DateTime(2012, 10, 19, 0, 9, 25));
        await wCSLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await wCSLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("recusandae",
                    "quibusdam",
                new TimeExtent(new DateTime(2012, 5, 6, 6, 35, 56),
                        new DateTime(2019, 7, 23, 10, 51, 15)),
                new TimeInterval(TemporalTime.Weeks,
                        764.5904),
                    [new DateTime(2020, 7, 7, 19, 23, 29),
                        new DateTime(2018, 7, 10, 15, 20, 40)],
                    "America/Godthab",
                    "velit");
        await wCSLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await wCSLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    81.3554);
        await wCSLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await wCSLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2022, 11, 23, 19, 12, 52),
                    new DateTime(2017, 10, 18, 15, 14, 8));
        await wCSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await wCSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
