@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedWCSLayer(Action renderHandler)
    {
        WCSLayer? wCSLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <WCSLayer 
                        Url="@("https://landsat2.arcgis.com/arcgis/rest/services/Landsat8_Views/ImageServer")"
                        Renderer="@(new RasterStretchRenderer(new AlgorithmicColorRamp(Algorithm.CieLab,
                                new MapColor(226, 52, 93),
                                new MapColor(105, 41, 175)),
                            true,
                            true,
                            [3],
                            7,
                            4,
                            StretchType.MinMax,
                            [new RasterBandStatistics(142.1624,
                                1,
                                928.1662,
                                531.2933,
                                559.4480,
                                220.8884,
                                935.7869,
                                545.2998),
                            new RasterBandStatistics(262.5488,
                                2,
                                784.2248,
                                465.0562,
                                549.6762,
                                970.0393,
                                997.3138,
                                150.4215)],
                            true,
                            9))"
                        Opacity="@(0.2319)"
                        Title="@("fugiat quae assumenda")"
                        BandIds="@([5])"
                        BlendMode="@(BlendMode.Difference)"
                        Copyright="@("vero")"
                        CoverageId="@("eius")"
                        CoverageInfo="@(new CoverageInfo(["status",
                                "group"],
                            default,
                                "consectetur",
                                "nulla sapiente necessitatibus",
                            new Extent(-10.9482,
                                    -57.3397,
                                    39.7836,
                                    8.6493,
                                    906.7847,
                                    184.3272,
                                    333.3888,
                                    877.9872,
                                new SpatialReference(9,
                                        "exercitationem",
                                        "ipsam",
                                        "tempore"),
                                    true,
                                    true),
                            new RasterInfo(new FeatureSet("comment",
                                        true,
                                    [new Graphic(new Polyline([new MapPath([new MapPoint([281.3362,
                                                    106.9815]),
                                                new MapPoint([705.6724])])],
                                            new SpatialReference(8,
                                                    "eligendi",
                                                    "velit",
                                                    "voluptatum"),
                                                true,
                                                true),
                                        new TextSymbol("est accusantium facilis",
                                            new MapColor(40, 225, 70),
                                            new MapColor(37, 112, 70),
                                                new Dimension(226.3052),
                                            new MapFont(new Dimension(299.6339),
                                                    "Bookman",
                                                MapFontStyle.Normal,
                                                FontWeight.Lighter,
                                                TextDecoration.Underline),
                                                857.2119,
                                            new MapColor(121, 22, 123),
                                            new MapColor(95, 107, 162),
                                                506.0302,
                                            HorizontalAlignment.Left,
                                                true,
                                                456.6140,
                                                new Dimension(515.8446),
                                                true),
                                        new PopupTemplate("minima perspiciatis et",
                                                "officiis",
                                                ["minima"],
                                            [new FieldInfo("avatar",
                                                    "vel",
                                                    "quasi",
                                                StringFieldOption.TextBox,
                                                new FieldInfoFormat(6,
                                                        true,
                                                    DateFormat.ShortMonthYear),
                                                    true,
                                                    true,
                                                StatisticType.Avg)],
                                            [new FieldsPopupContent([new FieldInfo("name",
                                                        "quam",
                                                        "non",
                                                    StringFieldOption.TextArea,
                                                    new FieldInfoFormat(),
                                                        true,
                                                        true,
                                                    StatisticType.Max),
                                                new FieldInfo("comment",
                                                        "hic",
                                                        "ipsam",
                                                    StringFieldOption.TextBox,
                                                    new FieldInfoFormat(),
                                                        true,
                                                        true,
                                                    StatisticType.Stddev)],
                                                    "sint aliquid labore sed",
                                                    "sint architecto similique")],
                                            [new ExpressionInfo("return $feature.Name;",
                                                    "createdAt",
                                                    "perferendis consectetur nesciunt",
                                                    ExpressionInfoReturnType.String),
                                            new ExpressionInfo("return $feature['FieldName'];",
                                                    "title",
                                                    "est dolores ut",
                                                    ExpressionInfoReturnType.String)],
                                                true,
                                                true,
                                                [new ActionButton("voluptatem dignissimos nemo",
                                                    "https://picsum.photos/640/480/?image=213",
                                                    "e22a685c-f5f2-942c-5d2b-e7ed686ffe19",
                                                    () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                                    "email",
                                                    true,
                                                    true,
                                                    true,
                                                    "officia")]),
                                            new AttributesDictionary(),
                                            true,
                                            "voluptatem",
                                            "praesentium",
                                            new GraphicOrigin(Guid.NewGuid(),
                                                "a",
                                                3))],
                                    [new Field(default,
                                            "title",
                                            "hic",
                                            "est optio",
                                            8,
                                            true,
                                            true,
                                            new { Value = "rerum" },
                                        FieldValueType.TypeOrCategory,
                                            new CodedValueDomain<string>()),
                                    new Field(default,
                                            "status",
                                            "qui",
                                            "aut possimus",
                                            8,
                                            true,
                                            true,
                                            new { Value = "voluptates" },
                                        FieldValueType.TypeOrCategory,
                                            new CodedValueDomain<string>())],
                                    GeometryType.Polyline,
                                    new Polyline([new MapPath([new MapPoint([226.6182])]),
                                            new MapPath([new MapPoint([331.0411,
                                                    163.1339]),
                                                new MapPoint([5.9617])])],
                                        new SpatialReference(7,
                                                "id",
                                                "minus",
                                                "veritatis"),
                                            true,
                                            true),
                                    new SpatialReference(7,
                                            "eligendi",
                                            "officiis",
                                            "exercitationem")),
                                    9,
                                [new RasterBandInfo(953.9941,
                                        215.6597,
                                        "email",
                                        297.1382,
                                        78.1159,
                                        84.4636,
                                        696.5289,
                                        927.2523)],
                                    [new ColormapPixel(148.1382,
                                        795.2022,
                                        34.8931,
                                        281.3160),
                                        new ColormapPixel(456.3873,
                                            152.2660,
                                            335.5513,
                                            586.4786)],
                                DataType.Elevation,
                                new Extent(93.4913,
                                        8.5195,
                                        6.8083,
                                        83.0205,
                                        615.9757,
                                        485.1629,
                                        705.1017,
                                        1.1135,
                                    new SpatialReference(7,
                                            "quia",
                                            "aliquid",
                                            "fugit"),
                                        true,
                                        true),
                                    true,
                                    1,
                                    ["repudiandae"],
                                    "velit",
                                new RasterMultidimensionalInfo([new RasterMultidimensionalInfoVariables("corporis consequatur explicabo",
                                        [new RasterMultidimensionalInfoVariablesDimensions("eos deleniti",
                                                [167.2030],
                                                true,
                                                98.2288,
                                                "quae",
                                                "token",
                                                "asperiores",
                                                [23.8149,
                                                    970.7086]),
                                        new RasterMultidimensionalInfoVariablesDimensions("saepe quos sed omnis",
                                                [231.0384,
                                                    439.7886],
                                                true,
                                                90.3632,
                                                "sed",
                                                "updatedAt",
                                                "repellat",
                                                [275.1241,
                                                    919.1516])],
                                        [new RasterHistogram([459.4331],
                                                [3],
                                                874.0096,
                                                776.7587,
                                                9),
                                        new RasterHistogram([160.5690],
                                                [1],
                                                614.2699,
                                                341.8394,
                                                1)],
                                            "category",
                                        [new RasterBandStatistics(442.3621,
                                                1,
                                                135.4369,
                                                84.6287,
                                                60.1579,
                                                857.1394,
                                                335.2380,
                                                871.4529)],
                                            "natus")]),
                                new RasterInfoPixelSize(-103.3501,
                                        -10.7210),
                                PixelType.F64,
                                new RasterSensorInfo(new DateTime(2011, 3, 7, 9, 21, 24),
                                        786.5790,
                                        "status",
                                        421.3516,
                                        617.4167,
                                        "title",
                                        314.3668,
                                        556.5290)),
                                ["id",
                                    "et"],
                            [SupportedInterpolations.Bilinear,
                            SupportedInterpolations.Nearest],
                                "inventore dolor harum",
                                true,
                            CoverageInfoVersion.One_0_0))"
                        Effect="@(new Effect("ut",
                            24360185.3147))"
                        Interpolation="@(Interpolation.Majority)"
                        LegendEnabled="@(true)"
                        ListMode="@(ListMode.Show)"
                        MaxScale="@(33248346.3736)"
                        MinScale="@(3353.2222)"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        UseViewTime="@(true)"
                        Version="@("4.1.0.8")">
                        <TimeInterval 
                            Unit="@(TemporalTime.Months)"
                            Value="@(826.6942)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptas")"
                            EndField="@("corrupti")"
                            Stops="@([new DateTime(2001, 5, 7, 13, 5, 24),
                                new DateTime(2012, 2, 5, 16, 52, 1)])"
                            TimeZone="@("Pacific/Fiji")"
                            TrackIdField="@("porro")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Days)"
                                Value="@(411.0127)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2019, 7, 8, 12, 38, 32))"
                                End="@(new DateTime(2016, 4, 27, 11, 39, 1))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2001, 11, 1, 2, 17, 49))"
                            End="@(new DateTime(2001, 5, 26, 19, 16, 6))">
                        </TimeExtent>
                        <Field 
                            Name="@("status")"
                            Alias="@("deserunt")"
                            Description="@("ut sapiente et")"
                            Length="@(2)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "cum" })"
                            ValueType="@(FieldValueType.Binary)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("numquam necessitatibus eius")"
                            StringContent="@("laborum")"
                            OutFields="@(["doloribus",
                                "aut"])"
                            FieldInfos="@([new FieldInfo("token",
                                    "ut",
                                    "maxime",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongDate),
                                    true,
                                    true,
                                StatisticType.Max)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("title",
                                        "voluptas",
                                        "ut",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.LongDateLongTime),
                                        true,
                                        true,
                                    StatisticType.Count)],
                                    "eligendi ipsa aut laboriosam",
                                    "deleniti et est"),
                            new TextPopupContent("quidem similique aperiam")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Population / $feature.Area;",
                                    "title",
                                    "numquam voluptatem eveniet",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "status",
                                    "labore accusamus quis",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("earum saepe enim",
                                "https://picsum.photos/640/480/?image=490",
                                "d10fa321-e881-c03e-1471-5a663fd0825f",
                                () => { Console.WriteLine("repellat"); return Task.CompletedTask; },
                                "name",
                                true,
                                true,
                                true,
                                "qui")])">
                        </PopupTemplate>
                        <MultidimensionalSubset 
                            AreaOfInterest="@(new Extent(69.7260,
                                    122.1853,
                                    18.0546,
                                    7.1659,
                                    81.3215,
                                    498.0961,
                                    58.8449,
                                    786.1046,
                                new SpatialReference(4,
                                        "qui",
                                        "est",
                                        "illum"),
                                    true,
                                    true))">
                            <DimensionalDefinition 
                                DimensionName="@("password")"
                                IsSlice="@(true)"
                                VariableName="@("id")"
>
                            </DimensionalDefinition>
                        </MultidimensionalSubset>
                        <DimensionalDefinition 
                            DimensionName="@("name")"
                            IsSlice="@(true)"
                            VariableName="@("name")"
>
                        </DimensionalDefinition>
                        <Extent 
                            Xmax="@(8.5654)"
                            Xmin="@(21.5521)"
                            Ymax="@(-28.6990)"
                            Ymin="@(62.5939)"
                            Zmax="@(631.2986)"
                            Zmin="@(19.2899)"
                            Mmax="@(685.1343)"
                            Mmin="@(754.6833)"
                            SpatialReference="@(new SpatialReference(1,
                                    "eaque",
                                    "quisquam",
                                    "enim"))"
                            HasM="@(true)"
                            HasZ="@(true)">
                        </Extent>
                    </WCSLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(wCSLayer!);
        await AssertJavaScript("assertLayerExists", args: "wcs");
        var createPopupTemplateMethodResult = await wCSLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["deserunt",
                    "perspiciatis"],
                    ["email",
                        "category"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var fetchPixelsMethodResult = await wCSLayer.FetchPixels(new Extent(41.1038,
                    -16.1679,
                    5.9015,
                    49.1315,
                    336.6790,
                    746.9619,
                    406.0853,
                    989.7396,
                new SpatialReference(6,
                        "eius",
                        "maiores",
                        "inventore"),
                    true,
                    true),
                8,
                9,
            new ImageryTileMixinFetchPixelsOptions(Interpolation.Majority));
        Assert.IsNotNull(fetchPixelsMethodResult);
        var identifyMethodResult = await wCSLayer.Identify(new Point(-169.9261,
                    28.2694,
                    -136.1150,
                    6.2430,
                    864.3630,
                new SpatialReference(2,
                        "maxime",
                        "eius",
                        "velit"),
                    true,
                    true,
                    661.5549),
            new RasterIdentifyOptions([new DimensionalDefinition("createdAt",
                        true,
                        "name")],
                    "token"));
        Assert.IsNotNull(identifyMethodResult);
        IReadOnlyList<DimensionalDefinition> testMultidimensionalDefinition = [new DimensionalDefinition("name",
                    true,
                    "comment"),
            new DimensionalDefinition("email",
                    true,
                    "group")];
        await wCSLayer.SetMultidimensionalDefinition(testMultidimensionalDefinition);
        var multidimensionalDefinition = await wCSLayer.GetMultidimensionalDefinition();
        Assert.AreEqual(testMultidimensionalDefinition, multidimensionalDefinition);
        PortalItem testPortalItem = new PortalItem();
        await wCSLayer.SetPortalItem(testPortalItem);
        var portalItem = await wCSLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        BlendMode testBlendMode = BlendMode.Exclusion;
        await wCSLayer.SetBlendMode(testBlendMode);
        var blendMode = await wCSLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        CoverageInfo testCoverageInfo = new CoverageInfo(["phone",
                    "id"],
                default,
                    "aut",
                    "est ut",
                new Extent(-134.9039,
                        -128.5925,
                        49.4279,
                        24.4922,
                        597.9880,
                        914.2986,
                        947.7526,
                        605.5318,
                    new SpatialReference(3,
                            "quis",
                            "id",
                            "facere"),
                        true,
                        true),
                new RasterInfo(new FeatureSet("avatar",
                            true,
                        [new Graphic(new Polyline([new MapPath([new MapPoint([274.3829,
                                        76.7132])])],
                                new SpatialReference(3,
                                        "illo",
                                        "quisquam",
                                        "tenetur"),
                                    true,
                                    true),
                            new TextSymbol("harum fugiat repudiandae",
                                new MapColor(230, 126, 78),
                                new MapColor(12, 24, 50),
                                    new Dimension(833.2482),
                                new MapFont(new Dimension(154.8069),
                                        "Palatino",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.LineThrough),
                                    863.0925,
                                new MapColor(225, 249, 66),
                                new MapColor(190, 235, 214),
                                    207.3813,
                                HorizontalAlignment.Center,
                                    true,
                                    498.4831,
                                    new Dimension(302.9289),
                                    true),
                            new PopupTemplate("rerum error cum",
                                    "illum",
                                    ["voluptatum",
                                        "et"],
                                [new FieldInfo("status",
                                        "dolorem",
                                        "non",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(1,
                                            true,
                                        DateFormat.ShortDateLeShortTime),
                                        true,
                                        true,
                                    StatisticType.Sum),
                                new FieldInfo("title",
                                        "rem",
                                        "molestiae",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(6,
                                            true,
                                        DateFormat.ShortDateShortTime),
                                        true,
                                        true,
                                    StatisticType.Var)],
                                [new FieldsPopupContent([new FieldInfo("group",
                                            "nam",
                                            "nihil",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(8,
                                                true,
                                            DateFormat.ShortMonthYear),
                                            true,
                                            true,
                                        StatisticType.Sum)],
                                        "laudantium consequuntur veritatis",
                                        "alias perspiciatis libero"),
                                new TextPopupContent("dicta debitis ea")],
                                [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "id",
                                        "ut eos voluptas",
                                        ExpressionInfoReturnType.String),
                                new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                        "token",
                                        "est dolores nobis",
                                        ExpressionInfoReturnType.String)],
                                    true,
                                    true,
                                    [new ActionButton("praesentium ea maiores",
                                        "https://picsum.photos/640/480/?image=477",
                                        "9e78ff8c-084b-a4a1-3cd4-907fe893822e",
                                        () => { Console.WriteLine("officia"); return Task.CompletedTask; },
                                        "avatar",
                                        true,
                                        true,
                                        true,
                                        "qui"),
                                        new ActionButton("earum tempore adipisci",
                                            "https://picsum.photos/640/480/?image=364",
                                            "9eb6b841-8034-14c5-d9f8-aba17cd2a1b9",
                                            () => { Console.WriteLine("tenetur"); return Task.CompletedTask; },
                                            "avatar",
                                            true,
                                            true,
                                            true,
                                            "maiores")]),
                                new AttributesDictionary(),
                                true,
                                "adipisci",
                                "ut",
                                new GraphicOrigin(Guid.NewGuid(),
                                    "perspiciatis",
                                    3))],
                        [new Field(default,
                                "id",
                                "rem",
                                "iste iste minus",
                                5,
                                true,
                                true,
                                new { Value = "molestias" },
                            FieldValueType.Description,
                                new CodedValueDomain<string>()),
                        new Field(default,
                                "token",
                                "qui",
                                "animi nostrum dignissimos consequuntur",
                                6,
                                true,
                                true,
                                new { Value = "laboriosam" },
                            FieldValueType.Measurement,
                                new CodedValueDomain<string>())],
                        GeometryType.Mesh,
                        new Point(-46.8197,
                                23.4007,
                                -52.6878,
                                74.6115,
                                264.6227,
                            new SpatialReference(2,
                                    "ea",
                                    "fugiat",
                                    "consequatur"),
                                true,
                                true,
                                136.9056),
                        new SpatialReference(2,
                                "dolorum",
                                "occaecati",
                                "vel")),
                        6,
                    [new RasterBandInfo(325.0552,
                            72.1008,
                            "comment",
                            469.0773,
                            135.9785,
                            713.6742,
                            243.7840,
                            157.5005)],
                        [new ColormapPixel(488.8930,
                            477.5358,
                            32.4035,
                            298.8395)],
                    DataType.VectorDirection,
                    new Extent(-150.6922,
                            158.5386,
                            53.5643,
                            36.6016,
                            286.7251,
                            431.3546,
                            723.2095,
                            118.6332,
                        new SpatialReference(7,
                                "ut",
                                "hic",
                                "sapiente"),
                            true,
                            true),
                        true,
                        6,
                        ["id"],
                        "placeat",
                    new RasterMultidimensionalInfo([new RasterMultidimensionalInfoVariables("sapiente optio et",
                            [new RasterMultidimensionalInfoVariablesDimensions("qui voluptas",
                                    [372.4064],
                                    true,
                                    977.1436,
                                    "assumenda",
                                    "token",
                                    "atque",
                                    [693.2602,
                                        741.7209]),
                            new RasterMultidimensionalInfoVariablesDimensions("magni exercitationem",
                                    [733.2194,
                                        678.5657],
                                    true,
                                    222.4735,
                                    "tempora",
                                    "name",
                                    "unde",
                                    [754.8675,
                                        795.8573])],
                            [new RasterHistogram([607.4317],
                                    [2,
                                        2],
                                    36.3164,
                                    283.8187,
                                    9),
                            new RasterHistogram([241.3999,
                                    902.2738],
                                    [7,
                                        8],
                                    946.3113,
                                    479.8362,
                                    8)],
                                "token",
                            [new RasterBandStatistics(652.8897,
                                    7,
                                    395.1102,
                                    985.3661,
                                    833.8042,
                                    710.0286,
                                    465.0587,
                                    502.2629)],
                                "deserunt")]),
                    new RasterInfoPixelSize(40.8752,
                            87.2941),
                    PixelType.U16,
                    new RasterSensorInfo(new DateTime(2002, 10, 21, 9, 20, 53),
                            814.0496,
                            "title",
                            556.1934,
                            992.4257,
                            "status",
                            272.9339,
                            334.7227)),
                    ["optio",
                        "labore"],
                [SupportedInterpolations.Bilinear,
                SupportedInterpolations.Nearest],
                    "repellat occaecati veniam",
                    true,
                CoverageInfoVersion.One_1_2);
        await wCSLayer.SetCoverageInfo(testCoverageInfo);
        var coverageInfo = await wCSLayer.GetCoverageInfo();
        Assert.AreEqual(testCoverageInfo, coverageInfo);
        Extent testFullExtent = new Extent(-51.3029,
                    -27.5315,
                    -68.3893,
                    76.0710,
                    876.6477,
                    473.6572,
                    579.1441,
                    263.3602,
                new SpatialReference(8,
                        "consequatur",
                        "fuga",
                        "consectetur"),
                    true,
                    true);
        await wCSLayer.SetFullExtent(testFullExtent);
        var fullExtent = await wCSLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        Interpolation testInterpolation = Interpolation.Nearest;
        await wCSLayer.SetInterpolation(testInterpolation);
        var interpolation = await wCSLayer.GetInterpolation();
        Assert.AreEqual(testInterpolation, interpolation);
        ListMode testListMode = ListMode.Show;
        await wCSLayer.SetListMode(testListMode);
        var listMode = await wCSLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        MultidimensionalSubset testMultidimensionalSubset = new MultidimensionalSubset(new Polygon([new MapPath([new MapPoint([724.2871]),
                        new MapPoint([499.6828,
                            845.5711])])],
                    new SpatialReference(4,
                            "ea",
                            "pariatur",
                            "saepe"),
                    new Point(46.6468,
                            42.4538,
                            70.1568,
                            64.5757,
                            955.8883,
                        new SpatialReference(1,
                                "debitis",
                                "natus",
                                "quam"),
                            true,
                            true,
                            137.8851),
                        true,
                        true,
                        true),
                [new DimensionalDefinition("group",
                        true,
                        "password")]);
        await wCSLayer.SetMultidimensionalSubset(testMultidimensionalSubset);
        var multidimensionalSubset = await wCSLayer.GetMultidimensionalSubset();
        Assert.AreEqual(testMultidimensionalSubset, multidimensionalSubset);
        PopupTemplate testPopupTemplate = new PopupTemplate("mollitia quo corrupti",
                    "cupiditate",
                    ["quidem"],
                [new FieldInfo("group",
                        "voluptatem",
                        "aut",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(6,
                            true,
                        DateFormat.DayShortMonthYearShortTime),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new TextPopupContent("quia vero iusto"),
                new RelationshipPopupContent("magnam nam qui",
                        "rerum consequuntur impedit",
                        4,
                        "aut",
                    [new RelatedRecordsInfoFieldOrder("ratione",
                        OrderBy.Asc),
                    new RelatedRecordsInfoFieldOrder("amet",
                        OrderBy.Asc)],
                        4)],
                [new ExpressionInfo("return $feature['FieldName'];",
                        "email",
                        "rerum rerum esse",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "id",
                        "est libero commodi",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("inventore aut facere",
                        "https://picsum.photos/640/480/?image=295",
                        "d16df33b-50e0-24c3-7a63-ab28c18159b6",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "phone",
                        true,
                        true,
                        true,
                        "sed")]);
        await wCSLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await wCSLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        IReadOnlyList<Field> testRasterFields = [new Field(default,
                    "password",
                    "illum",
                    "laudantium optio",
                    7,
                    true,
                    true,
                    new { Value = "provident" },
                FieldValueType.Description,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "comment",
                    "aliquam",
                    "quia itaque qui porro",
                    1,
                    true,
                    true,
                    new { Value = "ea" },
                FieldValueType.CountOrAmount,
                    new CodedValueDomain<string>())];
        await wCSLayer.SetRasterFields(testRasterFields);
        var rasterFields = await wCSLayer.GetRasterFields();
        Assert.AreEqual(testRasterFields, rasterFields);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2017, 5, 24, 2, 58, 38),
                    new DateTime(2005, 1, 9, 16, 34, 24));
        await wCSLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await wCSLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("autem",
                    "consequatur",
                new TimeExtent(new DateTime(2012, 5, 20, 16, 0, 18),
                        new DateTime(2011, 2, 22, 5, 35, 16)),
                new TimeInterval(TemporalTime.Centuries,
                        279.1765),
                    [new DateTime(2008, 1, 25, 15, 16, 47)],
                    "Europe/Sarajevo",
                    "numquam");
        await wCSLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await wCSLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    420.9694);
        await wCSLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await wCSLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 1, 14, 8, 57, 1),
                    new DateTime(2001, 10, 10, 14, 12, 10));
        await wCSLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await wCSLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
