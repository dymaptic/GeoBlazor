@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoJSONLayer(Action renderHandler)
    {
        GeoJSONLayer? geoJSONLayer = null;

        GeoJSONLayerEditsEvent? editsResult = null;
        void OnEdits(GeoJSONLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoJSONLayer 
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/ArcGIS/rest/services/World_Countries_(Generalized)/FeatureServer/0/query?where=1%3D1&outFields=*&f=geojson")"
                        Copyright="@("et")"
                        Title="@("quisquam aut quibusdam")"
                        Opacity="@(0.4962)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Overlay)"
                        DefinitionExpression="@("temporibus")"
                        DisplayField="@("commodi")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("quo",
                            24811012.5347))"
                        GeometryType="@(SimpleGeometryType.Polyline)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(12610590.6003)"
                        MinScale="@(19058.1445)"
                        ObjectIdField="@("sit")"
                        OutFields="@(["rerum",
                            "non"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(784.2646)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Centuries)"
                            Value="@(283.5580)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("quia")"
                            EndField="@("sit")"
                            Stops="@([new DateTime(2010, 4, 23, 19, 58, 10)])"
                            TimeZone="@("Asia/Karachi")"
                            TrackIdField="@("quis")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(650.6174)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2016, 5, 27, 12, 46, 5))"
                                End="@(new DateTime(2008, 9, 20, 19, 20, 47))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2014, 10, 3, 16, 52, 19))"
                            End="@(new DateTime(2014, 1, 15, 13, 30, 38))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("vel et laudantium et")"
                            DrawingTool="@(DrawingTool.AutoCompletePolygon)"
                            Name="@("comment")"
                            Prototype="@(new Graphic(new Polyline([new MapPath([new MapPoint([143.5469,
                                            361.7988])])],
                                    new SpatialReference(8,
                                            "temporibus",
                                            "in",
                                            "velit"),
                                        true,
                                        true),
                                new TextSymbol("possimus mollitia non",
                                    new MapColor(235, 77, 34),
                                    new MapColor(176, 18, 173),
                                        new Dimension(68.2496),
                                    new MapFont(new Dimension(82.7848),
                                            "Verdana",
                                        MapFontStyle.Oblique,
                                        FontWeight.Bold,
                                        TextDecoration.LineThrough),
                                        789.6893,
                                    new MapColor(239, 180, 168),
                                    new MapColor(181, 45, 117),
                                        781.8137,
                                    HorizontalAlignment.Center,
                                        true,
                                        461.5642,
                                        new Dimension(293.3834),
                                        true),
                                new PopupTemplate("ullam quis qui",
                                        "ea",
                                        ["laboriosam"],
                                    [new FieldInfo("email",
                                            "corporis",
                                            "beatae",
                                        StringFieldOption.TextArea,
                                        new FieldInfoFormat(4,
                                                true,
                                            DateFormat.LongDateShortTime24),
                                            true,
                                            true,
                                        StatisticType.Count),
                                    new FieldInfo("category",
                                            "consequatur",
                                            "eveniet",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(3,
                                                true,
                                            DateFormat.LongDateLongTime24),
                                            true,
                                            true,
                                        StatisticType.Avg)],
                                    [new TextPopupContent("dolorum excepturi ipsa")],
                                    [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                            "status",
                                            "velit mollitia culpa",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("consequuntur necessitatibus debitis",
                                            "https://picsum.photos/640/480/?image=422",
                                            "8f9ecd7f-c853-a3e1-0eb5-6bdc6bf39caf",
                                            () => { Console.WriteLine("eligendi"); return Task.CompletedTask; },
                                            "createdAt",
                                            true,
                                            true,
                                            true,
                                            "aut")]),
                                    new AttributesDictionary(),
                                    true,
                                    "expedita",
                                    "incidunt",
                                    new GraphicOrigin(Guid.NewGuid(),
                                        "autem",
                                        6)))"
                            Thumbnail="@(new Thumbnail("ipsam",
                                "cum",
                                282.6637,
                                55.7781))">
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(6)"
                            ImageCoordinateSystem="@("non")"
                            Wkt="@("sunt")"
                            Wkt2="@("ex")">
                        </SpatialReference>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.Manual,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(181, 171, 0),
                                        new MapColor(127, 40, 155)),
                                    new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(41, 83, 126),
                                        new MapColor(161, 254, 118))]),
                                    967.6940,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(245.9790,
                                            943.0176),
                                    new AuthoringInfoField1ClassBreakInfos(581.6279,
                                            697.9836)],
                                        "et",
                                        "totam",
                                        "aut"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(288.0387,
                                            865.3896)],
                                        "numquam",
                                        "temporibus",
                                        "omnis"),
                                    ["atque",
                                        "est"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "expedita",
                                    true,
                                LengthUnit.Kilometers,
                                    301.9970,
                                    137.0595,
                                    698.0209,
                                    821.9541))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("in repudiandae perferendis")"
                            StringContent="@("dolorum")"
                            OutFields="@(["corporis",
                                "repellendus"])"
                            FieldInfos="@([new FieldInfo("status",
                                    "tempora",
                                    "optio",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongDateLongTime),
                                    true,
                                    true,
                                StatisticType.Stddev)])"
                            Content="@([new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                        "a",
                                        "dignissimos et veritatis")),
                            new FieldsPopupContent([new FieldInfo("avatar",
                                        "animi",
                                        "nihil",
                                    StringFieldOption.TextArea,
                                    new FieldInfoFormat(7,
                                            true,
                                        DateFormat.DayShortMonthYearLongTime24),
                                        true,
                                        true,
                                    StatisticType.Max),
                                new FieldInfo("name",
                                        "odit",
                                        "quis",
                                    StringFieldOption.TextBox,
                                    new FieldInfoFormat(5,
                                            true,
                                        DateFormat.DayShortMonthYearShortTime24),
                                        true,
                                        true,
                                    StatisticType.Count)],
                                    "nihil ad sed",
                                    "quia earum asperiores")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature.Name;",
                                    "comment",
                                    "ut qui aut",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("modi quia eveniet",
                                "https://picsum.photos/640/480/?image=377",
                                "18bc9fb7-63df-9d4d-1fa6-c63de757052c",
                                () => { Console.WriteLine("velit"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "laboriosam")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("et")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("incidunt")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterCenter)"
                            LabelExpression="@("est")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(33231883.0849)"
                            MinScale="@(41017.9527)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(961.6915))"
                            Symbol="@(new TextSymbol("similique eius perspiciatis",
                                new MapColor(193, 41, 140),
                                new MapColor(220, 134, 110),
                                    new Dimension(385.5501),
                                new MapFont(new Dimension(545.9347),
                                        "Garamond",
                                    MapFontStyle.Oblique,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    142.6403,
                                new MapColor(20, 61, 193),
                                new MapColor(230, 225, 173),
                                    273.4155,
                                HorizontalAlignment.Right,
                                    true,
                                    180.6365,
                                    new Dimension(811.1591),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("City = 'Toronto'")">
                        </Label>
                        <Extent 
                            Xmax="@(59.8243)"
                            Xmin="@(-176.5443)"
                            Ymax="@(-20.6406)"
                            Ymin="@(-34.5319)"
                            Zmax="@(582.7738)"
                            Zmin="@(628.8226)"
                            Mmax="@(520.1653)"
                            Mmin="@(808.5429)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(1)"
                                ImageCoordinateSystem="@("odio")"
                                Wkt="@("nisi")"
                                Wkt2="@("repudiandae")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("name")"
                            Alias="@("nesciunt")"
                            Description="@("quo dolor")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "est" })"
                            ValueType="@(FieldValueType.OrderedOrRanked)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>(),
                                new CodedValue<string>()],
                                "phone"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("reiciendis",
                                15372341.8795),
                                new Effect("modi",
                                    39872740.7132)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(961.2310,
                                new Polyline([new MapPath([new MapPoint([927.9243])])],
                                    new SpatialReference(6,
                                            "facere",
                                            "consequatur",
                                            "amet"),
                                        true,
                                        true),
                                    [5,
                                        4],
                                SpatialRelationship.IndexIntersects,
                                new TimeExtent(new DateTime(2021, 2, 7, 10, 12, 27),
                                        new DateTime(2008, 1, 19, 22, 43, 41)),
                                    QueryUnits.NauticalMiles,
                                    "1 = 1"))"
                            IncludedEffect="@([new Effect("minima",
                                1744211.9856),
                                new Effect("quidem",
                                    8021261.8957)])">
                        </FeatureEffect>
                        <GeoJSONLayerElevationInfo 
                            FeatureExpressionInfo="@(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return Date();",
                                    "iure ad voluptas"))"
                            Mode="@(ElevationInfoMode.RelativeToGround)"
                            Offset="@(849.7250)"
                            Unit="@(ElevationUnit.UsFeet)">
                        </GeoJSONLayerElevationInfo>
                    </GeoJSONLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoJSONLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<GeoJSONLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geojson");
        var applyEditsMethodResult = await geoJSONLayer.ApplyEdits(new GeoJSONLayerApplyEditsEdits([new Graphic(new Extent(-177.2753,
                            -49.5426,
                            72.8686,
                            55.4865,
                            505.9541,
                            744.5727,
                            258.2963,
                            282.8965,
                        new SpatialReference(6,
                                "nisi",
                                "itaque",
                                "dolores"),
                            true,
                            true),
                    new TextSymbol("laboriosam ut similique",
                        new MapColor(2, 91, 149),
                        new MapColor(193, 5, 85),
                            new Dimension(684.1876),
                        new MapFont(new Dimension(270.1210),
                                "Georgia",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            10.7235,
                        new MapColor(237, 91, 109),
                        new MapColor(196, 135, 217),
                            716.8381,
                        HorizontalAlignment.Left,
                            true,
                            797.8738,
                            new Dimension(805.1558),
                            true),
                    new PopupTemplate("expedita odio reiciendis",
                            "non",
                            ["sed"],
                        [new FieldInfo("status",
                                "sunt",
                                "laudantium",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.DayShortMonthYearShortTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("updatedAt",
                                "nemo",
                                "nulla",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateLongTime),
                                true,
                                true,
                            StatisticType.Count)],
                        [new RelationshipPopupContent("mollitia ipsam enim",
                                "at autem",
                                9,
                                "sed",
                            [new RelatedRecordsInfoFieldOrder("expedita",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("deleniti",
                                OrderBy.Desc)],
                                5)],
                        [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "updatedAt",
                                "hic placeat qui",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("saepe nulla necessitatibus",
                                "https://picsum.photos/640/480/?image=441",
                                "fdc14141-a951-2abd-9d67-705479e19229",
                                () => { Console.WriteLine("eveniet"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "velit"),
                                new ActionButton("voluptas voluptatibus ad",
                                    "https://picsum.photos/640/480/?image=1050",
                                    "9a6330b1-53ef-3368-68ab-70b01c0faf96",
                                    () => { Console.WriteLine("magnam"); return Task.CompletedTask; },
                                    "category",
                                    true,
                                    true,
                                    true,
                                    "porro")]),
                        new AttributesDictionary(),
                        true,
                        "laborum",
                        "magnam",
                        new GraphicOrigin(Guid.NewGuid(),
                            "laboriosam",
                            2)),
                new Graphic(new Polygon([new MapPath([new MapPoint([261.5917])])],
                        new SpatialReference(7,
                                "aut",
                                "ut",
                                "nobis"),
                        new Point(-51.1368,
                                -59.3975,
                                10.5010,
                                9.7025,
                                933.7657,
                            new SpatialReference(5,
                                    "quasi",
                                    "ea",
                                    "inventore"),
                                true,
                                true,
                                852.9428),
                            true,
                            true,
                            true),
                    new TextSymbol("enim dolor nostrum",
                        new MapColor(151, 34, 98),
                        new MapColor(146, 168, 179),
                            new Dimension(149.1536),
                        new MapFont(new Dimension(111.0428),
                                "Times New Roman",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            278.6384,
                        new MapColor(248, 149, 216),
                        new MapColor(208, 253, 233),
                            944.3965,
                        HorizontalAlignment.Left,
                            true,
                            429.6841,
                            new Dimension(719.4393),
                            true),
                    new PopupTemplate("perspiciatis nobis iusto",
                            "quisquam",
                            ["accusamus"],
                        [new FieldInfo("password",
                                "enim",
                                "assumenda",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "voluptas",
                                    "eaque expedita ipsum"))],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "id",
                                "aut sit vel",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("veritatis sunt architecto",
                                "https://picsum.photos/640/480/?image=501",
                                "67ab872c-68b7-3d09-d3b3-392791f96159",
                                () => { Console.WriteLine("ratione"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "ullam"),
                                new ActionButton("dolor aut ea",
                                    "https://picsum.photos/640/480/?image=478",
                                    "aa323488-da90-43d0-b00c-aecf60053315",
                                    () => { Console.WriteLine("aspernatur"); return Task.CompletedTask; },
                                    "phone",
                                    true,
                                    true,
                                    true,
                                    "cumque")]),
                        new AttributesDictionary(),
                        true,
                        "sit",
                        "incidunt",
                        new GraphicOrigin(Guid.NewGuid(),
                            "ullam",
                            5))],
                [new Graphic(new Point(-158.3461,
                            -88.7274,
                            174.4284,
                            61.4491,
                            172.7294,
                        new SpatialReference(3,
                                "recusandae",
                                "provident",
                                "laudantium"),
                            true,
                            true,
                            348.9447),
                    new TextSymbol("ex culpa ea",
                        new MapColor(14, 251, 34),
                        new MapColor(217, 239, 93),
                            new Dimension(904.3645),
                        new MapFont(new Dimension(323.9035),
                                "Helvetica",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.None),
                            488.6048,
                        new MapColor(61, 26, 10),
                        new MapColor(118, 23, 35),
                            5.5153,
                        HorizontalAlignment.Center,
                            true,
                            21.1079,
                            new Dimension(946.7463),
                            true),
                    new PopupTemplate("soluta enim quia",
                            "maiores",
                            ["eum"],
                        [new FieldInfo("category",
                                "sunt",
                                "neque",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.Year),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("updatedAt",
                                "tenetur",
                                "aut",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLeLongTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new FieldsPopupContent([new FieldInfo("createdAt",
                                    "ut",
                                    "sunt",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("name",
                                    "itaque",
                                    "provident",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Min)],
                                "tempora iure porro",
                                "nemo sed reprehenderit")],
                        [new ExpressionInfo("return Date();",
                                "avatar",
                                "qui minus alias",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "createdAt",
                                "et aspernatur tempora",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("eos esse ex",
                                "https://picsum.photos/640/480/?image=146",
                                "3f8a30e2-6228-d76f-ff17-adae03a13870",
                                () => { Console.WriteLine("vero"); return Task.CompletedTask; },
                                "comment",
                                true,
                                true,
                                true,
                                "doloribus")]),
                        new AttributesDictionary(),
                        true,
                        "corporis",
                        "eum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "vel",
                            4))],
                    ["animi",
                        "eos"],
                [new Graphic(new Extent(45.4009,
                            114.9200,
                            16.1305,
                            -7.0982,
                            879.0705,
                            276.8731,
                            451.2741,
                            100.3362,
                        new SpatialReference(5,
                                "officiis",
                                "vero",
                                "fuga"),
                            true,
                            true),
                    new TextSymbol("est assumenda ipsum",
                        new MapColor(16, 104, 28),
                        new MapColor(0, 223, 21),
                            new Dimension(137.5470),
                        new MapFont(new Dimension(214.8094),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.None),
                            137.1062,
                        new MapColor(81, 47, 227),
                        new MapColor(154, 84, 89),
                            77.4271,
                        HorizontalAlignment.Right,
                            true,
                            773.6526,
                            new Dimension(862.4033),
                            true),
                    new PopupTemplate("consequatur tempora aut",
                            "molestiae",
                            ["corporis",
                                "qui"],
                        [new FieldInfo("email",
                                "accusamus",
                                "est",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.DayShortMonthYear),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("return Date();",
                                    "ex",
                                    "rerum ut deserunt"))],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "id",
                                "quasi voluptas ea",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "comment",
                                "exercitationem neque quia",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("est odit quos",
                                "https://picsum.photos/640/480/?image=485",
                                "82ab4d4e-14e9-b403-0291-557531c32539",
                                () => { Console.WriteLine("voluptas"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "fugit"),
                                new ActionButton("dolorum libero rerum",
                                    "https://picsum.photos/640/480/?image=1048",
                                    "a6bfb770-059c-379f-a7fb-43f202611284",
                                    () => { Console.WriteLine("quasi"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "non")]),
                        new AttributesDictionary(),
                        true,
                        "sit",
                        "inventore",
                        new GraphicOrigin(Guid.NewGuid(),
                            "nihil",
                            8)),
                new Graphic(new Point(146.9910,
                            6.8810,
                            108.6741,
                            43.5738,
                            897.7969,
                        new SpatialReference(7,
                                "laudantium",
                                "ea",
                                "possimus"),
                            true,
                            true,
                            342.1201),
                    new TextSymbol("eius aut numquam",
                        new MapColor(69, 155, 155),
                        new MapColor(217, 76, 23),
                            new Dimension(378.3575),
                        new MapFont(new Dimension(224.8101),
                                "Arial",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.None),
                            510.3993,
                        new MapColor(10, 56, 118),
                        new MapColor(18, 65, 40),
                            251.7426,
                        HorizontalAlignment.Right,
                            true,
                            744.2520,
                            new Dimension(547.4939),
                            true),
                    new PopupTemplate("error officia quisquam",
                            "optio",
                            ["ducimus"],
                        [new FieldInfo("password",
                                "suscipit",
                                "recusandae",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new RelationshipPopupContent("necessitatibus qui est",
                                "voluptates sed laborum neque",
                                7,
                                "doloribus",
                            [new RelatedRecordsInfoFieldOrder("est",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("ut",
                                OrderBy.Desc)],
                                3),
                        new MediaPopupContent("nulla accusantium reprehenderit",
                                "molestiae quisquam",
                            [new ColumnChartMediaInfo("amet atque dolor",
                                    "est",
                                    "vero qui consectetur",
                                new ChartMediaInfoValue(["neque"],
                                        "dolorem",
                                        "deleniti",
                                    [new ChartMediaInfoValueSeries("group",
                                            "dolorem",
                                            366.4018)],
                                    [new MapColor(7, 211, 162)]))],
                                9)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "createdAt",
                                "ea iusto voluptas",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "group",
                                "nam natus et",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("et deleniti consequatur",
                                "https://picsum.photos/640/480/?image=982",
                                "7536276d-aacb-6d08-3bed-5df63bb78be9",
                                () => { Console.WriteLine("nesciunt"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "quo")]),
                        new AttributesDictionary(),
                        true,
                        "eveniet",
                        "non",
                        new GraphicOrigin(Guid.NewGuid(),
                            "nobis",
                            2))]));
        Assert.IsNotNull(applyEditsMethodResult);
        var createPopupTemplateMethodResult = await geoJSONLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["et"],
                    ["name",
                        "avatar"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await geoJSONLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await geoJSONLayer.GetField("phone");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await geoJSONLayer.GetFieldDomain("email",
            new GeoJSONLayerGetFieldDomainOptions(new Graphic(new Polyline([new MapPath([new MapPoint([621.9674,
                                614.5069]),
                            new MapPoint([821.0864])])],
                        new SpatialReference(6,
                                "dolorum",
                                "sed",
                                "minima"),
                            true,
                            true),
                    new TextSymbol("voluptatem eveniet et",
                        new MapColor(34, 195, 126),
                        new MapColor(240, 55, 171),
                            new Dimension(668.3610),
                        new MapFont(new Dimension(587.8385),
                                "Verdana",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            589.2487,
                        new MapColor(89, 134, 169),
                        new MapColor(83, 60, 180),
                            996.9928,
                        HorizontalAlignment.Left,
                            true,
                            935.7655,
                            new Dimension(221.8657),
                            true),
                    new PopupTemplate("quisquam quibusdam beatae",
                            "aut",
                            ["nesciunt"],
                        [new FieldInfo("comment",
                                "aperiam",
                                "quibusdam",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new MediaPopupContent("sint soluta voluptatem",
                                "vero sit doloribus",
                            [new BarChartMediaInfo("fugiat nisi ipsam",
                                    "repellendus",
                                    "mollitia in iste",
                                new ChartMediaInfoValue(["est"],
                                        "odio",
                                        "laudantium",
                                    [new ChartMediaInfoValueSeries("email",
                                            "aspernatur",
                                            492.7166),
                                    new ChartMediaInfoValueSeries("category",
                                            "deserunt",
                                            422.5110)],
                                    [new MapColor(134, 167, 49),
                                    new MapColor(174, 39, 12)]))],
                                7)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "phone",
                                "omnis nemo vel",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "title",
                                "dolorem ea repellendus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("soluta rem voluptate",
                                "https://picsum.photos/640/480/?image=48",
                                "bbe6e8e8-202f-30ff-5c75-8bd8f7ad0d62",
                                () => { Console.WriteLine("autem"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "esse")]),
                        new AttributesDictionary(),
                        true,
                        "qui",
                        "omnis",
                        new GraphicOrigin(Guid.NewGuid(),
                            "commodi",
                            6))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await geoJSONLayer.QueryExtent(new Query([4,
                    1],
                    true,
                    586.0016,
                    638.8157,
                    "4.5.6.2",
                new Polyline([new MapPath([new MapPoint([478.5545,
                            67.4031])])],
                    new SpatialReference(5,
                            "pariatur",
                            "rerum",
                            "qui"),
                        true,
                        true),
                    5,
                    ["aut"],
                    "omnis",
                    new DateTime(2019, 6, 19, 20, 6, 38),
                    947.7718,
                    7,
                    "sint",
                    5),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await geoJSONLayer.QueryFeatureCount(new Query([3],
                    true,
                    0.6835,
                    220.7944,
                    "9.2.1.8",
                new Extent(-137.7810,
                        -24.6465,
                        -44.6147,
                        30.6370,
                        136.9043,
                        433.3383,
                        636.0342,
                        918.1764,
                    new SpatialReference(9,
                            "cumque",
                            "officiis",
                            "accusantium"),
                        true,
                        true),
                    2,
                    ["similique"],
                    "veniam",
                    new DateTime(2022, 5, 10, 13, 46, 52),
                    858.1647,
                    8,
                    "et",
                    4),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await geoJSONLayer.QueryFeatures(new Query([6,
                    5],
                    true,
                    501.1237,
                    405.9172,
                    "2.5.2.3",
                new Point(-166.8758,
                        -5.1727,
                        123.1676,
                        -15.9920,
                        311.3645,
                    new SpatialReference(9,
                            "alias",
                            "et",
                            "minus"),
                        true,
                        true,
                        146.1093),
                    2,
                    ["doloremque"],
                    "dicta",
                    new DateTime(2022, 1, 4, 21, 47, 15),
                    911.3216,
                    4,
                    "excepturi",
                    3),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await geoJSONLayer.QueryObjectIds(new Query([2],
                    true,
                    851.6603,
                    658.1999,
                    "9.1.7.5",
                new Extent(149.4073,
                        -116.9894,
                        -45.7068,
                        25.3483,
                        437.8457,
                        470.5812,
                        354.2128,
                        698.3104,
                    new SpatialReference(6,
                            "tenetur",
                            "est",
                            "delectus"),
                        true,
                        true),
                    6,
                    ["quis",
                        "inventore"],
                    "rerum",
                    new DateTime(2016, 3, 5, 13, 2, 51),
                    569.7118,
                    3,
                    "hic",
                    9),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await geoJSONLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoJSONLayer.SetListMode(testListMode);
        var listMode = await geoJSONLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Lighten;
        await geoJSONLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoJSONLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GeoJSONLayerElevationInfo testElevationInfo = new GeoJSONLayerElevationInfo(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                        "possimus eius quibusdam"),
                ElevationInfoMode.AbsoluteHeight,
                    47.5747,
                ElevationUnit.DecimalDegrees);
        await geoJSONLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await geoJSONLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("repellendus",
                    38443576.2170)],
                    true,
                new FeatureFilter(849.4919,
                    new Polygon([new MapPath([new MapPoint([372.8209])]),
                            new MapPath([new MapPoint([919.2478,
                                    9.3629]),
                                new MapPoint([410.5262,
                                    769.7093])])],
                        new SpatialReference(1,
                                "id",
                                "ipsam",
                                "praesentium"),
                        new Point(-144.1171,
                                0.9390,
                                -40.4135,
                                -11.8549,
                                804.3494,
                            new SpatialReference(7,
                                    "accusamus",
                                    "similique",
                                    "soluta"),
                                true,
                                true,
                                833.5303),
                            true,
                            true,
                            true),
                        [6],
                    SpatialRelationship.IndexIntersects,
                    new TimeExtent(new DateTime(2015, 5, 26, 19, 0, 47),
                            new DateTime(2010, 4, 23, 13, 9, 43)),
                        QueryUnits.Meters,
                        "Name = 'John Doe'"),
                    [new Effect("et",
                        40397472.3933),
                        new Effect("quaerat",
                            35406147.9674)]);
        await geoJSONLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await geoJSONLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "password",
                    "provident",
                    "non dignissimos aut quia",
                    6,
                    true,
                    true,
                    new { Value = "nisi" },
                FieldValueType.OrderedOrRanked,
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "phone"))];
        await geoJSONLayer.SetFields(testFields);
        var fields = await geoJSONLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-113.8915,
                    -176.2226,
                    2.3907,
                    -48.4032,
                    460.8002,
                    506.7382,
                    429.3639,
                    330.8170,
                new SpatialReference(2,
                        "similique",
                        "officiis",
                        "sunt"),
                    true,
                    true);
        await geoJSONLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoJSONLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Polygon;
        await geoJSONLayer.SetGeometryType(testGeometryType);
        var geometryType = await geoJSONLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowAlong,
                    "quia",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    11910671.4297,
                    40189.3660,
                    true,
                    new Dimension(151.8310),
                new TextSymbol("voluptatum iste voluptate",
                    new MapColor(201, 39, 236),
                    new MapColor(103, 197, 20),
                        new Dimension(608.7356),
                    new MapFont(new Dimension(111.8141),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Bold,
                        TextDecoration.LineThrough),
                        166.2844,
                    new MapColor(17, 253, 124),
                    new MapColor(161, 164, 79),
                        851.2312,
                    HorizontalAlignment.Center,
                        true,
                        933.3071,
                        new Dimension(277.9437),
                        true),
                    true,
                    "ObjectID = 1")];
        await geoJSONLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await geoJSONLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("laboriosam",
                SortOrder.Ascending,
                    "sapiente")];
        await geoJSONLayer.SetOrderBy(testOrderBy);
        var orderBy = await geoJSONLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PortalItem testPortalItem = new PortalItem();
        await geoJSONLayer.SetPortalItem(testPortalItem);
        var portalItem = await geoJSONLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("tenetur iusto provident",
                    new MapColor(78, 155, 164),
                    new MapColor(117, 242, 71),
                        new Dimension(881.0642),
                    new MapFont(new Dimension(236.8942),
                            "Verdana",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.None),
                        193.2120,
                    new MapColor(171, 181, 14),
                    new MapColor(73, 79, 163),
                        606.2787,
                    HorizontalAlignment.Left,
                        true,
                        524.2024,
                        new Dimension(57.3889),
                        true),
                    "et",
                [new SizeVariable("quia",
                        new Dimension(201.2026),
                        new Dimension(568.0441),
                        439.9778,
                        220.0146,
                        VisualValueRepresentation.Radius,
                        VisualValueUnit.Meters,
                        "libero",
                        "voluptates",
                        true,
                        VisualAxis.Width,
                        "repudiandae",
                        "consectetur recusandae rerum",
                    new VisualVariableLegendOptions(true,
                            "consequatur sapiente in"))],
                new AuthoringInfo(ClassificationMethod.Manual,
                    new AlgorithmicColorRamp(Algorithm.Hsv,
                        new MapColor(218, 72, 244),
                        new MapColor(207, 132, 7)),
                        425.2727,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(270.1580,
                                786.1380),
                        new AuthoringInfoField1ClassBreakInfos(549.2614,
                                605.5693)],
                            "voluptas",
                            "earum",
                            "quas"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(475.3394,
                                376.4410)],
                            "voluptatem",
                            "voluptatem",
                            "fugiat"),
                        ["suscipit",
                            "temporibus"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "sunt",
                        true,
                    LengthUnit.Decimeters,
                        951.8812,
                        385.1304,
                        137.6618,
                        37.9430));
        await geoJSONLayer.SetRenderer(testRenderer);
        var renderer = await geoJSONLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(6,
                    "dolores",
                    "accusantium",
                    "esse");
        await geoJSONLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await geoJSONLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("qui tempora ut pariatur",
                DrawingTool.Rectangle,
                    "group",
                new Graphic(new Polyline([new MapPath([new MapPoint([778.6524]),
                            new MapPoint([432.4802])]),
                            new MapPath([new MapPoint([607.9379,
                                    813.7188]),
                                new MapPoint([481.3285])])],
                        new SpatialReference(8,
                                "magni",
                                "possimus",
                                "consectetur"),
                            true,
                            true),
                    new TextSymbol("repellendus ullam eos",
                        new MapColor(164, 86, 157),
                        new MapColor(70, 206, 81),
                            new Dimension(377.8521),
                        new MapFont(new Dimension(108.3266),
                                "Times New Roman",
                            MapFontStyle.Normal,
                            FontWeight.Lighter,
                            TextDecoration.None),
                            388.1427,
                        new MapColor(189, 47, 239),
                        new MapColor(244, 193, 158),
                            579.1490,
                        HorizontalAlignment.Center,
                            true,
                            355.3973,
                            new Dimension(572.9088),
                            true),
                    new PopupTemplate("sit quas quia",
                            "voluptate",
                            ["a"],
                        [new FieldInfo("category",
                                "delectus",
                                "delectus",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDateLongTime24),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("title",
                                "nobis",
                                "repellendus",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Var)],
                        [new MediaPopupContent("at fugiat non",
                                "error enim dolorem consequatur",
                            [new ImageMediaInfo("maiores atque consectetur",
                                    "itaque",
                                    "itaque voluptatum illum",
                                new ImageMediaInfoValue("https://meaghan.info",
                                        "http://mikayla.info"),
                                    1.7155)],
                                3),
                        new AttachmentsPopupContent("illum expedita asperiores",
                                "inventore assumenda",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "group",
                                "ad mollitia et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "name",
                                "possimus ratione voluptate",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("ut laborum aspernatur",
                                "https://picsum.photos/640/480/?image=305",
                                "f139b341-584b-7175-c7a8-b5d50cf36750",
                                () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "minima")]),
                        new AttributesDictionary(),
                        true,
                        "ratione",
                        "voluptas",
                        new GraphicOrigin(Guid.NewGuid(),
                            "non",
                            5)),
                    new Thumbnail("quaerat",
                        "et",
                        107.1332,
                        207.9494))];
        await geoJSONLayer.SetTemplates(testTemplates);
        var templates = await geoJSONLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2013, 5, 7, 19, 54, 19),
                    new DateTime(2006, 2, 18, 17, 18, 32));
        await geoJSONLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await geoJSONLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("itaque",
                    "facere",
                new TimeExtent(new DateTime(2012, 11, 7, 14, 40, 13),
                        new DateTime(2021, 7, 9, 17, 2, 27)),
                new TimeInterval(TemporalTime.Milliseconds,
                        618.8492),
                    [new DateTime(2007, 9, 25, 22, 15, 40),
                        new DateTime(2020, 4, 21, 9, 44, 37)],
                    "Australia/Melbourne",
                    "eius");
        await geoJSONLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await geoJSONLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Days,
                    577.2546);
        await geoJSONLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await geoJSONLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2013, 9, 26, 11, 48, 2),
                    new DateTime(2022, 4, 11, 2, 39, 53));
        await geoJSONLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoJSONLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
