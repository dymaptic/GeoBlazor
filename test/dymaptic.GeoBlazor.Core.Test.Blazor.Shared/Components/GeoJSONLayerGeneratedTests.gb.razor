@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoJSONLayer(Action renderHandler)
    {
        GeoJSONLayer? geoJSONLayer = null;

        GeoJSONLayerEditsEvent? editsResult = null;
        void OnEdits(GeoJSONLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoJSONLayer 
                        Url="@("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson")"
                        Copyright="@("ratione")"
                        Title="@("eaque qui dolorum")"
                        Opacity="@(0.3341)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.SourceAtop)"
                        DefinitionExpression="@("nihil")"
                        DisplayField="@("atque")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("molestiae",
                            39887866.7418))"
                        GeometryType="@(SimpleGeometryType.Polygon)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(2766897.6528)"
                        MinScale="@(6831.7263)"
                        ObjectIdField="@("fuga")"
                        OutFields="@(["ut",
                            "magnam"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(156.9024)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(590.7512)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("omnis")"
                            EndField="@("consequatur")"
                            Stops="@([new DateTime(2017, 2, 10, 18, 29, 28),
                                new DateTime(2017, 5, 19, 17, 16, 45)])"
                            TimeZone="@("Asia/Yekaterinburg")"
                            TrackIdField="@("ullam")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Months)"
                                Value="@(807.4829)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2019, 8, 5, 3, 49, 27))"
                                End="@(new DateTime(2005, 11, 2, 1, 26, 29))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2013, 3, 12, 7, 49, 21))"
                            End="@(new DateTime(2012, 3, 17, 20, 56, 19))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("dolore eveniet labore esse")"
                            DrawingTool="@(DrawingTool.Triangle)"
                            Name="@("group")"
                            Prototype="@(new Graphic(new Polygon([new MapPath([new MapPoint([580.1044])])],
                                    new SpatialReference(4,
                                            "voluptas",
                                            "dolore",
                                            "id"),
                                    new Point(67.2136,
                                            84.4906,
                                            -146.6209,
                                            -11.3102,
                                            440.2568,
                                        new SpatialReference(6,
                                                "aut",
                                                "aspernatur",
                                                "alias"),
                                            true,
                                            true,
                                            995.5712),
                                        true,
                                        true,
                                        true),
                                new TextSymbol("vel omnis est",
                                    new MapColor(210, 13, 184),
                                    new MapColor(146, 113, 65),
                                        new Dimension(391.7107),
                                    new MapFont(new Dimension(639.4931),
                                            "Georgia",
                                        MapFontStyle.Italic,
                                        FontWeight.Lighter,
                                        TextDecoration.Underline),
                                        126.1800,
                                    new MapColor(184, 43, 165),
                                    new MapColor(172, 13, 162),
                                        292.6774,
                                    HorizontalAlignment.Center,
                                        true,
                                        419.5888,
                                        new Dimension(868.7640),
                                        true),
                                new PopupTemplate("molestiae libero ducimus",
                                        "architecto",
                                        ["optio"],
                                    [new FieldInfo("email",
                                            "et",
                                            "adipisci",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(3,
                                                true,
                                            DateFormat.ShortDateShortTime),
                                            true,
                                            true,
                                        StatisticType.Max),
                                    new FieldInfo("password",
                                            "cumque",
                                            "quod",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(8,
                                                true,
                                            DateFormat.ShortDate),
                                            true,
                                            true,
                                        StatisticType.Var)],
                                    [new FieldsPopupContent([new FieldInfo("password",
                                                "aut",
                                                "maiores",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(7,
                                                    true,
                                                DateFormat.LongDate),
                                                true,
                                                true,
                                            StatisticType.Sum),
                                        new FieldInfo("createdAt",
                                                "blanditiis",
                                                "ex",
                                            StringFieldOption.RichText,
                                            new FieldInfoFormat(2,
                                                    true,
                                                DateFormat.LongMonthDayYear),
                                                true,
                                                true,
                                            StatisticType.Stddev)],
                                            "vero natus sequi numquam",
                                            "cupiditate assumenda eum")],
                                    [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                            "email",
                                            "cupiditate delectus adipisci",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("return $feature.Population / $feature.Area;",
                                            "updatedAt",
                                            "vitae dolores adipisci",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("sequi voluptatem enim",
                                            "https://picsum.photos/640/480/?image=869",
                                            "6c947cea-ff62-8c2f-fabd-68e913b93e1d",
                                            () => { Console.WriteLine("ducimus"); return Task.CompletedTask; },
                                            "comment",
                                            true,
                                            true,
                                            true,
                                            "saepe")]),
                                    new AttributesDictionary(),
                                    true,
                                    "qui",
                                    "doloribus",
                                    new GraphicOrigin(Guid.NewGuid(),
                                        "aut",
                                        5)))"
                            Thumbnail="@(new Thumbnail("nulla",
                                "fuga",
                                182.7105,
                                245.8276))">
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(6)"
                            ImageCoordinateSystem="@("sint")"
                            Wkt="@("eos")"
                            Wkt2="@("recusandae")">
                        </SpatialReference>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.EqualInterval,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(132, 65, 126),
                                        new MapColor(42, 241, 46)),
                                    new AlgorithmicColorRamp(Algorithm.CieLab,
                                        new MapColor(251, 190, 172),
                                        new MapColor(243, 33, 75))]),
                                    402.4192,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(529.5950,
                                            854.9911)],
                                        "repudiandae",
                                        "voluptatem",
                                        "neque"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(388.3946,
                                            98.7028),
                                    new AuthoringInfoField1ClassBreakInfos(203.1839,
                                            409.8329)],
                                        "ea",
                                        "quae",
                                        "non"),
                                    ["incidunt"],
                                AuthoringInfoFlowTheme.FlowLine,
                                    "molestiae",
                                    true,
                                LengthUnit.Kilometers,
                                    555.5882,
                                    114.9869,
                                    516.3302,
                                    689.4518))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("aut voluptate recusandae")"
                            StringContent="@("necessitatibus")"
                            OutFields="@(["corrupti"])"
                            FieldInfos="@([new FieldInfo("name",
                                    "provident",
                                    "pariatur",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new AttachmentsPopupContent("nisi nam porro",
                                    "saepe aliquid sunt",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "token",
                                    "deserunt quo voluptatem",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("voluptatem similique assumenda",
                                "https://picsum.photos/640/480/?image=64",
                                "5c64114a-2f35-86ab-b372-f433bb6a102c",
                                () => { Console.WriteLine("sed"); return Task.CompletedTask; },
                                "phone",
                                true,
                                true,
                                true,
                                "sit"),
                                new ActionButton("ducimus minus sint",
                                    "https://picsum.photos/640/480/?image=854",
                                    "e949db10-b597-33c0-7ccf-0102e0b0726b",
                                    () => { Console.WriteLine("saepe"); return Task.CompletedTask; },
                                    "comment",
                                    true,
                                    true,
                                    true,
                                    "est")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("magnam")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("deserunt")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.CenterLeft)"
                            LabelExpression="@("sed")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(48134805.4120)"
                            MinScale="@(17412.2808)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(263.7791))"
                            Symbol="@(new TextSymbol("explicabo autem aliquid",
                                new MapColor(119, 228, 68),
                                new MapColor(240, 174, 138),
                                    new Dimension(496.7698),
                                new MapFont(new Dimension(902.3831),
                                        "Times New Roman",
                                    MapFontStyle.Normal,
                                    FontWeight.Bold,
                                    TextDecoration.LineThrough),
                                    518.4884,
                                new MapColor(162, 208, 21),
                                new MapColor(57, 45, 176),
                                    860.5633,
                                HorizontalAlignment.Center,
                                    true,
                                    919.5638,
                                    new Dimension(760.0788),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Province = 'Ontario'")">
                        </Label>
                        <Extent 
                            Xmax="@(23.6118)"
                            Xmin="@(102.7043)"
                            Ymax="@(-59.0285)"
                            Ymin="@(43.1779)"
                            Zmax="@(659.1020)"
                            Zmin="@(250.0653)"
                            Mmax="@(240.3328)"
                            Mmin="@(163.6559)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(5)"
                                ImageCoordinateSystem="@("unde")"
                                Wkt="@("quia")"
                                Wkt2="@("voluptas")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("avatar")"
                            Alias="@("quia")"
                            Description="@("eaque qui unde")"
                            Length="@(7)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "velit" })"
                            ValueType="@(FieldValueType.None)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("iste",
                                2428416.4130),
                                new Effect("rerum",
                                    32116102.1064)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(150.1018,
                                new Extent(171.3945,
                                        3.6689,
                                        -86.9524,
                                        18.9663,
                                        592.5901,
                                        5.1402,
                                        511.6966,
                                        314.4445,
                                    new SpatialReference(6,
                                            "ab",
                                            "consequuntur",
                                            "sit"),
                                        true,
                                        true),
                                    [4],
                                SpatialRelationship.Touches,
                                new TimeExtent(new DateTime(2009, 1, 20, 20, 12, 33),
                                        new DateTime(2001, 10, 12, 8, 20, 26)),
                                    QueryUnits.UsNauticalMiles,
                                    "City = 'Toronto'"))"
                            IncludedEffect="@([new Effect("nihil",
                                41001376.6099)])">
                        </FeatureEffect>
                        <GeoJSONLayerElevationInfo 
                            FeatureExpressionInfo="@(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "ut fuga earum"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(490.8937)"
                            Unit="@(ElevationUnit.Yards)">
                        </GeoJSONLayerElevationInfo>
                    </GeoJSONLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoJSONLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<GeoJSONLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geojson");
        var applyEditsMethodResult = await geoJSONLayer.ApplyEdits(new GeoJSONLayerApplyEditsEdits([new Graphic(new Extent(-64.8552,
                            31.0702,
                            -77.1805,
                            -70.5893,
                            757.9905,
                            475.1965,
                            879.9164,
                            242.4980,
                        new SpatialReference(8,
                                "pariatur",
                                "quisquam",
                                "soluta"),
                            true,
                            true),
                    new TextSymbol("dolorem et laudantium",
                        new MapColor(74, 112, 3),
                        new MapColor(19, 18, 173),
                            new Dimension(85.0359),
                        new MapFont(new Dimension(596.6797),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            771.5599,
                        new MapColor(174, 138, 79),
                        new MapColor(154, 98, 171),
                            18.2347,
                        HorizontalAlignment.Center,
                            true,
                            804.5507,
                            new Dimension(745.6614),
                            true),
                    new PopupTemplate("qui nam laborum",
                            "ut",
                            ["inventore",
                                "rerum"],
                        [new FieldInfo("status",
                                "maiores",
                                "eveniet",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("createdAt",
                                "tempore",
                                "eaque",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Max)],
                        [new RelationshipPopupContent("et ex facilis",
                                "deleniti ut",
                                2,
                                "odio",
                            [new RelatedRecordsInfoFieldOrder("fugit",
                                OrderBy.Desc)],
                                5)],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "createdAt",
                                "molestiae voluptatibus molestias",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "status",
                                "quidem natus id",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("autem ipsa aut",
                                "https://picsum.photos/640/480/?image=93",
                                "aee45ba5-9553-5636-cfc9-251445294c8a",
                                () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "cupiditate")]),
                        new AttributesDictionary(),
                        true,
                        "sunt",
                        "a",
                        new GraphicOrigin(Guid.NewGuid(),
                            "porro",
                            4)),
                new Graphic(new Point(12.1599,
                            -68.5997,
                            165.3890,
                            -29.0124,
                            244.6779,
                        new SpatialReference(2,
                                "aut",
                                "eum",
                                "assumenda"),
                            true,
                            true,
                            716.6480),
                    new TextSymbol("iure soluta ipsa",
                        new MapColor(222, 89, 230),
                        new MapColor(201, 190, 128),
                            new Dimension(250.5575),
                        new MapFont(new Dimension(882.1212),
                                "Palatino",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            152.5390,
                        new MapColor(164, 103, 140),
                        new MapColor(80, 57, 186),
                            173.8088,
                        HorizontalAlignment.Left,
                            true,
                            583.0741,
                            new Dimension(155.0623),
                            true),
                    new PopupTemplate("amet sit quo",
                            "nostrum",
                            ["sapiente"],
                        [new FieldInfo("createdAt",
                                "ratione",
                                "eos",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("group",
                                "dolores",
                                "beatae",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateShortTime24),
                                true,
                                true,
                            StatisticType.Count)],
                        [new RelationshipPopupContent("reprehenderit et nihil",
                                "temporibus rerum quibusdam",
                                5,
                                "maiores",
                            [new RelatedRecordsInfoFieldOrder("reprehenderit",
                                OrderBy.Asc),
                            new RelatedRecordsInfoFieldOrder("sunt",
                                OrderBy.Desc)],
                                3),
                        new FieldsPopupContent([new FieldInfo("password",
                                    "voluptate",
                                    "est",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("comment",
                                    "dolorem",
                                    "fuga",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.DayShortMonthYearShortTime24),
                                    true,
                                    true,
                                StatisticType.Min)],
                                "ut enim ab quia",
                                "reprehenderit harum unde")],
                        [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "name",
                                "suscipit aliquid dolorum",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "password",
                                "quia et possimus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("itaque aut odit",
                                "https://picsum.photos/640/480/?image=425",
                                "6ad12fdb-cdee-8ac6-e572-55cd9a471436",
                                () => { Console.WriteLine("dolorum"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "et")]),
                        new AttributesDictionary(),
                        true,
                        "ipsum",
                        "quibusdam",
                        new GraphicOrigin(Guid.NewGuid(),
                            "aliquam",
                            6))],
                [new Graphic(new Polygon([new MapPath([new MapPoint([382.7199]),
                            new MapPoint([512.2205,
                                403.7763])]),
                            new MapPath([new MapPoint([255.3370,
                                    479.1309])])],
                        new SpatialReference(7,
                                "voluptate",
                                "labore",
                                "blanditiis"),
                        new Point(132.0331,
                                62.3182,
                                -99.1545,
                                20.9421,
                                32.8910,
                            new SpatialReference(9,
                                    "quas",
                                    "ipsa",
                                    "architecto"),
                                true,
                                true,
                                775.7112),
                            true,
                            true,
                            true),
                    new TextSymbol("explicabo soluta impedit",
                        new MapColor(237, 59, 200),
                        new MapColor(208, 200, 195),
                            new Dimension(575.6616),
                        new MapFont(new Dimension(76.1671),
                                "Helvetica",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            223.5230,
                        new MapColor(115, 158, 111),
                        new MapColor(124, 135, 47),
                            358.2290,
                        HorizontalAlignment.Right,
                            true,
                            726.0504,
                            new Dimension(322.3989),
                            true),
                    new PopupTemplate("sunt repellendus sunt",
                            "voluptatem",
                            ["accusantium"],
                        [new FieldInfo("phone",
                                "dicta",
                                "molestiae",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Var)],
                        [new FieldsPopupContent([new FieldInfo("name",
                                    "facilis",
                                    "dignissimos",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("title",
                                    "quisquam",
                                    "accusamus",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "minima esse accusantium",
                                "deleniti est porro")],
                        [new ExpressionInfo("return $feature.Name;",
                                "avatar",
                                "est ullam possimus",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "group",
                                "harum non quo",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("rerum et sunt",
                                "https://picsum.photos/640/480/?image=105",
                                "1efcefc2-8354-7676-6479-8756d2dbe14c",
                                () => { Console.WriteLine("veniam"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "veniam")]),
                        new AttributesDictionary(),
                        true,
                        "deleniti",
                        "cumque",
                        new GraphicOrigin(Guid.NewGuid(),
                            "non",
                            9)),
                new Graphic(new Polygon([new MapPath([new MapPoint([982.9896,
                                245.0490])]),
                            new MapPath([new MapPoint([686.6613]),
                                new MapPoint([583.9387])])],
                        new SpatialReference(5,
                                "sunt",
                                "aspernatur",
                                "ea"),
                        new Point(103.4394,
                                76.5796,
                                31.8592,
                                -12.7254,
                                176.8721,
                            new SpatialReference(7,
                                    "nisi",
                                    "a",
                                    "optio"),
                                true,
                                true,
                                697.9606),
                            true,
                            true,
                            true),
                    new TextSymbol("ut eos iste",
                        new MapColor(84, 58, 186),
                        new MapColor(69, 8, 51),
                            new Dimension(746.7828),
                        new MapFont(new Dimension(380.5335),
                                "Arial",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            434.8532,
                        new MapColor(175, 45, 198),
                        new MapColor(4, 157, 130),
                            714.2763,
                        HorizontalAlignment.Right,
                            true,
                            206.1652,
                            new Dimension(364.8493),
                            true),
                    new PopupTemplate("qui nesciunt consequuntur",
                            "sint",
                            ["dolorem",
                                "perferendis"],
                        [new FieldInfo("title",
                                "expedita",
                                "veniam",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("updatedAt",
                                "repudiandae",
                                "laudantium",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Min)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "commodi",
                                    "rerum deleniti natus"))],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "createdAt",
                                "cum sint et",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "group",
                                "et aspernatur aut",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("eius qui quia",
                                "https://picsum.photos/640/480/?image=429",
                                "90e4e6ca-3c12-c55a-6349-9980f562caad",
                                () => { Console.WriteLine("fugiat"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "mollitia"),
                                new ActionButton("minus facilis qui",
                                    "https://picsum.photos/640/480/?image=217",
                                    "402dd4dd-8026-36fc-05e8-8885665d56aa",
                                    () => { Console.WriteLine("voluptate"); return Task.CompletedTask; },
                                    "token",
                                    true,
                                    true,
                                    true,
                                    "est")]),
                        new AttributesDictionary(),
                        true,
                        "consequuntur",
                        "eum",
                        new GraphicOrigin(Guid.NewGuid(),
                            "qui",
                            6))],
                    ["assumenda"],
                [new Graphic(new Extent(65.3902,
                            113.5243,
                            60.7345,
                            -38.9109,
                            185.4746,
                            416.5488,
                            491.4763,
                            738.5073,
                        new SpatialReference(5,
                                "labore",
                                "praesentium",
                                "sint"),
                            true,
                            true),
                    new TextSymbol("quidem quia ipsa",
                        new MapColor(4, 231, 10),
                        new MapColor(224, 63, 232),
                            new Dimension(940.4176),
                        new MapFont(new Dimension(33.1031),
                                "Bookman",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            952.4712,
                        new MapColor(121, 27, 191),
                        new MapColor(249, 96, 172),
                            167.4031,
                        HorizontalAlignment.Right,
                            true,
                            230.8883,
                            new Dimension(399.1173),
                            true),
                    new PopupTemplate("sequi reprehenderit quia",
                            "nihil",
                            ["ut",
                                "accusantium"],
                        [new FieldInfo("id",
                                "maiores",
                                "repellendus",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.ShortDateLeLongTime24),
                                true,
                                true,
                            StatisticType.Min)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "amet",
                                    "nobis molestias ad"))],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "token",
                                "tempore quos eos",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "title",
                                "ut dolor iste",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("sint ea dolorem",
                                "https://picsum.photos/640/480/?image=731",
                                "677d0cd3-6a20-ba98-53aa-29dd0fad3699",
                                () => { Console.WriteLine("eum"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "dolores")]),
                        new AttributesDictionary(),
                        true,
                        "omnis",
                        "id",
                        new GraphicOrigin(Guid.NewGuid(),
                            "facere",
                            6))]));
        Assert.IsNotNull(applyEditsMethodResult);
        var createPopupTemplateMethodResult = await geoJSONLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["qui"],
                    ["email",
                        "password"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await geoJSONLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await geoJSONLayer.GetField("group");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await geoJSONLayer.GetFieldDomain("email",
            new GeoJSONLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([13.1103,
                                636.9776]),
                            new MapPoint([611.8442,
                                989.8141])])],
                        new SpatialReference(6,
                                "eos",
                                "blanditiis",
                                "iste"),
                        new Point(-179.1622,
                                62.8819,
                                75.4713,
                                -16.8903,
                                154.6545,
                            new SpatialReference(1,
                                    "corrupti",
                                    "magnam",
                                    "et"),
                                true,
                                true,
                                470.1677),
                            true,
                            true,
                            true),
                    new TextSymbol("dolor nulla ea",
                        new MapColor(57, 215, 220),
                        new MapColor(66, 186, 88),
                            new Dimension(394.5816),
                        new MapFont(new Dimension(764.1056),
                                "Georgia",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            694.9786,
                        new MapColor(223, 161, 10),
                        new MapColor(213, 234, 119),
                            612.9882,
                        HorizontalAlignment.Right,
                            true,
                            229.6408,
                            new Dimension(460.8489),
                            true),
                    new PopupTemplate("delectus pariatur minima",
                            "consequatur",
                            ["voluptatem"],
                        [new FieldInfo("avatar",
                                "a",
                                "natus",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("group",
                                "non",
                                "quidem",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Count)],
                        [new FieldsPopupContent([new FieldInfo("name",
                                    "voluptatum",
                                    "vel",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.DayShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Stddev),
                            new FieldInfo("id",
                                    "molestiae",
                                    "architecto",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLongTime),
                                    true,
                                    true,
                                StatisticType.Count)],
                                "vel eos",
                                "neque cumque recusandae")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "title",
                                "vel doloremque iure",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("voluptates autem sapiente",
                                "https://picsum.photos/640/480/?image=632",
                                "61ce4de3-2cbd-fb2f-050c-d00603bd9a02",
                                () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                "name",
                                true,
                                true,
                                true,
                                "dolore"),
                                new ActionButton("blanditiis et mollitia",
                                    "https://picsum.photos/640/480/?image=267",
                                    "7ba868c2-b1b3-2bd8-9bcc-08b5dbbd62e8",
                                    () => { Console.WriteLine("autem"); return Task.CompletedTask; },
                                    "status",
                                    true,
                                    true,
                                    true,
                                    "earum")]),
                        new AttributesDictionary(),
                        true,
                        "et",
                        "debitis",
                        new GraphicOrigin(Guid.NewGuid(),
                            "tempora",
                            8))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await geoJSONLayer.QueryExtent(new Query([3],
                    true,
                    552.4056,
                    389.0882,
                    "9.1.7.4",
                new Polygon([new MapPath([new MapPoint([761.9704])]),
                        new MapPath([new MapPoint([508.4126])])],
                    new SpatialReference(6,
                            "error",
                            "voluptas",
                            "vero"),
                    new Point(-60.8676,
                            -13.9493,
                            -127.4024,
                            60.7970,
                            218.5918,
                        new SpatialReference(1,
                                "impedit",
                                "dolorem",
                                "illo"),
                            true,
                            true,
                            536.3360),
                        true,
                        true,
                        true),
                    1,
                    ["quibusdam",
                        "similique"],
                    "ipsa",
                    new DateTime(2017, 2, 5, 17, 28, 29),
                    69.9522,
                    2,
                    "ullam",
                    5),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await geoJSONLayer.QueryFeatureCount(new Query([1,
                    8],
                    true,
                    776.0003,
                    741.5455,
                    "9.8.7.8",
                new Polygon([new MapPath([new MapPoint([152.7587,
                            386.3859]),
                        new MapPoint([836.4198,
                            706.7696])])],
                    new SpatialReference(2,
                            "numquam",
                            "ab",
                            "magnam"),
                    new Point(25.5610,
                            -48.1923,
                            -93.5114,
                            32.8477,
                            579.3874,
                        new SpatialReference(8,
                                "deserunt",
                                "saepe",
                                "voluptas"),
                            true,
                            true,
                            824.5628),
                        true,
                        true,
                        true),
                    2,
                    ["est",
                        "temporibus"],
                    "totam",
                    new DateTime(2009, 1, 9, 4, 47, 39),
                    206.4431,
                    4,
                    "corporis",
                    9),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await geoJSONLayer.QueryFeatures(new Query([7,
                    4],
                    true,
                    856.9147,
                    268.3054,
                    "4.2.6.3",
                new Polyline([new MapPath([new MapPoint([485.0107])]),
                        new MapPath([new MapPoint([231.7362,
                                152.7681]),
                            new MapPoint([94.3504,
                                578.8065])])],
                    new SpatialReference(9,
                            "voluptatibus",
                            "quidem",
                            "dolorem"),
                        true,
                        true),
                    4,
                    ["dolor",
                        "odio"],
                    "ex",
                    new DateTime(2016, 10, 16, 15, 17, 57),
                    246.0666,
                    5,
                    "tenetur",
                    3),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await geoJSONLayer.QueryObjectIds(new Query([4],
                    true,
                    961.5395,
                    99.6757,
                    "3.2.9.5",
                new Extent(96.5796,
                        -24.5722,
                        25.4086,
                        -81.9331,
                        727.6983,
                        555.3221,
                        567.8807,
                        777.5789,
                    new SpatialReference(4,
                            "aut",
                            "aut",
                            "rerum"),
                        true,
                        true),
                    3,
                    ["nobis",
                        "est"],
                    "doloribus",
                    new DateTime(2012, 8, 20, 19, 19, 56),
                    843.6096,
                    2,
                    "maxime",
                    9),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await geoJSONLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoJSONLayer.SetListMode(testListMode);
        var listMode = await geoJSONLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.HardLight;
        await geoJSONLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoJSONLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GeoJSONLayerElevationInfo testElevationInfo = new GeoJSONLayerElevationInfo(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature.Population / $feature.Area;",
                        "mollitia est provident"),
                ElevationInfoMode.OnTheGround,
                    845.2622,
                ElevationUnit.DecimalDegrees);
        await geoJSONLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await geoJSONLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("nihil",
                    21733097.5618)],
                    true,
                new FeatureFilter(141.9654,
                    new Polyline([new MapPath([new MapPoint([346.9620])]),
                            new MapPath([new MapPoint([981.4763])])],
                        new SpatialReference(2,
                                "cum",
                                "quia",
                                "veritatis"),
                            true,
                            true),
                        [1],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2012, 1, 24, 19, 27, 24),
                            new DateTime(2000, 5, 24, 19, 8, 22)),
                        QueryUnits.Miles,
                        "Age > 21"),
                    [new Effect("rem",
                        33374558.5563)]);
        await geoJSONLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await geoJSONLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "avatar",
                    "perspiciatis",
                    "corporis natus dolore",
                    6,
                    true,
                    true,
                    new { Value = "sed" },
                FieldValueType.LocationOrPlaceName,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "category",
                    "autem",
                    "iusto ea tempore",
                    8,
                    true,
                    true,
                    new { Value = "iste" },
                FieldValueType.Binary,
                    new CodedValueDomain<string>())];
        await geoJSONLayer.SetFields(testFields);
        var fields = await geoJSONLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-75.1799,
                    92.8311,
                    6.3952,
                    54.7701,
                    944.0967,
                    23.0722,
                    282.9427,
                    204.4013,
                new SpatialReference(8,
                        "est",
                        "ab",
                        "ipsum"),
                    true,
                    true);
        await geoJSONLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoJSONLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Point;
        await geoJSONLayer.SetGeometryType(testGeometryType);
        var geometryType = await geoJSONLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowAlong,
                    "animi",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Parallel,
                    46619448.3172,
                    37500.3592,
                    true,
                    new Dimension(468.2351),
                new TextSymbol("earum enim nobis",
                    new MapColor(128, 41, 64),
                    new MapColor(165, 220, 78),
                        new Dimension(785.3107),
                    new MapFont(new Dimension(507.6027),
                            "Bookman",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        651.8042,
                    new MapColor(26, 224, 76),
                    new MapColor(132, 125, 106),
                        550.2690,
                    HorizontalAlignment.Center,
                        true,
                        503.9274,
                        new Dimension(168.5758),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await geoJSONLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await geoJSONLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("ipsa",
                SortOrder.Descending,
                    "tempore"),
            new OrderedLayerOrderBy("asperiores",
                SortOrder.Ascending,
                    "itaque")];
        await geoJSONLayer.SetOrderBy(testOrderBy);
        var orderBy = await geoJSONLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PopupTemplate testPopupTemplate = new PopupTemplate("et alias a",
                    "blanditiis",
                    ["consequatur",
                        "laudantium"],
                [new FieldInfo("title",
                        "et",
                        "et",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(7,
                            true,
                        DateFormat.ShortMonthYear),
                        true,
                        true,
                    StatisticType.Min)],
                [new AttachmentsPopupContent("amet provident est",
                        "aperiam voluptatum repellat nam",
                        AttachmentsPopupContentDisplayType.Preview)],
                [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "email",
                        "et ratione aut",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("var length = Geometry($feature).length; return length;",
                        "phone",
                        "commodi veritatis sit",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("consectetur velit qui",
                        "https://picsum.photos/640/480/?image=892",
                        "1c65c189-9dbf-d716-22d6-c2173ad6d64c",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "updatedAt",
                        true,
                        true,
                        true,
                        "saepe")]);
        await geoJSONLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await geoJSONLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        PortalItem testPortalItem = new PortalItem();
        await geoJSONLayer.SetPortalItem(testPortalItem);
        var portalItem = await geoJSONLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("eos officiis debitis",
                    new MapColor(186, 158, 175),
                    new MapColor(178, 145, 207),
                        new Dimension(749.4152),
                    new MapFont(new Dimension(599.8530),
                            "Bookman",
                        MapFontStyle.Normal,
                        FontWeight.Bold,
                        TextDecoration.None),
                        410.9382,
                    new MapColor(196, 109, 14),
                    new MapColor(144, 43, 36),
                        252.5853,
                    HorizontalAlignment.Center,
                        true,
                        967.8409,
                        new Dimension(285.7712),
                        true),
                    "non",
                [new RotationVariable("corrupti",
                    Axis.Tilt,
                    RotationType.Arithmetic,
                    new VisualVariableLegendOptions(true,
                            "aut non perferendis"),
                        "nihil",
                        "vero aut sequi")],
                new AuthoringInfo(ClassificationMethod.StandardDeviation,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(199, 147, 182),
                            new MapColor(167, 187, 104)),
                        new AlgorithmicColorRamp(Algorithm.CieLab,
                            new MapColor(42, 59, 52),
                            new MapColor(59, 207, 57))]),
                        800.7616,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(136.9509,
                                107.6791),
                        new AuthoringInfoField1ClassBreakInfos(927.9392,
                                999.0859)],
                            "quibusdam",
                            "quia",
                            "voluptate"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(517.0427,
                                9.0172)],
                            "reprehenderit",
                            "eveniet",
                            "rerum"),
                        ["sed",
                            "debitis"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "sint",
                        true,
                    LengthUnit.UsFeet,
                        527.6401,
                        409.4293,
                        747.4229,
                        749.8030));
        await geoJSONLayer.SetRenderer(testRenderer);
        var renderer = await geoJSONLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(5,
                    "ut",
                    "iusto",
                    "cum");
        await geoJSONLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await geoJSONLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("officiis fuga omnis",
                DrawingTool.Rectangle,
                    "email",
                new Graphic(new Polygon([new MapPath([new MapPoint([849.9993,
                                396.1775])]),
                            new MapPath([new MapPoint([303.4372,
                                    883.0220]),
                                new MapPoint([534.2886])])],
                        new SpatialReference(5,
                                "ea",
                                "et",
                                "quasi"),
                        new Point(143.0774,
                                -83.8543,
                                -110.5326,
                                14.7820,
                                997.1998,
                            new SpatialReference(4,
                                    "similique",
                                    "adipisci",
                                    "repellat"),
                                true,
                                true,
                                22.1746),
                            true,
                            true,
                            true),
                    new TextSymbol("sunt architecto sunt",
                        new MapColor(213, 33, 111),
                        new MapColor(170, 178, 172),
                            new Dimension(58.6677),
                        new MapFont(new Dimension(680.5012),
                                "Helvetica",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            625.2086,
                        new MapColor(23, 170, 146),
                        new MapColor(22, 241, 78),
                            81.7613,
                        HorizontalAlignment.Center,
                            true,
                            125.5169,
                            new Dimension(240.4200),
                            true),
                    new PopupTemplate("possimus labore facilis",
                            "enim",
                            ["qui"],
                        [new FieldInfo("name",
                                "earum",
                                "aut",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Min)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "fugiat",
                                    "non amet at")),
                        new AttachmentsPopupContent("nulla culpa nisi",
                                "possimus velit",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "token",
                                "architecto qui unde",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return Date();",
                                "token",
                                "laborum quas tempore",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("nobis nulla repellendus",
                                "https://picsum.photos/640/480/?image=393",
                                "e162ac81-d271-a5d3-c718-c3eddfd5ac01",
                                () => { Console.WriteLine("consequuntur"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "eveniet")]),
                        new AttributesDictionary(),
                        true,
                        "quam",
                        "velit",
                        new GraphicOrigin(Guid.NewGuid(),
                            "et",
                            2)),
                    new Thumbnail("beatae",
                        "earum",
                        36.5065,
                        187.6261)),
            new FeatureTemplate("nemo eveniet maxime",
                DrawingTool.LeftArrow,
                    "comment",
                new Graphic(new Polyline([new MapPath([new MapPoint([165.2107,
                                183.0035]),
                            new MapPoint([56.3524])]),
                            new MapPath([new MapPoint([365.2116,
                                    36.6110])])],
                        new SpatialReference(8,
                                "qui",
                                "ad",
                                "debitis"),
                            true,
                            true),
                    new TextSymbol("quibusdam voluptatem repellendus",
                        new MapColor(12, 89, 163),
                        new MapColor(187, 139, 107),
                            new Dimension(778.0011),
                        new MapFont(new Dimension(163.8081),
                                "Times New Roman",
                            MapFontStyle.Italic,
                            FontWeight.Normal,
                            TextDecoration.None),
                            303.0544,
                        new MapColor(23, 91, 128),
                        new MapColor(175, 0, 180),
                            982.1545,
                        HorizontalAlignment.Center,
                            true,
                            345.2789,
                            new Dimension(544.3839),
                            true),
                    new PopupTemplate("quisquam culpa reiciendis",
                            "nostrum",
                            ["est",
                                "hic"],
                        [new FieldInfo("group",
                                "aut",
                                "hic",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new TextPopupContent("dolores dolore excepturi")],
                        [new ExpressionInfo("return $feature.Name;",
                                "avatar",
                                "ullam dolorem numquam",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("eaque ipsam similique",
                                "https://picsum.photos/640/480/?image=556",
                                "c259b4c9-8b9a-ec4a-cb9f-498b4f150a3c",
                                () => { Console.WriteLine("ea"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "harum")]),
                        new AttributesDictionary(),
                        true,
                        "distinctio",
                        "soluta",
                        new GraphicOrigin(Guid.NewGuid(),
                            "ducimus",
                            3)),
                    new Thumbnail("voluptatem",
                        "quae",
                        125.5977,
                        49.8879))];
        await geoJSONLayer.SetTemplates(testTemplates);
        var templates = await geoJSONLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2022, 10, 26, 1, 55, 3),
                    new DateTime(2003, 8, 26, 8, 53, 2));
        await geoJSONLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await geoJSONLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("laborum",
                    "sapiente",
                new TimeExtent(new DateTime(2003, 3, 18, 21, 19, 23),
                        new DateTime(2012, 3, 17, 3, 34, 58)),
                new TimeInterval(TemporalTime.Milliseconds,
                        418.3556),
                    [new DateTime(2019, 9, 25, 14, 15, 41)],
                    "Asia/Kolkata",
                    "dolor");
        await geoJSONLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await geoJSONLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Centuries,
                    881.8559);
        await geoJSONLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await geoJSONLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2020, 5, 11, 14, 19, 9),
                    new DateTime(2002, 9, 24, 22, 49, 35));
        await geoJSONLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoJSONLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
