@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoJSONLayer(Action renderHandler)
    {
        GeoJSONLayer? geoJSONLayer = null;

        GeoJSONLayerEditsEvent? editsResult = null;
        void OnEdits(GeoJSONLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoJSONLayer 
                        Url="@("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson")"
                        Copyright="@("animi")"
                        Title="@("earum architecto reiciendis")"
                        Opacity="@(0.2519)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.VividLight)"
                        DefinitionExpression="@("dignissimos")"
                        DisplayField="@("quia")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("aut",
                            20761662.8925))"
                        GeometryType="@(SimpleGeometryType.Polygon)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(23250013.5542)"
                        MinScale="@(13995.9981)"
                        ObjectIdField="@("ducimus")"
                        OutFields="@(["nobis",
                            "incidunt"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(473.3159)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Decades)"
                            Value="@(442.5564)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("sed")"
                            EndField="@("libero")"
                            Stops="@([new DateTime(2001, 5, 11, 3, 26, 21),
                                new DateTime(2018, 8, 3, 4, 54, 49)])"
                            TimeZone="@("Asia/Taipei")"
                            TrackIdField="@("fuga")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Centuries)"
                                Value="@(26.7751)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2022, 5, 15, 8, 8, 23))"
                                End="@(new DateTime(2016, 10, 11, 7, 25, 20))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2009, 7, 8, 16, 54, 4))"
                            End="@(new DateTime(2013, 9, 17, 7, 29, 14))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("nisi sed dolore")"
                            DrawingTool="@(DrawingTool.Rectangle)"
                            Name="@("group")"
                            Prototype="@(new Graphic(new Extent(-116.7544,
                                        166.2663,
                                        -4.0836,
                                        -47.8865,
                                        277.6671,
                                        493.2616,
                                        200.7726,
                                        997.1420,
                                    new SpatialReference(5,
                                            "corporis",
                                            "quo",
                                            "quis"),
                                        true,
                                        true),
                                new TextSymbol("tempore tenetur quibusdam",
                                    new MapColor(17, 78, 134),
                                    new MapColor(187, 44, 77),
                                        new Dimension(428.4189),
                                    new MapFont(new Dimension(430.2121),
                                            "Bookman",
                                        MapFontStyle.Oblique,
                                        FontWeight.Bolder,
                                        TextDecoration.LineThrough),
                                        209.8986,
                                    new MapColor(202, 47, 137),
                                    new MapColor(252, 41, 218),
                                        744.3482,
                                    HorizontalAlignment.Left,
                                        true,
                                        470.9661,
                                        new Dimension(568.2637),
                                        true),
                                new PopupTemplate("ipsam alias ut",
                                        "sint",
                                        ["nisi",
                                            "consequatur"],
                                    [new FieldInfo("updatedAt",
                                            "voluptatem",
                                            "et",
                                        StringFieldOption.TextBox,
                                        new FieldInfoFormat(5,
                                                true,
                                            DateFormat.ShortDateShortTime),
                                            true,
                                            true,
                                        StatisticType.Min)],
                                    [new RelationshipPopupContent("quisquam est quaerat",
                                            "velit pariatur assumenda",
                                            7,
                                            "corporis",
                                        [new RelatedRecordsInfoFieldOrder("nihil",
                                            OrderBy.Asc)],
                                            7)],
                                    [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                            "createdAt",
                                            "nihil voluptatem est",
                                            ExpressionInfoReturnType.String),
                                    new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                            "updatedAt",
                                            "occaecati tenetur est",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("distinctio quam velit",
                                            "https://picsum.photos/640/480/?image=1042",
                                            "d95391e3-eaa1-8f5b-4c28-57412e55e77e",
                                            () => { Console.WriteLine("maiores"); return Task.CompletedTask; },
                                            "phone",
                                            true,
                                            true,
                                            true,
                                            "aspernatur"),
                                            new ActionButton("quisquam occaecati quos",
                                                "https://picsum.photos/640/480/?image=588",
                                                "9f87d69b-5441-2ef9-7799-74c48b7917ce",
                                                () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                                                "token",
                                                true,
                                                true,
                                                true,
                                                "eaque")]),
                                    new AttributesDictionary(),
                                    true,
                                    "amet",
                                    "ratione",
                                    new GraphicOrigin(Guid.NewGuid(),
                                        "nesciunt",
                                        5)))"
                            Thumbnail="@(new Thumbnail("iste",
                                "illum",
                                294.3059,
                                295.4225))">
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(3)"
                            ImageCoordinateSystem="@("eligendi")"
                            Wkt="@("eum")"
                            Wkt2="@("magni")">
                        </SpatialReference>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.DefinedInterval,
                                new AlgorithmicColorRamp(Algorithm.CieLab,
                                    new MapColor(213, 137, 21),
                                    new MapColor(243, 21, 229)),
                                    51.8970,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(102.3917,
                                            542.9212)],
                                        "enim",
                                        "eos",
                                        "ipsum"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(727.5454,
                                            416.2229)],
                                        "soluta",
                                        "veritatis",
                                        "voluptatem"),
                                    ["veritatis",
                                        "incidunt"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "minima",
                                    true,
                                LengthUnit.Decimeters,
                                    817.6896,
                                    631.0488,
                                    448.7661,
                                    624.0224))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("est consequatur natus")"
                            StringContent="@("voluptatem")"
                            OutFields="@(["nobis",
                                "voluptates"])"
                            FieldInfos="@([new FieldInfo("status",
                                    "possimus",
                                    "sunt",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new FieldsPopupContent([new FieldInfo("updatedAt",
                                        "fugit",
                                        "impedit",
                                    StringFieldOption.RichText,
                                    new FieldInfoFormat(3,
                                            true,
                                        DateFormat.LongMonthDayYear),
                                        true,
                                        true,
                                    StatisticType.Avg)],
                                    "voluptas ut velit",
                                    "et repellat et")])"
                            ExpressionInfos="@([new ExpressionInfo("return $feature['FieldName'];",
                                    "title",
                                    "eaque delectus est",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                    "category",
                                    "provident eum aut",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("odio dolores amet",
                                "https://picsum.photos/640/480/?image=322",
                                "320140f3-b673-9d1e-aff2-98a1e5ea9993",
                                () => { Console.WriteLine("eum"); return Task.CompletedTask; },
                                "id",
                                true,
                                true,
                                true,
                                "rerum"),
                                new ActionButton("eos nihil quas",
                                    "https://picsum.photos/640/480/?image=1031",
                                    "1a5a070e-36c4-8c94-6368-67bf11428d68",
                                    () => { Console.WriteLine("mollitia"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "nulla")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("enim")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("totam")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.AlwaysHorizontal)"
                            LabelExpression="@("ipsa")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.Static)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(20034436.9295)"
                            MinScale="@(14810.6599)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(291.3835))"
                            Symbol="@(new TextSymbol("similique est eius",
                                new MapColor(208, 178, 103),
                                new MapColor(39, 51, 143),
                                    new Dimension(948.8220),
                                new MapFont(new Dimension(477.0409),
                                        "Courier New",
                                    MapFontStyle.Italic,
                                    FontWeight.Lighter,
                                    TextDecoration.None),
                                    813.7813,
                                new MapColor(185, 130, 145),
                                new MapColor(55, 24, 143),
                                    546.8609,
                                HorizontalAlignment.Left,
                                    true,
                                    810.3638,
                                    new Dimension(803.4246),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Name = 'John Doe'")">
                        </Label>
                        <Extent 
                            Xmax="@(-175.7097)"
                            Xmin="@(-78.1757)"
                            Ymax="@(-14.9219)"
                            Ymin="@(64.5329)"
                            Zmax="@(186.0619)"
                            Zmin="@(290.9851)"
                            Mmax="@(985.4037)"
                            Mmin="@(424.6451)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(3)"
                                ImageCoordinateSystem="@("et")"
                                Wkt="@("sit")"
                                Wkt2="@("sed")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("group")"
                            Alias="@("sed")"
                            Description="@("corrupti sit maxime")"
                            Length="@(8)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "enim" })"
                            ValueType="@(FieldValueType.LocationOrPlaceName)"
                            Domain="@(new CodedValueDomain<string>())">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("vero",
                                24871502.7556)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(254.4791,
                                new Polygon([new MapPath([new MapPoint([120.6864])])],
                                    new SpatialReference(3,
                                            "amet",
                                            "quisquam",
                                            "sit"),
                                    new Point(-114.2624,
                                            31.0650,
                                            13.4320,
                                            -49.9769,
                                            955.9326,
                                        new SpatialReference(4,
                                                "corrupti",
                                                "praesentium",
                                                "porro"),
                                            true,
                                            true,
                                            723.2556),
                                        true,
                                        true,
                                        true),
                                    [4],
                                SpatialRelationship.Intersects,
                                new TimeExtent(new DateTime(2019, 6, 10, 18, 50, 23),
                                        new DateTime(2001, 10, 2, 10, 2, 45)),
                                    QueryUnits.Miles,
                                    "Street = '123 Main St.'"))"
                            IncludedEffect="@([new Effect("est",
                                8341537.1818)])">
                        </FeatureEffect>
                        <GeoJSONLayerElevationInfo 
                            FeatureExpressionInfo="@(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature.Population / $feature.Area;",
                                    "doloremque inventore dolores"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(73.0585)"
                            Unit="@(ElevationUnit.Inches)">
                        </GeoJSONLayerElevationInfo>
                    </GeoJSONLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoJSONLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<GeoJSONLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geojson");
        var applyEditsMethodResult = await geoJSONLayer.ApplyEdits(new GeoJSONLayerApplyEditsEdits([new Graphic(new Point(85.6884,
                            10.0212,
                            152.2170,
                            32.7892,
                            490.6727,
                        new SpatialReference(1,
                                "sapiente",
                                "assumenda",
                                "dolor"),
                            true,
                            true,
                            644.7052),
                    new TextSymbol("iure amet rem",
                        new MapColor(102, 51, 70),
                        new MapColor(195, 193, 28),
                            new Dimension(119.5839),
                        new MapFont(new Dimension(525.4244),
                                "Helvetica",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            607.6669,
                        new MapColor(86, 200, 214),
                        new MapColor(161, 3, 192),
                            567.8698,
                        HorizontalAlignment.Center,
                            true,
                            844.3488,
                            new Dimension(636.4460),
                            true),
                    new PopupTemplate("eos quibusdam dolores",
                            "laudantium",
                            ["corrupti"],
                        [new FieldInfo("id",
                                "sed",
                                "numquam",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.ShortDate),
                                true,
                                true,
                            StatisticType.Max)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "eum",
                                    "facilis similique quos")),
                        new RelationshipPopupContent("unde quia voluptas",
                                "sunt eligendi",
                                4,
                                "est",
                            [new RelatedRecordsInfoFieldOrder("voluptatibus",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("sint",
                                OrderBy.Desc)],
                                1)],
                        [new ExpressionInfo("return Date();",
                                "avatar",
                                "qui placeat mollitia",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "createdAt",
                                "ea expedita sunt",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("molestias est exercitationem",
                                "https://picsum.photos/640/480/?image=603",
                                "56f71254-b4c5-b4cd-79b1-12d0666ccbea",
                                () => { Console.WriteLine("quas"); return Task.CompletedTask; },
                                "password",
                                true,
                                true,
                                true,
                                "non")]),
                        new AttributesDictionary(),
                        true,
                        "quod",
                        "amet",
                        new GraphicOrigin(Guid.NewGuid(),
                            "nam",
                            6)),
                new Graphic(new Polyline([new MapPath([new MapPoint([442.6310]),
                            new MapPoint([785.1272])]),
                            new MapPath([new MapPoint([373.0975]),
                                new MapPoint([352.0168,
                                    428.4611])])],
                        new SpatialReference(9,
                                "et",
                                "libero",
                                "rerum"),
                            true,
                            true),
                    new TextSymbol("repudiandae quasi laudantium",
                        new MapColor(127, 238, 152),
                        new MapColor(234, 84, 118),
                            new Dimension(990.0255),
                        new MapFont(new Dimension(593.0997),
                                "Courier New",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            754.1238,
                        new MapColor(194, 24, 222),
                        new MapColor(75, 191, 51),
                            711.1760,
                        HorizontalAlignment.Right,
                            true,
                            252.0697,
                            new Dimension(486.2563),
                            true),
                    new PopupTemplate("eos unde odit",
                            "mollitia",
                            ["ducimus"],
                        [new FieldInfo("category",
                                "omnis",
                                "qui",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Count),
                        new FieldInfo("name",
                                "non",
                                "aut",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new RelationshipPopupContent("veniam aliquid quis",
                                "et magnam deserunt aperiam",
                                4,
                                "et",
                            [new RelatedRecordsInfoFieldOrder("culpa",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("rerum",
                                OrderBy.Desc)],
                                3)],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "avatar",
                                "nobis sit ad",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "createdAt",
                                "praesentium voluptatem soluta",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("nemo sapiente fugit",
                                "https://picsum.photos/640/480/?image=136",
                                "42e57421-8e05-f735-fec2-c304d65b6d0b",
                                () => { Console.WriteLine("odit"); return Task.CompletedTask; },
                                "email",
                                true,
                                true,
                                true,
                                "dignissimos")]),
                        new AttributesDictionary(),
                        true,
                        "in",
                        "in",
                        new GraphicOrigin(Guid.NewGuid(),
                            "tempore",
                            7))],
                [new Graphic(new Point(21.0060,
                            40.9112,
                            141.2634,
                            -59.5940,
                            437.5433,
                        new SpatialReference(5,
                                "ut",
                                "aut",
                                "est"),
                            true,
                            true,
                            98.5007),
                    new TextSymbol("et ab sed",
                        new MapColor(113, 63, 126),
                        new MapColor(3, 184, 4),
                            new Dimension(365.9477),
                        new MapFont(new Dimension(537.3818),
                                "Courier New",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            988.4652,
                        new MapColor(244, 127, 243),
                        new MapColor(165, 187, 11),
                            957.6392,
                        HorizontalAlignment.Left,
                            true,
                            632.6765,
                            new Dimension(405.0854),
                            true),
                    new PopupTemplate("non minus repellendus",
                            "eligendi",
                            ["dolores"],
                        [new FieldInfo("comment",
                                "inventore",
                                "qui",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Avg),
                        new FieldInfo("title",
                                "recusandae",
                                "dolorum",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new RelationshipPopupContent("eius exercitationem doloremque",
                                "optio quidem accusantium praesentium",
                                7,
                                "perferendis",
                            [new RelatedRecordsInfoFieldOrder("dolore",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("quas",
                                OrderBy.Desc)],
                                7)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "email",
                                "quia voluptatem natus",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "status",
                                "quod dolor doloribus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("illum aut recusandae",
                                "https://picsum.photos/640/480/?image=368",
                                "aa4a502a-23e2-c84a-eb46-cd059cb3442f",
                                () => { Console.WriteLine("molestiae"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "incidunt"),
                                new ActionButton("dolorem rerum perferendis",
                                    "https://picsum.photos/640/480/?image=520",
                                    "98766fa9-96e4-eadd-6b14-922014c37bc7",
                                    () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                    "phone",
                                    true,
                                    true,
                                    true,
                                    "consequatur")]),
                        new AttributesDictionary(),
                        true,
                        "ullam",
                        "atque",
                        new GraphicOrigin(Guid.NewGuid(),
                            "dolores",
                            9)),
                new Graphic(new Point(7.2460,
                            9.5524,
                            157.1982,
                            -15.6933,
                            435.4846,
                        new SpatialReference(3,
                                "et",
                                "blanditiis",
                                "quis"),
                            true,
                            true,
                            624.8200),
                    new TextSymbol("quia assumenda omnis",
                        new MapColor(171, 56, 141),
                        new MapColor(45, 96, 7),
                            new Dimension(739.7119),
                        new MapFont(new Dimension(455.4512),
                                "Arial",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.None),
                            717.4603,
                        new MapColor(161, 204, 33),
                        new MapColor(112, 126, 63),
                            499.0991,
                        HorizontalAlignment.Right,
                            true,
                            48.4187,
                            new Dimension(724.2784),
                            true),
                    new PopupTemplate("aut ea et",
                            "iste",
                            ["dignissimos",
                                "molestiae"],
                        [new FieldInfo("status",
                                "rerum",
                                "aut",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new FieldsPopupContent([new FieldInfo("status",
                                    "nesciunt",
                                    "doloribus",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Min)],
                                "sit doloribus",
                                "consequatur esse qui"),
                        new FieldsPopupContent([new FieldInfo("name",
                                    "quia",
                                    "ut",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.DayShortMonthYearLongTime),
                                    true,
                                    true,
                                StatisticType.Sum)],
                                "fuga amet",
                                "quisquam nulla ipsa")],
                        [new ExpressionInfo("return Date();",
                                "status",
                                "dolorem fuga est",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "updatedAt",
                                "reprehenderit ut totam",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("excepturi cupiditate odio",
                                "https://picsum.photos/640/480/?image=981",
                                "aa3c19ee-2bfe-2048-5673-704be7f005e3",
                                () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                "phone",
                                true,
                                true,
                                true,
                                "facilis")]),
                        new AttributesDictionary(),
                        true,
                        "voluptatem",
                        "quasi",
                        new GraphicOrigin(Guid.NewGuid(),
                            "provident",
                            8))],
                    ["optio"],
                [new Graphic(new Polyline([new MapPath([new MapPoint([963.7057])])],
                        new SpatialReference(2,
                                "consequatur",
                                "fugit",
                                "voluptatem"),
                            true,
                            true),
                    new TextSymbol("alias est facilis",
                        new MapColor(217, 160, 40),
                        new MapColor(55, 120, 235),
                            new Dimension(218.6697),
                        new MapFont(new Dimension(105.4280),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            557.9375,
                        new MapColor(88, 127, 115),
                        new MapColor(102, 106, 252),
                            295.3300,
                        HorizontalAlignment.Right,
                            true,
                            189.1550,
                            new Dimension(965.4850),
                            true),
                    new PopupTemplate("nam vel soluta",
                            "molestias",
                            ["ducimus",
                                "ad"],
                        [new FieldInfo("password",
                                "et",
                                "ducimus",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("title",
                                "rem",
                                "illum",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.DayShortMonthYear),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new FieldsPopupContent([new FieldInfo("avatar",
                                    "vel",
                                    "modi",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(3,
                                        true,
                                    DateFormat.LongMonthDayYear),
                                    true,
                                    true,
                                StatisticType.Sum)],
                                "occaecati illum id",
                                "quo doloremque eos"),
                        new FieldsPopupContent([new FieldInfo("name",
                                    "explicabo",
                                    "quis",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.Year),
                                    true,
                                    true,
                                StatisticType.Stddev)],
                                "non voluptatem",
                                "illum accusamus et")],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "id",
                                "culpa ut impedit",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("consequatur dolorem totam",
                                "https://picsum.photos/640/480/?image=0",
                                "5cc79621-8214-2a99-8432-e5fe3d607fcf",
                                () => { Console.WriteLine("molestiae"); return Task.CompletedTask; },
                                "avatar",
                                true,
                                true,
                                true,
                                "tempora"),
                                new ActionButton("architecto quisquam id",
                                    "https://picsum.photos/640/480/?image=102",
                                    "36c23318-a8d0-cb98-d83e-3e5a0c3f4e72",
                                    () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "eos")]),
                        new AttributesDictionary(),
                        true,
                        "velit",
                        "aut",
                        new GraphicOrigin(Guid.NewGuid(),
                            "nemo",
                            3))]));
        Assert.IsNotNull(applyEditsMethodResult);
        var createPopupTemplateMethodResult = await geoJSONLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["rem",
                    "dolor"],
                    ["name"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await geoJSONLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await geoJSONLayer.GetField("createdAt");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await geoJSONLayer.GetFieldDomain("token",
            new GeoJSONLayerGetFieldDomainOptions(new Graphic(new Extent(-70.8067,
                            -33.4842,
                            -16.8137,
                            -69.9145,
                            140.1266,
                            384.9869,
                            739.6139,
                            71.0181,
                        new SpatialReference(1,
                                "aliquid",
                                "minima",
                                "dolorum"),
                            true,
                            true),
                    new TextSymbol("rerum et aspernatur",
                        new MapColor(27, 70, 104),
                        new MapColor(209, 51, 214),
                            new Dimension(839.2023),
                        new MapFont(new Dimension(323.2258),
                                "Verdana",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            348.9756,
                        new MapColor(243, 68, 251),
                        new MapColor(152, 81, 247),
                            355.2962,
                        HorizontalAlignment.Left,
                            true,
                            630.9686,
                            new Dimension(25.4600),
                            true),
                    new PopupTemplate("officiis quisquam ullam",
                            "totam",
                            ["amet"],
                        [new FieldInfo("password",
                                "perferendis",
                                "sequi",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Count)],
                        [new FieldsPopupContent([new FieldInfo("comment",
                                    "non",
                                    "ut",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(9,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Min)],
                                "in qui labore",
                                "in laboriosam iure")],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "name",
                                "ut molestiae molestiae",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("voluptas unde doloremque",
                                "https://picsum.photos/640/480/?image=873",
                                "c760c6eb-5d2b-f856-2e14-563e1e7b7c2a",
                                () => { Console.WriteLine("maxime"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "laborum")]),
                        new AttributesDictionary(),
                        true,
                        "voluptatum",
                        "quia",
                        new GraphicOrigin(Guid.NewGuid(),
                            "id",
                            2))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await geoJSONLayer.QueryExtent(new Query([1,
                    4],
                    true,
                    19.4011,
                    859.2401,
                    "5.6.4.4",
                new Point(-138.5841,
                        -24.4891,
                        -153.6671,
                        32.0568,
                        583.2381,
                    new SpatialReference(6,
                            "ex",
                            "qui",
                            "laboriosam"),
                        true,
                        true,
                        805.1555),
                    7,
                    ["consequatur"],
                    "deserunt",
                    new DateTime(2010, 2, 16, 20, 28, 34),
                    522.4768,
                    9,
                    "asperiores",
                    2),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await geoJSONLayer.QueryFeatureCount(new Query([5,
                    2],
                    true,
                    25.7012,
                    602.5801,
                    "6.9.1.6",
                new Polyline([new MapPath([new MapPoint([19.6310,
                            852.0040])]),
                        new MapPath([new MapPoint([951.7626,
                                153.4602])])],
                    new SpatialReference(4,
                            "dolor",
                            "amet",
                            "temporibus"),
                        true,
                        true),
                    3,
                    ["illo",
                        "officia"],
                    "cupiditate",
                    new DateTime(2018, 9, 22, 7, 25, 49),
                    353.5883,
                    2,
                    "est",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await geoJSONLayer.QueryFeatures(new Query([8,
                    1],
                    true,
                    766.8445,
                    693.2320,
                    "3.1.3.5",
                new Polygon([new MapPath([new MapPoint([741.2771]),
                        new MapPoint([255.9646,
                            575.7395])])],
                    new SpatialReference(2,
                            "omnis",
                            "porro",
                            "autem"),
                    new Point(122.4486,
                            84.3822,
                            -59.0431,
                            -76.7687,
                            78.3308,
                        new SpatialReference(4,
                                "id",
                                "numquam",
                                "quas"),
                            true,
                            true,
                            961.3214),
                        true,
                        true,
                        true),
                    2,
                    ["eos"],
                    "est",
                    new DateTime(2021, 3, 24, 18, 43, 16),
                    454.5974,
                    9,
                    "est",
                    8),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await geoJSONLayer.QueryObjectIds(new Query([7,
                    7],
                    true,
                    423.3453,
                    224.2585,
                    "0.1.7.0",
                new Polygon([new MapPath([new MapPoint([757.8879])])],
                    new SpatialReference(5,
                            "deleniti",
                            "optio",
                            "mollitia"),
                    new Point(176.7340,
                            51.9925,
                            -52.8546,
                            -29.5262,
                            644.1228,
                        new SpatialReference(8,
                                "est",
                                "voluptatum",
                                "dignissimos"),
                            true,
                            true,
                            958.2339),
                        true,
                        true,
                        true),
                    4,
                    ["suscipit"],
                    "sit",
                    new DateTime(2010, 11, 20, 9, 36, 46),
                    634.6262,
                    7,
                    "doloribus",
                    2),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await geoJSONLayer.Refresh();
        ListMode testListMode = ListMode.Hide;
        await geoJSONLayer.SetListMode(testListMode);
        var listMode = await geoJSONLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Difference;
        await geoJSONLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoJSONLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GeoJSONLayerElevationInfo testElevationInfo = new GeoJSONLayerElevationInfo(new GeoJSONLayerElevationInfoFeatureExpressionInfo("var length = Geometry($feature).length; return length;",
                        "voluptates recusandae et"),
                ElevationInfoMode.RelativeToGround,
                    68.2361,
                ElevationUnit.Inches);
        await geoJSONLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await geoJSONLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("doloremque",
                    30337371.8237),
                    new Effect("dolorem",
                        9273023.5819)],
                    true,
                new FeatureFilter(316.8109,
                    new Point(-70.0342,
                            68.0052,
                            -42.5228,
                            -34.7753,
                            479.5650,
                        new SpatialReference(2,
                                "et",
                                "quis",
                                "dolore"),
                            true,
                            true,
                            499.8929),
                        [8],
                    SpatialRelationship.Touches,
                    new TimeExtent(new DateTime(2016, 3, 9, 9, 34, 30),
                            new DateTime(2001, 11, 2, 21, 8, 13)),
                        QueryUnits.Miles,
                        "Name = 'John Doe'"),
                    [new Effect("sequi",
                        45541827.6693)]);
        await geoJSONLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await geoJSONLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "password",
                    "corrupti",
                    "enim voluptas soluta",
                    3,
                    true,
                    true,
                    new { Value = "praesentium" },
                FieldValueType.Measurement,
                    new CodedValueDomain<string>()),
            new Field(default,
                    "id",
                    "adipisci",
                    "saepe nihil iusto accusamus",
                    9,
                    true,
                    true,
                    new { Value = "magni" },
                FieldValueType.Coordinate,
                    new CodedValueDomain<string>())];
        await geoJSONLayer.SetFields(testFields);
        var fields = await geoJSONLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(127.9877,
                    26.9649,
                    46.7263,
                    -86.3793,
                    480.0063,
                    50.5166,
                    258.3580,
                    186.6254,
                new SpatialReference(8,
                        "consequatur",
                        "aspernatur",
                        "est"),
                    true,
                    true);
        await geoJSONLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoJSONLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Polygon;
        await geoJSONLayer.SetGeometryType(testGeometryType);
        var geometryType = await geoJSONLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowCenter,
                    "saepe",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    11550382.9820,
                    19243.0375,
                    true,
                    new Dimension(410.1079),
                new TextSymbol("qui tempora eius",
                    new MapColor(186, 227, 36),
                    new MapColor(157, 19, 195),
                        new Dimension(276.5555),
                    new MapFont(new Dimension(958.2864),
                            "Times New Roman",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.None),
                        217.7303,
                    new MapColor(2, 212, 12),
                    new MapColor(32, 85, 89),
                        811.5131,
                    HorizontalAlignment.Right,
                        true,
                        993.2241,
                        new Dimension(72.7334),
                        true),
                    true,
                    "City = 'Toronto'"),
            new Label(LabelPlacement.CenterAlong,
                    "quam",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    7446382.7610,
                    1695.5451,
                    true,
                    new Dimension(105.5077),
                new TextSymbol("ab est eaque",
                    new MapColor(85, 75, 0),
                    new MapColor(18, 170, 123),
                        new Dimension(593.7047),
                    new MapFont(new Dimension(915.7594),
                            "Verdana",
                        MapFontStyle.Oblique,
                        FontWeight.Bolder,
                        TextDecoration.Underline),
                        102.6332,
                    new MapColor(140, 120, 134),
                    new MapColor(20, 94, 80),
                        903.0329,
                    HorizontalAlignment.Center,
                        true,
                        336.3421,
                        new Dimension(668.2090),
                        true),
                    true,
                    "Name = 'John Doe'")];
        await geoJSONLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await geoJSONLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("est",
                SortOrder.Ascending,
                    "enim")];
        await geoJSONLayer.SetOrderBy(testOrderBy);
        var orderBy = await geoJSONLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PopupTemplate testPopupTemplate = new PopupTemplate("mollitia in dolores",
                    "molestiae",
                    ["distinctio"],
                [new FieldInfo("token",
                        "ex",
                        "ipsa",
                    StringFieldOption.TextArea,
                    new FieldInfoFormat(4,
                            true,
                        DateFormat.LongDateLongTime),
                        true,
                        true,
                    StatisticType.Var)],
                [new RelationshipPopupContent("nesciunt similique possimus",
                        "ut et ut velit",
                        2,
                        "architecto",
                    [new RelatedRecordsInfoFieldOrder("autem",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("saepe",
                        OrderBy.Desc)],
                        4),
                new TextPopupContent("fugiat labore incidunt")],
                [new ExpressionInfo("return Date();",
                        "password",
                        "quidem ea delectus",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("iure cupiditate dolorem",
                        "https://picsum.photos/640/480/?image=64",
                        "97002acd-712c-852a-a2ef-76e15f01de40",
                        () => { Console.WriteLine("et"); return Task.CompletedTask; },
                        "id",
                        true,
                        true,
                        true,
                        "et")]);
        await geoJSONLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await geoJSONLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        PortalItem testPortalItem = new PortalItem();
        await geoJSONLayer.SetPortalItem(testPortalItem);
        var portalItem = await geoJSONLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new UniqueValueRenderer(new AuthoringInfo(ClassificationMethod.NaturalBreaks,
                    new AlgorithmicColorRamp(Algorithm.Hsv,
                        new MapColor(86, 254, 190),
                        new MapColor(162, 249, 31)),
                        763.4952,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(134.4823,
                                46.9344)],
                            "mollitia",
                            "nesciunt",
                            "perspiciatis"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(430.1100,
                                258.5413)],
                            "rerum",
                            "et",
                            "nihil"),
                        ["vel"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "consectetur",
                        true,
                    LengthUnit.Millimeters,
                        329.4775,
                        328.6272,
                        430.6758,
                        823.3235),
                new PictureFillSymbol("https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1",
                    new Dimension(266.0180),
                    new Dimension(177.7149),
                    new Dimension(37.4242),
                    new Dimension(738.5045),
                    119.1039,
                    -80.0940,
                    new Outline(new MapColor(107, 48, 59),
                        new Dimension(63.4737),
                        SimpleLineSymbolStyle.ShortDashDotDot,
                        Cap.Butt,
                        Join.Round,
                        new LineSymbolMarker(new MapColor(78, 50, 45),
                            LinePlacement.Begin,
                            LineSymbolMarkerStyle.Diamond),
                        665.7276),
                    new MapColor(14, 122, 196)),
                    "earum",
                    new DefaultSymbol(),
                    "rerum",
                    "vitae",
                    "ut",
                    "velit",
                new UniqueValueRendererLegendOptions("adipisci dolores sit"),
                    true,
                [new UniqueValueGroup([new UniqueValueClass("praesentium",
                        new TextSymbol("suscipit dolorum qui",
                            new MapColor(189, 104, 214),
                            new MapColor(29, 225, 169),
                                new Dimension(573.2277),
                            new MapFont(new Dimension(163.7613),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Bolder,
                                TextDecoration.None),
                                671.3254,
                            new MapColor(111, 188, 79),
                            new MapColor(29, 220, 128),
                                460.8139,
                            HorizontalAlignment.Left,
                                true,
                                593.4941,
                                new Dimension(824.3364),
                                true),
                        [new UniqueValue("sequi",
                                "earum",
                                "voluptatem")]),
                    new UniqueValueClass("non",
                        new TextSymbol("quaerat autem in",
                            new MapColor(251, 56, 13),
                            new MapColor(186, 207, 89),
                                new Dimension(41.5067),
                            new MapFont(new Dimension(814.5631),
                                    "Arial",
                                MapFontStyle.Normal,
                                FontWeight.Normal,
                                TextDecoration.Underline),
                                191.1360,
                            new MapColor(2, 184, 156),
                            new MapColor(10, 78, 189),
                                840.2769,
                            HorizontalAlignment.Left,
                                true,
                                656.1555,
                                new Dimension(367.6708),
                                true),
                        [new UniqueValue("hic",
                                "ut",
                                "quos")])],
                        "ut"),
                new UniqueValueGroup([new UniqueValueClass("unde",
                        new TextSymbol("accusamus repellendus doloremque",
                            new MapColor(115, 225, 70),
                            new MapColor(111, 103, 62),
                                new Dimension(65.8466),
                            new MapFont(new Dimension(526.2665),
                                    "Arial",
                                MapFontStyle.Oblique,
                                FontWeight.Normal,
                                TextDecoration.LineThrough),
                                118.2674,
                            new MapColor(183, 251, 244),
                            new MapColor(160, 63, 167),
                                505.8005,
                            HorizontalAlignment.Left,
                                true,
                                147.1717,
                                new Dimension(869.3126),
                                true),
                        [new UniqueValue("et",
                                "perferendis",
                                "est"),
                        new UniqueValue("dolorem",
                                "sint",
                                "fugit")]),
                    new UniqueValueClass("nulla",
                        new TextSymbol("dolore vel voluptatem",
                            new MapColor(189, 68, 145),
                            new MapColor(98, 184, 57),
                                new Dimension(485.0936),
                            new MapFont(new Dimension(241.4780),
                                    "Times New Roman",
                                MapFontStyle.Oblique,
                                FontWeight.Lighter,
                                TextDecoration.Underline),
                                531.3027,
                            new MapColor(160, 247, 150),
                            new MapColor(58, 21, 210),
                                776.1665,
                            HorizontalAlignment.Left,
                                true,
                                609.0053,
                                new Dimension(903.9830),
                                true),
                        [new UniqueValue("magni",
                                "quia",
                                "necessitatibus")])],
                        "error")],
                [new UniqueValueInfo("accusantium",
                    new TextSymbol("autem iusto eligendi",
                        new MapColor(170, 176, 237),
                        new MapColor(71, 146, 252),
                            new Dimension(851.1061),
                        new MapFont(new Dimension(834.8392),
                                "Georgia",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            790.2942,
                        new MapColor(19, 97, 13),
                        new MapColor(65, 253, 120),
                            445.2653,
                        HorizontalAlignment.Left,
                            true,
                            742.5108,
                            new Dimension(989.4287),
                            true),
                        "nobis"),
                new UniqueValueInfo("animi",
                    new TextSymbol("dolorem quo necessitatibus",
                        new MapColor(28, 139, 210),
                        new MapColor(75, 167, 115),
                            new Dimension(888.6619),
                        new MapFont(new Dimension(765.5303),
                                "Helvetica",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            635.2854,
                        new MapColor(85, 0, 207),
                        new MapColor(37, 40, 121),
                            221.8803,
                        HorizontalAlignment.Center,
                            true,
                            516.3345,
                            new Dimension(434.2642),
                            true),
                        "aliquid")],
                    "harum",
                    "numquam dolorum nihil");
        await geoJSONLayer.SetRenderer(testRenderer);
        var renderer = await geoJSONLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(8,
                    "dolorum",
                    "ut",
                    "qui");
        await geoJSONLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await geoJSONLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("ad accusantium",
                DrawingTool.Line,
                    "phone",
                new Graphic(new Polyline([new MapPath([new MapPoint([598.6696]),
                            new MapPoint([411.1175])])],
                        new SpatialReference(2,
                                "laborum",
                                "a",
                                "architecto"),
                            true,
                            true),
                    new TextSymbol("eos sed fuga",
                        new MapColor(113, 166, 215),
                        new MapColor(43, 92, 46),
                            new Dimension(356.5890),
                        new MapFont(new Dimension(77.8168),
                                "Bookman",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            899.5733,
                        new MapColor(68, 21, 73),
                        new MapColor(81, 76, 156),
                            13.8040,
                        HorizontalAlignment.Right,
                            true,
                            622.0683,
                            new Dimension(657.2865),
                            true),
                    new PopupTemplate("repellat possimus rerum",
                            "officiis",
                            ["suscipit"],
                        [new FieldInfo("category",
                                "qui",
                                "quis",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Avg)],
                        [new AttachmentsPopupContent("at accusantium quaerat",
                                "est ut culpa",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "email",
                                "ut perferendis eius",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("quidem omnis non",
                                "https://picsum.photos/640/480/?image=184",
                                "6ad98411-fb2f-a396-86e8-3417e67c5713",
                                () => { Console.WriteLine("dolor"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "quia")]),
                        new AttributesDictionary(),
                        true,
                        "odit",
                        "sit",
                        new GraphicOrigin(Guid.NewGuid(),
                            "in",
                            7)),
                    new Thumbnail("harum",
                        "et",
                        132.1744,
                        108.8885)),
            new FeatureTemplate("minima ut",
                DrawingTool.RightArrow,
                    "token",
                new Graphic(new Point(-85.1666,
                            -57.8131,
                            100.1146,
                            -31.9513,
                            398.2824,
                        new SpatialReference(1,
                                "exercitationem",
                                "vel",
                                "ullam"),
                            true,
                            true,
                            145.8936),
                    new TextSymbol("quis unde debitis",
                        new MapColor(180, 178, 19),
                        new MapColor(104, 30, 182),
                            new Dimension(750.0567),
                        new MapFont(new Dimension(109.7316),
                                "Verdana",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            162.2367,
                        new MapColor(23, 230, 178),
                        new MapColor(126, 52, 1),
                            702.2968,
                        HorizontalAlignment.Center,
                            true,
                            976.1165,
                            new Dimension(898.5688),
                            true),
                    new PopupTemplate("odit cumque sit",
                            "impedit",
                            ["tempore"],
                        [new FieldInfo("email",
                                "qui",
                                "vitae",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Var)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "et",
                                    "molestiae eum minima")),
                        new ExpressionPopupContent(new ElementExpressionInfo("return $feature.Name;",
                                    "deleniti",
                                    "expedita nemo fugit"))],
                        [new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                "id",
                                "est exercitationem porro",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("iste suscipit expedita",
                                "https://picsum.photos/640/480/?image=786",
                                "ccd324ba-aab2-43ce-9414-0b1f2b73c234",
                                () => { Console.WriteLine("eos"); return Task.CompletedTask; },
                                "token",
                                true,
                                true,
                                true,
                                "eum")]),
                        new AttributesDictionary(),
                        true,
                        "modi",
                        "omnis",
                        new GraphicOrigin(Guid.NewGuid(),
                            "exercitationem",
                            5)),
                    new Thumbnail("aut",
                        "facilis",
                        290.5163,
                        97.5067))];
        await geoJSONLayer.SetTemplates(testTemplates);
        var templates = await geoJSONLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2013, 7, 14, 8, 42, 49),
                    new DateTime(2018, 10, 8, 8, 47, 31));
        await geoJSONLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await geoJSONLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("sed",
                    "amet",
                new TimeExtent(new DateTime(2000, 10, 26, 14, 4, 1),
                        new DateTime(2008, 3, 12, 20, 52, 41)),
                new TimeInterval(TemporalTime.Months,
                        883.6429),
                    [new DateTime(2003, 6, 12, 2, 50, 13)],
                    "Atlantic/Cape_Verde",
                    "aut");
        await geoJSONLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await geoJSONLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    426.0211);
        await geoJSONLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await geoJSONLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2017, 8, 2, 12, 2, 14),
                    new DateTime(2022, 2, 8, 0, 19, 42));
        await geoJSONLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoJSONLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
