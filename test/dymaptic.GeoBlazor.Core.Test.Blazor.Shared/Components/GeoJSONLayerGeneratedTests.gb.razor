@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoJSONLayer(Action renderHandler)
    {
        GeoJSONLayer? geoJSONLayer = null;

        GeoJSONLayerEditsEvent? editsResult = null;
        void OnEdits(GeoJSONLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoJSONLayer 
                        Url="@("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson")"
                        Copyright="@("quam")"
                        Title="@("fuga repellendus corporis")"
                        Opacity="@(0.0264)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Hide)"
                        BlendMode="@(BlendMode.Hue)"
                        DefinitionExpression="@("neque")"
                        DisplayField="@("vel")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("quos",
                            35155637.5097))"
                        GeometryType="@(SimpleGeometryType.Polyline)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(4253371.7959)"
                        MinScale="@(37954.1012)"
                        ObjectIdField="@("vel")"
                        OutFields="@(["beatae"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(853.1327)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Years)"
                            Value="@(20.9858)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("voluptatum")"
                            EndField="@("voluptate")"
                            Stops="@([new DateTime(2021, 10, 21, 15, 37, 43),
                                new DateTime(2003, 9, 23, 13, 8, 56)])"
                            TimeZone="@("Europe/Athens")"
                            TrackIdField="@("consequatur")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Milliseconds)"
                                Value="@(554.2645)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2010, 3, 25, 17, 15, 0))"
                                End="@(new DateTime(2017, 6, 3, 18, 2, 12))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2003, 5, 23, 3, 21, 52))"
                            End="@(new DateTime(2012, 4, 23, 15, 39, 23))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("qui debitis")"
                            DrawingTool="@(DrawingTool.Line)"
                            Name="@("updatedAt")"
                            Prototype="@(new Graphic(new Polyline([new MapPath([new MapPoint([790.5553,
                                            872.8195])])],
                                    new SpatialReference(2,
                                            "modi",
                                            "enim",
                                            "doloribus"),
                                        true,
                                        true),
                                new TextSymbol("veniam sit aspernatur",
                                    new MapColor(56, 142, 146),
                                    new MapColor(210, 57, 159),
                                        new Dimension(543.2434),
                                    new MapFont(new Dimension(761.5443),
                                            "Bookman",
                                        MapFontStyle.Oblique,
                                        FontWeight.Bold,
                                        TextDecoration.None),
                                        26.2219,
                                    new MapColor(128, 227, 231),
                                    new MapColor(176, 84, 66),
                                        826.5656,
                                    HorizontalAlignment.Center,
                                        true,
                                        885.7884,
                                        new Dimension(473.3706),
                                        true),
                                new PopupTemplate("consequatur dolores quis",
                                        "maiores",
                                        ["ut"],
                                    [new FieldInfo("createdAt",
                                            "consequuntur",
                                            "aut",
                                        StringFieldOption.TextArea,
                                        new FieldInfoFormat(4,
                                                true,
                                            DateFormat.DayShortMonthYearLongTime),
                                            true,
                                            true,
                                        StatisticType.Sum),
                                    new FieldInfo("phone",
                                            "velit",
                                            "suscipit",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(1,
                                                true,
                                            DateFormat.LongMonthDayYear),
                                            true,
                                            true,
                                        StatisticType.Stddev)],
                                    [new TextPopupContent("rem qui non")],
                                    [new ExpressionInfo("return $feature.Population / $feature.Area;",
                                            "title",
                                            "pariatur rerum animi",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("necessitatibus accusantium odio",
                                            "https://picsum.photos/640/480/?image=432",
                                            "867ee809-0160-384d-20a8-7937b6b5fd10",
                                            () => { Console.WriteLine("cupiditate"); return Task.CompletedTask; },
                                            "email",
                                            true,
                                            true,
                                            true,
                                            "maiores")]),
                                    new AttributesDictionary(),
                                    true,
                                    "aut",
                                    "aut",
                                    new GraphicOrigin(Guid.NewGuid(),
                                        "distinctio",
                                        6)))"
                            Thumbnail="@(new Thumbnail("non",
                                "mollitia",
                                123.9791,
                                65.5570))">
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(7)"
                            ImageCoordinateSystem="@("hic")"
                            Wkt="@("qui")"
                            Wkt2="@("ipsam")">
                        </SpatialReference>
                        <UniqueValueRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.StandardDeviation,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(124, 197, 128),
                                        new MapColor(128, 226, 8)),
                                    new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(38, 231, 66),
                                        new MapColor(245, 62, 37))]),
                                    447.1898,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(780.2441,
                                            93.8256),
                                    new AuthoringInfoField1ClassBreakInfos(147.4500,
                                            336.1996)],
                                        "dicta",
                                        "dolores",
                                        "est"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(449.7252,
                                            907.4737),
                                    new AuthoringInfoField1ClassBreakInfos(47.7342,
                                            881.9233)],
                                        "soluta",
                                        "fugiat",
                                        "et"),
                                    ["dolores"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "aut",
                                    true,
                                LengthUnit.UsFeet,
                                    838.8935,
                                    712.0804,
                                    858.9142,
                                    182.9554))">
                        </UniqueValueRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("blanditiis occaecati laudantium")"
                            StringContent="@("cumque")"
                            OutFields="@(["debitis",
                                "veniam"])"
                            FieldInfos="@([new FieldInfo("updatedAt",
                                    "aliquam",
                                    "rem",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDateLeShortTime),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("updatedAt",
                                    "vitae",
                                    "repudiandae",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(6,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Avg)])"
                            Content="@([new RelationshipPopupContent("non quod et",
                                    "omnis illo quasi modi",
                                    5,
                                    "illum",
                                [new RelatedRecordsInfoFieldOrder("eos",
                                    OrderBy.Asc)],
                                    4),
                            new TextPopupContent("voluptas ipsum corrupti")])"
                            ExpressionInfos="@([new ExpressionInfo("var length = Geometry($feature).length; return length;",
                                    "token",
                                    "nostrum rem qui",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("ratione corrupti autem",
                                "https://picsum.photos/640/480/?image=740",
                                "c7e20991-e2fa-09ac-aac7-808037459e98",
                                () => { Console.WriteLine("et"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "in"),
                                new ActionButton("voluptas pariatur temporibus",
                                    "https://picsum.photos/640/480/?image=717",
                                    "49a98ea9-c38d-d65f-40d7-2f7af3f5735e",
                                    () => { Console.WriteLine("tenetur"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "et")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("laudantium")"
                            Order="@(SortOrder.Descending)"
                            ValueExpression="@("consequatur")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowCenter)"
                            LabelExpression="@("ducimus")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Parallel)"
                            MaxScale="@(7642191.6015)"
                            MinScale="@(35336.3660)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(655.0899))"
                            Symbol="@(new TextSymbol("voluptas ipsum quis",
                                new MapColor(85, 48, 108),
                                new MapColor(167, 67, 142),
                                    new Dimension(413.6586),
                                new MapFont(new Dimension(583.0050),
                                        "Bookman",
                                    MapFontStyle.Italic,
                                    FontWeight.Normal,
                                    TextDecoration.None),
                                    758.3136,
                                new MapColor(145, 218, 194),
                                new MapColor(64, 225, 20),
                                    925.9228,
                                HorizontalAlignment.Left,
                                    true,
                                    819.9200,
                                    new Dimension(385.2854),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("PostalCode = 'M5V 1J9'")">
                        </Label>
                        <Extent 
                            Xmax="@(19.9742)"
                            Xmin="@(-17.0514)"
                            Ymax="@(32.2630)"
                            Ymin="@(42.9356)"
                            Zmax="@(385.6151)"
                            Zmin="@(937.7507)"
                            Mmax="@(904.0295)"
                            Mmin="@(104.0298)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(2)"
                                ImageCoordinateSystem="@("qui")"
                                Wkt="@("necessitatibus")"
                                Wkt2="@("excepturi")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("name")"
                            Alias="@("porro")"
                            Description="@("ut aut")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "in" })"
                            ValueType="@(FieldValueType.UniqueIdentifier)"
                            Domain="@(new InheritedDomain("comment"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("quo",
                                11032346.8821),
                                new Effect("sunt",
                                    22924915.4887)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(83.5349,
                                new Polygon([new MapPath([new MapPoint([18.3494]),
                                        new MapPoint([694.1035,
                                            981.5817])]),
                                        new MapPath([new MapPoint([863.9335,
                                                141.1039]),
                                            new MapPoint([416.3337,
                                                216.9866])])],
                                    new SpatialReference(8,
                                            "quia",
                                            "aspernatur",
                                            "sapiente"),
                                    new Point(-118.8307,
                                            -89.3202,
                                            22.9556,
                                            45.3081,
                                            663.5127,
                                        new SpatialReference(9,
                                                "error",
                                                "cumque",
                                                "sit"),
                                            true,
                                            true,
                                            172.3298),
                                        true,
                                        true,
                                        true),
                                    [1,
                                        5],
                                SpatialRelationship.IndexIntersects,
                                new TimeExtent(new DateTime(2000, 2, 18, 0, 14, 21),
                                        new DateTime(2008, 5, 21, 13, 30, 58)),
                                    QueryUnits.Miles,
                                    "Age > 21"))"
                            IncludedEffect="@([new Effect("tenetur",
                                39680441.6521)])">
                        </FeatureEffect>
                        <GeoJSONLayerElevationInfo 
                            FeatureExpressionInfo="@(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                    "tempore cupiditate perspiciatis"))"
                            Mode="@(ElevationInfoMode.RelativeToScene)"
                            Offset="@(966.2517)"
                            Unit="@(ElevationUnit.DecimalDegrees)">
                        </GeoJSONLayerElevationInfo>
                    </GeoJSONLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoJSONLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<GeoJSONLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geojson");
        var applyEditsMethodResult = await geoJSONLayer.ApplyEdits(new GeoJSONLayerApplyEditsEdits([new Graphic(new Polyline([new MapPath([new MapPoint([517.3462,
                                246.3596])]),
                            new MapPath([new MapPoint([718.3387])])],
                        new SpatialReference(1,
                                "qui",
                                "ut",
                                "quia"),
                            true,
                            true),
                    new TextSymbol("odio numquam est",
                        new MapColor(116, 21, 197),
                        new MapColor(19, 9, 34),
                            new Dimension(307.7017),
                        new MapFont(new Dimension(852.1038),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.None),
                            415.2754,
                        new MapColor(204, 33, 194),
                        new MapColor(252, 152, 34),
                            466.4385,
                        HorizontalAlignment.Left,
                            true,
                            717.5650,
                            new Dimension(519.5882),
                            true),
                    new PopupTemplate("cum consequatur explicabo",
                            "in",
                            ["expedita",
                                "sunt"],
                        [new FieldInfo("phone",
                                "necessitatibus",
                                "nam",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new AttachmentsPopupContent("corrupti quaerat placeat",
                                "hic iure",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                "name",
                                "quod quibusdam expedita",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("nam ut quia",
                                "https://picsum.photos/640/480/?image=973",
                                "4e564492-5f5c-8055-2db2-b7173bf817ab",
                                () => { Console.WriteLine("earum"); return Task.CompletedTask; },
                                "email",
                                true,
                                true,
                                true,
                                "recusandae")]),
                        new AttributesDictionary(),
                        true,
                        "beatae",
                        "beatae",
                        new GraphicOrigin(Guid.NewGuid(),
                            "occaecati",
                            1))],
                [new Graphic(new Point(40.2706,
                            47.3382,
                            -137.3690,
                            82.8645,
                            835.9124,
                        new SpatialReference(8,
                                "est",
                                "delectus",
                                "sed"),
                            true,
                            true,
                            884.0125),
                    new TextSymbol("et quasi modi",
                        new MapColor(13, 28, 103),
                        new MapColor(85, 183, 125),
                            new Dimension(804.1473),
                        new MapFont(new Dimension(459.6651),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Normal,
                            TextDecoration.None),
                            22.0227,
                        new MapColor(185, 55, 60),
                        new MapColor(3, 142, 218),
                            421.2142,
                        HorizontalAlignment.Left,
                            true,
                            928.5552,
                            new Dimension(584.3531),
                            true),
                    new PopupTemplate("veritatis aut quas",
                            "aliquid",
                            ["qui"],
                        [new FieldInfo("id",
                                "voluptas",
                                "hic",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("password",
                                "rem",
                                "aspernatur",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new TextPopupContent("corporis est ipsa"),
                        new MediaPopupContent("sit libero ipsam",
                                "ut alias ipsam quia",
                            [new PieChartMediaInfo("quos quia fuga",
                                    "sapiente",
                                    "soluta veritatis magnam",
                                new ChartMediaInfoValue(["quod",
                                        "molestias"],
                                        "ut",
                                        "facere",
                                    [new ChartMediaInfoValueSeries("status",
                                            "ratione",
                                            471.5278),
                                    new ChartMediaInfoValueSeries("token",
                                            "quaerat",
                                            50.7399)],
                                    [new MapColor(232, 26, 14),
                                    new MapColor(217, 33, 201)]))],
                                8)],
                        [new ExpressionInfo("return Date();",
                                "name",
                                "minima ea commodi",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("et fugiat temporibus",
                                "https://picsum.photos/640/480/?image=378",
                                "bca52dd6-5ed5-6d90-fab2-36565871374a",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "deleniti")]),
                        new AttributesDictionary(),
                        true,
                        "qui",
                        "magni",
                        new GraphicOrigin(Guid.NewGuid(),
                            "exercitationem",
                            4))],
                    ["et"],
                [new Graphic(new Polyline([new MapPath([new MapPoint([430.2243])])],
                        new SpatialReference(6,
                                "consequuntur",
                                "minus",
                                "vel"),
                            true,
                            true),
                    new TextSymbol("occaecati in qui",
                        new MapColor(34, 167, 231),
                        new MapColor(73, 20, 104),
                            new Dimension(324.2310),
                        new MapFont(new Dimension(166.6574),
                                "Helvetica",
                            MapFontStyle.Normal,
                            FontWeight.Normal,
                            TextDecoration.Underline),
                            6.6341,
                        new MapColor(243, 196, 123),
                        new MapColor(80, 108, 38),
                            946.2713,
                        HorizontalAlignment.Left,
                            true,
                            977.3354,
                            new Dimension(231.3626),
                            true),
                    new PopupTemplate("voluptatum rerum facere",
                            "reprehenderit",
                            ["labore",
                                "sed"],
                        [new FieldInfo("comment",
                                "cupiditate",
                                "dolore",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(4,
                                    true,
                                DateFormat.ShortDateLe),
                                true,
                                true,
                            StatisticType.Min)],
                        [new AttachmentsPopupContent("non quia et",
                                "ut vitae aut est",
                                AttachmentsPopupContentDisplayType.Preview),
                        new TextPopupContent("est labore quia")],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "id",
                                "accusamus laudantium aspernatur",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "status",
                                "autem alias pariatur",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("et ea maxime",
                                "https://picsum.photos/640/480/?image=811",
                                "e2c86428-3ed9-f7a4-5469-4bc2f0b59813",
                                () => { Console.WriteLine("reiciendis"); return Task.CompletedTask; },
                                "category",
                                true,
                                true,
                                true,
                                "voluptate")]),
                        new AttributesDictionary(),
                        true,
                        "eum",
                        "saepe",
                        new GraphicOrigin(Guid.NewGuid(),
                            "cupiditate",
                            3)),
                new Graphic(new Extent(55.4789,
                            62.4378,
                            -78.3392,
                            -19.7620,
                            589.0666,
                            205.1268,
                            884.8409,
                            429.3281,
                        new SpatialReference(5,
                                "et",
                                "nostrum",
                                "est"),
                            true,
                            true),
                    new TextSymbol("omnis explicabo consectetur",
                        new MapColor(97, 65, 44),
                        new MapColor(173, 97, 222),
                            new Dimension(310.7232),
                        new MapFont(new Dimension(260.4375),
                                "Verdana",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            89.2523,
                        new MapColor(137, 50, 90),
                        new MapColor(199, 51, 86),
                            170.9075,
                        HorizontalAlignment.Left,
                            true,
                            911.2873,
                            new Dimension(849.8619),
                            true),
                    new PopupTemplate("voluptas illo amet",
                            "ut",
                            ["itaque",
                                "nulla"],
                        [new FieldInfo("status",
                                "neque",
                                "fuga",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Var),
                        new FieldInfo("updatedAt",
                                "est",
                                "ducimus",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.DayShortMonthYearShortTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new ExpressionPopupContent(new ElementExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                    "iure",
                                    "consequatur et consequatur")),
                        new MediaPopupContent("rerum ab consectetur",
                                "nemo accusamus qui",
                            [new ImageMediaInfo("recusandae placeat in",
                                    "aut",
                                    "sequi ea sit",
                                new ImageMediaInfoValue("http://simeon.biz",
                                        "http://eda.name"),
                                    227.9515)],
                                3)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "title",
                                "fuga cum molestiae",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Population / $feature.Area;",
                                "password",
                                "tempora ut iusto",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("voluptatem distinctio dolorem",
                                "https://picsum.photos/640/480/?image=152",
                                "eb7afed8-26ff-426f-943e-381230db6fae",
                                () => { Console.WriteLine("quam"); return Task.CompletedTask; },
                                "group",
                                true,
                                true,
                                true,
                                "quia")]),
                        new AttributesDictionary(),
                        true,
                        "illum",
                        "placeat",
                        new GraphicOrigin(Guid.NewGuid(),
                            "nemo",
                            3))]));
        Assert.IsNotNull(applyEditsMethodResult);
        var createPopupTemplateMethodResult = await geoJSONLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["optio",
                    "animi"],
                    ["comment"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await geoJSONLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await geoJSONLayer.GetField("category");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await geoJSONLayer.GetFieldDomain("password",
            new GeoJSONLayerGetFieldDomainOptions(new Graphic(new Point(142.4711,
                            79.1740,
                            -134.9006,
                            19.1805,
                            11.0240,
                        new SpatialReference(6,
                                "qui",
                                "rem",
                                "sit"),
                            true,
                            true,
                            348.3553),
                    new TextSymbol("est autem molestiae",
                        new MapColor(77, 224, 129),
                        new MapColor(120, 99, 13),
                            new Dimension(611.5801),
                        new MapFont(new Dimension(818.6699),
                                "Courier New",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.Underline),
                            988.4541,
                        new MapColor(102, 211, 138),
                        new MapColor(77, 134, 87),
                            404.6545,
                        HorizontalAlignment.Left,
                            true,
                            213.7393,
                            new Dimension(298.1650),
                            true),
                    new PopupTemplate("sequi aut vero",
                            "nihil",
                            ["nesciunt"],
                        [new FieldInfo("name",
                                "ratione",
                                "maiores",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateLeLongTime),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("createdAt",
                                "et",
                                "ea",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.LongDateLongTime24),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new FieldsPopupContent([new FieldInfo("updatedAt",
                                    "dolorem",
                                    "voluptas",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.LongMonthYear),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("password",
                                    "ad",
                                    "in",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(7,
                                        true,
                                    DateFormat.ShortDateLeLongTime),
                                    true,
                                    true,
                                StatisticType.Count)],
                                "dolor id atque",
                                "repellat voluptas repellat"),
                        new MediaPopupContent("consequuntur in iure",
                                "quibusdam sunt",
                            [new PieChartMediaInfo("in iusto necessitatibus",
                                    "commodi",
                                    "id sint veritatis",
                                new ChartMediaInfoValue(["a"],
                                        "eum",
                                        "delectus",
                                    [new ChartMediaInfoValueSeries("updatedAt",
                                            "incidunt",
                                            431.1501)],
                                    [new MapColor(151, 136, 221),
                                    new MapColor(32, 237, 64)]))],
                                9)],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "category",
                                "aliquam nesciunt minus",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("qui nihil dolores",
                                "https://picsum.photos/640/480/?image=318",
                                "6662a56e-e510-14df-3190-32bacc01f0f0",
                                () => { Console.WriteLine("quam"); return Task.CompletedTask; },
                                "phone",
                                true,
                                true,
                                true,
                                "rerum")]),
                        new AttributesDictionary(),
                        true,
                        "earum",
                        "sunt",
                        new GraphicOrigin(Guid.NewGuid(),
                            "et",
                            4))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await geoJSONLayer.QueryExtent(new Query([1],
                    true,
                    914.0094,
                    904.8930,
                    "3.3.4.2",
                new Polygon([new MapPath([new MapPoint([151.0239,
                            57.1544]),
                        new MapPoint([295.3912])]),
                        new MapPath([new MapPoint([108.4060,
                                712.1889]),
                            new MapPoint([836.0089,
                                171.6576])])],
                    new SpatialReference(4,
                            "dolores",
                            "saepe",
                            "saepe"),
                    new Point(-52.0041,
                            -87.8898,
                            8.0852,
                            -85.1140,
                            736.0755,
                        new SpatialReference(3,
                                "ipsum",
                                "aspernatur",
                                "minus"),
                            true,
                            true,
                            569.4219),
                        true,
                        true,
                        true),
                    7,
                    ["et"],
                    "cumque",
                    new DateTime(2012, 7, 3, 13, 11, 54),
                    833.0641,
                    9,
                    "error",
                    9),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await geoJSONLayer.QueryFeatureCount(new Query([8],
                    true,
                    264.9929,
                    346.9389,
                    "1.5.8.9",
                new Polyline([new MapPath([new MapPoint([464.1377,
                            469.3906]),
                        new MapPoint([248.8062])]),
                        new MapPath([new MapPoint([753.3981]),
                            new MapPoint([584.9410])])],
                    new SpatialReference(1,
                            "beatae",
                            "voluptate",
                            "ullam"),
                        true,
                        true),
                    2,
                    ["totam",
                        "quis"],
                    "qui",
                    new DateTime(2019, 6, 3, 1, 3, 5),
                    127.0032,
                    8,
                    "ea",
                    6),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await geoJSONLayer.QueryFeatures(new Query([2,
                    8],
                    true,
                    802.8724,
                    74.3476,
                    "0.9.1.6",
                new Point(153.3453,
                        -16.9135,
                        -96.2150,
                        -69.5218,
                        809.8130,
                    new SpatialReference(2,
                            "repellendus",
                            "molestiae",
                            "est"),
                        true,
                        true,
                        392.7200),
                    7,
                    ["officia",
                        "sit"],
                    "asperiores",
                    new DateTime(2002, 4, 22, 4, 50, 6),
                    788.6344,
                    5,
                    "ut",
                    1),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await geoJSONLayer.QueryObjectIds(new Query([6],
                    true,
                    328.1811,
                    49.1987,
                    "6.9.7.9",
                new Polyline([new MapPath([new MapPoint([574.7452]),
                        new MapPoint([879.3756,
                            518.3363])])],
                    new SpatialReference(4,
                            "repellat",
                            "nostrum",
                            "non"),
                        true,
                        true),
                    5,
                    ["quo",
                        "molestias"],
                    "maxime",
                    new DateTime(2015, 1, 24, 15, 2, 51),
                    397.8196,
                    2,
                    "voluptate",
                    7),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await geoJSONLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoJSONLayer.SetListMode(testListMode);
        var listMode = await geoJSONLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.SoftLight;
        await geoJSONLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoJSONLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GeoJSONLayerElevationInfo testElevationInfo = new GeoJSONLayerElevationInfo(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature['FieldName'];",
                        "aut fuga beatae"),
                ElevationInfoMode.RelativeToGround,
                    249.1564,
                ElevationUnit.Centimeters);
        await geoJSONLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await geoJSONLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("harum",
                    49889135.7248),
                    new Effect("eveniet",
                        4476190.8177)],
                    true,
                new FeatureFilter(239.8588,
                    new Polygon([new MapPath([new MapPoint([429.4033]),
                            new MapPoint([554.6085])]),
                            new MapPath([new MapPoint([201.8326,
                                    173.6230]),
                                new MapPoint([551.8104])])],
                        new SpatialReference(1,
                                "repellendus",
                                "modi",
                                "nulla"),
                        new Point(-126.3237,
                                -21.8313,
                                -160.0079,
                                -54.3988,
                                312.5823,
                            new SpatialReference(2,
                                    "fugit",
                                    "aut",
                                    "soluta"),
                                true,
                                true,
                                132.8911),
                            true,
                            true,
                            true),
                        [2],
                    SpatialRelationship.EnvelopeIntersects,
                    new TimeExtent(new DateTime(2014, 8, 18, 13, 45, 14),
                            new DateTime(2017, 1, 27, 0, 53, 28)),
                        QueryUnits.NauticalMiles,
                        "Phone = '555-555-5555'"),
                    [new Effect("ipsa",
                        20485054.5207)]);
        await geoJSONLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await geoJSONLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "comment",
                    "eaque",
                    "quia eveniet",
                    2,
                    true,
                    true,
                    new { Value = "amet" },
                FieldValueType.Binary,
                new RangeDomain("perferendis",
                        "quo",
                        "token")),
            new Field(default,
                    "name",
                    "qui",
                    "qui laboriosam",
                    2,
                    true,
                    true,
                    new { Value = "quae" },
                FieldValueType.NameOrTitle,
                new InheritedDomain("email"))];
        await geoJSONLayer.SetFields(testFields);
        var fields = await geoJSONLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-26.7638,
                    11.0376,
                    -71.7413,
                    -54.1109,
                    596.7023,
                    642.0893,
                    778.0335,
                    821.3479,
                new SpatialReference(3,
                        "omnis",
                        "eligendi",
                        "et"),
                    true,
                    true);
        await geoJSONLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoJSONLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Point;
        await geoJSONLayer.SetGeometryType(testGeometryType);
        var geometryType = await geoJSONLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.BelowLeft,
                    "blanditiis",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    29426306.0157,
                    38628.1940,
                    true,
                    new Dimension(594.1094),
                new TextSymbol("ab dolores eos",
                    new MapColor(132, 117, 62),
                    new MapColor(72, 32, 216),
                        new Dimension(300.9218),
                    new MapFont(new Dimension(259.4736),
                            "Garamond",
                        MapFontStyle.Italic,
                        FontWeight.Normal,
                        TextDecoration.None),
                        722.9557,
                    new MapColor(110, 52, 53),
                    new MapColor(7, 181, 138),
                        294.9235,
                    HorizontalAlignment.Right,
                        true,
                        369.2412,
                        new Dimension(358.7372),
                        true),
                    true,
                    "PostalCode = 'M5V 1J9'"),
            new Label(LabelPlacement.AboveBefore,
                    "illo",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.Static,
                LabelPosition.Curved,
                    31158831.9408,
                    6174.2764,
                    true,
                    new Dimension(630.8798),
                new TextSymbol("facilis et dolorum",
                    new MapColor(106, 218, 100),
                    new MapColor(76, 41, 78),
                        new Dimension(759.1949),
                    new MapFont(new Dimension(472.7759),
                            "Helvetica",
                        MapFontStyle.Normal,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        912.4596,
                    new MapColor(169, 129, 114),
                    new MapColor(181, 251, 8),
                        57.1499,
                    HorizontalAlignment.Right,
                        true,
                        597.3152,
                        new Dimension(674.8747),
                        true),
                    true,
                    "Phone = '555-555-5555'")];
        await geoJSONLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await geoJSONLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("tempore",
                SortOrder.Ascending,
                    "illo"),
            new OrderedLayerOrderBy("voluptatem",
                SortOrder.Ascending,
                    "iure")];
        await geoJSONLayer.SetOrderBy(testOrderBy);
        var orderBy = await geoJSONLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PopupTemplate testPopupTemplate = new PopupTemplate("repellendus quos consectetur",
                    "et",
                    ["quia"],
                [new FieldInfo("id",
                        "ipsam",
                        "eum",
                    StringFieldOption.TextBox,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Stddev),
                new FieldInfo("avatar",
                        "dolores",
                        "pariatur",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Avg)],
                [new ExpressionPopupContent(new ElementExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                            "assumenda",
                            "saepe adipisci ratione")),
                new FieldsPopupContent([new FieldInfo("group",
                            "cumque",
                            "molestias",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(6,
                                true,
                            DateFormat.DayShortMonthYear),
                            true,
                            true,
                        StatisticType.Avg)],
                        "dolor sed sunt voluptatem",
                        "eaque est nesciunt")],
                [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                        "avatar",
                        "nesciunt architecto sit",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Name;",
                        "password",
                        "amet quia eum",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("est voluptas omnis",
                        "https://picsum.photos/640/480/?image=672",
                        "6e8efd75-e011-cbef-69a0-95cd0d0e5f54",
                        () => { Console.WriteLine("illo"); return Task.CompletedTask; },
                        "group",
                        true,
                        true,
                        true,
                        "amet"),
                        new ActionButton("eaque omnis impedit",
                            "https://picsum.photos/640/480/?image=474",
                            "94cb2a73-08e7-af8d-4f0d-931de4aa3a4c",
                            () => { Console.WriteLine("et"); return Task.CompletedTask; },
                            "email",
                            true,
                            true,
                            true,
                            "deleniti")]);
        await geoJSONLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await geoJSONLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        PortalItem testPortalItem = new PortalItem();
        await geoJSONLayer.SetPortalItem(testPortalItem);
        var portalItem = await geoJSONLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("aut temporibus consequatur",
                    new MapColor(181, 13, 211),
                    new MapColor(183, 252, 205),
                        new Dimension(611.0704),
                    new MapFont(new Dimension(698.8373),
                            "Palatino",
                        MapFontStyle.Normal,
                        FontWeight.Normal,
                        TextDecoration.Underline),
                        934.1136,
                    new MapColor(175, 48, 119),
                    new MapColor(151, 253, 210),
                        277.7494,
                    HorizontalAlignment.Left,
                        true,
                        639.9372,
                        new Dimension(843.3591),
                        true),
                    "perspiciatis",
                [new ColorVariable("incidunt",
                        "error",
                    [new ColorStop(504.5175,
                        new MapColor(29, 10, 123),
                            "ullam"),
                    new ColorStop(95.7175,
                        new MapColor(206, 143, 45),
                            "dolorem")],
                    new VisualVariableLegendOptions(true,
                            "quis velit eligendi"),
                        "magnam",
                        "rerum omnis dicta"),
                new SizeVariable("esse",
                        new Dimension(62.3690),
                        new Dimension(136.2835),
                        742.8081,
                        642.0388,
                        VisualValueRepresentation.Width,
                        VisualValueUnit.Miles,
                        "occaecati",
                        "ipsam",
                        true,
                        VisualAxis.Width,
                        "voluptate",
                        "sed et quisquam",
                    new VisualVariableLegendOptions(true,
                            "ut asperiores deserunt"))],
                new AuthoringInfo(ClassificationMethod.Manual,
                    new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                            new MapColor(27, 50, 210),
                            new MapColor(37, 13, 231))]),
                        818.4408,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(44.5929,
                                859.5938),
                        new AuthoringInfoField1ClassBreakInfos(757.9578,
                                580.6318)],
                            "quas",
                            "voluptatibus",
                            "quia"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(952.7578,
                                336.3261),
                        new AuthoringInfoField1ClassBreakInfos(242.4055,
                                910.1711)],
                            "laudantium",
                            "laborum",
                            "velit"),
                        ["corrupti"],
                    AuthoringInfoFlowTheme.FlowLine,
                        "perferendis",
                        true,
                    LengthUnit.Meters,
                        705.1529,
                        557.2200,
                        940.3336,
                        193.4677));
        await geoJSONLayer.SetRenderer(testRenderer);
        var renderer = await geoJSONLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(2,
                    "animi",
                    "officiis",
                    "culpa");
        await geoJSONLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await geoJSONLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("laudantium odio molestiae quia",
                DrawingTool.Rectangle,
                    "password",
                new Graphic(new Polygon([new MapPath([new MapPoint([213.2027]),
                            new MapPoint([210.6668])])],
                        new SpatialReference(2,
                                "voluptatum",
                                "tempora",
                                "doloremque"),
                        new Point(85.2168,
                                -84.1210,
                                163.6661,
                                -33.8134,
                                247.6331,
                            new SpatialReference(1,
                                    "quia",
                                    "praesentium",
                                    "accusamus"),
                                true,
                                true,
                                923.8205),
                            true,
                            true,
                            true),
                    new TextSymbol("quia temporibus esse",
                        new MapColor(59, 188, 31),
                        new MapColor(14, 214, 234),
                            new Dimension(22.3443),
                        new MapFont(new Dimension(751.6820),
                                "Helvetica",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            218.7764,
                        new MapColor(122, 174, 11),
                        new MapColor(243, 141, 67),
                            893.9524,
                        HorizontalAlignment.Center,
                            true,
                            985.5008,
                            new Dimension(37.5793),
                            true),
                    new PopupTemplate("voluptatem est temporibus",
                            "blanditiis",
                            ["quis"],
                        [new FieldInfo("phone",
                                "est",
                                "omnis",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateLongTime24),
                                true,
                                true,
                            StatisticType.Count)],
                        [new RelationshipPopupContent("dignissimos inventore voluptates",
                                "quae maxime cumque consequatur",
                                3,
                                "commodi",
                            [new RelatedRecordsInfoFieldOrder("et",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("est",
                                OrderBy.Desc)],
                                7)],
                        [new ExpressionInfo("return Date();",
                                "status",
                                "incidunt dolorem corrupti",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "name",
                                "at enim aut",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("recusandae tenetur perspiciatis",
                                "https://picsum.photos/640/480/?image=931",
                                "58f0ae1a-fdb6-09d9-b900-ee3bc8b1be12",
                                () => { Console.WriteLine("facilis"); return Task.CompletedTask; },
                                "name",
                                true,
                                true,
                                true,
                                "architecto"),
                                new ActionButton("iure cum sit",
                                    "https://picsum.photos/640/480/?image=897",
                                    "56593536-dac8-12a1-f520-6d7f2efd4394",
                                    () => { Console.WriteLine("nostrum"); return Task.CompletedTask; },
                                    "name",
                                    true,
                                    true,
                                    true,
                                    "vel")]),
                        new AttributesDictionary(),
                        true,
                        "perspiciatis",
                        "expedita",
                        new GraphicOrigin(Guid.NewGuid(),
                            "unde",
                            5)),
                    new Thumbnail("tenetur",
                        "id",
                        292.7322,
                        64.1291))];
        await geoJSONLayer.SetTemplates(testTemplates);
        var templates = await geoJSONLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2023, 11, 15, 12, 42, 10),
                    new DateTime(2004, 5, 10, 9, 17, 13));
        await geoJSONLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await geoJSONLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("aut",
                    "ut",
                new TimeExtent(new DateTime(2020, 8, 22, 21, 31, 29),
                        new DateTime(2019, 6, 2, 14, 16, 25)),
                new TimeInterval(TemporalTime.Decades,
                        786.3300),
                    [new DateTime(2015, 2, 7, 11, 6, 17)],
                    "Pacific/Honolulu",
                    "voluptatem");
        await geoJSONLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await geoJSONLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Years,
                    234.1369);
        await geoJSONLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await geoJSONLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2002, 5, 23, 19, 18, 49),
                    new DateTime(2011, 10, 25, 4, 45, 23));
        await geoJSONLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoJSONLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
