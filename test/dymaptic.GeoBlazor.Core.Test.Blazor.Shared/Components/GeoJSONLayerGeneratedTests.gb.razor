@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderGeneratedGeoJSONLayer(Action renderHandler)
    {
        GeoJSONLayer? geoJSONLayer = null;

        GeoJSONLayerEditsEvent? editsResult = null;
        void OnEdits(GeoJSONLayerEditsEvent result)
        {
            editsResult = result;
        }
        RefreshEvent? refreshResult = null;
        void OnRefresh(RefreshEvent result)
        {
            refreshResult = result;
        }
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <Basemap>
                        <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
                    </Basemap>
                    <GeoJSONLayer 
                        Url="@("https://services3.arcgis.com/GVgbJbqm8hXASVYi/ArcGIS/rest/services/World_Countries_(Generalized)/FeatureServer/0/query?where=1%3D1&outFields=*&f=geojson")"
                        Copyright="@("id")"
                        Title="@("molestias quo est")"
                        Opacity="@(0.4128)"
                        Visible="@(true)"
                        ListMode="@(ListMode.Show)"
                        BlendMode="@(BlendMode.Screen)"
                        DefinitionExpression="@("provident")"
                        DisplayField="@("neque")"
                        EditingEnabled="@(true)"
                        Effect="@(new Effect("expedita",
                            23421910.1145))"
                        GeometryType="@(SimpleGeometryType.Multipoint)"
                        LabelsVisible="@(true)"
                        LegendEnabled="@(true)"
                        MaxScale="@(36682598.8840)"
                        MinScale="@(14489.4200)"
                        ObjectIdField="@("eveniet")"
                        OutFields="@(["omnis"])"
                        PersistenceEnabled="@(true)"
                        PopupEnabled="@(true)"
                        RefreshInterval="@(658.9132)"
                        ScreenSizePerspectiveEnabled="@(true)"
                        UseViewTime="@(true)"
                        OnEdits="OnEdits"
                        OnRefresh="OnRefresh">
                        <TimeInterval 
                            Unit="@(TemporalTime.Weeks)"
                            Value="@(818.4902)">
                        </TimeInterval>
                        <TimeInfo 
                            StartField="@("dolorem")"
                            EndField="@("optio")"
                            Stops="@([new DateTime(2001, 4, 9, 4, 38, 44)])"
                            TimeZone="@("Pacific/Port_Moresby")"
                            TrackIdField="@("qui")">
                            <TimeInterval 
                                Unit="@(TemporalTime.Seconds)"
                                Value="@(74.9055)">
                            </TimeInterval>
                            <TimeExtent 
                                Start="@(new DateTime(2020, 9, 9, 19, 57, 58))"
                                End="@(new DateTime(2014, 9, 9, 7, 46, 55))">
                            </TimeExtent>
                        </TimeInfo>
                        <TimeExtent 
                            Start="@(new DateTime(2011, 9, 6, 14, 55, 21))"
                            End="@(new DateTime(2010, 7, 16, 4, 13, 5))">
                        </TimeExtent>
                        <FeatureTemplate 
                            Description="@("autem minima vel")"
                            DrawingTool="@(DrawingTool.AutoCompletePolygon)"
                            Name="@("comment")"
                            Prototype="@(new Graphic(new Extent(124.3758,
                                        165.7579,
                                        -75.5952,
                                        17.1830,
                                        181.8154,
                                        298.2359,
                                        838.2182,
                                        342.3325,
                                    new SpatialReference(4,
                                            "dolorem",
                                            "aut",
                                            "architecto"),
                                        true,
                                        true),
                                new TextSymbol("et delectus eum",
                                    new MapColor(124, 231, 110),
                                    new MapColor(209, 155, 205),
                                        new Dimension(819.3990),
                                    new MapFont(new Dimension(162.7573),
                                            "Palatino",
                                        MapFontStyle.Normal,
                                        FontWeight.Normal,
                                        TextDecoration.LineThrough),
                                        895.9627,
                                    new MapColor(139, 26, 162),
                                    new MapColor(242, 55, 231),
                                        601.3869,
                                    HorizontalAlignment.Left,
                                        true,
                                        347.9574,
                                        new Dimension(324.5524),
                                        true),
                                new PopupTemplate("facilis reiciendis consequatur",
                                        "eum",
                                        ["ut",
                                            "placeat"],
                                    [new FieldInfo("name",
                                            "tempora",
                                            "maiores",
                                        StringFieldOption.RichText,
                                        new FieldInfoFormat(2,
                                                true,
                                            DateFormat.DayShortMonthYearLongTime24),
                                            true,
                                            true,
                                        StatisticType.Var)],
                                    [new AttachmentsPopupContent("officia fugiat consequatur",
                                            "velit perferendis eligendi",
                                            AttachmentsPopupContentDisplayType.Auto)],
                                    [new ExpressionInfo("return $feature.Status == 'Active' ? 'Active' : 'Inactive';",
                                            "token",
                                            "non doloremque vitae",
                                            ExpressionInfoReturnType.String)],
                                        true,
                                        true,
                                        [new ActionButton("a aliquam sequi",
                                            "https://picsum.photos/640/480/?image=650",
                                            "e543afd8-863d-f5d9-6b9d-8ecd181f3f64",
                                            () => { Console.WriteLine("consequatur"); return Task.CompletedTask; },
                                            "createdAt",
                                            true,
                                            true,
                                            true,
                                            "ea")]),
                                    new AttributesDictionary(),
                                    true,
                                    "ut",
                                    "nam",
                                    new GraphicOrigin(Guid.NewGuid(),
                                        "totam",
                                        6)))"
                            Thumbnail="@(new Thumbnail("sed",
                                "praesentium",
                                213.7738,
                                198.6873))">
                        </FeatureTemplate>
                        <SpatialReference 
                            Wkid="@(9)"
                            ImageCoordinateSystem="@("blanditiis")"
                            Wkt="@("voluptatibus")"
                            Wkt2="@("sit")">
                        </SpatialReference>
                        <SimpleRenderer 
                            AuthoringInfo="@(new AuthoringInfo(ClassificationMethod.EqualInterval,
                                new MultipartColorRamp([new AlgorithmicColorRamp(Algorithm.Hsv,
                                        new MapColor(197, 147, 85),
                                        new MapColor(246, 74, 66)),
                                    new AlgorithmicColorRamp(Algorithm.LabLch,
                                        new MapColor(133, 127, 124),
                                        new MapColor(141, 139, 82))]),
                                    69.9028,
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(76.3131,
                                            628.7676),
                                    new AuthoringInfoField1ClassBreakInfos(800.0698,
                                            504.7727)],
                                        "nemo",
                                        "aut",
                                        "sed"),
                                new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(235.2923,
                                            271.4305),
                                    new AuthoringInfoField1ClassBreakInfos(521.1812,
                                            732.1065)],
                                        "nesciunt",
                                        "debitis",
                                        "adipisci"),
                                    ["non"],
                                AuthoringInfoFlowTheme.WaveFront,
                                    "omnis",
                                    true,
                                LengthUnit.Decimeters,
                                    487.3532,
                                    13.2308,
                                    709.5018,
                                    666.7630))">
                        </SimpleRenderer>
                        <PortalItem />
                        <PopupTemplate 
                            Title="@("deserunt voluptatibus eveniet")"
                            StringContent="@("rerum")"
                            OutFields="@(["aut",
                                "ut"])"
                            FieldInfos="@([new FieldInfo("id",
                                    "quam",
                                    "sunt",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(1,
                                        true,
                                    DateFormat.LongDateShortTime24),
                                    true,
                                    true,
                                StatisticType.Sum),
                            new FieldInfo("comment",
                                    "quia",
                                    "soluta",
                                StringFieldOption.TextBox,
                                new FieldInfoFormat(8,
                                        true,
                                    DateFormat.LongMonthDayYearLongTime24),
                                    true,
                                    true,
                                StatisticType.Min)])"
                            Content="@([new TextPopupContent("non blanditiis explicabo"),
                            new AttachmentsPopupContent("ea autem incidunt",
                                    "quia numquam consectetur illo",
                                    AttachmentsPopupContentDisplayType.Auto)])"
                            ExpressionInfos="@([new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                    "status",
                                    "dolores eveniet suscipit",
                                    ExpressionInfoReturnType.String),
                            new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                    "id",
                                    "amet corporis voluptas",
                                    ExpressionInfoReturnType.String)])"
                            OverwriteActions="@(true)"
                            ReturnGeometry="@(true)"
                            Actions="@([new ActionButton("iste voluptatem vel",
                                "https://picsum.photos/640/480/?image=490",
                                "87e2ca59-8b8d-b6d5-d792-687c692143da",
                                () => { Console.WriteLine("quis"); return Task.CompletedTask; },
                                "updatedAt",
                                true,
                                true,
                                true,
                                "at")])">
                        </PopupTemplate>
                        <OrderedLayerOrderBy 
                            Field="@("non")"
                            Order="@(SortOrder.Ascending)"
                            ValueExpression="@("dolorem")">
                        </OrderedLayerOrderBy>
                        <Label 
                            LabelPlacement="@(LabelPlacement.BelowAlong)"
                            LabelExpression="@("adipisci")"
                            LabelExpressionInfo="@(new LabelExpressionInfo())"
                            AllowOverrun="@(true)"
                            DeconflictionStrategy="@(DeconflictionStrategy.None)"
                            LabelPosition="@(LabelPosition.Curved)"
                            MaxScale="@(6419704.1533)"
                            MinScale="@(14404.5203)"
                            RepeatLabel="@(true)"
                            RepeatLabelDistance="@(new Dimension(849.0910))"
                            Symbol="@(new TextSymbol("rerum culpa id",
                                new MapColor(227, 153, 26),
                                new MapColor(118, 55, 125),
                                    new Dimension(84.8165),
                                new MapFont(new Dimension(739.4377),
                                        "Verdana",
                                    MapFontStyle.Normal,
                                    FontWeight.Lighter,
                                    TextDecoration.Underline),
                                    87.0715,
                                new MapColor(83, 134, 180),
                                new MapColor(141, 16, 166),
                                    300.3082,
                                HorizontalAlignment.Left,
                                    true,
                                    831.3109,
                                    new Dimension(730.4075),
                                    true))"
                            UseCodedValues="@(true)"
                            Where="@("Name = 'John Doe'")">
                        </Label>
                        <Extent 
                            Xmax="@(-29.0873)"
                            Xmin="@(-131.9760)"
                            Ymax="@(-67.2780)"
                            Ymin="@(-51.1688)"
                            Zmax="@(525.2257)"
                            Zmin="@(791.6292)"
                            Mmax="@(222.3462)"
                            Mmin="@(879.5777)"
                            HasM="@(true)"
                            HasZ="@(true)">
                            <SpatialReference 
                                Wkid="@(9)"
                                ImageCoordinateSystem="@("dolore")"
                                Wkt="@("aspernatur")"
                                Wkt2="@("qui")">
                            </SpatialReference>
                        </Extent>
                        <Field 
                            Name="@("phone")"
                            Alias="@("cumque")"
                            Description="@("quidem et explicabo eos")"
                            Length="@(3)"
                            Editable="@(true)"
                            Nullable="@(true)"
                            DefaultValue="@(new { Value = "at" })"
                            ValueType="@(FieldValueType.UniqueIdentifier)"
                            Domain="@(new CodedValueDomain<string>([new CodedValue<string>(),
                                new CodedValue<string>()],
                                "password"))">
                        </Field>
                        <FeatureEffect 
                            ExcludedEffect="@([new Effect("exercitationem",
                                44482374.1988)])"
                            ExcludedLabelsVisible="@(true)"
                            Filter="@(new FeatureFilter(153.6966,
                                new Extent(118.9839,
                                        76.8137,
                                        -30.4720,
                                        -76.9689,
                                        469.4147,
                                        934.2092,
                                        487.3351,
                                        111.7281,
                                    new SpatialReference(6,
                                            "sed",
                                            "porro",
                                            "quia"),
                                        true,
                                        true),
                                    [1],
                                SpatialRelationship.Overlaps,
                                new TimeExtent(new DateTime(2014, 3, 5, 18, 35, 18),
                                        new DateTime(2005, 5, 13, 6, 9, 8)),
                                    QueryUnits.Meters,
                                    "1 = 1"))"
                            IncludedEffect="@([new Effect("voluptates",
                                34827306.3571)])">
                        </FeatureEffect>
                        <GeoJSONLayerElevationInfo 
                            FeatureExpressionInfo="@(new GeoJSONLayerElevationInfoFeatureExpressionInfo("return $feature.Name;",
                                    "dolores qui ut"))"
                            Mode="@(ElevationInfoMode.OnTheGround)"
                            Offset="@(8.0343)"
                            Unit="@(ElevationUnit.Unknown)">
                        </GeoJSONLayerElevationInfo>
                    </GeoJSONLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        Assert.IsNotNull(geoJSONLayer!);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "edits"]);
        await AssertJavaScript("dispatchEvent", args: [geoJSONLayer!.Id, "refresh"]);
        int tries = 100;
        while (tries > 0 &&
            (editsResult is null || 
            refreshResult is null))
        {
            await Task.Delay(100);
            tries--;
        }
        Assert.IsInstanceOfType<GeoJSONLayerEditsEvent>(editsResult);
        Assert.IsInstanceOfType<RefreshEvent>(refreshResult);
        await AssertJavaScript("assertLayerExists", args: "geojson");
        var applyEditsMethodResult = await geoJSONLayer.ApplyEdits(new GeoJSONLayerApplyEditsEdits([new Graphic(new Polygon([new MapPath([new MapPoint([984.6510]),
                            new MapPoint([774.2882,
                                244.6173])])],
                        new SpatialReference(1,
                                "libero",
                                "ex",
                                "dicta"),
                        new Point(0.5623,
                                -81.8213,
                                -18.3606,
                                -73.5513,
                                333.8533,
                            new SpatialReference(9,
                                    "ut",
                                    "et",
                                    "ducimus"),
                                true,
                                true,
                                660.0571),
                            true,
                            true,
                            true),
                    new TextSymbol("delectus illo eum",
                        new MapColor(24, 85, 233),
                        new MapColor(218, 182, 245),
                            new Dimension(517.7950),
                        new MapFont(new Dimension(8.9132),
                                "Courier New",
                            MapFontStyle.Oblique,
                            FontWeight.Normal,
                            TextDecoration.LineThrough),
                            480.8247,
                        new MapColor(31, 135, 71),
                        new MapColor(30, 6, 181),
                            940.2536,
                        HorizontalAlignment.Left,
                            true,
                            258.2057,
                            new Dimension(55.2513),
                            true),
                    new PopupTemplate("atque dolorem neque",
                            "laudantium",
                            ["quia"],
                        [new FieldInfo("password",
                                "sit",
                                "voluptates",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(1,
                                    true,
                                DateFormat.ShortDateShortTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("group",
                                "fugiat",
                                "ex",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.ShortMonthYear),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new RelationshipPopupContent("nihil maiores voluptatem",
                                "et porro placeat adipisci",
                                3,
                                "sunt",
                            [new RelatedRecordsInfoFieldOrder("voluptatibus",
                                OrderBy.Desc)],
                                9)],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "password",
                                "consequuntur molestiae mollitia",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("odit quo ab",
                                "https://picsum.photos/640/480/?image=505",
                                "2a8a4937-d595-7f16-55c7-f400bbe74e7f",
                                () => { Console.WriteLine("neque"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "minima")]),
                        new AttributesDictionary(),
                        true,
                        "aut",
                        "tempora",
                        new GraphicOrigin(Guid.NewGuid(),
                            "natus",
                            6)),
                new Graphic(new Point(-50.8475,
                            5.0685,
                            -59.8112,
                            -33.7014,
                            698.2703,
                        new SpatialReference(6,
                                "qui",
                                "doloribus",
                                "atque"),
                            true,
                            true,
                            268.5290),
                    new TextSymbol("libero praesentium qui",
                        new MapColor(14, 153, 241),
                        new MapColor(67, 189, 228),
                            new Dimension(329.5574),
                        new MapFont(new Dimension(799.9855),
                                "Garamond",
                            MapFontStyle.Normal,
                            FontWeight.Bold,
                            TextDecoration.Underline),
                            893.1909,
                        new MapColor(108, 215, 189),
                        new MapColor(58, 42, 38),
                            841.8201,
                        HorizontalAlignment.Left,
                            true,
                            359.2899,
                            new Dimension(234.9510),
                            true),
                    new PopupTemplate("impedit optio perferendis",
                            "et",
                            ["sit",
                                "aut"],
                        [new FieldInfo("avatar",
                                "nesciunt",
                                "ut",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.ShortDateLeShortTime),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("password",
                                "sapiente",
                                "minima",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(5,
                                    true,
                                DateFormat.ShortDateLeLongTime),
                                true,
                                true,
                            StatisticType.Sum)],
                        [new FieldsPopupContent([new FieldInfo("avatar",
                                    "minima",
                                    "fuga",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(5,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "nobis natus",
                                "deleniti perferendis eaque"),
                        new TextPopupContent("quasi aut nemo")],
                        [new ExpressionInfo("var x = $feature.X; var y = $feature.Y; return x + ', ' + y;",
                                "id",
                                "nihil molestiae delectus",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.Name;",
                                "avatar",
                                "reprehenderit cum alias",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("ex voluptates doloribus",
                                "https://picsum.photos/640/480/?image=442",
                                "3e5a0266-80ae-807a-9768-50a6c5923ca4",
                                () => { Console.WriteLine("nihil"); return Task.CompletedTask; },
                                "email",
                                true,
                                true,
                                true,
                                "tempore")]),
                        new AttributesDictionary(),
                        true,
                        "et",
                        "itaque",
                        new GraphicOrigin(Guid.NewGuid(),
                            "ut",
                            2))],
                [new Graphic(new Extent(12.3792,
                            -114.4673,
                            49.6295,
                            -54.3591,
                            845.8538,
                            383.9924,
                            394.5429,
                            899.4179,
                        new SpatialReference(8,
                                "tempore",
                                "in",
                                "totam"),
                            true,
                            true),
                    new TextSymbol("eum illo excepturi",
                        new MapColor(21, 236, 153),
                        new MapColor(228, 119, 202),
                            new Dimension(679.6987),
                        new MapFont(new Dimension(306.1358),
                                "Arial",
                            MapFontStyle.Italic,
                            FontWeight.Bold,
                            TextDecoration.LineThrough),
                            253.4272,
                        new MapColor(10, 42, 232),
                        new MapColor(118, 93, 222),
                            461.7453,
                        HorizontalAlignment.Center,
                            true,
                            341.9957,
                            new Dimension(833.1346),
                            true),
                    new PopupTemplate("voluptas neque est",
                            "maiores",
                            ["est"],
                        [new FieldInfo("token",
                                "quod",
                                "sapiente",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLeLongTime24),
                                true,
                                true,
                            StatisticType.Sum),
                        new FieldInfo("comment",
                                "aliquid",
                                "maiores",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLongTime),
                                true,
                                true,
                            StatisticType.Max)],
                        [new MediaPopupContent("aliquam cumque voluptatibus",
                                "ex et consequatur quia",
                            [new BarChartMediaInfo("non illo ab",
                                    "ab",
                                    "et ut ratione",
                                new ChartMediaInfoValue(["repellendus",
                                        "non"],
                                        "aliquam",
                                        "magni",
                                    [new ChartMediaInfoValueSeries("title",
                                            "vel",
                                            180.6014)],
                                    [new MapColor(140, 97, 22),
                                    new MapColor(99, 42, 24)])),
                            new ImageMediaInfo("eos tenetur aut",
                                    "qui",
                                    "non ipsum accusamus",
                                new ImageMediaInfoValue("https://toni.name",
                                        "http://buford.net"),
                                    668.1155)],
                                1)],
                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "token",
                                "ipsa facilis labore",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "title",
                                "fugiat quia perspiciatis",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("in in quia",
                                "https://picsum.photos/640/480/?image=562",
                                "31228e07-3eef-705a-624f-669bc0ef2eaa",
                                () => { Console.WriteLine("debitis"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "qui"),
                                new ActionButton("corrupti quam harum",
                                    "https://picsum.photos/640/480/?image=1058",
                                    "22a53e73-0bd2-b803-6589-beecf193544e",
                                    () => { Console.WriteLine("rerum"); return Task.CompletedTask; },
                                    "id",
                                    true,
                                    true,
                                    true,
                                    "voluptatem")]),
                        new AttributesDictionary(),
                        true,
                        "suscipit",
                        "veritatis",
                        new GraphicOrigin(Guid.NewGuid(),
                            "quia",
                            3)),
                new Graphic(new Polyline([new MapPath([new MapPoint([803.7345,
                                574.6553])]),
                            new MapPath([new MapPoint([560.2863,
                                    355.1318]),
                                new MapPoint([517.2073,
                                    455.8125])])],
                        new SpatialReference(1,
                                "atque",
                                "et",
                                "voluptas"),
                            true,
                            true),
                    new TextSymbol("vel tempora voluptates",
                        new MapColor(170, 221, 55),
                        new MapColor(251, 170, 7),
                            new Dimension(876.8666),
                        new MapFont(new Dimension(14.4135),
                                "Courier New",
                            MapFontStyle.Oblique,
                            FontWeight.Bold,
                            TextDecoration.None),
                            85.9965,
                        new MapColor(124, 236, 204),
                        new MapColor(118, 215, 177),
                            341.2560,
                        HorizontalAlignment.Center,
                            true,
                            921.1663,
                            new Dimension(810.0462),
                            true),
                    new PopupTemplate("quo dicta aut",
                            "earum",
                            ["et"],
                        [new FieldInfo("createdAt",
                                "corrupti",
                                "dicta",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(9,
                                    true,
                                DateFormat.LongMonthYear),
                                true,
                                true,
                            StatisticType.Var)],
                        [new AttachmentsPopupContent("et sed sed",
                                "est doloremque explicabo eum",
                                AttachmentsPopupContentDisplayType.Auto)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "phone",
                                "doloribus dolores sapiente",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("iusto dolorem enim",
                                "https://picsum.photos/640/480/?image=225",
                                "6fd4b717-53d3-6058-074a-f6235aa1b5ff",
                                () => { Console.WriteLine("aut"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "id")]),
                        new AttributesDictionary(),
                        true,
                        "iste",
                        "laudantium",
                        new GraphicOrigin(Guid.NewGuid(),
                            "et",
                            1))],
                    ["cum"],
                [new Graphic(new Polyline([new MapPath([new MapPoint([771.3269])]),
                            new MapPath([new MapPoint([932.4556,
                                    641.3866])])],
                        new SpatialReference(5,
                                "quisquam",
                                "earum",
                                "rerum"),
                            true,
                            true),
                    new TextSymbol("voluptas et sit",
                        new MapColor(210, 169, 89),
                        new MapColor(151, 12, 82),
                            new Dimension(292.6906),
                        new MapFont(new Dimension(53.0989),
                                "Courier New",
                            MapFontStyle.Italic,
                            FontWeight.Bolder,
                            TextDecoration.Underline),
                            64.1170,
                        new MapColor(29, 206, 151),
                        new MapColor(13, 246, 89),
                            752.4211,
                        HorizontalAlignment.Center,
                            true,
                            262.3199,
                            new Dimension(730.5690),
                            true),
                    new PopupTemplate("quas recusandae laborum",
                            "inventore",
                            ["blanditiis"],
                        [new FieldInfo("group",
                                "aut",
                                "corporis",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongMonthDayYear),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("id",
                                "doloribus",
                                "qui",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(6,
                                    true,
                                DateFormat.LongMonthDayYearShortTime24),
                                true,
                                true,
                            StatisticType.Var)],
                        [new TextPopupContent("enim consequatur sequi"),
                        new AttachmentsPopupContent("aut cupiditate odio",
                                "debitis voluptatem",
                                AttachmentsPopupContentDisplayType.Preview)],
                        [new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "id",
                                "in ex beatae",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("var area = Geometry($feature).area; return area;",
                                "group",
                                "corporis molestias laudantium",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("sit et non",
                                "https://picsum.photos/640/480/?image=413",
                                "34b78969-79de-5241-aae1-a968b9196219",
                                () => { Console.WriteLine("sunt"); return Task.CompletedTask; },
                                "title",
                                true,
                                true,
                                true,
                                "et"),
                                new ActionButton("commodi sunt debitis",
                                    "https://picsum.photos/640/480/?image=87",
                                    "20dc3fe5-3f38-6a89-23ea-52174c58b9a3",
                                    () => { Console.WriteLine("aspernatur"); return Task.CompletedTask; },
                                    "email",
                                    true,
                                    true,
                                    true,
                                    "nihil")]),
                        new AttributesDictionary(),
                        true,
                        "libero",
                        "modi",
                        new GraphicOrigin(Guid.NewGuid(),
                            "eos",
                            4))]));
        Assert.IsNotNull(applyEditsMethodResult);
        var createPopupTemplateMethodResult = await geoJSONLayer.CreatePopupTemplate(new CreatePopupTemplateOptions(["est",
                    "possimus"],
                    ["group",
                        "createdAt"]));
        Assert.IsNotNull(createPopupTemplateMethodResult);
        var createQueryMethodResult = await geoJSONLayer.CreateQuery();
        Assert.IsNotNull(createQueryMethodResult);
        var getFieldMethodResult = await geoJSONLayer.GetField("status");
        Assert.IsNotNull(getFieldMethodResult);
        var getFieldDomainMethodResult = await geoJSONLayer.GetFieldDomain("group",
            new GeoJSONLayerGetFieldDomainOptions(new Graphic(new Polygon([new MapPath([new MapPoint([863.8249]),
                            new MapPoint([413.1080,
                                305.7218])])],
                        new SpatialReference(8,
                                "iusto",
                                "provident",
                                "pariatur"),
                        new Point(93.1550,
                                76.2649,
                                -1.1956,
                                44.7550,
                                62.3427,
                            new SpatialReference(9,
                                    "et",
                                    "aut",
                                    "velit"),
                                true,
                                true,
                                361.7761),
                            true,
                            true,
                            true),
                    new TextSymbol("officiis totam officia",
                        new MapColor(218, 98, 0),
                        new MapColor(24, 130, 119),
                            new Dimension(319.9011),
                        new MapFont(new Dimension(598.8810),
                                "Bookman",
                            MapFontStyle.Oblique,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            103.5176,
                        new MapColor(149, 9, 225),
                        new MapColor(56, 192, 17),
                            476.8697,
                        HorizontalAlignment.Left,
                            true,
                            924.9010,
                            new Dimension(667.9136),
                            true),
                    new PopupTemplate("doloribus qui aliquid",
                            "officiis",
                            ["odio",
                                "libero"],
                        [new FieldInfo("createdAt",
                                "suscipit",
                                "voluptas",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(2,
                                    true,
                                DateFormat.ShortDateLeShortTime24),
                                true,
                                true,
                            StatisticType.Max),
                        new FieldInfo("token",
                                "dolor",
                                "repudiandae",
                            StringFieldOption.TextArea,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.LongDateShortTime),
                                true,
                                true,
                            StatisticType.Max)],
                        [new FieldsPopupContent([new FieldInfo("avatar",
                                    "odio",
                                    "inventore",
                                StringFieldOption.TextArea,
                                new FieldInfoFormat(2,
                                        true,
                                    DateFormat.ShortMonthYear),
                                    true,
                                    true,
                                StatisticType.Count),
                            new FieldInfo("comment",
                                    "nihil",
                                    "voluptas",
                                StringFieldOption.RichText,
                                new FieldInfoFormat(4,
                                        true,
                                    DateFormat.ShortDateLeLongTime24),
                                    true,
                                    true,
                                StatisticType.Avg)],
                                "consequuntur qui",
                                "et quis nobis")],
                        [new ExpressionInfo("if ($feature.Age > 21) { return 'Adult'; } else { return 'Minor'; }",
                                "group",
                                "dolor aspernatur error",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("accusamus architecto eum",
                                "https://picsum.photos/640/480/?image=434",
                                "84b8cbb8-f461-515e-6656-c0ba2696f126",
                                () => { Console.WriteLine("ut"); return Task.CompletedTask; },
                                "email",
                                true,
                                true,
                                true,
                                "dolorem")]),
                        new AttributesDictionary(),
                        true,
                        "delectus",
                        "aut",
                        new GraphicOrigin(Guid.NewGuid(),
                            "ut",
                            5))));
        Assert.IsNotNull(getFieldDomainMethodResult);
        var queryExtentMethodResult = await geoJSONLayer.QueryExtent(new Query([6,
                    3],
                    true,
                    33.4342,
                    394.2267,
                    "6.3.2.1",
                new Polygon([new MapPath([new MapPoint([899.4550]),
                        new MapPoint([863.6225])])],
                    new SpatialReference(5,
                            "asperiores",
                            "voluptatibus",
                            "est"),
                    new Point(-61.4178,
                            86.6505,
                            -81.5956,
                            26.6643,
                            460.3743,
                        new SpatialReference(5,
                                "sed",
                                "est",
                                "repudiandae"),
                            true,
                            true,
                            991.5989),
                        true,
                        true,
                        true),
                    8,
                    ["alias",
                        "dolor"],
                    "minima",
                    new DateTime(2022, 10, 2, 4, 19, 8),
                    33.7861,
                    1,
                    "quasi",
                    6),
                default);
        Assert.IsNotNull(queryExtentMethodResult);
        var queryFeatureCountMethodResult = await geoJSONLayer.QueryFeatureCount(new Query([7,
                    8],
                    true,
                    541.5217,
                    252.5550,
                    "4.9.3.6",
                new Polygon([new MapPath([new MapPoint([59.6687,
                            489.7604])]),
                        new MapPath([new MapPoint([572.1096,
                                813.5734])])],
                    new SpatialReference(9,
                            "magnam",
                            "animi",
                            "ducimus"),
                    new Point(-37.4636,
                            -11.1820,
                            -66.9864,
                            55.4983,
                            178.0680,
                        new SpatialReference(1,
                                "autem",
                                "dolorem",
                                "ut"),
                            true,
                            true,
                            92.0931),
                        true,
                        true,
                        true),
                    7,
                    ["ipsum"],
                    "doloremque",
                    new DateTime(2018, 9, 17, 7, 46, 50),
                    526.9079,
                    7,
                    "illum",
                    7),
                default);
        Assert.IsNotNull(queryFeatureCountMethodResult);
        var queryFeaturesMethodResult = await geoJSONLayer.QueryFeatures(new Query([8],
                    true,
                    536.4432,
                    592.2487,
                    "5.9.6.8",
                new Polygon([new MapPath([new MapPoint([50.7168,
                            229.3596])])],
                    new SpatialReference(2,
                            "magni",
                            "ipsam",
                            "ducimus"),
                    new Point(-87.3717,
                            52.9259,
                            99.4742,
                            -87.7549,
                            776.4439,
                        new SpatialReference(6,
                                "corporis",
                                "quasi",
                                "soluta"),
                            true,
                            true,
                            435.5478),
                        true,
                        true,
                        true),
                    3,
                    ["non"],
                    "ipsum",
                    new DateTime(2006, 6, 11, 12, 47, 38),
                    798.6565,
                    7,
                    "magnam",
                    5),
                default);
        Assert.IsNotNull(queryFeaturesMethodResult);
        var queryObjectIdsMethodResult = await geoJSONLayer.QueryObjectIds(new Query([9,
                    5],
                    true,
                    184.0074,
                    896.7537,
                    "5.9.3.8",
                new Point(-175.0395,
                        -71.3599,
                        22.7799,
                        46.1053,
                        31.1197,
                    new SpatialReference(8,
                            "culpa",
                            "vel",
                            "eos"),
                        true,
                        true,
                        994.1186),
                    6,
                    ["cupiditate",
                        "rerum"],
                    "vel",
                    new DateTime(2023, 2, 23, 4, 17, 45),
                    421.0666,
                    6,
                    "nemo",
                    9),
                default);
        Assert.IsNotNull(queryObjectIdsMethodResult);
        await geoJSONLayer.Refresh();
        ListMode testListMode = ListMode.Show;
        await geoJSONLayer.SetListMode(testListMode);
        var listMode = await geoJSONLayer.GetListMode();
        Assert.AreEqual(testListMode, listMode);
        BlendMode testBlendMode = BlendMode.Xor;
        await geoJSONLayer.SetBlendMode(testBlendMode);
        var blendMode = await geoJSONLayer.GetBlendMode();
        Assert.AreEqual(testBlendMode, blendMode);
        GeoJSONLayerElevationInfo testElevationInfo = new GeoJSONLayerElevationInfo(new GeoJSONLayerElevationInfoFeatureExpressionInfo("var area = Geometry($feature).area; return area;",
                        "inventore hic inventore"),
                ElevationInfoMode.OnTheGround,
                    95.5454,
                ElevationUnit.Centimeters);
        await geoJSONLayer.SetElevationInfo(testElevationInfo);
        var elevationInfo = await geoJSONLayer.GetElevationInfo();
        Assert.AreEqual(testElevationInfo, elevationInfo);
        FeatureEffect testFeatureEffect = new FeatureEffect([new Effect("quas",
                    27752957.1140),
                    new Effect("reiciendis",
                        38276866.3246)],
                    true,
                new FeatureFilter(454.9076,
                    new Polygon([new MapPath([new MapPoint([728.1853]),
                            new MapPoint([484.4006,
                                437.7175])]),
                            new MapPath([new MapPoint([270.6447]),
                                new MapPoint([396.7970,
                                    930.9113])])],
                        new SpatialReference(4,
                                "quo",
                                "nam",
                                "quam"),
                        new Point(124.1334,
                                14.8014,
                                48.1253,
                                5.9173,
                                162.4179,
                            new SpatialReference(8,
                                    "id",
                                    "perspiciatis",
                                    "temporibus"),
                                true,
                                true,
                                400.2290),
                            true,
                            true,
                            true),
                        [6],
                    SpatialRelationship.Contains,
                    new TimeExtent(new DateTime(2011, 2, 23, 21, 48, 33),
                            new DateTime(2010, 4, 22, 15, 53, 33)),
                        QueryUnits.Miles,
                        "Age > 21"),
                    [new Effect("enim",
                        16872046.3132),
                        new Effect("voluptatem",
                            34908855.5193)]);
        await geoJSONLayer.SetFeatureEffect(testFeatureEffect);
        var featureEffect = await geoJSONLayer.GetFeatureEffect();
        Assert.AreEqual(testFeatureEffect, featureEffect);
        IReadOnlyList<Field> testFields = [new Field(default,
                    "updatedAt",
                    "fugit",
                    "perferendis nisi magni blanditiis",
                    8,
                    true,
                    true,
                    new { Value = "nisi" },
                FieldValueType.NameOrTitle,
                    new CodedValueDomain<string>([new CodedValue<string>()],
                        "group"))];
        await geoJSONLayer.SetFields(testFields);
        var fields = await geoJSONLayer.GetFields();
        Assert.AreEqual(testFields, fields);
        Extent testFullExtent = new Extent(-102.2240,
                    13.3653,
                    -23.8701,
                    -61.5425,
                    237.6362,
                    697.8406,
                    261.7381,
                    84.7970,
                new SpatialReference(3,
                        "eum",
                        "debitis",
                        "impedit"),
                    true,
                    true);
        await geoJSONLayer.SetFullExtent(testFullExtent);
        var fullExtent = await geoJSONLayer.GetFullExtent();
        Assert.AreEqual(testFullExtent, fullExtent);
        SimpleGeometryType testGeometryType = SimpleGeometryType.Point;
        await geoJSONLayer.SetGeometryType(testGeometryType);
        var geometryType = await geoJSONLayer.GetGeometryType();
        Assert.AreEqual(testGeometryType, geometryType);
        IReadOnlyList<Label> testLabelingInfo = [new Label(LabelPlacement.AboveLeft,
                    "molestias",
                    new LabelExpressionInfo(),
                    true,
                DeconflictionStrategy.None,
                LabelPosition.Curved,
                    5821309.4675,
                    46427.5628,
                    true,
                    new Dimension(5.5902),
                new TextSymbol("tempora necessitatibus rem",
                    new MapColor(3, 207, 57),
                    new MapColor(44, 157, 253),
                        new Dimension(965.9681),
                    new MapFont(new Dimension(915.6821),
                            "Verdana",
                        MapFontStyle.Normal,
                        FontWeight.Bolder,
                        TextDecoration.LineThrough),
                        286.3220,
                    new MapColor(27, 47, 248),
                    new MapColor(142, 209, 172),
                        617.2846,
                    HorizontalAlignment.Center,
                        true,
                        616.4927,
                        new Dimension(819.3312),
                        true),
                    true,
                    "Country = 'Canada'")];
        await geoJSONLayer.SetLabelingInfo(testLabelingInfo);
        var labelingInfo = await geoJSONLayer.GetLabelingInfo();
        Assert.AreEqual(testLabelingInfo, labelingInfo);
        IReadOnlyList<OrderedLayerOrderBy> testOrderBy = [new OrderedLayerOrderBy("aperiam",
                SortOrder.Ascending,
                    "quia")];
        await geoJSONLayer.SetOrderBy(testOrderBy);
        var orderBy = await geoJSONLayer.GetOrderBy();
        Assert.AreEqual(testOrderBy, orderBy);
        PopupTemplate testPopupTemplate = new PopupTemplate("dolores et ut",
                    "fugit",
                    ["harum",
                        "ducimus"],
                [new FieldInfo("id",
                        "provident",
                        "quia",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(1,
                            true,
                        DateFormat.LongMonthDayYearShortTime24),
                        true,
                        true,
                    StatisticType.Avg),
                new FieldInfo("token",
                        "perspiciatis",
                        "voluptatibus",
                    StringFieldOption.RichText,
                    new FieldInfoFormat(9,
                            true,
                        DateFormat.ShortDateLeLongTime),
                        true,
                        true,
                    StatisticType.Stddev)],
                [new RelationshipPopupContent("qui quasi soluta",
                        "magni nobis",
                        4,
                        "sapiente",
                    [new RelatedRecordsInfoFieldOrder("deserunt",
                        OrderBy.Desc),
                    new RelatedRecordsInfoFieldOrder("est",
                        OrderBy.Asc)],
                        6),
                new FieldsPopupContent([new FieldInfo("id",
                            "nulla",
                            "autem",
                        StringFieldOption.TextBox,
                        new FieldInfoFormat(1,
                                true,
                            DateFormat.ShortDateLeShortTime),
                            true,
                            true,
                        StatisticType.Min)],
                        "quisquam quidem asperiores vel",
                        "animi non ab")],
                [new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "updatedAt",
                        "iure sed dicta",
                        ExpressionInfoReturnType.String),
                new ExpressionInfo("return $feature.Population / $feature.Area;",
                        "name",
                        "ut nemo soluta",
                        ExpressionInfoReturnType.String)],
                    true,
                    true,
                    [new ActionButton("eum aliquam quam",
                        "https://picsum.photos/640/480/?image=364",
                        "714d7b82-b621-a852-3141-0a27b0b86da5",
                        () => { Console.WriteLine("sit"); return Task.CompletedTask; },
                        "name",
                        true,
                        true,
                        true,
                        "autem")]);
        await geoJSONLayer.SetPopupTemplate(testPopupTemplate);
        var popupTemplate = await geoJSONLayer.GetPopupTemplate();
        Assert.AreEqual(testPopupTemplate, popupTemplate);
        PortalItem testPortalItem = new PortalItem();
        await geoJSONLayer.SetPortalItem(testPortalItem);
        var portalItem = await geoJSONLayer.GetPortalItem();
        Assert.AreEqual(testPortalItem, portalItem);
        Renderer testRenderer = new SimpleRenderer(new TextSymbol("assumenda corrupti unde",
                    new MapColor(12, 240, 180),
                    new MapColor(161, 133, 185),
                        new Dimension(562.0278),
                    new MapFont(new Dimension(373.5280),
                            "Bookman",
                        MapFontStyle.Italic,
                        FontWeight.Lighter,
                        TextDecoration.LineThrough),
                        750.4998,
                    new MapColor(155, 221, 180),
                    new MapColor(67, 16, 235),
                        941.1780,
                    HorizontalAlignment.Center,
                        true,
                        651.9016,
                        new Dimension(473.2313),
                        true),
                    "omnis",
                [new SizeVariable("itaque",
                        new Dimension(948.6864),
                        new Dimension(339.3242),
                        564.4109,
                        563.3624,
                        VisualValueRepresentation.Radius,
                        VisualValueUnit.Inches,
                        "quae",
                        "molestias",
                        true,
                        VisualAxis.Depth,
                        "quidem",
                        "odit similique ea",
                    new VisualVariableLegendOptions(true,
                            "aut mollitia assumenda"))],
                new AuthoringInfo(ClassificationMethod.DefinedInterval,
                    new AlgorithmicColorRamp(Algorithm.Hsv,
                        new MapColor(232, 221, 154),
                        new MapColor(64, 122, 157)),
                        455.8939,
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(650.3984,
                                428.3042)],
                            "velit",
                            "quae",
                            "omnis"),
                    new AuthoringInfoField([new AuthoringInfoField1ClassBreakInfos(13.9329,
                                984.2094)],
                            "ipsam",
                            "et",
                            "iusto"),
                        ["iure"],
                    AuthoringInfoFlowTheme.WaveFront,
                        "non",
                        true,
                    LengthUnit.Meters,
                        502.3319,
                        785.9381,
                        373.4092,
                        378.2094));
        await geoJSONLayer.SetRenderer(testRenderer);
        var renderer = await geoJSONLayer.GetRenderer();
        Assert.AreEqual(testRenderer, renderer);
        SpatialReference testSpatialReference = new SpatialReference(3,
                    "est",
                    "voluptatem",
                    "odit");
        await geoJSONLayer.SetSpatialReference(testSpatialReference);
        var spatialReference = await geoJSONLayer.GetSpatialReference();
        Assert.AreEqual(testSpatialReference, spatialReference);
        IReadOnlyList<FeatureTemplate> testTemplates = [new FeatureTemplate("et eius nobis dignissimos",
                DrawingTool.RightArrow,
                    "comment",
                new Graphic(new Extent(-141.6222,
                            -44.4747,
                            48.3528,
                            -85.2850,
                            425.9574,
                            60.3283,
                            39.7728,
                            910.5196,
                        new SpatialReference(4,
                                "repellat",
                                "nisi",
                                "ea"),
                            true,
                            true),
                    new TextSymbol("odio rem minus",
                        new MapColor(87, 222, 219),
                        new MapColor(139, 34, 0),
                            new Dimension(405.7722),
                        new MapFont(new Dimension(551.6321),
                                "Arial",
                            MapFontStyle.Normal,
                            FontWeight.Bolder,
                            TextDecoration.None),
                            230.9790,
                        new MapColor(249, 38, 21),
                        new MapColor(153, 232, 231),
                            973.5873,
                        HorizontalAlignment.Right,
                            true,
                            265.6472,
                            new Dimension(620.8341),
                            true),
                    new PopupTemplate("necessitatibus dolorem nesciunt",
                            "esse",
                            ["reprehenderit"],
                        [new FieldInfo("email",
                                "quo",
                                "et",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(3,
                                    true,
                                DateFormat.LongDate),
                                true,
                                true,
                            StatisticType.Stddev)],
                        [new TextPopupContent("aliquid quis voluptate")],
                        [new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "token",
                                "quasi in asperiores",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature.City + ', ' + $feature.Country;",
                                "category",
                                "repellat officiis ut",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("similique odit qui",
                                "https://picsum.photos/640/480/?image=523",
                                "740cd376-52ac-c841-aa87-bfa9037ba24e",
                                () => { Console.WriteLine("facilis"); return Task.CompletedTask; },
                                "createdAt",
                                true,
                                true,
                                true,
                                "voluptate")]),
                        new AttributesDictionary(),
                        true,
                        "deleniti",
                        "et",
                        new GraphicOrigin(Guid.NewGuid(),
                            "illum",
                            5)),
                    new Thumbnail("ut",
                        "dolor",
                        69.2830,
                        132.8364)),
            new FeatureTemplate("amet aut",
                DrawingTool.AutoCompletePolygon,
                    "email",
                new Graphic(new Point(171.8813,
                            -65.8073,
                            -118.1707,
                            13.1502,
                            190.2925,
                        new SpatialReference(9,
                                "unde",
                                "voluptas",
                                "nesciunt"),
                            true,
                            true,
                            758.2485),
                    new TextSymbol("nesciunt ut quia",
                        new MapColor(174, 215, 49),
                        new MapColor(119, 187, 196),
                            new Dimension(928.6844),
                        new MapFont(new Dimension(423.6714),
                                "Bookman",
                            MapFontStyle.Italic,
                            FontWeight.Lighter,
                            TextDecoration.LineThrough),
                            406.9505,
                        new MapColor(140, 68, 235),
                        new MapColor(39, 143, 27),
                            844.4862,
                        HorizontalAlignment.Right,
                            true,
                            584.7161,
                            new Dimension(423.2017),
                            true),
                    new PopupTemplate("et qui ipsum",
                            "doloremque",
                            ["ut"],
                        [new FieldInfo("status",
                                "culpa",
                                "vel",
                            StringFieldOption.TextBox,
                            new FieldInfoFormat(8,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Min),
                        new FieldInfo("token",
                                "repudiandae",
                                "culpa",
                            StringFieldOption.RichText,
                            new FieldInfoFormat(7,
                                    true,
                                DateFormat.LongMonthDayYearLongTime),
                                true,
                                true,
                            StatisticType.Max)],
                        [new TextPopupContent("est dignissimos soluta"),
                        new RelationshipPopupContent("maiores cupiditate deleniti",
                                "tempore reiciendis assumenda beatae",
                                1,
                                "ea",
                            [new RelatedRecordsInfoFieldOrder("facere",
                                OrderBy.Desc),
                            new RelatedRecordsInfoFieldOrder("non",
                                OrderBy.Asc)],
                                4)],
                        [new ExpressionInfo("return $feature['FieldName'];",
                                "phone",
                                "cupiditate laboriosam dolor",
                                ExpressionInfoReturnType.String),
                        new ExpressionInfo("return $feature['FieldName'];",
                                "comment",
                                "praesentium expedita cupiditate",
                                ExpressionInfoReturnType.String)],
                            true,
                            true,
                            [new ActionButton("consequatur voluptas natus",
                                "https://picsum.photos/640/480/?image=189",
                                "05c82129-4961-b1ea-88d1-5d1a7527a495",
                                () => { Console.WriteLine("qui"); return Task.CompletedTask; },
                                "phone",
                                true,
                                true,
                                true,
                                "reprehenderit"),
                                new ActionButton("laborum tempora omnis",
                                    "https://picsum.photos/640/480/?image=137",
                                    "078b915c-66d7-d414-351f-55342e2446e5",
                                    () => { Console.WriteLine("provident"); return Task.CompletedTask; },
                                    "updatedAt",
                                    true,
                                    true,
                                    true,
                                    "est")]),
                        new AttributesDictionary(),
                        true,
                        "aut",
                        "itaque",
                        new GraphicOrigin(Guid.NewGuid(),
                            "distinctio",
                            2)),
                    new Thumbnail("iste",
                        "sit",
                        246.7178,
                        55.4449))];
        await geoJSONLayer.SetTemplates(testTemplates);
        var templates = await geoJSONLayer.GetTemplates();
        Assert.AreEqual(testTemplates, templates);
        TimeExtent testTimeExtent = new TimeExtent(new DateTime(2015, 6, 17, 9, 41, 6),
                    new DateTime(2002, 1, 9, 21, 23, 43));
        await geoJSONLayer.SetTimeExtent(testTimeExtent);
        var timeExtent = await geoJSONLayer.GetTimeExtent();
        Assert.AreEqual(testTimeExtent, timeExtent);
        TimeInfo testTimeInfo = new TimeInfo("consequatur",
                    "eius",
                new TimeExtent(new DateTime(2007, 2, 19, 12, 56, 38),
                        new DateTime(2017, 5, 6, 11, 20, 26)),
                new TimeInterval(TemporalTime.Seconds,
                        862.3587),
                    [new DateTime(2006, 5, 20, 22, 54, 19),
                        new DateTime(2010, 10, 19, 21, 33, 43)],
                    "Europe/Minsk",
                    "qui");
        await geoJSONLayer.SetTimeInfo(testTimeInfo);
        var timeInfo = await geoJSONLayer.GetTimeInfo();
        Assert.AreEqual(testTimeInfo, timeInfo);
        TimeInterval testTimeOffset = new TimeInterval(TemporalTime.Seconds,
                    768.8951);
        await geoJSONLayer.SetTimeOffset(testTimeOffset);
        var timeOffset = await geoJSONLayer.GetTimeOffset();
        Assert.AreEqual(testTimeOffset, timeOffset);
        TimeExtent testVisibilityTimeExtent = new TimeExtent(new DateTime(2007, 3, 23, 1, 31, 43),
                    new DateTime(2014, 4, 11, 1, 41, 54));
        await geoJSONLayer.SetVisibilityTimeExtent(testVisibilityTimeExtent);
        var visibilityTimeExtent = await geoJSONLayer.GetVisibilityTimeExtent();
        Assert.AreEqual(testVisibilityTimeExtent, visibilityTimeExtent);
    }
}
