@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@* ReSharper disable once InconsistentNaming *@

@code {

    [TestMethod]
    public async Task TestCanRenderTileLayerWithPortalIdAndSublayers(Action renderHandler,
        Action<LayerViewCreateEvent> layerViewCreated)
    {
        TileLayer? layer = null;
        
        AddMapRenderFragment(
            @<MapView class="map-view"
                      OnViewRendered="renderHandler"
                      OnLayerViewCreate="layerViewCreated">
                <Map>
                    <TileLayer @ref="layer" Title="World Imagery">
                        <PortalItem PortalItemId="10df2279f9684e4a9f6a7f08febac2a9" />
                    </TileLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        
        LayerViewCreateEvent createEvent = await WaitForLayerToRender<TileLayer>();
        Assert.IsInstanceOfType<TileLayer>(createEvent.Layer);
        TileLayer createdLayer = (TileLayer)createEvent.Layer;
        Assert.AreEqual(layer?.Id, createdLayer.Id);
        Sublayer firstSublayer = layer!.Sublayers![0];
        await firstSublayer.SetPopupEnabled(false);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [firstSublayer.Id, "popupEnabled", false]);
        
        Assert.IsTrue(layer!.Sublayers!.Count > 0);
        Assert.IsTrue(layer.AllSublayers!.Count > 0);
        await AssertJavaScript("assertLayerExists", args: "tile");
    }
    
    [TestMethod]
    public async Task TestCanRenderTileLayerWithUrlAndNestedSublayers(Action renderHandler,
        Action<LayerViewCreateEvent> layerViewCreated)
    {
        TileLayer? layer = null;
        
        AddMapRenderFragment(
            @<MapView class="map-view"
                      OnViewRendered="renderHandler"
                      OnLayerViewCreate="layerViewCreated">
                <Map>
                    <TileLayer @ref="layer" Title="Encroachments" 
                               Url="https://elevation.arcgis.com/arcgis/rest/services/WorldElevation/DataExtents/MapServer" />
                </Map>
            </MapView>);
        await WaitForMapToRender();
        
        LayerViewCreateEvent createEvent = await WaitForLayerToRender<TileLayer>();
        Assert.IsInstanceOfType<TileLayer>(createEvent.Layer);
        TileLayer createdLayer = (TileLayer)createEvent.Layer;
        Assert.AreEqual(layer?.Id, createdLayer.Id);
        Sublayer firstSublayer = layer!.Sublayers!.First(l => l.Sublayers is { Count: > 0 });
        Sublayer firstSubSublayer = firstSublayer.Sublayers![0];
        Assert.IsNotNull(firstSubSublayer);
        await firstSublayer.SetPopupEnabled(false);
        await AssertJavaScript("assertObjectHasPropertyWithValue", args: [firstSublayer.Id, "popupEnabled", false]);
        
        Assert.IsTrue(layer!.Sublayers!.Count > 0);
        Assert.IsTrue(layer.AllSublayers!.Count > 0);
        await AssertJavaScript("assertLayerExists", args: "tile");
    }
}