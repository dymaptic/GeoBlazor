@inherits TestRunnerBase

@{
base.BuildRenderTree(__builder);
}

@code {
    [TestMethod]
    public async Task TestCanSerializeAndDeserializeGuidAttributes(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);

        await WaitForMapToRender();

        Point point = new(0, 0);
        Guid testGuid = Guid.NewGuid();
        Graphic testGraphic = new Graphic(point,
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10),
            attributes: new AttributesDictionary(new Dictionary<string, object?>
            {
                {"GUID_ID", testGuid}
            }));
        await mapView!.AddGraphic(testGraphic);
        await Task.Yield();
        ScreenPoint screenPoint = await mapView.ToScreen(point);
        HitTestResult result = await mapView.HitTest(screenPoint);
        GraphicHit graphicHit = (GraphicHit)result.Results[0];
        Assert.AreEqual(testGuid, graphicHit.Graphic.Attributes["GUID_ID"]);
    }

    [TestMethod]
    public async Task TestCanSerializeAndDeserializeFieldTypedAttributesOnFeatureLayer(Action renderHandler)
    {
        FeatureLayer? layer = null;
        FeatureLayerView? layerView = null;

        Graphic[] features =
        [
            new Graphic(new Point(0, 0), 
                attributes: new AttributesDictionary(new Dictionary<string, object?>
                {
                    {"OBJECTID", 1},
                    {"GUID", Guid.NewGuid()},
                    {"INT", 1234},
                    {"DOUBLE", 123456.789},
                    {"STRING", "string"},
                    {"DATETIME", new DateTime(2021, 1, 1, 5, 34, 12)},
                    {"DATE", new DateOnly(2021, 1, 1)},
                    {"TIME", new TimeOnly(12, 34, 56)},
                    {"TIMESTAMP", new DateTimeOffset(2021, 1, 1, 5, 34, 12, TimeSpan.Zero).ToUnixTimeMilliseconds()},
                    {"DATETIMESTAMP", new DateTimeOffset(2021, 1, 1, 5, 34, 12, TimeSpan.Zero).ToUnixTimeMilliseconds()}
                }))
        ];

        void onLayerCreated(LayerViewCreateEvent evt)
        {
            if (evt.Layer is FeatureLayer)
            {
                layerView = evt.LayerView as FeatureLayerView;
            }
        }
        
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler"
                      OnLayerViewCreate="onLayerCreated">
                <Map ArcGISDefaultBasemap="topo-vector">
                    <FeatureLayer @ref="layer" Source="features"
                                  GeometryType="GeometryType.Point"
                                  ObjectIdField="OBJECTID">
                        <Field Name="OBJECTID" Type="FieldType.Oid" />
                        <Field Name="GUID" Type="FieldType.Guid" />
                        <Field Name="INT" Type="FieldType.Integer" />
                        <Field Name="DOUBLE" Type="FieldType.Double" />
                        <Field Name="STRING" Type="FieldType.String" />
                        <Field Name="DATETIME" Type="FieldType.Date" />
                        <Field Name="DATE" Type="FieldType.DateOnly" />
                        <Field Name="TIME" Type="FieldType.TimeOnly" />
                        <Field Name="TIMESTAMP" Type="FieldType.TimestampOffset" />
                        <Field Name="DATETIMESTAMP" Type="FieldType.Date" />
                    </FeatureLayer>
                </Map>
            </MapView>);
        
        await WaitForMapToRender();
        int tries = 100;
        while (layerView is null && tries > 0)
        {
            await Task.Delay(100);
            tries--;
        }
        Query query = await layer!.CreateQuery();
        query.OutFields = ["OBJECTID", "GUID", "INT", "DOUBLE", "STRING", "DATETIME", "DATE", "TIME", "TIMESTAMP", "DATETIMESTAMP"];
        query.Where = "OBJECTID=1";
        FeatureSet? result = await layer.QueryFeatures(query);
        Assert.AreEqual(1, result!.Features!.Length);
        Graphic queriedFeature = result.Features[0];
        Assert.IsInstanceOfType<Guid>(queriedFeature.Attributes["GUID"]);
        Assert.AreEqual(features[0].Attributes["GUID"], queriedFeature.Attributes["GUID"]);
        Assert.IsInstanceOfType<int>(queriedFeature.Attributes["INT"]);
        Assert.AreEqual(features[0].Attributes["INT"], queriedFeature.Attributes["INT"]);
        Assert.IsInstanceOfType<double>(queriedFeature.Attributes["DOUBLE"]);
        Assert.AreEqual(features[0].Attributes["DOUBLE"], queriedFeature.Attributes["DOUBLE"]);
        Assert.IsInstanceOfType<string>(queriedFeature.Attributes["STRING"]);
        Assert.AreEqual(features[0].Attributes["STRING"], queriedFeature.Attributes["STRING"]);
        Assert.IsInstanceOfType<DateTime>(queriedFeature.Attributes["DATETIME"]);
        Assert.AreEqual(features[0].Attributes["DATETIME"], queriedFeature.Attributes["DATETIME"]);
        Assert.IsInstanceOfType<DateOnly>(queriedFeature.Attributes["DATE"]);
        Assert.AreEqual(features[0].Attributes["DATE"], queriedFeature.Attributes["DATE"]);
        Assert.IsInstanceOfType<TimeOnly>(queriedFeature.Attributes["TIME"]);
        Assert.AreEqual(features[0].Attributes["TIME"], queriedFeature.Attributes["TIME"]);
        Assert.IsInstanceOfType<DateTime>(queriedFeature.Attributes["TIMESTAMP"]);
        Assert.AreEqual(DateTimeOffset.FromUnixTimeMilliseconds((long)features[0].Attributes["TIMESTAMP"]!).DateTime, queriedFeature.Attributes["TIMESTAMP"]);   
        Assert.IsInstanceOfType<DateTime>(queriedFeature.Attributes["DATETIMESTAMP"]);
        Assert.AreEqual(DateTimeOffset.FromUnixTimeMilliseconds((long)features[0].Attributes["DATETIMESTAMP"]!).DateTime, queriedFeature.Attributes["DATETIMESTAMP"]);
    }
    
    [TestMethod]
    public async Task TestCanHitTestGraphicsWithAttributes(Action renderHandler)
    {
        MapView? view = null;
        GraphicsLayer? layer = null;
        AddMapRenderFragment( 
            @<MapView @ref="view"
                      class="map-view" 
                      OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery">
                    <GraphicsLayer @ref="layer" />
                </Map>
            </MapView>);

        await WaitForMapToRender();
        Graphic[] features =
        [
            new Graphic(new Point(0, 0), 
                attributes: new AttributesDictionary(new Dictionary<string, object?>
                {
                    {"OBJECTID", 1},
                    {"GUID", Guid.NewGuid()},
                    {"INT", 1234},
                    {"DOUBLE", 123456.789},
                    {"STRING", "string"},
                    {"DATETIME", new DateTime(2021, 1, 1, 5, 34, 12)},
                    {"DATE", new DateOnly(2021, 1, 1)},
                    {"TIME", new TimeOnly(12, 34, 56)},
                    {"TIMESTAMP", new DateTimeOffset(2021, 1, 1, 5, 34, 12, TimeSpan.Zero).ToUnixTimeMilliseconds()},
                    {"DATETIMESTAMP", new DateTimeOffset(2021, 1, 1, 5, 34, 12, TimeSpan.Zero).ToUnixTimeMilliseconds()}
                }))
        ];
        await layer!.Add(features);
        HitTestResult hitTestResult = await view!.HitTest((Point)features[0].Geometry!);
        Graphic hitGraphic = hitTestResult.Results.OfType<GraphicHit>().First().Graphic;
        Assert.AreEqual(features[0].Attributes["OBJECTID"], hitGraphic.Attributes["OBJECTID"]!);
        Assert.AreEqual(features[0].Attributes["GUID"], hitGraphic.Attributes["GUID"]);
        Assert.AreEqual(features[0].Attributes["INT"], hitGraphic.Attributes["INT"]!);
        Assert.AreEqual(features[0].Attributes["DOUBLE"], hitGraphic.Attributes["DOUBLE"]);
        Assert.AreEqual(features[0].Attributes["STRING"], hitGraphic.Attributes["STRING"]);
        Assert.AreEqual(features[0].Attributes["DATETIME"], hitGraphic.Attributes["DATETIME"]);
        Assert.AreEqual(features[0].Attributes["DATE"], DateOnly.FromDateTime((DateTime)hitGraphic.Attributes["DATE"]!));
        Assert.AreEqual(features[0].Attributes["TIME"], TimeOnly.FromDateTime((DateTime)hitGraphic.Attributes["TIME"]!));
        Assert.AreEqual(features[0].Attributes["TIMESTAMP"], hitGraphic.Attributes["TIMESTAMP"]);
        Assert.AreEqual(features[0].Attributes["DATETIMESTAMP"], hitGraphic.Attributes["DATETIMESTAMP"]);
    }
}