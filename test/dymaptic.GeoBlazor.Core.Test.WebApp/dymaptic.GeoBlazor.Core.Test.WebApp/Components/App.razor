<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <base href="/" />
        @{
#if ENABLE_COMPRESSION
        }
        <link rel="icon" href="@Assets["_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/favicon.ico"]" />
        <link href="@Assets[$"_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/css/site.css"]" rel="stylesheet" />
        <link href="@Assets["dymaptic.GeoBlazor.Core.Test.WebApp.styles.css"]" rel="stylesheet" />
        <link href="@Assets["_content/dymaptic.GeoBlazor.Core"]" />
        <link href="@Assets["_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared"]" />
        <link rel="stylesheet" href="@Assets["_content/dymaptic.GeoBlazor.Core/assets/esri/themes/dark/main.css"]" />
        <ImportMap />
        @{
#else
        }
        <link rel="icon" href="_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/favicon.ico" />
        <link href="_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/css/site.css" rel="stylesheet" />
        <link href="dymaptic.GeoBlazor.Core.Test.WebApp.styles.css" rel="stylesheet" />
        <link href="_content/dymaptic.GeoBlazor.Core" />
        <link href="_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared" />
        <link rel="stylesheet" href="_content/dymaptic.GeoBlazor.Core/assets/esri/themes/dark/main.css" />
        @{
#endif
        }
        
        <HeadOutlet @rendermode="@_configuredRenderMode" />
        
    </head>

    <body>
    @{
#if DEBUG
        // This should always be set to Server mode so that it can toggle on the server.
    }
        <RenderModeSelector @rendermode="@InteractiveServer" />
    @{
#endif
    }
        <Routes @rendermode="@_configuredRenderMode" />
        <script src="_framework/blazor.web.js"></script>
    </body>
</html>

@code {
    
    [Inject]
    public required IConfiguration Configuration { get; set; }
    
#if DEBUG
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        IComponentRenderMode oldRenderMode = _configuredRenderMode;
        _configuredRenderMode = Configuration.GetValue<string?>("RenderMode", "Auto") switch
        {
            "Server" => InteractiveServer,
            "WebAssembly" => InteractiveWebAssembly,
            _ => InteractiveAuto
        };
        
        if (oldRenderMode != _configuredRenderMode)
        {
            StateHasChanged();
        }
    }
#endif

    private IComponentRenderMode _configuredRenderMode = InteractiveAuto;
}