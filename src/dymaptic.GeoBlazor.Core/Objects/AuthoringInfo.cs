using System.Text.Json.Serialization;
using dymaptic.GeoBlazor.Core.Components;
using dymaptic.GeoBlazor.Core.Components.Renderers.ColorRamps;
using dymaptic.GeoBlazor.Core.Enums;
using dymaptic.GeoBlazor.Core.Model;
using Microsoft.AspNetCore.Components;

namespace dymaptic.GeoBlazor.Core.Objects;


/// <summary>
///    Authoring information related to generating renderers and visual variables with the Smart Mapping methods.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public class AuthoringInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    public AuthoringInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code.
    /// </summary>
    /// <param name="colorRamp">
    ///     Indicates the color ramp was used to create the symbols for Unique Value or Class Breaks renderer for Imagery Layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#colorRamp">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fadeRatio">
    ///     Only applicable to [HeatmapRenderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html) created with the [heatmap renderer creator](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-heatmap.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fadeRatio">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field1">
    ///     A numeric field used for generating a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html) along with [field2](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field2">
    ///     A numeric field used for generating a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html) along with [field1](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fields">
    ///     An array of string values representing field names used for creating a [predominance renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-predominance.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="focus">
    ///     The focus of a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#focus">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isAutoGenerated">
    ///     Indicates whether the renderer was created internally by the JS API's rendering engine for default [FeatureReductionCluster](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html) visualizations.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#isAutoGenerated">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lengthUnit">
    ///     Only applicable to renderer used in web scenes. Indicates the unit used in real-world sizes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#lengthUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxSliderValue">
    ///     Indicates the value of the upper handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#maxSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minSliderValue">
    ///     Indicates the value of the lower handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#minSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="numClasses">
    ///     The number of classes used to classify each field of a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#numClasses">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="standardDeviationInterval">
    ///     Indicates the standard deviation interval for each stop in a classed color or classed size renderer that was generated using the `standard-deviation` classification method.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#standardDeviationInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="statistics">
    ///     Only for renderers of type `univariate-color-size` with an `above-and-below` [univariateTheme](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#statistics">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visualVariables">
    ///     Contains authoring properties of visual variables generated from one of the Smart Mapping methods or sliders.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#visualVariables">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AuthoringInfo(
        ColorRamp? colorRamp = null,
        double? fadeRatio = null,
        AuthoringInfoField? field1 = null,
        AuthoringInfoField? field2 = null,
        IReadOnlyList<string>? fields = null,
        string? focus = null,
        bool? isAutoGenerated = null,
        LengthUnit? lengthUnit = null,
        double? maxSliderValue = null,
        double? minSliderValue = null,
        double? numClasses = null,
        double? standardDeviationInterval = null,
        AuthoringInfoStatistics? statistics = null,
        IReadOnlyList<AuthoringInfoVisualVariable>? visualVariables = null)
    {
#pragma warning disable BL0005
        ColorRamp = colorRamp;
        FadeRatio = fadeRatio;
        Field1 = field1;
        Field2 = field2;
        Fields = fields;
        Focus = focus;
        IsAutoGenerated = isAutoGenerated;
        LengthUnit = lengthUnit;
        MaxSliderValue = maxSliderValue;
        MinSliderValue = minSliderValue;
        NumClasses = numClasses;
        StandardDeviationInterval = standardDeviationInterval;
        Statistics = statistics;
        VisualVariables = visualVariables;
#pragma warning restore BL0005    
    }
    
    
    /// <inheritdoc />
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        foreach (Microsoft.AspNetCore.Components.ParameterValue parameterValue in parameters)
        {
            if (parameterValue is { Name: nameof(Fields), Value: IReadOnlyList<string> fields }
                && !fields.Equals(Fields))
            {
                Fields = new List<string>(fields);
            }
            if (parameterValue is { Name: nameof(VisualVariables), Value: IReadOnlyList<AuthoringInfoVisualVariable> visualVariables }
                && !visualVariables.Equals(VisualVariables))
            {
                VisualVariables = new List<AuthoringInfoVisualVariable>(visualVariables);
            }
        }
        await base.SetParametersAsync(parameters);
    }
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates the color ramp was used to create the symbols for Unique Value or Class Breaks renderer for Imagery Layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#colorRamp">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ColorRamp? ColorRamp { get; set; }
    
    /// <summary>
    ///     Only applicable to [HeatmapRenderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html) created with the [heatmap renderer creator](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-heatmap.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fadeRatio">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? FadeRatio { get; set; }
    
    /// <summary>
    ///     A numeric field used for generating a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html) along with [field2](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoField? Field1 { get; set; }
    
    /// <summary>
    ///     A numeric field used for generating a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html) along with [field1](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoField? Field2 { get; set; }
    
    /// <summary>
    ///     An array of string values representing field names used for creating a [predominance renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-predominance.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Fields { get; set; }
    
    /// <summary>
    ///     The focus of a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#focus">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Focus { get; set; }
    
    /// <summary>
    ///     Indicates whether the renderer was created internally by the JS API's rendering engine for default [FeatureReductionCluster](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html) visualizations.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#isAutoGenerated">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsAutoGenerated { get; set; }
    
    /// <summary>
    ///     Only applicable to renderer used in web scenes. Indicates the unit used in real-world sizes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#lengthUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LengthUnit? LengthUnit { get; set; }
    
    /// <summary>
    ///     Indicates the value of the upper handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#maxSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxSliderValue { get; set; }
    
    /// <summary>
    ///     Indicates the value of the lower handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#minSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinSliderValue { get; set; }
    
    /// <summary>
    ///     The number of classes used to classify each field of a [relationship renderer](https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#numClasses">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NumClasses { get; set; }
    
    /// <summary>
    ///     Indicates the standard deviation interval for each stop in a classed color or classed size renderer that was generated using the `standard-deviation` classification method.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#standardDeviationInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? StandardDeviationInterval { get; set; }
    
    /// <summary>
    ///     Only for renderers of type `univariate-color-size` with an `above-and-below` [univariateTheme](https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#statistics">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoStatistics? Statistics { get; set; }
    
    /// <summary>
    ///     Contains authoring properties of visual variables generated from one of the Smart Mapping methods or sliders.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#visualVariables">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<AuthoringInfoVisualVariable>? VisualVariables { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorRamp property.
    /// </summary>
    public async Task<ColorRamp?> GetColorRamp()
    {
        ColorRamp = await GetProperty<ColorRamp>(nameof(ColorRamp), false);
        ModifiedParameters["ColorRamp"] = ColorRamp;
        return ColorRamp;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the FadeRatio property.
    /// </summary>
    public async Task<double?> GetFadeRatio()
    {
        FadeRatio = await GetProperty<double>(nameof(FadeRatio), false);
        ModifiedParameters["FadeRatio"] = FadeRatio;
        return FadeRatio;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the Field1 property.
    /// </summary>
    public async Task<AuthoringInfoField?> GetField1()
    {
        Field1 = await GetProperty<AuthoringInfoField>(nameof(Field1), false);
        ModifiedParameters["Field1"] = Field1;
        return Field1;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the Field2 property.
    /// </summary>
    public async Task<AuthoringInfoField?> GetField2()
    {
        Field2 = await GetProperty<AuthoringInfoField>(nameof(Field2), false);
        ModifiedParameters["Field2"] = Field2;
        return Field2;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the Fields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetFields()
    {
        Fields = await GetProperty<IReadOnlyList<string>>(nameof(Fields), false);
        ModifiedParameters["Fields"] = Fields;
        return Fields;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the Focus property.
    /// </summary>
    public async Task<string?> GetFocus()
    {
        Focus = await GetProperty<string>(nameof(Focus), false);
        ModifiedParameters["Focus"] = Focus;
        return Focus;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the IsAutoGenerated property.
    /// </summary>
    public async Task<bool?> GetIsAutoGenerated()
    {
        IsAutoGenerated = await GetProperty<bool>(nameof(IsAutoGenerated), false);
        ModifiedParameters["IsAutoGenerated"] = IsAutoGenerated;
        return IsAutoGenerated;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the LengthUnit property.
    /// </summary>
    public async Task<LengthUnit?> GetLengthUnit()
    {
        LengthUnit = await GetProperty<LengthUnit>(nameof(LengthUnit), false);
        ModifiedParameters["LengthUnit"] = LengthUnit;
        return LengthUnit;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxSliderValue property.
    /// </summary>
    public async Task<double?> GetMaxSliderValue()
    {
        MaxSliderValue = await GetProperty<double>(nameof(MaxSliderValue), false);
        ModifiedParameters["MaxSliderValue"] = MaxSliderValue;
        return MaxSliderValue;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the MinSliderValue property.
    /// </summary>
    public async Task<double?> GetMinSliderValue()
    {
        MinSliderValue = await GetProperty<double>(nameof(MinSliderValue), false);
        ModifiedParameters["MinSliderValue"] = MinSliderValue;
        return MinSliderValue;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the NumClasses property.
    /// </summary>
    public async Task<double?> GetNumClasses()
    {
        NumClasses = await GetProperty<double>(nameof(NumClasses), false);
        ModifiedParameters["NumClasses"] = NumClasses;
        return NumClasses;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the StandardDeviationInterval property.
    /// </summary>
    public async Task<double?> GetStandardDeviationInterval()
    {
        StandardDeviationInterval = await GetProperty<double>(nameof(StandardDeviationInterval), false);
        ModifiedParameters["StandardDeviationInterval"] = StandardDeviationInterval;
        return StandardDeviationInterval;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the Statistics property.
    /// </summary>
    public async Task<AuthoringInfoStatistics?> GetStatistics()
    {
        Statistics = await GetProperty<AuthoringInfoStatistics>(nameof(Statistics), false);
        ModifiedParameters["Statistics"] = Statistics;
        return Statistics;
    }

    /// <summary>
    ///     Asynchronously retrieve the current value of the VisualVariables property.
    /// </summary>
    public async Task<IReadOnlyList<AuthoringInfoVisualVariable>?> GetVisualVariables()
    {
        VisualVariables = await GetProperty<IReadOnlyList<AuthoringInfoVisualVariable>>(nameof(VisualVariables), false);
        ModifiedParameters["VisualVariables"] = VisualVariables;
        return VisualVariables;
    }

#endregion

#region Property Setters
    
    /// <summary>
    ///    Asynchronously set the value of the ColorRamp property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorRamp(ColorRamp value)
    {
        ColorRamp = value;
        ModifiedParameters["ColorRamp"] = value;
        await SetProperty(nameof(ColorRamp), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FadeRatio property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFadeRatio(double value)
    {
        FadeRatio = value;
        ModifiedParameters["FadeRatio"] = value;
        await SetProperty(nameof(FadeRatio), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field1 property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField1(AuthoringInfoField value)
    {
        Field1 = value;
        ModifiedParameters["Field1"] = value;
        await SetProperty(nameof(Field1), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field2 property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField2(AuthoringInfoField value)
    {
        Field2 = value;
        ModifiedParameters["Field2"] = value;
        await SetProperty(nameof(Field2), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Fields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFields(IReadOnlyList<string> value)
    {
        Fields = value;
        ModifiedParameters["Fields"] = value;
        await SetProperty(nameof(Fields), value, false);
    }
    
    
    /// <summary>
    ///    Asynchronously set the value of the Focus property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFocus(string value)
    {
        Focus = value;
        ModifiedParameters["Focus"] = value;
        await SetProperty(nameof(Focus), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsAutoGenerated property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsAutoGenerated(bool value)
    {
        IsAutoGenerated = value;
        ModifiedParameters["IsAutoGenerated"] = value;
        await SetProperty(nameof(IsAutoGenerated), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LengthUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLengthUnit(LengthUnit value)
    {
        LengthUnit = value;
        ModifiedParameters["LengthUnit"] = value;
        await SetProperty(nameof(LengthUnit), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxSliderValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxSliderValue(double value)
    {
        MaxSliderValue = value;
        ModifiedParameters["MaxSliderValue"] = value;
        await SetProperty(nameof(MaxSliderValue), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinSliderValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinSliderValue(double value)
    {
        MinSliderValue = value;
        ModifiedParameters["MinSliderValue"] = value;
        await SetProperty(nameof(MinSliderValue), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumClasses property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumClasses(double value)
    {
        NumClasses = value;
        ModifiedParameters["NumClasses"] = value;
        await SetProperty(nameof(NumClasses), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StandardDeviationInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStandardDeviationInterval(double value)
    {
        StandardDeviationInterval = value;
        ModifiedParameters["StandardDeviationInterval"] = value;
        await SetProperty(nameof(StandardDeviationInterval), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Statistics property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStatistics(AuthoringInfoStatistics value)
    {
        Statistics = value;
        ModifiedParameters["Statistics"] = value;
        await SetProperty(nameof(Statistics), value, false);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisualVariables property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisualVariables(IReadOnlyList<AuthoringInfoVisualVariable> value)
    {
        VisualVariables = value;
        ModifiedParameters["VisualVariables"] = value;
        await SetProperty(nameof(VisualVariables), value, false);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFields(params string[] values)
    {
#pragma warning disable BL0007
        if (Fields is null)
        {
            Fields = new List<string>(values);
        }
        else
        {
            Fields = Fields.Concat(values).ToList();
        }
#pragma warning restore BL0007
 
        ModifiedParameters["Fields"] = Fields;
        await AddToProperty(nameof(Fields), values, false);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the VisualVariables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToVisualVariables(params AuthoringInfoVisualVariable[] values)
    {
#pragma warning disable BL0007
        if (VisualVariables is null)
        {
            VisualVariables = new List<AuthoringInfoVisualVariable>(values);
        }
        else
        {
            VisualVariables = VisualVariables.Concat(values).ToList();
        }
#pragma warning restore BL0007
 
        ModifiedParameters["VisualVariables"] = VisualVariables;
        await AddToProperty(nameof(VisualVariables), values, false);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFields(params string[] values)
    {
#pragma warning disable BL0007
        if (Fields is not null)
        {
            Fields = Fields.Except(values).ToList();
        }
#pragma warning restore BL0007
        
        ModifiedParameters["Fields"] = Fields;
        await RemoveFromProperty(nameof(Fields), values, false);
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the VisualVariables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromVisualVariables(params AuthoringInfoVisualVariable[] values)
    {
#pragma warning disable BL0007
        if (VisualVariables is not null)
        {
            VisualVariables = VisualVariables.Except(values).ToList();
        }
#pragma warning restore BL0007
        
        ModifiedParameters["VisualVariables"] = VisualVariables;
        await RemoveFromProperty(nameof(VisualVariables), values, false);
    }
    
#endregion





    public override async Task RegisterChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ColorRamp colorRamp:
                if (colorRamp != ColorRamp)
                {
                    ColorRamp = colorRamp;
                    
                }

                break;
            default:
                await base.RegisterChildComponent(child);
                
                break;
        }
    }

    public override async Task UnregisterChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ColorRamp _:
                ColorRamp = null;

                break;
            default:
                await base.UnregisterChildComponent(child);
                break;
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredChildren()
    {
        ColorRamp?.ValidateRequiredChildren();
        base.ValidateRequiredChildren();
    }
      
}
