#nullable enable
abstract dymaptic.GeoBlazor.Core.Components.ActionBase.Type.get -> string!
abstract dymaptic.GeoBlazor.Core.Components.ColorRamp.Type.get -> dymaptic.GeoBlazor.Core.Enums.ColorRampType
abstract dymaptic.GeoBlazor.Core.Components.Domain.Type.get -> string!
abstract dymaptic.GeoBlazor.Core.Components.DynamicDataSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
abstract dymaptic.GeoBlazor.Core.Components.DynamicLayer.Type.get -> string!
abstract dymaptic.GeoBlazor.Core.Components.FormInput.Type.get -> string!
abstract dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.Type.get -> dymaptic.GeoBlazor.Core.Enums.GeometryType
abstract dymaptic.GeoBlazor.Core.Components.Layers.Layer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
abstract dymaptic.GeoBlazor.Core.Components.MediaInfo.Type.get -> string!
abstract dymaptic.GeoBlazor.Core.Components.Popups.PopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
abstract dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.Type.get -> dymaptic.GeoBlazor.Core.Enums.RendererType
abstract dymaptic.GeoBlazor.Core.Components.SearchSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.SearchSourceType
abstract dymaptic.GeoBlazor.Core.Components.Symbols.Symbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
abstract dymaptic.GeoBlazor.Core.Components.VisualVariable.Type.get -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
abstract dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
abstract dymaptic.GeoBlazor.Core.Model.LogicComponent.ComponentName.get -> string!
dymaptic.GeoBlazor.Core.Attributes.AncestorPropertyReferenceAttribute
dymaptic.GeoBlazor.Core.Attributes.AncestorPropertyReferenceAttribute.AncestorPropertyReferenceAttribute() -> void
dymaptic.GeoBlazor.Core.Attributes.ArcGISMethodAttribute
dymaptic.GeoBlazor.Core.Attributes.ArcGISMethodAttribute.ArcGISMethodAttribute() -> void
dymaptic.GeoBlazor.Core.Attributes.ArcGISPropertyAttribute
dymaptic.GeoBlazor.Core.Attributes.ArcGISPropertyAttribute.ArcGISPropertyAttribute() -> void
dymaptic.GeoBlazor.Core.Attributes.RequiredPropertyAttribute
dymaptic.GeoBlazor.Core.Attributes.RequiredPropertyAttribute.OtherOptions.get -> string![]?
dymaptic.GeoBlazor.Core.Attributes.RequiredPropertyAttribute.RequiredPropertyAttribute(params string![]? otherOptions) -> void
dymaptic.GeoBlazor.Core.BlazorMode
dymaptic.GeoBlazor.Core.BlazorMode.Maui = 2 -> dymaptic.GeoBlazor.Core.BlazorMode
dymaptic.GeoBlazor.Core.BlazorMode.Server = 0 -> dymaptic.GeoBlazor.Core.BlazorMode
dymaptic.GeoBlazor.Core.BlazorMode.WebAssembly = 1 -> dymaptic.GeoBlazor.Core.BlazorMode
dymaptic.GeoBlazor.Core.Components.Abilities
dymaptic.GeoBlazor.Core.Components.Abilities.Abilities() -> void
dymaptic.GeoBlazor.Core.Components.Abilities.Abilities(bool? attachmentsContent = null, bool? chartAnimation = null, bool? customContent = null, bool? fieldsContent = null, bool? mediaContent = null, bool? textContent = null) -> void
dymaptic.GeoBlazor.Core.Components.Abilities.AttachmentsContent.get -> bool?
dymaptic.GeoBlazor.Core.Components.Abilities.AttachmentsContent.set -> void
dymaptic.GeoBlazor.Core.Components.Abilities.ChartAnimation.get -> bool?
dymaptic.GeoBlazor.Core.Components.Abilities.ChartAnimation.set -> void
dymaptic.GeoBlazor.Core.Components.Abilities.CustomContent.get -> bool?
dymaptic.GeoBlazor.Core.Components.Abilities.CustomContent.set -> void
dymaptic.GeoBlazor.Core.Components.Abilities.FieldsContent.get -> bool?
dymaptic.GeoBlazor.Core.Components.Abilities.FieldsContent.set -> void
dymaptic.GeoBlazor.Core.Components.Abilities.GetAttachmentsContent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Abilities.GetChartAnimation() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Abilities.GetCustomContent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Abilities.GetFieldsContent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Abilities.GetMediaContent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Abilities.GetTextContent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Abilities.MediaContent.get -> bool?
dymaptic.GeoBlazor.Core.Components.Abilities.MediaContent.set -> void
dymaptic.GeoBlazor.Core.Components.Abilities.SetAttachmentsContent(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Abilities.SetChartAnimation(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Abilities.SetCustomContent(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Abilities.SetFieldsContent(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Abilities.SetMediaContent(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Abilities.SetTextContent(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Abilities.TextContent.get -> bool?
dymaptic.GeoBlazor.Core.Components.Abilities.TextContent.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase
dymaptic.GeoBlazor.Core.Components.ActionBase.ActionBase() -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.ActionId.get -> string?
dymaptic.GeoBlazor.Core.Components.ActionBase.ActionId.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.Active.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActionBase.Active.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.CallbackFunction.get -> System.Func<System.Threading.Tasks.Task!>?
dymaptic.GeoBlazor.Core.Components.ActionBase.CallbackFunction.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.ClassName.get -> string?
dymaptic.GeoBlazor.Core.Components.ActionBase.ClassName.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.Disabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActionBase.Disabled.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.GetActionId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ActionBase.GetActive() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActionBase.GetClassName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ActionBase.GetDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActionBase.GetIcon() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ActionBase.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ActionBase.HasCallbackFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.ActionBase.Icon.get -> string?
dymaptic.GeoBlazor.Core.Components.ActionBase.Icon.set -> void
dymaptic.GeoBlazor.Core.Components.ActionBase.OnJsTriggerAction(dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent! triggerActionEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.SetActionId(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.SetActive(bool value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.SetClassName(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.SetDisabled(bool value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.SetIcon(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.SetTitle(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionBase.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.ActionBase.Title.set -> void
dymaptic.GeoBlazor.Core.Components.ActionButton
dymaptic.GeoBlazor.Core.Components.ActionButton.ActionButton() -> void
dymaptic.GeoBlazor.Core.Components.ActionButton.ActionButton(string? title = null, string? image = null, string? actionId = null, System.Func<System.Threading.Tasks.Task!>? callbackFunction = null, string? className = null, bool? active = null, bool? disabled = null, bool? visible = null, string? icon = null) -> void
dymaptic.GeoBlazor.Core.Components.ActionButton.GetImage() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ActionButton.Image.get -> string?
dymaptic.GeoBlazor.Core.Components.ActionButton.Image.set -> void
dymaptic.GeoBlazor.Core.Components.ActionButton.SetImage(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionToggle
dymaptic.GeoBlazor.Core.Components.ActionToggle.ActionToggle() -> void
dymaptic.GeoBlazor.Core.Components.ActionToggle.ActionToggle(string? title = null, string? actionId = null, System.Func<System.Threading.Tasks.Task!>? callbackFunction = null, bool? value = null, bool? active = null, bool? disabled = null, bool? visible = null, string? className = null, string? icon = null) -> void
dymaptic.GeoBlazor.Core.Components.ActionToggle.GetValue() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActionToggle.SetValue(bool value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActionToggle.Value.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActionToggle.Value.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.ActiveLayerInfo() -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.ActiveLayerInfo(bool? hideLayersNotInCurrentView = null, dymaptic.GeoBlazor.Core.Components.Layers.Layer? layer = null, dymaptic.GeoBlazor.Core.Components.LayerView? layerView = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ILegendElement!>? legendElements = null, bool? respectLayerVisibility = null, System.Collections.Generic.IReadOnlyList<long>? sublayerIds = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.AddToLegendElements(params dymaptic.GeoBlazor.Core.Interfaces.ILegendElement![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.AddToSublayerIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Children.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Children.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetHideLayersNotInCurrentView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetIsScaleDriven() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetLayerView() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerView?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetLegendElements() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ILegendElement!>?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetReady() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetRespectLayerVisibility() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetSublayerIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.HideLayersNotInCurrentView.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.HideLayersNotInCurrentView.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.IsScaleDriven.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.IsScaleDriven.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.LayerView.get -> dymaptic.GeoBlazor.Core.Components.LayerView?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.LayerView.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.LegendElements.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ILegendElement!>?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.LegendElements.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Opacity.get -> double?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Opacity.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Ready.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Ready.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.RemoveFromLegendElements(params dymaptic.GeoBlazor.Core.Interfaces.ILegendElement![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.RemoveFromSublayerIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.RespectLayerVisibility.get -> bool?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.RespectLayerVisibility.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Scale.get -> double?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetHideLayersNotInCurrentView(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetLayerView(dymaptic.GeoBlazor.Core.Components.LayerView? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetLegendElements(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ILegendElement!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetRespectLayerVisibility(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetSublayerIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SublayerIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.SublayerIds.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Version.get -> double?
dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.Version.set -> void
dymaptic.GeoBlazor.Core.Components.AggregateField
dymaptic.GeoBlazor.Core.Components.AggregateField.AggregateField() -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.AggregateField(string? alias = null, bool? isAutoGenerated = null, string? name = null, dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo? onStatisticExpression = null, string? onStatisticField = null, dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType? statisticType = null) -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.Alias.get -> string?
dymaptic.GeoBlazor.Core.Components.AggregateField.Alias.set -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.GetAlias() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AggregateField.GetIsAutoGenerated() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AggregateField.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AggregateField.GetOnStatisticExpression() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.AggregateField.GetOnStatisticField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AggregateField.GetStatisticType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType?>!
dymaptic.GeoBlazor.Core.Components.AggregateField.IsAutoGenerated.get -> bool?
dymaptic.GeoBlazor.Core.Components.AggregateField.IsAutoGenerated.set -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.AggregateField.Name.set -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.OnStatisticExpression.get -> dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo?
dymaptic.GeoBlazor.Core.Components.AggregateField.OnStatisticExpression.set -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.OnStatisticField.get -> string?
dymaptic.GeoBlazor.Core.Components.AggregateField.OnStatisticField.set -> void
dymaptic.GeoBlazor.Core.Components.AggregateField.SetAlias(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AggregateField.SetIsAutoGenerated(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AggregateField.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AggregateField.SetOnStatisticExpression(dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AggregateField.SetOnStatisticField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AggregateField.SetStatisticType(dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AggregateField.StatisticType.get -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType?
dymaptic.GeoBlazor.Core.Components.AggregateField.StatisticType.set -> void
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.Algorithm.get -> dymaptic.GeoBlazor.Core.Enums.Algorithm
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.Algorithm.set -> void
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.AlgorithmicColorRamp() -> void
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.AlgorithmicColorRamp(dymaptic.GeoBlazor.Core.Enums.Algorithm algorithm, dymaptic.GeoBlazor.Core.Model.MapColor? fromColor = null, dymaptic.GeoBlazor.Core.Model.MapColor? toColor = null) -> void
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.FromColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.FromColor.set -> void
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.GetAlgorithm() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Algorithm?>!
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.GetFromColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.GetToColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.SetAlgorithm(dymaptic.GeoBlazor.Core.Enums.Algorithm value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.SetFromColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.SetToColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.ToColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.ToColor.set -> void
dymaptic.GeoBlazor.Core.Components.ApplicationProperties
dymaptic.GeoBlazor.Core.Components.ApplicationProperties.ApplicationProperties() -> void
dymaptic.GeoBlazor.Core.Components.ApplicationProperties.ApplicationProperties(dymaptic.GeoBlazor.Core.Components.Viewing? viewing = null) -> void
dymaptic.GeoBlazor.Core.Components.ApplicationProperties.GetViewing() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewing?>!
dymaptic.GeoBlazor.Core.Components.ApplicationProperties.SetViewing(dymaptic.GeoBlazor.Core.Components.Viewing? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ApplicationProperties.Viewing.get -> dymaptic.GeoBlazor.Core.Components.Viewing?
dymaptic.GeoBlazor.Core.Components.ApplicationProperties.Viewing.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.ArcGISImageServiceCapabilities() -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.ArcGISImageServiceCapabilities(dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration? mensuration = null, dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations? operations = null, dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery? query = null) -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.GetMensuration() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.GetOperations() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.GetQuery() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.Mensuration.get -> dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.Mensuration.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.Operations.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.Query.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.SetMensuration(dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.SetOperations(dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.SetQuery(dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.ArcGISImageServiceCapabilitiesMensuration() -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.ArcGISImageServiceCapabilitiesMensuration(bool? supports3D = null, bool? supportsAreaAndPerimeter = null, bool? supportsDistanceAndAngle = null, bool? supportsHeightFromBaseAndTop = null, bool? supportsHeightFromBaseAndTopShadow = null, bool? supportsHeightFromTopAndTopShadow = null, bool? supportsPointOrCentroid = null) -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupports3D() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupportsAreaAndPerimeter() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupportsDistanceAndAngle() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupportsHeightFromBaseAndTop() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupportsHeightFromBaseAndTopShadow() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupportsHeightFromTopAndTopShadow() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.GetSupportsPointOrCentroid() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupports3D(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupportsAreaAndPerimeter(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupportsDistanceAndAngle(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupportsHeightFromBaseAndTop(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupportsHeightFromBaseAndTopShadow(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupportsHeightFromTopAndTopShadow(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SetSupportsPointOrCentroid(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.Supports3D.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.Supports3D.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsAreaAndPerimeter.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsAreaAndPerimeter.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsDistanceAndAngle.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsDistanceAndAngle.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsHeightFromBaseAndTop.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsHeightFromBaseAndTop.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsHeightFromBaseAndTopShadow.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsHeightFromBaseAndTopShadow.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsHeightFromTopAndTopShadow.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsHeightFromTopAndTopShadow.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsPointOrCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesMensuration.SupportsPointOrCentroid.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.ArcGISImageServiceCapabilitiesOperations() -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.ArcGISImageServiceCapabilitiesOperations(bool? supportsCalculateVolume = null, bool? supportsComputeHistograms = null, bool? supportsComputePixelLocation = null, bool? supportsComputeStatisticsHistograms = null, bool? supportsDownload = null, bool? supportsExportImage = null, bool? supportsFindImages = null, bool? supportsGetImageUrl = null, bool? supportsGetSamples = null, bool? supportsIdentify = null, bool? supportsImageToMap = null, bool? supportsImageToMapMultiray = null, bool? supportsMapToImage = null, bool? supportsMeasure = null, bool? supportsProject = null, bool? supportsQuery = null, bool? supportsQueryBoundary = null, bool? supportsQueryGPSInfo = null) -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsCalculateVolume() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsComputeHistograms() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsComputePixelLocation() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsComputeStatisticsHistograms() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsDownload() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsExportImage() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsFindImages() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsGetImageUrl() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsGetSamples() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsIdentify() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsImageToMap() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsImageToMapMultiray() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsMapToImage() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsMeasure() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsProject() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsQuery() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsQueryBoundary() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.GetSupportsQueryGPSInfo() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsCalculateVolume(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsComputeHistograms(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsComputePixelLocation(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsComputeStatisticsHistograms(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsDownload(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsExportImage(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsFindImages(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsGetImageUrl(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsGetSamples(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsIdentify(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsImageToMap(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsImageToMapMultiray(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsMapToImage(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsMeasure(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsProject(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsQuery(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsQueryBoundary(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SetSupportsQueryGPSInfo(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsCalculateVolume.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsCalculateVolume.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsComputeHistograms.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsComputeHistograms.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsComputePixelLocation.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsComputePixelLocation.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsComputeStatisticsHistograms.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsComputeStatisticsHistograms.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsDownload.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsDownload.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsExportImage.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsExportImage.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsFindImages.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsFindImages.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsGetImageUrl.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsGetImageUrl.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsGetSamples.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsGetSamples.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsIdentify.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsIdentify.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsImageToMap.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsImageToMap.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsImageToMapMultiray.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsImageToMapMultiray.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsMapToImage.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsMapToImage.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsMeasure.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsMeasure.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsProject.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsProject.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsQuery.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsQueryBoundary.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsQueryBoundary.set -> void
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsQueryGPSInfo.get -> bool?
dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.SupportsQueryGPSInfo.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.AddToUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.AreaMeasurement2DViewModel() -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.AreaMeasurement2DViewModel(dymaptic.GeoBlazor.Core.Components.SnappingOptions! snappingOptions, dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? unit = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>? unitOptions = null) -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.GetMeasurement() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.GetMeasurementLabel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.GetSnappingOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SnappingOptions?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.GetUnitOptions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.Measurement.get -> dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.Measurement.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.MeasurementLabel.get -> dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.MeasurementLabel.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.RemoveFromUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.SetSnappingOptions(dymaptic.GeoBlazor.Core.Components.SnappingOptions! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.SetUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.SetUnitOptions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.SnappingOptions.get -> dymaptic.GeoBlazor.Core.Components.SnappingOptions?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.SnappingOptions.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.Start() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.Unit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.UnitOptions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.UnitOptions.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.Area.get -> double?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.Area.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.AreaMeasurement2DViewModelMeasurement() -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.AreaMeasurement2DViewModelMeasurement(double? area = null, dymaptic.GeoBlazor.Core.Components.Geometries.Polygon? geometry = null, double? perimeter = null) -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Polygon?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.Geometry.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.GetArea() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.GetGeometry() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.GetPerimeter() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.Perimeter.get -> double?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.Perimeter.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.SetArea(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.SetGeometry(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.SetPerimeter(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.Area.get -> string?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.Area.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.AreaMeasurement2DViewModelMeasurementLabel() -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.AreaMeasurement2DViewModelMeasurementLabel(string? area = null, string? perimeter = null) -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.GetArea() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.GetPerimeter() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.Perimeter.get -> string?
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.Perimeter.set -> void
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.SetArea(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurementLabel.SetPerimeter(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.Add.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.Add.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.AttachmentsCapabilitiesOperations() -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.AttachmentsCapabilitiesOperations(bool? add = null, bool? delete = null, bool? update = null) -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.Delete.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.Delete.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.GetAdd() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.GetDelete() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.GetUpdate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.SetAdd(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.SetDelete(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.SetUpdate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.Update.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.Update.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.AttachmentsOrderByInfo() -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.AttachmentsOrderByInfo(string? field = null, dymaptic.GeoBlazor.Core.Enums.SortOrder? order = null) -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.Field.get -> string?
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.Field.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.GetField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.GetOrder() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SortOrder?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.Order.get -> dymaptic.GeoBlazor.Core.Enums.SortOrder?
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.Order.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.SetField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo.SetOrder(dymaptic.GeoBlazor.Core.Enums.SortOrder? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.AddButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.AddButton.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.AddSubmitButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.AddSubmitButton.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.AttachmentsVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.AttachmentsVisibleElements(bool? addButton = null, bool? addSubmitButton = null, bool? cancelAddButton = null, bool? cancelUpdateButton = null, bool? deleteButton = null, bool? errorMessage = null, bool? progressBar = null, bool? updateButton = null) -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.CancelAddButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.CancelAddButton.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.CancelUpdateButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.CancelUpdateButton.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.DeleteButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.DeleteButton.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.ErrorMessage.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.ErrorMessage.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetAddButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetAddSubmitButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetCancelAddButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetCancelUpdateButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetDeleteButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetErrorMessage() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetProgressBar() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.GetUpdateButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.ProgressBar.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.ProgressBar.set -> void
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetAddButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetAddSubmitButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetCancelAddButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetCancelUpdateButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetDeleteButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetErrorMessage(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetProgressBar(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.SetUpdateButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.UpdateButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.UpdateButton.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.AddToFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.AddToVisualVariables(params dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.AuthoringInfo() -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.AuthoringInfo(dymaptic.GeoBlazor.Core.Enums.ClassificationMethod? classificationMethod = null, dymaptic.GeoBlazor.Core.Components.ColorRamp? colorRamp = null, double? fadeRatio = null, dymaptic.GeoBlazor.Core.Components.AuthoringInfoField? field1 = null, dymaptic.GeoBlazor.Core.Components.AuthoringInfoField? field2 = null, System.Collections.Generic.IReadOnlyList<string!>? fields = null, dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme? flowTheme = null, string? focus = null, bool? isAutoGenerated = null, dymaptic.GeoBlazor.Core.Enums.LengthUnit? lengthUnit = null, double? maxSliderValue = null, double? minSliderValue = null, double? numClasses = null, double? standardDeviationInterval = null, dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics? statistics = null, dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle? univariateSymbolStyle = null, dymaptic.GeoBlazor.Core.Enums.UnivariateTheme? univariateTheme = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable!>? visualVariables = null) -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.ClassificationMethod.get -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.ClassificationMethod.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.ColorRamp.get -> dymaptic.GeoBlazor.Core.Components.ColorRamp?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.ColorRamp.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.FadeRatio.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.FadeRatio.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Field1.get -> dymaptic.GeoBlazor.Core.Components.AuthoringInfoField?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Field1.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Field2.get -> dymaptic.GeoBlazor.Core.Components.AuthoringInfoField?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Field2.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Fields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.FlowTheme.get -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.FlowTheme.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Focus.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Focus.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetClassificationMethod() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ClassificationMethod?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetColorRamp() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ColorRamp?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetFadeRatio() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetField1() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AuthoringInfoField?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetField2() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AuthoringInfoField?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetFlowTheme() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetFocus() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetIsAutoGenerated() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetLengthUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LengthUnit?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetMaxSliderValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetMinSliderValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetNumClasses() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetStandardDeviationInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetStatistics() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetUnivariateSymbolStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetUnivariateTheme() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.UnivariateTheme?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.GetVisualVariables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable!>?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.IsAutoGenerated.get -> bool?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.IsAutoGenerated.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.LengthUnit.get -> dymaptic.GeoBlazor.Core.Enums.LengthUnit?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.LengthUnit.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.MaxSliderValue.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.MaxSliderValue.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.MinSliderValue.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.MinSliderValue.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.NumClasses.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.NumClasses.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.RemoveFromFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.RemoveFromVisualVariables(params dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetClassificationMethod(dymaptic.GeoBlazor.Core.Enums.ClassificationMethod? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetColorRamp(dymaptic.GeoBlazor.Core.Components.ColorRamp? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetFadeRatio(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetField1(dymaptic.GeoBlazor.Core.Components.AuthoringInfoField? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetField2(dymaptic.GeoBlazor.Core.Components.AuthoringInfoField? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetFlowTheme(dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetFocus(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetIsAutoGenerated(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetLengthUnit(dymaptic.GeoBlazor.Core.Enums.LengthUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetMaxSliderValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetMinSliderValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetNumClasses(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetStandardDeviationInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetStatistics(dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetUnivariateSymbolStyle(dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetUnivariateTheme(dymaptic.GeoBlazor.Core.Enums.UnivariateTheme? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.SetVisualVariables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.StandardDeviationInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.StandardDeviationInterval.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Statistics.get -> dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.Statistics.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.UnivariateSymbolStyle.get -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.UnivariateSymbolStyle.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.UnivariateTheme.get -> dymaptic.GeoBlazor.Core.Enums.UnivariateTheme?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.UnivariateTheme.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.VisualVariables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable!>?
dymaptic.GeoBlazor.Core.Components.AuthoringInfo.VisualVariables.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.AddToClassBreakInfos(params dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.AuthoringInfoField() -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.AuthoringInfoField(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos!>? classBreakInfos = null, string? field = null, string? label = null, string? normalizationField = null) -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.ClassBreakInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos!>?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.ClassBreakInfos.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.Field.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.Field.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.GetClassBreakInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos!>?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.GetField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.GetNormalizationField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.Label.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.NormalizationField.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.NormalizationField.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.RemoveFromClassBreakInfos(params dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.SetClassBreakInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.SetField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.SetNormalizationField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.AuthoringInfoField1ClassBreakInfos() -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.AuthoringInfoField1ClassBreakInfos(double? maxValue = null, double? minValue = null) -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.GetMaxValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.GetMinValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.MaxValue.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.MaxValue.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.MinValue.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.MinValue.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.SetMaxValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoField1ClassBreakInfos.SetMinValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.AuthoringInfoStatistics() -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.AuthoringInfoStatistics(double max, double min) -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.GetMax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.GetMin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.Max.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.Max.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.Min.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.Min.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.SetMax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoStatistics.SetMin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.AddToSizeStops(params dymaptic.GeoBlazor.Core.Components.SizeStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.AuthoringInfoVisualVariable() -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.AuthoringInfoVisualVariable(string? endTime = null, string? field = null, double? maxSliderValue = null, double? minSliderValue = null, string? normalizationField = null, double? referenceSizeScale = null, dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle? referenceSizeSymbolStyle = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>? sizeStops = null, string? startTime = null, dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle? style = null, dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme? theme = null, dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits? units = null) -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.EndTime.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.EndTime.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Field.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Field.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetEndTime() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetMaxSliderValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetMinSliderValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetNormalizationField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetReferenceSizeScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetReferenceSizeSymbolStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetSizeStops() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetStartTime() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetTheme() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.GetUnits() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits?>!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.MaxSliderValue.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.MaxSliderValue.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.MinSliderValue.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.MinSliderValue.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.NormalizationField.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.NormalizationField.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.ReferenceSizeScale.get -> double?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.ReferenceSizeScale.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.ReferenceSizeSymbolStyle.get -> dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.ReferenceSizeSymbolStyle.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.RemoveFromSizeStops(params dymaptic.GeoBlazor.Core.Components.SizeStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetEndTime(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetMaxSliderValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetMinSliderValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetNormalizationField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetReferenceSizeScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetReferenceSizeSymbolStyle(dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetSizeStops(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetStartTime(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetStyle(dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetTheme(dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SetUnits(dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SizeStops.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.SizeStops.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.StartTime.get -> string?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.StartTime.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Style.get -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Style.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Theme.get -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Theme.set -> void
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Units.get -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits?
dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.Units.set -> void
dymaptic.GeoBlazor.Core.Components.Background
dymaptic.GeoBlazor.Core.Components.Background.Background() -> void
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.BarChartMediaInfo() -> void
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.BarChartMediaInfo(string? title = null, string? caption = null, string? altText = null, dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value = null) -> void
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.GetValue() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?>!
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.SetValue(dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.Value.get -> dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?
dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput
dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput.BarcodeScannerInput() -> void
dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput.MaxLength.get -> int?
dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput.MaxLength.set -> void
dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput.MinLength.get -> int?
dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput.MinLength.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap
dymaptic.GeoBlazor.Core.Components.Basemap.AddToBaseLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.AddToReferenceLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.BaseLayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Components.Basemap.BaseLayers.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.Basemap() -> void
dymaptic.GeoBlazor.Core.Components.Basemap.Basemap(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? baseLayers = null, string? basemapId = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? referenceLayers = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, dymaptic.GeoBlazor.Core.Components.BasemapStyle? style = null, string? thumbnailUrl = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.Basemap.BasemapId.get -> string?
dymaptic.GeoBlazor.Core.Components.Basemap.BasemapId.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.CancelLoad() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.GetBaseLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetBasemapId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetLoaded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetReferenceLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BasemapStyle?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetThumbnailUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Basemap.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Basemap.IsFulfilled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Basemap.IsRejected() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Basemap.IsResolved() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Basemap.Layers.get -> System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>!
dymaptic.GeoBlazor.Core.Components.Basemap.Layers.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.Load(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Basemap.LoadAll() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.Basemap.Loaded.get -> bool?
dymaptic.GeoBlazor.Core.Components.Basemap.Loaded.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Basemap.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.ReferenceLayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Components.Basemap.ReferenceLayers.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.RemoveFromBaseLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.RemoveFromReferenceLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetBaseLayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetBasemapId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetReferenceLayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetStyle(dymaptic.GeoBlazor.Core.Components.BasemapStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetThumbnailUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Basemap.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Basemap.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.Style.get -> dymaptic.GeoBlazor.Core.Components.BasemapStyle?
dymaptic.GeoBlazor.Core.Components.Basemap.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.ThumbnailUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Basemap.ThumbnailUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Basemap.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Basemap.When(System.Func<System.Threading.Tasks.Task!>! callback, System.Func<System.Threading.Tasks.Task!>! errback) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.Basemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.Basemap.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.BasemapGalleryItem() -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.BasemapGalleryItem(dymaptic.GeoBlazor.Core.Components.Basemap? basemap = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.Error.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.GetBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.GetError() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Error?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.SetBasemap(dymaptic.GeoBlazor.Core.Components.Basemap? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.State.get -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.State.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.ActiveBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.ActiveBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.ActiveBasemapIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.ActiveBasemapIndex.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.BasemapEquals(dymaptic.GeoBlazor.Core.Components.Basemap! basemap1, dymaptic.GeoBlazor.Core.Components.Basemap! basemap2) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.BasemapGalleryViewModel() -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.BasemapGalleryViewModel(dymaptic.GeoBlazor.Core.Components.Basemap? activeBasemap = null, dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource? source = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.GetActiveBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.GetActiveBasemapIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.GetItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem!>?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.GetSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState?>!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.Items.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem!>?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.Items.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.SetActiveBasemap(dymaptic.GeoBlazor.Core.Components.Basemap? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.SetSource(dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.Source.get -> dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.Source.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState?
dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.BaseItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.BaseItems.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.BasemapLayerListViewModel() -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.BasemapLayerListViewModel(System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? baseListItemCreatedFunction = null, string? basemapTitle = null, bool? checkPublishStatusEnabled = null, bool? listModeDisabled = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? referenceListItemCreatedFunction = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.BasemapTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.BasemapTitle.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.CheckPublishStatusEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.CheckPublishStatusEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.GetBaseItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.GetBasemapTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.GetCheckPublishStatusEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.GetListModeDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.GetReferenceItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.HasCustomBaseListHandler.get -> bool
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.HasCustomReferenceListHandler.get -> bool
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.ListModeDisabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.ListModeDisabled.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.OnBaseListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task<object!>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.OnBaseListItemCreatedHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.OnBaseListItemCreatedHandler.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.OnReferenceListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task<object!>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.OnReferenceListItemCreatedHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.OnReferenceListItemCreatedHandler.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.ReferenceItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.ReferenceItems.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.SetBasemapTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.SetCheckPublishStatusEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.SetListModeDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.TriggerAction(dymaptic.GeoBlazor.Core.Components.ActionBase! action, dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.BaseLayers.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.BaseLayers.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.BasemapLayerListWidgetVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.BasemapLayerListWidgetVisibleElements(bool? baseLayers = null, bool? closeButton = null, bool? collapseButton = null, bool? editTitleButton = null, bool? errors = null, bool? filter = null, bool? flow = null, bool? heading = null, bool? referenceLayers = null, bool? statusIndicators = null, bool? temporaryLayerIndicators = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.CloseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.CloseButton.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.CollapseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.CollapseButton.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.EditTitleButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.EditTitleButton.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Errors.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Errors.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Filter.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Flow.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Flow.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetBaseLayers() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetCloseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetCollapseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetEditTitleButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetErrors() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetFilter() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetFlow() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetHeading() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetReferenceLayers() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetStatusIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.GetTemporaryLayerIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Heading.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.Heading.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.ReferenceLayers.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.ReferenceLayers.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetBaseLayers(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetCloseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetCollapseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetEditTitleButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetErrors(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetFilter(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetFlow(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetHeading(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetReferenceLayers(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetStatusIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.SetTemporaryLayerIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.StatusIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.StatusIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.TemporaryLayerIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.TemporaryLayerIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle
dymaptic.GeoBlazor.Core.Components.BasemapStyle.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.BasemapStyle.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.BasemapStyle() -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.BasemapStyle(dymaptic.GeoBlazor.Core.Enums.BasemapStyleName name, string? language = null, dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace? places = null, string? serviceUrl = null, string? worldview = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.GetLanguage() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.GetPlaces() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace?>!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.GetServiceUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.GetWorldview() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Language.get -> string?
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Language.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Name.get -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName?
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Name.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Places.get -> dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace?
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Places.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.ServiceUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.BasemapStyle.ServiceUrl.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapStyle.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.SetLanguage(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.SetName(dymaptic.GeoBlazor.Core.Enums.BasemapStyleName name) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.SetPlaces(dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.SetServiceUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.SetWorldview(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Worldview.get -> string?
dymaptic.GeoBlazor.Core.Components.BasemapStyle.Worldview.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.ActiveBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.ActiveBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.BasemapToggleViewModel() -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.BasemapToggleViewModel(dymaptic.GeoBlazor.Core.Components.Basemap? nextBasemap = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.GetActiveBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.GetNextBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.NextBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.NextBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.SetNextBasemap(dymaptic.GeoBlazor.Core.Components.Basemap? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.Toggle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements.BasemapToggleVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements.BasemapToggleVisibleElements(bool? title = null) -> void
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements.GetTitle() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements.SetTitle(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements.Title.get -> bool?
dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Bookmark
dymaptic.GeoBlazor.Core.Components.Bookmark.Bookmark() -> void
dymaptic.GeoBlazor.Core.Components.Bookmark.Bookmark(string? name = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail? thumbnail = null, dymaptic.GeoBlazor.Core.Components.Viewpoint? viewpoint = null) -> void
dymaptic.GeoBlazor.Core.Components.Bookmark.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Bookmark.GetThumbnail() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail?>!
dymaptic.GeoBlazor.Core.Components.Bookmark.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Bookmark.GetViewpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewpoint?>!
dymaptic.GeoBlazor.Core.Components.Bookmark.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Bookmark.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Bookmark.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Bookmark.SetThumbnail(dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Bookmark.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Bookmark.SetViewpoint(dymaptic.GeoBlazor.Core.Components.Viewpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Bookmark.Thumbnail.get -> dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail?
dymaptic.GeoBlazor.Core.Components.Bookmark.Thumbnail.set -> void
dymaptic.GeoBlazor.Core.Components.Bookmark.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Bookmark.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Bookmark.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Viewpoint?
dymaptic.GeoBlazor.Core.Components.Bookmark.Viewpoint.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.AddToLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Area.get -> dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Area.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.BookmarkOptionsScreenshotSettings() -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.BookmarkOptionsScreenshotSettings(dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea? area = null, int? height = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? layers = null, int? width = null) -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.GetArea() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.GetHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.GetLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.GetWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Height.get -> int?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Height.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Layers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Layers.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.RemoveFromLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.SetArea(dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.SetHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.SetLayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.SetWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Width.get -> int?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.Width.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.BookmarkOptionsScreenshotSettingsArea() -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.BookmarkOptionsScreenshotSettingsArea(int? height = null, int? width = null, double? x = null, double? y = null) -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.GetHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.GetWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.GetX() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.GetY() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.Height.get -> int?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.Height.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.SetHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.SetWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.SetX(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.SetY(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.Width.get -> int?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.Width.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.X.get -> double?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.X.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.Y.get -> double?
dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettingsArea.Y.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities.BookmarksCapabilities() -> void
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities.BookmarksCapabilities(bool? time = null) -> void
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities.GetTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities.SetTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities.Time.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities.Time.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.ActiveBookmark.get -> dymaptic.GeoBlazor.Core.Components.Bookmark?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.ActiveBookmark.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.AddToBookmarks(params dymaptic.GeoBlazor.Core.Components.Bookmark![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.Bookmarks.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.Bookmarks.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.BookmarksViewModel() -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.BookmarksViewModel(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>? bookmarks = null, dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities? capabilities = null, dymaptic.GeoBlazor.Core.Options.BookmarkOptions? defaultCreateOptions = null, dymaptic.GeoBlazor.Core.Options.BookmarkOptions? defaultEditOptions = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null) -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.Capabilities.get -> dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.CreateBookmark(dymaptic.GeoBlazor.Core.Options.BookmarkOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Bookmark?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.DefaultCreateOptions.get -> dymaptic.GeoBlazor.Core.Options.BookmarkOptions?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.DefaultCreateOptions.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.DefaultEditOptions.get -> dymaptic.GeoBlazor.Core.Options.BookmarkOptions?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.DefaultEditOptions.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.EditBookmark(dymaptic.GeoBlazor.Core.Components.Bookmark! bookmark, dymaptic.GeoBlazor.Core.Options.BookmarkOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Bookmark?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GetActiveBookmark() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Bookmark?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GetBookmarks() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GetDefaultCreateOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.BookmarkOptions?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GetDefaultEditOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.BookmarkOptions?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GoTo(dymaptic.GeoBlazor.Core.Components.Bookmark! bookmark) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.RemoveFromBookmarks(params dymaptic.GeoBlazor.Core.Components.Bookmark![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.SetBookmarks(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.SetCapabilities(dymaptic.GeoBlazor.Core.Components.BookmarksCapabilities? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.SetDefaultCreateOptions(dymaptic.GeoBlazor.Core.Options.BookmarkOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.SetDefaultEditOptions(dymaptic.GeoBlazor.Core.Options.BookmarkOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.AddBookmarkButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.AddBookmarkButton.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.BookmarksVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.BookmarksVisibleElements(bool? addBookmarkButton = null, bool? closeButton = null, bool? collapseButton = null, bool? editBookmarkButton = null, bool? filter = null, bool? flow = null, bool? heading = null, bool? thumbnail = null, bool? time = null) -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.CloseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.CloseButton.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.CollapseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.CollapseButton.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.EditBookmarkButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.EditBookmarkButton.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Filter.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Flow.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Flow.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetAddBookmarkButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetCloseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetCollapseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetEditBookmarkButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetFilter() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetFlow() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetHeading() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetThumbnail() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.GetTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Heading.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Heading.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetAddBookmarkButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetCloseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetCollapseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetEditBookmarkButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetFilter(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetFlow(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetHeading(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetThumbnail(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.SetTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Thumbnail.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Thumbnail.set -> void
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Time.get -> bool?
dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.Time.set -> void
dymaptic.GeoBlazor.Core.Components.Camera
dymaptic.GeoBlazor.Core.Components.Camera.Camera() -> void
dymaptic.GeoBlazor.Core.Components.Camera.Camera(double? fov = null, double? heading = null, dymaptic.GeoBlazor.Core.Components.CameraLayout? layout = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? position = null, double? tilt = null) -> void
dymaptic.GeoBlazor.Core.Components.Camera.Fov.get -> double?
dymaptic.GeoBlazor.Core.Components.Camera.Fov.set -> void
dymaptic.GeoBlazor.Core.Components.Camera.GetFov() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Camera.GetHeading() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Camera.GetLayout() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CameraLayout?>!
dymaptic.GeoBlazor.Core.Components.Camera.GetPosition() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Camera.GetTilt() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Camera.Heading.get -> double?
dymaptic.GeoBlazor.Core.Components.Camera.Heading.set -> void
dymaptic.GeoBlazor.Core.Components.Camera.Layout.get -> dymaptic.GeoBlazor.Core.Components.CameraLayout?
dymaptic.GeoBlazor.Core.Components.Camera.Layout.set -> void
dymaptic.GeoBlazor.Core.Components.Camera.Position.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Camera.Position.set -> void
dymaptic.GeoBlazor.Core.Components.Camera.SetFov(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Camera.SetHeading(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Camera.SetLayout(dymaptic.GeoBlazor.Core.Components.CameraLayout? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Camera.SetPosition(dymaptic.GeoBlazor.Core.Components.Geometries.Point? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Camera.SetTilt(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Camera.Tilt.get -> double?
dymaptic.GeoBlazor.Core.Components.Camera.Tilt.set -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout
dymaptic.GeoBlazor.Core.Components.CameraLayout.CameraLayout() -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout.CameraLayout(double? column = null, double? columns = null, double? row = null, double? rows = null) -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout.Column.get -> double?
dymaptic.GeoBlazor.Core.Components.CameraLayout.Column.set -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout.Columns.get -> double?
dymaptic.GeoBlazor.Core.Components.CameraLayout.Columns.set -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout.GetColumn() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CameraLayout.GetColumns() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CameraLayout.GetRow() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CameraLayout.GetRows() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CameraLayout.Row.get -> double?
dymaptic.GeoBlazor.Core.Components.CameraLayout.Row.set -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout.Rows.get -> double?
dymaptic.GeoBlazor.Core.Components.CameraLayout.Rows.set -> void
dymaptic.GeoBlazor.Core.Components.CameraLayout.SetColumn(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CameraLayout.SetColumns(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CameraLayout.SetRow(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CameraLayout.SetRows(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities
dymaptic.GeoBlazor.Core.Components.Capabilities.Analytics.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics?
dymaptic.GeoBlazor.Core.Components.Capabilities.Analytics.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Attachment.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment?
dymaptic.GeoBlazor.Core.Components.Capabilities.Attachment.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Capabilities() -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Capabilities(dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics? analytics = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment? attachment = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesData? data = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing? editing = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata? metadata = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations? operations = null, dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery? query = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins? queryAttributeBins = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated? queryRelated = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures? queryTopFeatures = null) -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Data.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesData?
dymaptic.GeoBlazor.Core.Components.Capabilities.Data.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Editing.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing?
dymaptic.GeoBlazor.Core.Components.Capabilities.Editing.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.GetAnalytics() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetAttachment() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetData() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesData?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetEditing() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetMetadata() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetOperations() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetQuery() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetQueryAttributeBins() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetQueryRelated() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.GetQueryTopFeatures() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures?>!
dymaptic.GeoBlazor.Core.Components.Capabilities.Metadata.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata?
dymaptic.GeoBlazor.Core.Components.Capabilities.Metadata.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Operations.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations?
dymaptic.GeoBlazor.Core.Components.Capabilities.Operations.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery?
dymaptic.GeoBlazor.Core.Components.Capabilities.Query.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.QueryAttributeBins.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins?
dymaptic.GeoBlazor.Core.Components.Capabilities.QueryAttributeBins.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated?
dymaptic.GeoBlazor.Core.Components.Capabilities.QueryRelated.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.QueryTopFeatures.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures?
dymaptic.GeoBlazor.Core.Components.Capabilities.QueryTopFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.Capabilities.SetAnalytics(dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetAttachment(dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetData(dymaptic.GeoBlazor.Core.Components.CapabilitiesData? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetEditing(dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetMetadata(dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetOperations(dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetQuery(dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetQueryAttributeBins(dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetQueryRelated(dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Capabilities.SetQueryTopFeatures(dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics.CapabilitiesAnalytics() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics.CapabilitiesAnalytics(bool? supportsCacheHint = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics.GetSupportsCacheHint() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics.SetSupportsCacheHint(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAnalytics.SupportsCacheHint.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.CapabilitiesAttachment() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.CapabilitiesAttachment(bool? supportsCacheHint = null, bool? supportsContentType = null, bool? supportsExifInfo = null, bool? supportsKeywords = null, bool? supportsName = null, bool? supportsOrderByFields = null, bool? supportsResize = null, bool? supportsSize = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsCacheHint() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsContentType() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsExifInfo() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsKeywords() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsName() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsOrderByFields() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsResize() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.GetSupportsSize() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsCacheHint(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsContentType(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsExifInfo(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsKeywords(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsName(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsOrderByFields(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsResize(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SetSupportsSize(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsCacheHint.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsContentType.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsContentType.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsExifInfo.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsExifInfo.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsKeywords.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsKeywords.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsName.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsName.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsOrderByFields.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsOrderByFields.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsResize.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsResize.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsSize.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesAttachment.SupportsSize.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.CapabilitiesData() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.CapabilitiesData(bool? isBranchVersioned = null, bool? isVersioned = null, bool? supportsAttachment = null, bool? supportsM = null, bool? supportsZ = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.GetIsBranchVersioned() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.GetIsVersioned() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.GetSupportsAttachment() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.GetSupportsM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.GetSupportsZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.IsBranchVersioned.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.IsBranchVersioned.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.IsVersioned.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.IsVersioned.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SetIsBranchVersioned(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SetIsVersioned(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SetSupportsAttachment(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SetSupportsM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SetSupportsZ(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SupportsAttachment.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SupportsAttachment.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SupportsM.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SupportsM.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SupportsZ.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesData.SupportsZ.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.CapabilitiesEditing() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.CapabilitiesEditing(bool? supportsDeleteByAnonymous = null, bool? supportsDeleteByOthers = null, bool? supportsGeometryUpdate = null, bool? supportsGlobalId = null, bool? supportsRollbackOnFailure = null, bool? supportsUpdateByAnonymous = null, bool? supportsUpdateByOthers = null, bool? supportsUpdateWithoutM = null, bool? supportsUploadWithItemId = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsDeleteByAnonymous() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsDeleteByOthers() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsGeometryUpdate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsGlobalId() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsRollbackOnFailure() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsUpdateByAnonymous() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsUpdateByOthers() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsUpdateWithoutM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.GetSupportsUploadWithItemId() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsDeleteByAnonymous(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsDeleteByOthers(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsGeometryUpdate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsGlobalId(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsRollbackOnFailure(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsUpdateByAnonymous(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsUpdateByOthers(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsUpdateWithoutM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SetSupportsUploadWithItemId(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsDeleteByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsDeleteByAnonymous.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsDeleteByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsDeleteByOthers.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsGeometryUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsGeometryUpdate.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsGlobalId.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsGlobalId.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsRollbackOnFailure.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsRollbackOnFailure.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUpdateByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUpdateByAnonymous.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUpdateByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUpdateByOthers.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUpdateWithoutM.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUpdateWithoutM.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUploadWithItemId.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesEditing.SupportsUploadWithItemId.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata.CapabilitiesMetadata() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata.CapabilitiesMetadata(bool? supportsAdvancedFieldProperties = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata.GetSupportsAdvancedFieldProperties() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata.SetSupportsAdvancedFieldProperties(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata.SupportsAdvancedFieldProperties.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesMetadata.SupportsAdvancedFieldProperties.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.CapabilitiesOperations() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.CapabilitiesOperations(bool? supportsAdd = null, bool? supportsCalculate = null, bool? supportsDelete = null, bool? supportsEditing = null, bool? supportsQuery = null, bool? supportsQueryAttachments = null, bool? supportsQueryTopFeatures = null, bool? supportsResizeAttachments = null, bool? supportsUpdate = null, bool? supportsValidateSql = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsAdd() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsCalculate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsDelete() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsEditing() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsQuery() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsQueryAttachments() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsQueryTopFeatures() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsResizeAttachments() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsUpdate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.GetSupportsValidateSql() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsAdd(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsCalculate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsDelete(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsEditing(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsQuery(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsQueryAttachments(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsQueryTopFeatures(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsResizeAttachments(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsUpdate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SetSupportsValidateSql(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsAdd.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsAdd.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsCalculate.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsCalculate.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsDelete.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsDelete.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsEditing.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsEditing.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsQuery.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsQueryAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsQueryAttachments.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsQueryTopFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsQueryTopFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsResizeAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsResizeAttachments.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsUpdate.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsValidateSql.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesOperations.SupportsValidateSql.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.CapabilitiesQueryAttributeBins() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.CapabilitiesQueryAttributeBins(dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes? supportedNormalizationTypes = null, dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics? supportedStatistics = null, bool? supportsAutoInterval = null, bool? supportsDate = null, bool? supportsFirstDayOfWeek = null, bool? supportsFixedBoundaries = null, bool? supportsFixedInterval = null, bool? supportsNormalization = null, bool? supportsReturnFullIntervalBin = null, bool? supportsSnapToData = null, bool? supportsSplitBy = null, bool? supportsStackBy = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportedNormalizationTypes() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportedStatistics() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsAutoInterval() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsDate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsFirstDayOfWeek() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsFixedBoundaries() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsFixedInterval() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsNormalization() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsReturnFullIntervalBin() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsSnapToData() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsSplitBy() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.GetSupportsStackBy() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportedNormalizationTypes(dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportedStatistics(dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsAutoInterval(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsDate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsFirstDayOfWeek(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsFixedBoundaries(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsFixedInterval(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsNormalization(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsReturnFullIntervalBin(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsSnapToData(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsSplitBy(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SetSupportsStackBy(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportedNormalizationTypes.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportedNormalizationTypes.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportedStatistics.get -> dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportedStatistics.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsAutoInterval.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsAutoInterval.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsDate.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsDate.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsFirstDayOfWeek.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsFirstDayOfWeek.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsFixedBoundaries.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsFixedBoundaries.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsFixedInterval.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsFixedInterval.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsNormalization.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsNormalization.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsReturnFullIntervalBin.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsReturnFullIntervalBin.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsSnapToData.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsSnapToData.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsSplitBy.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsSplitBy.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsStackBy.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.SupportsStackBy.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes(bool? field = null, bool? log = null, bool? naturalLog = null, bool? percentOfTotal = null, bool? squareRoot = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.Field.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.Field.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.GetField() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.GetLog() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.GetNaturalLog() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.GetPercentOfTotal() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.GetSquareRoot() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.Log.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.Log.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.NaturalLog.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.NaturalLog.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.PercentOfTotal.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.PercentOfTotal.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SetField(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SetLog(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SetNaturalLog(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SetPercentOfTotal(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SetSquareRoot(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SquareRoot.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.SquareRoot.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Avg.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Avg.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.CapabilitiesQueryAttributeBinsSupportedStatistics() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.CapabilitiesQueryAttributeBinsSupportedStatistics(bool? avg = null, bool? count = null, bool? max = null, bool? min = null, bool? percentileContinuous = null, bool? percentileDiscrete = null, bool? stddev = null, bool? sum = null, bool? var = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Count.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Count.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetAvg() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetCount() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetMax() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetMin() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetPercentileContinuous() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetPercentileDiscrete() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetStddev() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetSum() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.GetVar() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Max.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Max.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Min.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Min.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.PercentileContinuous.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.PercentileContinuous.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.PercentileDiscrete.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.PercentileDiscrete.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetAvg(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetCount(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetMax(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetMin(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetPercentileContinuous(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetPercentileDiscrete(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetStddev(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetSum(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.SetVar(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Stddev.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Stddev.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Sum.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Sum.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Var.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.Var.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.CapabilitiesQueryRelated() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.CapabilitiesQueryRelated(bool? supportsCacheHint = null, bool? supportsCount = null, bool? supportsOrderBy = null, bool? supportsPagination = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.GetSupportsCacheHint() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.GetSupportsCount() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.GetSupportsOrderBy() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.GetSupportsPagination() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SetSupportsCacheHint(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SetSupportsCount(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SetSupportsOrderBy(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SetSupportsPagination(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsCacheHint.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsCount.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsCount.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsOrderBy.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryRelated.SupportsPagination.set -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures.CapabilitiesQueryTopFeatures() -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures.CapabilitiesQueryTopFeatures(bool? supportsCacheHint = null) -> void
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures.GetSupportsCacheHint() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures.SetSupportsCacheHint(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryTopFeatures.SupportsCacheHint.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.AddToColors(params dymaptic.GeoBlazor.Core.Model.MapColor![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.AddToFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.AddToSeries(params dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.ChartMediaInfoValue() -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.ChartMediaInfoValue(System.Collections.Generic.IReadOnlyList<string!>? fields = null, string? normalizeField = null, string? tooltipField = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries!>? series = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapColor!>? colors = null) -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.Colors.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapColor!>?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.Colors.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.Fields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.GetColors() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapColor!>?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.GetNormalizeField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.GetSeries() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries!>?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.GetTooltipField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.NormalizeField.get -> string?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.NormalizeField.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.RemoveFromColors(params dymaptic.GeoBlazor.Core.Model.MapColor![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.RemoveFromFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.RemoveFromSeries(params dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.Series.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries!>?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.Series.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.SetColors(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapColor!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.SetFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.SetNormalizeField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.SetSeries(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.SetTooltipField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.TooltipField.get -> string?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.TooltipField.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.ChartMediaInfoValueSeries() -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.ChartMediaInfoValueSeries(string? fieldName = null, string? tooltip = null, double? value = null) -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.Color.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.FieldName.get -> string?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.FieldName.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.GetFieldName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.GetTooltip() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.Tooltip.get -> string?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.Tooltip.set -> void
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValueSeries.Value.set -> void
dymaptic.GeoBlazor.Core.Components.Circle
dymaptic.GeoBlazor.Core.Components.Circle.Center.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Circle.Center.set -> void
dymaptic.GeoBlazor.Core.Components.Circle.Circle() -> void
dymaptic.GeoBlazor.Core.Components.Circle.Circle(dymaptic.GeoBlazor.Core.Components.Geometries.Point! center, double radius, dymaptic.GeoBlazor.Core.Components.Geometries.Point? centroid = null, bool? geodesic = null, bool? hasM = null, bool? hasZ = null, bool? isSelfIntersecting = null, int? numberOfPoints = null, dymaptic.GeoBlazor.Core.Enums.RadiusUnit? radiusUnit = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapPath!>? rings = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null) -> void
dymaptic.GeoBlazor.Core.Components.Circle.Geodesic.get -> bool?
dymaptic.GeoBlazor.Core.Components.Circle.Geodesic.set -> void
dymaptic.GeoBlazor.Core.Components.Circle.GetGeodesic() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Circle.GetRadiusUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.RadiusUnit?>!
dymaptic.GeoBlazor.Core.Components.Circle.NumberOfPoints.get -> int?
dymaptic.GeoBlazor.Core.Components.Circle.NumberOfPoints.set -> void
dymaptic.GeoBlazor.Core.Components.Circle.Radius.get -> double?
dymaptic.GeoBlazor.Core.Components.Circle.Radius.set -> void
dymaptic.GeoBlazor.Core.Components.Circle.RadiusUnit.get -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit?
dymaptic.GeoBlazor.Core.Components.Circle.RadiusUnit.set -> void
dymaptic.GeoBlazor.Core.Components.Circle.SetGeodesic(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Circle.SetRadiusUnit(dymaptic.GeoBlazor.Core.Enums.RadiusUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CloudyWeather
dymaptic.GeoBlazor.Core.Components.CloudyWeather.CloudCover.get -> double?
dymaptic.GeoBlazor.Core.Components.CloudyWeather.CloudCover.set -> void
dymaptic.GeoBlazor.Core.Components.CloudyWeather.CloudyWeather() -> void
dymaptic.GeoBlazor.Core.Components.CloudyWeather.CloudyWeather(double? cloudCover = null) -> void
dymaptic.GeoBlazor.Core.Components.CloudyWeather.GetCloudCover() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CloudyWeather.SetCloudCover(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ClusterTitle
dymaptic.GeoBlazor.Core.Components.ClusterTitle.ClusterTitle() -> void
dymaptic.GeoBlazor.Core.Components.ClusterTitle.ClusterTitle(bool? showCount = null) -> void
dymaptic.GeoBlazor.Core.Components.ClusterTitle.GetShowCount() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ClusterTitle.SetShowCount(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ClusterTitle.ShowCount.get -> bool?
dymaptic.GeoBlazor.Core.Components.ClusterTitle.ShowCount.set -> void
dymaptic.GeoBlazor.Core.Components.CodedValue<T>
dymaptic.GeoBlazor.Core.Components.CodedValue<T>.Code.get -> T?
dymaptic.GeoBlazor.Core.Components.CodedValue<T>.Code.set -> void
dymaptic.GeoBlazor.Core.Components.CodedValue<T>.CodedValue() -> void
dymaptic.GeoBlazor.Core.Components.CodedValue<T>.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.CodedValue<T>.Name.set -> void
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.AddToCodedValues(params dymaptic.GeoBlazor.Core.Components.CodedValue<T>![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.CodedValueDomain() -> void
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.CodedValueDomain(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.CodedValue<T>!>? codedValues = null, string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.CodedValues.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.CodedValue<T>!>?
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.CodedValues.set -> void
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.GetCodedValues() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.CodedValue<T>!>?>!
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.GetName(string! code) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.RemoveFromCodedValues(params dymaptic.GeoBlazor.Core.Components.CodedValue<T>![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.SetCodedValues(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.CodedValue<T>!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRamp
dymaptic.GeoBlazor.Core.Components.ColorRamp.ColorRamp() -> void
dymaptic.GeoBlazor.Core.Components.ColorRampElement
dymaptic.GeoBlazor.Core.Components.ColorRampElement.AddToInfos(params dymaptic.GeoBlazor.Core.Components.ColorRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.ColorRampElement() -> void
dymaptic.GeoBlazor.Core.Components.ColorRampElement.ColorRampElement(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorRampStop!>? infos = null, dymaptic.GeoBlazor.Core.Model.RampTitle? rampTitle = null, string? stringTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.ColorRampElement.GetInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorRampStop!>?>!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.GetRampTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RampTitle?>!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.GetStringTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.Infos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorRampStop!>?
dymaptic.GeoBlazor.Core.Components.ColorRampElement.Infos.set -> void
dymaptic.GeoBlazor.Core.Components.ColorRampElement.RampTitle.get -> dymaptic.GeoBlazor.Core.Model.RampTitle?
dymaptic.GeoBlazor.Core.Components.ColorRampElement.RampTitle.set -> void
dymaptic.GeoBlazor.Core.Components.ColorRampElement.RemoveFromInfos(params dymaptic.GeoBlazor.Core.Components.ColorRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.SetInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorRampStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.SetRampTitle(dymaptic.GeoBlazor.Core.Model.RampTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.SetStringTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampElement.StringTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.ColorRampElement.StringTitle.set -> void
dymaptic.GeoBlazor.Core.Components.ColorRampStop
dymaptic.GeoBlazor.Core.Components.ColorRampStop.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.ColorRampStop.Color.set -> void
dymaptic.GeoBlazor.Core.Components.ColorRampStop.ColorRampStop() -> void
dymaptic.GeoBlazor.Core.Components.ColorRampStop.ColorRampStop(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, string? label = null, string? value = null) -> void
dymaptic.GeoBlazor.Core.Components.ColorRampStop.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.ColorRampStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ColorRampStop.GetValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ColorRampStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.ColorRampStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.ColorRampStop.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampStop.SetValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorRampStop.Value.get -> string?
dymaptic.GeoBlazor.Core.Components.ColorRampStop.Value.set -> void
dymaptic.GeoBlazor.Core.Components.ColorStop
dymaptic.GeoBlazor.Core.Components.ColorStop.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor!
dymaptic.GeoBlazor.Core.Components.ColorStop.Color.set -> void
dymaptic.GeoBlazor.Core.Components.ColorStop.ColorStop() -> void
dymaptic.GeoBlazor.Core.Components.ColorStop.ColorStop(double value, dymaptic.GeoBlazor.Core.Model.MapColor! color, string? label = null) -> void
dymaptic.GeoBlazor.Core.Components.ColorStop.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.ColorStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ColorStop.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.ColorStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.ColorStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.ColorStop.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorStop.SetValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorStop.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.ColorStop.Value.set -> void
dymaptic.GeoBlazor.Core.Components.ColorVariable
dymaptic.GeoBlazor.Core.Components.ColorVariable.AddToStops(params dymaptic.GeoBlazor.Core.Components.ColorStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorVariable.ColorVariable() -> void
dymaptic.GeoBlazor.Core.Components.ColorVariable.ColorVariable(string! field, string? normalizationField = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorStop!>? stops = null, dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions? legendOptions = null, string? valueExpression = null, string? valueExpressionTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.ColorVariable.GetNormalizationField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ColorVariable.GetStops() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorStop!>?>!
dymaptic.GeoBlazor.Core.Components.ColorVariable.NormalizationField.get -> string?
dymaptic.GeoBlazor.Core.Components.ColorVariable.NormalizationField.set -> void
dymaptic.GeoBlazor.Core.Components.ColorVariable.RemoveFromStops(params dymaptic.GeoBlazor.Core.Components.ColorStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorVariable.SetNormalizationField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorVariable.SetStops(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColorVariable.Stops.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ColorStop!>?
dymaptic.GeoBlazor.Core.Components.ColorVariable.Stops.set -> void
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.ColumnChartMediaInfo() -> void
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.ColumnChartMediaInfo(string? title = null, string? caption = null, string? altText = null, dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value = null) -> void
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.GetValue() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?>!
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.SetValue(dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.Value.get -> dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?
dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Components.ComboBoxInput
dymaptic.GeoBlazor.Core.Components.ComboBoxInput.ComboBoxInput() -> void
dymaptic.GeoBlazor.Core.Components.ComboBoxInput.NoValueOptionLabel.get -> string?
dymaptic.GeoBlazor.Core.Components.ComboBoxInput.NoValueOptionLabel.set -> void
dymaptic.GeoBlazor.Core.Components.ComboBoxInput.ShowNoValueOption.get -> bool?
dymaptic.GeoBlazor.Core.Components.ComboBoxInput.ShowNoValueOption.set -> void
dymaptic.GeoBlazor.Core.Components.CompassViewModel
dymaptic.GeoBlazor.Core.Components.CompassViewModel.CompassViewModel() -> void
dymaptic.GeoBlazor.Core.Components.CompassViewModel.CompassViewModel(dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null) -> void
dymaptic.GeoBlazor.Core.Components.CompassViewModel.GetOrientation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Orientation?>!
dymaptic.GeoBlazor.Core.Components.CompassViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.CompassViewModelState?>!
dymaptic.GeoBlazor.Core.Components.CompassViewModel.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.CompassViewModel.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.CompassViewModel.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.CompassViewModel.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CompassViewModel.Orientation.get -> dymaptic.GeoBlazor.Core.Components.Orientation?
dymaptic.GeoBlazor.Core.Components.CompassViewModel.Orientation.set -> void
dymaptic.GeoBlazor.Core.Components.CompassViewModel.Reset() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CompassViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.CompassViewModelState?
dymaptic.GeoBlazor.Core.Components.CompassViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints
dymaptic.GeoBlazor.Core.Components.Constraints.Constraints() -> void
dymaptic.GeoBlazor.Core.Components.Constraints.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Components.Constraints.Geometry.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.Lods.get -> System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Components.LOD!>?
dymaptic.GeoBlazor.Core.Components.Constraints.Lods.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Constraints.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.MaxZoom.get -> double?
dymaptic.GeoBlazor.Core.Components.Constraints.MaxZoom.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Constraints.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.MinZoom.get -> double?
dymaptic.GeoBlazor.Core.Components.Constraints.MinZoom.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.RotationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Constraints.RotationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Constraints.SnapToZoom.get -> bool?
dymaptic.GeoBlazor.Core.Components.Constraints.SnapToZoom.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.CSVLayerElevationInfo() -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.CSVLayerElevationInfo(dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo? featureExpressionInfo = null, dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? mode = null, double? offset = null, dymaptic.GeoBlazor.Core.Enums.ElevationUnit? unit = null) -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.FeatureExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo?
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.FeatureExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.GetFeatureExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.GetOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationUnit?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.Offset.get -> double?
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.Offset.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.SetFeatureExpressionInfo(dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.SetOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.SetUnit(dymaptic.GeoBlazor.Core.Enums.ElevationUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit?
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.CSVLayerElevationInfoFeatureExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.CSVLayerElevationInfoFeatureExpressionInfo(string? expression = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfoFeatureExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView
dymaptic.GeoBlazor.Core.Components.CSVLayerView.AvailableFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.AvailableFields.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.CSVLayerView() -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.CSVLayerView(dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Components.FeatureFilter? filter = null, dymaptic.GeoBlazor.Core.Components.HighlightOptions? highlightOptions = null, double? maximumNumberOfFeatures = null, bool? maximumNumberOfFeaturesExceeded = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.DataUpdating.get -> bool?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.DataUpdating.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.Filter.get -> dymaptic.GeoBlazor.Core.Components.FeatureFilter?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetAvailableFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetDataUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureFilter?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetHasAllFeatures() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetHasAllFeaturesInView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetHasFullGeometries() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetMaximumNumberOfFeatures() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.GetMaximumNumberOfFeaturesExceeded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HasAllFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HasAllFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HasAllFeaturesInView.get -> bool?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HasAllFeaturesInView.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HasFullGeometries.get -> bool?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HasFullGeometries.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.Highlight(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>! objectIds) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.MaximumNumberOfFeatures.get -> double?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.MaximumNumberOfFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.MaximumNumberOfFeaturesExceeded.get -> bool?
dymaptic.GeoBlazor.Core.Components.CSVLayerView.MaximumNumberOfFeaturesExceeded.set -> void
dymaptic.GeoBlazor.Core.Components.CSVLayerView.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.SetFilter(dymaptic.GeoBlazor.Core.Components.FeatureFilter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.SetMaximumNumberOfFeatures(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CSVLayerView.SetMaximumNumberOfFeaturesExceeded(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.CustomOverlay
dymaptic.GeoBlazor.Core.Components.CustomOverlay.ChildContent.get -> Microsoft.AspNetCore.Components.RenderFragment?
dymaptic.GeoBlazor.Core.Components.CustomOverlay.ChildContent.set -> void
dymaptic.GeoBlazor.Core.Components.CustomOverlay.CustomOverlay() -> void
dymaptic.GeoBlazor.Core.Components.CustomOverlay.Position.get -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Components.CustomOverlay.Position.set -> void
dymaptic.GeoBlazor.Core.Components.CustomOverlay.Refresh() -> void
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.DateTimePickerInput() -> void
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.IncludeTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.IncludeTime.set -> void
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.Max.get -> long?
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.Max.set -> void
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.Min.get -> long?
dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.Min.set -> void
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.DimensionalDefinition() -> void
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.DimensionalDefinition(string? dimensionName = null, bool? isSlice = null, string? variableName = null, dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues? values = null) -> void
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.DimensionName.get -> string?
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.DimensionName.set -> void
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.GetDimensionName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.GetIsSlice() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.GetValues() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues?>!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.GetVariableName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.IsSlice.get -> bool?
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.IsSlice.set -> void
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.SetDimensionName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.SetIsSlice(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.SetValues(dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.SetVariableName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.Values.get -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues?
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.Values.set -> void
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.VariableName.get -> string?
dymaptic.GeoBlazor.Core.Components.DimensionalDefinition.VariableName.set -> void
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.ActiveFilterId.get -> string?
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.ActiveFilterId.set -> void
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.AddToFilters(params dymaptic.GeoBlazor.Core.Model.DisplayFilter![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.DisplayFilterInfo() -> void
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.DisplayFilterInfo(string? activeFilterId = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.DisplayFilter!>? filters = null, dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode? mode = null) -> void
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.Filters.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.DisplayFilter!>?
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.Filters.set -> void
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.GetActiveFilterId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.GetFilters() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.DisplayFilter!>?>!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode?>!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode?
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.RemoveFromFilters(params dymaptic.GeoBlazor.Core.Model.DisplayFilter![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.SetActiveFilterId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.SetFilters(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.DisplayFilter!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.AddToUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.DistanceMeasurement2DViewModel() -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.DistanceMeasurement2DViewModel(dymaptic.GeoBlazor.Core.Components.SnappingOptions? snappingOptions = null, dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? unit = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>? unitOptions = null) -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.GetMeasurement() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.GetMeasurementLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.GetSnappingOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SnappingOptions?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.GetUnitOptions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.Measurement.get -> dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.Measurement.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.MeasurementLabel.get -> string?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.MeasurementLabel.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.RemoveFromUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.SetSnappingOptions(dymaptic.GeoBlazor.Core.Components.SnappingOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.SetUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.SetUnitOptions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.SnappingOptions.get -> dymaptic.GeoBlazor.Core.Components.SnappingOptions?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.SnappingOptions.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.Start() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.Unit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.UnitOptions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.UnitOptions.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.DistanceMeasurement2DViewModelMeasurement() -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.DistanceMeasurement2DViewModelMeasurement(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline? geometry = null, double? length = null) -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Polyline?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.Geometry.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.GetGeometry() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.GetLength() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.Length.get -> double?
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.Length.set -> void
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.SetGeometry(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.SetLength(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Domain
dymaptic.GeoBlazor.Core.Components.Domain.Domain() -> void
dymaptic.GeoBlazor.Core.Components.Domain.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Domain.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Domain.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Domain.SetName(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DotDensityTitle
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.DotDensityTitle() -> void
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.DotDensityTitle(string? unit = null, double? value = null) -> void
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.GetUnit() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.SetUnit(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.SetValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.Unit.get -> string?
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.DotDensityTitle.Value.set -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.DataSource.get -> dymaptic.GeoBlazor.Core.Components.DynamicDataSource?
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.DataSource.set -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.DynamicDataLayer() -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.DynamicDataLayer(dymaptic.GeoBlazor.Core.Components.DynamicDataSource! dataSource, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields!>? fields = null) -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields!>?
dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.Alias.get -> string?
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.Alias.set -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.DynamicDataLayerFields() -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.DynamicDataLayerFields(string? alias = null, string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.GetAlias() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.Name.set -> void
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.SetAlias(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DynamicDataLayerFields.SetName(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.DynamicDataSource
dymaptic.GeoBlazor.Core.Components.DynamicDataSource.DynamicDataSource() -> void
dymaptic.GeoBlazor.Core.Components.DynamicLayer
dymaptic.GeoBlazor.Core.Components.DynamicLayer.DynamicLayer() -> void
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.DynamicMapLayer() -> void
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.DynamicMapLayer(int mapLayerId, string? gdbVersion = null) -> void
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.MapLayerId.get -> int
dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.MapLayerId.set -> void
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.ElementExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.ElementExpressionInfo(string? expression = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.GetReturnType() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.ReturnType.get -> string?
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.ReturnType.set -> void
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Environment
dymaptic.GeoBlazor.Core.Components.Environment.AtmosphereEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Environment.AtmosphereEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Environment.Background.get -> dymaptic.GeoBlazor.Core.Components.Background?
dymaptic.GeoBlazor.Core.Components.Environment.Background.set -> void
dymaptic.GeoBlazor.Core.Components.Environment.Environment() -> void
dymaptic.GeoBlazor.Core.Components.Environment.Environment(bool? atmosphereEnabled = null, dymaptic.GeoBlazor.Core.Components.Background? background = null, dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentLighting? lighting = null, bool? starsEnabled = null, dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentWeather? weather = null) -> void
dymaptic.GeoBlazor.Core.Components.Environment.GetAtmosphereEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Environment.GetBackground() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Background?>!
dymaptic.GeoBlazor.Core.Components.Environment.GetLighting() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentLighting?>!
dymaptic.GeoBlazor.Core.Components.Environment.GetStarsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Environment.GetWeather() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentWeather?>!
dymaptic.GeoBlazor.Core.Components.Environment.Lighting.get -> dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentLighting?
dymaptic.GeoBlazor.Core.Components.Environment.Lighting.set -> void
dymaptic.GeoBlazor.Core.Components.Environment.SetAtmosphereEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Environment.SetBackground(dymaptic.GeoBlazor.Core.Components.Background? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Environment.SetLighting(dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentLighting? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Environment.SetStarsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Environment.SetWeather(dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentWeather? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Environment.StarsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Environment.StarsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Environment.Weather.get -> dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentWeather?
dymaptic.GeoBlazor.Core.Components.Environment.Weather.set -> void
dymaptic.GeoBlazor.Core.Components.ExpandViewModel
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.AutoCollapse.get -> bool?
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.AutoCollapse.set -> void
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.Expanded.get -> bool?
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.Expanded.set -> void
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.ExpandViewModel() -> void
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.ExpandViewModel(bool? autoCollapse = null, bool? expanded = null, string? group = null) -> void
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.GetAutoCollapse() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.GetExpanded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.GetGroup() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.GetView() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Views.MapView?>!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.Group.get -> string?
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.Group.set -> void
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.SetAutoCollapse(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.SetExpanded(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.SetGroup(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.SetView(dymaptic.GeoBlazor.Core.Components.Views.MapView? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.ExpandViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect
dymaptic.GeoBlazor.Core.Components.FeatureEffect.AddToExcludedEffect(params dymaptic.GeoBlazor.Core.Model.Effect![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.AddToIncludedEffect(params dymaptic.GeoBlazor.Core.Model.Effect![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.ExcludedEffect.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>?
dymaptic.GeoBlazor.Core.Components.FeatureEffect.ExcludedEffect.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect.ExcludedLabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureEffect.ExcludedLabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect.FeatureEffect() -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect.FeatureEffect(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>? excludedEffect = null, bool? excludedLabelsVisible = null, dymaptic.GeoBlazor.Core.Components.FeatureFilter? filter = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>? includedEffect = null) -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect.Filter.get -> dymaptic.GeoBlazor.Core.Components.FeatureFilter?
dymaptic.GeoBlazor.Core.Components.FeatureEffect.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect.GetExcludedEffect() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>?>!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.GetExcludedLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.GetFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureFilter?>!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.GetIncludedEffect() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>?>!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.IncludedEffect.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>?
dymaptic.GeoBlazor.Core.Components.FeatureEffect.IncludedEffect.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureEffect.RemoveFromExcludedEffect(params dymaptic.GeoBlazor.Core.Model.Effect![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.RemoveFromIncludedEffect(params dymaptic.GeoBlazor.Core.Model.Effect![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.SetExcludedEffect(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.SetExcludedLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.SetFilter(dymaptic.GeoBlazor.Core.Components.FeatureFilter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureEffect.SetIncludedEffect(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Effect!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter
dymaptic.GeoBlazor.Core.Components.FeatureFilter.AddToObjectIds(params dymaptic.GeoBlazor.Core.Model.ObjectId![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.CreateQuery() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Query?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Distance.get -> double?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Distance.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.FeatureFilter() -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.FeatureFilter(double? distance = null, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? geometry = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ObjectId!>? objectIds = null, dymaptic.GeoBlazor.Core.Enums.SpatialRelationship? spatialRelationship = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Enums.QueryUnits? units = null, string? where = null) -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Geometry.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetDistance() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetGeometry() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetObjectIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ObjectId!>?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetSpatialRelationship() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SpatialRelationship?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetUnits() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.QueryUnits?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.GetWhere() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.ObjectIds.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.ObjectIds.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.RemoveFromObjectIds(params dymaptic.GeoBlazor.Core.Model.ObjectId![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetDistance(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetGeometry(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetObjectIds(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ObjectId!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetSpatialRelationship(dymaptic.GeoBlazor.Core.Enums.SpatialRelationship? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetUnits(dymaptic.GeoBlazor.Core.Enums.QueryUnits? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SetWhere(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SpatialRelationship.get -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.SpatialRelationship.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Units.get -> dymaptic.GeoBlazor.Core.Enums.QueryUnits?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Units.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Where.get -> string?
dymaptic.GeoBlazor.Core.Components.FeatureFilter.Where.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.FeatureExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo?
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.FeatureExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.FeatureLayerBaseElevationInfo() -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.FeatureLayerBaseElevationInfo(dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo? featureExpressionInfo = null, dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? mode = null, double? offset = null, dymaptic.GeoBlazor.Core.Enums.ElevationUnit? unit = null) -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.GetFeatureExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.GetOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationUnit?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.Offset.get -> double?
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.Offset.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.SetFeatureExpressionInfo(dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.SetOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.SetUnit(dymaptic.GeoBlazor.Core.Enums.ElevationUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit?
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.FeatureLayerBaseElevationInfoFeatureExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.FeatureLayerBaseElevationInfoFeatureExpressionInfo(string? expression = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfoFeatureExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.AvailableFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.AvailableFields.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.CreateQuery() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Query!>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.DataUpdating.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.DataUpdating.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.FeatureLayerView() -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Filter.get -> dymaptic.GeoBlazor.Core.Components.FeatureFilter?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetAvailableFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetDataUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureFilter?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetHasAllFeatures() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetHasAllFeaturesInView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetHasFullGeometries() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetMaximumNumberOfFeatures() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.GetMaximumNumberOfFeaturesExceeded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HasAllFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HasAllFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HasAllFeaturesInView.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HasAllFeaturesInView.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HasFullGeometries.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HasFullGeometries.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Highlight(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>! objectIds) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.MaximumNumberOfFeatures.get -> double?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.MaximumNumberOfFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.MaximumNumberOfFeaturesExceeded.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.MaximumNumberOfFeaturesExceeded.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.OnQueryFeaturesStreamCallback(Microsoft.JSInterop.IJSStreamReference! streamReference, System.Guid queryId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.QueryExtent(dymaptic.GeoBlazor.Core.Model.Query! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.ExtentQueryResult?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.QueryFeatureCount(dymaptic.GeoBlazor.Core.Model.Query? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.QueryFeatures(dymaptic.GeoBlazor.Core.Model.Query? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureSet?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.QueryObjectIds(dymaptic.GeoBlazor.Core.Model.Query! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ObjectId![]?>!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.SetFilter(dymaptic.GeoBlazor.Core.Components.FeatureFilter? filter) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.SetMaximumNumberOfFeatures(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureLayerView.SetMaximumNumberOfFeaturesExceeded(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.Enabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.FeatureSnappingLayerSource() -> void
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.FeatureSnappingLayerSource(bool? enabled = null) -> void
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.GetEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.SetEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Actions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Actions.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Active.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Active.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ActiveFeature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ActiveFeature.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.AddToActions(params dymaptic.GeoBlazor.Core.Components.ActionBase![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.AddToFeatures(params dymaptic.GeoBlazor.Core.Components.Graphic![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.AllActions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.AllActions.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.AutoCloseEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.AutoCloseEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.BrowseClusterEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.BrowseClusterEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.DefaultActions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.DefaultActions.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.DefaultPopupTemplateEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.DefaultPopupTemplateEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ElementReferenceContent.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ElementReferenceContent.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureCount.get -> int?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureCount.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureMenuOpen.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureMenuOpen.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureMenuTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureMenuTitle.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeaturePage.get -> double?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeaturePage.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Features.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Features.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeaturesPerPage.get -> double?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeaturesPerPage.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeaturesViewModel() -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeaturesViewModel(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>? actions = null, dymaptic.GeoBlazor.Core.Components.Graphic? activeFeature = null, bool? autoCloseEnabled = null, bool? browseClusterEnabled = null, bool? defaultPopupTemplateEnabled = null, Microsoft.AspNetCore.Components.ElementReference? elementReferenceContent = null, bool? featureMenuOpen = null, string? featureMenuTitle = null, double? featurePage = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? features = null, double? featuresPerPage = null, dymaptic.GeoBlazor.Core.Components.Abilities? featureViewModelAbilities = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, bool? highlightEnabled = null, bool? includeDefaultActions = null, dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode? initialDisplayMode = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location = null, dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint? screenLocation = null, bool? screenLocationEnabled = null, int? selectedFeatureIndex = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, string? stringContent = null, string? timeZone = null, string? title = null, bool? updateLocationEnabled = null, bool? visible = null, dymaptic.GeoBlazor.Core.Components.Widgets.Widget? widgetContent = null) -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureViewModelAbilities.get -> dymaptic.GeoBlazor.Core.Components.Abilities?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureViewModelAbilities.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureViewModels.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureViewModel!>?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FeatureViewModels.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.FetchFeatures(dymaptic.GeoBlazor.Core.Model.ScreenPoint! screenPoint, dymaptic.GeoBlazor.Core.Options.PopupFetchFeaturesOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetActions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetActive() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetActiveFeature() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetAllActions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetAutoCloseEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetBrowseClusterEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetDefaultActions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetDefaultPopupTemplateEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetElementReferenceContent() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.ElementReference?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeatureCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeatureMenuOpen() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeatureMenuTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeaturePage() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeatures() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeaturesPerPage() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeatureViewModelAbilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Abilities?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetFeatureViewModels() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureViewModel!>?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetHighlightEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetIncludeDefaultActions() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetInitialDisplayMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetLocation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetPendingPromisesCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetScreenLocation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetScreenLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetSelectedClusterBoundaryFeature() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetSelectedFeature() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetSelectedFeatureIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetSelectedFeatureViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFeatureViewModel?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetStringContent() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetUpdateLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetWaitingForContents() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetWaitingForResult() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GetWidgetContent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Widgets.Widget?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.HasTriggerActionListener.get -> bool
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.HighlightEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.HighlightEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.IncludeDefaultActions.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.IncludeDefaultActions.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.InitialDisplayMode.get -> dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.InitialDisplayMode.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Location.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Next() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeaturesViewModel?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.OnJsTriggerAction(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.OnTriggerAction.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.FeaturesViewModelTriggerActionEvent!>
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.OnTriggerAction.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Open(dymaptic.GeoBlazor.Core.Options.GoToOptions! options) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.PendingPromisesCount.get -> int?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.PendingPromisesCount.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Previous() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeaturesViewModel?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.RemoveFromActions(params dymaptic.GeoBlazor.Core.Components.ActionBase![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.RemoveFromFeatures(params dymaptic.GeoBlazor.Core.Components.Graphic![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ScreenLocation.get -> dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ScreenLocation.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ScreenLocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ScreenLocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedClusterBoundaryFeature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedClusterBoundaryFeature.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedFeature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedFeature.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedFeatureIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedFeatureIndex.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedFeatureViewModel.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureViewModel?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SelectedFeatureViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetActions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetActiveFeature(dymaptic.GeoBlazor.Core.Components.Graphic? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetAutoCloseEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetBrowseClusterEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetDefaultPopupTemplateEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetElementReferenceContent(Microsoft.AspNetCore.Components.ElementReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetFeatureMenuOpen(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetFeatureMenuTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetFeaturePage(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetFeatures(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetFeaturesPerPage(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetFeatureViewModelAbilities(dymaptic.GeoBlazor.Core.Components.Abilities? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetHighlightEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetIncludeDefaultActions(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetInitialDisplayMode(dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetLocation(dymaptic.GeoBlazor.Core.Components.Geometries.Point? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetScreenLocation(dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetScreenLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetSelectedFeatureIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetStringContent(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetTimeZone(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetUpdateLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SetWidgetContent(dymaptic.GeoBlazor.Core.Components.Widgets.Widget? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.StringContent.get -> string?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.StringContent.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.TimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.TimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.Title.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.TriggerAction(int actionIndex) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.UpdateLocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.UpdateLocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.WaitingForContents.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.WaitingForContents.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.WaitingForResult.get -> bool?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.WaitingForResult.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.WidgetContent.get -> dymaptic.GeoBlazor.Core.Components.Widgets.Widget?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.WidgetContent.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ZoomTo(dymaptic.GeoBlazor.Core.Model.GoToTarget! target, dymaptic.GeoBlazor.Core.Options.GoToOptions! options) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.FeaturesViewModelFetchFeaturesScreenPoint() -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.FeaturesViewModelFetchFeaturesScreenPoint(double? x = null, double? y = null) -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.GetX() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.GetY() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.SetX(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.SetY(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.X.get -> double?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.X.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.Y.get -> double?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelFetchFeaturesScreenPoint.Y.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.FeaturesViewModelScreenPoint() -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.FeaturesViewModelScreenPoint(double? x = null, double? y = null) -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.GetX() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.GetY() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.SetX(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.SetY(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.X.get -> double?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.X.set -> void
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.Y.get -> double?
dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint.Y.set -> void
dymaptic.GeoBlazor.Core.Components.Field
dymaptic.GeoBlazor.Core.Components.Field.Alias.get -> string?
dymaptic.GeoBlazor.Core.Components.Field.Alias.set -> void
dymaptic.GeoBlazor.Core.Components.Field.DefaultValue.get -> object?
dymaptic.GeoBlazor.Core.Components.Field.DefaultValue.set -> void
dymaptic.GeoBlazor.Core.Components.Field.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Field.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Field.Domain.get -> dymaptic.GeoBlazor.Core.Components.Domain?
dymaptic.GeoBlazor.Core.Components.Field.Domain.set -> void
dymaptic.GeoBlazor.Core.Components.Field.Editable.get -> bool?
dymaptic.GeoBlazor.Core.Components.Field.Editable.set -> void
dymaptic.GeoBlazor.Core.Components.Field.Field() -> void
dymaptic.GeoBlazor.Core.Components.Field.Field(dymaptic.GeoBlazor.Core.Enums.FieldType? type, string? name = null, string? alias = null, string? description = null, int? length = null, bool? editable = null, bool? nullable = null, object? defaultValue = null, dymaptic.GeoBlazor.Core.Enums.FieldValueType? valueType = null, dymaptic.GeoBlazor.Core.Components.Domain? domain = null) -> void
dymaptic.GeoBlazor.Core.Components.Field.GetAlias() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Field.GetDefaultValue() -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.Field.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Field.GetDomain() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Domain?>!
dymaptic.GeoBlazor.Core.Components.Field.GetEditable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Field.GetLength() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Field.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Field.GetNullable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Field.GetValueType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.FieldValueType?>!
dymaptic.GeoBlazor.Core.Components.Field.Length.get -> int?
dymaptic.GeoBlazor.Core.Components.Field.Length.set -> void
dymaptic.GeoBlazor.Core.Components.Field.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Field.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Field.Nullable.get -> bool?
dymaptic.GeoBlazor.Core.Components.Field.Nullable.set -> void
dymaptic.GeoBlazor.Core.Components.Field.SetAlias(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetDefaultValue(object? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetDomain(dymaptic.GeoBlazor.Core.Components.Domain? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetEditable(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetLength(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetNullable(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.SetValueType(dymaptic.GeoBlazor.Core.Enums.FieldValueType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Field.Type.get -> dymaptic.GeoBlazor.Core.Enums.FieldType?
dymaptic.GeoBlazor.Core.Components.Field.Type.set -> void
dymaptic.GeoBlazor.Core.Components.Field.ValueType.get -> dymaptic.GeoBlazor.Core.Enums.FieldValueType?
dymaptic.GeoBlazor.Core.Components.Field.ValueType.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo
dymaptic.GeoBlazor.Core.Components.FieldInfo.FieldInfo() -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.FieldInfo(string? fieldName = null, string? label = null, string? tooltip = null, dymaptic.GeoBlazor.Core.Enums.StringFieldOption? stringFieldOption = null, dymaptic.GeoBlazor.Core.Components.FieldInfoFormat? format = null, bool? isEditable = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.StatisticType? statisticType = null) -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.FieldName.get -> string?
dymaptic.GeoBlazor.Core.Components.FieldInfo.FieldName.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.Format.get -> dymaptic.GeoBlazor.Core.Components.FieldInfoFormat?
dymaptic.GeoBlazor.Core.Components.FieldInfo.Format.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetFieldName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetFormat() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FieldInfoFormat?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetIsEditable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetStatisticType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.StatisticType?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetStringFieldOption() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.StringFieldOption?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.GetTooltip() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.FieldInfo.IsEditable.get -> bool?
dymaptic.GeoBlazor.Core.Components.FieldInfo.IsEditable.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.FieldInfo.Label.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetFieldName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetFormat(dymaptic.GeoBlazor.Core.Components.FieldInfoFormat? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetIsEditable(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetStatisticType(dymaptic.GeoBlazor.Core.Enums.StatisticType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetStringFieldOption(dymaptic.GeoBlazor.Core.Enums.StringFieldOption? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.SetTooltip(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfo.StatisticType.get -> dymaptic.GeoBlazor.Core.Enums.StatisticType?
dymaptic.GeoBlazor.Core.Components.FieldInfo.StatisticType.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.StringFieldOption.get -> dymaptic.GeoBlazor.Core.Enums.StringFieldOption?
dymaptic.GeoBlazor.Core.Components.FieldInfo.StringFieldOption.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfo.Tooltip.get -> string?
dymaptic.GeoBlazor.Core.Components.FieldInfo.Tooltip.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.DateFormat.get -> dymaptic.GeoBlazor.Core.Enums.DateFormat?
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.DateFormat.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.DigitSeparator.get -> bool?
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.DigitSeparator.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.FieldInfoFormat() -> void
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.FieldInfoFormat(int? places = null, bool? digitSeparator = null, dymaptic.GeoBlazor.Core.Enums.DateFormat? dateFormat = null) -> void
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.GetDateFormat() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.DateFormat?>!
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.GetDigitSeparator() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.GetPlaces() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.Places.get -> int?
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.Places.set -> void
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.SetDateFormat(dymaptic.GeoBlazor.Core.Enums.DateFormat? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.SetDigitSeparator(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FieldInfoFormat.SetPlaces(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FoggyWeather
dymaptic.GeoBlazor.Core.Components.FoggyWeather.FoggyWeather() -> void
dymaptic.GeoBlazor.Core.Components.FoggyWeather.FoggyWeather(double? fogStrength = null) -> void
dymaptic.GeoBlazor.Core.Components.FoggyWeather.FogStrength.get -> double?
dymaptic.GeoBlazor.Core.Components.FoggyWeather.FogStrength.set -> void
dymaptic.GeoBlazor.Core.Components.FoggyWeather.GetFogStrength() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.FoggyWeather.SetFogStrength(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.FormInput
dymaptic.GeoBlazor.Core.Components.FormInput.FormInput() -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.FeatureExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.FeatureExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.GeoJSONLayerElevationInfo() -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.GeoJSONLayerElevationInfo(dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo? featureExpressionInfo = null, dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? mode = null, double? offset = null, dymaptic.GeoBlazor.Core.Enums.ElevationUnit? unit = null) -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.GetFeatureExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.GetOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationUnit?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.Offset.get -> double?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.Offset.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.SetFeatureExpressionInfo(dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.SetOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.SetUnit(dymaptic.GeoBlazor.Core.Enums.ElevationUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.GeoJSONLayerElevationInfoFeatureExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.GeoJSONLayerElevationInfoFeatureExpressionInfo(string? expression = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfoFeatureExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.AvailableFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.AvailableFields.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.DataUpdating.get -> bool?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.DataUpdating.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Filter.get -> dymaptic.GeoBlazor.Core.Components.FeatureFilter?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GeoJSONLayerView() -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GeoJSONLayerView(dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Components.FeatureFilter? filter = null, dymaptic.GeoBlazor.Core.Components.HighlightOptions? highlightOptions = null, double? maximumNumberOfFeatures = null, bool? maximumNumberOfFeaturesExceeded = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetAvailableFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetDataUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureFilter?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetHasAllFeatures() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetHasAllFeaturesInView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetHasFullGeometries() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetMaximumNumberOfFeatures() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.GetMaximumNumberOfFeaturesExceeded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HasAllFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HasAllFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HasAllFeaturesInView.get -> bool?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HasAllFeaturesInView.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HasFullGeometries.get -> bool?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HasFullGeometries.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Highlight(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>! objectIds) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.MaximumNumberOfFeatures.get -> double?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.MaximumNumberOfFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.MaximumNumberOfFeaturesExceeded.get -> bool?
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.MaximumNumberOfFeaturesExceeded.set -> void
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.SetFilter(dymaptic.GeoBlazor.Core.Components.FeatureFilter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.SetMaximumNumberOfFeatures(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.SetMaximumNumberOfFeaturesExceeded(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GeolocationOptions
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.EnableHighAccuracy.get -> bool?
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.EnableHighAccuracy.set -> void
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.GeolocationOptions() -> void
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.MaximumAge.get -> long?
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.MaximumAge.set -> void
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.Timeout.get -> long?
dymaptic.GeoBlazor.Core.Components.GeolocationOptions.Timeout.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Center.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Center.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.CenterAt(dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Clone() -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Contains(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Expand(double factor) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Extent() -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Extent(double xmax, double xmin, double ymax, double ymin, double? zmax = null, double? zmin = null, double? mmax = null, double? mmin = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, bool? hasM = null, bool? hasZ = null) -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetCenter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetHeight() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetMmax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetMmin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetWidth() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetZmax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.GetZmin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Height.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Height.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Intersection(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Intersects(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Mmax.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Mmax.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Mmin.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Mmin.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Normalize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent![]?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Offset(double dx, double dy, double dz) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.SetMmax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.SetMmin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.SetZmax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.SetZmin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Union(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Width.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Width.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Xmax.get -> double
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Xmax.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Xmin.get -> double
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Xmin.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Ymax.get -> double
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Ymax.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Ymin.get -> double
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Ymin.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Zmax.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Zmax.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Zmin.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Zmin.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.Cache.get -> string?
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.Cache.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.Geometry() -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.GetCache() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.GetExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.GetHasM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.GetHasZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.HasM.get -> bool?
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.HasM.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.HasZ.get -> bool?
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.HasZ.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.SetHasM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.SetHasZ(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Clone() -> dymaptic.GeoBlazor.Core.Components.Geometries.Point!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Copy(dymaptic.GeoBlazor.Core.Components.Geometries.Point! other) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Distance(dymaptic.GeoBlazor.Core.Components.Geometries.Point! other) -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.GetLatitude() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.GetLongitude() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.GetM() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.GetX() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.GetY() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.GetZ() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Latitude.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Latitude.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Longitude.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Longitude.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.M.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Point.M.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Normalize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Point() -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Point(double? longitude = null, double? latitude = null, double? x = null, double? y = null, double? z = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, bool? hasM = null, bool? hasZ = null, double? m = null) -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.SetLatitude(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.SetLongitude(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.SetM(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.SetX(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.SetY(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.SetZ(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Geometries.Point.X.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Point.X.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Y.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Y.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Z.get -> double?
dymaptic.GeoBlazor.Core.Components.Geometries.Point.Z.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.AddRing(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>! points) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Centroid.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Centroid.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Clone() -> dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Contains(dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.GetCentroid() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.GetIsSelfIntersecting() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.GetPoint(int ringIndex, int pointIndex) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.InsertPoint(int ringIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.IsClockwise(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>! ring) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.IsSelfIntersecting.get -> bool?
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.IsSelfIntersecting.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Polygon() -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Polygon(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapPath!>! rings, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? centroid = null, bool? hasM = null, bool? hasZ = null, bool? isSelfIntersecting = null) -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.RemovePoint(int ringIndex, int pointIndex) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.RemoveRing(int index) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point![]?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Rings.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapPath!>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Rings.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.SetPoint(int ringIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon?>!
dymaptic.GeoBlazor.Core.Components.Geometries.PolyLine
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.AddPath(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>! points) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.Clone() -> dymaptic.GeoBlazor.Core.Components.Geometries.Polyline!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.GetPoint(int pathIndex, int pointIndex) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.InsertPoint(int pathIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.Paths.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapPath!>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.Paths.set -> void
dymaptic.GeoBlazor.Core.Components.Geometries.PolyLine.PolyLine() -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.Polyline() -> void
dymaptic.GeoBlazor.Core.Components.Geometries.PolyLine.PolyLine(dymaptic.GeoBlazor.Core.Model.MapPath![]! paths, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? extent = null) -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.Polyline(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.MapPath!>! paths, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, bool? hasM = null, bool? hasZ = null) -> void
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.RemovePath(int index) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point![]?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.RemovePoint(int pathIndex, int pointIndex) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.SetPoint(int pathIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline?>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine
dymaptic.GeoBlazor.Core.Components.GeometryEngine.AddPath(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, dymaptic.GeoBlazor.Core.Components.Geometries.Point![]! points) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.AddPath(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, dymaptic.GeoBlazor.Core.Model.MapPath! points) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.AddRing(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, dymaptic.GeoBlazor.Core.Components.Geometries.Point![]! points) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.AddRing(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, dymaptic.GeoBlazor.Core.Model.MapPath! points) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.AreEqual(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Buffer(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double distance) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Buffer(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double distance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Buffer(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, System.Collections.Generic.IEnumerable<double>! distances) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Buffer(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, System.Collections.Generic.IEnumerable<double>! distances, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Buffer(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, System.Collections.Generic.IEnumerable<double>! distances, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit, bool? unionResults) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.CenterExtentAt(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Clip(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Clone<T>(T! geometry) -> System.Threading.Tasks.Task<T!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Contains(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! containerGeometry, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! insideGeometry) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.ConvexHull(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.ConvexHull(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, bool? merge = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Crosses(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Cut(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! cutter) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Densify(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double maxSegmentLength, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? maxSegmentLengthUnit = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Difference(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! subtractor) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Difference(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! subtractor) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Disjoint(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Distance(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? distanceUnit = null) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Expand(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, double factor) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.ExtendedSpatialReferenceInfo(dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.FlipHorizontal(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Point? flipOrigin = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.FlipVertical(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Point? flipOrigin = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.FromArcGisJson<T>(string! json) -> System.Threading.Tasks.Task<T!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Generalize(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double maxDeviation, bool? removeDegenerateParts = null, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? maxDeviationUnit = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicArea(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! geometry, dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit? unit = null) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicBuffer(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double distance) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicBuffer(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double distance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicBuffer(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, System.Collections.Generic.IEnumerable<double>! distances) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicBuffer(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, System.Collections.Generic.IEnumerable<double>! distances, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicBuffer(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, System.Collections.Generic.IEnumerable<double>! distances, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit, bool? unionResults) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicDensify(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double maxSegmentLength) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicDensify(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double maxSegmentLength, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? maxSegmentLengthUnit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeodesicLength(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit = null) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GeometryEngine(dymaptic.GeoBlazor.Core.Model.AuthenticationManager! authenticationManager) -> void
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GetExtentCenter(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GetExtentHeight(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GetExtentWidth(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GetPoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, int ringIndex, int pointIndex) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.GetPoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, int pathIndex, int pointIndex) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.InsertPoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, int ringIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.InsertPoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, int pathIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Intersect(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Intersect(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Intersects(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.IsClockwise(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, dymaptic.GeoBlazor.Core.Components.Geometries.Point![]! ring) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.IsClockwise(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, dymaptic.GeoBlazor.Core.Model.MapPath! ring) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.IsSimple(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.NearestCoordinate(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Point! inputPoint) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.NearestPointResult!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.NearestVertex(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Point! inputPoint) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.NearestPointResult!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.NearestVertices(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.Geometries.Point! inputPoint, double searchRadius, int maxVertexCountToReturn) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.NearestPointResult![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.NormalizeExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.NormalizePoint(dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double offsetDistance) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit, dymaptic.GeoBlazor.Core.Enums.JoinType? joinType) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit, dymaptic.GeoBlazor.Core.Enums.JoinType? joinType, double? bevelRatio) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit, dymaptic.GeoBlazor.Core.Enums.JoinType? joinType, double? bevelRatio, double? flattenError) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, double offsetDistance) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit, dymaptic.GeoBlazor.Core.Enums.JoinType? joinType) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit, dymaptic.GeoBlazor.Core.Enums.JoinType? joinType, double? bevelRatio) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Offset(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries, double offsetDistance, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? offsetUnit, dymaptic.GeoBlazor.Core.Enums.JoinType? joinType, double? bevelRatio, double? flattenError) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.OffsetExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, double dx, double dy, double dz = 0) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Overlaps(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.PlanarArea(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! geometry) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.PlanarArea(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! geometry, dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit? unit) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.PlanarLength(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.PlanarLength(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit? unit) -> System.Threading.Tasks.Task<double>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.PolygonFromExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Relate(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2, string! relation) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.RemovePath(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, int index) -> System.Threading.Tasks.Task<(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! PolyLine, dymaptic.GeoBlazor.Core.Components.Geometries.Point![]! Path)>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.RemovePoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, int ringIndex, int pointIndex) -> System.Threading.Tasks.Task<(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! Polygon, dymaptic.GeoBlazor.Core.Components.Geometries.Point! Point)>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.RemovePoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, int pathIndex, int pointIndex) -> System.Threading.Tasks.Task<(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! PolyLine, dymaptic.GeoBlazor.Core.Components.Geometries.Point! Point)>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.RemoveRing(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, int index) -> System.Threading.Tasks.Task<(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! Polygon, dymaptic.GeoBlazor.Core.Components.Geometries.Point![]! Ring)>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Rotate(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, double angle, dymaptic.GeoBlazor.Core.Components.Geometries.Point! rotationOrigin) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.SetPoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polygon! polygon, int ringIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polygon!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.SetPoint(dymaptic.GeoBlazor.Core.Components.Geometries.Polyline! polyline, int pathIndex, int pointIndex, dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Polyline!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Simplify(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.SymmetricDifference(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! leftGeometry, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! rightGeometry) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.SymmetricDifference(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! leftGeometries, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! rightGeometry) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.ToArcGisJson<T>(T! geometry) -> System.Threading.Tasks.Task<string!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Touches(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry1, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry2) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Union(params dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]! geometries) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Union(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>! geometries) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry!>!
dymaptic.GeoBlazor.Core.Components.GeometryEngine.Within(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! innerGeometry, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! outerGeometry) -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.GeoRSSLayerView
dymaptic.GeoBlazor.Core.Components.GeoRSSLayerView.GeoRSSLayerView() -> void
dymaptic.GeoBlazor.Core.Components.GeoRSSLayerView.GeoRSSLayerView(bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Graphic
dymaptic.GeoBlazor.Core.Components.Graphic.AggregateGeometries.get -> string?
dymaptic.GeoBlazor.Core.Components.Graphic.AggregateGeometries.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.Attributes.get -> dymaptic.GeoBlazor.Core.Model.AttributesDictionary!
dymaptic.GeoBlazor.Core.Components.Graphic.Attributes.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.Equals(dymaptic.GeoBlazor.Core.Components.Graphic? other) -> bool
dymaptic.GeoBlazor.Core.Components.Graphic.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Components.Graphic.Geometry.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.GetAggregateGeometries() -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetAttribute(string! name) -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetEffectivePopupTemplate(bool defaultPopupTemplateEnabled) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetGeometry() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetIsAggregate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetObjectId() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ObjectId?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetOrigin() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GraphicOrigin?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Graphic.GetSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.Graphic.Graphic() -> void
dymaptic.GeoBlazor.Core.Components.Graphic.Graphic(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? geometry = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? symbol = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Model.AttributesDictionary? attributes = null, bool? visible = null, string? legendLabel = null, string? aggregateGeometries = null, dymaptic.GeoBlazor.Core.Model.GraphicOrigin? origin = null) -> void
dymaptic.GeoBlazor.Core.Components.Graphic.IsAggregate.get -> bool?
dymaptic.GeoBlazor.Core.Components.Graphic.IsAggregate.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.LegendLabel.get -> string?
dymaptic.GeoBlazor.Core.Components.Graphic.LegendLabel.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.Origin.get -> dymaptic.GeoBlazor.Core.Model.GraphicOrigin?
dymaptic.GeoBlazor.Core.Components.Graphic.Origin.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Graphic.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Graphic.SetAggregateGeometries(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Graphic.SetAttribute(string! name, string! newValue) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Graphic.SetGeometry(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Graphic.SetOrigin(dymaptic.GeoBlazor.Core.Model.GraphicOrigin? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Graphic.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate! popupTemplate) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Graphic.SetSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! symbol) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Graphic.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Graphic.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.FeatureExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.FeatureExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.GetFeatureExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.GetOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationUnit?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.GraphicsLayerElevationInfo() -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.GraphicsLayerElevationInfo(dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo? featureExpressionInfo = null, dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? mode = null, double? offset = null, dymaptic.GeoBlazor.Core.Enums.ElevationUnit? unit = null) -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.Offset.get -> double?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.Offset.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.SetFeatureExpressionInfo(dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.SetOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.SetUnit(dymaptic.GeoBlazor.Core.Enums.ElevationUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.GraphicsLayerElevationInfoFeatureExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.GraphicsLayerElevationInfoFeatureExpressionInfo(string? expression = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfoFeatureExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.GraphicsLayerView() -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.GraphicsLayerView(dymaptic.GeoBlazor.Core.Components.HighlightOptions? highlightOptions = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.Highlight(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>! objectIds) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.GroundNavigationConstraint
dymaptic.GeoBlazor.Core.Components.GroundNavigationConstraint.GroundNavigationConstraint() -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.AddToInfos(params dymaptic.GeoBlazor.Core.Components.HeatmapRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.GetInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.HeatmapRampStop!>?>!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.GetRendererTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RendererTitle?>!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.GetStringTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.HeatmapRampElement() -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.HeatmapRampElement(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.HeatmapRampStop!>? infos = null, dymaptic.GeoBlazor.Core.Model.RendererTitle? rendererTitle = null, string? stringTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.Infos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.HeatmapRampStop!>?
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.Infos.set -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.RemoveFromInfos(params dymaptic.GeoBlazor.Core.Components.HeatmapRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.RendererTitle.get -> dymaptic.GeoBlazor.Core.Model.RendererTitle?
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.RendererTitle.set -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.SetInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.HeatmapRampStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.SetRendererTitle(dymaptic.GeoBlazor.Core.Model.RendererTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.SetStringTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.StringTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.StringTitle.set -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.Color.set -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.GetRatio() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.HeatmapRampStop() -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.HeatmapRampStop(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, string? label = null, double? ratio = null) -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.Ratio.get -> double?
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.Ratio.set -> void
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HeatmapRampStop.SetRatio(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions
dymaptic.GeoBlazor.Core.Components.HighlightOptions.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.Color.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.FillOpacity.get -> double?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.FillOpacity.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetFillOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetHaloColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetHaloOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetShadowColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetShadowDifference() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.GetShadowOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.HaloColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.HaloColor.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.HaloOpacity.get -> double?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.HaloOpacity.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.HighlightOptions() -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.HighlightOptions(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Model.MapColor? haloColor = null, double? haloOpacity = null, double? fillOpacity = null, dymaptic.GeoBlazor.Core.Model.MapColor? shadowColor = null, double? shadowOpacity = null, double? shadowDifference = null, string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.Name.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetFillOpacity(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetHaloColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetHaloOpacity(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetShadowColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetShadowDifference(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.SetShadowOpacity(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HighlightOptions.ShadowColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.ShadowColor.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.ShadowDifference.get -> double?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.ShadowDifference.set -> void
dymaptic.GeoBlazor.Core.Components.HighlightOptions.ShadowOpacity.get -> double?
dymaptic.GeoBlazor.Core.Components.HighlightOptions.ShadowOpacity.set -> void
dymaptic.GeoBlazor.Core.Components.HomeViewModel
dymaptic.GeoBlazor.Core.Components.HomeViewModel.CancelGo() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.HomeViewModelState?>!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.GetViewpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewpoint?>!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.Go() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.HomeViewModel.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.HomeViewModel.HasGoListener.get -> bool
dymaptic.GeoBlazor.Core.Components.HomeViewModel.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.HomeViewModel.HomeViewModel() -> void
dymaptic.GeoBlazor.Core.Components.HomeViewModel.HomeViewModel(dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, dymaptic.GeoBlazor.Core.Components.Viewpoint? viewpoint = null) -> void
dymaptic.GeoBlazor.Core.Components.HomeViewModel.OnGo.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.HomeViewModelGoEvent!>
dymaptic.GeoBlazor.Core.Components.HomeViewModel.OnGo.set -> void
dymaptic.GeoBlazor.Core.Components.HomeViewModel.OnJsGo(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.SetViewpoint(dymaptic.GeoBlazor.Core.Components.Viewpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.HomeViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.HomeViewModelState?
dymaptic.GeoBlazor.Core.Components.HomeViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.HomeViewModel.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Viewpoint?
dymaptic.GeoBlazor.Core.Components.HomeViewModel.Viewpoint.set -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.GetValue() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue?>!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.ImageMediaInfo() -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.ImageMediaInfo(string? title = null, string? caption = null, string? altText = null, dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue? value = null, double? refreshInterval = null) -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.SetValue(dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.Value.get -> dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue?
dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.GetLinkURL() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.GetSourceURL() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.ImageMediaInfoValue() -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.ImageMediaInfoValue(string? linkURL = null, string? sourceURL = null) -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.LinkURL.get -> string?
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.LinkURL.set -> void
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.SetLinkURL(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.SetSourceURL(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.SourceURL.get -> string?
dymaptic.GeoBlazor.Core.Components.ImageMediaInfoValue.SourceURL.set -> void
dymaptic.GeoBlazor.Core.Components.ImageryLayerView
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.GetPixelData() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PixelData?>!
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.ImageryLayerView() -> void
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.ImageryLayerView(dymaptic.GeoBlazor.Core.Components.HighlightOptions? highlightOptions = null, dymaptic.GeoBlazor.Core.Components.PixelData? pixelData = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.PixelData.get -> dymaptic.GeoBlazor.Core.Components.PixelData?
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.PixelData.set -> void
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ImageryLayerView.SetPixelData(dymaptic.GeoBlazor.Core.Components.PixelData? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.InheritedDomain
dymaptic.GeoBlazor.Core.Components.InheritedDomain.InheritedDomain() -> void
dymaptic.GeoBlazor.Core.Components.InheritedDomain.InheritedDomain(string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.InitialViewProperties
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.Background.get -> dymaptic.GeoBlazor.Core.Model.ColorBackground?
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.Background.set -> void
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.GetBackground() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ColorBackground?>!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.GetTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.GetViewpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewpoint?>!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.InitialViewProperties() -> void
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.InitialViewProperties(dymaptic.GeoBlazor.Core.Model.ColorBackground? background = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, string? timeZone = null, dymaptic.GeoBlazor.Core.Components.Viewpoint? viewpoint = null) -> void
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.SetBackground(dymaptic.GeoBlazor.Core.Model.ColorBackground? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.SetTimeZone(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.SetViewpoint(dymaptic.GeoBlazor.Core.Components.Viewpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.TimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.TimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Viewpoint?
dymaptic.GeoBlazor.Core.Components.InitialViewProperties.Viewpoint.set -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.GetJoinType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.DynamicJoinType?>!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.GetLeftTableKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.GetLeftTableSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DynamicLayer?>!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.GetRightTableKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.GetRightTableSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DynamicLayer?>!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.JoinTableDataSource() -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.JoinTableDataSource(string! leftTableKey, string! rightTableKey, dymaptic.GeoBlazor.Core.Enums.DynamicJoinType joinType, dymaptic.GeoBlazor.Core.Components.DynamicLayer! leftTableSource, dymaptic.GeoBlazor.Core.Components.DynamicLayer! rightTableSource) -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.JoinType.get -> dymaptic.GeoBlazor.Core.Enums.DynamicJoinType?
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.JoinType.set -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.LeftTableKey.get -> string?
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.LeftTableKey.set -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.LeftTableSource.get -> dymaptic.GeoBlazor.Core.Components.DynamicLayer?
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.LeftTableSource.set -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.RightTableKey.get -> string?
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.RightTableKey.set -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.RightTableSource.get -> dymaptic.GeoBlazor.Core.Components.DynamicLayer?
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.RightTableSource.set -> void
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.SetJoinType(dymaptic.GeoBlazor.Core.Enums.DynamicJoinType value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.SetLeftTableKey(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.SetLeftTableSource(dymaptic.GeoBlazor.Core.Components.DynamicLayer! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.SetRightTableKey(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.SetRightTableSource(dymaptic.GeoBlazor.Core.Components.DynamicLayer! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLLayerView
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisibleMapImages.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage!>?
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisibleMapImages.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisiblePoints.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisiblePoints.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisiblePolygons.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisiblePolygons.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisiblePolylines.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Components.KMLLayerView.AllVisiblePolylines.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerView.GetAllVisibleMapImages() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage!>?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerView.GetAllVisiblePoints() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerView.GetAllVisiblePolygons() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerView.GetAllVisiblePolylines() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerView.KMLLayerView() -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerView.KMLLayerView(bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.Extent.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.GetExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.GetHref() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.GetKMLLayerViewMapImageId() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.GetRotation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.Href.get -> string?
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.Href.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.KMLLayerViewMapImage() -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.KMLLayerViewMapImage(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? extent = null, string? href = null, long? kMLLayerViewMapImageId = null, double? rotation = null) -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.KMLLayerViewMapImageId.get -> long?
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.KMLLayerViewMapImageId.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.Rotation.get -> double?
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.Rotation.set -> void
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.SetExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.SetHref(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.SetKMLLayerViewMapImageId(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.SetRotation(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLSublayer
dymaptic.GeoBlazor.Core.Components.KMLSublayer.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.KMLSublayer.Description.set -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.GetKMLSublayerId() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.GetNetworkLink() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.KMLSublayer() -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.KMLSublayer(string? description = null, long? kMLSublayerId = null, string? title = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.KMLSublayerId.get -> long?
dymaptic.GeoBlazor.Core.Components.KMLSublayer.KMLSublayerId.set -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.NetworkLink.get -> string?
dymaptic.GeoBlazor.Core.Components.KMLSublayer.NetworkLink.set -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.SetKMLSublayerId(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.KMLSublayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.KMLSublayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLSublayer!>?
dymaptic.GeoBlazor.Core.Components.KMLSublayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.KMLSublayer.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.KMLSublayer.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Label
dymaptic.GeoBlazor.Core.Components.Label.AllowOverrun.get -> bool?
dymaptic.GeoBlazor.Core.Components.Label.AllowOverrun.set -> void
dymaptic.GeoBlazor.Core.Components.Label.DeconflictionStrategy.get -> dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy?
dymaptic.GeoBlazor.Core.Components.Label.DeconflictionStrategy.set -> void
dymaptic.GeoBlazor.Core.Components.Label.GetAllowOverrun() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Label.GetDeconflictionStrategy() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy?>!
dymaptic.GeoBlazor.Core.Components.Label.GetLabelExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Label.GetLabelExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.Label.GetLabelPlacement() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LabelPlacement?>!
dymaptic.GeoBlazor.Core.Components.Label.GetLabelPosition() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LabelPosition?>!
dymaptic.GeoBlazor.Core.Components.Label.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Label.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Label.GetRepeatLabel() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Label.GetRepeatLabelDistance() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Label.GetUseCodedValues() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Label.GetWhere() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Label.Label() -> void
dymaptic.GeoBlazor.Core.Components.Label.Label(dymaptic.GeoBlazor.Core.Enums.LabelPlacement? labelPlacement = null, string? labelExpression = null, dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo? labelExpressionInfo = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? symbol = null, bool? allowOverrun = null, dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy? deconflictionStrategy = null, dymaptic.GeoBlazor.Core.Enums.LabelPosition? labelPosition = null, double? maxScale = null, double? minScale = null, bool? repeatLabel = null, dymaptic.GeoBlazor.Core.Model.Dimension? repeatLabelDistance = null, bool? useCodedValues = null, string? where = null) -> void
dymaptic.GeoBlazor.Core.Components.Label.LabelExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Label.LabelExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Label.LabelExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo?
dymaptic.GeoBlazor.Core.Components.Label.LabelExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Label.LabelPlacement.get -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement?
dymaptic.GeoBlazor.Core.Components.Label.LabelPlacement.set -> void
dymaptic.GeoBlazor.Core.Components.Label.LabelPosition.get -> dymaptic.GeoBlazor.Core.Enums.LabelPosition?
dymaptic.GeoBlazor.Core.Components.Label.LabelPosition.set -> void
dymaptic.GeoBlazor.Core.Components.Label.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Label.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Label.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Label.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Label.RepeatLabel.get -> bool?
dymaptic.GeoBlazor.Core.Components.Label.RepeatLabel.set -> void
dymaptic.GeoBlazor.Core.Components.Label.RepeatLabelDistance.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Label.RepeatLabelDistance.set -> void
dymaptic.GeoBlazor.Core.Components.Label.SetAllowOverrun(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetDeconflictionStrategy(dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetLabelExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetLabelExpressionInfo(dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetLabelPlacement(dymaptic.GeoBlazor.Core.Enums.LabelPlacement? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetLabelPosition(dymaptic.GeoBlazor.Core.Enums.LabelPosition? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetRepeatLabel(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetRepeatLabelDistance(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetUseCodedValues(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.SetWhere(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Label.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Label.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.Label.UseCodedValues.get -> bool?
dymaptic.GeoBlazor.Core.Components.Label.UseCodedValues.set -> void
dymaptic.GeoBlazor.Core.Components.Label.Where.get -> string?
dymaptic.GeoBlazor.Core.Components.Label.Where.set -> void
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.Expression.get -> string!
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.LabelExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.LabelExpressionInfo(string! expression, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.SetExpression(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.LabelExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo.FloorField.get -> string?
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo.FloorField.set -> void
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo.GetFloorField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo.LayerFloorInfo() -> void
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo.LayerFloorInfo(string! floorField) -> void
dymaptic.GeoBlazor.Core.Components.LayerFloorInfo.SetFloorField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.Errors.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.Errors.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.Filter.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.GetErrors() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.GetFilter() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.GetStatusIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.GetTemporaryLayerIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.LayerListCatalogOptionsVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.LayerListCatalogOptionsVisibleElements(bool? errors = null, bool? filter = null, bool? statusIndicators = null, bool? temporaryLayerIndicators = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.SetErrors(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.SetFilter(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.SetStatusIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.SetTemporaryLayerIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.StatusIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.StatusIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.TemporaryLayerIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements.TemporaryLayerIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.Errors.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.Errors.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.Filter.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.GetErrors() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.GetFilter() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.GetStatusIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.LayerListKnowledgeGraphOptionsVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.LayerListKnowledgeGraphOptionsVisibleElements(bool? errors = null, bool? filter = null, bool? statusIndicators = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.SetErrors(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.SetFilter(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.SetStatusIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.StatusIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.StatusIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.CheckPublishStatusEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.CheckPublishStatusEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.GetCheckPublishStatusEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.GetListModeDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.GetOperationalItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.HasCustomHandler.get -> bool
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.HasTriggerActionListener.get -> bool
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.LayerListViewModel() -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.LayerListViewModel(bool? checkPublishStatusEnabled = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? listItemCreatedFunction = null, bool? listModeDisabled = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.ListModeDisabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.ListModeDisabled.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.MoveListItem(dymaptic.GeoBlazor.Core.Components.ListItem! targetItem, dymaptic.GeoBlazor.Core.Components.ListItem! fromParentItem, dymaptic.GeoBlazor.Core.Components.ListItem! toParentItem, int newIndex) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OnJsTriggerAction(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OnListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OnListItemCreatedHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OnListItemCreatedHandler.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OnTriggerAction.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent!>
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OnTriggerAction.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OperationalItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.OperationalItems.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.SetCheckPublishStatusEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.SetListModeDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListViewModel.TriggerAction(dymaptic.GeoBlazor.Core.Components.ActionBase! action, dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.CatalogLayerList.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.CatalogLayerList.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.CloseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.CloseButton.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.CollapseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.CollapseButton.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Errors.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Errors.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Filter.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Flow.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Flow.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetCatalogLayerList() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetCloseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetCollapseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetErrors() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetFilter() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetFlow() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetHeading() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetStatusIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.GetTemporaryLayerIndicators() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Heading.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.Heading.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.LayerListVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.LayerListVisibleElements(bool? catalogLayerList = null, bool? closeButton = null, bool? collapseButton = null, bool? errors = null, bool? filter = null, bool? flow = null, bool? heading = null, bool? statusIndicators = null, bool? temporaryLayerIndicators = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetCatalogLayerList(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetCloseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetCollapseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetErrors(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetFilter(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetFlow(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetHeading(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetStatusIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.SetTemporaryLayerIndicators(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.StatusIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.StatusIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.TemporaryLayerIndicators.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements.TemporaryLayerIndicators.set -> void
dymaptic.GeoBlazor.Core.Components.LayerOptions
dymaptic.GeoBlazor.Core.Components.LayerOptions.GetReturnTopmostRaster() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerOptions.GetShowNoDataRecords() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerOptions.LayerOptions() -> void
dymaptic.GeoBlazor.Core.Components.LayerOptions.LayerOptions(bool? returnTopmostRaster = null, bool? showNoDataRecords = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerOptions.ReturnTopmostRaster.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerOptions.ReturnTopmostRaster.set -> void
dymaptic.GeoBlazor.Core.Components.LayerOptions.SetReturnTopmostRaster(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerOptions.SetShowNoDataRecords(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerOptions.ShowNoDataRecords.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerOptions.ShowNoDataRecords.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.BaseTileLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.BaseTileLayer(dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, double? maxScale = null, double? minScale = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? opacity = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetTileBounds(int level, int row, int col) -> System.Threading.Tasks.Task<double[]!>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetTileBoundsAsExtent(int level, int row, int col) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? effect) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SetTileInfo(dymaptic.GeoBlazor.Core.Components.TileInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.BingLogo.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.BingLogo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.BingMapsLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.BingMapsLayer(string! key, dymaptic.GeoBlazor.Core.Enums.BingImageryStyle? style = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, double? maxScale = null, double? minScale = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, string? arcGISLayerId = null, System.Globalization.CultureInfo? culture = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? opacity = null, bool? persistenceEnabled = null, string? region = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Culture.get -> System.Globalization.CultureInfo?
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Culture.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.GetBingLogo() -> System.Threading.Tasks.Task<string!>!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.GetCopyright() -> System.Threading.Tasks.Task<string!>!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.GetCulture() -> System.Threading.Tasks.Task<System.Globalization.CultureInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.GetRegion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BingImageryStyle?>!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.HasAttributionData() -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Key.get -> string!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Key.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Region.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Region.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.SetCulture(System.Globalization.CultureInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.SetKey(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.SetRegion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.SetStyle(dymaptic.GeoBlazor.Core.Enums.BingImageryStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Style.get -> dymaptic.GeoBlazor.Core.Enums.BingImageryStyle?
dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.AddToFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.AddToLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.AddToOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.AddToOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.AttributeTableTemplate.get -> dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.AttributeTableTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.CSVLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.CSVLayer(string! url, string? title = null, string? copyright = null, double? opacity = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate? attributeTableTemplate = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, string? definitionExpression = null, dymaptic.GeoBlazor.Core.Enums.CSVDelimiter? delimiter = null, string? displayField = null, bool? displayFilterEnabled = null, dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? displayFilterInfo = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo? elevationInfo = null, dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? featureReduction = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? fields = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, string? geometryType = null, bool? isBasemapReferenceLayer = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? labelingInfo = null, bool? labelsVisible = null, string? latitudeField = null, bool? legendEnabled = null, string? longitudeField = null, double? maxScale = null, double? minScale = null, string? objectIdField = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? orderBy = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, bool? screenSizePerspectiveEnabled = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, dymaptic.GeoBlazor.Core.Components.TrackInfo? trackInfo = null, bool? useViewTime = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DateFieldsTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DateFieldsTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Delimiter.get -> dymaptic.GeoBlazor.Core.Enums.CSVDelimiter?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Delimiter.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DisplayField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DisplayField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DisplayFilterEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DisplayFilterEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DisplayFilterInfo.get -> dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.DisplayFilterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ElevationInfo.get -> dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ElevationInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.FeatureReduction.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.FeatureReduction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.FieldsIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GeometryType.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GeometryType.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetAttributeTableTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetDateFieldsTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetDelimiter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.CSVDelimiter?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetDisplayField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetDisplayFilterEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetDisplayFilterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetElevationInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetFeatureReduction() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetGeometryType() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetIsTable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetLabelingInfo() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetLatitudeField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetLongitudeField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetOrderBy() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetOutFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetScreenSizePerspectiveEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetTrackInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.IsTable.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.IsTable.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LabelingInfo.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LabelingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LatitudeField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LatitudeField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LongitudeField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.LongitudeField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OrderBy.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OrderBy.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OutFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.OutFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RemoveFromFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RemoveFromLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RemoveFromOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RemoveFromOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ScreenSizePerspectiveEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ScreenSizePerspectiveEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetAttributeTableTemplate(dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetDelimiter(dymaptic.GeoBlazor.Core.Enums.CSVDelimiter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetDisplayField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetDisplayFilterEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetDisplayFilterInfo(dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetElevationInfo(dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetFeatureReduction(dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetGeometryType(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetLabelingInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetLatitudeField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetLongitudeField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetObjectIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetOrderBy(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetOutFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetScreenSizePerspectiveEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetTrackInfo(dymaptic.GeoBlazor.Core.Components.TrackInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetUrl(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TrackInfo.get -> dymaptic.GeoBlazor.Core.Components.TrackInfo?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.TrackInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Url.get -> string!
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Add(dymaptic.GeoBlazor.Core.Components.Field! field) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Add(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Add(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToCharts(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToSource(params dymaptic.GeoBlazor.Core.Components.Graphic![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToTemplates(params dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AddToTypes(params dymaptic.GeoBlazor.Core.Model.FeatureType![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ApplyEdits(dymaptic.GeoBlazor.Core.Model.FeatureEdits! edits, dymaptic.GeoBlazor.Core.Options.FeatureEditOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.FeatureEditsResult!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AttributeTableTemplate.get -> dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.AttributeTableTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Charts.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Charts.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Clone() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.CreatePopupTemplate(dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions? options = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.CreateQuery() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Query!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DateFieldsTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DateFieldsTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DatesInUnknownTimezone.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DatesInUnknownTimezone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DisplayField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DisplayField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DisplayFilterEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DisplayFilterEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DisplayFilterInfo.get -> dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DisplayFilterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DynamicDataSource.get -> dymaptic.GeoBlazor.Core.Components.DynamicLayer?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.DynamicDataSource.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EditFieldsInfo.get -> dymaptic.GeoBlazor.Core.Model.EditFieldsInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EditFieldsInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EditingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EditingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EditingInfo.get -> dymaptic.GeoBlazor.Core.Model.EditingInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EditingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EffectiveCapabilities.get -> dymaptic.GeoBlazor.Core.Components.Capabilities?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EffectiveCapabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EffectiveEditingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.EffectiveEditingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ElevationInfo.get -> dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ElevationInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FeatureLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FeatureLayer(string? url = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? source = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, string? definitionExpression = null, double? minScale = null, double? maxScale = null, string? objectIdField = null, dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType? geometryType = null, string? title = null, double? opacity = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, string? apiKey = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate? attributeTableTemplate = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, System.Collections.Generic.IReadOnlyList<string!>? charts = null, string? copyright = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, string? dateFieldsTimeZone = null, string? displayField = null, bool? displayFilterEnabled = null, dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? displayFilterInfo = null, dymaptic.GeoBlazor.Core.Components.DynamicLayer? dynamicDataSource = null, bool? editingEnabled = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo? elevationInfo = null, dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? featureReduction = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? fields = null, dymaptic.GeoBlazor.Core.Components.LayerFloorInfo? floorInfo = null, dymaptic.GeoBlazor.Core.Interfaces.IFormTemplate? formTemplate = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, string? gdbVersion = null, bool? hasM = null, bool? hasZ = null, System.DateTime? historicMoment = null, bool? isBasemapReferenceLayer = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? labelingInfo = null, bool? labelsVisible = null, int? layerIndex = null, bool? legendEnabled = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? orderBy = null, bool? persistenceEnabled = null, bool? popupEnabled = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, bool? returnM = null, bool? returnZ = null, bool? screenSizePerspectiveEnabled = null, string? sourceJSON = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>? templates = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, dymaptic.GeoBlazor.Core.Components.TrackInfo? trackInfo = null, string? typeIdField = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.FeatureType!>? types = null, bool? useViewTime = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FeatureReduction.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FeatureReduction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FieldsIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FloorInfo.get -> dymaptic.GeoBlazor.Core.Components.LayerFloorInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FloorInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FormTemplate.get -> dymaptic.GeoBlazor.Core.Interfaces.IFormTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.FormTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GeometryFieldsInfo.get -> dymaptic.GeoBlazor.Core.Model.GeometryFieldsInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GeometryFieldsInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GeometryType.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetAttributeTableTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetCharts() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDateFieldsTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDatesInUnknownTimezone() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDisplayField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDisplayFilterEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDisplayFilterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetDynamicDataSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DynamicLayer?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetEditFieldsInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.EditFieldsInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetEditingEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetEditingInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.EditingInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetEffectiveCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Capabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetEffectiveEditingEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetElevationInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFeatureReduction() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFeatureType(dymaptic.GeoBlazor.Core.Components.Graphic! feature) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureType?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetField(string! fieldName) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Field?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFieldDomain(string! fieldName, dymaptic.GeoBlazor.Core.Components.Graphic? feature = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Domain?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFloorInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerFloorInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetFormTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFormTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetGdbVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetGeometryFieldsInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GeometryFieldsInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetGeometryType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetHasM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetHasZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetHistoricMoment() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetIsTable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetLabelingInfo() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetLayerIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetOrderBy() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetOutFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetPreferredTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetPublishingInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PublishingInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetRelationships() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Relationship!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetReturnM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetReturnZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetScreenSizePerspectiveEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetServiceDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetServiceItemId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetSubtypeField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetSubtypes() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Subtype!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTemplates() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTrackInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTypeIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetTypes() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.FeatureType!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HasEditsListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HasM.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HasM.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HasZ.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HasZ.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HistoricMoment.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.HistoricMoment.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.IsTable.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.IsTable.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LabelingInfo.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LabelingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LayerIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LayerIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnEdits.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnEdits.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnJsEdits(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnQueryFeaturesStreamCallback(Microsoft.JSInterop.IJSStreamReference! streamReference, System.Guid queryId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnQueryRelatedFeaturesStreamCallback(Microsoft.JSInterop.IJSStreamReference! streamReference, System.Guid queryId, string! objectId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OrderBy.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OrderBy.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OutFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.OutFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PreferredTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PreferredTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PublishingInfo.get -> dymaptic.GeoBlazor.Core.Model.PublishingInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.PublishingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryExtent(dymaptic.GeoBlazor.Core.Model.Query? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.ExtentQueryResult!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryFeatureCount(dymaptic.GeoBlazor.Core.Model.Query? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryFeatures(dymaptic.GeoBlazor.Core.Model.Query? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureSet?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryObjectIds(dymaptic.GeoBlazor.Core.Model.Query! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ObjectId![]!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryRelatedFeatures(dymaptic.GeoBlazor.Core.Model.RelationshipQuery! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.RelatedFeaturesQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryRelatedFeaturesCount(dymaptic.GeoBlazor.Core.Model.RelationshipQuery! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.RelatedFeaturesCountQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryTopFeatureCount(dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryTopFeatures(dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureSet?>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryTopFeaturesExtent(dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.ExtentQueryResult!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.QueryTopObjectIds(dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ObjectId![]!>!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Relationships.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Relationship!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Relationships.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Remove(dymaptic.GeoBlazor.Core.Components.Field! field) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromCharts(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromSource(params dymaptic.GeoBlazor.Core.Components.Graphic![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromTemplates(params dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RemoveFromTypes(params dymaptic.GeoBlazor.Core.Model.FeatureType![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ReturnM.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ReturnM.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ReturnZ.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ReturnZ.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ScreenSizePerspectiveEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ScreenSizePerspectiveEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ServiceDefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ServiceDefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ServiceItemId.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ServiceItemId.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetAttributeTableTemplate(dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetCharts(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetDateFieldsTimeZone(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetDisplayField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetDisplayFilterEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetDisplayFilterInfo(dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetDynamicDataSource(dymaptic.GeoBlazor.Core.Components.DynamicLayer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetEditingEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? effect) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetElevationInfo(dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetFeatureReduction(dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetFloorInfo(dymaptic.GeoBlazor.Core.Components.LayerFloorInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetFormTemplate(dymaptic.GeoBlazor.Core.Interfaces.IFormTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetGdbVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetHasM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetHasZ(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetHistoricMoment(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetLabelingInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetLayerIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetObjectIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetOrderBy(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetOutFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetReturnM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetReturnZ(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetScreenSizePerspectiveEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetSource(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetSourceJSON(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTemplates(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTrackInfo(dymaptic.GeoBlazor.Core.Components.TrackInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTypeIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetTypes(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.FeatureType!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Source.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Source.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SubtypeField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.SubtypeField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Subtypes.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Subtype!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Subtypes.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Templates.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Templates.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TrackInfo.get -> dymaptic.GeoBlazor.Core.Components.TrackInfo?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TrackInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TypeIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.TypeIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Types.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.FeatureType!>?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Types.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Version.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ActiveQueries -> System.Collections.Generic.Dictionary<System.Guid, dymaptic.GeoBlazor.Core.Components.Graphic![]!>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AddToFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AddToLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AddToOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AddToOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AddToTemplates(params dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AttributeTableTemplate.get -> dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.AttributeTableTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DateFieldsTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DateFieldsTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DisplayField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DisplayField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DisplayFilterEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DisplayFilterEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DisplayFilterInfo.get -> dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.DisplayFilterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.EditingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.EditingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ElevationInfo.get -> dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ElevationInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.FeatureReduction.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.FeatureReduction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.FieldsIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GeoJSONLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GeoJSONLayer(string! url, string? copyright = null, string? title = null, double? opacity = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate? attributeTableTemplate = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, string? definitionExpression = null, string? displayField = null, bool? displayFilterEnabled = null, dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? displayFilterInfo = null, bool? editingEnabled = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo? elevationInfo = null, dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? featureReduction = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? fields = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType? geometryType = null, bool? isBasemapReferenceLayer = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? labelingInfo = null, bool? labelsVisible = null, bool? legendEnabled = null, double? maxScale = null, double? minScale = null, string? objectIdField = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? orderBy = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, bool? persistenceEnabled = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, bool? screenSizePerspectiveEnabled = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>? templates = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, dymaptic.GeoBlazor.Core.Components.TrackInfo? trackInfo = null, bool? useViewTime = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GeometryType.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetAttributeTableTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetDateFieldsTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetDisplayField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetDisplayFilterEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetDisplayFilterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetEditingEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetElevationInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetFeatureReduction() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetGeometryType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetHasZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetIsTable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetLabelingInfo() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetOrderBy() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetOutFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetScreenSizePerspectiveEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetTemplates() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetTrackInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.HasEditsListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.HasZ.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.HasZ.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.IsTable.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.IsTable.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.LabelingInfo.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.LabelingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnEdits.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnEdits.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnJsEdits(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnQueryFeaturesStreamCallback(Microsoft.JSInterop.IJSStreamReference! streamReference, System.Guid queryId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OrderBy.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OrderBy.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OutFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.OutFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RemoveFromFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RemoveFromLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RemoveFromOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RemoveFromOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RemoveFromTemplates(params dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ScreenSizePerspectiveEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ScreenSizePerspectiveEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetAttributeTableTemplate(dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetDisplayField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetDisplayFilterEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetDisplayFilterInfo(dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetEditingEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetElevationInfo(dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetFeatureReduction(dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetGeometryType(dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetLabelingInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetObjectIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetOrderBy(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetOutFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetScreenSizePerspectiveEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetTemplates(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetTrackInfo(dymaptic.GeoBlazor.Core.Components.TrackInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Templates.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Templates.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TrackInfo.get -> dymaptic.GeoBlazor.Core.Components.TrackInfo?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.TrackInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GeoRSSLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GeoRSSLayer(string! url, string? title = null, double? opacity = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol? lineSymbol = null, double? maxScale = null, double? minScale = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol? pointSymbol = null, dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol? polygonSymbol = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetLineSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetPointSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetPolygonSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.LineSymbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.LineSymbol.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.PointSymbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.PointSymbol.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.PolygonSymbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.PolygonSymbol.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetLineSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetPointSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetPolygonSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Add(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Add(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.AddMany(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.ElevationInfo.get -> dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo?
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.ElevationInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GetElevationInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GetScreenSizePerspectiveEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Graphics.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Graphics.init -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GraphicsLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.GraphicsLayer(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? graphics = null, string? title = null, double? opacity = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, bool? persistenceEnabled = null, double? minScale = null, double? maxScale = null, bool? screenSizePerspectiveEnabled = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo? elevationInfo = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.RegisterExistingGraphicsFromJavaScript(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Remove(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Remove(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.RemoveAll() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.RemoveMany(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.ScreenSizePerspectiveEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.ScreenSizePerspectiveEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.SetElevationInfo(dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.SetScreenSizePerspectiveEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ActivePresetRendererName.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ActivePresetRendererName.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.AddToBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.AddToPresetRenderers(params dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.BandIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.BandIds.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.CompressionQuality.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.CompressionQuality.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.CompressionTolerance.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.CompressionTolerance.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.DefaultMosaicRule.get -> dymaptic.GeoBlazor.Core.Model.MosaicRule?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.DefaultMosaicRule.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.FieldsIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Format.get -> dymaptic.GeoBlazor.Core.Enums.ImageFormat?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Format.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetActivePresetRendererName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetBandIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetCompressionQuality() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetCompressionTolerance() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetDefaultMosaicRule() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MosaicRule?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetFormat() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ImageFormat?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetHasMultidimensions() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetImageMaxHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetImageMaxWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetInterpolation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Interpolation?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetMosaicRule() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MosaicRule?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetMultidimensionalInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetMultidimensionalSubset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetNoData() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.NoData?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetNoDataInterpretation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetPixelType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PixelType?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetPresetRenderers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetRasterFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetRasterFunction() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.RasterFunction?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetRasterFunctionInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetServiceRasterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RasterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetSourceType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SourceType?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.HasMultidimensions.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.HasMultidimensions.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.HasPixelFilter.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ImageMaxHeight.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ImageMaxHeight.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ImageMaxWidth.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ImageMaxWidth.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ImageryLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ImageryLayer(string? url = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? renderer = null, System.Collections.Generic.IReadOnlyList<long>? bandIds = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, double? compressionQuality = null, double? compressionTolerance = null, string? copyright = null, string? definitionExpression = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Enums.ImageFormat? format = null, bool? hasMultidimensions = null, int? imageMaxHeight = null, int? imageMaxWidth = null, dymaptic.GeoBlazor.Core.Enums.Interpolation? interpolation = null, bool? legendEnabled = null, double? maxScale = null, double? minScale = null, dymaptic.GeoBlazor.Core.Components.NoData? noData = null, dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation? noDataInterpretation = null, string? objectIdField = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Enums.PixelType? pixelType = null, bool? popupEnabled = null, double? refreshInterval = null, bool? useViewTime = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, string? title = null, double? opacity = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, bool? visible = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, string? activePresetRendererName = null, string? arcGISLayerId = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Model.MosaicRule? mosaicRule = null, dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? multidimensionalSubset = null, dymaptic.GeoBlazor.Core.Functions.PixelFilterFunction? pixelFilter = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>? presetRenderers = null, dymaptic.GeoBlazor.Core.Components.RasterFunction? rasterFunction = null, string? sourceJSON = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Interpolation.get -> dymaptic.GeoBlazor.Core.Enums.Interpolation?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Interpolation.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MosaicRule.get -> dymaptic.GeoBlazor.Core.Model.MosaicRule?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MosaicRule.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MultidimensionalInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MultidimensionalInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MultidimensionalSubset.get -> dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.MultidimensionalSubset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.NoData.get -> dymaptic.GeoBlazor.Core.Components.NoData?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.NoData.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.NoDataInterpretation.get -> dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.NoDataInterpretation.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.OnJsPixelFilter(dymaptic.GeoBlazor.Core.Components.PixelData! pixelData) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PixelFilter.get -> dymaptic.GeoBlazor.Core.Functions.PixelFilterFunction?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PixelFilter.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PixelType.get -> dymaptic.GeoBlazor.Core.Enums.PixelType?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PixelType.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PresetRenderers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.PresetRenderers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RasterFields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RasterFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RasterFunction.get -> dymaptic.GeoBlazor.Core.Components.RasterFunction?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RasterFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RasterFunctionInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RasterFunctionInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RemoveFromBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RemoveFromPresetRenderers(params dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ServiceRasterInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ServiceRasterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetActivePresetRendererName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetBandIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetCompressionQuality(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetCompressionTolerance(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetFormat(dymaptic.GeoBlazor.Core.Enums.ImageFormat? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetImageMaxHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetImageMaxWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetInterpolation(dymaptic.GeoBlazor.Core.Enums.Interpolation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetMosaicRule(dymaptic.GeoBlazor.Core.Model.MosaicRule? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetMultidimensionalSubset(dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetNoData(dymaptic.GeoBlazor.Core.Components.NoData? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetNoDataInterpretation(dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetPixelType(dymaptic.GeoBlazor.Core.Enums.PixelType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetPresetRenderers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetRasterFunction(dymaptic.GeoBlazor.Core.Components.RasterFunction? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetRenderer(dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetSourceJSON(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SourceType.get -> dymaptic.GeoBlazor.Core.Enums.SourceType?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SourceType.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Version.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ActivePresetRendererName.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ActivePresetRendererName.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.AddToBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.AddToMultidimensionalDefinition(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.AddToPresetRenderers(params dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.BandIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.BandIds.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetActivePresetRendererName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetBandIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetInterpolation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Interpolation?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetMultidimensionalDefinition() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetMultidimensionalSubset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetPixelDataSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PixelData?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetPresetRenderers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetRasterFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetRasterFunction() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.RasterFunction?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetServiceRasterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RasterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetStringSource() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ImageryTileLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ImageryTileLayer(string? url = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? renderer = null, System.Collections.Generic.IReadOnlyList<long>? bandIds = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Enums.Interpolation? interpolation = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? multidimensionalDefinition = null, dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? multidimensionalSubset = null, bool? persistenceEnabled = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, bool? useViewTime = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, double? opacity = null, string? title = null, string? activePresetRendererName = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Components.PixelData? pixelDataSource = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>? presetRenderers = null, dymaptic.GeoBlazor.Core.Components.RasterFunction? rasterFunction = null, string? stringSource = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Interpolation.get -> dymaptic.GeoBlazor.Core.Enums.Interpolation?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Interpolation.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MultidimensionalDefinition.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MultidimensionalDefinition.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MultidimensionalSubset.get -> dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.MultidimensionalSubset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PixelDataSource.get -> dymaptic.GeoBlazor.Core.Components.PixelData?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PixelDataSource.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PresetRenderers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.PresetRenderers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RasterFields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RasterFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RasterFunction.get -> dymaptic.GeoBlazor.Core.Components.RasterFunction?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RasterFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RemoveFromBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RemoveFromMultidimensionalDefinition(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RemoveFromPresetRenderers(params dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ServiceRasterInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ServiceRasterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetActivePresetRendererName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetBandIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetInterpolation(dymaptic.GeoBlazor.Core.Enums.Interpolation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetMultidimensionalDefinition(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetMultidimensionalSubset(dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetPixelDataSource(dymaptic.GeoBlazor.Core.Components.PixelData? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetPresetRenderers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetRasterFunction(dymaptic.GeoBlazor.Core.Components.RasterFunction? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetRenderer(dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetStringSource(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetTileInfo(dymaptic.GeoBlazor.Core.Components.TileInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.StringSource.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.StringSource.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Version.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.AddToSublayers(params dymaptic.GeoBlazor.Core.Components.KMLSublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLSublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.KMLLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.KMLLayer(string? url = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? persistenceEnabled = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLSublayer!>? sublayers = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.RemoveFromSublayers(params dymaptic.GeoBlazor.Core.Components.KMLSublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetSublayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLSublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.KMLSublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer
dymaptic.GeoBlazor.Core.Components.Layers.Layer.ArcGISLayerId.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.ArcGISLayerId.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.ExcludeApiKey.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.ExcludeApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetArcGISLayerId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetListMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ListMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetPersistenceEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.GetVisibilityTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.HasCreateErrorListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.Layer.HasCreateListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.Layer.HasDestroyListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Imported.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Imported.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.IsBasemapReferenceLayer.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.IsBasemapReferenceLayer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Layer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.LayerView.get -> dymaptic.GeoBlazor.Core.Components.LayerView?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.ListMode.get -> dymaptic.GeoBlazor.Core.Enums.ListMode?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.ListMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Loaded.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnCreate.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnCreate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnCreateError.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnCreateError.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnDestroy.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnDestroy.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnJsCreate(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnJsCreateError(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnJsDestroy(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Opacity.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Opacity.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.PersistenceEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.PersistenceEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetArcGISLayerId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetListMode(dymaptic.GeoBlazor.Core.Enums.ListMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetOpacity(double value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetVisibilityTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Layer.UpdateLayer() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Layer.VisibilityTimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.Layer.VisibilityTimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.AddToSublayers(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.AddToSubtables(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.AllSublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.AllSublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.DateFieldsTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.DateFieldsTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.DatesInUnknownTimezone.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.DatesInUnknownTimezone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Dpi.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Dpi.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetAllSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetDateFieldsTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetDatesInUnknownTimezone() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetDpi() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetGdbVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetImageFormat() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.MapImageFormat?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetImageMaxHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetImageMaxWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetImageTransparency() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetPreferredTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetSubtables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageFormat.get -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageFormat.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageMaxHeight.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageMaxHeight.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageMaxWidth.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageMaxWidth.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageTransparency.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ImageTransparency.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.MapImageLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.MapImageLayer(string? url = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, double? dpi = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, string? gdbVersion = null, dymaptic.GeoBlazor.Core.Enums.MapImageFormat? imageFormat = null, int? imageMaxHeight = null, int? imageMaxWidth = null, bool? imageTransparency = null, bool? legendEnabled = null, double? maxScale = null, double? minScale = null, bool? persistenceEnabled = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, bool? useViewTime = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? sublayers = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, bool? visible = null, double? opacity = null, string? arcGISLayerId = null, string? copyright = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? subtables = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.PreferredTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.PreferredTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.RemoveFromSublayers(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.RemoveFromSubtables(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetDpi(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetGdbVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetImageFormat(dymaptic.GeoBlazor.Core.Enums.MapImageFormat? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetImageMaxHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetImageMaxWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetImageTransparency(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetSublayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetSubtables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Subtables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Subtables.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Version.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.OpenStreetMapLayer
dymaptic.GeoBlazor.Core.Components.Layers.OpenStreetMapLayer.OpenStreetMapLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.OpenStreetMapLayer.OpenStreetMapLayer(dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, string? title = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, double? maxScale = null, double? minScale = null, double? refreshInterval = null, System.Collections.Generic.IReadOnlyList<string!>? subDomains = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, double? opacity = null, bool? visible = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, bool? persistenceEnabled = null, string? urlTemplate = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.AddToLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.AddToOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.CancelLoad() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.SublayerCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.CreateFeatureLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.CreatePopupTemplate(dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.CreateQuery() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Query?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.FieldsIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.FloorInfo.get -> dymaptic.GeoBlazor.Core.Components.LayerFloorInfo?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.FloorInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetAllSublayers() -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SublayerCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetFeatureType(dymaptic.GeoBlazor.Core.Components.Graphic! feature) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureType?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetFieldDomain(string! fieldName, dymaptic.GeoBlazor.Core.Options.SublayerGetFieldDomainOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Domain?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetFloorInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerFloorInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetIsTable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetLabelingInfo() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetListMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ListMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetOrderBy() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetRelationships() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Relationship!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DynamicLayer?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetSublayerId() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetTypeIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetTypes() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.FeatureType!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.IsFulfilled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.IsRejected() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.IsResolved() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.IsTable.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.IsTable.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.LabelingInfo.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.LabelingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.ListMode.get -> dymaptic.GeoBlazor.Core.Enums.ListMode?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.ListMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Load(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Opacity.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Opacity.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.OrderBy.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.OrderBy.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.QueryAttachments(dymaptic.GeoBlazor.Core.Model.AttachmentQuery! attachmentQuery, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.AttachmentsQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.QueryFeatureCount(dymaptic.GeoBlazor.Core.Model.Query! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.QueryFeatures(dymaptic.GeoBlazor.Core.Model.Query! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureSet?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.QueryObjectIds(dymaptic.GeoBlazor.Core.Model.Query! query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ObjectId![]?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.QueryRelatedFeatures(dymaptic.GeoBlazor.Core.Model.RelationshipQuery! relationshipQuery, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.RelatedFeaturesQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.QueryRelatedFeaturesCount(dymaptic.GeoBlazor.Core.Model.RelationshipQuery! relationshipQuery, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.RelatedFeaturesCountQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Relationships.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Relationship!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Relationships.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.RemoveFromLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.RemoveFromOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetFloorInfo(dymaptic.GeoBlazor.Core.Components.LayerFloorInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetLabelingInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetListMode(dymaptic.GeoBlazor.Core.Enums.ListMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetOpacity(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetOrderBy(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetSource(dymaptic.GeoBlazor.Core.Components.DynamicLayer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetSublayerId(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Source.get -> dymaptic.GeoBlazor.Core.Components.DynamicLayer?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Source.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Sublayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Sublayer(long? sublayerId = null, bool? labelsVisible = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? popupEnabled = null, string? title = null, bool? visible = null, string? definitionExpression = null, dymaptic.GeoBlazor.Core.Components.LayerFloorInfo? floorInfo = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? labelingInfo = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, dymaptic.GeoBlazor.Core.Components.DynamicLayer? source = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? sublayers = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? orderBy = null, string? url = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SublayerId.get -> long?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.SublayerId.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.TypeIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.TypeIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Types.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.FeatureType!>?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Types.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.UpdateFromJavaScript(dymaptic.GeoBlazor.Core.Components.Layers.Sublayer! renderedSublayer) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.When(System.Func<System.Threading.Tasks.Task!>! callback, System.Func<System.Threading.Tasks.Task!>! errback) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.AddToSubtables(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.AddToTileServers(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.AllSublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.AllSublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.AttributionDataUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.AttributionDataUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetAllSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetAttributionDataUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetHasAttributionData() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetResampling() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetSubtables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetTileServers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.HasAttributionData.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.HasAttributionData.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.RemoveFromSubtables(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.RemoveFromTileServers(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Resampling.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Resampling.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetResampling(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetSubtables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetTileInfo(dymaptic.GeoBlazor.Core.Components.TileInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetTileServers(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Subtables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Subtables.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.TileLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.TileLayer(string? apiKey = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, bool? resampling = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? subtables = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, System.Collections.Generic.IReadOnlyList<string!>? tileServers = null, string? title = null, string? url = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.TileServers.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.TileServers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Version.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.UnknownLayer
dymaptic.GeoBlazor.Core.Components.Layers.UnknownLayer.UnknownLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.UnknownLayer.UnknownLayer(string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? opacity = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.UnsupportedLayer
dymaptic.GeoBlazor.Core.Components.Layers.UnsupportedLayer.UnsupportedLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.UnsupportedLayer.UnsupportedLayer(string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? opacity = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.AttributionDataUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.AttributionDataUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.CurrentStyleInfo.get -> dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.CurrentStyleInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetAttributionDataUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetCurrentStyleInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetInitialExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetStyle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.InitialExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.InitialExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetStyle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Style.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.VectorTileLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.VectorTileLayer(string? apiKey = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, string? style = null, string? title = null, string? url = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.AddToBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.AddToMultidimensionalDefinition(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.BandIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.BandIds.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.CoverageId.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.CoverageId.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.CoverageInfo.get -> dymaptic.GeoBlazor.Core.Model.CoverageInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.CoverageInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetBandIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetCoverageId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetCoverageInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.CoverageInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetInterpolation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Interpolation?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetMultidimensionalDefinition() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetMultidimensionalSubset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetNoData() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetRasterFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetServiceRasterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RasterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.GetVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Interpolation.get -> dymaptic.GeoBlazor.Core.Enums.Interpolation?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Interpolation.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MultidimensionalDefinition.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MultidimensionalDefinition.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MultidimensionalSubset.get -> dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.MultidimensionalSubset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.NoData.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.NoData.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.RasterFields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.RasterFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.RemoveFromBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.RemoveFromMultidimensionalDefinition(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.ServiceRasterInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.ServiceRasterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetBandIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetCoverageId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetCoverageInfo(dymaptic.GeoBlazor.Core.Model.CoverageInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetInterpolation(dymaptic.GeoBlazor.Core.Enums.Interpolation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetMultidimensionalDefinition(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetMultidimensionalSubset(dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetNoData(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetRenderer(dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.SetVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Version.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.WCSLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.WCSLayer(string? url = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? multidimensionalDefinition = null, dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? renderer = null, double? opacity = null, string? title = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, string? arcGISLayerId = null, System.Collections.Generic.IReadOnlyList<long>? bandIds = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, string? coverageId = null, dymaptic.GeoBlazor.Core.Model.CoverageInfo? coverageInfo = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, dymaptic.GeoBlazor.Core.Enums.Interpolation? interpolation = null, bool? isBasemapReferenceLayer = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? multidimensionalSubset = null, double? noData = null, bool? persistenceEnabled = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, bool? useViewTime = null, string? version = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.AddToSubDomains(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetSubDomains() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetTileServers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.GetUrlTemplate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.RemoveFromSubDomains(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetSubDomains(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetTileInfo(dymaptic.GeoBlazor.Core.Components.TileInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SetUrlTemplate(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SubDomains.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.SubDomains.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.TileServers.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.TileServers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.UrlTemplate.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.UrlTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.WebTileLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.WebTileLayer(string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, System.Collections.Generic.IReadOnlyList<string!>? subDomains = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, string? title = null, string? urlTemplate = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.AddToFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.AddToLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.AddToOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.AddToOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Capabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DateFieldsTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DateFieldsTimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DisplayField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DisplayField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DisplayFilterEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DisplayFilterEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DisplayFilterInfo.get -> dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.DisplayFilterInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ElevationInfo.get -> dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ElevationInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.FeatureReduction.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.FeatureReduction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.FieldsIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GeometryType.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetDateFieldsTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetDisplayField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetDisplayFilterEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetDisplayFilterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetElevationInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetFeatureReduction() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetGeometryType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetLabelingInfo() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetMaxPageCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetMaxRecordCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetNamespaceUri() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetOrderBy() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetOutFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetScreenSizePerspectiveEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetTrackInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.GetWfsCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.WFSCapabilities?>!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.LabelingInfo.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.LabelingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MaxPageCount.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MaxPageCount.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MaxRecordCount.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MaxRecordCount.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.NamespaceUri.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.NamespaceUri.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OrderBy.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OrderBy.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OutFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.OutFields.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RemoveFromFields(params dymaptic.GeoBlazor.Core.Components.Field![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RemoveFromLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RemoveFromOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RemoveFromOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ScreenSizePerspectiveEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ScreenSizePerspectiveEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetDisplayField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetDisplayFilterEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetDisplayFilterInfo(dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetElevationInfo(dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetFeatureReduction(dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetGeometryType(dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetLabelingInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetMaxPageCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetMaxRecordCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetNamespaceUri(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetObjectIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetOrderBy(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetOutFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetScreenSizePerspectiveEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetTrackInfo(dymaptic.GeoBlazor.Core.Components.TrackInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.TrackInfo.get -> dymaptic.GeoBlazor.Core.Components.TrackInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.TrackInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.WfsCapabilities.get -> dymaptic.GeoBlazor.Core.Model.WFSCapabilities?
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.WfsCapabilities.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.WFSLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.WFSLayer(string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, string? definitionExpression = null, string? displayField = null, bool? displayFilterEnabled = null, dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? displayFilterInfo = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo? elevationInfo = null, dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction? featureReduction = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? fields = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType? geometryType = null, bool? isBasemapReferenceLayer = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? labelingInfo = null, bool? labelsVisible = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, int? maxPageCount = null, int? maxRecordCount = null, double? maxScale = null, double? minScale = null, string? name = null, string? namespaceUri = null, string? objectIdField = null, double? opacity = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? orderBy = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, bool? persistenceEnabled = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, bool? screenSizePerspectiveEnabled = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, string? title = null, dymaptic.GeoBlazor.Core.Components.TrackInfo? trackInfo = null, string? url = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.AddToFullExtents(params dymaptic.GeoBlazor.Core.Components.Geometries.Extent![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.AddToSpatialReferences(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.AddToSublayers(params dymaptic.GeoBlazor.Core.Components.WMSSublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.AllSublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.AllSublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.CustomLayerParameters.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.CustomLayerParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Dimensions.get -> System.Collections.Generic.IReadOnlyList<object!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Dimensions.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FeatureInfoFormat.get -> dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FeatureInfoFormat.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FeatureInfoFormats.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FeatureInfoFormats.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FeatureInfoUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FeatureInfoUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FetchFeatureInfoFunction.get -> dymaptic.GeoBlazor.Core.Functions.FetchFeatureInfoFunction?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FetchFeatureInfoFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FullExtents.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.FullExtents.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetAllSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetCustomLayerParameters() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetDimensions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetFeatureInfoFormat() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetFeatureInfoFormats() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetFeatureInfoUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetFullExtents() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetImageFormat() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetImageMaxHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetImageMaxWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetImageTransparency() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetSpatialReferences() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.GetVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.HasFetchFeatureInfoFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.HasRefreshListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageFormat.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageFormat.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageMaxHeight.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageMaxHeight.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageMaxWidth.get -> int?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageMaxWidth.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageTransparency.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ImageTransparency.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.OnJsFetchFeatureInfoFunction(string! query) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic![]?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.OnJsRefresh(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.OnRefresh.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.RefreshEvent!>
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.OnRefresh.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.RemoveFromFullExtents(params dymaptic.GeoBlazor.Core.Components.Geometries.Extent![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.RemoveFromSpatialReferences(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.RemoveFromSublayers(params dymaptic.GeoBlazor.Core.Components.WMSSublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetCustomLayerParameters(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetFeatureInfoFormat(dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetFeatureInfoUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetFullExtents(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetImageFormat(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetImageMaxHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetImageMaxWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetImageTransparency(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetSpatialReferences(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetSublayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SetVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SpatialReferences.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.SpatialReferences.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Version.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.WMSLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.WMSLayer(string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, string? customLayerParameters = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, string? description = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat? featureInfoFormat = null, string? featureInfoUrl = null, dymaptic.GeoBlazor.Core.Functions.FetchFeatureInfoFunction? fetchFeatureInfoFunction = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>? fullExtents = null, string? imageFormat = null, int? imageMaxHeight = null, int? imageMaxWidth = null, bool? imageTransparency = null, bool? isBasemapReferenceLayer = null, bool? legendEnabled = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, System.Collections.Generic.IReadOnlyList<double>? spatialReferences = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>? sublayers = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInfo? timeInfo = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? timeOffset = null, string? title = null, string? url = null, bool? useViewTime = null, string? version = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.ActiveLayer.get -> dymaptic.GeoBlazor.Core.Components.WMTSSublayer?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.ActiveLayer.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.AddToSublayers(params dymaptic.GeoBlazor.Core.Components.WMTSSublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Copyright.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.CustomLayerParameters.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.CustomLayerParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetActiveLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WMTSSublayer?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetCustomLayerParameters() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetServiceMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ServiceMode?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetSublayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSSublayer!>?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.GetVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.RemoveFromSublayers(params dymaptic.GeoBlazor.Core.Components.WMTSSublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.ServiceMode.get -> dymaptic.GeoBlazor.Core.Enums.ServiceMode?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.ServiceMode.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetActiveLayer(dymaptic.GeoBlazor.Core.Components.WMTSSublayer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetCustomLayerParameters(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetServiceMode(dymaptic.GeoBlazor.Core.Enums.ServiceMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetSublayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSSublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.SetVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSSublayer!>?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Version.get -> string?
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Version.set -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.WMTSLayer() -> void
dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.WMTSLayer(dymaptic.GeoBlazor.Core.Components.WMTSSublayer? activeLayer = null, string? arcGISLayerId = null, dymaptic.GeoBlazor.Core.Enums.BlendMode? blendMode = null, string? copyright = null, string? customLayerParameters = null, System.Collections.Generic.Dictionary<string!, object!>? customParameters = null, dymaptic.GeoBlazor.Core.Model.Effect? effect = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? isBasemapReferenceLayer = null, dymaptic.GeoBlazor.Core.Enums.ListMode? listMode = null, double? maxScale = null, double? minScale = null, double? opacity = null, bool? persistenceEnabled = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, double? refreshInterval = null, dymaptic.GeoBlazor.Core.Enums.ServiceMode? serviceMode = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSSublayer!>? sublayers = null, string? title = null, string? url = null, string? version = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? visibilityTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.AddToOrderByFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.AddToSearchFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.DisplayField.get -> string?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.DisplayField.set -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.ExactMatch.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.ExactMatch.set -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetDisplayField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetExactMatch() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetLayerFromJs() -> dymaptic.GeoBlazor.Core.Components.Layers.Layer?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetOrderByFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetSearchFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetSearchTemplate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.GetSuggestionTemplate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.LayerSearchSource() -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.LayerSearchSource(bool? autoNavigate = null, string? displayField = null, bool? exactMatch = null, dymaptic.GeoBlazor.Core.Model.SearchSourceFilter? filter = null, dymaptic.GeoBlazor.Core.Functions.GetResultsHandler? getResultsHandler = null, dymaptic.GeoBlazor.Core.Functions.GetSuggestionsHandler? getSuggestionsHandler = null, dymaptic.GeoBlazor.Core.Components.Layers.Layer? layer = null, int? maxResults = null, double? maxSuggestions = null, int? minSuggestCharacters = null, string? name = null, System.Collections.Generic.IReadOnlyList<string!>? orderByFields = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, string? placeholder = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, string? prefix = null, bool? resultGraphicEnabled = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? resultSymbol = null, System.Collections.Generic.IReadOnlyList<string!>? searchFields = null, string? searchTemplate = null, string? suffix = null, bool? suggestionsEnabled = null, string? suggestionTemplate = null, bool? withinViewEnabled = null, double? zoomScale = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.Name.set -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.OrderByFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.RemoveFromOrderByFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.RemoveFromSearchFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SearchFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SearchFields.set -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SearchTemplate.get -> string?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SearchTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetDisplayField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetExactMatch(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetOrderByFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetSearchFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetSearchTemplate(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SetSuggestionTemplate(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SuggestionTemplate.get -> string?
dymaptic.GeoBlazor.Core.Components.LayerSearchSource.SuggestionTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.LayerView
dymaptic.GeoBlazor.Core.Components.LayerView.GetSpatialReferenceSupported() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.GetSuspended() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.GetUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.GetVisibleAtCurrentScale() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.GetVisibleAtCurrentTimeExtent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.IsFulfilled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.IsRejected() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.IsResolved() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LayerView.LayerView() -> void
dymaptic.GeoBlazor.Core.Components.LayerView.LayerView(dymaptic.GeoBlazor.Core.Enums.LayerType type, bool? spatialReferenceSupported = null, bool? suspended = null, bool? updating = null, bool? visibleAtCurrentScale = null, bool? visibleAtCurrentTimeExtent = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.LayerView.SpatialReferenceSupported.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerView.SpatialReferenceSupported.set -> void
dymaptic.GeoBlazor.Core.Components.LayerView.Suspended.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerView.Suspended.set -> void
dymaptic.GeoBlazor.Core.Components.LayerView.Updating.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerView.Updating.set -> void
dymaptic.GeoBlazor.Core.Components.LayerView.VisibleAtCurrentScale.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerView.VisibleAtCurrentScale.set -> void
dymaptic.GeoBlazor.Core.Components.LayerView.VisibleAtCurrentTimeExtent.get -> bool?
dymaptic.GeoBlazor.Core.Components.LayerView.VisibleAtCurrentTimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.LayerView.When(System.Func<System.Threading.Tasks.Task!>! callback, System.Func<System.Threading.Tasks.Task!>! errback) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.AddToSublayerIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.GetSublayerIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.LegendLayerInfos() -> void
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.LegendLayerInfos(System.Guid? layerId = null, System.Collections.Generic.IReadOnlyList<long>? sublayerIds = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.RemoveFromSublayerIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.SetLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.SetSublayerIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.SublayerIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.SublayerIds.set -> void
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.LegendLayerInfos.Title.set -> void
dymaptic.GeoBlazor.Core.Components.LegendStyle
dymaptic.GeoBlazor.Core.Components.LegendStyle.GetLayout() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout?>!
dymaptic.GeoBlazor.Core.Components.LegendStyle.Layout.get -> dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout?
dymaptic.GeoBlazor.Core.Components.LegendStyle.Layout.set -> void
dymaptic.GeoBlazor.Core.Components.LegendStyle.LegendStyle() -> void
dymaptic.GeoBlazor.Core.Components.LegendStyle.LegendStyle(dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout? layout = null) -> void
dymaptic.GeoBlazor.Core.Components.LegendStyle.SetLayout(dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendStyle.Type.get -> dymaptic.GeoBlazor.Core.Enums.LegendStyleType?
dymaptic.GeoBlazor.Core.Components.LegendStyle.Type.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel
dymaptic.GeoBlazor.Core.Components.LegendViewModel.ActiveLayerInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>?
dymaptic.GeoBlazor.Core.Components.LegendViewModel.ActiveLayerInfos.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.AddToActiveLayerInfos(params dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.AddToLayerInfos(params dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.BasemapLegendVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.LegendViewModel.BasemapLegendVisible.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.GetActiveLayerInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.GetBasemapLegendVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.GetHideLayersNotInCurrentView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.GetLayerInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos!>?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.GetRespectLayerVisibility() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LegendViewModelState?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.HideLayersNotInCurrentView.get -> bool?
dymaptic.GeoBlazor.Core.Components.LegendViewModel.HideLayersNotInCurrentView.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.LayerInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos!>?
dymaptic.GeoBlazor.Core.Components.LegendViewModel.LayerInfos.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.LegendViewModel() -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.LegendViewModel(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>? activeLayerInfos = null, bool? basemapLegendVisible = null, bool? hideLayersNotInCurrentView = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos!>? layerInfos = null, bool? respectLayerVisibility = null) -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.RemoveFromActiveLayerInfos(params dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.RemoveFromLayerInfos(params dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.RespectLayerVisibility.get -> bool?
dymaptic.GeoBlazor.Core.Components.LegendViewModel.RespectLayerVisibility.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModel.SetActiveLayerInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.SetBasemapLegendVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.SetHideLayersNotInCurrentView(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.SetLayerInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.SetRespectLayerVisibility(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.LegendViewModelState?
dymaptic.GeoBlazor.Core.Components.LegendViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.LegendViewModelLayerInfos() -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.LegendViewModelLayerInfos(dymaptic.GeoBlazor.Core.Components.Layers.Layer? layer = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.SetLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.LegendViewModelLayerInfos.Title.set -> void
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.GetValue() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?>!
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.LineChartMediaInfo() -> void
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.LineChartMediaInfo(string? title = null, string? caption = null, string? altText = null, dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value = null) -> void
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.SetValue(dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.Value.get -> dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?
dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem
dymaptic.GeoBlazor.Core.Components.ListItem.ActionsOpen.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.ActionsOpen.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.ActionsSections.get -> dymaptic.GeoBlazor.Core.Components.ActionBase![]![]?
dymaptic.GeoBlazor.Core.Components.ListItem.ActionsSections.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.AddToActionsSections(params dymaptic.GeoBlazor.Core.Components.ActionBase![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.Children.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.ListItem.Children.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.ChildrenSortable.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.ChildrenSortable.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.ConnectionStatus.get -> dymaptic.GeoBlazor.Core.Enums.ConnectionStatus?
dymaptic.GeoBlazor.Core.Components.ListItem.ConnectionStatus.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Components.ListItem.Error.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.GetActionsOpen() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetActionsSections() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ActionBase![]![]?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetChildrenSortable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetConnectionStatus() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ConnectionStatus?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetError() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Error?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetHidden() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetIncompatible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetLayer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetLayerView() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerView?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetListModeDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetOpen() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetPublishing() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetSortable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetVisibilityMode() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetVisibleAtCurrentScale() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.GetVisibleAtCurrentTimeExtent() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ListItem.Hidden.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.Hidden.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Incompatible.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.Incompatible.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.LayerView.get -> dymaptic.GeoBlazor.Core.Components.LayerView?
dymaptic.GeoBlazor.Core.Components.ListItem.LayerView.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.ListItem() -> void
dymaptic.GeoBlazor.Core.Components.ListItem.ListItem(System.Guid? layerId, bool? actionsOpen = null, dymaptic.GeoBlazor.Core.Components.ActionBase![]![]? actionsSections = null, bool? childrenSortable = null, bool? hidden = null, bool? listModeDisabled = null, bool? open = null, bool? sortable = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.ListItem.ListModeDisabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.ListModeDisabled.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Open.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.Open.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Panel.get -> dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget?
dymaptic.GeoBlazor.Core.Components.ListItem.Panel.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Publishing.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.Publishing.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.RemoveFromActionsSections(params dymaptic.GeoBlazor.Core.Components.ActionBase![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetActionsOpen(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetActionsSections(dymaptic.GeoBlazor.Core.Components.ActionBase![]![]? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetChildrenSortable(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetHidden(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetListModeDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetOpen(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetPanel(dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetSortable(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ListItem.Sortable.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.Sortable.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.ListItem.Title.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.Updating.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.Updating.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.VisibilityMode.get -> string?
dymaptic.GeoBlazor.Core.Components.ListItem.VisibilityMode.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.VisibleAtCurrentScale.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.VisibleAtCurrentScale.set -> void
dymaptic.GeoBlazor.Core.Components.ListItem.VisibleAtCurrentTimeExtent.get -> bool?
dymaptic.GeoBlazor.Core.Components.ListItem.VisibleAtCurrentTimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.AddToBasemaps(params dymaptic.GeoBlazor.Core.Components.Basemap![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.Basemaps.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Basemap!>?
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.Basemaps.set -> void
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.GetBasemaps() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Basemap!>?>!
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.GetState() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.LocalBasemapsSource() -> void
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.LocalBasemapsSource(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Basemap!>? basemaps = null) -> void
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.RemoveFromBasemaps(params dymaptic.GeoBlazor.Core.Components.Basemap![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.SetBasemaps(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Basemap!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.State.get -> string?
dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.State.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel
dymaptic.GeoBlazor.Core.Components.LocateViewModel.CancelLocate() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Error.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GeolocationOptions.get -> dymaptic.GeoBlazor.Core.Components.GeolocationOptions?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GeolocationOptions.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetError() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Error?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetGeolocationOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.GeolocationOptions?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetGoToLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetGraphic() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LocateViewModelState?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GetStringError() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GoToLocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GoToLocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Graphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Graphic.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.LocateViewModel.HasLocateErrorListener.get -> bool
dymaptic.GeoBlazor.Core.Components.LocateViewModel.HasLocateListener.get -> bool
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Locate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.LocateViewModel() -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.LocateViewModel(dymaptic.GeoBlazor.Core.Model.Error? error = null, dymaptic.GeoBlazor.Core.Components.GeolocationOptions? geolocationOptions = null, bool? goToLocationEnabled = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, dymaptic.GeoBlazor.Core.Components.Graphic? graphic = null, bool? popupEnabled = null, double? scale = null, string? stringError = null) -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnJsLocate(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnJsLocateError(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnLocate.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateEvent!>
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnLocate.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnLocateError.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent!>
dymaptic.GeoBlazor.Core.Components.LocateViewModel.OnLocateError.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Scale.get -> double?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetError(dymaptic.GeoBlazor.Core.Model.Error? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetGeolocationOptions(dymaptic.GeoBlazor.Core.Components.GeolocationOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetGoToLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetGraphic(dymaptic.GeoBlazor.Core.Components.Graphic? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.SetStringError(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocateViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.LocateViewModelState?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.LocateViewModel.StringError.get -> string?
dymaptic.GeoBlazor.Core.Components.LocateViewModel.StringError.set -> void
dymaptic.GeoBlazor.Core.Components.LocationService
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(string! url, System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(string! url, System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode = null, System.Collections.Generic.List<string!>? categories = null, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference = null, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions = null) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(string! url, System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(string! url, System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(string! url, System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(string! url, System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressesToLocations(System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.Address!>! addresses, string? countryCode, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories = null, string? countryCode = null, bool? forStorage = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location = null, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType = null, string? magicKey = null, int? maxLocations = null, System.Collections.Generic.List<string!>? outFields = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? searchExtent = null, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions = null) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations, System.Collections.Generic.List<string!>? outFields) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations, System.Collections.Generic.List<string!>? outFields, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations, System.Collections.Generic.List<string!>? outFields, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? searchExtent) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories = null, string? countryCode = null, bool? forStorage = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location = null, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType = null, string? magicKey = null, int? maxLocations = null, System.Collections.Generic.List<string!>? outFields = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? searchExtent = null, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions = null) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations, System.Collections.Generic.List<string!>? outFields) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations, System.Collections.Generic.List<string!>? outFields, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.AddressToLocations(string! url, dymaptic.GeoBlazor.Core.Model.Address! address, System.Collections.Generic.List<string!>? categories, string? countryCode, bool? forStorage, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, string? magicKey, int? maxLocations, System.Collections.Generic.List<string!>? outFields, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? searchExtent) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationService(dymaptic.GeoBlazor.Core.Model.AuthenticationManager! authenticationManager) -> void
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.LocationToAddress(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, dymaptic.GeoBlazor.Core.Enums.LocationType? locationType, dymaptic.GeoBlazor.Core.Components.SpatialReference? outSpatialReference, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.AddressCandidate!>!
dymaptic.GeoBlazor.Core.Components.LocationService.SuggestLocations(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, string! text) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Results.SuggestionResult!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.SuggestLocations(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, string! text, System.Collections.Generic.List<string!>? categories) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Results.SuggestionResult!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.SuggestLocations(dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, string! text, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Results.SuggestionResult!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.SuggestLocations(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, string! text) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Results.SuggestionResult!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.SuggestLocations(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, string! text, System.Collections.Generic.List<string!>? categories) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Results.SuggestionResult!>!>!
dymaptic.GeoBlazor.Core.Components.LocationService.SuggestLocations(string! url, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location, string! text, System.Collections.Generic.List<string!>? categories, dymaptic.GeoBlazor.Core.Options.RequestOptions? requestOptions) -> System.Threading.Tasks.Task<System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Results.SuggestionResult!>!>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.AddToCategories(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Categories.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Categories.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.CountryCode.get -> string?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.CountryCode.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.DefaultZoomScale.get -> double?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.DefaultZoomScale.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetCategories() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetCountryCode() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetDefaultZoomScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetLocalSearchDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetLocationType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetSearchTemplate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetSingleLineFieldName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.LocalSearchDisabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.LocalSearchDisabled.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.LocationType.get -> dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.LocationType.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.LocatorSearchSource() -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.LocatorSearchSource(string? url = null, string? apiKey = null, bool? autoNavigate = null, System.Collections.Generic.IReadOnlyList<string!>? categories = null, string? countryCode = null, double? defaultZoomScale = null, dymaptic.GeoBlazor.Core.Model.SearchSourceFilter? filter = null, dymaptic.GeoBlazor.Core.Functions.GetResultsHandler? getResultsHandler = null, dymaptic.GeoBlazor.Core.Functions.GetSuggestionsHandler? getSuggestionsHandler = null, bool? localSearchDisabled = null, dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType? locationType = null, int? maxResults = null, double? maxSuggestions = null, int? minSuggestCharacters = null, string? name = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, string? placeholder = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, string? prefix = null, bool? resultGraphicEnabled = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? resultSymbol = null, string? searchTemplate = null, string? singleLineFieldName = null, string? suffix = null, bool? suggestionsEnabled = null, bool? withinViewEnabled = null, double? zoomScale = null) -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Name.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.RemoveFromCategories(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SearchTemplate.get -> string?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SearchTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetCategories(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetCountryCode(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetDefaultZoomScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetLocalSearchDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetLocationType(dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetSearchTemplate(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetSingleLineFieldName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SetUrl(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SingleLineFieldName.get -> string?
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.SingleLineFieldName.set -> void
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Url.get -> string!
dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Url.set -> void
dymaptic.GeoBlazor.Core.Components.LOD
dymaptic.GeoBlazor.Core.Components.LOD.GetLevel() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.LOD.GetLevelValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.LOD.GetResolution() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.LOD.GetScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.LOD.Level.get -> int?
dymaptic.GeoBlazor.Core.Components.LOD.Level.set -> void
dymaptic.GeoBlazor.Core.Components.LOD.LevelValue.get -> string?
dymaptic.GeoBlazor.Core.Components.LOD.LevelValue.set -> void
dymaptic.GeoBlazor.Core.Components.LOD.LOD() -> void
dymaptic.GeoBlazor.Core.Components.LOD.LOD(int? level = null, string? levelValue = null, double? resolution = null, double? scale = null) -> void
dymaptic.GeoBlazor.Core.Components.LOD.Resolution.get -> double?
dymaptic.GeoBlazor.Core.Components.LOD.Resolution.set -> void
dymaptic.GeoBlazor.Core.Components.LOD.Scale.get -> double?
dymaptic.GeoBlazor.Core.Components.LOD.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.LOD.SetLevel(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LOD.SetLevelValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LOD.SetResolution(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.LOD.SetScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Map
dymaptic.GeoBlazor.Core.Components.Map.ArcGISDefaultBasemap.get -> string?
dymaptic.GeoBlazor.Core.Components.Map.ArcGISDefaultBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Map.Basemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Map.Basemap.set -> void
dymaptic.GeoBlazor.Core.Components.Map.Ground.get -> string?
dymaptic.GeoBlazor.Core.Components.Map.Ground.set -> void
dymaptic.GeoBlazor.Core.Components.Map.Layers.get -> System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>!
dymaptic.GeoBlazor.Core.Components.Map.Layers.set -> void
dymaptic.GeoBlazor.Core.Components.Map.Map() -> void
dymaptic.GeoBlazor.Core.Components.MapComponent
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveListener<T>(string! eventName, System.Action<T>! handler) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveListener<T>(string! eventName, System.Action<T>! handler, bool once) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveListener<T>(string! eventName, System.Func<T, System.Threading.Tasks.Task!>! handler) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveListener<T>(string! eventName, System.Func<T, System.Threading.Tasks.Task!>! handler, bool once) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Action! handler) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Action! handler, string? targetName) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Action! handler, string? targetName, bool once) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Action! handler, string? targetName, bool once, bool initial) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Func<System.Threading.Tasks.Task!>! handler) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Func<System.Threading.Tasks.Task!>! handler, string? targetName) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Func<System.Threading.Tasks.Task!>! handler, string? targetName, bool once) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWaiter(string! waitExpression, System.Func<System.Threading.Tasks.Task!>! handler, string? targetName, bool once, bool initial) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Action<T>! handler) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Action<T>! handler, string? targetName) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Action<T>! handler, string? targetName, bool once) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Action<T>! handler, string? targetName, bool once, bool initial) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Func<T, System.Threading.Tasks.Task!>! handler) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Func<T, System.Threading.Tasks.Task!>! handler, string? targetName) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Func<T, System.Threading.Tasks.Task!>! handler, string? targetName, bool once) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AddReactiveWatcher<T>(string! watchExpression, System.Func<T, System.Threading.Tasks.Task!>! handler, string? targetName, bool once, bool initial) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.AllowRender -> bool
dymaptic.GeoBlazor.Core.Components.MapComponent.AwaitReactiveSingleWatchUpdate<T>(string! watchExpression, string? targetName = null, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>!
dymaptic.GeoBlazor.Core.Components.MapComponent.ChildContent.get -> Microsoft.AspNetCore.Components.RenderFragment?
dymaptic.GeoBlazor.Core.Components.MapComponent.ChildContent.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Components.MapComponent.CoreJsModule.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.DotNetComponentReference.get -> Microsoft.JSInterop.DotNetObjectReference<dymaptic.GeoBlazor.Core.Components.MapComponent!>!
dymaptic.GeoBlazor.Core.Components.MapComponent.GetVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.MapComponent.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Components.MapComponent.Id.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.IsDisposed.get -> bool
dymaptic.GeoBlazor.Core.Components.MapComponent.IsRenderedBlazorComponent -> bool
dymaptic.GeoBlazor.Core.Components.MapComponent.IsValidated -> bool
dymaptic.GeoBlazor.Core.Components.MapComponent.JsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Components.MapComponent.JsModuleManager.get -> dymaptic.GeoBlazor.Core.JsModuleManager?
dymaptic.GeoBlazor.Core.Components.MapComponent.JsModuleManager.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.JsRuntime.get -> Microsoft.JSInterop.IJSRuntime?
dymaptic.GeoBlazor.Core.Components.MapComponent.JsRuntime.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.LayerId.get -> System.Guid?
dymaptic.GeoBlazor.Core.Components.MapComponent.LayerId.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.MapComponent() -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.MapComponentType.get -> System.Type!
dymaptic.GeoBlazor.Core.Components.MapComponent.MapRendered.get -> bool
dymaptic.GeoBlazor.Core.Components.MapComponent.MapRendered.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.ModifiedParameters -> System.Collections.Generic.Dictionary<string!, object?>!
dymaptic.GeoBlazor.Core.Components.MapComponent.OnReactiveListenerTriggered(string! eventName, Microsoft.JSInterop.IJSStreamReference? jsStreamReference) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.OnReactiveWaiterTrue(string! waitExpression) -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.OnReactiveWatcherUpdate(string! watchExpression, Microsoft.JSInterop.IJSStreamReference? jsStreamReference) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.Parent.get -> dymaptic.GeoBlazor.Core.Components.MapComponent?
dymaptic.GeoBlazor.Core.Components.MapComponent.Parent.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.PreviousParameters -> System.Collections.Generic.Dictionary<string!, object?>?
dymaptic.GeoBlazor.Core.Components.MapComponent.ProJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Components.MapComponent.Props -> System.Reflection.PropertyInfo![]?
dymaptic.GeoBlazor.Core.Components.MapComponent.ReadJsStreamReference(Microsoft.JSInterop.IJSStreamReference! jsStreamReference, System.Type! returnType) -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.MapComponent.ReadJsStreamReference<T>(Microsoft.JSInterop.IJSStreamReference! jsStreamReference) -> System.Threading.Tasks.Task<T?>!
dymaptic.GeoBlazor.Core.Components.MapComponent.RemoveReactiveListener(string! eventName) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.RemoveReactiveWaiter(string! waitExpression) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.RemoveReactiveWatcher(string! watchExpression) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.SetVisibility(bool visible) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.SetVisible(bool visible) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapComponent.UpdateState() -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.View.get -> dymaptic.GeoBlazor.Core.Components.Views.MapView?
dymaptic.GeoBlazor.Core.Components.MapComponent.View.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.ViewId.get -> System.Guid?
dymaptic.GeoBlazor.Core.Components.MapComponent.ViewId.set -> void
dymaptic.GeoBlazor.Core.Components.MapComponent.Visible.get -> bool?
dymaptic.GeoBlazor.Core.Components.MapComponent.Visible.set -> void
dymaptic.GeoBlazor.Core.Components.MapFont
dymaptic.GeoBlazor.Core.Components.MapFont.Decoration.get -> dymaptic.GeoBlazor.Core.Enums.TextDecoration?
dymaptic.GeoBlazor.Core.Components.MapFont.Decoration.set -> void
dymaptic.GeoBlazor.Core.Components.MapFont.Family.get -> string?
dymaptic.GeoBlazor.Core.Components.MapFont.Family.set -> void
dymaptic.GeoBlazor.Core.Components.MapFont.GetDecoration() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.TextDecoration?>!
dymaptic.GeoBlazor.Core.Components.MapFont.GetFamily() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.MapFont.GetSize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.MapFont.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.MapFontStyle?>!
dymaptic.GeoBlazor.Core.Components.MapFont.GetWeight() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.FontWeight?>!
dymaptic.GeoBlazor.Core.Components.MapFont.MapFont() -> void
dymaptic.GeoBlazor.Core.Components.MapFont.MapFont(dymaptic.GeoBlazor.Core.Model.Dimension? size = null, string? family = null, dymaptic.GeoBlazor.Core.Enums.MapFontStyle? style = null, dymaptic.GeoBlazor.Core.Enums.FontWeight? weight = null, dymaptic.GeoBlazor.Core.Enums.TextDecoration? decoration = null) -> void
dymaptic.GeoBlazor.Core.Components.MapFont.SetDecoration(dymaptic.GeoBlazor.Core.Enums.TextDecoration? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapFont.SetFamily(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapFont.SetSize(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapFont.SetStyle(dymaptic.GeoBlazor.Core.Enums.MapFontStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapFont.SetWeight(dymaptic.GeoBlazor.Core.Enums.FontWeight? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MapFont.Size.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.MapFont.Size.set -> void
dymaptic.GeoBlazor.Core.Components.MapFont.Style.get -> dymaptic.GeoBlazor.Core.Enums.MapFontStyle?
dymaptic.GeoBlazor.Core.Components.MapFont.Style.set -> void
dymaptic.GeoBlazor.Core.Components.MapFont.Weight.get -> dymaptic.GeoBlazor.Core.Enums.FontWeight?
dymaptic.GeoBlazor.Core.Components.MapFont.Weight.set -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.ActiveTool.get -> dymaptic.GeoBlazor.Core.Enums.ActiveTool?
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.ActiveTool.set -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.ActiveViewModel.get -> dymaptic.GeoBlazor.Core.Interfaces.IMeasurementViewModelActiveViewModel?
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.ActiveViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.AreaUnit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.AreaUnit.set -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.GetActiveTool() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ActiveTool?>!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.GetActiveViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IMeasurementViewModelActiveViewModel?>!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.GetAreaUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?>!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.GetLinearUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?>!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState?>!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.LinearUnit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.LinearUnit.set -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.MeasurementViewModel() -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.MeasurementViewModel(dymaptic.GeoBlazor.Core.Enums.ActiveTool? activeTool = null, dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? areaUnit = null, dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? linearUnit = null) -> void
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.SetActiveTool(dymaptic.GeoBlazor.Core.Enums.ActiveTool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.SetAreaUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.SetLinearUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState?
dymaptic.GeoBlazor.Core.Components.MeasurementViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.MediaInfo
dymaptic.GeoBlazor.Core.Components.MediaInfo.AltText.get -> string?
dymaptic.GeoBlazor.Core.Components.MediaInfo.AltText.set -> void
dymaptic.GeoBlazor.Core.Components.MediaInfo.Caption.get -> string?
dymaptic.GeoBlazor.Core.Components.MediaInfo.Caption.set -> void
dymaptic.GeoBlazor.Core.Components.MediaInfo.GetAltText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.MediaInfo.GetCaption() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.MediaInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.MediaInfo.MediaInfo() -> void
dymaptic.GeoBlazor.Core.Components.MediaInfo.SetAltText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MediaInfo.SetCaption(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MediaInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MediaInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.MediaInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.AddToSubsetDefinitions(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.AreaOfInterest.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.AreaOfInterest.set -> void
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.Dimensions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.SubsetDimension!>?
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.Dimensions.set -> void
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.GetAreaOfInterest() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.GetDimensions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.SubsetDimension!>?>!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.GetSubsetDefinitions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?>!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.GetVariables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.MultidimensionalSubset() -> void
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.MultidimensionalSubset(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? areaOfInterest = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? subsetDefinitions = null) -> void
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.RemoveFromSubsetDefinitions(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.SetAreaOfInterest(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.SetSubsetDefinitions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.SubsetDefinitions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.SubsetDefinitions.set -> void
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.Variables.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.Variables.set -> void
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.AddToColorRamps(params dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.ColorRamps.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp!>?
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.ColorRamps.set -> void
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.GetColorRamps() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp!>?>!
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.MultipartColorRamp() -> void
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.MultipartColorRamp(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp!>? colorRamps = null) -> void
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.RemoveFromColorRamps(params dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.SetColorRamps(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.NoData
dymaptic.GeoBlazor.Core.Components.NoData.NoData() -> void
dymaptic.GeoBlazor.Core.Components.NoData.NoData(long pixelValue) -> void
dymaptic.GeoBlazor.Core.Components.NoData.NoData(long[]! pixelValueArray) -> void
dymaptic.GeoBlazor.Core.Components.NoData.PixelValue.get -> long?
dymaptic.GeoBlazor.Core.Components.NoData.PixelValue.set -> void
dymaptic.GeoBlazor.Core.Components.NoData.PixelValueArray.get -> long[]?
dymaptic.GeoBlazor.Core.Components.NoData.PixelValueArray.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampElement
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.AddToInfos(params dymaptic.GeoBlazor.Core.Components.OpacityRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.GetInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityRampStop!>?>!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.GetRampTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RampTitle?>!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.GetStringTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.Infos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityRampStop!>?
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.Infos.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.OpacityRampElement() -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.OpacityRampElement(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityRampStop!>? infos = null, dymaptic.GeoBlazor.Core.Model.RampTitle? rampTitle = null, string? stringTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.RampTitle.get -> dymaptic.GeoBlazor.Core.Model.RampTitle?
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.RampTitle.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.RemoveFromInfos(params dymaptic.GeoBlazor.Core.Components.OpacityRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.SetInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityRampStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.SetRampTitle(dymaptic.GeoBlazor.Core.Model.RampTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.SetStringTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.StringTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.OpacityRampElement.StringTitle.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampStop
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.Color.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.OpacityRampStop() -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.OpacityRampStop(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, string? label = null, double? value = null) -> void
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.SetValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.OpacityRampStop.Value.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityStop
dymaptic.GeoBlazor.Core.Components.OpacityStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.OpacityStop.GetOpacity() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.OpacityStop.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.OpacityStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.OpacityStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityStop.Opacity.get -> double?
dymaptic.GeoBlazor.Core.Components.OpacityStop.Opacity.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityStop.OpacityStop() -> void
dymaptic.GeoBlazor.Core.Components.OpacityStop.OpacityStop(double value, double opacity, string? label = null) -> void
dymaptic.GeoBlazor.Core.Components.OpacityStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityStop.SetOpacity(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityStop.SetValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityStop.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.OpacityStop.Value.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityVariable
dymaptic.GeoBlazor.Core.Components.OpacityVariable.AddToStops(params dymaptic.GeoBlazor.Core.Components.OpacityStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityVariable.GetNormalizationField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.OpacityVariable.GetStops() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityStop!>?>!
dymaptic.GeoBlazor.Core.Components.OpacityVariable.NormalizationField.get -> string?
dymaptic.GeoBlazor.Core.Components.OpacityVariable.NormalizationField.set -> void
dymaptic.GeoBlazor.Core.Components.OpacityVariable.OpacityVariable() -> void
dymaptic.GeoBlazor.Core.Components.OpacityVariable.OpacityVariable(string! field, string? normalizationField = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityStop!>? stops = null, dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions? legendOptions = null, string? valueExpression = null, string? valueExpressionTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.OpacityVariable.RemoveFromStops(params dymaptic.GeoBlazor.Core.Components.OpacityStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityVariable.SetNormalizationField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityVariable.SetStops(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OpacityVariable.Stops.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OpacityStop!>?
dymaptic.GeoBlazor.Core.Components.OpacityVariable.Stops.set -> void
dymaptic.GeoBlazor.Core.Components.OrderByInfo
dymaptic.GeoBlazor.Core.Components.OrderByInfo.Field.get -> string?
dymaptic.GeoBlazor.Core.Components.OrderByInfo.Field.set -> void
dymaptic.GeoBlazor.Core.Components.OrderByInfo.GetField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.OrderByInfo.GetOrder() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SortOrder?>!
dymaptic.GeoBlazor.Core.Components.OrderByInfo.GetValueExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.OrderByInfo.Order.get -> dymaptic.GeoBlazor.Core.Enums.SortOrder?
dymaptic.GeoBlazor.Core.Components.OrderByInfo.Order.set -> void
dymaptic.GeoBlazor.Core.Components.OrderByInfo.OrderByInfo() -> void
dymaptic.GeoBlazor.Core.Components.OrderByInfo.OrderByInfo(string? field = null, dymaptic.GeoBlazor.Core.Enums.SortOrder? order = null, string? valueExpression = null) -> void
dymaptic.GeoBlazor.Core.Components.OrderByInfo.SetField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OrderByInfo.SetOrder(dymaptic.GeoBlazor.Core.Enums.SortOrder? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OrderByInfo.SetValueExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.OrderByInfo.ValueExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.OrderByInfo.ValueExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Orientation
dymaptic.GeoBlazor.Core.Components.Orientation.GetZ() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Orientation.Orientation() -> void
dymaptic.GeoBlazor.Core.Components.Orientation.Orientation(double? z = null) -> void
dymaptic.GeoBlazor.Core.Components.Orientation.SetZ(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Orientation.Z.get -> double?
dymaptic.GeoBlazor.Core.Components.Orientation.Z.set -> void
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.GetValue() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?>!
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.PieChartMediaInfo() -> void
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.PieChartMediaInfo(string? title = null, string? caption = null, string? altText = null, dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value = null) -> void
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.SetValue(dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.Value.get -> dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?
dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock
dymaptic.GeoBlazor.Core.Components.PixelBlock.AddData(dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData! planeData) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.AddToStatistics(params dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetAsRGBA() -> System.Threading.Tasks.Task<System.IO.Stream?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetAsRGBAFloat() -> System.Threading.Tasks.Task<float[]?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetMask() -> System.Threading.Tasks.Task<System.IO.Stream?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetMaskIsAlpha() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetPixels() -> System.Threading.Tasks.Task<System.IO.Stream?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetPixelType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PixelType?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetPlaneCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetStatistics() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics!>?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetValidPixelCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.GetWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.PixelBlock.Height.get -> int?
dymaptic.GeoBlazor.Core.Components.PixelBlock.Height.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.Mask.get -> System.IO.Stream?
dymaptic.GeoBlazor.Core.Components.PixelBlock.Mask.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.MaskIsAlpha.get -> bool?
dymaptic.GeoBlazor.Core.Components.PixelBlock.MaskIsAlpha.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.PixelBlock() -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.PixelBlock(int? height = null, System.IO.Stream? mask = null, bool? maskIsAlpha = null, System.IO.Stream? pixels = null, dymaptic.GeoBlazor.Core.Enums.PixelType? pixelType = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics!>? statistics = null, int? validPixelCount = null, int? width = null) -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.Pixels.get -> System.IO.Stream?
dymaptic.GeoBlazor.Core.Components.PixelBlock.Pixels.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.PixelType.get -> dymaptic.GeoBlazor.Core.Enums.PixelType?
dymaptic.GeoBlazor.Core.Components.PixelBlock.PixelType.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.RemoveFromStatistics(params dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetMask(System.IO.Stream? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetMaskIsAlpha(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetPixels(System.IO.Stream? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetPixelType(dymaptic.GeoBlazor.Core.Enums.PixelType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetStatistics(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetValidPixelCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.SetWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlock.Statistics.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics!>?
dymaptic.GeoBlazor.Core.Components.PixelBlock.Statistics.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.ValidPixelCount.get -> int?
dymaptic.GeoBlazor.Core.Components.PixelBlock.ValidPixelCount.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlock.Width.get -> int?
dymaptic.GeoBlazor.Core.Components.PixelBlock.Width.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.GetMaxValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.GetMinValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.GetNoDataValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.MaxValue.get -> double?
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.MaxValue.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.MinValue.get -> double?
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.MinValue.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.NoDataValue.get -> double?
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.NoDataValue.set -> void
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.PixelBlockStatistics() -> void
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.PixelBlockStatistics(double? maxValue = null, double? minValue = null, double? noDataValue = null) -> void
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.SetMaxValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.SetMinValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelBlockStatistics.SetNoDataValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelData
dymaptic.GeoBlazor.Core.Components.PixelData.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.PixelData.Extent.set -> void
dymaptic.GeoBlazor.Core.Components.PixelData.GetExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.PixelData.GetPixelBlock() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PixelBlock?>!
dymaptic.GeoBlazor.Core.Components.PixelData.PixelBlock.get -> dymaptic.GeoBlazor.Core.Components.PixelBlock?
dymaptic.GeoBlazor.Core.Components.PixelData.PixelBlock.set -> void
dymaptic.GeoBlazor.Core.Components.PixelData.PixelData() -> void
dymaptic.GeoBlazor.Core.Components.PixelData.PixelData(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? extent = null, dymaptic.GeoBlazor.Core.Components.PixelBlock? pixelBlock = null) -> void
dymaptic.GeoBlazor.Core.Components.PixelData.SetExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PixelData.SetPixelBlock(dymaptic.GeoBlazor.Core.Components.PixelBlock? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.AddToOrderByFields(params dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.AttachmentsPopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.AttachmentsPopupContent(string? title = null, string? description = null, dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType? displayType = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo!>? orderByFields = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.DisplayType.get -> dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType?
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.DisplayType.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.GetDisplayType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType?>!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.GetOrderByFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.OrderByFields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo!>?
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.RemoveFromOrderByFields(params dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.SetDisplayType(dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.SetOrderByFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AttachmentsOrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.ExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo?
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.ExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.ExpressionPopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.ExpressionPopupContent(dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo? expressionInfo = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.GetExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.SetExpressionInfo(dymaptic.GeoBlazor.Core.Components.ElementExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.AddToFieldInfos(params dymaptic.GeoBlazor.Core.Components.FieldInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.FieldInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>?
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.FieldInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.FieldsPopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.FieldsPopupContent(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>! fieldInfos, string? description = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.GetFieldInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.RemoveFromFieldInfos(params dymaptic.GeoBlazor.Core.Components.FieldInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.SetFieldInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.ActiveMediaInfoIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.ActiveMediaInfoIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.AddToMediaInfos(params dymaptic.GeoBlazor.Core.Components.MediaInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.GetActiveMediaInfoIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.GetMediaInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.MediaInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.MediaInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.MediaInfo!>?
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.MediaInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.MediaPopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.MediaPopupContent(string? title = null, string? description = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.MediaInfo!>? mediaInfos = null, int? activeMediaInfoIndex = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.RemoveFromMediaInfos(params dymaptic.GeoBlazor.Core.Components.MediaInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.SetActiveMediaInfoIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.SetMediaInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.MediaInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupContent
dymaptic.GeoBlazor.Core.Components.Popups.PopupContent.PopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.BoolBreakpoint.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.BoolBreakpoint.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.BreakPoint.get -> dymaptic.GeoBlazor.Core.Model.BreakPoint?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.BreakPoint.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.ButtonEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.ButtonEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.GetBoolBreakpoint() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.GetButtonEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.GetPopupDockOptionsBreakpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.GetPosition() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PopupDockPosition?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.PopupDockOptions() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.PopupDockOptions(dymaptic.GeoBlazor.Core.Enums.PopupDockPosition? position = null, bool? buttonEnabled = null, dymaptic.GeoBlazor.Core.Model.BreakPoint? breakPoint = null, bool? boolBreakpoint = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint? popupDockOptionsBreakpoint = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.PopupDockOptionsBreakpoint.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.PopupDockOptionsBreakpoint.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.Position.get -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.Position.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.SetBoolBreakpoint(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.SetButtonEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.SetPopupDockOptionsBreakpoint(dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.SetPosition(dymaptic.GeoBlazor.Core.Enums.PopupDockPosition? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.GetHeight() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.GetWidth() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.Height.get -> int?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.Height.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.PopupDockOptionsBreakpoint() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.PopupDockOptionsBreakpoint(int? height = null, int? width = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.SetHeight(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.SetWidth(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.Width.get -> int?
dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptionsBreakpoint.Width.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.GetReturnType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.PopupExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.PopupExpressionInfo(string? expression = null, string? name = null, dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType? returnType = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.ReturnType.get -> dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType?
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.ReturnType.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.SetReturnType(dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.Actions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.Actions.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.AddToActions(params dymaptic.GeoBlazor.Core.Components.ActionBase![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.AddToExpressionInfos(params dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.AddToFieldInfos(params dymaptic.GeoBlazor.Core.Components.FieldInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.AddToOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.Content.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Popups.PopupContent!>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.Content.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ContentFunction.get -> System.Func<dymaptic.GeoBlazor.Core.Components.Graphic!, System.Threading.Tasks.ValueTask<dymaptic.GeoBlazor.Core.Components.Popups.PopupContent![]?>>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ContentFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ExpressionInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo!>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ExpressionInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.FieldInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.FieldInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetActions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetExpressionInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetFieldInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetLastEditInfoEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetLayerOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerOptions?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetOutFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetOverwriteActions() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetReturnGeometry() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetStringTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.GetTaskCollectionTitle() -> System.Threading.Tasks.Task<System.Func<System.Threading.Tasks.Task!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.HasContentFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.LastEditInfoEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.LastEditInfoEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.LayerOptions.get -> dymaptic.GeoBlazor.Core.Components.LayerOptions?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.LayerOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OnJsContentFunction(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupContent![]?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OnJsTriggerAction(dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent! triggerActionEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OnTriggerAction.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent!>
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OnTriggerAction.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OutFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OutFields.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OverwriteActions.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.OverwriteActions.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.PopupTemplate() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.PopupTemplate(string? title = null, string? stringContent = null, System.Collections.Generic.IReadOnlyList<string!>? outFields = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>? fieldInfos = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Popups.PopupContent!>? content = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo!>? expressionInfos = null, bool? overwriteActions = null, bool? returnGeometry = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>? actions = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.RemoveFromActions(params dymaptic.GeoBlazor.Core.Components.ActionBase![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.RemoveFromExpressionInfos(params dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.RemoveFromFieldInfos(params dymaptic.GeoBlazor.Core.Components.FieldInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.RemoveFromOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ReturnGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ReturnGeometry.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetActions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetExpressionInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Popups.PopupExpressionInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetFieldInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FieldInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetLastEditInfoEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetLayerOptions(dymaptic.GeoBlazor.Core.Components.LayerOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetOutFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetOverwriteActions(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetReturnGeometry(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetStringTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.SetTaskCollectionTitle(System.Func<System.Threading.Tasks.Task!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.StringContent.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.StringContent.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.StringTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.StringTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.TaskCollectionTitle.get -> System.Func<System.Threading.Tasks.Task!>?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.TaskCollectionTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel
dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel.PopupViewModel() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel.PopupViewModel(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>? actions = null, dymaptic.GeoBlazor.Core.Components.Graphic? activeFeature = null, bool? autoCloseEnabled = null, bool? browseClusterEnabled = null, bool? defaultPopupTemplateEnabled = null, Microsoft.AspNetCore.Components.ElementReference? elementReferenceContent = null, bool? featureMenuOpen = null, string? featureMenuTitle = null, double? featurePage = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? features = null, double? featuresPerPage = null, dymaptic.GeoBlazor.Core.Components.Abilities? featureViewModelAbilities = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, bool? highlightEnabled = null, bool? includeDefaultActions = null, dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode? initialDisplayMode = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location = null, dymaptic.GeoBlazor.Core.Components.FeaturesViewModelScreenPoint? screenLocation = null, bool? screenLocationEnabled = null, int? selectedFeatureIndex = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, string? stringContent = null, string? timeZone = null, string? title = null, bool? updateLocationEnabled = null, bool? visible = null, dymaptic.GeoBlazor.Core.Components.Widgets.Widget? widgetContent = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.ActionBar.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.ActionBar.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.CloseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.CloseButton.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.CollapseButton.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.CollapseButton.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.FeatureListLayerTitle.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.FeatureListLayerTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.FeatureMenuHeading.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.FeatureMenuHeading.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.FeatureNavigation.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.FeatureNavigation.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetActionBar() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetCloseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetCollapseButton() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetFeatureListLayerTitle() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetFeatureMenuHeading() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetFeatureNavigation() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetHeading() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.GetSpinner() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.Heading.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.Heading.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.PopupVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.PopupVisibleElements(bool? closeButton = null, bool? featureNavigation = null, bool? actionBar = null, bool? collapseButton = null, bool? featureListLayerTitle = null, bool? featureMenuHeading = null, bool? heading = null, bool? spinner = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetActionBar(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetCloseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetCollapseButton(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetFeatureListLayerTitle(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetFeatureMenuHeading(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetFeatureNavigation(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetHeading(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.SetSpinner(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.Spinner.get -> bool?
dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.Spinner.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.AddToOrderByFields(params dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.DisplayCount.get -> int?
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.DisplayCount.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.DisplayType.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.DisplayType.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.GetDisplayCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.GetDisplayType() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.GetOrderByFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder!>?>!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.GetRelationshipId() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.OrderByFields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder!>?
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.RelationshipId.get -> long?
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.RelationshipId.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.RelationshipPopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.RelationshipPopupContent(string? title = null, string? description = null, int? displayCount = null, string? displayType = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder!>? orderByFields = null, long? relationshipId = null) -> void
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.RemoveFromOrderByFields(params dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.SetDisplayCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.SetDisplayType(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.SetOrderByFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.SetRelationshipId(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.GetText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.SetText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.Text.get -> string?
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.Text.set -> void
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.TextPopupContent() -> void
dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.TextPopupContent(string? text = null) -> void
dymaptic.GeoBlazor.Core.Components.Portal
dymaptic.GeoBlazor.Core.Components.Portal.Access.get -> dymaptic.GeoBlazor.Core.Enums.PortalAccess?
dymaptic.GeoBlazor.Core.Components.Portal.Access.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.AddToAuthorizedCrossOriginDomains(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.AddToFeaturedGroups(params dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.AddToRotatorPanels(params dymaptic.GeoBlazor.Core.Model.RotatorPanel![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.AllSSL.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.AllSSL.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.AuthMode.get -> dymaptic.GeoBlazor.Core.Enums.AuthMode?
dymaptic.GeoBlazor.Core.Components.Portal.AuthMode.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.AuthorizedCrossOriginDomains.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.Portal.AuthorizedCrossOriginDomains.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.BasemapGalleryGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.BasemapGalleryGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.BasemapGalleryGroupQuery3D.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.BasemapGalleryGroupQuery3D.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.BingKey.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.BingKey.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CancelLoad() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.CanListApps.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanListApps.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanListData.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanListData.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanListPreProvisionedItems.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanListPreProvisionedItems.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanProvisionDirectPurchase.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanProvisionDirectPurchase.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanSearchPublic.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanSearchPublic.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanShareBingPublic.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanShareBingPublic.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanSharePublic.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanSharePublic.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanSignInArcGIS.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanSignInArcGIS.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CanSignInIDP.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CanSignInIDP.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.ColorSetsGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.ColorSetsGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CommentsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.CommentsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.Portal.Created.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CreateElevationLayers() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IElevationLayer![]?>!
dymaptic.GeoBlazor.Core.Components.Portal.Culture.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.Culture.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.CustomBaseUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.CustomBaseUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Default3DBasemapQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.Default3DBasemapQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.DefaultBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Portal.DefaultBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.DefaultDevBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Portal.DefaultDevBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.DefaultExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.Portal.DefaultExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.DefaultVectorBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Portal.DefaultVectorBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.DevBasemapGalleryGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.DevBasemapGalleryGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.EueiEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.EueiEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.FeaturedGroups.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups!>?
dymaptic.GeoBlazor.Core.Components.Portal.FeaturedGroups.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.FeaturedItemsGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.FeaturedItemsGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.FetchBasemaps(string! basemapGalleryGroupQuery, dymaptic.GeoBlazor.Core.Options.PortalFetchBasemapsOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap![]?>!
dymaptic.GeoBlazor.Core.Components.Portal.FetchCategorySchema(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string![]?>!
dymaptic.GeoBlazor.Core.Components.Portal.FetchClassificationSchema(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.FetchDefault3DBasemap(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.Portal.FetchFeaturedGroups(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PortalGroup![]?>!
dymaptic.GeoBlazor.Core.Components.Portal.FetchRegions(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string![]?>!
dymaptic.GeoBlazor.Core.Components.Portal.FetchSettings(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GalleryTemplatesGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.GalleryTemplatesGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.GetAccess() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalAccess?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetAllSSL() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetAuthMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.AuthMode?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetAuthorizedCrossOriginDomains() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetBasemapGalleryGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetBasemapGalleryGroupQuery3D() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetBingKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanListApps() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanListData() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanListPreProvisionedItems() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanProvisionDirectPurchase() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanSearchPublic() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanShareBingPublic() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanSharePublic() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanSignInArcGIS() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCanSignInIDP() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetColorSetsGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCommentsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCreated() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCulture() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetCustomBaseUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetDefault3DBasemapQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetDefaultExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetDevBasemapGalleryGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetEueiEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetFeaturedGroups() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups!>?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetFeaturedItemsGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetGalleryTemplatesGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHasCategorySchema() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHasClassificationSchema() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHelperServices() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.HelperServices?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHomePageFeaturedContent() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHomePageFeaturedContentCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHttpPort() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetHttpsPort() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetIpCntryCode() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetIsOrganization() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetIsPortal() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetIsReadOnly() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetLayerTemplatesGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetLoaded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetMaxTokenExpirationMinutes() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetModified() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetPortalHostname() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetPortalId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetPortalMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalMode?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetPortalProperties() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PortalProperties?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetRecycleBinEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetRegion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetRestUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetRotatorPanels() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RotatorPanel!>?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetShowHomePageDescription() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetSupportsHostedServices() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetSymbolSetsGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetTemplatesGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetThumbnailUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUnits() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalUnits?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUrlKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUse3dBasemaps() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUseDefault3dBasemap() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUseStandardizedQuery() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetUseVectorBasemaps() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.GetVectorBasemapGalleryGroupQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.HasCategorySchema.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.HasCategorySchema.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.HasClassificationSchema.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.HasClassificationSchema.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.HelperServices.get -> dymaptic.GeoBlazor.Core.Model.HelperServices?
dymaptic.GeoBlazor.Core.Components.Portal.HelperServices.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.HomePageFeaturedContent.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.HomePageFeaturedContent.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.HomePageFeaturedContentCount.get -> int?
dymaptic.GeoBlazor.Core.Components.Portal.HomePageFeaturedContentCount.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.HttpPort.get -> double?
dymaptic.GeoBlazor.Core.Components.Portal.HttpPort.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.HttpsPort.get -> double?
dymaptic.GeoBlazor.Core.Components.Portal.HttpsPort.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.IpCntryCode.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.IpCntryCode.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.IsFulfilled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.IsOrganization.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.IsOrganization.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.IsPortal.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.IsPortal.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.IsReadOnly.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.IsReadOnly.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.IsRejected() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.IsResolved() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Portal.LayerTemplatesGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.LayerTemplatesGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Load(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Portal.Loaded.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.Loaded.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.MaxTokenExpirationMinutes.get -> double?
dymaptic.GeoBlazor.Core.Components.Portal.MaxTokenExpirationMinutes.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Modified.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.Portal.Modified.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Portal() -> void
dymaptic.GeoBlazor.Core.Components.Portal.Portal(dymaptic.GeoBlazor.Core.Enums.PortalAccess? access = null, bool? allSSL = null, dymaptic.GeoBlazor.Core.Enums.AuthMode? authMode = null, System.Collections.Generic.IReadOnlyList<string!>? authorizedCrossOriginDomains = null, string? basemapGalleryGroupQuery = null, string? basemapGalleryGroupQuery3D = null, string? bingKey = null, bool? canListApps = null, bool? canListData = null, bool? canListPreProvisionedItems = null, bool? canProvisionDirectPurchase = null, bool? canSearchPublic = null, bool? canShareBingPublic = null, bool? canSharePublic = null, bool? canSignInArcGIS = null, bool? canSignInIDP = null, string? colorSetsGroupQuery = null, bool? commentsEnabled = null, System.DateTime? created = null, string? culture = null, string? customBaseUrl = null, string? default3DBasemapQuery = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? defaultExtent = null, string? description = null, string? devBasemapGalleryGroupQuery = null, bool? eueiEnabled = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups!>? featuredGroups = null, string? featuredItemsGroupQuery = null, string? galleryTemplatesGroupQuery = null, bool? hasCategorySchema = null, bool? hasClassificationSchema = null, dymaptic.GeoBlazor.Core.Model.HelperServices? helperServices = null, string? homePageFeaturedContent = null, int? homePageFeaturedContentCount = null, double? httpPort = null, double? httpsPort = null, string? ipCntryCode = null, bool? isPortal = null, bool? isReadOnly = null, string? layerTemplatesGroupQuery = null, double? maxTokenExpirationMinutes = null, System.DateTime? modified = null, string? name = null, string? portalHostname = null, string? portalId = null, dymaptic.GeoBlazor.Core.Enums.PortalMode? portalMode = null, dymaptic.GeoBlazor.Core.Model.PortalProperties? portalProperties = null, bool? recycleBinEnabled = null, string? region = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RotatorPanel!>? rotatorPanels = null, bool? showHomePageDescription = null, bool? supportsHostedServices = null, string? symbolSetsGroupQuery = null, string? templatesGroupQuery = null, dymaptic.GeoBlazor.Core.Enums.PortalUnits? units = null, string? url = null, string? urlKey = null, bool? use3dBasemaps = null, bool? useDefault3dBasemap = null, bool? useStandardizedQuery = null, bool? useVectorBasemaps = null, string? vectorBasemapGalleryGroupQuery = null) -> void
dymaptic.GeoBlazor.Core.Components.Portal.PortalHostname.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.PortalHostname.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.PortalId.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.PortalId.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.PortalMode.get -> dymaptic.GeoBlazor.Core.Enums.PortalMode?
dymaptic.GeoBlazor.Core.Components.Portal.PortalMode.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.PortalProperties.get -> dymaptic.GeoBlazor.Core.Model.PortalProperties?
dymaptic.GeoBlazor.Core.Components.Portal.PortalProperties.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.QueryGroups(dymaptic.GeoBlazor.Core.Model.PortalQueryParams! queryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.PortalQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Portal.QueryItems(dymaptic.GeoBlazor.Core.Model.PortalQueryParams! queryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.PortalQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Portal.QueryUsers(dymaptic.GeoBlazor.Core.Model.PortalQueryParams! queryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.PortalQueryResult?>!
dymaptic.GeoBlazor.Core.Components.Portal.RecycleBinEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.RecycleBinEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Region.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.Region.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.RemoveFromAuthorizedCrossOriginDomains(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.RemoveFromFeaturedGroups(params dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.RemoveFromRotatorPanels(params dymaptic.GeoBlazor.Core.Model.RotatorPanel![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.RestUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.RestUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.RotatorPanels.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RotatorPanel!>?
dymaptic.GeoBlazor.Core.Components.Portal.RotatorPanels.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.SetAccess(dymaptic.GeoBlazor.Core.Enums.PortalAccess? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetAllSSL(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetAuthMode(dymaptic.GeoBlazor.Core.Enums.AuthMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetAuthorizedCrossOriginDomains(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetBasemapGalleryGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetBasemapGalleryGroupQuery3D(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetBingKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanListApps(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanListData(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanListPreProvisionedItems(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanProvisionDirectPurchase(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanSearchPublic(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanShareBingPublic(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanSharePublic(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanSignInArcGIS(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCanSignInIDP(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetColorSetsGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCommentsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCreated(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCulture(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetCustomBaseUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetDefault3DBasemapQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetDefaultExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetDevBasemapGalleryGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetEueiEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetFeaturedGroups(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetFeaturedItemsGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetGalleryTemplatesGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHasCategorySchema(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHasClassificationSchema(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHelperServices(dymaptic.GeoBlazor.Core.Model.HelperServices? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHomePageFeaturedContent(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHomePageFeaturedContentCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHttpPort(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetHttpsPort(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetIpCntryCode(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetIsPortal(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetIsReadOnly(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetLayerTemplatesGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetMaxTokenExpirationMinutes(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetModified(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetPortalHostname(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetPortalId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetPortalMode(dymaptic.GeoBlazor.Core.Enums.PortalMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetPortalProperties(dymaptic.GeoBlazor.Core.Model.PortalProperties? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetRecycleBinEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetRegion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetRotatorPanels(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RotatorPanel!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetShowHomePageDescription(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetSupportsHostedServices(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetSymbolSetsGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetTemplatesGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUnits(dymaptic.GeoBlazor.Core.Enums.PortalUnits? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUrlKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUse3dBasemaps(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUseDefault3dBasemap(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUseStandardizedQuery(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetUseVectorBasemaps(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.SetVectorBasemapGalleryGroupQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Portal.ShowHomePageDescription.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.ShowHomePageDescription.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.SupportsHostedServices.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.SupportsHostedServices.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.SymbolSetsGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.SymbolSetsGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.TemplatesGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.TemplatesGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.ThumbnailUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.ThumbnailUrl.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Units.get -> dymaptic.GeoBlazor.Core.Enums.PortalUnits?
dymaptic.GeoBlazor.Core.Components.Portal.Units.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.UrlKey.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.UrlKey.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.Use3dBasemaps.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.Use3dBasemaps.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.UseDefault3dBasemap.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.UseDefault3dBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.User.get -> dymaptic.GeoBlazor.Core.Components.PortalUser?
dymaptic.GeoBlazor.Core.Components.Portal.User.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.UseStandardizedQuery.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.UseStandardizedQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.UseVectorBasemaps.get -> bool?
dymaptic.GeoBlazor.Core.Components.Portal.UseVectorBasemaps.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.VectorBasemapGalleryGroupQuery.get -> string?
dymaptic.GeoBlazor.Core.Components.Portal.VectorBasemapGalleryGroupQuery.set -> void
dymaptic.GeoBlazor.Core.Components.Portal.When(System.Func<System.Threading.Tasks.Task!>! callback, System.Func<System.Threading.Tasks.Task!>! errback) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.FilterFunction.get -> dymaptic.GeoBlazor.Core.Functions.BasemapFilter?
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.FilterFunction.set -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.GetPortal() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Portal?>!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.GetQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.HasFilterFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.HasUpdateBasemapsCallback.get -> bool
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.OnJsFilterFunction(dymaptic.GeoBlazor.Core.Components.Basemap! item, int index, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Basemap!>! array) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.OnJsUpdateBasemapsCallback(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Basemap!>! items) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap![]?>!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.Portal.set -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.PortalBasemapsSource() -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.PortalBasemapsSource(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Basemap!>? basemaps = null, dymaptic.GeoBlazor.Core.Functions.BasemapFilter? filterFunction = null, dymaptic.GeoBlazor.Core.Components.Portal? portal = null, string? query = null, dymaptic.GeoBlazor.Core.Functions.UpdateBasemapsCallback? updateBasemapsCallback = null) -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.Query.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.Query.set -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.QueryParams.get -> System.Collections.Generic.Dictionary<string!, string!>?
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.QueryParams.set -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.QueryString.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.QueryString.set -> void
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.SetPortal(dymaptic.GeoBlazor.Core.Components.Portal? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.SetQuery(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.UpdateBasemapsCallback.get -> dymaptic.GeoBlazor.Core.Functions.UpdateBasemapsCallback?
dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.UpdateBasemapsCallback.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.GetOwner() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.Owner.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.Owner.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.PortalFeaturedGroups() -> void
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.PortalFeaturedGroups(string? owner = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.SetOwner(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalFeaturedGroups.Title.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder
dymaptic.GeoBlazor.Core.Components.PortalFolder.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.PortalFolder.Created.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder.GetCreated() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.PortalFolder.GetPortalFolderId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalFolder.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalFolder.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalFolder.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Components.PortalFolder.Portal.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder.PortalFolder() -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder.PortalFolder(System.DateTime? created = null, string? portalFolderId = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder.PortalFolderId.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalFolder.PortalFolderId.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder.SetCreated(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalFolder.SetPortalFolderId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalFolder.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalFolder.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalFolder.Title.set -> void
dymaptic.GeoBlazor.Core.Components.PortalFolder.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalFolder.Url.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem
dymaptic.GeoBlazor.Core.Components.PortalItem.Access.get -> dymaptic.GeoBlazor.Core.Enums.PortalItemAccess?
dymaptic.GeoBlazor.Core.Components.PortalItem.Access.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.AccessInformation.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.AccessInformation.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.AddRating(double rating) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PortalRating?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.AddResource(dymaptic.GeoBlazor.Core.Model.PortalItemResource! resource, System.IO.Stream! content, dymaptic.GeoBlazor.Core.Options.PortalItemAddResourceOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.AddToCategories(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.AddToGroupCategories(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.AddToScreenshots(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.AddToTags(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.AddToTypeKeywords(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.ApplicationProxies.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies!>?
dymaptic.GeoBlazor.Core.Components.PortalItem.ApplicationProxies.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.AvgRating.get -> double?
dymaptic.GeoBlazor.Core.Components.PortalItem.AvgRating.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.CancelLoad() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.Categories.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.PortalItem.Categories.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Classification.get -> System.Collections.Generic.Dictionary<string!, string?>?
dymaptic.GeoBlazor.Core.Components.PortalItem.Classification.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.PortalItem.Created.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Culture.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Culture.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.DeleteRating() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Description.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.ExcludeApiKey.get -> bool?
dymaptic.GeoBlazor.Core.Components.PortalItem.ExcludeApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.PortalItem.Extent.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.FetchData(dymaptic.GeoBlazor.Core.Enums.ResponseType responseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.FetchRating(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PortalRating?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.FetchRelatedItems(string! relationshipType, dymaptic.GeoBlazor.Core.Enums.RelationshipDirection direction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem![]?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.FetchResources(double num, double start, dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder sortOrder, dymaptic.GeoBlazor.Core.Enums.SortField sortField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.FetchResourcesResult?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetAccess() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalItemAccess?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetAccessInformation() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetApplicationProxies() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies!>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetAvgRating() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetCategories() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetClassification() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, string?>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetCreated() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetCulture() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetGroupCategories() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetIsLayer() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetIsOrgItem() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetItemControl() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ItemControl?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetItemPageUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetItemUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetLicenseInfo() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetLoaded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetModified() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetNumComments() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetNumRatings() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetNumViews() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetOwner() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetOwnerFolder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetPortal() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Portal?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetPortalItemId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetScreenshots() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetSize() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetSnippet() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetTags() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetThumbnailUrl(int width) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetTypeKeywords() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.GroupCategories.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.PortalItem.GroupCategories.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.IsFulfilled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.IsLayer.get -> bool?
dymaptic.GeoBlazor.Core.Components.PortalItem.IsLayer.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.IsOrgItem.get -> bool?
dymaptic.GeoBlazor.Core.Components.PortalItem.IsOrgItem.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.IsRejected() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.IsResolved() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.ItemControl.get -> dymaptic.GeoBlazor.Core.Enums.ItemControl?
dymaptic.GeoBlazor.Core.Components.PortalItem.ItemControl.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.ItemPageUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.ItemPageUrl.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.ItemUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.ItemUrl.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.LicenseInfo.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.LicenseInfo.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Load(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.Loaded.get -> bool?
dymaptic.GeoBlazor.Core.Components.PortalItem.Loaded.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Modified.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.PortalItem.Modified.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Name.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.NumComments.get -> double?
dymaptic.GeoBlazor.Core.Components.PortalItem.NumComments.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.NumRatings.get -> double?
dymaptic.GeoBlazor.Core.Components.PortalItem.NumRatings.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.NumViews.get -> double?
dymaptic.GeoBlazor.Core.Components.PortalItem.NumViews.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Owner.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Owner.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.OwnerFolder.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.OwnerFolder.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Components.PortalItem.Portal.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.PortalItem() -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.PortalItem(string! portalItemId, dymaptic.GeoBlazor.Core.Enums.PortalItemAccess? access = null, string? accessInformation = null, string? apiKey = null, double? avgRating = null, System.Collections.Generic.IReadOnlyList<string!>? categories = null, System.DateTime? created = null, string? culture = null, string? description = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? extent = null, System.Collections.Generic.IReadOnlyList<string!>? groupCategories = null, string? licenseInfo = null, System.DateTime? modified = null, string? name = null, double? numComments = null, double? numRatings = null, double? numViews = null, string? owner = null, string? ownerFolder = null, dymaptic.GeoBlazor.Core.Components.Portal? portal = null, System.Collections.Generic.IReadOnlyList<string!>? screenshots = null, long? size = null, string? snippet = null, System.Collections.Generic.IReadOnlyList<string!>? tags = null, string? title = null, System.Collections.Generic.IReadOnlyList<string!>? typeKeywords = null, string? url = null) -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.PortalItemId.get -> string!
dymaptic.GeoBlazor.Core.Components.PortalItem.PortalItemId.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Reload() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveAllResources(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveFromCategories(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveFromGroupCategories(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveFromScreenshots(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveFromTags(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveFromTypeKeywords(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.RemoveResource(dymaptic.GeoBlazor.Core.Model.PortalItemResource! resource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.Screenshots.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.PortalItem.Screenshots.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.SetAccess(dymaptic.GeoBlazor.Core.Enums.PortalItemAccess? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetAccessInformation(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetAvgRating(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetCategories(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetClassification(System.Collections.Generic.Dictionary<string!, string?>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetCreated(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetCulture(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetGroupCategories(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetLicenseInfo(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetModified(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetNumComments(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetNumRatings(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetNumViews(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetOwner(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetOwnerFolder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetPortal(dymaptic.GeoBlazor.Core.Components.Portal? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetPortalItemId(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetScreenshots(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetSize(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetSnippet(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetTags(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetTypeKeywords(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalItem.Size.get -> long?
dymaptic.GeoBlazor.Core.Components.PortalItem.Size.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Snippet.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Snippet.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Tags.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.PortalItem.Tags.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.ThumbnailUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.ThumbnailUrl.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Title.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.TypeKeywords.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.PortalItem.TypeKeywords.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.Update(string! data) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.UpdateThumbnail(System.IO.Stream! thumbnail, string! filename) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.PortalItem.Url.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalItem.Url.set -> void
dymaptic.GeoBlazor.Core.Components.PortalItem.When(System.Func<System.Threading.Tasks.Task!>! callback, System.Func<System.Threading.Tasks.Task!>! errback) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser
dymaptic.GeoBlazor.Core.Components.PortalUser.Access.get -> dymaptic.GeoBlazor.Core.Enums.PortalUserAccess?
dymaptic.GeoBlazor.Core.Components.PortalUser.Access.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.AddItem(dymaptic.GeoBlazor.Core.Components.PortalItem! item, string! data, string! folder) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.AddToPrivileges(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.PortalUser.Created.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.Culture.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.Culture.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.DeleteItem(dymaptic.GeoBlazor.Core.Components.PortalItem! item, bool permanentDelete) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.DeleteItems(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.PortalItem!>! items, bool permanentDelete) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.DeleteItemsResult![]?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.Description.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.Email.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.Email.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.FetchFolders() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalFolder![]?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.FetchGroups() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PortalGroup![]?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.FetchItems(dymaptic.GeoBlazor.Core.Components.PortalFolder! folder, bool inRecycleBin, bool includeSubfolderItems, double num, string! sortField, dymaptic.GeoBlazor.Core.Enums.OrderBy sortOrder, double start) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.FetchItemsResult?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.FetchTags() -> System.Threading.Tasks.Task<string![]?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.FullName.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.FullName.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.GetAccess() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalUserAccess?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetCreated() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetCulture() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetEmail() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetFullName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetModified() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetOrgId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetPreferredView() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetPrivileges() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetRegion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetRole() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalUserRole?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetRoleId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetThumbnailUrl(int width) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetUnits() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PortalUserUnits?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetUserContentUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.GetUsername() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.Modified.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.PortalUser.Modified.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.OrgId.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.OrgId.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Components.PortalUser.Portal.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.PortalUser() -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.PortalUser(dymaptic.GeoBlazor.Core.Enums.PortalUserAccess? access = null, System.DateTime? created = null, string? culture = null, string? description = null, string? email = null, string? fullName = null, System.DateTime? modified = null, string? orgId = null, string? preferredView = null, System.Collections.Generic.IReadOnlyList<string!>? privileges = null, string? region = null, dymaptic.GeoBlazor.Core.Enums.PortalUserRole? role = null, string? roleId = null, dymaptic.GeoBlazor.Core.Enums.PortalUserUnits? units = null, string? username = null) -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.PreferredView.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.PreferredView.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.Privileges.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.PortalUser.Privileges.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.QueryFavorites(dymaptic.GeoBlazor.Core.Model.PortalQueryParams! queryParams) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.PortalQueryResult?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.Region.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.Region.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.RemoveFromPrivileges(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.RestoreItem(dymaptic.GeoBlazor.Core.Components.PortalItem! item, dymaptic.GeoBlazor.Core.Components.PortalFolder! folder) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.PortalUser.Role.get -> dymaptic.GeoBlazor.Core.Enums.PortalUserRole?
dymaptic.GeoBlazor.Core.Components.PortalUser.Role.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.RoleId.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.RoleId.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.SetAccess(dymaptic.GeoBlazor.Core.Enums.PortalUserAccess? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetCreated(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetCulture(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetEmail(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetFullName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetModified(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetOrgId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetPreferredView(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetPrivileges(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetRegion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetRole(dymaptic.GeoBlazor.Core.Enums.PortalUserRole? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetRoleId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetUnits(dymaptic.GeoBlazor.Core.Enums.PortalUserUnits? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SetUsername(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.PortalUser.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.ThumbnailUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.ThumbnailUrl.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.Units.get -> dymaptic.GeoBlazor.Core.Enums.PortalUserUnits?
dymaptic.GeoBlazor.Core.Components.PortalUser.Units.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.UserContentUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.UserContentUrl.set -> void
dymaptic.GeoBlazor.Core.Components.PortalUser.Username.get -> string?
dymaptic.GeoBlazor.Core.Components.PortalUser.Username.set -> void
dymaptic.GeoBlazor.Core.Components.Position
dymaptic.GeoBlazor.Core.Components.Position.Coordinate.get -> string?
dymaptic.GeoBlazor.Core.Components.Position.Coordinate.set -> void
dymaptic.GeoBlazor.Core.Components.Position.GetCoordinate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Position.GetLocation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Position.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Position.Location.set -> void
dymaptic.GeoBlazor.Core.Components.Position.Position() -> void
dymaptic.GeoBlazor.Core.Components.Position.Position(string? coordinate = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location = null) -> void
dymaptic.GeoBlazor.Core.Components.Position.SetCoordinate(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Position.SetLocation(dymaptic.GeoBlazor.Core.Components.Geometries.Point? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType?
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GeometryType.set -> void
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GetGeometryType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType?>!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GetOidFields() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GetQuery() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.GetWorkspaceId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.OidFields.get -> string?
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.OidFields.set -> void
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.Query.get -> string?
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.Query.set -> void
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.QueryTableDataSource() -> void
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.QueryTableDataSource(string! workspaceId, string! query, string? oidFields = null, dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType? geometryType = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null) -> void
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SetGeometryType(dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SetOidFields(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SetQuery(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SetWorkspaceId(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.WorkspaceId.get -> string?
dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.WorkspaceId.set -> void
dymaptic.GeoBlazor.Core.Components.RadioButtonsInput
dymaptic.GeoBlazor.Core.Components.RadioButtonsInput.NoValueOptionLabel.get -> string?
dymaptic.GeoBlazor.Core.Components.RadioButtonsInput.NoValueOptionLabel.set -> void
dymaptic.GeoBlazor.Core.Components.RadioButtonsInput.RadioButtonsInput() -> void
dymaptic.GeoBlazor.Core.Components.RadioButtonsInput.ShowNoValueOption.get -> bool?
dymaptic.GeoBlazor.Core.Components.RadioButtonsInput.ShowNoValueOption.set -> void
dymaptic.GeoBlazor.Core.Components.RainyWeather
dymaptic.GeoBlazor.Core.Components.RainyWeather.CloudCover.get -> double?
dymaptic.GeoBlazor.Core.Components.RainyWeather.CloudCover.set -> void
dymaptic.GeoBlazor.Core.Components.RainyWeather.GetCloudCover() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RainyWeather.GetPrecipitation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RainyWeather.Precipitation.get -> double?
dymaptic.GeoBlazor.Core.Components.RainyWeather.Precipitation.set -> void
dymaptic.GeoBlazor.Core.Components.RainyWeather.RainyWeather() -> void
dymaptic.GeoBlazor.Core.Components.RainyWeather.RainyWeather(double? cloudCover = null, double? precipitation = null) -> void
dymaptic.GeoBlazor.Core.Components.RainyWeather.SetCloudCover(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RainyWeather.SetPrecipitation(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RangeDomain
dymaptic.GeoBlazor.Core.Components.RangeDomain.GetMaxValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RangeDomain.GetMinValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RangeDomain.MaxValue.get -> string?
dymaptic.GeoBlazor.Core.Components.RangeDomain.MaxValue.set -> void
dymaptic.GeoBlazor.Core.Components.RangeDomain.MinValue.get -> string?
dymaptic.GeoBlazor.Core.Components.RangeDomain.MinValue.set -> void
dymaptic.GeoBlazor.Core.Components.RangeDomain.RangeDomain() -> void
dymaptic.GeoBlazor.Core.Components.RangeDomain.RangeDomain(string? maxValue = null, string? minValue = null, string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.RangeDomain.SetMaxValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RangeDomain.SetMinValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterDataSource
dymaptic.GeoBlazor.Core.Components.RasterDataSource.DataSourceName.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterDataSource.DataSourceName.set -> void
dymaptic.GeoBlazor.Core.Components.RasterDataSource.GetDataSourceName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterDataSource.GetWorkspaceId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterDataSource.RasterDataSource() -> void
dymaptic.GeoBlazor.Core.Components.RasterDataSource.RasterDataSource(string! workspaceId, string! dataSourceName) -> void
dymaptic.GeoBlazor.Core.Components.RasterDataSource.SetDataSourceName(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterDataSource.SetWorkspaceId(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterDataSource.WorkspaceId.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterDataSource.WorkspaceId.set -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction
dymaptic.GeoBlazor.Core.Components.RasterFunction.FunctionArguments.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterFunction.FunctionArguments.set -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction.FunctionName.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterFunction.FunctionName.set -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction.GetFunctionArguments() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterFunction.GetFunctionName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterFunction.GetOutputPixelType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.OutputPixelType?>!
dymaptic.GeoBlazor.Core.Components.RasterFunction.GetRasterFunctionDefinition() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterFunction.GetVariableName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterFunction.OutputPixelType.get -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType?
dymaptic.GeoBlazor.Core.Components.RasterFunction.OutputPixelType.set -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction.RasterFunction() -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction.RasterFunction(string? functionArguments = null, string? functionName = null, dymaptic.GeoBlazor.Core.Enums.OutputPixelType? outputPixelType = null, string? rasterFunctionDefinition = null, string? variableName = null) -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction.RasterFunctionDefinition.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterFunction.RasterFunctionDefinition.set -> void
dymaptic.GeoBlazor.Core.Components.RasterFunction.SetFunctionArguments(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterFunction.SetFunctionName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterFunction.SetOutputPixelType(dymaptic.GeoBlazor.Core.Enums.OutputPixelType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterFunction.SetRasterFunctionDefinition(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterFunction.SetVariableName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterFunction.VariableName.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterFunction.VariableName.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.AcquisitionDate.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.AcquisitionDate.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.CloudCover.get -> double?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.CloudCover.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetAcquisitionDate() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetCloudCover() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetProductName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetSensorAzimuth() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetSensorElevation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetSensorName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetSunAzimuth() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.GetSunElevation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.ProductName.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.ProductName.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.RasterSensorInfo() -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.RasterSensorInfo(System.DateTime? acquisitionDate = null, double? cloudCover = null, string? productName = null, double? sensorAzimuth = null, double? sensorElevation = null, string? sensorName = null, double? sunAzimuth = null, double? sunElevation = null) -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SensorAzimuth.get -> double?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SensorAzimuth.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SensorElevation.get -> double?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SensorElevation.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SensorName.get -> string?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SensorName.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetAcquisitionDate(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetCloudCover(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetProductName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetSensorAzimuth(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetSensorElevation(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetSensorName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetSunAzimuth(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SetSunElevation(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SunAzimuth.get -> double?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SunAzimuth.set -> void
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SunElevation.get -> double?
dymaptic.GeoBlazor.Core.Components.RasterSensorInfo.SunElevation.set -> void
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder.Field.get -> string?
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder.Field.set -> void
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder.Order.get -> dymaptic.GeoBlazor.Core.Enums.OrderBy?
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder.Order.set -> void
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder.RelatedRecordsInfoFieldOrder() -> void
dymaptic.GeoBlazor.Core.Components.RelatedRecordsInfoFieldOrder.RelatedRecordsInfoFieldOrder(string? field, dymaptic.GeoBlazor.Core.Enums.OrderBy? order) -> void
dymaptic.GeoBlazor.Core.Components.RelationshipLabels
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Bottom.get -> string?
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Bottom.set -> void
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.GetBottom() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.GetLeft() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.GetRight() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.GetTop() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Left.get -> string?
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Left.set -> void
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.RelationshipLabels() -> void
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.RelationshipLabels(string? bottom = null, string? left = null, string? right = null, string? top = null) -> void
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Right.get -> string?
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Right.set -> void
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.SetBottom(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.SetLeft(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.SetRight(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.SetTop(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Top.get -> string?
dymaptic.GeoBlazor.Core.Components.RelationshipLabels.Top.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol
dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol.DefaultSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.DimensionalDefinitionValues() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.DimensionalDefinitionValues(System.Collections.Generic.IReadOnlyList<(long, long)>! valueTupleArray) -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.DimensionalDefinitionValues(System.Collections.Generic.IReadOnlyList<long>! valueArray) -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.ValueArray.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.ValueArray.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.ValueTupleArray.get -> System.Collections.Generic.IReadOnlyList<(long, long)>?
dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.ValueTupleArray.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.AddToBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.BandIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.BandIds.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.GetBandIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.GetMethod() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Method?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.GetValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Method.get -> dymaptic.GeoBlazor.Core.Enums.Method?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Method.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Name.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.RasterPresetRenderer() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.RasterPresetRenderer(System.Collections.Generic.IReadOnlyList<long>? bandIds = null, dymaptic.GeoBlazor.Core.Enums.Method? method = null, string? name = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, string? value = null) -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.RemoveFromBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.SetBandIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.SetMethod(dymaptic.GeoBlazor.Core.Enums.Method? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.SetValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Value.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.Value.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.AddToCustomStatistics(params dymaptic.GeoBlazor.Core.Model.RasterBandStatistics![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.AddToGamma(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.ColorRamp.get -> dymaptic.GeoBlazor.Core.Components.ColorRamp?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.ColorRamp.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.ComputeGamma.get -> bool?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.ComputeGamma.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.CustomStatistics.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RasterBandStatistics!>?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.CustomStatistics.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.DynamicRangeAdjustment.get -> bool?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.DynamicRangeAdjustment.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.Gamma.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.Gamma.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetColorRamp() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ColorRamp?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetComputeGamma() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetCustomStatistics() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RasterBandStatistics!>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetDynamicRangeAdjustment() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetGamma() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetMaxPercent() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetMinPercent() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetNumberOfStandardDeviations() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetOutputMax() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetOutputMin() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetSigmoidStrengthLevel() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetStretchType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.StretchType?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.GetUseGamma() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.MaxPercent.get -> double?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.MaxPercent.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.MinPercent.get -> double?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.MinPercent.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.NumberOfStandardDeviations.get -> int?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.NumberOfStandardDeviations.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.OutputMax.get -> int?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.OutputMax.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.OutputMin.get -> int?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.OutputMin.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.RasterStretchRenderer() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.RasterStretchRenderer(dymaptic.GeoBlazor.Core.Components.ColorRamp? colorRamp = null, bool? computeGamma = null, bool? dynamicRangeAdjustment = null, System.Collections.Generic.IReadOnlyList<double>? gamma = null, int? outputMax = null, int? outputMin = null, dymaptic.GeoBlazor.Core.Enums.StretchType? stretchType = null, bool? useGamma = null, int? numberOfStandardDeviations = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RasterBandStatistics!>? customStatistics = null, double? maxPercent = null, double? minPercent = null, double? sigmoidStrengthLevel = null) -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.RemoveFromCustomStatistics(params dymaptic.GeoBlazor.Core.Model.RasterBandStatistics![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.RemoveFromGamma(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetColorRamp(dymaptic.GeoBlazor.Core.Components.ColorRamp? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetComputeGamma(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetCustomStatistics(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.RasterBandStatistics!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetDynamicRangeAdjustment(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetGamma(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetMaxPercent(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetMinPercent(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetNumberOfStandardDeviations(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetOutputMax(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetOutputMin(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetSigmoidStrengthLevel(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetStretchType(dymaptic.GeoBlazor.Core.Enums.StretchType stretchType) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SetUseGamma(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SigmoidStrengthLevel.get -> double?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.SigmoidStrengthLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.StretchType.get -> dymaptic.GeoBlazor.Core.Enums.StretchType?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.StretchType.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.Type.get -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.UseGamma.get -> bool?
dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.UseGamma.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.Renderer
dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.AuthoringInfo.get -> dymaptic.GeoBlazor.Core.Components.AuthoringInfo?
dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.AuthoringInfo.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.GetAuthoringInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AuthoringInfo?>!
dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.Renderer() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.SetAuthoringInfo(dymaptic.GeoBlazor.Core.Components.AuthoringInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.AddToVisualVariables(params dymaptic.GeoBlazor.Core.Components.VisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.GetVisualVariables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.Label.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.RemoveFromVisualVariables(params dymaptic.GeoBlazor.Core.Components.VisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.SetVisualVariables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.SimpleRenderer() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.SimpleRenderer(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! symbol, string? label = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>? visualVariables = null, dymaptic.GeoBlazor.Core.Components.AuthoringInfo? authoringInfo = null) -> void
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.VisualVariables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>?
dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.VisualVariables.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.AddToUniqueValueGroups(params dymaptic.GeoBlazor.Core.Components.UniqueValueGroup![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.AddToUniqueValueInfos(params dymaptic.GeoBlazor.Core.Components.UniqueValueInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.AddToVisualVariables(params dymaptic.GeoBlazor.Core.Components.VisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.BackgroundFillSymbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.BackgroundFillSymbol.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.DefaultLabel.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.DefaultLabel.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.DefaultSymbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.DefaultSymbol.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Field.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Field.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Field2.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Field2.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Field3.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Field3.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.FieldDelimiter.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.FieldDelimiter.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetBackgroundFillSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetDefaultLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetDefaultSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetField2() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetField3() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetFieldDelimiter() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetLegendOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetOrderByClassesEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetUniqueValueGroups() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueGroup!>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetUniqueValueInfo(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.UniqueValueInfo?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetUniqueValueInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetValueExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetValueExpressionTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.GetVisualVariables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.LegendOptions.get -> dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.LegendOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.OrderByClassesEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.OrderByClassesEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.RemoveFromUniqueValueGroups(params dymaptic.GeoBlazor.Core.Components.UniqueValueGroup![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.RemoveFromUniqueValueInfos(params dymaptic.GeoBlazor.Core.Components.UniqueValueInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.RemoveFromVisualVariables(params dymaptic.GeoBlazor.Core.Components.VisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.RemoveUniqueValueInfo(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetBackgroundFillSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetDefaultLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetDefaultSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetField2(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetField3(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetFieldDelimiter(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetLegendOptions(dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetOrderByClassesEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetUniqueValueGroups(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueGroup!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetUniqueValueInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetValueExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetValueExpressionTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.SetVisualVariables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UniqueValueGroups.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueGroup!>?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UniqueValueGroups.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UniqueValueInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueInfo!>?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UniqueValueInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UniqueValueRenderer() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UniqueValueRenderer(dymaptic.GeoBlazor.Core.Components.AuthoringInfo? authoringInfo = null, dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol? backgroundFillSymbol = null, string? defaultLabel = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? defaultSymbol = null, string? field = null, string? field2 = null, string? field3 = null, string? fieldDelimiter = null, dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions? legendOptions = null, bool? orderByClassesEnabled = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueGroup!>? uniqueValueGroups = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueInfo!>? uniqueValueInfos = null, string? valueExpression = null, string? valueExpressionTitle = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>? visualVariables = null) -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.ValueExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.ValueExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.ValueExpressionTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.ValueExpressionTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.VisualVariables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.VisualVariables.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions.UniqueValueRendererLegendOptions() -> void
dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRendererLegendOptions.UniqueValueRendererLegendOptions(string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.RotationVariable
dymaptic.GeoBlazor.Core.Components.RotationVariable.Axis.get -> dymaptic.GeoBlazor.Core.Enums.Axis?
dymaptic.GeoBlazor.Core.Components.RotationVariable.Axis.set -> void
dymaptic.GeoBlazor.Core.Components.RotationVariable.GetAxis() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Axis?>!
dymaptic.GeoBlazor.Core.Components.RotationVariable.GetRotationType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.RotationType?>!
dymaptic.GeoBlazor.Core.Components.RotationVariable.RotationType.get -> dymaptic.GeoBlazor.Core.Enums.RotationType?
dymaptic.GeoBlazor.Core.Components.RotationVariable.RotationType.set -> void
dymaptic.GeoBlazor.Core.Components.RotationVariable.RotationVariable() -> void
dymaptic.GeoBlazor.Core.Components.RotationVariable.RotationVariable(string! field, dymaptic.GeoBlazor.Core.Enums.Axis? axis = null, dymaptic.GeoBlazor.Core.Enums.RotationType? rotationType = null, dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions? legendOptions = null, string? valueExpression = null, string? valueExpressionTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.RotationVariable.SetAxis(dymaptic.GeoBlazor.Core.Enums.Axis? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.RotationVariable.SetRotationType(dymaptic.GeoBlazor.Core.Enums.RotationType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel
dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel.GetScaleBarProperties(double length, dymaptic.GeoBlazor.Core.Enums.MeasurementSystem measurementSystem) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState?>!
dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel.ScaleBarViewModel() -> void
dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState?
dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?>!
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.GetOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationUnit?>!
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.Offset.get -> double?
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.Offset.set -> void
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.SceneLayerElevationInfo() -> void
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.SceneLayerElevationInfo(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? mode = null, double? offset = null, dymaptic.GeoBlazor.Core.Enums.ElevationUnit? unit = null) -> void
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.SetOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.SetUnit(dymaptic.GeoBlazor.Core.Enums.ElevationUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit?
dymaptic.GeoBlazor.Core.Components.SceneLayerElevationInfo.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.Search
dymaptic.GeoBlazor.Core.Components.Search.AddressSearchEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Search.AddressSearchEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Search.AddToLayers(params dymaptic.GeoBlazor.Core.Components.SearchLayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.AddToTables(params dymaptic.GeoBlazor.Core.Components.SearchTable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Search.Enabled.set -> void
dymaptic.GeoBlazor.Core.Components.Search.GetAddressSearchEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Search.GetEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Search.GetHintText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Search.GetLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchLayer!>?>!
dymaptic.GeoBlazor.Core.Components.Search.GetTables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchTable!>?>!
dymaptic.GeoBlazor.Core.Components.Search.HintText.get -> string?
dymaptic.GeoBlazor.Core.Components.Search.HintText.set -> void
dymaptic.GeoBlazor.Core.Components.Search.Layers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchLayer!>?
dymaptic.GeoBlazor.Core.Components.Search.Layers.set -> void
dymaptic.GeoBlazor.Core.Components.Search.RemoveFromLayers(params dymaptic.GeoBlazor.Core.Components.SearchLayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.RemoveFromTables(params dymaptic.GeoBlazor.Core.Components.SearchTable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.Search() -> void
dymaptic.GeoBlazor.Core.Components.Search.Search(bool? addressSearchEnabled = null, bool? enabled = null, string? hintText = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchLayer!>? layers = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchTable!>? tables = null) -> void
dymaptic.GeoBlazor.Core.Components.Search.SetAddressSearchEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.SetEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.SetHintText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.SetLayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchLayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.SetTables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchTable!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Search.Tables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchTable!>?
dymaptic.GeoBlazor.Core.Components.Search.Tables.set -> void
dymaptic.GeoBlazor.Core.Components.SearchLayer
dymaptic.GeoBlazor.Core.Components.SearchLayer.Field.get -> dymaptic.GeoBlazor.Core.Components.SearchLayerField?
dymaptic.GeoBlazor.Core.Components.SearchLayer.Field.set -> void
dymaptic.GeoBlazor.Core.Components.SearchLayer.GetField() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SearchLayerField?>!
dymaptic.GeoBlazor.Core.Components.SearchLayer.GetSearchLayerId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchLayer.GetSubLayer() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchLayer.SearchLayer() -> void
dymaptic.GeoBlazor.Core.Components.SearchLayer.SearchLayer(dymaptic.GeoBlazor.Core.Components.SearchLayerField? field = null, string? searchLayerId = null, double? subLayer = null) -> void
dymaptic.GeoBlazor.Core.Components.SearchLayer.SearchLayerId.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchLayer.SearchLayerId.set -> void
dymaptic.GeoBlazor.Core.Components.SearchLayer.SetField(dymaptic.GeoBlazor.Core.Components.SearchLayerField? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchLayer.SetSearchLayerId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchLayer.SetSubLayer(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchLayer.SubLayer.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchLayer.SubLayer.set -> void
dymaptic.GeoBlazor.Core.Components.SearchLayerField
dymaptic.GeoBlazor.Core.Components.SearchLayerField.ExactMatch.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchLayerField.ExactMatch.set -> void
dymaptic.GeoBlazor.Core.Components.SearchLayerField.GetExactMatch() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchLayerField.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchLayerField.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchLayerField.Name.set -> void
dymaptic.GeoBlazor.Core.Components.SearchLayerField.SearchLayerField() -> void
dymaptic.GeoBlazor.Core.Components.SearchLayerField.SearchLayerField(bool? exactMatch = null, string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.SearchLayerField.SetExactMatch(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchLayerField.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource
dymaptic.GeoBlazor.Core.Components.SearchSource.AddToOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.AutoNavigate.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchSource.AutoNavigate.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.Filter.get -> dymaptic.GeoBlazor.Core.Model.SearchSourceFilter?
dymaptic.GeoBlazor.Core.Components.SearchSource.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.GetAutoNavigate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchSourceFilter?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetMaxResults() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetMaxSuggestions() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetMinSuggestCharacters() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetOutFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetPrefix() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetResultGraphicEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetResultsHandler.get -> dymaptic.GeoBlazor.Core.Functions.GetResultsHandler?
dymaptic.GeoBlazor.Core.Components.SearchSource.GetResultsHandler.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.GetResultSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetSuffix() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetSuggestionsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetSuggestionsHandler.get -> dymaptic.GeoBlazor.Core.Functions.GetSuggestionsHandler?
dymaptic.GeoBlazor.Core.Components.SearchSource.GetSuggestionsHandler.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.GetWithinViewEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.GetZoomScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.HasGetResults.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchSource.HasGetSuggestions.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchSource.MaxResults.get -> int?
dymaptic.GeoBlazor.Core.Components.SearchSource.MaxResults.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.MaxSuggestions.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchSource.MaxSuggestions.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.MinSuggestCharacters.get -> int?
dymaptic.GeoBlazor.Core.Components.SearchSource.MinSuggestCharacters.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.OnJsGetResults(bool? exactMatch, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location, int? maxResults, int? sourceIndex, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference, dymaptic.GeoBlazor.Core.Results.SuggestResult! suggestResult, System.Guid? viewId) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SearchResult!>?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.OnJsGetSuggestions(int? maxSuggestions, int? sourceIndex, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference, string? suggestTerm, System.Guid? viewId) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?>!
dymaptic.GeoBlazor.Core.Components.SearchSource.OutFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.SearchSource.OutFields.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.Placeholder.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchSource.Placeholder.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchSource.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.SearchSource.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.Prefix.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchSource.Prefix.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.RemoveFromOutFields(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.ResultGraphicEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchSource.ResultGraphicEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.ResultSymbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.SearchSource.ResultSymbol.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.SearchSource() -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.SetAutoNavigate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetFilter(dymaptic.GeoBlazor.Core.Model.SearchSourceFilter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetMaxResults(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetMaxSuggestions(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetMinSuggestCharacters(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetOutFields(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetPlaceholder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetPrefix(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetResultGraphicEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetResultSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetSuffix(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetSuggestionsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetWithinViewEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.SetZoomScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchSource.Suffix.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchSource.Suffix.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.SuggestionsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchSource.SuggestionsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.WithinViewEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchSource.WithinViewEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchSource.ZoomScale.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchSource.ZoomScale.set -> void
dymaptic.GeoBlazor.Core.Components.SearchTable
dymaptic.GeoBlazor.Core.Components.SearchTable.Field.get -> dymaptic.GeoBlazor.Core.Components.SearchTableField?
dymaptic.GeoBlazor.Core.Components.SearchTable.Field.set -> void
dymaptic.GeoBlazor.Core.Components.SearchTable.GetField() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SearchTableField?>!
dymaptic.GeoBlazor.Core.Components.SearchTable.GetSearchTableId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchTable.SearchTable() -> void
dymaptic.GeoBlazor.Core.Components.SearchTable.SearchTable(dymaptic.GeoBlazor.Core.Components.SearchTableField? field = null, string? searchTableId = null) -> void
dymaptic.GeoBlazor.Core.Components.SearchTable.SearchTableId.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchTable.SearchTableId.set -> void
dymaptic.GeoBlazor.Core.Components.SearchTable.SetField(dymaptic.GeoBlazor.Core.Components.SearchTableField? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchTable.SetSearchTableId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchTableField
dymaptic.GeoBlazor.Core.Components.SearchTableField.ExactMatch.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchTableField.ExactMatch.set -> void
dymaptic.GeoBlazor.Core.Components.SearchTableField.GetExactMatch() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchTableField.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchTableField.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchTableField.Name.set -> void
dymaptic.GeoBlazor.Core.Components.SearchTableField.SearchTableField() -> void
dymaptic.GeoBlazor.Core.Components.SearchTableField.SearchTableField(bool? exactMatch = null, string? name = null) -> void
dymaptic.GeoBlazor.Core.Components.SearchTableField.SetExactMatch(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchTableField.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ActiveSource.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ActiveSource.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ActiveSourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ActiveSourceIndex.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AddToSources(params dymaptic.GeoBlazor.Core.Components.SearchSource![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AllPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AllPlaceholder.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AllSources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AllSources.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AutoNavigate.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AutoNavigate.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AutoSelect.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.AutoSelect.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.BoolIncludeDefaultSources.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.BoolIncludeDefaultSources.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.DefaultPopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.DefaultPopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.DefaultSources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.DefaultSources.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.DefaultSymbols.get -> dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.DefaultSymbols.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetActiveSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SearchSource?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetActiveSourceIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetAllPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetAllSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetAutoNavigate() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetAutoSelect() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetBoolIncludeDefaultSources() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetDefaultPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetDefaultSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetDefaultSymbols() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetMaxInputLength() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetMaxResults() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetMaxSuggestions() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetMinSuggestCharacters() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetPortal() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Portal?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetResultCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetResultGraphic() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetResultGraphicEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetResults() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SearchResultResponse!>?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSearchAllEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSearchTerm() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSelectedResult() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSelectedSuggestion() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.SuggestResult?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SearchViewModelState?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSuggestionCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSuggestionDelay() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSuggestions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetSuggestionsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetTaskCollectionIncludeDefaultSources() -> System.Threading.Tasks.Task<System.Func<System.Threading.Tasks.Task!>?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GetUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasSearchClearListener.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasSearchCompleteListener.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasSearchStartListener.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasSelectResultListener.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasSuggestCompleteListener.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.HasSuggestStartListener.get -> bool
dymaptic.GeoBlazor.Core.Components.SearchViewModel.LocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.LocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MaxInputLength.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MaxInputLength.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MaxResults.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MaxResults.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MaxSuggestions.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MaxSuggestions.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MinSuggestCharacters.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.MinSuggestCharacters.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsSearchClear(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsSearchComplete(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsSearchStart(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsSelectResult(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsSuggestComplete(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnJsSuggestStart(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSearchClear.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchClearEvent!>
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSearchClear.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSearchComplete.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent!>
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSearchComplete.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSearchStart.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchStartEvent!>
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSearchStart.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSelectResult.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent!>
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSelectResult.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSuggestComplete.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent!>
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSuggestComplete.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSuggestStart.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestStartEvent!>
dymaptic.GeoBlazor.Core.Components.SearchViewModel.OnSuggestStart.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Placeholder.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Placeholder.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Portal.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.RemoveFromSources(params dymaptic.GeoBlazor.Core.Components.SearchSource![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ResultCount.get -> int?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ResultCount.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ResultGraphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ResultGraphic.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ResultGraphicEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.ResultGraphicEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Results.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SearchResultResponse!>?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Results.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Search(string! searchItem) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchResponse?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchAllEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchAllEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchNearby() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchResponse?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchTerm.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchViewModel() -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SearchViewModel(int? activeSourceIndex = null, string? allPlaceholder = null, bool? autoNavigate = null, bool? autoSelect = null, bool? boolIncludeDefaultSources = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? defaultPopupTemplate = null, dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols? defaultSymbols = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, bool? locationEnabled = null, double? maxInputLength = null, double? maxResults = null, double? maxSuggestions = null, double? minSuggestCharacters = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.Portal? portal = null, int? resultCount = null, bool? resultGraphicEnabled = null, bool? searchAllEnabled = null, string? searchTerm = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>? sources = null, int? suggestionCount = null, double? suggestionDelay = null, bool? suggestionsEnabled = null, System.Func<System.Threading.Tasks.Task!>? taskCollectionIncludeDefaultSources = null) -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Select(string! value) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SelectedResult.get -> string?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SelectedResult.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SelectedSuggestion.get -> dymaptic.GeoBlazor.Core.Results.SuggestResult?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SelectedSuggestion.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetActiveSourceIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetAllPlaceholder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetAutoNavigate(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetAutoSelect(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetBoolIncludeDefaultSources(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetDefaultPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetDefaultSymbols(dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetMaxInputLength(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetMaxResults(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetMaxSuggestions(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetMinSuggestCharacters(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetPortal(dymaptic.GeoBlazor.Core.Components.Portal? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetResultCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetResultGraphicEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetSearchAllEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetSearchTerm(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetSources(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetSuggestionCount(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetSuggestionDelay(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetSuggestionsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SetTaskCollectionIncludeDefaultSources(System.Func<System.Threading.Tasks.Task!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Sources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Sources.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.SearchViewModelState?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Suggest(string! value) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SuggestResponse?>!
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SuggestionCount.get -> int?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SuggestionCount.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SuggestionDelay.get -> double?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SuggestionDelay.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Suggestions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Suggestions.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SuggestionsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.SuggestionsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.TaskCollectionIncludeDefaultSources.get -> System.Func<System.Threading.Tasks.Task!>?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.TaskCollectionIncludeDefaultSources.set -> void
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Updating.get -> bool?
dymaptic.GeoBlazor.Core.Components.SearchViewModel.Updating.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampElement
dymaptic.GeoBlazor.Core.Components.SizeRampElement.AddToInfos(params dymaptic.GeoBlazor.Core.Components.SizeRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.ClusterTitle.get -> dymaptic.GeoBlazor.Core.Components.ClusterTitle?
dymaptic.GeoBlazor.Core.Components.SizeRampElement.ClusterTitle.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampElement.GetClusterTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ClusterTitle?>!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.GetInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeRampStop!>?>!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.GetRampTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RampTitle?>!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.GetStringTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.Infos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeRampStop!>?
dymaptic.GeoBlazor.Core.Components.SizeRampElement.Infos.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampElement.RampTitle.get -> dymaptic.GeoBlazor.Core.Model.RampTitle?
dymaptic.GeoBlazor.Core.Components.SizeRampElement.RampTitle.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampElement.RemoveFromInfos(params dymaptic.GeoBlazor.Core.Components.SizeRampStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.SetClusterTitle(dymaptic.GeoBlazor.Core.Components.ClusterTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.SetInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeRampStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.SetRampTitle(dymaptic.GeoBlazor.Core.Model.RampTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.SetStringTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampElement.SizeRampElement() -> void
dymaptic.GeoBlazor.Core.Components.SizeRampElement.SizeRampElement(dymaptic.GeoBlazor.Core.Components.ClusterTitle? clusterTitle = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeRampStop!>? infos = null, dymaptic.GeoBlazor.Core.Model.RampTitle? rampTitle = null, string? stringTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.SizeRampElement.StringTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.SizeRampElement.StringTitle.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop
dymaptic.GeoBlazor.Core.Components.SizeRampStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.GetOutlineSize() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.GetPreview() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.ElementReference?>!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.GetSize() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.GetSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.GetValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.OutlineSize.get -> int?
dymaptic.GeoBlazor.Core.Components.SizeRampStop.OutlineSize.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Preview.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Preview.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SetOutlineSize(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SetPreview(Microsoft.AspNetCore.Components.ElementReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SetSize(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SetSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SetValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Size.get -> int?
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Size.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SizeRampStop() -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.SizeRampStop(string? label = null, int? outlineSize = null, Microsoft.AspNetCore.Components.ElementReference? preview = null, int? size = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? symbol = null, string? value = null) -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Value.get -> string?
dymaptic.GeoBlazor.Core.Components.SizeRampStop.Value.set -> void
dymaptic.GeoBlazor.Core.Components.SizeStop
dymaptic.GeoBlazor.Core.Components.SizeStop.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SizeStop.GetSize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.SizeStop.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SizeStop.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.SizeStop.Label.set -> void
dymaptic.GeoBlazor.Core.Components.SizeStop.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeStop.SetSize(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeStop.SetValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeStop.Size.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.SizeStop.Size.set -> void
dymaptic.GeoBlazor.Core.Components.SizeStop.SizeStop() -> void
dymaptic.GeoBlazor.Core.Components.SizeStop.SizeStop(double value, dymaptic.GeoBlazor.Core.Model.Dimension? size = null, string? label = null) -> void
dymaptic.GeoBlazor.Core.Components.SizeStop.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.SizeStop.Value.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable
dymaptic.GeoBlazor.Core.Components.SizeVariable.AddToStops(params dymaptic.GeoBlazor.Core.Components.SizeStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.Axis.get -> dymaptic.GeoBlazor.Core.Enums.VisualAxis?
dymaptic.GeoBlazor.Core.Components.SizeVariable.Axis.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.FlipSizes() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetAxis() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.VisualAxis?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetMaxDataValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetMaxSize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetMinDataValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetMinSize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetNormalizationField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetStops() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetTarget() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetUseSymbolValue() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetValueRepresentation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.GetValueUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.VisualValueUnit?>!
dymaptic.GeoBlazor.Core.Components.SizeVariable.MaxDataValue.get -> double?
dymaptic.GeoBlazor.Core.Components.SizeVariable.MaxDataValue.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.MaxSize.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.SizeVariable.MaxSize.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.MinDataValue.get -> double?
dymaptic.GeoBlazor.Core.Components.SizeVariable.MinDataValue.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.MinSize.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.SizeVariable.MinSize.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.NormalizationField.get -> string?
dymaptic.GeoBlazor.Core.Components.SizeVariable.NormalizationField.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.RemoveFromStops(params dymaptic.GeoBlazor.Core.Components.SizeStop![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetAxis(dymaptic.GeoBlazor.Core.Enums.VisualAxis? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetMaxDataValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetMaxSize(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetMinDataValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetMinSize(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetNormalizationField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetStops(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetTarget(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetUseSymbolValue(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetValueRepresentation(dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SetValueUnit(dymaptic.GeoBlazor.Core.Enums.VisualValueUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SizeVariable.SizeVariable() -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.SizeVariable(string! field, dymaptic.GeoBlazor.Core.Model.Dimension? minSize = null, dymaptic.GeoBlazor.Core.Model.Dimension? maxSize = null, double? minDataValue = null, double? maxDataValue = null, dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation? valueRepresentation = null, dymaptic.GeoBlazor.Core.Enums.VisualValueUnit? valueUnit = null, string? normalizationField = null, string? target = null, bool? useSymbolValue = null, dymaptic.GeoBlazor.Core.Enums.VisualAxis? axis = null, string? valueExpression = null, string? valueExpressionTitle = null, dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions? legendOptions = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>? stops = null) -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.Stops.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SizeStop!>?
dymaptic.GeoBlazor.Core.Components.SizeVariable.Stops.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.Target.get -> string?
dymaptic.GeoBlazor.Core.Components.SizeVariable.Target.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.UseSymbolValue.get -> bool?
dymaptic.GeoBlazor.Core.Components.SizeVariable.UseSymbolValue.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.ValueRepresentation.get -> dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation?
dymaptic.GeoBlazor.Core.Components.SizeVariable.ValueRepresentation.set -> void
dymaptic.GeoBlazor.Core.Components.SizeVariable.ValueUnit.get -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit?
dymaptic.GeoBlazor.Core.Components.SizeVariable.ValueUnit.set -> void
dymaptic.GeoBlazor.Core.Components.Slide
dymaptic.GeoBlazor.Core.Components.Slide.AddToVisibleLayers(params dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.ApplyTo(dymaptic.GeoBlazor.Core.Components.Views.SceneView! view, object! optionsWithDefaults) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Slide?>!
dymaptic.GeoBlazor.Core.Components.Slide.Basemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Slide.Basemap.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.Description.get -> dymaptic.GeoBlazor.Core.Model.SlideDescription?
dymaptic.GeoBlazor.Core.Components.Slide.Description.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.Environment.get -> dymaptic.GeoBlazor.Core.Model.SlideEnvironment?
dymaptic.GeoBlazor.Core.Components.Slide.Environment.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.GetBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetDescription() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SlideDescription?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetEnvironment() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SlideEnvironment?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetGround() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SlideGround?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetHidden() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetSlideId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetThumbnail() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SlideThumbnail?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SlideTitle?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetViewpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewpoint?>!
dymaptic.GeoBlazor.Core.Components.Slide.GetVisibleLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers!>?>!
dymaptic.GeoBlazor.Core.Components.Slide.Ground.get -> dymaptic.GeoBlazor.Core.Model.SlideGround?
dymaptic.GeoBlazor.Core.Components.Slide.Ground.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.Hidden.get -> bool?
dymaptic.GeoBlazor.Core.Components.Slide.Hidden.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.RemoveFromVisibleLayers(params dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetBasemap(dymaptic.GeoBlazor.Core.Components.Basemap? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetDescription(dymaptic.GeoBlazor.Core.Model.SlideDescription? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetEnvironment(dymaptic.GeoBlazor.Core.Model.SlideEnvironment? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetGround(dymaptic.GeoBlazor.Core.Model.SlideGround? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetHidden(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetSlideId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetThumbnail(dymaptic.GeoBlazor.Core.Model.SlideThumbnail? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetTitle(dymaptic.GeoBlazor.Core.Model.SlideTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetViewpoint(dymaptic.GeoBlazor.Core.Components.Viewpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.SetVisibleLayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Slide.Slide() -> void
dymaptic.GeoBlazor.Core.Components.Slide.Slide(dymaptic.GeoBlazor.Core.Components.Basemap? basemap = null, dymaptic.GeoBlazor.Core.Model.SlideDescription? description = null, dymaptic.GeoBlazor.Core.Model.SlideEnvironment? environment = null, dymaptic.GeoBlazor.Core.Model.SlideGround? ground = null, bool? hidden = null, string? slideId = null, dymaptic.GeoBlazor.Core.Model.SlideThumbnail? thumbnail = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Model.SlideTitle? title = null, dymaptic.GeoBlazor.Core.Components.Viewpoint? viewpoint = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers!>? visibleLayers = null) -> void
dymaptic.GeoBlazor.Core.Components.Slide.SlideId.get -> string?
dymaptic.GeoBlazor.Core.Components.Slide.SlideId.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.Thumbnail.get -> dymaptic.GeoBlazor.Core.Model.SlideThumbnail?
dymaptic.GeoBlazor.Core.Components.Slide.Thumbnail.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.Slide.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.Title.get -> dymaptic.GeoBlazor.Core.Model.SlideTitle?
dymaptic.GeoBlazor.Core.Components.Slide.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.UpdateFrom(dymaptic.GeoBlazor.Core.Components.Views.SceneView! view, dymaptic.GeoBlazor.Core.Options.SlideUpdateFromOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Slide?>!
dymaptic.GeoBlazor.Core.Components.Slide.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Viewpoint?
dymaptic.GeoBlazor.Core.Components.Slide.Viewpoint.set -> void
dymaptic.GeoBlazor.Core.Components.Slide.VisibleLayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers!>?
dymaptic.GeoBlazor.Core.Components.Slide.VisibleLayers.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel
dymaptic.GeoBlazor.Core.Components.SliderViewModel.AddToValues(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.DefaultInputFormatFunction(double value) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.DefaultInputParseFunction(string! value) -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.DefaultLabelFormatFunction(double value) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.EffectiveMax.get -> double?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.EffectiveMax.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.EffectiveMin.get -> double?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.EffectiveMin.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetBounds() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Bounds?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetBoundsForValueAtIndex(int index) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetEffectiveMax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetEffectiveMin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetLabelForValue(double value, dymaptic.GeoBlazor.Core.Enums.SliderViewModelType type, int index) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetLabels() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.LabelInfos?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetMax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetMin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetPrecision() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewModelState?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetThumbsConstrained() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.GetValues() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.HasInputFormatFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.SliderViewModel.HasInputParseFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.SliderViewModel.HasLabelFormatFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.SliderViewModel.InputFormatFunction.get -> dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.InputFormatFunction.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.InputParseFunction.get -> dymaptic.GeoBlazor.Core.Functions.InputParser?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.InputParseFunction.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.LabelFormatFunction.get -> dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.LabelFormatFunction.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Labels.get -> dymaptic.GeoBlazor.Core.Model.LabelInfos?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Labels.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Max.get -> double?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Max.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Min.get -> double?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Min.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Precision.get -> double?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Precision.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.RemoveFromValues(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetEffectiveMax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetEffectiveMin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetMax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetMin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetPrecision(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetThumbsConstrained(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetValue(int index, double value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SetValues(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SliderViewModel() -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.SliderViewModel(double? effectiveMax = null, double? effectiveMin = null, dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter? inputFormatFunction = null, dymaptic.GeoBlazor.Core.Functions.InputParser? inputParseFunction = null, dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter? labelFormatFunction = null, double? max = null, double? min = null, double? precision = null, bool? thumbsConstrained = null, System.Collections.Generic.IReadOnlyList<double>? values = null) -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ViewModelState?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.ThumbsConstrained.get -> bool?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.ThumbsConstrained.set -> void
dymaptic.GeoBlazor.Core.Components.SliderViewModel.ToPrecision(double value) -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Values.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.SliderViewModel.Values.set -> void
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.GetLabels() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.GetRangeLabels() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.Labels.get -> bool?
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.Labels.set -> void
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.RangeLabels.get -> bool?
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.RangeLabels.set -> void
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.SetLabels(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.SetRangeLabels(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.SliderVisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.SliderVisibleElements.SliderVisibleElements(bool? labels = null, bool? rangeLabels = null) -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions
dymaptic.GeoBlazor.Core.Components.SnappingOptions.AddToFeatureSources(params dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.AttributeRulesEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.AttributeRulesEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.Distance.get -> double?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.Distance.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.Enabled.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.FeatureEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.FeatureEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.FeatureSources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource!>?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.FeatureSources.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetAttributeRulesEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetDistance() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetFeatureEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetFeatureSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource!>?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetGridEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GetSelfEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GridEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.GridEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.RemoveFromFeatureSources(params dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SelfEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SelfEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetAttributeRulesEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetDistance(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetFeatureEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetFeatureSources(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetGridEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SetSelfEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SnappingOptions() -> void
dymaptic.GeoBlazor.Core.Components.SnappingOptions.SnappingOptions(bool? attributeRulesEnabled = null, double? distance = null, bool? enabled = null, bool? featureEnabled = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource!>? featureSources = null, bool? gridEnabled = null, bool? selfEnabled = null) -> void
dymaptic.GeoBlazor.Core.Components.SnowyWeather
dymaptic.GeoBlazor.Core.Components.SnowyWeather.CloudCover.get -> double?
dymaptic.GeoBlazor.Core.Components.SnowyWeather.CloudCover.set -> void
dymaptic.GeoBlazor.Core.Components.SnowyWeather.GetCloudCover() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SnowyWeather.GetPrecipitation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SnowyWeather.GetSnowCover() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SnowCover?>!
dymaptic.GeoBlazor.Core.Components.SnowyWeather.Precipitation.get -> double?
dymaptic.GeoBlazor.Core.Components.SnowyWeather.Precipitation.set -> void
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SetCloudCover(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SetPrecipitation(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SetSnowCover(dymaptic.GeoBlazor.Core.Enums.SnowCover? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SnowCover.get -> dymaptic.GeoBlazor.Core.Enums.SnowCover?
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SnowCover.set -> void
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SnowyWeather() -> void
dymaptic.GeoBlazor.Core.Components.SnowyWeather.SnowyWeather(double? cloudCover = null, double? precipitation = null, dymaptic.GeoBlazor.Core.Enums.SnowCover? snowCover = null) -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference
dymaptic.GeoBlazor.Core.Components.SpatialReference.Clone() -> dymaptic.GeoBlazor.Core.Components.SpatialReference!
dymaptic.GeoBlazor.Core.Components.SpatialReference.Equals(dymaptic.GeoBlazor.Core.Components.SpatialReference? other) -> bool
dymaptic.GeoBlazor.Core.Components.SpatialReference.GetImageCoordinateSystem() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SpatialReference.GetMetersPerUnit() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SpatialReference.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit?>!
dymaptic.GeoBlazor.Core.Components.SpatialReference.GetWkid() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.SpatialReference.GetWkt() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SpatialReference.GetWkt2() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SpatialReference.ImageCoordinateSystem.get -> string?
dymaptic.GeoBlazor.Core.Components.SpatialReference.ImageCoordinateSystem.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsGeographic.get -> bool?
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsGeographic.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsWebMercator.get -> bool?
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsWebMercator.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsWgs84.get -> bool?
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsWgs84.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsWrappable.get -> bool?
dymaptic.GeoBlazor.Core.Components.SpatialReference.IsWrappable.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.MetersPerUnit.get -> double?
dymaptic.GeoBlazor.Core.Components.SpatialReference.MetersPerUnit.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.SetImageCoordinateSystem(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SpatialReference.SetWkid(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SpatialReference.SetWkt(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SpatialReference.SetWkt2(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SpatialReference.SpatialReference() -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.SpatialReference(int? wkid = null, string? imageCoordinateSystem = null, string? wkt = null, string? wkt2 = null) -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.Unit.get -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit?
dymaptic.GeoBlazor.Core.Components.SpatialReference.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.Wkid.get -> int?
dymaptic.GeoBlazor.Core.Components.SpatialReference.Wkid.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.Wkt.get -> string?
dymaptic.GeoBlazor.Core.Components.SpatialReference.Wkt.set -> void
dymaptic.GeoBlazor.Core.Components.SpatialReference.Wkt2.get -> string?
dymaptic.GeoBlazor.Core.Components.SpatialReference.Wkt2.set -> void
dymaptic.GeoBlazor.Core.Components.SunLighting
dymaptic.GeoBlazor.Core.Components.SunLighting.CameraTrackingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.SunLighting.CameraTrackingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.SunLighting.CloneWithWebsceneLighting() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SunLighting.GetCameraTrackingEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.SunLighting.SetCameraTrackingEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SunLighting.SunLighting() -> void
dymaptic.GeoBlazor.Core.Components.SunLighting.SunLighting(bool? cameraTrackingEnabled = null, System.DateTime? date = null, bool? directShadowsEnabled = null, double? displayUTCOffset = null) -> void
dymaptic.GeoBlazor.Core.Components.SunnyWeather
dymaptic.GeoBlazor.Core.Components.SunnyWeather.CloudCover.get -> double?
dymaptic.GeoBlazor.Core.Components.SunnyWeather.CloudCover.set -> void
dymaptic.GeoBlazor.Core.Components.SunnyWeather.GetCloudCover() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.SunnyWeather.SetCloudCover(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SunnyWeather.SunnyWeather() -> void
dymaptic.GeoBlazor.Core.Components.SunnyWeather.SunnyWeather(double? cloudCover = null) -> void
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.GetReturnType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType?>!
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.ReturnType.get -> dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType?
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.ReturnType.set -> void
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.SetReturnType(dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.SupportExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.SupportExpressionInfo(string? expression = null, dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType? returnType = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.SupportExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.SwitchInput
dymaptic.GeoBlazor.Core.Components.SwitchInput.OffValue.get -> string?
dymaptic.GeoBlazor.Core.Components.SwitchInput.OffValue.set -> void
dymaptic.GeoBlazor.Core.Components.SwitchInput.OnValue.get -> string?
dymaptic.GeoBlazor.Core.Components.SwitchInput.OnValue.set -> void
dymaptic.GeoBlazor.Core.Components.SwitchInput.SwitchInput() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol.FillSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol.Outline.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Outline?
dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol.Outline.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbol.GetWidth() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbol.LineSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbol.SetWidth(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbol.Width.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbol.Width.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.Color.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.GetPlacement() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LinePlacement?>!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle?>!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.LineSymbolMarker() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.LineSymbolMarker(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Enums.LinePlacement? placement = null, dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle? style = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.Placement.get -> dymaptic.GeoBlazor.Core.Enums.LinePlacement?
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.Placement.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.SetPlacement(dymaptic.GeoBlazor.Core.Enums.LinePlacement value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.SetStyle(dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.Style.get -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle?
dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.Angle.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.Angle.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.GetAngle() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.GetXoffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.GetYoffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.MarkerSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.SetAngle(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.SetXoffset(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.SetYoffset(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.Xoffset.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.Xoffset.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.Yoffset.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.MarkerSymbol.Yoffset.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.Outline
dymaptic.GeoBlazor.Core.Components.Symbols.Outline.Outline() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.Outline.Outline(dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol! symbol) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.Outline.Outline(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Model.Dimension? width = null, dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle? style = null, dymaptic.GeoBlazor.Core.Enums.Cap? cap = null, dymaptic.GeoBlazor.Core.Enums.Join? join = null, dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker? marker = null, double? miterLimit = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetHeight() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetWidth() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetXoffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetXscale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetYoffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.GetYscale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Height.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Height.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.PictureFillSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.PictureFillSymbol(string! url, dymaptic.GeoBlazor.Core.Model.Dimension? width = null, dymaptic.GeoBlazor.Core.Model.Dimension? height = null, dymaptic.GeoBlazor.Core.Model.Dimension? xoffset = null, dymaptic.GeoBlazor.Core.Model.Dimension? yoffset = null, double? xScale = null, double? yScale = null, dymaptic.GeoBlazor.Core.Components.Symbols.Outline? outline = null, dymaptic.GeoBlazor.Core.Model.MapColor? color = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetHeight(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetUrl(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetWidth(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetXoffset(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetXscale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetYoffset(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.SetYscale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Url.get -> string!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Width.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Width.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Xoffset.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Xoffset.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.XScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Xscale.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.XScale.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Xscale.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Yoffset.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Yoffset.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.YScale.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Yscale.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.YScale.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Yscale.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.GetHeight() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.GetWidth() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Height.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Height.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.PictureMarkerSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.PictureMarkerSymbol(string! url, dymaptic.GeoBlazor.Core.Model.Dimension? width = null, dymaptic.GeoBlazor.Core.Model.Dimension? height = null, double? angle = null, dymaptic.GeoBlazor.Core.Model.Dimension? xoffset = null, dymaptic.GeoBlazor.Core.Model.Dimension? yoffset = null, dymaptic.GeoBlazor.Core.Model.MapColor? color = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.SetHeight(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.SetUrl(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.SetWidth(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Url.get -> string!
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Url.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Width.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Width.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.GetPoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.GetPolygon() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.GetPolyline() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.Point.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.Point.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.Polygon.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.Polygon.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.Polyline.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.Polyline.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.SearchViewModelDefaultSymbols() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.SearchViewModelDefaultSymbols(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? point = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? polygon = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? polyline = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.SetPoint(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.SetPolygon(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SearchViewModelDefaultSymbols.SetPolyline(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.SetStyle(dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.SimpleFillSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.SimpleFillSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Outline? outline = null, dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle? style = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.Style.get -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Cap.get -> dymaptic.GeoBlazor.Core.Enums.Cap?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Cap.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.GetCap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Cap?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.GetJoin() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Join?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.GetMarker() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.GetMiterLimit() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Join.get -> dymaptic.GeoBlazor.Core.Enums.Join?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Join.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Marker.get -> dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Marker.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.MiterLimit.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.MiterLimit.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SetCap(dymaptic.GeoBlazor.Core.Enums.Cap? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SetJoin(dymaptic.GeoBlazor.Core.Enums.Join? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SetMarker(dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SetMiterLimit(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SetStyle(dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SimpleLineSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.SimpleLineSymbol(dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Model.Dimension? width = null, dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle? style = null, dymaptic.GeoBlazor.Core.Enums.Cap? cap = null, dymaptic.GeoBlazor.Core.Enums.Join? join = null, dymaptic.GeoBlazor.Core.Components.Symbols.LineSymbolMarker? marker = null, double? miterLimit = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Style.get -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.GetOutline() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Outline?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.GetPath() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.GetSize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Outline.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Outline?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Outline.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Path.get -> string?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Path.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.SetOutline(dymaptic.GeoBlazor.Core.Components.Symbols.Outline? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.SetPath(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.SetSize(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.SetStyle(dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.SimpleMarkerSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.SimpleMarkerSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Outline? outline = null, dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Model.Dimension? size = null, dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle? style = null, double? angle = null, dymaptic.GeoBlazor.Core.Model.Dimension? xoffset = null, dymaptic.GeoBlazor.Core.Model.Dimension? yoffset = null, string? path = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Size.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Size.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Style.get -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle?
dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.Symbol
dymaptic.GeoBlazor.Core.Components.Symbols.Symbol.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Symbols.Symbol.Color.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.Symbol.GetColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Symbols.Symbol.SetColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.Symbol.Symbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.AddToInfos(params dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.DotDensityTitle.get -> dymaptic.GeoBlazor.Core.Components.DotDensityTitle?
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.DotDensityTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.GetDotDensityTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DotDensityTitle?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.GetInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType!>?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.GetLegendType() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.GetRendererTitle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RendererTitle?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.GetStringTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.Infos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType!>?
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.Infos.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.LegendType.get -> string?
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.LegendType.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.RemoveFromInfos(params dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.RendererTitle.get -> dymaptic.GeoBlazor.Core.Model.RendererTitle?
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.RendererTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SetDotDensityTitle(dymaptic.GeoBlazor.Core.Components.DotDensityTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SetInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SetLegendType(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SetRendererTitle(dymaptic.GeoBlazor.Core.Model.RendererTitle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SetStringTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.StringTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.StringTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SymbolTableElement() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.SymbolTableElement(dymaptic.GeoBlazor.Core.Components.DotDensityTitle? dotDensityTitle = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType!>? infos = null, string? legendType = null, dymaptic.GeoBlazor.Core.Model.RendererTitle? rendererTitle = null, string? stringTitle = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Angle.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Angle.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.BackgroundColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.BackgroundColor.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.BorderLineColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.BorderLineColor.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.BorderLineSize.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.BorderLineSize.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Font.get -> dymaptic.GeoBlazor.Core.Components.MapFont?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Font.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetAngle() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetBackgroundColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetBorderLineColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetBorderLineSize() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetFont() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.MapFont?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetHaloColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetHaloSize() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetHorizontalAlignment() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetKerning() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetLineHeight() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetLineWidth() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetRotated() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetVerticalAlignment() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.VerticalAlignment?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetXoffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.GetYoffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Dimension?>!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.HaloColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.HaloColor.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.HaloSize.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.HaloSize.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.HorizontalAlignment.get -> dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.HorizontalAlignment.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Kerning.get -> bool?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Kerning.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.LineHeight.get -> double?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.LineHeight.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.LineWidth.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.LineWidth.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Rotated.get -> bool?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Rotated.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetAngle(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetBackgroundColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetBorderLineColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetBorderLineSize(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetFont(dymaptic.GeoBlazor.Core.Components.MapFont? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetHaloColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetHaloSize(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetHorizontalAlignment(dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetKerning(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetLineHeight(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetLineWidth(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetRotated(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetVerticalAlignment(dymaptic.GeoBlazor.Core.Enums.VerticalAlignment? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetXoffset(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.SetYoffset(dymaptic.GeoBlazor.Core.Model.Dimension? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Text.get -> string?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Text.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.TextSymbol() -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.TextSymbol(string! text, dymaptic.GeoBlazor.Core.Model.MapColor? color = null, dymaptic.GeoBlazor.Core.Model.MapColor? haloColor = null, dymaptic.GeoBlazor.Core.Model.Dimension? haloSize = null, dymaptic.GeoBlazor.Core.Components.MapFont? font = null, double? angle = null, dymaptic.GeoBlazor.Core.Model.MapColor? backgroundColor = null, dymaptic.GeoBlazor.Core.Model.MapColor? borderLineColor = null, double? borderLineSize = null, dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment? horizontalAlignment = null, bool? kerning = null, double? lineHeight = null, dymaptic.GeoBlazor.Core.Model.Dimension? lineWidth = null, bool? rotated = null, dymaptic.GeoBlazor.Core.Enums.VerticalAlignment? verticalAlignment = null, dymaptic.GeoBlazor.Core.Model.Dimension? xoffset = null, dymaptic.GeoBlazor.Core.Model.Dimension? yoffset = null) -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.VerticalAlignment.get -> dymaptic.GeoBlazor.Core.Enums.VerticalAlignment?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.VerticalAlignment.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Xoffset.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Xoffset.set -> void
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Yoffset.get -> dymaptic.GeoBlazor.Core.Model.Dimension?
dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Yoffset.set -> void
dymaptic.GeoBlazor.Core.Components.TableDataSource
dymaptic.GeoBlazor.Core.Components.TableDataSource.DataSourceName.get -> string?
dymaptic.GeoBlazor.Core.Components.TableDataSource.DataSourceName.set -> void
dymaptic.GeoBlazor.Core.Components.TableDataSource.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Components.TableDataSource.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Components.TableDataSource.GetDataSourceName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TableDataSource.GetGdbVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TableDataSource.GetWorkspaceId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TableDataSource.SetDataSourceName(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TableDataSource.SetGdbVersion(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TableDataSource.SetWorkspaceId(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TableDataSource.TableDataSource() -> void
dymaptic.GeoBlazor.Core.Components.TableDataSource.TableDataSource(string! workspaceId, string! dataSourceName, string? gdbVersion = null) -> void
dymaptic.GeoBlazor.Core.Components.TableDataSource.WorkspaceId.get -> string?
dymaptic.GeoBlazor.Core.Components.TableDataSource.WorkspaceId.set -> void
dymaptic.GeoBlazor.Core.Components.TextAreaInput
dymaptic.GeoBlazor.Core.Components.TextAreaInput.MaxLength.get -> int?
dymaptic.GeoBlazor.Core.Components.TextAreaInput.MaxLength.set -> void
dymaptic.GeoBlazor.Core.Components.TextAreaInput.MinLength.get -> int?
dymaptic.GeoBlazor.Core.Components.TextAreaInput.MinLength.set -> void
dymaptic.GeoBlazor.Core.Components.TextAreaInput.TextAreaInput() -> void
dymaptic.GeoBlazor.Core.Components.TextBoxInput
dymaptic.GeoBlazor.Core.Components.TextBoxInput.MaxLength.get -> int?
dymaptic.GeoBlazor.Core.Components.TextBoxInput.MaxLength.set -> void
dymaptic.GeoBlazor.Core.Components.TextBoxInput.MinLength.get -> int?
dymaptic.GeoBlazor.Core.Components.TextBoxInput.MinLength.set -> void
dymaptic.GeoBlazor.Core.Components.TextBoxInput.TextBoxInput() -> void
dymaptic.GeoBlazor.Core.Components.Theme
dymaptic.GeoBlazor.Core.Components.Theme.AccentColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Theme.AccentColor.set -> void
dymaptic.GeoBlazor.Core.Components.Theme.GetAccentColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Theme.GetTextColor() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapColor?>!
dymaptic.GeoBlazor.Core.Components.Theme.SetAccentColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Theme.SetTextColor(dymaptic.GeoBlazor.Core.Model.MapColor? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Theme.TextColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Theme.TextColor.set -> void
dymaptic.GeoBlazor.Core.Components.Theme.Theme() -> void
dymaptic.GeoBlazor.Core.Components.Theme.Theme(dymaptic.GeoBlazor.Core.Model.MapColor? accentColor = null, dymaptic.GeoBlazor.Core.Model.MapColor? textColor = null) -> void
dymaptic.GeoBlazor.Core.Components.TickConfig
dymaptic.GeoBlazor.Core.Components.TickConfig.AddToValues(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TickConfig.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.TickConfig.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.TickConfigMode?>!
dymaptic.GeoBlazor.Core.Components.TickConfig.GetValues() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.TickConfig.HasLabelFormatFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.TickConfig.HasTickCreatedFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.TickConfig.LabelFormatFunction.get -> dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter?
dymaptic.GeoBlazor.Core.Components.TickConfig.LabelFormatFunction.set -> void
dymaptic.GeoBlazor.Core.Components.TickConfig.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.TickConfig.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.TickConfig.Mode.get -> dymaptic.GeoBlazor.Core.Enums.TickConfigMode
dymaptic.GeoBlazor.Core.Components.TickConfig.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.TickConfig.OnJsTickCreatedFunction(double value, Microsoft.AspNetCore.Components.ElementReference tickElement, Microsoft.AspNetCore.Components.ElementReference labelElement) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TickConfig.RemoveFromValues(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TickConfig.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TickConfig.SetMode(dymaptic.GeoBlazor.Core.Enums.TickConfigMode value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TickConfig.SetValues(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TickConfig.TickConfig() -> void
dymaptic.GeoBlazor.Core.Components.TickConfig.TickConfig(dymaptic.GeoBlazor.Core.Enums.TickConfigMode mode, dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter? labelFormatFunction = null, bool? labelsVisible = null, dymaptic.GeoBlazor.Core.Functions.TickCreatedFunction? tickCreatedFunction = null, System.Collections.Generic.IReadOnlyList<double>? values = null) -> void
dymaptic.GeoBlazor.Core.Components.TickConfig.TickCreatedFunction.get -> dymaptic.GeoBlazor.Core.Functions.TickCreatedFunction?
dymaptic.GeoBlazor.Core.Components.TickConfig.TickCreatedFunction.set -> void
dymaptic.GeoBlazor.Core.Components.TickConfig.Values.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.TickConfig.Values.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo
dymaptic.GeoBlazor.Core.Components.TileInfo.AddToLods(params dymaptic.GeoBlazor.Core.Components.LOD![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.AddToSize(params int[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.Dpi.get -> double?
dymaptic.GeoBlazor.Core.Components.TileInfo.Dpi.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.Format.get -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat?
dymaptic.GeoBlazor.Core.Components.TileInfo.Format.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.GetDpi() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.GetFormat() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.TileInfoFormat?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.GetIsWrappable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.GetLods() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LOD!>?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.GetOrigin() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.GetSize() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<int>?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.IsWrappable.get -> bool?
dymaptic.GeoBlazor.Core.Components.TileInfo.IsWrappable.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.Lods.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LOD!>?
dymaptic.GeoBlazor.Core.Components.TileInfo.Lods.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.Origin.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.TileInfo.Origin.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.RemoveFromLods(params dymaptic.GeoBlazor.Core.Components.LOD![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.RemoveFromSize(params int[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.ScaleToZoom(double scale) -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.TileInfo.SetDpi(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.SetFormat(dymaptic.GeoBlazor.Core.Enums.TileInfoFormat? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.SetLods(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LOD!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.SetOrigin(dymaptic.GeoBlazor.Core.Components.Geometries.Point? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.SetSize(System.Collections.Generic.IReadOnlyList<int>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileInfo.Size.get -> System.Collections.Generic.IReadOnlyList<int>?
dymaptic.GeoBlazor.Core.Components.TileInfo.Size.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.TileInfo.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.TileInfo() -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.TileInfo(double? dpi = null, dymaptic.GeoBlazor.Core.Enums.TileInfoFormat? format = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LOD!>? lods = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? origin = null, System.Collections.Generic.IReadOnlyList<int>? size = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null) -> void
dymaptic.GeoBlazor.Core.Components.TileInfo.ZoomToScale(int zoom) -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.GetTileMatrixSetId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.SetTileInfo(dymaptic.GeoBlazor.Core.Components.TileInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.SetTileMatrixSetId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.TileMatrixSet() -> void
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.TileMatrixSet(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, dymaptic.GeoBlazor.Core.Components.TileInfo? tileInfo = null, string? tileMatrixSetId = null) -> void
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.TileMatrixSetId.get -> string?
dymaptic.GeoBlazor.Core.Components.TileMatrixSet.TileMatrixSetId.set -> void
dymaptic.GeoBlazor.Core.Components.TimeExtent
dymaptic.GeoBlazor.Core.Components.TimeExtent.End.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.TimeExtent.End.set -> void
dymaptic.GeoBlazor.Core.Components.TimeExtent.Equals(dymaptic.GeoBlazor.Core.Components.TimeExtent? other) -> bool
dymaptic.GeoBlazor.Core.Components.TimeExtent.GetEnd() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.TimeExtent.GetStart() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.TimeExtent.Intersection(dymaptic.GeoBlazor.Core.Components.TimeExtent! timeExtent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.TimeExtent.SetEnd(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeExtent.SetStart(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeExtent.Start.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.TimeExtent.Start.set -> void
dymaptic.GeoBlazor.Core.Components.TimeExtent.TimeExtent() -> void
dymaptic.GeoBlazor.Core.Components.TimeExtent.TimeExtent(System.DateTime start, System.DateTime end) -> void
dymaptic.GeoBlazor.Core.Components.TimeExtent.Union(dymaptic.GeoBlazor.Core.Components.TimeExtent! timeExtent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo
dymaptic.GeoBlazor.Core.Components.TimeInfo.AddToStops(params System.DateTime[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.EndField.get -> string?
dymaptic.GeoBlazor.Core.Components.TimeInfo.EndField.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.FullTimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.TimeInfo.FullTimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetEndField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetFullTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetInterval() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetStartField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetStops() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.DateTime>?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.GetTrackIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.TimeInfo.Interval.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.TimeInfo.Interval.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.RemoveFromStops(params System.DateTime[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetEndField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetFullTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetInterval(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetStartField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetStops(System.Collections.Generic.IReadOnlyList<System.DateTime>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetTimeZone(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.SetTrackIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInfo.StartField.get -> string?
dymaptic.GeoBlazor.Core.Components.TimeInfo.StartField.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.Stops.get -> System.Collections.Generic.IReadOnlyList<System.DateTime>?
dymaptic.GeoBlazor.Core.Components.TimeInfo.Stops.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.TimeInfo() -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.TimeInfo(string? startField = null, string? endField = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? fullTimeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? interval = null, System.Collections.Generic.IReadOnlyList<System.DateTime>? stops = null, string? timeZone = null, string? trackIdField = null) -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.TimeZone.get -> string?
dymaptic.GeoBlazor.Core.Components.TimeInfo.TimeZone.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInfo.TrackIdField.get -> string?
dymaptic.GeoBlazor.Core.Components.TimeInfo.TrackIdField.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInterval
dymaptic.GeoBlazor.Core.Components.TimeInterval.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.TemporalTime?>!
dymaptic.GeoBlazor.Core.Components.TimeInterval.GetValue() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.TimeInterval.SetUnit(dymaptic.GeoBlazor.Core.Enums.TemporalTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInterval.SetValue(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TimeInterval.TimeInterval() -> void
dymaptic.GeoBlazor.Core.Components.TimeInterval.TimeInterval(dymaptic.GeoBlazor.Core.Enums.TemporalTime unit, double value) -> void
dymaptic.GeoBlazor.Core.Components.TimeInterval.Unit.get -> dymaptic.GeoBlazor.Core.Enums.TemporalTime?
dymaptic.GeoBlazor.Core.Components.TimeInterval.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.TimeInterval.Value.get -> double?
dymaptic.GeoBlazor.Core.Components.TimeInterval.Value.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo
dymaptic.GeoBlazor.Core.Components.TrackInfo.AddToFields(params dymaptic.GeoBlazor.Core.Components.AggregateField![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.TrackInfo.Enabled.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AggregateField!>?
dymaptic.GeoBlazor.Core.Components.TrackInfo.Fields.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AggregateField!>?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetLatestObservations() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackPartInfo?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetMaxDisplayDuration() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetMaxDisplayObservationsPerTrack() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetPreviousObservations() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackPartInfo?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetTimeField() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.TimeField?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.GetTrackLines() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackPartInfo?>!
dymaptic.GeoBlazor.Core.Components.TrackInfo.LatestObservations.get -> dymaptic.GeoBlazor.Core.Components.TrackPartInfo?
dymaptic.GeoBlazor.Core.Components.TrackInfo.LatestObservations.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.MaxDisplayDuration.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Components.TrackInfo.MaxDisplayDuration.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.MaxDisplayObservationsPerTrack.get -> double?
dymaptic.GeoBlazor.Core.Components.TrackInfo.MaxDisplayObservationsPerTrack.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.TrackInfo.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.TrackInfo.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.PreviousObservations.get -> dymaptic.GeoBlazor.Core.Components.TrackPartInfo?
dymaptic.GeoBlazor.Core.Components.TrackInfo.PreviousObservations.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.RemoveFromFields(params dymaptic.GeoBlazor.Core.Components.AggregateField![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetFields(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AggregateField!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetLatestObservations(dymaptic.GeoBlazor.Core.Components.TrackPartInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetMaxDisplayDuration(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetMaxDisplayObservationsPerTrack(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetPreviousObservations(dymaptic.GeoBlazor.Core.Components.TrackPartInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetTimeField(dymaptic.GeoBlazor.Core.Enums.TimeField? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.SetTrackLines(dymaptic.GeoBlazor.Core.Components.TrackPartInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackInfo.TimeField.get -> dymaptic.GeoBlazor.Core.Enums.TimeField?
dymaptic.GeoBlazor.Core.Components.TrackInfo.TimeField.set -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.TrackInfo() -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.TrackInfo(bool? enabled = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.AggregateField!>? fields = null, dymaptic.GeoBlazor.Core.Components.TrackPartInfo? latestObservations = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? maxDisplayDuration = null, double? maxDisplayObservationsPerTrack = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.TrackPartInfo? previousObservations = null, dymaptic.GeoBlazor.Core.Enums.TimeField? timeField = null, dymaptic.GeoBlazor.Core.Components.TrackPartInfo? trackLines = null) -> void
dymaptic.GeoBlazor.Core.Components.TrackInfo.TrackLines.get -> dymaptic.GeoBlazor.Core.Components.TrackPartInfo?
dymaptic.GeoBlazor.Core.Components.TrackInfo.TrackLines.set -> void
dymaptic.GeoBlazor.Core.Components.TrackPartInfo
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.AddToLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.GetLabelingInfo() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?>!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.GetLabelsVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?>!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.LabelingInfo.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>?
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.LabelingInfo.set -> void
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.LabelsVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.LabelsVisible.set -> void
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.RemoveFromLabelingInfo(params dymaptic.GeoBlazor.Core.Components.Label![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.Renderer.get -> dymaptic.GeoBlazor.Core.Components.Renderers.Renderer?
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.Renderer.set -> void
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.SetLabelingInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.SetLabelsVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.SetRenderer(dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.TrackPartInfo() -> void
dymaptic.GeoBlazor.Core.Components.TrackPartInfo.TrackPartInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Label!>? labelingInfo = null, bool? labelsVisible = null, dymaptic.GeoBlazor.Core.Components.Renderers.Renderer? renderer = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.UniqueValue
dymaptic.GeoBlazor.Core.Components.UniqueValue.GetValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValue.GetValue2() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValue.GetValue3() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValue.SetValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValue.SetValue2(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValue.SetValue3(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValue.UniqueValue() -> void
dymaptic.GeoBlazor.Core.Components.UniqueValue.UniqueValue(string? value = null, string? value2 = null, string? value3 = null) -> void
dymaptic.GeoBlazor.Core.Components.UniqueValue.Value.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValue.Value.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValue.Value2.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValue.Value2.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValue.Value3.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValue.Value3.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueClass
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.AddToValues(params dymaptic.GeoBlazor.Core.Components.UniqueValue![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.GetSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.GetValues() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValue!>?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.Label.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.RemoveFromValues(params dymaptic.GeoBlazor.Core.Components.UniqueValue![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.SetSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.SetValues(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValue!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.UniqueValueClass() -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.UniqueValueClass(string? label = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? symbol = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValue!>? values = null) -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.Values.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValue!>?
dymaptic.GeoBlazor.Core.Components.UniqueValueClass.Values.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.AddToClasses(params dymaptic.GeoBlazor.Core.Components.UniqueValueClass![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.Classes.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueClass!>?
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.Classes.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.GetClasses() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueClass!>?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.GetHeading() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.Heading.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.Heading.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.RemoveFromClasses(params dymaptic.GeoBlazor.Core.Components.UniqueValueClass![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.SetClasses(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueClass!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.SetHeading(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.UniqueValueGroup() -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.UniqueValueGroup(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.UniqueValueClass!>? classes = null, string? heading = null) -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.GetValue() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.Label.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.Label.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.SetLabel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.SetValue(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.Symbol.set -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.UniqueValueInfo() -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.UniqueValueInfo(string? label = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? symbol = null, string? value = null) -> void
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.Value.get -> string?
dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Components.Viewing
dymaptic.GeoBlazor.Core.Components.Viewing.GetSearch() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Search?>!
dymaptic.GeoBlazor.Core.Components.Viewing.Search.get -> dymaptic.GeoBlazor.Core.Components.Search?
dymaptic.GeoBlazor.Core.Components.Viewing.Search.set -> void
dymaptic.GeoBlazor.Core.Components.Viewing.SetSearch(dymaptic.GeoBlazor.Core.Components.Search? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Viewing.Viewing() -> void
dymaptic.GeoBlazor.Core.Components.Viewing.Viewing(dymaptic.GeoBlazor.Core.Components.Search? search = null) -> void
dymaptic.GeoBlazor.Core.Components.Viewpoint
dymaptic.GeoBlazor.Core.Components.Viewpoint.Camera.get -> dymaptic.GeoBlazor.Core.Components.Camera?
dymaptic.GeoBlazor.Core.Components.Viewpoint.Camera.set -> void
dymaptic.GeoBlazor.Core.Components.Viewpoint.GetCamera() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Camera?>!
dymaptic.GeoBlazor.Core.Components.Viewpoint.GetRotation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Viewpoint.GetScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Viewpoint.GetTargetGeometry() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Components.Viewpoint.Rotation.get -> double?
dymaptic.GeoBlazor.Core.Components.Viewpoint.Rotation.set -> void
dymaptic.GeoBlazor.Core.Components.Viewpoint.Scale.get -> double?
dymaptic.GeoBlazor.Core.Components.Viewpoint.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.Viewpoint.SetCamera(dymaptic.GeoBlazor.Core.Components.Camera? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Viewpoint.SetRotation(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Viewpoint.SetScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Viewpoint.SetTargetGeometry(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Viewpoint.TargetGeometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Components.Viewpoint.TargetGeometry.set -> void
dymaptic.GeoBlazor.Core.Components.Viewpoint.Viewpoint() -> void
dymaptic.GeoBlazor.Core.Components.Viewpoint.Viewpoint(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? targetGeometry = null, double? scale = null, double? rotation = null, dymaptic.GeoBlazor.Core.Components.Camera? camera = null) -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView
dymaptic.GeoBlazor.Core.Components.Views.MapView.AddGraphic(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.AddGraphics(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.AddLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer! layer, bool isBasemapLayer = false, bool isBasemapReferenceLayer = false) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.AddWidget(dymaptic.GeoBlazor.Core.Components.Widgets.Widget! widget) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.AllowDefaultEsriLogin.get -> bool?
dymaptic.GeoBlazor.Core.Components.Views.MapView.AllowDefaultEsriLogin.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Components.Views.MapView.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.AppId.get -> string?
dymaptic.GeoBlazor.Core.Components.Views.MapView.AppId.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.AuthenticationInitialized -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.AuthenticationManager.get -> dymaptic.GeoBlazor.Core.Model.AuthenticationManager!
dymaptic.GeoBlazor.Core.Components.Views.MapView.AuthenticationManager.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.BackgroundColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Components.Views.MapView.BackgroundColor.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Center.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Center.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Class.get -> string!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Class.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.ClearGraphics() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.ClosePopup() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Configuration.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Constraints.get -> dymaptic.GeoBlazor.Core.Components.Constraints?
dymaptic.GeoBlazor.Core.Components.Views.MapView.ErrorMessage.get -> string?
dymaptic.GeoBlazor.Core.Components.Views.MapView.ErrorMessage.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.EventRateLimitInMilliseconds.get -> int
dymaptic.GeoBlazor.Core.Components.Views.MapView.EventRateLimitInMilliseconds.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Extent.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.ExtentChangedInJs.get -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.ExtentChangedInJs.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.ExtentSetByCode -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.FindPlaces(dymaptic.GeoBlazor.Core.Model.AddressQuery! query, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! displaySymbol, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate! popupTemplate) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetActiveEventHandlers() -> System.Collections.Generic.List<string!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetCenter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetCursor() -> System.Threading.Tasks.Task<string!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetDotNetActionObjectReference(System.Guid actionId) -> Microsoft.JSInterop.DotNetObjectReference<dymaptic.GeoBlazor.Core.Components.MapComponent!>?
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetDotNetPopupTemplateObjectReference(System.Guid popupTemplateId) -> Microsoft.JSInterop.DotNetObjectReference<dymaptic.GeoBlazor.Core.Components.MapComponent!>?
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetId() -> string!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetPopupWidget() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetRotation() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GetZoom() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GoTo(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Graphics.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.GraphicSerializationChunkSize.get -> int?
dymaptic.GeoBlazor.Core.Components.Views.MapView.GraphicSerializationChunkSize.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Components.Geometries.Point! mapPoint) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Components.Geometries.Point! mapPoint, dymaptic.GeoBlazor.Core.Options.HitTestOptions? options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Events.ClickEvent! clickEvent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Events.ClickEvent! clickEvent, dymaptic.GeoBlazor.Core.Options.HitTestOptions? options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent, dymaptic.GeoBlazor.Core.Options.HitTestOptions? options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Model.ScreenPoint! screenPoint) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.HitTest(dymaptic.GeoBlazor.Core.Model.ScreenPoint! screenPoint, dymaptic.GeoBlazor.Core.Options.HitTestOptions? options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.HitTestResult!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.IsMaui.get -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.IsServer.get -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.IsWebAssembly.get -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.Latitude.get -> double?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Latitude.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Load() -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.LoadOnRender.get -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.LoadOnRender.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Longitude.get -> double?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Longitude.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Map.get -> dymaptic.GeoBlazor.Core.Components.Map?
dymaptic.GeoBlazor.Core.Components.Views.MapView.MapView() -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.NeedsRender -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnBlur.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.BlurEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnBlur.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.ClickEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnClick.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnDoubleClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.ClickEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnDoubleClick.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnDrag.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.DragEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnDrag.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnExtentChanged.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Components.Geometries.Extent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnExtentChanged.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnFocus.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.FocusEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnFocus.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnHitTestStreamCallback(Microsoft.JSInterop.IJSStreamReference! streamReference, System.Guid hitTestId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnHold.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.ClickEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnHold.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnImmediateClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.ClickEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnImmediateClick.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnImmediateDoubleClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.ClickEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnImmediateDoubleClick.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptBlur(dymaptic.GeoBlazor.Core.Events.BlurEvent! blurEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptClick(dymaptic.GeoBlazor.Core.Events.ClickEvent! clickEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptDoubleClick(dymaptic.GeoBlazor.Core.Events.ClickEvent! clickEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptDrag(dymaptic.GeoBlazor.Core.Events.DragEvent! dragEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptError(dymaptic.GeoBlazor.Core.Exceptions.JavascriptError! error) -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptErrorHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Exceptions.JavascriptException!, System.Threading.Tasks.Task!>?
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptErrorHandler.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptFocus(dymaptic.GeoBlazor.Core.Events.FocusEvent! focusEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptHitTestResult(System.Guid eventId, string! chunk) -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptHold(dymaptic.GeoBlazor.Core.Events.ClickEvent! holdEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptImmediateClick(dymaptic.GeoBlazor.Core.Events.ClickEvent! clickEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptImmediateDoubleClick(dymaptic.GeoBlazor.Core.Events.ClickEvent! clickEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptKeyDown(dymaptic.GeoBlazor.Core.Events.KeyDownEvent! keyDownEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptKeyUp(dymaptic.GeoBlazor.Core.Events.KeyUpEvent! keyUpEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptLayerCreateChunk(string! layerUid, string! chunk, int chunkIndex) -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptLayerViewCreate(dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent! layerViewCreateEvent) -> System.Threading.Tasks.Task<System.Guid?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptLayerViewCreateChunk(string! layerUid, string! chunk, int chunkIndex) -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptLayerViewCreateComplete(System.Guid? geoBlazorLayerId, string! layerUid, Microsoft.JSInterop.IJSObjectReference! layerRef, Microsoft.JSInterop.IJSObjectReference! layerViewRef, bool isBasemapLayer, bool isReferenceLayer) -> System.Threading.Tasks.Task<System.Guid?>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptLayerViewCreateError(dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent! errorEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptLayerViewDestroy(dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent! layerViewDestroyEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptMouseWheel(dymaptic.GeoBlazor.Core.Events.MouseWheelEvent! mouseWheelEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptPointerDown(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptPointerEnter(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptPointerLeave(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptPointerMove(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptPointerUp(dymaptic.GeoBlazor.Core.Events.PointerEvent! pointerEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptResize(dymaptic.GeoBlazor.Core.Events.ResizeEvent! resizeEvent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptSpatialReferenceChanged(dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJsViewInitialized() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJsViewRendered() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnKeyDown.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.KeyDownEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnKeyDown.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnKeyUp.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.KeyUpEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnKeyUp.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnLayerViewCreate.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnLayerViewCreate.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnLayerViewCreateError.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnLayerViewCreateError.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnLayerViewDestroy.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnLayerViewDestroy.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnMouseWheel.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.MouseWheelEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnMouseWheel.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerDown.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PointerEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerDown.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerEnter.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PointerEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerEnter.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerLeave.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PointerEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerLeave.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerMove.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PointerEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerMove.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerUp.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PointerEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnPointerUp.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnResize.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.ResizeEvent!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnResize.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnSpatialReferenceChanged.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Components.SpatialReference!>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnSpatialReferenceChanged.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnViewInitialized.get -> Microsoft.AspNetCore.Components.EventCallback
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnViewInitialized.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnViewRendered.get -> Microsoft.AspNetCore.Components.EventCallback<System.Guid>
dymaptic.GeoBlazor.Core.Components.Views.MapView.OnViewRendered.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.OpenPopup(dymaptic.GeoBlazor.Core.Options.PopupOpenOptions? options = null) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.PointerDown -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Views.MapView.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.PromptForArcGISKey.get -> bool?
dymaptic.GeoBlazor.Core.Components.Views.MapView.PromptForArcGISKey.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.PromptForOAuthLogin.get -> bool?
dymaptic.GeoBlazor.Core.Components.Views.MapView.PromptForOAuthLogin.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.ProViewJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Components.Views.MapView.QueryFeatures(dymaptic.GeoBlazor.Core.Model.Query! query, dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer! featureLayer, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! displaySymbol, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate! popupTemplate) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.QueryResultsMaxSizeLimit.get -> long
dymaptic.GeoBlazor.Core.Components.Views.MapView.QueryResultsMaxSizeLimit.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.RemoveGraphic(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.RemoveGraphics(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.RemoveLayer(dymaptic.GeoBlazor.Core.Components.Layers.Layer! layer, bool isBasemapLayer = false, bool isReferenceLayer = false) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.RemoveWidget(dymaptic.GeoBlazor.Core.Components.Widgets.Widget! widget) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Rendering -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.Rotation.get -> double
dymaptic.GeoBlazor.Core.Components.Views.MapView.Rotation.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Scale.get -> double?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.SetBackgroundColor(dymaptic.GeoBlazor.Core.Model.MapColor! backgroundColor) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.SetConstraints(dymaptic.GeoBlazor.Core.Components.Constraints! constraints) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.SetCursor(string! cursor) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions! highlightOptions) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.SetRotation(double rotation) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.ShouldUpdate -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.ShowPopup(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate! template, dymaptic.GeoBlazor.Core.Components.Geometries.Point! location) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.ShowPopupWithGraphic(dymaptic.GeoBlazor.Core.Components.Graphic! graphic, dymaptic.GeoBlazor.Core.Options.PopupOptions! options) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.ShowZoomWidget.get -> bool
dymaptic.GeoBlazor.Core.Components.Views.MapView.ShowZoomWidget.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.SolveServiceArea(string! serviceAreaUrl, double[]! driveTimeCutOffs, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! serviceAreaSymbol) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Views.MapView.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Style.get -> string!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.TakeScreenshot(dymaptic.GeoBlazor.Core.Model.ScreenshotOptions? options = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Screenshot!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Theme.get -> dymaptic.GeoBlazor.Core.Enums.ArcGISTheme?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Theme.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.ToMap(dymaptic.GeoBlazor.Core.Model.ScreenPoint! screenPoint) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.ToScreen(dymaptic.GeoBlazor.Core.Components.Geometries.Point! mapPoint) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ScreenPoint!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.ViewJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Components.Views.MapView.WhiteLabel.get -> string?
dymaptic.GeoBlazor.Core.Components.Views.MapView.WhiteLabel.set -> void
dymaptic.GeoBlazor.Core.Components.Views.MapView.Widgets.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Widgets.Widget!>!
dymaptic.GeoBlazor.Core.Components.Views.MapView.Zoom.get -> double?
dymaptic.GeoBlazor.Core.Components.Views.MapView.Zoom.set -> void
dymaptic.GeoBlazor.Core.Components.Views.SceneView
dymaptic.GeoBlazor.Core.Components.Views.SceneView.SceneView() -> void
dymaptic.GeoBlazor.Core.Components.Views.SceneView.Tilt.get -> double?
dymaptic.GeoBlazor.Core.Components.Views.SceneView.Tilt.set -> void
dymaptic.GeoBlazor.Core.Components.Views.SceneView.ZIndex.get -> double?
dymaptic.GeoBlazor.Core.Components.Views.SceneView.ZIndex.set -> void
dymaptic.GeoBlazor.Core.Components.VirtualLighting
dymaptic.GeoBlazor.Core.Components.VirtualLighting.CloneWithWebsceneLighting() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VirtualLighting.VirtualLighting() -> void
dymaptic.GeoBlazor.Core.Components.VirtualLighting.VirtualLighting(bool? directShadowsEnabled = null) -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements
dymaptic.GeoBlazor.Core.Components.VisibleElements.Area.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Area.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Coordinates.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Coordinates.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Direction.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Direction.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Distance.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Distance.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Elevation.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Elevation.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetArea() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetCoordinates() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetDirection() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetDistance() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetElevation() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetHeader() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetHelpMessage() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetOrientation() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetRadius() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetRotation() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetScale() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetSize() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.GetTotalLength() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElements.Header.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Header.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.HelpMessage.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.HelpMessage.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Orientation.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Orientation.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Radius.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Radius.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Rotation.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Rotation.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.Scale.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetArea(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetCoordinates(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetDirection(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetDistance(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetElevation(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetHeader(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetHelpMessage(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetOrientation(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetRadius(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetRotation(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetScale(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetSize(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.SetTotalLength(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElements.Size.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.Size.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.TotalLength.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElements.TotalLength.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.VisibleElements() -> void
dymaptic.GeoBlazor.Core.Components.VisibleElements.VisibleElements(bool? area = null, bool? coordinates = null, bool? direction = null, bool? distance = null, bool? elevation = null, bool? header = null, bool? helpMessage = null, bool? orientation = null, bool? radius = null, bool? rotation = null, bool? scale = null, bool? size = null, bool? totalLength = null) -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.GetSortAscending() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.GetSortDescending() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.SetSortAscending(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.SetSortDescending(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.SortAscending.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.SortAscending.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.SortDescending.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.SortDescending.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.VisibleElementsColumnMenuItems() -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.VisibleElementsColumnMenuItems(bool? sortAscending = null, bool? sortDescending = null) -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ClearSelection.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ClearSelection.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.DeleteSelection.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.DeleteSelection.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ExportSelectionToCSV.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ExportSelectionToCSV.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetClearSelection() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetDeleteSelection() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetExportSelectionToCSV() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetRefreshData() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetSelectedRecordsShowAllToggle() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetSelectedRecordsShowSelectedToggle() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetToggleColumns() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.GetZoomToSelection() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.RefreshData.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.RefreshData.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SelectedRecordsShowAllToggle.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SelectedRecordsShowAllToggle.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SelectedRecordsShowSelectedToggle.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SelectedRecordsShowSelectedToggle.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetClearSelection(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetDeleteSelection(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetExportSelectionToCSV(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetRefreshData(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetSelectedRecordsShowAllToggle(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetSelectedRecordsShowSelectedToggle(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetToggleColumns(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.SetZoomToSelection(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ToggleColumns.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ToggleColumns.set -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.VisibleElementsMenuItems() -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.VisibleElementsMenuItems(bool? clearSelection = null, bool? deleteSelection = null, bool? exportSelectionToCSV = null, bool? refreshData = null, bool? selectedRecordsShowAllToggle = null, bool? selectedRecordsShowSelectedToggle = null, bool? toggleColumns = null, bool? zoomToSelection = null) -> void
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ZoomToSelection.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisibleElementsMenuItems.ZoomToSelection.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariable
dymaptic.GeoBlazor.Core.Components.VisualVariable.Field.get -> string!
dymaptic.GeoBlazor.Core.Components.VisualVariable.Field.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariable.GetField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.VisualVariable.GetLegendOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions?>!
dymaptic.GeoBlazor.Core.Components.VisualVariable.GetValueExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.VisualVariable.GetValueExpressionTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.VisualVariable.LegendOptions.get -> dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions?
dymaptic.GeoBlazor.Core.Components.VisualVariable.LegendOptions.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariable.SetField(string! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisualVariable.SetLegendOptions(dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisualVariable.SetValueExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisualVariable.SetValueExpressionTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisualVariable.ValueExpression.get -> string?
dymaptic.GeoBlazor.Core.Components.VisualVariable.ValueExpression.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariable.ValueExpressionTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.VisualVariable.ValueExpressionTitle.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariable.VisualVariable() -> void
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.GetShowLegend() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.SetShowLegend(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.ShowLegend.get -> bool?
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.ShowLegend.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.Title.set -> void
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.VisualVariableLegendOptions() -> void
dymaptic.GeoBlazor.Core.Components.VisualVariableLegendOptions.VisualVariableLegendOptions(bool? showLegend = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.WebMap
dymaptic.GeoBlazor.Core.Components.WebMap.AddToBookmarks(params dymaptic.GeoBlazor.Core.Components.Bookmark![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.AddToUtilityNetworks(params dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.ApplicationProperties.get -> dymaptic.GeoBlazor.Core.Components.ApplicationProperties?
dymaptic.GeoBlazor.Core.Components.WebMap.ApplicationProperties.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.AuthoringApp.get -> string?
dymaptic.GeoBlazor.Core.Components.WebMap.AuthoringApp.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.AuthoringAppVersion.get -> string?
dymaptic.GeoBlazor.Core.Components.WebMap.AuthoringAppVersion.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.Bookmarks.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>?
dymaptic.GeoBlazor.Core.Components.WebMap.Bookmarks.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.FloorInfo.get -> dymaptic.GeoBlazor.Core.Model.MapFloorInfo?
dymaptic.GeoBlazor.Core.Components.WebMap.FloorInfo.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.GeotriggersInfo.get -> dymaptic.GeoBlazor.Core.Model.GeotriggersInfo?
dymaptic.GeoBlazor.Core.Components.WebMap.GeotriggersInfo.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.GetApplicationProperties() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ApplicationProperties?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetAuthoringApp() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetAuthoringAppVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetBookmarks() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetFloorInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapFloorInfo?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetGeotriggersInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GeotriggersInfo?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetInitialViewProperties() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.InitialViewProperties?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetLoaded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetLoadError() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Error?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetLoadStatus() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LoadStatus?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetPresentation() -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetSourceVersion() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetThumbnailUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetUtilityNetworks() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork!>?>!
dymaptic.GeoBlazor.Core.Components.WebMap.GetWidgets() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebMapWidgets?>!
dymaptic.GeoBlazor.Core.Components.WebMap.InitialViewProperties.get -> dymaptic.GeoBlazor.Core.Components.InitialViewProperties?
dymaptic.GeoBlazor.Core.Components.WebMap.InitialViewProperties.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.Load() -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.WebMap.LoadAll() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebMap?>!
dymaptic.GeoBlazor.Core.Components.WebMap.Loaded.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebMap.Loaded.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.LoadError.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Components.WebMap.LoadError.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.LoadStatus.get -> dymaptic.GeoBlazor.Core.Enums.LoadStatus?
dymaptic.GeoBlazor.Core.Components.WebMap.LoadStatus.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.WebMap.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.Presentation.get -> object?
dymaptic.GeoBlazor.Core.Components.WebMap.Presentation.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.RemoveFromBookmarks(params dymaptic.GeoBlazor.Core.Components.Bookmark![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.RemoveFromUtilityNetworks(params dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.Save(dymaptic.GeoBlazor.Core.Options.WebMapSaveOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.WebMap.SaveAs(dymaptic.GeoBlazor.Core.Components.PortalItem! portalItem, dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.WebMap.SetApplicationProperties(dymaptic.GeoBlazor.Core.Components.ApplicationProperties? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetAuthoringApp(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetAuthoringAppVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetBookmarks(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetFloorInfo(dymaptic.GeoBlazor.Core.Model.MapFloorInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetGeotriggersInfo(dymaptic.GeoBlazor.Core.Model.GeotriggersInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetInitialViewProperties(dymaptic.GeoBlazor.Core.Components.InitialViewProperties? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetPresentation(object? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetThumbnailUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetUtilityNetworks(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SetWidgets(dymaptic.GeoBlazor.Core.Components.WebMapWidgets? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMap.SourceVersion.get -> dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion?
dymaptic.GeoBlazor.Core.Components.WebMap.SourceVersion.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.ThumbnailUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.WebMap.ThumbnailUrl.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.UpdateFrom(dymaptic.GeoBlazor.Core.Components.Views.MapView! view, dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions! options) -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.WebMap.UtilityNetworks.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork!>?
dymaptic.GeoBlazor.Core.Components.WebMap.UtilityNetworks.set -> void
dymaptic.GeoBlazor.Core.Components.WebMap.WebMap() -> void
dymaptic.GeoBlazor.Core.Components.WebMap.WebMap(dymaptic.GeoBlazor.Core.Components.ApplicationProperties? applicationProperties = null, string? authoringApp = null, string? authoringAppVersion = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>? bookmarks = null, dymaptic.GeoBlazor.Core.Model.MapFloorInfo? floorInfo = null, dymaptic.GeoBlazor.Core.Model.GeotriggersInfo? geotriggersInfo = null, dymaptic.GeoBlazor.Core.Components.InitialViewProperties? initialViewProperties = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, object? presentation = null, string? thumbnailUrl = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork!>? utilityNetworks = null, dymaptic.GeoBlazor.Core.Components.WebMapWidgets? widgets = null) -> void
dymaptic.GeoBlazor.Core.Components.WebMap.Widgets.get -> dymaptic.GeoBlazor.Core.Components.WebMapWidgets?
dymaptic.GeoBlazor.Core.Components.WebMap.Widgets.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Enabled.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Facility.get -> string?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Facility.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetFacility() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetLevel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetLongNames() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetMinimized() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetPinnedLevels() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.GetSite() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Level.get -> string?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Level.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.LongNames.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.LongNames.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Minimized.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Minimized.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.PinnedLevels.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.PinnedLevels.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetFacility(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetLevel(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetLongNames(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetMinimized(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetPinnedLevels(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.SetSite(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Site.get -> string?
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.Site.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.WebMapFloorFilter() -> void
dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter.WebMapFloorFilter(bool? enabled = null, string? facility = null, string? level = null, bool? longNames = null, bool? minimized = null, bool? pinnedLevels = null, string? site = null) -> void
dymaptic.GeoBlazor.Core.Components.WebMapWidgets
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.FloorFilter.get -> dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter?
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.FloorFilter.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.GetFloorFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter?>!
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.GetTimeSlider() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider?>!
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.SetFloorFilter(dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.SetTimeSlider(dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.TimeSlider.get -> dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider?
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.TimeSlider.set -> void
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.WebMapWidgets() -> void
dymaptic.GeoBlazor.Core.Components.WebMapWidgets.WebMapWidgets(dymaptic.GeoBlazor.Core.Components.WebMapFloorFilter? floorFilter = null, dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider? timeSlider = null) -> void
dymaptic.GeoBlazor.Core.Components.WebScene
dymaptic.GeoBlazor.Core.Components.WebScene.ApplicationProperties.get -> dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties?
dymaptic.GeoBlazor.Core.Components.WebScene.ApplicationProperties.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.AuthoringApp.get -> string?
dymaptic.GeoBlazor.Core.Components.WebScene.AuthoringApp.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.AuthoringAppVersion.get -> string?
dymaptic.GeoBlazor.Core.Components.WebScene.AuthoringAppVersion.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.ClippingArea.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.WebScene.ClippingArea.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.ClippingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebScene.ClippingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.FloorInfo.get -> dymaptic.GeoBlazor.Core.Model.MapFloorInfo?
dymaptic.GeoBlazor.Core.Components.WebScene.FloorInfo.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.GetApplicationProperties() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetAuthoringApp() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetAuthoringAppVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetClippingArea() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetClippingEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetFloorInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.MapFloorInfo?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetHeightModelInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.HeightModelInfo?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetInitialViewProperties() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetLoaded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetLoadError() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Error?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetLoadStatus() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.LoadStatus?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetPresentation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Presentation?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetSourceVersion() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetThumbnailUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WebScene.GetWidgets() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebSceneWidgets?>!
dymaptic.GeoBlazor.Core.Components.WebScene.HeightModelInfo.get -> dymaptic.GeoBlazor.Core.Model.HeightModelInfo?
dymaptic.GeoBlazor.Core.Components.WebScene.HeightModelInfo.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.InitialViewProperties.get -> dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties?
dymaptic.GeoBlazor.Core.Components.WebScene.InitialViewProperties.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.Load() -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.WebScene.LoadAll() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WebScene?>!
dymaptic.GeoBlazor.Core.Components.WebScene.Loaded.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebScene.Loaded.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.LoadError.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Components.WebScene.LoadError.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.LoadStatus.get -> dymaptic.GeoBlazor.Core.Enums.LoadStatus?
dymaptic.GeoBlazor.Core.Components.WebScene.LoadStatus.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Components.WebScene.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.Presentation.get -> dymaptic.GeoBlazor.Core.Model.Presentation?
dymaptic.GeoBlazor.Core.Components.WebScene.Presentation.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.Save(dymaptic.GeoBlazor.Core.Options.WebSceneSaveOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.WebScene.SaveAs(dymaptic.GeoBlazor.Core.Components.PortalItem! portalItem, dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions! options) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Components.WebScene.SetApplicationProperties(dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetAuthoringApp(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetAuthoringAppVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetClippingArea(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetClippingEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetFloorInfo(dymaptic.GeoBlazor.Core.Model.MapFloorInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetHeightModelInfo(dymaptic.GeoBlazor.Core.Model.HeightModelInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetInitialViewProperties(dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetPresentation(dymaptic.GeoBlazor.Core.Model.Presentation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetThumbnailUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SetWidgets(dymaptic.GeoBlazor.Core.Components.WebSceneWidgets? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebScene.SourceVersion.get -> dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion?
dymaptic.GeoBlazor.Core.Components.WebScene.SourceVersion.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.ThumbnailUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.WebScene.ThumbnailUrl.set -> void
dymaptic.GeoBlazor.Core.Components.WebScene.UpdateFrom(dymaptic.GeoBlazor.Core.Components.Views.SceneView! view, dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions! options) -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.WebScene.WebScene() -> void
dymaptic.GeoBlazor.Core.Components.WebScene.WebScene(dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties? applicationProperties = null, string? authoringApp = null, string? authoringAppVersion = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? clippingArea = null, bool? clippingEnabled = null, dymaptic.GeoBlazor.Core.Model.MapFloorInfo? floorInfo = null, dymaptic.GeoBlazor.Core.Model.HeightModelInfo? heightModelInfo = null, dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties? initialViewProperties = null, dymaptic.GeoBlazor.Core.Components.PortalItem? portalItem = null, dymaptic.GeoBlazor.Core.Model.Presentation? presentation = null, string? thumbnailUrl = null, dymaptic.GeoBlazor.Core.Components.WebSceneWidgets? widgets = null) -> void
dymaptic.GeoBlazor.Core.Components.WebScene.Widgets.get -> dymaptic.GeoBlazor.Core.Components.WebSceneWidgets?
dymaptic.GeoBlazor.Core.Components.WebScene.Widgets.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.GetViewing() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewing?>!
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.SetViewing(dymaptic.GeoBlazor.Core.Components.Viewing? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.Viewing.get -> dymaptic.GeoBlazor.Core.Components.Viewing?
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.Viewing.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.WebsceneApplicationProperties() -> void
dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.WebsceneApplicationProperties(dymaptic.GeoBlazor.Core.Components.Viewing? viewing = null) -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.Environment.get -> dymaptic.GeoBlazor.Core.Components.Environment?
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.Environment.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.GetEnvironment() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Environment?>!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.GetViewingMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ViewingMode?>!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.GetViewpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewpoint?>!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SetEnvironment(dymaptic.GeoBlazor.Core.Components.Environment? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SetViewingMode(dymaptic.GeoBlazor.Core.Enums.ViewingMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SetViewpoint(dymaptic.GeoBlazor.Core.Components.Viewpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.ViewingMode.get -> dymaptic.GeoBlazor.Core.Enums.ViewingMode?
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.ViewingMode.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Viewpoint?
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.Viewpoint.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.WebsceneInitialViewProperties() -> void
dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.WebsceneInitialViewProperties(dymaptic.GeoBlazor.Core.Components.Environment? environment = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? spatialReference = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? timeExtent = null, dymaptic.GeoBlazor.Core.Enums.ViewingMode? viewingMode = null, dymaptic.GeoBlazor.Core.Components.Viewpoint? viewpoint = null) -> void
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.Date.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.Date.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.DirectShadowsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.DirectShadowsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.DisplayUTCOffset.get -> double?
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.DisplayUTCOffset.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.GetDate() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.GetDirectShadowsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.GetDisplayUTCOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.SetDate(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.SetDirectShadowsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.SetDisplayUTCOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.WebsceneSunLighting() -> void
dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting.WebsceneSunLighting(System.DateTime? date = null, bool? directShadowsEnabled = null, double? displayUTCOffset = null) -> void
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting.DirectShadowsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting.DirectShadowsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting.GetDirectShadowsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting.SetDirectShadowsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting.WebsceneVirtualLighting() -> void
dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting.WebsceneVirtualLighting(bool? directShadowsEnabled = null) -> void
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets.GetTimeSlider() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider?>!
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets.SetTimeSlider(dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets.TimeSlider.get -> dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider?
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets.TimeSlider.set -> void
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets.WebSceneWidgets() -> void
dymaptic.GeoBlazor.Core.Components.WebSceneWidgets.WebSceneWidgets(dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider? timeSlider = null) -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.FeatureExpressionInfo.get -> dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo?
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.FeatureExpressionInfo.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.GetFeatureExpressionInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.GetMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.GetOffset() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ElevationUnit?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode?
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.Offset.get -> double?
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.Offset.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.SetFeatureExpressionInfo(dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.SetMode(dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.SetOffset(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.SetUnit(dymaptic.GeoBlazor.Core.Enums.ElevationUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit?
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.WFSLayerElevationInfo() -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.WFSLayerElevationInfo(dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo? featureExpressionInfo = null, dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode? mode = null, double? offset = null, dymaptic.GeoBlazor.Core.Enums.ElevationUnit? unit = null) -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.Expression.get -> string?
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.Expression.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.GetExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.SetExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.Title.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.WFSLayerElevationInfoFeatureExpressionInfo() -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfoFeatureExpressionInfo.WFSLayerElevationInfoFeatureExpressionInfo(string? expression = null, string? title = null) -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView
dymaptic.GeoBlazor.Core.Components.WFSLayerView.AvailableFields.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.AvailableFields.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.DataUpdating.get -> bool?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.DataUpdating.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.Filter.get -> dymaptic.GeoBlazor.Core.Components.FeatureFilter?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.Filter.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetAvailableFields() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetDataUpdating() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetFilter() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureFilter?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetHasAllFeatures() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetHasAllFeaturesInView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetHasFullGeometries() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetMaximumNumberOfFeatures() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.GetMaximumNumberOfFeaturesExceeded() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HasAllFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HasAllFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HasAllFeaturesInView.get -> bool?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HasAllFeaturesInView.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HasFullGeometries.get -> bool?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HasFullGeometries.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.Highlight(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>! objectIds) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.MaximumNumberOfFeatures.get -> double?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.MaximumNumberOfFeatures.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.MaximumNumberOfFeaturesExceeded.get -> bool?
dymaptic.GeoBlazor.Core.Components.WFSLayerView.MaximumNumberOfFeaturesExceeded.set -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.SetFilter(dymaptic.GeoBlazor.Core.Components.FeatureFilter? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.SetMaximumNumberOfFeatures(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.SetMaximumNumberOfFeaturesExceeded(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WFSLayerView.WFSLayerView() -> void
dymaptic.GeoBlazor.Core.Components.WFSLayerView.WFSLayerView(dymaptic.GeoBlazor.Core.Components.FeatureEffect? featureEffect = null, dymaptic.GeoBlazor.Core.Components.FeatureFilter? filter = null, dymaptic.GeoBlazor.Core.Components.HighlightOptions? highlightOptions = null, double? maximumNumberOfFeatures = null, bool? maximumNumberOfFeaturesExceeded = null, bool? visible = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.AddToUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.AreaMeasurement2DWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.AreaMeasurement2DWidget(string? containerId = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.SnappingOptions? snappingOptions = null, dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? unit = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>? unitOptions = null, dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.GetSnappingOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SnappingOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?>!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.GetUnitOptions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.RemoveFromUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.SetSnappingOptions(dymaptic.GeoBlazor.Core.Components.SnappingOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.SetUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.SetUnitOptions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.SnappingOptions.get -> dymaptic.GeoBlazor.Core.Components.SnappingOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.SnappingOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.Unit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.UnitOptions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit>?
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.UnitOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.ActiveBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.ActiveBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.BasemapGalleryWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.BasemapGalleryWidget(dymaptic.GeoBlazor.Core.Components.Basemap? activeBasemap = null, string? containerId = null, bool? disabled = null, double? headingLevel = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource? source = null, dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Disabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Disabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.GetActiveBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.GetDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.GetHeadingLevel() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.GetSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.HeadingLevel.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.HeadingLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.SetActiveBasemap(dymaptic.GeoBlazor.Core.Components.Basemap? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.SetDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.SetHeadingLevel(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.SetSource(dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Source.get -> dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Source.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.AddToSelectedItems(params dymaptic.GeoBlazor.Core.Components.ListItem![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BaseFilterPredicate.get -> dymaptic.GeoBlazor.Core.Functions.BaseFilterPredicate?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BaseFilterPredicate.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BaseFilterText.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BaseFilterText.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BaseItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BaseItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BasemapLayerListWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BasemapLayerListWidget(string? baseFilterText = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? baseListItemCreatedFunction = null, string? basemapTitle = null, dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions? catalogOptions = null, bool? collapsed = null, bool? dragEnabled = null, bool? editingTitle = null, string? filterPlaceholder = null, int? headingLevel = null, string? icon = null, string? label = null, double? minFilterItems = null, string? referenceFilterText = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? referenceListItemCreatedFunction = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>? selectedItems = null, dymaptic.GeoBlazor.Core.Enums.SelectionMode? selectionMode = null, dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel? viewModel = null, dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance? visibilityAppearance = null, dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements? visibleElements = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BasemapTitle.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.BasemapTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.CatalogLayerList.get -> dymaptic.GeoBlazor.Core.Interfaces.ICatalogLayerListWidget?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.CatalogLayerList.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.CatalogOptions.get -> dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.CatalogOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.Collapsed.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.Collapsed.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.DragEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.DragEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.EditingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.EditingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.EditingTitle.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.EditingTitle.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.FilterPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.FilterPlaceholder.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetBaseFilterText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetBaseItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetCatalogLayerList() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.ICatalogLayerListWidget?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetCatalogOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetCollapsed() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetDragEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetEditingTitle() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetFilterPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetMinFilterItems() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetReferenceFilterText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetReferenceItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetSelectedItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetSelectionMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SelectionMode?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetVisibilityAppearance() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.GetVisibleElements() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.HasBaseFilterPredicate.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.HasCustomBaseListHandler.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.HasCustomReferenceListHandler.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.HasReferenceFilterPredicate.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.HeadingLevel.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.HeadingLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.MinFilterItems.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.MinFilterItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.MultipleSelectionEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.MultipleSelectionEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnBaseListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task<object!>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnBaseListItemCreatedHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnBaseListItemCreatedHandler.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnJsBaseFilterPredicate(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnJsReferenceFilterPredicate(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnJsTriggerAction(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnReferenceListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task<object!>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnReferenceListItemCreatedHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnReferenceListItemCreatedHandler.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnTriggerAction.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.OnTriggerAction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ReferenceFilterPredicate.get -> dymaptic.GeoBlazor.Core.Functions.ReferenceFilterPredicate?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ReferenceFilterPredicate.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ReferenceFilterText.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ReferenceFilterText.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ReferenceItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ReferenceItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.RemoveFromSelectedItems(params dymaptic.GeoBlazor.Core.Components.ListItem![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SelectedItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SelectionMode.get -> dymaptic.GeoBlazor.Core.Enums.SelectionMode?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SelectionMode.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetBaseFilterText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetCatalogOptions(dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetCollapsed(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetDragEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetEditingTitle(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetFilterPlaceholder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetMinFilterItems(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetReferenceFilterText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetSelectedItems(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetSelectionMode(dymaptic.GeoBlazor.Core.Enums.SelectionMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetVisibilityAppearance(dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.SetVisibleElements(dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.TriggerAction(dymaptic.GeoBlazor.Core.Components.ActionBase! action, dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.VisibilityAppearance.get -> dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.VisibilityAppearance.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.ActiveBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.ActiveBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.BasemapToggleWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.BasemapToggleWidget(string? containerId = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Components.Basemap? nextBasemap = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel? viewModel = null, bool? visible = null, dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements? visibleElements = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.GetActiveBasemap() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Basemap?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.GetVisibleElements() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.NextBasemap.get -> dymaptic.GeoBlazor.Core.Components.Basemap?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.NextBasemap.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.NextBasemapName.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.NextBasemapName.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.NextBasemapStyle.get -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.NextBasemapStyle.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.SetVisibleElements(dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.Toggle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.BasemapToggleVisibleElements?
dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.AddToBookmarks(params dymaptic.GeoBlazor.Core.Components.Bookmark![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.Bookmarks.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.Bookmarks.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.BookmarksWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.BookmarksWidget(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>? bookmarks = null, string? containerId = null, dymaptic.GeoBlazor.Core.Options.BookmarkOptions? defaultCreateOptions = null, dymaptic.GeoBlazor.Core.Options.BookmarkOptions? defaultEditOptions = null, bool? disabled = null, bool? dragEnabled = null, string? filterPlaceholder = null, string? filterText = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, int? headingLevel = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.BookmarksViewModel? viewModel = null, bool? visible = null, dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements? visibleElements = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.DefaultCreateOptions.get -> dymaptic.GeoBlazor.Core.Options.BookmarkOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.DefaultCreateOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.DefaultEditOptions.get -> dymaptic.GeoBlazor.Core.Options.BookmarkOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.DefaultEditOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.Disabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.Disabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.DragEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.DragEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.EditingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.EditingEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.FilterPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.FilterPlaceholder.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.FilterText.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.FilterText.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetBookmarks() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetDefaultCreateOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.BookmarkOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetDefaultEditOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.BookmarkOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetDragEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetFilterPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetFilterText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetHeadingLevel() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BookmarksViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GetVisibleElements() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GoTo(dymaptic.GeoBlazor.Core.Components.Bookmark! bookmark) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.HasBookmarkEditListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.HasBookmarkSelectListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.HeadingLevel.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.HeadingLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnBookmarkEdit.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkEditEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnBookmarkEdit.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnBookmarkSelect.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.BookmarkSelectEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnBookmarkSelect.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnJsBookmarkEdit(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnJsBookmarkSelect(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.RemoveFromBookmarks(params dymaptic.GeoBlazor.Core.Components.Bookmark![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetBookmarks(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Bookmark!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetDefaultCreateOptions(dymaptic.GeoBlazor.Core.Options.BookmarkOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetDefaultEditOptions(dymaptic.GeoBlazor.Core.Options.BookmarkOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetDragEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetFilterPlaceholder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetFilterText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetHeadingLevel(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.BookmarksViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.SetVisibleElements(dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.BookmarksViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements?
dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.CompassWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.CompassWidget(string? containerId = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.CompassViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.CompassViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.Reset() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.CompassViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.CompassViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.AddToUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.DistanceMeasurement2DWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.DistanceMeasurement2DWidget(string? containerId = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.SnappingOptions? snappingOptions = null, dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? unit = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>? unitOptions = null, dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.GetSnappingOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SnappingOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?>!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.GetUnitOptions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.RemoveFromUnitOptions(params dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.SetSnappingOptions(dymaptic.GeoBlazor.Core.Components.SnappingOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.SetUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.SetUnitOptions(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.SnappingOptions.get -> dymaptic.GeoBlazor.Core.Components.SnappingOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.SnappingOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.Unit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.UnitOptions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit>?
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.UnitOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.AutoCollapse.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.AutoCollapse.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.CloseOnEsc.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.CloseOnEsc.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.CollapseIcon.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.CollapseIcon.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.CollapseTooltip.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.CollapseTooltip.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.Expanded.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.Expanded.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.ExpandIcon.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.ExpandIcon.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.ExpandTooltip.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.ExpandTooltip.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.ExpandWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.HtmlContent.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.HtmlContent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.Mode.get -> dymaptic.GeoBlazor.Core.Enums.ExpandMode
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.Mode.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.WidgetContent.get -> dymaptic.GeoBlazor.Core.Components.Widgets.Widget?
dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.WidgetContent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.CancelGo() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.GetUiStrings() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HomeViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.GetViewpoint() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Viewpoint?>!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.Go() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.HasGoListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.HomeWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.HomeWidget(string? containerId = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, string? uiStrings = null, dymaptic.GeoBlazor.Core.Components.HomeViewModel? viewModel = null, dymaptic.GeoBlazor.Core.Components.Viewpoint? viewpoint = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.OnGo.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.HomeGoEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.OnGo.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.OnJsGo(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.SetUiStrings(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.HomeViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.SetViewpoint(dymaptic.GeoBlazor.Core.Components.Viewpoint? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.UiStrings.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.UiStrings.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.HomeViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Viewpoint?
dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.Viewpoint.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.AddToSelectedItems(params dymaptic.GeoBlazor.Core.Components.ListItem![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.CatalogLayerList.get -> dymaptic.GeoBlazor.Core.Interfaces.ICatalogLayerListWidget?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.CatalogLayerList.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.CatalogOptions.get -> dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.CatalogOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.Collapsed.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.Collapsed.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.DragEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.DragEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.FilterPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.FilterPlaceholder.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.FilterPredicate.get -> dymaptic.GeoBlazor.Core.Functions.LayerListFilterPredicate?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.FilterPredicate.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.FilterText.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.FilterText.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetCatalogLayerList() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.ICatalogLayerListWidget?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetCatalogOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetCollapsed() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetDragEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetFilterPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetFilterText() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetHeadingLevel() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetKnowledgeGraphOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetMinDragEnabledItems() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetMinFilterItems() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetOpenedLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetOperationalItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetSelectedItems() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetSelectionMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SelectionMode?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetTableList() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.ITableListWidget?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerListViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetVisibilityAppearance() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.GetVisibleElements() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.HasCustomHandler.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.HasFilterPredicate.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.HeadingLevel.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.HeadingLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.KnowledgeGraphOptions.get -> dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.KnowledgeGraphOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.LayerListWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.LayerListWidget(dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions? catalogOptions = null, bool? collapsed = null, bool? dragEnabled = null, string? filterPlaceholder = null, string? filterText = null, double? headingLevel = null, string? icon = null, dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions? knowledgeGraphOptions = null, string? label = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? listItemCreatedFunction = null, double? minDragEnabledItems = null, double? minFilterItems = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>? selectedItems = null, dymaptic.GeoBlazor.Core.Enums.SelectionMode? selectionMode = null, dymaptic.GeoBlazor.Core.Components.LayerListViewModel? viewModel = null, dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance? visibilityAppearance = null, dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements? visibleElements = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.MinDragEnabledItems.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.MinDragEnabledItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.MinFilterItems.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.MinFilterItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnJsFilterPredicate(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnJsTriggerAction(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task<object?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnListItemCreatedHandler.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnListItemCreatedHandler.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnTriggerAction.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OnTriggerAction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OpenedLayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OpenedLayers.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OperationalItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.OperationalItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.RemoveFromSelectedItems(params dymaptic.GeoBlazor.Core.Components.ListItem![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SelectedItems.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SelectedItems.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SelectionMode.get -> dymaptic.GeoBlazor.Core.Enums.SelectionMode?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SelectionMode.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetCatalogOptions(dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetCollapsed(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetDragEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetFilterPlaceholder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetFilterText(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetHeadingLevel(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetKnowledgeGraphOptions(dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetMinDragEnabledItems(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetMinFilterItems(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetSelectedItems(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ListItem!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetSelectionMode(dymaptic.GeoBlazor.Core.Enums.SelectionMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.LayerListViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetVisibilityAppearance(dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.SetVisibleElements(dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.TableList.get -> dymaptic.GeoBlazor.Core.Interfaces.ITableListWidget?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.TableList.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.TriggerAction(dymaptic.GeoBlazor.Core.Components.ActionBase! action, dymaptic.GeoBlazor.Core.Components.ListItem! item) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.LayerListViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.VisibilityAppearance.get -> dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.VisibilityAppearance.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.LayerListVisibleElements?
dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.ActiveLayerInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.ActiveLayerInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.AddToActiveLayerInfos(params dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.AddToLayerInfos(params dymaptic.GeoBlazor.Core.Components.LegendLayerInfos![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.BasemapLegendVisible.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.BasemapLegendVisible.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetActiveLayerInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetBasemapLegendVisible() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetHeadingLevel() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetHideLayersNotInCurrentView() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetLayerInfos() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendLayerInfos!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetLegendStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LegendStyle?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetRespectLayerDefinitionExpression() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetRespectLayerVisibility() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetStringStyle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LegendViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.HeadingLevel.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.HeadingLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.HideLayersNotInCurrentView.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.HideLayersNotInCurrentView.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.LayerInfos.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendLayerInfos!>?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.LayerInfos.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.LegendStyle.get -> dymaptic.GeoBlazor.Core.Components.LegendStyle?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.LegendStyle.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.LegendWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.LegendWidget(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>? activeLayerInfos = null, bool? basemapLegendVisible = null, string? containerId = null, double? headingLevel = null, bool? hideLayersNotInCurrentView = null, string? icon = null, string? label = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendLayerInfos!>? layerInfos = null, dymaptic.GeoBlazor.Core.Components.LegendStyle? legendStyle = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, bool? respectLayerDefinitionExpression = null, bool? respectLayerVisibility = null, string? stringStyle = null, dymaptic.GeoBlazor.Core.Components.LegendViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RemoveFromActiveLayerInfos(params dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RemoveFromLayerInfos(params dymaptic.GeoBlazor.Core.Components.LegendLayerInfos![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RespectLayerDefinitionExpression.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RespectLayerDefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RespectLayerVisibility.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RespectLayerVisibility.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetActiveLayerInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetBasemapLegendVisible(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetHeadingLevel(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetHideLayersNotInCurrentView(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetLayerInfos(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.LegendLayerInfos!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetLegendStyle(dymaptic.GeoBlazor.Core.Components.LegendStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetRespectLayerDefinitionExpression(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetRespectLayerVisibility(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetStringStyle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.LegendViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.StringStyle.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.StringStyle.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.Style.get -> dymaptic.GeoBlazor.Core.Components.LegendStyle?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.LegendViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Content.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!>!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Content.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Disabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Disabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.FlowEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.FlowEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.GetDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.GetFlowEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.GetImage() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.GetOpen() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Image.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Image.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.ListItem.get -> dymaptic.GeoBlazor.Core.Components.ListItem?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.ListItem.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.ListItemPanelWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.ListItemPanelWidget(string? containerId = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!>? content = null, bool? showLegendContent = null, bool? disabled = null, bool? flowEnabled = null, string? icon = null, string? image = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, bool? open = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, string? title = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Open.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Open.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.SetDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.SetFlowEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.SetImage(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.SetOpen(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.ShowLegendContent.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.ShowLegendContent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.CancelLocate() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GeolocationOptions.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GeolocationOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GetGeolocationOptions() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GetGoToLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GetGraphic() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GetScale() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LocateViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GoToLocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GoToLocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.Graphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.Graphic.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.HasLocateErrorListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.HasLocateListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.Locate() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.LocateWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.LocateWidget(string? containerId = null, string? geolocationOptions = null, bool? goToLocationEnabled = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, dymaptic.GeoBlazor.Core.Components.Graphic? graphic = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, int? scale = null, dymaptic.GeoBlazor.Core.Components.LocateViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnJsLocate(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnJsLocateError(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnLocate.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LocateEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnLocate.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnLocateError.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.LocateErrorEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.OnLocateError.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.RotationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.RotationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.Scale.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.Scale.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.SetGeolocationOptions(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.SetGoToLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.SetGraphic(dymaptic.GeoBlazor.Core.Components.Graphic? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.SetScale(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.LocateViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.LocateViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ActiveTool.get -> dymaptic.GeoBlazor.Core.Enums.ActiveTool?
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ActiveTool.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ActiveWidget.get -> dymaptic.GeoBlazor.Core.Interfaces.IMeasurementWidgetActiveWidget?
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ActiveWidget.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.AreaUnit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.AreaUnit.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.GetActiveTool() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ActiveTool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.GetActiveWidget() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IMeasurementWidgetActiveWidget?>!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.GetAreaUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit?>!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.GetLinearUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?>!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.MeasurementViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.LinearUnit.get -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit?
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.LinearUnit.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.MeasurementWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.MeasurementWidget(dymaptic.GeoBlazor.Core.Enums.ActiveTool? activeTool = null, dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? areaUnit = null, string? containerId = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? linearUnit = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.MeasurementViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.SetActiveTool(dymaptic.GeoBlazor.Core.Enums.ActiveTool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.SetAreaUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.SetLinearUnit(dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.MeasurementViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.StartMeasurement() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.MeasurementViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.MissingMapViewReferenceException
dymaptic.GeoBlazor.Core.Components.Widgets.MissingMapViewReferenceException.MissingMapViewReferenceException(string! message) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Actions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Actions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Active.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Active.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.AddToFeatures(params dymaptic.GeoBlazor.Core.Components.Graphic![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Alignment.get -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Alignment.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.AutoCloseEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.AutoCloseEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.AutoOpenEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.AutoOpenEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Blur() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Close() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Collapsed.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Collapsed.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.CollapseEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.CollapseEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.CurrentDockPosition.get -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.CurrentDockPosition.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.DefaultPopupTemplateEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.DefaultPopupTemplateEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.DockEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.DockEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.DockOptions.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.DockOptions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.FeatureCount.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.FeatureCount.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Features.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Features.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.FetchFeatures() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic![]?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Focus() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetActive() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetAlignment() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.PopupAlignment?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetAutoCloseEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetCollapsed() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetCurrentDockPosition() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetDefaultPopupTemplateEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetDockEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetDockOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetFeatureCount() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetFeatures() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetHeadingLevel() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetHighlightEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetHtmlContent() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.ElementReference?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetInitialDisplayMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetLocation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Point?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetPromises() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetSelectedDrillInFeature() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetSelectedFeature() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetSelectedFeatureIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetSelectedFeatureWidget() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IFeatureWidget?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetStringContent() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetVisibility() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetVisibleElements() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GetWidgetContent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Widgets.Widget?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HeadingLevel.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HeadingLevel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HighlightEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HighlightEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HtmlContent.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.HtmlContent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.InitialDisplayMode.get -> dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.InitialDisplayMode.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Location.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.MaxInlineActions.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.MaxInlineActions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Next() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.OnJsTriggerAction(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.OnTriggerAction.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.OnTriggerAction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Open(dymaptic.GeoBlazor.Core.Options.PopupOpenOptions! options) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.PopupWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.PopupWidget(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.ActionBase!>? actions = null, dymaptic.GeoBlazor.Core.Enums.PopupAlignment? alignment = null, bool? autoCloseEnabled = null, string? containerId = null, bool? defaultPopupTemplateEnabled = null, bool? dockEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions? dockOptions = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? features = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, int? headingLevel = null, bool? highlightEnabled = null, Microsoft.AspNetCore.Components.ElementReference? htmlContent = null, string? icon = null, dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode? initialDisplayMode = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? location = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, string? promises = null, int? selectedFeatureIndex = null, string? stringContent = null, string? title = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel? viewModel = null, bool? visible = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements? visibleElements = null, dymaptic.GeoBlazor.Core.Components.Widgets.Widget? widgetContent = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Previous() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Promises.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Promises.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.RemoveFromFeatures(params dymaptic.GeoBlazor.Core.Components.Graphic![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Reposition() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedDrillInFeature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedDrillInFeature.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedFeature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedFeature.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedFeatureIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedFeatureIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedFeatureWidget.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureWidget?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SelectedFeatureWidget.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetAlignment(dymaptic.GeoBlazor.Core.Enums.PopupAlignment? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetAutoCloseEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetContent(string! stringContent) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetDefaultPopupTemplateEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetDockEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetDockOptions(dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetFeatures(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetHeadingLevel(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetHighlightEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetHtmlContent(Microsoft.AspNetCore.Components.ElementReference? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetInitialDisplayMode(dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetLocation(dymaptic.GeoBlazor.Core.Components.Geometries.Point? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetPromises(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetSelectedClusterBoundaryFeatureSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! symbol) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetSelectedFeatureIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetStringContent(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetVisibleElements(dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SetWidgetContent(dymaptic.GeoBlazor.Core.Components.Widgets.Widget? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SpinnerEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.SpinnerEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.StringContent.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.StringContent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Title.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.TriggerAction(int actionIndex) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.WidgetContent.get -> dymaptic.GeoBlazor.Core.Components.Widgets.Widget?
dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.WidgetContent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.GetStyle() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.GetUnit() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ScaleUnit?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.ScaleBarWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.ScaleBarWidget(string? containerId = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle? style = null, dymaptic.GeoBlazor.Core.Enums.ScaleUnit? unit = null, dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.SetStyle(dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.SetUnit(dymaptic.GeoBlazor.Core.Enums.ScaleUnit? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.Style.get -> dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle?
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.Style.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.Unit.get -> dymaptic.GeoBlazor.Core.Enums.ScaleUnit?
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.Unit.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.ScaleBarViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ActiveMenu.get -> dymaptic.GeoBlazor.Core.Enums.SearchMenu?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ActiveMenu.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ActiveSource.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ActiveSource.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ActiveSourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ActiveSourceIndex.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AddToSources(params dymaptic.GeoBlazor.Core.Components.SearchSource![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AllPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AllPlaceholder.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AllSources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AllSources.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AutoSelect.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.AutoSelect.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Blur() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.DefaultSources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.DefaultSources.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Disabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Disabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Focus() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetActiveMenu() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SearchMenu?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetActiveSource() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SearchSource?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetActiveSourceIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetAllPlaceholder() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetAllSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetAutoSelect() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetDefaultSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetIncludeDefaultSources() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetMaxResults() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetMaxSuggestions() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetMinSuggestCharacters() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetPopupTemplate() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetPortal() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Portal?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetResultGraphic() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetResultGraphicEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetResults() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SearchResultResponse!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetSearchAllEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetSearchTerm() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetSelectedResult() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.SearchResult!>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetSources() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetSuggestions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetSuggestionsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SearchViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSearchBlurListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSearchClearListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSearchCompleteListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSearchFocusListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSearchStartListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSelectResultListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSuggestCompleteListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.HasSuggestStartListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.IncludeDefaultSources.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.IncludeDefaultSources.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.LocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.LocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.MaxResults.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.MaxResults.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.MaxSuggestions.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.MaxSuggestions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.MinSuggestCharacters.get -> int?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.MinSuggestCharacters.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSearchBlur(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSearchClear(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSearchComplete(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSearchFocus(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSearchStart(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSelectResult(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSuggestComplete(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnJsSuggestStart(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchBlur.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchBlurEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchBlur.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchClear.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchClearEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchClear.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchComplete.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchComplete.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchFocus.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchFocusEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchFocus.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchSelectResultEvent.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Results.SearchResult!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchSelectResultEvent.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchStart.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchStartEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSearchStart.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSelectResult.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSelectResult.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSuggestComplete.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSuggestComplete.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSuggestStart.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SearchSuggestStartEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.OnSuggestStart.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Portal.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.RemoveFromSources(params dymaptic.GeoBlazor.Core.Components.SearchSource![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ResultGraphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ResultGraphic.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ResultGraphicEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ResultGraphicEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Results.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SearchResultResponse!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Results.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Search(double[]![]! searchTerm) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchResponse!>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Search(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! searchTerm) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchResponse!>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Search(dymaptic.GeoBlazor.Core.Results.SuggestResult! searchTerm) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchResponse!>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Search(string! searchTerm) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SearchResponse!>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SearchAllEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SearchAllEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SearchTerm.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SearchWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SearchWidget(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>! sources, dymaptic.GeoBlazor.Core.Components.SearchViewModel! viewModel, dymaptic.GeoBlazor.Core.Enums.SearchMenu? activeMenu = null, int? activeSourceIndex = null, string? allPlaceholder = null, bool? autoSelect = null, string? containerId = null, bool? disabled = null, dymaptic.GeoBlazor.Core.Functions.GoToOverride? goToOverride = null, string? icon = null, bool? includeDefaultSources = null, string? label = null, bool? locationEnabled = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, int? maxResults = null, int? maxSuggestions = null, int? minSuggestCharacters = null, bool? popupEnabled = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? popupTemplate = null, dymaptic.GeoBlazor.Core.Components.Portal? portal = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, bool? resultGraphicEnabled = null, bool? searchAllEnabled = null, string? searchTerm = null, bool? suggestionsEnabled = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SelectedResult.get -> dymaptic.GeoBlazor.Core.Results.SearchResult?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SelectedResult.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetActiveMenu(dymaptic.GeoBlazor.Core.Enums.SearchMenu? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetActiveSourceIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetAllPlaceholder(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetAutoSelect(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetIncludeDefaultSources(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetMaxResults(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetMaxSuggestions(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetMinSuggestCharacters(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetPopupTemplate(dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetPortal(dymaptic.GeoBlazor.Core.Components.Portal? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetResultGraphicEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetSearchAllEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetSearchTerm(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetSources(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetSuggestionsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.SearchViewModel! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Sources.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.SearchSource!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Sources.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Suggest(string? value = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SuggestResponse!>!
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Suggestions.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Suggestions.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SuggestionsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.SuggestionsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.SearchViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.AddToTickConfigs(params dymaptic.GeoBlazor.Core.Components.TickConfig![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.AddToValues(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Disabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Disabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.DoubleCollectionSteps.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.DoubleCollectionSteps.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.DoubleSteps.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.DoubleSteps.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.DraggableSegmentsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.DraggableSegmentsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.EffectiveMax.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.EffectiveMax.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.EffectiveMin.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.EffectiveMin.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.EffectiveSegmentElements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.EffectiveSegmentElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetDisabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetDoubleCollectionSteps() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetDoubleSteps() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetDraggableSegmentsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetEffectiveMax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetEffectiveMin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetEffectiveSegmentElements() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetLabelElements() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetLabelInputsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetLabels() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.LabelInfos?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetLayout() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SliderLayout?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetMax() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetMaxLabelElement() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.ElementReference?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetMin() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetMinLabelElement() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.ElementReference?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetPrecision() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetRangeLabelInputsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetSegmentElements() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetSnapOnClickEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.SliderState?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetSyncedSegmentsEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetThumbElements() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetThumbsConstrained() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetTickConfigs() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TickConfig!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetTickElements() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.TickElementGroup!>!>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetTrackElement() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.ElementReference?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetValues() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SliderViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.GetVisibleElements() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SliderVisibleElements?>!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasInputCreatedFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasInputFormatFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasInputParseFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasLabelFormatFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasMaxChangeListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasMaxClickListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasMinChangeListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasMinClickListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasSegmentClickListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasSegmentDragListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasThumbChangeListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasThumbClickListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasThumbCreatedFunction.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasThumbDragListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasTickClickListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.HasTrackClickListener.get -> bool
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.InputCreatedFunction.get -> dymaptic.GeoBlazor.Core.Functions.InputCreatedFunction?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.InputCreatedFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.InputFormatFunction.get -> dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.InputFormatFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.InputParseFunction.get -> dymaptic.GeoBlazor.Core.Functions.InputParser?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.InputParseFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.LabelElements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.LabelElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.LabelFormatFunction.get -> dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.LabelFormatFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.LabelInputsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.LabelInputsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Labels.get -> dymaptic.GeoBlazor.Core.Model.LabelInfos?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Labels.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Layout.get -> dymaptic.GeoBlazor.Core.Enums.SliderLayout?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Layout.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Max.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Max.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.MaxLabelElement.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.MaxLabelElement.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Min.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Min.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.MinLabelElement.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.MinLabelElement.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsInputCreatedFunction(Microsoft.AspNetCore.Components.ElementReference inputElement, dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType type, int thumbIndex) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsMaxChange(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsMaxClick(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsMinChange(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsMinClick(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsSegmentClick(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsSegmentDrag(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsThumbChange(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsThumbClick(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsThumbCreatedFunction(int index, double value, Microsoft.AspNetCore.Components.ElementReference thumbElement, Microsoft.AspNetCore.Components.ElementReference labelElement) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsThumbDrag(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsTickClick(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsTrackClick(Microsoft.JSInterop.IJSStreamReference! jsStreamRef) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnJsValueChanged(double[]! newValues) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMaxChange.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMaxChange.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMaxClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderMaxClickEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMaxClick.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMinChange.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMinChange.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMinClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderMinClickEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnMinClick.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnSegmentClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnSegmentClick.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnSegmentDrag.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnSegmentDrag.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnThumbChange.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnThumbChange.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnThumbClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnThumbClick.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnThumbDrag.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnThumbDrag.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnTickClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnTickClick.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnTrackClick.get -> Microsoft.AspNetCore.Components.EventCallback<dymaptic.GeoBlazor.Core.Events.SliderTrackClickEvent!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.OnTrackClick.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Precision.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Precision.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.RangeLabelInputsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.RangeLabelInputsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.RemoveFromTickConfigs(params dymaptic.GeoBlazor.Core.Components.TickConfig![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.RemoveFromValues(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SegmentElements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SegmentElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetDisabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetDoubleCollectionSteps(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetDoubleSteps(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetDraggableSegmentsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetEffectiveMax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetEffectiveMin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetLabelInputsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetLayout(dymaptic.GeoBlazor.Core.Enums.SliderLayout? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetMax(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetMin(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetPrecision(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetRangeLabelInputsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetSnapOnClickEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetSyncedSegmentsEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetThumbsConstrained(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetTickConfigs(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TickConfig!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetValues(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.SliderViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SetVisibleElements(dymaptic.GeoBlazor.Core.Components.SliderVisibleElements? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SliderWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SliderWidget(string! containerId, bool? disabled = null, bool? draggableSegmentsEnabled = null, double? effectiveMax = null, double? effectiveMin = null, string? label = null, bool? labelInputsEnabled = null, dymaptic.GeoBlazor.Core.Enums.SliderLayout? layout = null, double? max = null, double? min = null, double? precision = null, bool? rangeLabelInputsEnabled = null, bool? snapOnClickEnabled = null, double[]? steps = null, bool? syncedSegmentsEnabled = null, bool? thumbsConstrained = null, System.Collections.Generic.IReadOnlyList<double>? values = null, dymaptic.GeoBlazor.Core.Functions.InputCreatedFunction? inputCreatedFunction = null, dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter? inputFormatFunction = null, dymaptic.GeoBlazor.Core.Functions.InputParser? inputParseFunction = null, dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter? labelFormatFunction = null, dymaptic.GeoBlazor.Core.Functions.ThumbCreatedFunction? thumbCreatedFunction = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TickConfig!>? tickConfigs = null, bool? visible = null, dymaptic.GeoBlazor.Core.Components.SliderVisibleElements? visibleElements = null, System.Collections.Generic.IReadOnlyList<double>? doubleCollectionSteps = null, double? doubleSteps = null, string? icon = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.SliderViewModel? viewModel = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SnapOnClickEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SnapOnClickEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.State.get -> dymaptic.GeoBlazor.Core.Enums.SliderState?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.State.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.StepInterval.get -> double?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.StepInterval.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Steps.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Steps.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SyncedSegmentsEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.SyncedSegmentsEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ThumbCreatedFunction.get -> dymaptic.GeoBlazor.Core.Functions.ThumbCreatedFunction?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ThumbCreatedFunction.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ThumbElements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ElementReference>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ThumbElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ThumbsConstrained.get -> bool?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ThumbsConstrained.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.TickConfigs.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TickConfig!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.TickConfigs.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.TickElements.get -> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.TickElementGroup!>!>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.TickElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.TrackElement.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.TrackElement.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ValueChanged.get -> Microsoft.AspNetCore.Components.EventCallback<double[]!>
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ValueChanged.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Values.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Values.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.SliderViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.SliderVisibleElements?
dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.ContainerId.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.ContainerId.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.GetContainerId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.GetIcon() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.GetLabel() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.GetPosition() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.OverlayPosition?>!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.GetWidgetId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Icon.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Icon.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.MapView.get -> dymaptic.GeoBlazor.Core.Components.Views.MapView?
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.MapView.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.OnWidgetCreated.get -> Microsoft.AspNetCore.Components.EventCallback
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.OnWidgetCreated.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Position.get -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition?
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Position.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.SetContainerId(string? containerId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.SetIcon(string? icon) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.SetLabel(string? label) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.SetPosition(dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.SetWidgetId(string? widgetId) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.UpdateWidget() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Widget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.WidgetId.get -> string?
dymaptic.GeoBlazor.Core.Components.Widgets.Widget.WidgetId.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.GetLayout() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.WidgetLayout?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.GetViewModel() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ZoomViewModel?>!
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.Layout.get -> dymaptic.GeoBlazor.Core.Enums.WidgetLayout?
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.Layout.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.SetLayout(dymaptic.GeoBlazor.Core.Enums.WidgetLayout? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.SetViewModel(dymaptic.GeoBlazor.Core.Components.ZoomViewModel? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ViewModel.get -> dymaptic.GeoBlazor.Core.Components.ZoomViewModel?
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ViewModel.set -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ZoomIn() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ZoomOut() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ZoomWidget() -> void
dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ZoomWidget(string? containerId = null, string? icon = null, string? label = null, dymaptic.GeoBlazor.Core.Enums.WidgetLayout? layout = null, dymaptic.GeoBlazor.Core.Components.Views.MapView? mapView = null, dymaptic.GeoBlazor.Core.Enums.OverlayPosition? position = null, dymaptic.GeoBlazor.Core.Components.ZoomViewModel? viewModel = null, bool? visible = null, string? widgetId = null) -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer
dymaptic.GeoBlazor.Core.Components.WMSSublayer.AddToSpatialReferences(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Description.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Dimensions.get -> System.Collections.Generic.IReadOnlyList<object!>?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Dimensions.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetDimensions() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<object!>?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetLegendUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetPopupEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetQueryable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetSpatialReferences() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<double>?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.GetWMSSublayerId() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.LegendUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.LegendUrl.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Name.get -> string?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Name.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.PopupEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.PopupEnabled.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Queryable.get -> bool?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Queryable.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.RemoveFromSpatialReferences(params double[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetLegendUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetPopupEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetQueryable(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetSpatialReferences(System.Collections.Generic.IReadOnlyList<double>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SetWMSSublayerId(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SpatialReferences.get -> System.Collections.Generic.IReadOnlyList<double>?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.SpatialReferences.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Sublayers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMSSublayer!>?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Sublayers.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.Title.set -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.WMSSublayer() -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.WMSSublayer(string? description = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, bool? legendEnabled = null, string? legendUrl = null, double? maxScale = null, double? minScale = null, string? name = null, bool? popupEnabled = null, bool? queryable = null, System.Collections.Generic.IReadOnlyList<double>? spatialReferences = null, string? title = null, bool? visible = null, long? wMSSublayerId = null) -> void
dymaptic.GeoBlazor.Core.Components.WMSSublayer.WMSSublayerId.get -> long?
dymaptic.GeoBlazor.Core.Components.WMSSublayer.WMSSublayerId.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSStyle
dymaptic.GeoBlazor.Core.Components.WMTSStyle.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSStyle.Description.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSStyle.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.GetLegendUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.GetWMTSStyleId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.LegendUrl.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSStyle.LegendUrl.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSStyle.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.SetLegendUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.SetWMTSStyleId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSStyle.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSStyle.Title.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSStyle.WMTSStyle() -> void
dymaptic.GeoBlazor.Core.Components.WMTSStyle.WMTSStyle(string? description = null, string? legendUrl = null, string? title = null, string? wMTSStyleId = null) -> void
dymaptic.GeoBlazor.Core.Components.WMTSStyle.WMTSStyleId.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSStyle.WMTSStyleId.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.AddToImageFormats(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.AddToStyles(params dymaptic.GeoBlazor.Core.Components.WMTSStyle![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.AddToTileMatrixSets(params dymaptic.GeoBlazor.Core.Components.TileMatrixSet![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.Description.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.Description.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetDescription() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetImageFormat() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetImageFormats() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetStyleId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetStyles() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSStyle!>?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetTileMatrixSet() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileMatrixSet?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetTileMatrixSetId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetTileMatrixSets() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TileMatrixSet!>?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.GetWMTSSublayerId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.ImageFormat.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.ImageFormat.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.ImageFormats.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.ImageFormats.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.RemoveFromImageFormats(params string![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.RemoveFromStyles(params dymaptic.GeoBlazor.Core.Components.WMTSStyle![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.RemoveFromTileMatrixSets(params dymaptic.GeoBlazor.Core.Components.TileMatrixSet![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetDescription(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetImageFormat(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetImageFormats(System.Collections.Generic.IReadOnlyList<string!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetStyleId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetStyles(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSStyle!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetTileMatrixSetId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetTileMatrixSets(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TileMatrixSet!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.SetWMTSSublayerId(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.StyleId.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.StyleId.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.Styles.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSStyle!>?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.Styles.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.TileMatrixSet.get -> dymaptic.GeoBlazor.Core.Components.TileMatrixSet?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.TileMatrixSet.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.TileMatrixSetId.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.TileMatrixSetId.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.TileMatrixSets.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TileMatrixSet!>?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.TileMatrixSets.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.Title.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.Title.set -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.WMTSSublayer() -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.WMTSSublayer(string? description = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? fullExtent = null, string? imageFormat = null, System.Collections.Generic.IReadOnlyList<string!>? imageFormats = null, string? styleId = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.WMTSStyle!>? styles = null, string? tileMatrixSetId = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.TileMatrixSet!>? tileMatrixSets = null, string? title = null, string? wMTSSublayerId = null) -> void
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.WMTSSublayerId.get -> string?
dymaptic.GeoBlazor.Core.Components.WMTSSublayer.WMTSSublayerId.set -> void
dymaptic.GeoBlazor.Core.Components.ZoomViewModel
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.CanZoomIn.get -> bool?
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.CanZoomIn.set -> void
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.CanZoomOut.get -> bool?
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.CanZoomOut.set -> void
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.GetCanZoomIn() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.GetCanZoomOut() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.GetState() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState?>!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.SetCanZoomIn(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.SetCanZoomOut(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.State.get -> dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState?
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.State.set -> void
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.ZoomIn() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.ZoomOut() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.ZoomViewModel() -> void
dymaptic.GeoBlazor.Core.Components.ZoomViewModel.ZoomViewModel(bool? canZoomIn = null, bool? canZoomOut = null) -> void
dymaptic.GeoBlazor.Core.DependencyExtension
dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Area = 10 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Circle = 4 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.DirectLine = 12 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Distance = 11 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Mesh = 5 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Move = 7 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Multipoint = 1 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Point = 0 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Polygon = 3 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Polyline = 2 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Rectangle = 6 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Reshape = 9 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.ActiveTool.Transform = 8 -> dymaptic.GeoBlazor.Core.Enums.ActiveTool
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType.Avg = 0 -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType.Count = 1 -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType.Max = 2 -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType.Min = 3 -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType.Mode = 4 -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType.Sum = 5 -> dymaptic.GeoBlazor.Core.Enums.AggregateStatisticType
dymaptic.GeoBlazor.Core.Enums.Algorithm
dymaptic.GeoBlazor.Core.Enums.Algorithm.CieLab = 0 -> dymaptic.GeoBlazor.Core.Enums.Algorithm
dymaptic.GeoBlazor.Core.Enums.Algorithm.Hsv = 2 -> dymaptic.GeoBlazor.Core.Enums.Algorithm
dymaptic.GeoBlazor.Core.Enums.Algorithm.LabLch = 1 -> dymaptic.GeoBlazor.Core.Enums.Algorithm
dymaptic.GeoBlazor.Core.Enums.AllowedWorkflows
dymaptic.GeoBlazor.Core.Enums.AllowedWorkflows.CreateFeatures = 0 -> dymaptic.GeoBlazor.Core.Enums.AllowedWorkflows
dymaptic.GeoBlazor.Core.Enums.AllowedWorkflows.Update = 1 -> dymaptic.GeoBlazor.Core.Enums.AllowedWorkflows
dymaptic.GeoBlazor.Core.Enums.AlphaMode
dymaptic.GeoBlazor.Core.Enums.AlphaMode.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.AlphaMode
dymaptic.GeoBlazor.Core.Enums.AlphaMode.Blend = 1 -> dymaptic.GeoBlazor.Core.Enums.AlphaMode
dymaptic.GeoBlazor.Core.Enums.AlphaMode.Mask = 3 -> dymaptic.GeoBlazor.Core.Enums.AlphaMode
dymaptic.GeoBlazor.Core.Enums.AlphaMode.Opaque = 2 -> dymaptic.GeoBlazor.Core.Enums.AlphaMode
dymaptic.GeoBlazor.Core.Enums.AngularUnit
dymaptic.GeoBlazor.Core.Enums.AngularUnit.Degrees = 0 -> dymaptic.GeoBlazor.Core.Enums.AngularUnit
dymaptic.GeoBlazor.Core.Enums.AngularUnit.Radians = 1 -> dymaptic.GeoBlazor.Core.Enums.AngularUnit
dymaptic.GeoBlazor.Core.Enums.ArcGISTheme
dymaptic.GeoBlazor.Core.Enums.ArcGISTheme.Dark = 1 -> dymaptic.GeoBlazor.Core.Enums.ArcGISTheme
dymaptic.GeoBlazor.Core.Enums.ArcGISTheme.Light = 0 -> dymaptic.GeoBlazor.Core.Enums.ArcGISTheme
dymaptic.GeoBlazor.Core.Enums.AttachmentsMode
dymaptic.GeoBlazor.Core.Enums.AttachmentsMode.Add = 1 -> dymaptic.GeoBlazor.Core.Enums.AttachmentsMode
dymaptic.GeoBlazor.Core.Enums.AttachmentsMode.Edit = 2 -> dymaptic.GeoBlazor.Core.Enums.AttachmentsMode
dymaptic.GeoBlazor.Core.Enums.AttachmentsMode.View = 0 -> dymaptic.GeoBlazor.Core.Enums.AttachmentsMode
dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType
dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType
dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType.List = 2 -> dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType
dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType.Preview = 1 -> dymaptic.GeoBlazor.Core.Enums.AttachmentsPopupContentDisplayType
dymaptic.GeoBlazor.Core.Enums.AuthMode
dymaptic.GeoBlazor.Core.Enums.AuthMode.Anonymous = 1 -> dymaptic.GeoBlazor.Core.Enums.AuthMode
dymaptic.GeoBlazor.Core.Enums.AuthMode.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.AuthMode
dymaptic.GeoBlazor.Core.Enums.AuthMode.Immediate = 2 -> dymaptic.GeoBlazor.Core.Enums.AuthMode
dymaptic.GeoBlazor.Core.Enums.AuthMode.NoPrompt = 3 -> dymaptic.GeoBlazor.Core.Enums.AuthMode
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme.FlowLine = 0 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme.WaveFront = 1 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoFlowTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle.Percent = 0 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle.PercentOfTotal = 1 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle.Ratio = 2 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableStyle
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.Above = 0 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.AboveAndBelow = 2 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.Below = 1 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.CenteredOn = 3 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.Extremes = 4 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.HighToLow = 5 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme.ReferenceSize = 6 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableTheme
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits.Days = 3 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits.Hours = 2 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits.Minutes = 1 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits.Months = 4 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits.Seconds = 0 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits.Years = 5 -> dymaptic.GeoBlazor.Core.Enums.AuthoringInfoVisualVariableUnits
dymaptic.GeoBlazor.Core.Enums.Axis
dymaptic.GeoBlazor.Core.Enums.Axis.Heading = 0 -> dymaptic.GeoBlazor.Core.Enums.Axis
dymaptic.GeoBlazor.Core.Enums.Axis.Roll = 2 -> dymaptic.GeoBlazor.Core.Enums.Axis
dymaptic.GeoBlazor.Core.Enums.Axis.Tilt = 1 -> dymaptic.GeoBlazor.Core.Enums.Axis
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState.Error = 2 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState.Loading = 0 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState.Ready = 1 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryItemState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState.Disabled = 1 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState.Loading = 2 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState.Ready = 0 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState
dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState.Unsupported = 3 -> dymaptic.GeoBlazor.Core.Enums.BasemapGalleryViewModelState
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisChartedTerritory = 24 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisChartedTerritoryBase = 25 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisColoredPencil = 26 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisCommunity = 23 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisDarkGray = 6 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisDarkGrayBase = 7 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisDarkGrayLabels = 8 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHillshadeDark = 33 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHillshadeLight = 32 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeography = 34 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyBase = 35 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyDark = 38 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyDarkBase = 39 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyDarkDetail = 40 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyDarkLabels = 41 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyDetail = 36 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisHumanGeographyLabels = 37 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisImagery = 0 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisImageryLabels = 2 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisImageryStandard = 1 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisLightGray = 3 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisLightGrayBase = 4 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisLightGrayLabels = 5 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisMidcentury = 30 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisModernAntique = 28 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisModernAntiqueBase = 29 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisNavigation = 9 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisNavigationNight = 10 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisNewspaper = 31 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisNova = 27 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisOceans = 17 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisOceansBase = 18 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisOceansLabels = 19 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisOutdoor = 42 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisStreets = 11 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisStreetsNight = 12 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisStreetsRelief = 13 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisStreetsReliefBase = 14 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisTerrain = 20 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisTerrainBase = 21 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisTerrainDetail = 22 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisTopographic = 15 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.ArcgisTopographicBase = 16 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmBlueprint = 55 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmDarkGray = 52 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmDarkGrayBase = 53 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmDarkGrayLabels = 54 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmHybrid = 56 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmHybridDetail = 57 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmLightGray = 49 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmLightGrayBase = 50 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmLightGrayLabels = 51 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmNavigation = 58 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmNavigationDark = 59 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmStandard = 43 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmStandardRelief = 44 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmStandardReliefBase = 45 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmStreets = 46 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmStreetsRelief = 47 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStyleName.OsmStreetsReliefBase = 48 -> dymaptic.GeoBlazor.Core.Enums.BasemapStyleName
dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace
dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace.All = 0 -> dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace
dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace.Attributed = 1 -> dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace
dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace.None = 2 -> dymaptic.GeoBlazor.Core.Enums.BasemapStylePlace
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.And = 0 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Between = 6 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.DividedBy = 19 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.EqualTo = 15 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.GreaterThan = 12 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.GreaterThanOrEqualTo = 13 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.In = 4 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Is = 2 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.IsNot = 3 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.LessThan = 11 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.LessThanOrEqualTo = 14 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Like = 8 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Minus = 17 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.NotBetween = 7 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.NotEqualTo = 10 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.NotIn = 5 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.NotLike = 9 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Or = 1 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Plus = 18 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator.Times = 16 -> dymaptic.GeoBlazor.Core.Enums.BinaryNodeOperator
dymaptic.GeoBlazor.Core.Enums.BingImageryStyle
dymaptic.GeoBlazor.Core.Enums.BingImageryStyle.Aerial = 1 -> dymaptic.GeoBlazor.Core.Enums.BingImageryStyle
dymaptic.GeoBlazor.Core.Enums.BingImageryStyle.Hybrid = 2 -> dymaptic.GeoBlazor.Core.Enums.BingImageryStyle
dymaptic.GeoBlazor.Core.Enums.BingImageryStyle.Road = 0 -> dymaptic.GeoBlazor.Core.Enums.BingImageryStyle
dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Average = 0 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Color = 3 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.ColorBurn = 1 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.ColorDodge = 2 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Darken = 4 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.DestinationAtop = 5 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.DestinationIn = 6 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.DestinationOut = 7 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.DestinationOver = 8 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Difference = 9 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Exclusion = 10 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.HardLight = 11 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Hue = 12 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Invert = 13 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Lighten = 14 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Lighter = 15 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Luminosity = 16 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Minus = 17 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Multiply = 18 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Normal = 19 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Overlay = 20 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Plus = 21 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Reflect = 22 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Saturation = 23 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Screen = 24 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.SoftLight = 25 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.SourceAtop = 26 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.SourceIn = 27 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.SourceOut = 28 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.VividLight = 29 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.BlendMode.Xor = 30 -> dymaptic.GeoBlazor.Core.Enums.BlendMode
dymaptic.GeoBlazor.Core.Enums.Cap
dymaptic.GeoBlazor.Core.Enums.Cap.Butt = 0 -> dymaptic.GeoBlazor.Core.Enums.Cap
dymaptic.GeoBlazor.Core.Enums.Cap.Round = 1 -> dymaptic.GeoBlazor.Core.Enums.Cap
dymaptic.GeoBlazor.Core.Enums.Cap.Square = 2 -> dymaptic.GeoBlazor.Core.Enums.Cap
dymaptic.GeoBlazor.Core.Enums.Cardinality
dymaptic.GeoBlazor.Core.Enums.Cardinality.ManyToMany = 2 -> dymaptic.GeoBlazor.Core.Enums.Cardinality
dymaptic.GeoBlazor.Core.Enums.Cardinality.OneToMany = 1 -> dymaptic.GeoBlazor.Core.Enums.Cardinality
dymaptic.GeoBlazor.Core.Enums.Cardinality.OneToOne = 0 -> dymaptic.GeoBlazor.Core.Enums.Cardinality
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod.DefinedInterval = 1 -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod.EqualInterval = 0 -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod.Manual = 2 -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod.NaturalBreaks = 3 -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod.Quantile = 4 -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ClassificationMethod.StandardDeviation = 5 -> dymaptic.GeoBlazor.Core.Enums.ClassificationMethod
dymaptic.GeoBlazor.Core.Enums.ColorRampType
dymaptic.GeoBlazor.Core.Enums.ColorRampType.Algorithmic = 0 -> dymaptic.GeoBlazor.Core.Enums.ColorRampType
dymaptic.GeoBlazor.Core.Enums.ColorRampType.Multipart = 1 -> dymaptic.GeoBlazor.Core.Enums.ColorRampType
dymaptic.GeoBlazor.Core.Enums.CompassViewModelState
dymaptic.GeoBlazor.Core.Enums.CompassViewModelState.Compass = 0 -> dymaptic.GeoBlazor.Core.Enums.CompassViewModelState
dymaptic.GeoBlazor.Core.Enums.CompassViewModelState.Disabled = 2 -> dymaptic.GeoBlazor.Core.Enums.CompassViewModelState
dymaptic.GeoBlazor.Core.Enums.CompassViewModelState.Rotation = 1 -> dymaptic.GeoBlazor.Core.Enums.CompassViewModelState
dymaptic.GeoBlazor.Core.Enums.ConnectionStatus
dymaptic.GeoBlazor.Core.Enums.ConnectionStatus.Connected = 0 -> dymaptic.GeoBlazor.Core.Enums.ConnectionStatus
dymaptic.GeoBlazor.Core.Enums.ConnectionStatus.Disconnected = 1 -> dymaptic.GeoBlazor.Core.Enums.ConnectionStatus
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.OnePointOnePointOne = 7 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.OnePointOnePointTwo = 8 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.OnePointOnePointZero = 6 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.OnePointZeroPointZero = 5 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.One_0_0 = 0 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.One_1_0 = 1 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.One_1_1 = 2 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.One_1_2 = 3 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.TwoPointZeroPointOne = 9 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion.Two_0_1 = 4 -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion
dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode
dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode.Click = 2 -> dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode
dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode.Freehand = 1 -> dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode
dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode.Hybrid = 0 -> dymaptic.GeoBlazor.Core.Enums.CreateOptionsMode
dymaptic.GeoBlazor.Core.Enums.CSVDelimiter
dymaptic.GeoBlazor.Core.Enums.CSVDelimiter.Comma = 0 -> dymaptic.GeoBlazor.Core.Enums.CSVDelimiter
dymaptic.GeoBlazor.Core.Enums.CSVDelimiter.Pipe = 3 -> dymaptic.GeoBlazor.Core.Enums.CSVDelimiter
dymaptic.GeoBlazor.Core.Enums.CSVDelimiter.Semicolon = 2 -> dymaptic.GeoBlazor.Core.Enums.CSVDelimiter
dymaptic.GeoBlazor.Core.Enums.CSVDelimiter.Space = 1 -> dymaptic.GeoBlazor.Core.Enums.CSVDelimiter
dymaptic.GeoBlazor.Core.Enums.CSVDelimiter.TabDelimited = 4 -> dymaptic.GeoBlazor.Core.Enums.CSVDelimiter
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.BottomCenter = 5 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.BottomLeft = 4 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.BottomRight = 6 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.TopCenter = 1 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.TopLeft = 3 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition.TopRight = 2 -> dymaptic.GeoBlazor.Core.Enums.CurrentDockPosition
dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.DayShortMonthYear = 15 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.DayShortMonthYearLongTime = 18 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.DayShortMonthYearLongTime24 = 19 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.DayShortMonthYearShortTime = 16 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.DayShortMonthYearShortTime24 = 17 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongDate = 20 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongDateLongTime = 23 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongDateLongTime24 = 24 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongDateShortTime = 21 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongDateShortTime24 = 22 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongMonthDayYear = 10 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongMonthDayYearLongTime = 13 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongMonthDayYearLongTime24 = 14 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongMonthDayYearShortTime = 11 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongMonthDayYearShortTime24 = 12 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.LongMonthYear = 25 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDate = 0 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLe = 5 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLeLongTime = 8 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLeLongTime24 = 9 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLeShortTime = 6 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLeShortTime24 = 7 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLongTime = 3 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateLongTime24 = 4 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateShortTime = 1 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortDateShortTime24 = 2 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.ShortMonthYear = 26 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateFormat.Year = 27 -> dymaptic.GeoBlazor.Core.Enums.DateFormat
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterLayout
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterLayout.Compact = 0 -> dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterLayout
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterLayout.Wide = 1 -> dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterLayout
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType.Extent = 2 -> dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType.Max = 1 -> dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType.Min = 0 -> dymaptic.GeoBlazor.Core.Enums.DateLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy
dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy.None = 0 -> dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy
dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy.Static = 1 -> dymaptic.GeoBlazor.Core.Enums.DeconflictionStrategy
dymaptic.GeoBlazor.Core.Enums.Direction
dymaptic.GeoBlazor.Core.Enums.Direction.Asc = 0 -> dymaptic.GeoBlazor.Core.Enums.Direction
dymaptic.GeoBlazor.Core.Enums.Direction.Desc = 1 -> dymaptic.GeoBlazor.Core.Enums.Direction
dymaptic.GeoBlazor.Core.Enums.DirectionMode
dymaptic.GeoBlazor.Core.Enums.DirectionMode.Absolute = 1 -> dymaptic.GeoBlazor.Core.Enums.DirectionMode
dymaptic.GeoBlazor.Core.Enums.DirectionMode.Relative = 0 -> dymaptic.GeoBlazor.Core.Enums.DirectionMode
dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode
dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode.Manual = 0 -> dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode
dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode.Scale = 1 -> dymaptic.GeoBlazor.Core.Enums.DisplayFilterInfoMode
dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Enums.DragAction.Added = 1 -> dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Enums.DragAction.End = 4 -> dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Enums.DragAction.Removed = 3 -> dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Enums.DragAction.Start = 0 -> dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Enums.DragAction.Update = 2 -> dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Arrow = 9 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.AutoCompletePolygon = 0 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Circle = 1 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.DownArrow = 14 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Ellipse = 2 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Freehand = 3 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.LeftArrow = 11 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Line = 4 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.None = 5 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Point = 6 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Polygon = 7 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Rectangle = 8 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.RightArrow = 12 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.Triangle = 10 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawingTool.UpArrow = 13 -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
dymaptic.GeoBlazor.Core.Enums.DrawMode
dymaptic.GeoBlazor.Core.Enums.DrawMode.Click = 2 -> dymaptic.GeoBlazor.Core.Enums.DrawMode
dymaptic.GeoBlazor.Core.Enums.DrawMode.Freehand = 1 -> dymaptic.GeoBlazor.Core.Enums.DrawMode
dymaptic.GeoBlazor.Core.Enums.DrawMode.Hybrid = 0 -> dymaptic.GeoBlazor.Core.Enums.DrawMode
dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType.JoinTable = 0 -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType.QueryTable = 1 -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType.Raster = 2 -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType.Table = 3 -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
dymaptic.GeoBlazor.Core.Enums.DynamicJoinType
dymaptic.GeoBlazor.Core.Enums.DynamicJoinType.LeftInnerJoin = 1 -> dymaptic.GeoBlazor.Core.Enums.DynamicJoinType
dymaptic.GeoBlazor.Core.Enums.DynamicJoinType.LeftOuterJoin = 0 -> dymaptic.GeoBlazor.Core.Enums.DynamicJoinType
dymaptic.GeoBlazor.Core.Enums.EdgeOperation
dymaptic.GeoBlazor.Core.Enums.EdgeOperation.None = 0 -> dymaptic.GeoBlazor.Core.Enums.EdgeOperation
dymaptic.GeoBlazor.Core.Enums.EdgeOperation.Offset = 2 -> dymaptic.GeoBlazor.Core.Enums.EdgeOperation
dymaptic.GeoBlazor.Core.Enums.EdgeOperation.Split = 1 -> dymaptic.GeoBlazor.Core.Enums.EdgeOperation
dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode
dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode.AbsoluteHeight = 2 -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode
dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode.OnTheGround = 0 -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode
dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode.RelativeToGround = 1 -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode
dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode.RelativeToScene = 3 -> dymaptic.GeoBlazor.Core.Enums.ElevationInfoMode
dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Centimeters = 3 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.DecimalDegrees = 0 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Decimeters = 4 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Feet = 8 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Inches = 7 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Kilometers = 6 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Meters = 5 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Miles = 10 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Millimeters = 2 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.NauticalMiles = 11 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Unknown = 1 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.UsFeet = 12 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ElevationUnit.Yards = 9 -> dymaptic.GeoBlazor.Core.Enums.ElevationUnit
dymaptic.GeoBlazor.Core.Enums.ExpandMode
dymaptic.GeoBlazor.Core.Enums.ExpandMode.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.ExpandMode
dymaptic.GeoBlazor.Core.Enums.ExpandMode.Drawer = 2 -> dymaptic.GeoBlazor.Core.Enums.ExpandMode
dymaptic.GeoBlazor.Core.Enums.ExpandMode.Floating = 1 -> dymaptic.GeoBlazor.Core.Enums.ExpandMode
dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType.Boolean = 2 -> dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType.Number = 1 -> dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType.String = 0 -> dymaptic.GeoBlazor.Core.Enums.ExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType.Mesh = 5 -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType.Multipatch = 4 -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType.Multipoint = 1 -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType.Point = 0 -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType.Polygon = 3 -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType.Polyline = 2 -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType
dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat
dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat.Text_Html = 0 -> dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat
dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat.Text_Plain = 1 -> dymaptic.GeoBlazor.Core.Enums.FeatureInfoFormat
dymaptic.GeoBlazor.Core.Enums.FieldInputType
dymaptic.GeoBlazor.Core.Enums.FieldInputType.TextArea = 1 -> dymaptic.GeoBlazor.Core.Enums.FieldInputType
dymaptic.GeoBlazor.Core.Enums.FieldInputType.TextBox = 0 -> dymaptic.GeoBlazor.Core.Enums.FieldInputType
dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.BigInteger = 14 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Blob = 9 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Date = 6 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.DateOnly = 15 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Double = 3 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Geometry = 8 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.GlobalId = 12 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Guid = 11 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Integer = 1 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Long = 4 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Oid = 7 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Raster = 10 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Single = 2 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.SmallInteger = 0 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.String = 5 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.TimeOnly = 16 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.TimestampOffset = 17 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldType.Xml = 13 -> dymaptic.GeoBlazor.Core.Enums.FieldType
dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.Binary = 0 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.Coordinate = 1 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.CountOrAmount = 2 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.DateAndTime = 3 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.Description = 4 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.LocationOrPlaceName = 5 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.Measurement = 6 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.NameOrTitle = 7 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.None = 8 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.OrderedOrRanked = 9 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.PercentageOrRatio = 10 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.TypeOrCategory = 11 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FieldValueType.UniqueIdentifier = 12 -> dymaptic.GeoBlazor.Core.Enums.FieldValueType
dymaptic.GeoBlazor.Core.Enums.FilterScope
dymaptic.GeoBlazor.Core.Enums.FilterScope.Edges = 1 -> dymaptic.GeoBlazor.Core.Enums.FilterScope
dymaptic.GeoBlazor.Core.Enums.FilterScope.Junctions = 0 -> dymaptic.GeoBlazor.Core.Enums.FilterScope
dymaptic.GeoBlazor.Core.Enums.FilterScope.JunctionsAndEdges = 2 -> dymaptic.GeoBlazor.Core.Enums.FilterScope
dymaptic.GeoBlazor.Core.Enums.FontWeight
dymaptic.GeoBlazor.Core.Enums.FontWeight.Bold = 1 -> dymaptic.GeoBlazor.Core.Enums.FontWeight
dymaptic.GeoBlazor.Core.Enums.FontWeight.Bolder = 2 -> dymaptic.GeoBlazor.Core.Enums.FontWeight
dymaptic.GeoBlazor.Core.Enums.FontWeight.Lighter = 3 -> dymaptic.GeoBlazor.Core.Enums.FontWeight
dymaptic.GeoBlazor.Core.Enums.FontWeight.Normal = 0 -> dymaptic.GeoBlazor.Core.Enums.FontWeight
dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.FunctionType.Add = 0 -> dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.FunctionType.Average = 2 -> dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.FunctionType.Count = 3 -> dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.FunctionType.Max = 5 -> dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.FunctionType.Min = 4 -> dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.FunctionType.Subtract = 1 -> dymaptic.GeoBlazor.Core.Enums.FunctionType
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.Acres = 0 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.Ares = 1 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.Hectares = 2 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.SquareFeet = 3 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.SquareKilometers = 6 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.SquareMeters = 4 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.SquareMiles = 7 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit.SquareYards = 5 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineAreaUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit.Feet = 1 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit.Kilometers = 2 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit.Meters = 0 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit.Miles = 3 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit.NauticalMiles = 4 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit.Yards = 5 -> dymaptic.GeoBlazor.Core.Enums.GeometryEngineLinearUnit
dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.GeometryType.Extent = 4 -> dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.GeometryType.Mesh = 5 -> dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.GeometryType.Multipoint = 1 -> dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.GeometryType.Point = 0 -> dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.GeometryType.Polygon = 3 -> dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.GeometryType.Polyline = 2 -> dymaptic.GeoBlazor.Core.Enums.GeometryType
dymaptic.GeoBlazor.Core.Enums.HeightModel
dymaptic.GeoBlazor.Core.Enums.HeightModel.Ellipsoidal = 1 -> dymaptic.GeoBlazor.Core.Enums.HeightModel
dymaptic.GeoBlazor.Core.Enums.HeightModel.GravityRelatedHeight = 0 -> dymaptic.GeoBlazor.Core.Enums.HeightModel
dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.Benoit1895BChains = 9 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.ClarkeFeet = 3 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.ClarkeLinks = 5 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.ClarkeYards = 4 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.Feet = 1 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.FiftyKilometers = 14 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.GoldCoastFeet = 12 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.Indian1937Yards = 11 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.IndianYards = 10 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.Meters = 0 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.OneHundredFiftyKilometers = 15 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.Sears1922TruncatedChains = 13 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.SearsChains = 8 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.SearsFeet = 7 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.SearsYards = 6 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HeightUnit.UsFeet = 2 -> dymaptic.GeoBlazor.Core.Enums.HeightUnit
dymaptic.GeoBlazor.Core.Enums.HomeViewModelState
dymaptic.GeoBlazor.Core.Enums.HomeViewModelState.Disabled = 0 -> dymaptic.GeoBlazor.Core.Enums.HomeViewModelState
dymaptic.GeoBlazor.Core.Enums.HomeViewModelState.GoingHome = 2 -> dymaptic.GeoBlazor.Core.Enums.HomeViewModelState
dymaptic.GeoBlazor.Core.Enums.HomeViewModelState.Ready = 1 -> dymaptic.GeoBlazor.Core.Enums.HomeViewModelState
dymaptic.GeoBlazor.Core.Enums.Horizontal
dymaptic.GeoBlazor.Core.Enums.Horizontal.Clamp = 0 -> dymaptic.GeoBlazor.Core.Enums.Horizontal
dymaptic.GeoBlazor.Core.Enums.Horizontal.Mirror = 2 -> dymaptic.GeoBlazor.Core.Enums.Horizontal
dymaptic.GeoBlazor.Core.Enums.Horizontal.Repeat = 1 -> dymaptic.GeoBlazor.Core.Enums.Horizontal
dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment
dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment.Center = 2 -> dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment
dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment.Left = 0 -> dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment
dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment.Right = 1 -> dymaptic.GeoBlazor.Core.Enums.HorizontalAlignment
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.BigInteger = 2 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Blob = 13 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Date = 7 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.DateOnly = 8 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Double = 4 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Geometry = 12 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.GlobalId = 16 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Guid = 15 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Integer = 1 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Long = 5 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Oid = 11 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Raster = 14 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Single = 3 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.SmallInteger = 0 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.String = 6 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.TimeOnly = 9 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.TimestampOffset = 10 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes.Xml = 17 -> dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.Acres = 10 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.Ares = 11 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.Hectares = 12 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareCentimeters = 1 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareDecimeters = 2 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareFeet = 6 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareInches = 5 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareKilometers = 4 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareMeters = 3 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareMiles = 8 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareMillimeters = 0 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareUsFeet = 9 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit.SquareYards = 7 -> dymaptic.GeoBlazor.Core.Enums.ImageAreaUnit
dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Bip = 10 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Bmp = 5 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Bsq = 11 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Gif = 6 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Jpg = 4 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Jpgpng = 7 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Lerc = 8 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Png = 0 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Png24 = 2 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Png32 = 3 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Png8 = 1 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageFormat.Tiff = 9 -> dymaptic.GeoBlazor.Core.Enums.ImageFormat
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.ClassBreaks = 0 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.Flow = 1 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.RasterColormap = 2 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.RasterShadedRelief = 3 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.RasterStretch = 4 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.UniqueValue = 5 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.ImageryRendererType.VectorField = 6 -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode
dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode.Feature = 1 -> dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode
dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode.List = 0 -> dymaptic.GeoBlazor.Core.Enums.InitialDisplayMode
dymaptic.GeoBlazor.Core.Enums.InitialState
dymaptic.GeoBlazor.Core.Enums.InitialState.Collapsed = 0 -> dymaptic.GeoBlazor.Core.Enums.InitialState
dymaptic.GeoBlazor.Core.Enums.InitialState.Expanded = 1 -> dymaptic.GeoBlazor.Core.Enums.InitialState
dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType
dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType.Max = 0 -> dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType
dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType.Min = 1 -> dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType
dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType.Thumb = 2 -> dymaptic.GeoBlazor.Core.Enums.InputCreatedFunctionType
dymaptic.GeoBlazor.Core.Enums.InputParserType
dymaptic.GeoBlazor.Core.Enums.InputParserType.Average = 0 -> dymaptic.GeoBlazor.Core.Enums.InputParserType
dymaptic.GeoBlazor.Core.Enums.InputParserType.Max = 2 -> dymaptic.GeoBlazor.Core.Enums.InputParserType
dymaptic.GeoBlazor.Core.Enums.InputParserType.Min = 1 -> dymaptic.GeoBlazor.Core.Enums.InputParserType
dymaptic.GeoBlazor.Core.Enums.InputParserType.Tick = 3 -> dymaptic.GeoBlazor.Core.Enums.InputParserType
dymaptic.GeoBlazor.Core.Enums.InputParserType.Value = 4 -> dymaptic.GeoBlazor.Core.Enums.InputParserType
dymaptic.GeoBlazor.Core.Enums.Interpolation
dymaptic.GeoBlazor.Core.Enums.Interpolation.Bilinear = 1 -> dymaptic.GeoBlazor.Core.Enums.Interpolation
dymaptic.GeoBlazor.Core.Enums.Interpolation.Cubic = 2 -> dymaptic.GeoBlazor.Core.Enums.Interpolation
dymaptic.GeoBlazor.Core.Enums.Interpolation.Majority = 3 -> dymaptic.GeoBlazor.Core.Enums.Interpolation
dymaptic.GeoBlazor.Core.Enums.Interpolation.Nearest = 0 -> dymaptic.GeoBlazor.Core.Enums.Interpolation
dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign
dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign.Negative = 1 -> dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign
dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign.NoSign = 2 -> dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign
dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign.Positive = 0 -> dymaptic.GeoBlazor.Core.Enums.IntervalNodeSign
dymaptic.GeoBlazor.Core.Enums.ItemControl
dymaptic.GeoBlazor.Core.Enums.ItemControl.Admin = 0 -> dymaptic.GeoBlazor.Core.Enums.ItemControl
dymaptic.GeoBlazor.Core.Enums.ItemControl.Null = 2 -> dymaptic.GeoBlazor.Core.Enums.ItemControl
dymaptic.GeoBlazor.Core.Enums.ItemControl.Update = 1 -> dymaptic.GeoBlazor.Core.Enums.ItemControl
dymaptic.GeoBlazor.Core.Enums.Join
dymaptic.GeoBlazor.Core.Enums.Join.Bevel = 2 -> dymaptic.GeoBlazor.Core.Enums.Join
dymaptic.GeoBlazor.Core.Enums.Join.Miter = 0 -> dymaptic.GeoBlazor.Core.Enums.Join
dymaptic.GeoBlazor.Core.Enums.Join.Round = 1 -> dymaptic.GeoBlazor.Core.Enums.Join
dymaptic.GeoBlazor.Core.Enums.JoinType
dymaptic.GeoBlazor.Core.Enums.JoinType.Bevel = 1 -> dymaptic.GeoBlazor.Core.Enums.JoinType
dymaptic.GeoBlazor.Core.Enums.JoinType.Miter = 2 -> dymaptic.GeoBlazor.Core.Enums.JoinType
dymaptic.GeoBlazor.Core.Enums.JoinType.Round = 0 -> dymaptic.GeoBlazor.Core.Enums.JoinType
dymaptic.GeoBlazor.Core.Enums.JoinType.Square = 3 -> dymaptic.GeoBlazor.Core.Enums.JoinType
dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveAfter = 9 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveAlong = 10 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveBefore = 11 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveCenter = 0 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveEnd = 13 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveLeft = 1 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveRight = 2 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AboveStart = 12 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.AlwaysHorizontal = 24 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowAfter = 14 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowAlong = 15 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowBefore = 16 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowCenter = 3 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowEnd = 18 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowLeft = 4 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowRight = 5 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.BelowStart = 17 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterAfter = 19 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterAlong = 20 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterBefore = 21 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterCenter = 6 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterEnd = 23 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterLeft = 7 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterRight = 8 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.CenterStart = 22 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPlacement.Dynamic = 25 -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
dymaptic.GeoBlazor.Core.Enums.LabelPosition
dymaptic.GeoBlazor.Core.Enums.LabelPosition.Curved = 0 -> dymaptic.GeoBlazor.Core.Enums.LabelPosition
dymaptic.GeoBlazor.Core.Enums.LabelPosition.Parallel = 1 -> dymaptic.GeoBlazor.Core.Enums.LabelPosition
dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.BaseDynamic = 0 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.BaseElevation = 1 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.BaseTile = 2 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.BingMaps = 3 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.BuildingScene = 4 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Catalog = 7 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.CatalogDynamicGroup = 5 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.CatalogFootprint = 6 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.CSV = 8 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Dimension = 9 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Elevation = 10 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Feature = 11 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.GeoJSON = 12 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.GeoRSS = 13 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Graphics = 14 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Group = 15 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Imagery = 16 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.ImageryTile = 17 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.IntegratedMesh = 19 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.IntegratedMesh3DTiles = 18 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.KML = 20 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.KnowledgeGraph = 22 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.KnowledgeGraphSub = 21 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.LineOfSight = 23 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.MapImage = 24 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.MapNotes = 25 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Media = 26 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.OGCFeature = 27 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.OpenStreetMap = 28 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.OrientedImagery = 29 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.PointCloud = 30 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.ProGeoJSON = 31 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Route = 32 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Scene = 33 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Stream = 34 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.SubtypeGroup = 35 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Tile = 36 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Unknown = 37 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Unsupported = 38 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.VectorTile = 39 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Video = 40 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.Voxel = 41 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.WCS = 42 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.WebTile = 43 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.WFS = 44 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.WMS = 45 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LayerType.WMTS = 46 -> dymaptic.GeoBlazor.Core.Enums.LayerType
dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout
dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout
dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout.SideBySide = 1 -> dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout
dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout.Stack = 2 -> dymaptic.GeoBlazor.Core.Enums.LegendStyleLayout
dymaptic.GeoBlazor.Core.Enums.LegendStyleType
dymaptic.GeoBlazor.Core.Enums.LegendStyleType.Card = 0 -> dymaptic.GeoBlazor.Core.Enums.LegendStyleType
dymaptic.GeoBlazor.Core.Enums.LegendStyleType.Classic = 1 -> dymaptic.GeoBlazor.Core.Enums.LegendStyleType
dymaptic.GeoBlazor.Core.Enums.LegendViewModelState
dymaptic.GeoBlazor.Core.Enums.LegendViewModelState.Disabled = 1 -> dymaptic.GeoBlazor.Core.Enums.LegendViewModelState
dymaptic.GeoBlazor.Core.Enums.LegendViewModelState.Ready = 0 -> dymaptic.GeoBlazor.Core.Enums.LegendViewModelState
dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Centimeters = 1 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Decimeters = 2 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Feet = 6 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Inches = 5 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Kilometers = 4 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Meters = 3 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Miles = 8 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Millimeters = 0 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.NauticalMiles = 9 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.UsFeet = 10 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LengthUnit.Yards = 7 -> dymaptic.GeoBlazor.Core.Enums.LengthUnit
dymaptic.GeoBlazor.Core.Enums.LinePlacement
dymaptic.GeoBlazor.Core.Enums.LinePlacement.Begin = 0 -> dymaptic.GeoBlazor.Core.Enums.LinePlacement
dymaptic.GeoBlazor.Core.Enums.LinePlacement.BeginEnd = 2 -> dymaptic.GeoBlazor.Core.Enums.LinePlacement
dymaptic.GeoBlazor.Core.Enums.LinePlacement.End = 1 -> dymaptic.GeoBlazor.Core.Enums.LinePlacement
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle.Arrow = 0 -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle.Circle = 1 -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle.Cross = 4 -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle.Diamond = 3 -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle.Square = 2 -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle.X = 5 -> dymaptic.GeoBlazor.Core.Enums.LineSymbolMarkerStyle
dymaptic.GeoBlazor.Core.Enums.ListMode
dymaptic.GeoBlazor.Core.Enums.ListMode.Hide = 1 -> dymaptic.GeoBlazor.Core.Enums.ListMode
dymaptic.GeoBlazor.Core.Enums.ListMode.HideChildren = 2 -> dymaptic.GeoBlazor.Core.Enums.ListMode
dymaptic.GeoBlazor.Core.Enums.ListMode.Show = 0 -> dymaptic.GeoBlazor.Core.Enums.ListMode
dymaptic.GeoBlazor.Core.Enums.LoadStatus
dymaptic.GeoBlazor.Core.Enums.LoadStatus.Failed = 2 -> dymaptic.GeoBlazor.Core.Enums.LoadStatus
dymaptic.GeoBlazor.Core.Enums.LoadStatus.Loaded = 3 -> dymaptic.GeoBlazor.Core.Enums.LoadStatus
dymaptic.GeoBlazor.Core.Enums.LoadStatus.Loading = 1 -> dymaptic.GeoBlazor.Core.Enums.LoadStatus
dymaptic.GeoBlazor.Core.Enums.LoadStatus.NotLoaded = 0 -> dymaptic.GeoBlazor.Core.Enums.LoadStatus
dymaptic.GeoBlazor.Core.Enums.LocateViewModelState
dymaptic.GeoBlazor.Core.Enums.LocateViewModelState.Disabled = 0 -> dymaptic.GeoBlazor.Core.Enums.LocateViewModelState
dymaptic.GeoBlazor.Core.Enums.LocateViewModelState.Error = 3 -> dymaptic.GeoBlazor.Core.Enums.LocateViewModelState
dymaptic.GeoBlazor.Core.Enums.LocateViewModelState.FeatureUnsupported = 4 -> dymaptic.GeoBlazor.Core.Enums.LocateViewModelState
dymaptic.GeoBlazor.Core.Enums.LocateViewModelState.Locating = 2 -> dymaptic.GeoBlazor.Core.Enums.LocateViewModelState
dymaptic.GeoBlazor.Core.Enums.LocateViewModelState.Ready = 1 -> dymaptic.GeoBlazor.Core.Enums.LocateViewModelState
dymaptic.GeoBlazor.Core.Enums.LocationType
dymaptic.GeoBlazor.Core.Enums.LocationType.Rooftop = 1 -> dymaptic.GeoBlazor.Core.Enums.LocationType
dymaptic.GeoBlazor.Core.Enums.LocationType.Street = 0 -> dymaptic.GeoBlazor.Core.Enums.LocationType
dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType
dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType.Rooftop = 0 -> dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType
dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType.Street = 1 -> dymaptic.GeoBlazor.Core.Enums.LocatorSearchLocationType
dymaptic.GeoBlazor.Core.Enums.MapFontStyle
dymaptic.GeoBlazor.Core.Enums.MapFontStyle.Italic = 1 -> dymaptic.GeoBlazor.Core.Enums.MapFontStyle
dymaptic.GeoBlazor.Core.Enums.MapFontStyle.Normal = 0 -> dymaptic.GeoBlazor.Core.Enums.MapFontStyle
dymaptic.GeoBlazor.Core.Enums.MapFontStyle.Oblique = 2 -> dymaptic.GeoBlazor.Core.Enums.MapFontStyle
dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Bmp = 6 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Gif = 7 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Jpg = 4 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Pdf = 5 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Png = 0 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Png24 = 2 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Png32 = 3 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Png8 = 1 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Pngjpg = 9 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MapImageFormat.Svg = 8 -> dymaptic.GeoBlazor.Core.Enums.MapImageFormat
dymaptic.GeoBlazor.Core.Enums.MeasurementSystem
dymaptic.GeoBlazor.Core.Enums.MeasurementSystem.Imperial = 0 -> dymaptic.GeoBlazor.Core.Enums.MeasurementSystem
dymaptic.GeoBlazor.Core.Enums.MeasurementSystem.Metric = 1 -> dymaptic.GeoBlazor.Core.Enums.MeasurementSystem
dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState
dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState.Disabled = 0 -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState
dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState.Measured = 3 -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState
dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState.Measuring = 2 -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState
dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState.Ready = 1 -> dymaptic.GeoBlazor.Core.Enums.MeasurementViewModelState
dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.Attribute = 4 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.Center = 1 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.LockRaster = 5 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.Nadir = 2 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.None = 0 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.Northwest = 6 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.Seamline = 7 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.Method.Viewpoint = 3 -> dymaptic.GeoBlazor.Core.Enums.Method
dymaptic.GeoBlazor.Core.Enums.MinStartingPoints
dymaptic.GeoBlazor.Core.Enums.MinStartingPoints.Many = 2 -> dymaptic.GeoBlazor.Core.Enums.MinStartingPoints
dymaptic.GeoBlazor.Core.Enums.MinStartingPoints.None = 0 -> dymaptic.GeoBlazor.Core.Enums.MinStartingPoints
dymaptic.GeoBlazor.Core.Enums.MinStartingPoints.One = 1 -> dymaptic.GeoBlazor.Core.Enums.MinStartingPoints
dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation
dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation.All = 3 -> dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation
dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation.Any = 2 -> dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation
dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation.MatchAll = 1 -> dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation
dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation.MatchAny = 0 -> dymaptic.GeoBlazor.Core.Enums.NoDataInterpretation
dymaptic.GeoBlazor.Core.Enums.NormalizationType
dymaptic.GeoBlazor.Core.Enums.NormalizationType.Field = 0 -> dymaptic.GeoBlazor.Core.Enums.NormalizationType
dymaptic.GeoBlazor.Core.Enums.NormalizationType.Log = 1 -> dymaptic.GeoBlazor.Core.Enums.NormalizationType
dymaptic.GeoBlazor.Core.Enums.NormalizationType.PercentOfTotal = 2 -> dymaptic.GeoBlazor.Core.Enums.NormalizationType
dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.Blend = 5 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.First = 0 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.Last = 1 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.Max = 3 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.Mean = 4 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.Min = 2 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.Operation.Sum = 6 -> dymaptic.GeoBlazor.Core.Enums.Operation
dymaptic.GeoBlazor.Core.Enums.OperationType
dymaptic.GeoBlazor.Core.Enums.OperationType.BaseAndTop = 0 -> dymaptic.GeoBlazor.Core.Enums.OperationType
dymaptic.GeoBlazor.Core.Enums.OperationType.BaseAndTopShadow = 1 -> dymaptic.GeoBlazor.Core.Enums.OperationType
dymaptic.GeoBlazor.Core.Enums.OperationType.TopAndTopShadow = 2 -> dymaptic.GeoBlazor.Core.Enums.OperationType
dymaptic.GeoBlazor.Core.Enums.OrderBy
dymaptic.GeoBlazor.Core.Enums.OrderBy.Asc = 0 -> dymaptic.GeoBlazor.Core.Enums.OrderBy
dymaptic.GeoBlazor.Core.Enums.OrderBy.Desc = 1 -> dymaptic.GeoBlazor.Core.Enums.OrderBy
dymaptic.GeoBlazor.Core.Enums.OrientedImageryType
dymaptic.GeoBlazor.Core.Enums.OrientedImageryType.Horizontal = 0 -> dymaptic.GeoBlazor.Core.Enums.OrientedImageryType
dymaptic.GeoBlazor.Core.Enums.OrientedImageryType.Inspection = 4 -> dymaptic.GeoBlazor.Core.Enums.OrientedImageryType
dymaptic.GeoBlazor.Core.Enums.OrientedImageryType.Nadir = 1 -> dymaptic.GeoBlazor.Core.Enums.OrientedImageryType
dymaptic.GeoBlazor.Core.Enums.OrientedImageryType.Oblique = 2 -> dymaptic.GeoBlazor.Core.Enums.OrientedImageryType
dymaptic.GeoBlazor.Core.Enums.OrientedImageryType.ThreeHundredSixty = 3 -> dymaptic.GeoBlazor.Core.Enums.OrientedImageryType
dymaptic.GeoBlazor.Core.Enums.OriginPosition
dymaptic.GeoBlazor.Core.Enums.OriginPosition.LowerLeft = 1 -> dymaptic.GeoBlazor.Core.Enums.OriginPosition
dymaptic.GeoBlazor.Core.Enums.OriginPosition.UpperLeft = 0 -> dymaptic.GeoBlazor.Core.Enums.OriginPosition
dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.C128 = 0 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.C64 = 1 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.F32 = 2 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.F64 = 3 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.S16 = 4 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.S32 = 5 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.S8 = 6 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.U1 = 7 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.U16 = 8 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.U2 = 9 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.U32 = 10 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.U4 = 11 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.U8 = 12 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OutputPixelType.Unknown = 13 -> dymaptic.GeoBlazor.Core.Enums.OutputPixelType
dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Enums.OverlayPosition.BottomLeft = 2 -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Enums.OverlayPosition.BottomRight = 3 -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Enums.OverlayPosition.Manual = 4 -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Enums.OverlayPosition.TopLeft = 0 -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Enums.OverlayPosition.TopRight = 1 -> dymaptic.GeoBlazor.Core.Enums.OverlayPosition
dymaptic.GeoBlazor.Core.Enums.PixelInterpolation
dymaptic.GeoBlazor.Core.Enums.PixelInterpolation.Bilinear = 1 -> dymaptic.GeoBlazor.Core.Enums.PixelInterpolation
dymaptic.GeoBlazor.Core.Enums.PixelInterpolation.Cubic = 2 -> dymaptic.GeoBlazor.Core.Enums.PixelInterpolation
dymaptic.GeoBlazor.Core.Enums.PixelInterpolation.Majority = 3 -> dymaptic.GeoBlazor.Core.Enums.PixelInterpolation
dymaptic.GeoBlazor.Core.Enums.PixelInterpolation.Nearest = 0 -> dymaptic.GeoBlazor.Core.Enums.PixelInterpolation
dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.C128 = 13 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.C64 = 12 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.F32 = 10 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.F64 = 11 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.S16 = 2 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.S32 = 3 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.S8 = 1 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.U1 = 4 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.U16 = 8 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.U2 = 5 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.U32 = 9 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.U4 = 6 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.U8 = 7 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PixelType.Unknown = 0 -> dymaptic.GeoBlazor.Core.Enums.PixelType
dymaptic.GeoBlazor.Core.Enums.PointerType
dymaptic.GeoBlazor.Core.Enums.PointerType.Mouse = 0 -> dymaptic.GeoBlazor.Core.Enums.PointerType
dymaptic.GeoBlazor.Core.Enums.PointerType.Pen = 1 -> dymaptic.GeoBlazor.Core.Enums.PointerType
dymaptic.GeoBlazor.Core.Enums.PointerType.Touch = 2 -> dymaptic.GeoBlazor.Core.Enums.PointerType
dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupAlignment.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupAlignment.BottomCenter = 4 -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupAlignment.BottomLeft = 3 -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupAlignment.BottomRight = 5 -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupAlignment.TopCenter = 1 -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupAlignment.TopRight = 2 -> dymaptic.GeoBlazor.Core.Enums.PopupAlignment
dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Attachments = 0 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Custom = 1 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Expression = 2 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Fields = 3 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Media = 4 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Relationship = 5 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupContentType.Text = 6 -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.BottomCenter = 5 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.BottomLeft = 4 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.BottomRight = 6 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.TopCenter = 1 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.TopLeft = 3 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupDockPosition.TopRight = 2 -> dymaptic.GeoBlazor.Core.Enums.PopupDockPosition
dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType.Number = 0 -> dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType.String = 1 -> dymaptic.GeoBlazor.Core.Enums.PopupExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.PortalAccess
dymaptic.GeoBlazor.Core.Enums.PortalAccess.Private = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalAccess
dymaptic.GeoBlazor.Core.Enums.PortalAccess.Public = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalAccess
dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess
dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess.Org = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess
dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess.Private = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess
dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess.Public = 2 -> dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAccess.Org = 2 -> dymaptic.GeoBlazor.Core.Enums.PortalItemAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAccess.Private = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalItemAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAccess.Public = 3 -> dymaptic.GeoBlazor.Core.Enums.PortalItemAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAccess.Shared = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalItemAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess.Inherit = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess.Private = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess.Inherit = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess
dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess.Private = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess
dymaptic.GeoBlazor.Core.Enums.PortalMode
dymaptic.GeoBlazor.Core.Enums.PortalMode.Multitenant = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalMode
dymaptic.GeoBlazor.Core.Enums.PortalMode.Singletenant = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalMode
dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder
dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder.Asc = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder
dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder.Desc = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder
dymaptic.GeoBlazor.Core.Enums.PortalUnits
dymaptic.GeoBlazor.Core.Enums.PortalUnits.English = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalUnits
dymaptic.GeoBlazor.Core.Enums.PortalUnits.Metric = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalUnits
dymaptic.GeoBlazor.Core.Enums.PortalUserAccess
dymaptic.GeoBlazor.Core.Enums.PortalUserAccess.Org = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalUserAccess
dymaptic.GeoBlazor.Core.Enums.PortalUserAccess.Private = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalUserAccess
dymaptic.GeoBlazor.Core.Enums.PortalUserAccess.Public = 2 -> dymaptic.GeoBlazor.Core.Enums.PortalUserAccess
dymaptic.GeoBlazor.Core.Enums.PortalUserRole
dymaptic.GeoBlazor.Core.Enums.PortalUserRole.Org_admin = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalUserRole
dymaptic.GeoBlazor.Core.Enums.PortalUserRole.Org_publisher = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalUserRole
dymaptic.GeoBlazor.Core.Enums.PortalUserRole.Org_user = 2 -> dymaptic.GeoBlazor.Core.Enums.PortalUserRole
dymaptic.GeoBlazor.Core.Enums.PortalUserUnits
dymaptic.GeoBlazor.Core.Enums.PortalUserUnits.English = 0 -> dymaptic.GeoBlazor.Core.Enums.PortalUserUnits
dymaptic.GeoBlazor.Core.Enums.PortalUserUnits.Metric = 1 -> dymaptic.GeoBlazor.Core.Enums.PortalUserUnits
dymaptic.GeoBlazor.Core.Enums.QuantizationMode
dymaptic.GeoBlazor.Core.Enums.QuantizationMode.Edit = 1 -> dymaptic.GeoBlazor.Core.Enums.QuantizationMode
dymaptic.GeoBlazor.Core.Enums.QuantizationMode.View = 0 -> dymaptic.GeoBlazor.Core.Enums.QuantizationMode
dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.QueryUnits.Feet = 0 -> dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.QueryUnits.Kilometers = 5 -> dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.QueryUnits.Meters = 4 -> dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.QueryUnits.Miles = 1 -> dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.QueryUnits.NauticalMiles = 2 -> dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.QueryUnits.UsNauticalMiles = 3 -> dymaptic.GeoBlazor.Core.Enums.QueryUnits
dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RadiusUnit.Feet = 0 -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RadiusUnit.Kilometers = 1 -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RadiusUnit.Meters = 2 -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RadiusUnit.Miles = 3 -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RadiusUnit.NauticalMiles = 4 -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RadiusUnit.Yards = 5 -> dymaptic.GeoBlazor.Core.Enums.RadiusUnit
dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.Elevation = 1 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.Generic = 0 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.Processed = 3 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.Scientific = 4 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.StandardTime = 11 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.Thematic = 2 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.VectorDirection = 10 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.VectorMagdir = 8 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.VectorMagnitude = 9 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.VectorU = 6 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.VectorUv = 5 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterDataType.VectorV = 7 -> dymaptic.GeoBlazor.Core.Enums.RasterDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.Elevation = 1 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.Generic = 0 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.Processed = 3 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.Scientific = 4 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.StandardTime = 11 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.Thematic = 2 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.VectorDirection = 10 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.VectorMagdir = 8 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.VectorMagnitude = 9 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.VectorU = 6 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.VectorUv = 5 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType.VectorV = 7 -> dymaptic.GeoBlazor.Core.Enums.RasterInfoDataType
dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle
dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle.Circle = 0 -> dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle
dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle.Diamond = 1 -> dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle
dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle.HexagonFlat = 2 -> dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle
dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle.HexagonPointy = 3 -> dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle
dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle.Square = 4 -> dymaptic.GeoBlazor.Core.Enums.ReferenceSizeSymbolStyle
dymaptic.GeoBlazor.Core.Enums.RelationshipDirection
dymaptic.GeoBlazor.Core.Enums.RelationshipDirection.Forward = 0 -> dymaptic.GeoBlazor.Core.Enums.RelationshipDirection
dymaptic.GeoBlazor.Core.Enums.RelationshipDirection.Reverse = 1 -> dymaptic.GeoBlazor.Core.Enums.RelationshipDirection
dymaptic.GeoBlazor.Core.Enums.RendererSymbolType
dymaptic.GeoBlazor.Core.Enums.RendererSymbolType.ThreeDimensionalFlat = 1 -> dymaptic.GeoBlazor.Core.Enums.RendererSymbolType
dymaptic.GeoBlazor.Core.Enums.RendererSymbolType.ThreeDimensionalVolumetric = 2 -> dymaptic.GeoBlazor.Core.Enums.RendererSymbolType
dymaptic.GeoBlazor.Core.Enums.RendererSymbolType.ThreeDimensionalVolumetricUniform = 3 -> dymaptic.GeoBlazor.Core.Enums.RendererSymbolType
dymaptic.GeoBlazor.Core.Enums.RendererSymbolType.TwoDimensional = 0 -> dymaptic.GeoBlazor.Core.Enums.RendererSymbolType
dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.ClassBreaks = 3 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.Dictionary = 4 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.DotDensity = 5 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.Heatmap = 6 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.PieChart = 2 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.Simple = 0 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RendererType.UniqueValue = 1 -> dymaptic.GeoBlazor.Core.Enums.RendererType
dymaptic.GeoBlazor.Core.Enums.RequestMethod
dymaptic.GeoBlazor.Core.Enums.RequestMethod.Auto = 0 -> dymaptic.GeoBlazor.Core.Enums.RequestMethod
dymaptic.GeoBlazor.Core.Enums.RequestMethod.Delete = 1 -> dymaptic.GeoBlazor.Core.Enums.RequestMethod
dymaptic.GeoBlazor.Core.Enums.RequestMethod.Head = 2 -> dymaptic.GeoBlazor.Core.Enums.RequestMethod
dymaptic.GeoBlazor.Core.Enums.RequestMethod.Post = 3 -> dymaptic.GeoBlazor.Core.Enums.RequestMethod
dymaptic.GeoBlazor.Core.Enums.RequestMethod.Put = 4 -> dymaptic.GeoBlazor.Core.Enums.RequestMethod
dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.ArrayBuffer = 4 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Blob = 3 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Document = 5 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Image = 6 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Json = 0 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Native = 7 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Text = 2 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ResponseType.Xml = 1 -> dymaptic.GeoBlazor.Core.Enums.ResponseType
dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption
dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption.None = 0 -> dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption
dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption.OriginalAndCurrentFeatures = 1 -> dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption
dymaptic.GeoBlazor.Core.Enums.Role
dymaptic.GeoBlazor.Core.Enums.Role.Destination = 1 -> dymaptic.GeoBlazor.Core.Enums.Role
dymaptic.GeoBlazor.Core.Enums.Role.Origin = 0 -> dymaptic.GeoBlazor.Core.Enums.Role
dymaptic.GeoBlazor.Core.Enums.RotationType
dymaptic.GeoBlazor.Core.Enums.RotationType.Arithmetic = 1 -> dymaptic.GeoBlazor.Core.Enums.RotationType
dymaptic.GeoBlazor.Core.Enums.RotationType.Geographic = 0 -> dymaptic.GeoBlazor.Core.Enums.RotationType
dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState
dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState.Disabled = 0 -> dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState
dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState.Ready = 1 -> dymaptic.GeoBlazor.Core.Enums.ScaleBarViewModelState
dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle
dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle.Line = 1 -> dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle
dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle.Ruler = 0 -> dymaptic.GeoBlazor.Core.Enums.ScaleBarWidgetStyle
dymaptic.GeoBlazor.Core.Enums.ScaleUnit
dymaptic.GeoBlazor.Core.Enums.ScaleUnit.Dual = 2 -> dymaptic.GeoBlazor.Core.Enums.ScaleUnit
dymaptic.GeoBlazor.Core.Enums.ScaleUnit.Imperial = 3 -> dymaptic.GeoBlazor.Core.Enums.ScaleUnit
dymaptic.GeoBlazor.Core.Enums.ScaleUnit.Metric = 1 -> dymaptic.GeoBlazor.Core.Enums.ScaleUnit
dymaptic.GeoBlazor.Core.Enums.ScaleUnit.NonMetric = 0 -> dymaptic.GeoBlazor.Core.Enums.ScaleUnit
dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship.Contains = 1 -> dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship.Disjoint = 0 -> dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SceneLayerGeometryType
dymaptic.GeoBlazor.Core.Enums.SceneLayerGeometryType.Mesh = 1 -> dymaptic.GeoBlazor.Core.Enums.SceneLayerGeometryType
dymaptic.GeoBlazor.Core.Enums.SceneLayerGeometryType.Point = 0 -> dymaptic.GeoBlazor.Core.Enums.SceneLayerGeometryType
dymaptic.GeoBlazor.Core.Enums.SearchMenu
dymaptic.GeoBlazor.Core.Enums.SearchMenu.None = 0 -> dymaptic.GeoBlazor.Core.Enums.SearchMenu
dymaptic.GeoBlazor.Core.Enums.SearchMenu.Source = 2 -> dymaptic.GeoBlazor.Core.Enums.SearchMenu
dymaptic.GeoBlazor.Core.Enums.SearchMenu.Suggestion = 1 -> dymaptic.GeoBlazor.Core.Enums.SearchMenu
dymaptic.GeoBlazor.Core.Enums.SearchMenu.Warning = 3 -> dymaptic.GeoBlazor.Core.Enums.SearchMenu
dymaptic.GeoBlazor.Core.Enums.SearchSourceType
dymaptic.GeoBlazor.Core.Enums.SearchSourceType.Layer = 1 -> dymaptic.GeoBlazor.Core.Enums.SearchSourceType
dymaptic.GeoBlazor.Core.Enums.SearchSourceType.Locator = 0 -> dymaptic.GeoBlazor.Core.Enums.SearchSourceType
dymaptic.GeoBlazor.Core.Enums.SearchViewModelState
dymaptic.GeoBlazor.Core.Enums.SearchViewModelState.Disabled = 1 -> dymaptic.GeoBlazor.Core.Enums.SearchViewModelState
dymaptic.GeoBlazor.Core.Enums.SearchViewModelState.Loading = 3 -> dymaptic.GeoBlazor.Core.Enums.SearchViewModelState
dymaptic.GeoBlazor.Core.Enums.SearchViewModelState.Ready = 0 -> dymaptic.GeoBlazor.Core.Enums.SearchViewModelState
dymaptic.GeoBlazor.Core.Enums.SearchViewModelState.Searching = 2 -> dymaptic.GeoBlazor.Core.Enums.SearchViewModelState
dymaptic.GeoBlazor.Core.Enums.SelectionMode
dymaptic.GeoBlazor.Core.Enums.SelectionMode.Multiple = 0 -> dymaptic.GeoBlazor.Core.Enums.SelectionMode
dymaptic.GeoBlazor.Core.Enums.SelectionMode.None = 1 -> dymaptic.GeoBlazor.Core.Enums.SelectionMode
dymaptic.GeoBlazor.Core.Enums.SelectionMode.Single = 2 -> dymaptic.GeoBlazor.Core.Enums.SelectionMode
dymaptic.GeoBlazor.Core.Enums.SelectionMode.SinglePersist = 3 -> dymaptic.GeoBlazor.Core.Enums.SelectionMode
dymaptic.GeoBlazor.Core.Enums.ServiceMode
dymaptic.GeoBlazor.Core.Enums.ServiceMode.KVP = 1 -> dymaptic.GeoBlazor.Core.Enums.ServiceMode
dymaptic.GeoBlazor.Core.Enums.ServiceMode.RESTful = 0 -> dymaptic.GeoBlazor.Core.Enums.ServiceMode
dymaptic.GeoBlazor.Core.Enums.Shading
dymaptic.GeoBlazor.Core.Enums.Shading.Flat = 1 -> dymaptic.GeoBlazor.Core.Enums.Shading
dymaptic.GeoBlazor.Core.Enums.Shading.Smooth = 2 -> dymaptic.GeoBlazor.Core.Enums.Shading
dymaptic.GeoBlazor.Core.Enums.Shading.Source = 0 -> dymaptic.GeoBlazor.Core.Enums.Shading
dymaptic.GeoBlazor.Core.Enums.ShapeOperation
dymaptic.GeoBlazor.Core.Enums.ShapeOperation.Move = 1 -> dymaptic.GeoBlazor.Core.Enums.ShapeOperation
dymaptic.GeoBlazor.Core.Enums.ShapeOperation.MoveXy = 2 -> dymaptic.GeoBlazor.Core.Enums.ShapeOperation
dymaptic.GeoBlazor.Core.Enums.ShapeOperation.None = 0 -> dymaptic.GeoBlazor.Core.Enums.ShapeOperation
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.BackwardDiagonal = 0 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.Cross = 1 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.DiagonalCross = 2 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.ForwardDiagonal = 3 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.Horizontal = 4 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.None = 5 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.Solid = 6 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle.Vertical = 7 -> dymaptic.GeoBlazor.Core.Enums.SimpleFillSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType
dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType.Multipoint = 3 -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType
dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType.Point = 0 -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType
dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType.Polygon = 1 -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType
dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType.Polyline = 2 -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.Dash = 0 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.DashDot = 1 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.Dot = 2 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.LongDash = 3 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.LongDashDot = 4 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.LongDashDotDot = 5 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.None = 6 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.ShortDash = 7 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.ShortDashDot = 8 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.ShortDashDotDot = 9 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.ShortDot = 10 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle.Solid = 11 -> dymaptic.GeoBlazor.Core.Enums.SimpleLineSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.Circle = 0 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.Cross = 2 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.Diamond = 4 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.Path = 6 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.Square = 1 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.Triangle = 5 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle.X = 3 -> dymaptic.GeoBlazor.Core.Enums.SimpleMarkerSymbolStyle
dymaptic.GeoBlazor.Core.Enums.SliderDragEventState
dymaptic.GeoBlazor.Core.Enums.SliderDragEventState.Drag = 1 -> dymaptic.GeoBlazor.Core.Enums.SliderDragEventState
dymaptic.GeoBlazor.Core.Enums.SliderDragEventState.Start = 0 -> dymaptic.GeoBlazor.Core.Enums.SliderDragEventState
dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType.Average = 0 -> dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType.Max = 2 -> dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType.Min = 1 -> dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType.Tick = 3 -> dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType.Value = 4 -> dymaptic.GeoBlazor.Core.Enums.SliderLabelFormatterType
dymaptic.GeoBlazor.Core.Enums.SliderLayout
dymaptic.GeoBlazor.Core.Enums.SliderLayout.Horizontal = 0 -> dymaptic.GeoBlazor.Core.Enums.SliderLayout
dymaptic.GeoBlazor.Core.Enums.SliderLayout.HorizontalReversed = 1 -> dymaptic.GeoBlazor.Core.Enums.SliderLayout
dymaptic.GeoBlazor.Core.Enums.SliderLayout.Vertical = 2 -> dymaptic.GeoBlazor.Core.Enums.SliderLayout
dymaptic.GeoBlazor.Core.Enums.SliderLayout.VerticalReversed = 3 -> dymaptic.GeoBlazor.Core.Enums.SliderLayout
dymaptic.GeoBlazor.Core.Enums.SliderState
dymaptic.GeoBlazor.Core.Enums.SliderState.Disabled = 1 -> dymaptic.GeoBlazor.Core.Enums.SliderState
dymaptic.GeoBlazor.Core.Enums.SliderState.Dragging = 3 -> dymaptic.GeoBlazor.Core.Enums.SliderState
dymaptic.GeoBlazor.Core.Enums.SliderState.Editing = 2 -> dymaptic.GeoBlazor.Core.Enums.SliderState
dymaptic.GeoBlazor.Core.Enums.SliderState.Ready = 0 -> dymaptic.GeoBlazor.Core.Enums.SliderState
dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState
dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState.Drag = 0 -> dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState
dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState.Start = 1 -> dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState
dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState.Stop = 2 -> dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState
dymaptic.GeoBlazor.Core.Enums.SliderViewModelType
dymaptic.GeoBlazor.Core.Enums.SliderViewModelType.Max = 1 -> dymaptic.GeoBlazor.Core.Enums.SliderViewModelType
dymaptic.GeoBlazor.Core.Enums.SliderViewModelType.Min = 0 -> dymaptic.GeoBlazor.Core.Enums.SliderViewModelType
dymaptic.GeoBlazor.Core.Enums.SliderViewModelType.Tick = 2 -> dymaptic.GeoBlazor.Core.Enums.SliderViewModelType
dymaptic.GeoBlazor.Core.Enums.SliderViewModelType.Value = 3 -> dymaptic.GeoBlazor.Core.Enums.SliderViewModelType
dymaptic.GeoBlazor.Core.Enums.SnowCover
dymaptic.GeoBlazor.Core.Enums.SnowCover.Disabled = 1 -> dymaptic.GeoBlazor.Core.Enums.SnowCover
dymaptic.GeoBlazor.Core.Enums.SnowCover.Enabled = 0 -> dymaptic.GeoBlazor.Core.Enums.SnowCover
dymaptic.GeoBlazor.Core.Enums.SortDirection
dymaptic.GeoBlazor.Core.Enums.SortDirection.Asc = 0 -> dymaptic.GeoBlazor.Core.Enums.SortDirection
dymaptic.GeoBlazor.Core.Enums.SortDirection.Desc = 1 -> dymaptic.GeoBlazor.Core.Enums.SortDirection
dymaptic.GeoBlazor.Core.Enums.SortField
dymaptic.GeoBlazor.Core.Enums.SortField.Created = 0 -> dymaptic.GeoBlazor.Core.Enums.SortField
dymaptic.GeoBlazor.Core.Enums.SortField.Resource = 2 -> dymaptic.GeoBlazor.Core.Enums.SortField
dymaptic.GeoBlazor.Core.Enums.SortField.Size = 1 -> dymaptic.GeoBlazor.Core.Enums.SortField
dymaptic.GeoBlazor.Core.Enums.SortOrder
dymaptic.GeoBlazor.Core.Enums.SortOrder.Ascending = 0 -> dymaptic.GeoBlazor.Core.Enums.SortOrder
dymaptic.GeoBlazor.Core.Enums.SortOrder.Descending = 1 -> dymaptic.GeoBlazor.Core.Enums.SortOrder
dymaptic.GeoBlazor.Core.Enums.SourceType
dymaptic.GeoBlazor.Core.Enums.SourceType.MosaicDataset = 0 -> dymaptic.GeoBlazor.Core.Enums.SourceType
dymaptic.GeoBlazor.Core.Enums.SourceType.RasterDataset = 1 -> dymaptic.GeoBlazor.Core.Enums.SourceType
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.Benoit1895BChains = 10 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.ClarkeFeet = 4 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.ClarkeLinks = 6 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.ClarkeYards = 5 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.Degrees = 0 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.Feet = 2 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.FiftyKilometers = 15 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.GoldCoastFeet = 13 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.Indian1937Yards = 12 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.IndianYards = 11 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.Meters = 1 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.OneHundredFiftyKilometers = 16 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.Sears1922TruncatedChains = 14 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.SearsChains = 9 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.SearsFeet = 8 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.SearsYards = 7 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit.UsFeet = 3 -> dymaptic.GeoBlazor.Core.Enums.SpatialReferenceUnit
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Contains = 1 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Crosses = 2 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Disjoint = 9 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.EnvelopeIntersects = 3 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.EqualTo = 10 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.IndexIntersects = 4 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Intersects = 0 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Overlaps = 5 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Relation = 8 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Touches = 6 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpatialRelationship.Within = 7 -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship
dymaptic.GeoBlazor.Core.Enums.SpriteFormat
dymaptic.GeoBlazor.Core.Enums.SpriteFormat.Png = 0 -> dymaptic.GeoBlazor.Core.Enums.SpriteFormat
dymaptic.GeoBlazor.Core.Enums.SpriteFormat.Webp = 1 -> dymaptic.GeoBlazor.Core.Enums.SpriteFormat
dymaptic.GeoBlazor.Core.Enums.SqlFormat
dymaptic.GeoBlazor.Core.Enums.SqlFormat.Native = 2 -> dymaptic.GeoBlazor.Core.Enums.SqlFormat
dymaptic.GeoBlazor.Core.Enums.SqlFormat.None = 0 -> dymaptic.GeoBlazor.Core.Enums.SqlFormat
dymaptic.GeoBlazor.Core.Enums.SqlFormat.Standard = 1 -> dymaptic.GeoBlazor.Core.Enums.SqlFormat
dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Avg = 4 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.CentroidAggregate = 10 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.ConvexHullAggregate = 11 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Count = 0 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.EnvelopeAggregate = 9 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Max = 3 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Min = 2 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.PercentileContinuous = 7 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.PercentileDiscrete = 8 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Stddev = 5 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Sum = 1 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.StatisticType.Var = 6 -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Enums.Status
dymaptic.GeoBlazor.Core.Enums.Status.Published = 3 -> dymaptic.GeoBlazor.Core.Enums.Status
dymaptic.GeoBlazor.Core.Enums.Status.Publishing = 2 -> dymaptic.GeoBlazor.Core.Enums.Status
dymaptic.GeoBlazor.Core.Enums.Status.Unavailable = 1 -> dymaptic.GeoBlazor.Core.Enums.Status
dymaptic.GeoBlazor.Core.Enums.Status.Unknown = 0 -> dymaptic.GeoBlazor.Core.Enums.Status
dymaptic.GeoBlazor.Core.Enums.StorageType
dymaptic.GeoBlazor.Core.Enums.StorageType.Local = 1 -> dymaptic.GeoBlazor.Core.Enums.StorageType
dymaptic.GeoBlazor.Core.Enums.StorageType.Session = 0 -> dymaptic.GeoBlazor.Core.Enums.StorageType
dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StretchType.HistogramEqualization = 3 -> dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StretchType.MinMax = 1 -> dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StretchType.None = 0 -> dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StretchType.PercentClip = 4 -> dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StretchType.Sigmoid = 5 -> dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StretchType.StandardDeviation = 2 -> dymaptic.GeoBlazor.Core.Enums.StretchType
dymaptic.GeoBlazor.Core.Enums.StringFieldOption
dymaptic.GeoBlazor.Core.Enums.StringFieldOption.RichText = 0 -> dymaptic.GeoBlazor.Core.Enums.StringFieldOption
dymaptic.GeoBlazor.Core.Enums.StringFieldOption.TextArea = 1 -> dymaptic.GeoBlazor.Core.Enums.StringFieldOption
dymaptic.GeoBlazor.Core.Enums.StringFieldOption.TextBox = 2 -> dymaptic.GeoBlazor.Core.Enums.StringFieldOption
dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations
dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations.Bilinear = 1 -> dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations
dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations.Cubic = 2 -> dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations
dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations.Majority = 3 -> dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations
dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations.Nearest = 0 -> dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations
dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType.Number = 1 -> dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType.String = 0 -> dymaptic.GeoBlazor.Core.Enums.SupportExpressionInfoReturnType
dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Cim = 13 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Label3d = 12 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Line3d = 8 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Mesh3d = 11 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.PictureFill = 4 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.PictureMarker = 1 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Point3d = 7 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Polygon3d = 9 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.ShieldLabelSymbol = 6 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.SimpleFill = 3 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.SimpleLine = 2 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.SimpleMarker = 0 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.Text = 5 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SymbolType.WebStyle = 10 -> dymaptic.GeoBlazor.Core.Enums.SymbolType
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.Acres = 12 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.Ares = 13 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.Hectares = 14 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.Imperial = 0 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.Metric = 1 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareCentimeters = 3 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareDecimeters = 4 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareFeet = 8 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareInches = 7 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareKilometers = 6 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareMeters = 5 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareMiles = 10 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareMillimeters = 2 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareUsFeet = 11 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit.SquareYards = 9 -> dymaptic.GeoBlazor.Core.Enums.SystemOrAreaUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Centimeters = 3 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Decimeters = 4 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Feet = 8 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Imperial = 0 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Inches = 7 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Kilometers = 6 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Meters = 5 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Metric = 1 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Miles = 10 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Millimeters = 2 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.NauticalMiles = 11 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.UsFeet = 12 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit.Yards = 9 -> dymaptic.GeoBlazor.Core.Enums.SystemOrLengthUnit
dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Centuries = 9 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Days = 4 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Decades = 8 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Hours = 3 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Milliseconds = 0 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Minutes = 2 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Months = 6 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Seconds = 1 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Weeks = 5 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TemporalTime.Years = 7 -> dymaptic.GeoBlazor.Core.Enums.TemporalTime
dymaptic.GeoBlazor.Core.Enums.TextAlign
dymaptic.GeoBlazor.Core.Enums.TextAlign.Center = 1 -> dymaptic.GeoBlazor.Core.Enums.TextAlign
dymaptic.GeoBlazor.Core.Enums.TextAlign.End = 2 -> dymaptic.GeoBlazor.Core.Enums.TextAlign
dymaptic.GeoBlazor.Core.Enums.TextAlign.Start = 0 -> dymaptic.GeoBlazor.Core.Enums.TextAlign
dymaptic.GeoBlazor.Core.Enums.TextDecoration
dymaptic.GeoBlazor.Core.Enums.TextDecoration.LineThrough = 1 -> dymaptic.GeoBlazor.Core.Enums.TextDecoration
dymaptic.GeoBlazor.Core.Enums.TextDecoration.None = 2 -> dymaptic.GeoBlazor.Core.Enums.TextDecoration
dymaptic.GeoBlazor.Core.Enums.TextDecoration.Underline = 0 -> dymaptic.GeoBlazor.Core.Enums.TextDecoration
dymaptic.GeoBlazor.Core.Enums.TickConfigMode
dymaptic.GeoBlazor.Core.Enums.TickConfigMode.Count = 0 -> dymaptic.GeoBlazor.Core.Enums.TickConfigMode
dymaptic.GeoBlazor.Core.Enums.TickConfigMode.Percent = 1 -> dymaptic.GeoBlazor.Core.Enums.TickConfigMode
dymaptic.GeoBlazor.Core.Enums.TickConfigMode.Position = 2 -> dymaptic.GeoBlazor.Core.Enums.TickConfigMode
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Dib = 5 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Emf = 7 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Gif = 10 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.IndexedVector = 18 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Jpg = 4 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Lerc = 14 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Lerc2d = 15 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Mixed = 13 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Pbf = 16 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Pdf = 9 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Png = 0 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Png24 = 2 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Png32 = 3 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Png8 = 1 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Ps = 8 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Raw = 17 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Svg = 11 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Svgz = 12 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TileInfoFormat.Tiff = 6 -> dymaptic.GeoBlazor.Core.Enums.TileInfoFormat
dymaptic.GeoBlazor.Core.Enums.TimeField
dymaptic.GeoBlazor.Core.Enums.TimeField.EndTimeField = 2 -> dymaptic.GeoBlazor.Core.Enums.TimeField
dymaptic.GeoBlazor.Core.Enums.TimeField.StartTimeField = 1 -> dymaptic.GeoBlazor.Core.Enums.TimeField
dymaptic.GeoBlazor.Core.Enums.TimeField.TimeReceived = 0 -> dymaptic.GeoBlazor.Core.Enums.TimeField
dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.Connected = 0 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.Downstream = 2 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.Isolation = 7 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.Loops = 6 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.ShortestPath = 3 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.Subnetwork = 4 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.SubnetworkController = 5 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraceType.Upstream = 1 -> dymaptic.GeoBlazor.Core.Enums.TraceType
dymaptic.GeoBlazor.Core.Enums.TraversabilityModel
dymaptic.GeoBlazor.Core.Enums.TraversabilityModel.Bidirectional = 1 -> dymaptic.GeoBlazor.Core.Enums.TraversabilityModel
dymaptic.GeoBlazor.Core.Enums.TraversabilityModel.Directional = 0 -> dymaptic.GeoBlazor.Core.Enums.TraversabilityModel
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Arrow = 2 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Caret = 0 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Circle = 7 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.CircleArrow = 3 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.CircleCaret = 1 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.CirclePlusMinus = 5 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Custom = 11 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.HappySad = 9 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.PlusMinus = 4 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Square = 6 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Thumb = 10 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle.Triangle = 8 -> dymaptic.GeoBlazor.Core.Enums.UnivariateSymbolStyle
dymaptic.GeoBlazor.Core.Enums.UnivariateTheme
dymaptic.GeoBlazor.Core.Enums.UnivariateTheme.Above = 1 -> dymaptic.GeoBlazor.Core.Enums.UnivariateTheme
dymaptic.GeoBlazor.Core.Enums.UnivariateTheme.AboveAndBelow = 3 -> dymaptic.GeoBlazor.Core.Enums.UnivariateTheme
dymaptic.GeoBlazor.Core.Enums.UnivariateTheme.Below = 2 -> dymaptic.GeoBlazor.Core.Enums.UnivariateTheme
dymaptic.GeoBlazor.Core.Enums.UnivariateTheme.HighToLow = 0 -> dymaptic.GeoBlazor.Core.Enums.UnivariateTheme
dymaptic.GeoBlazor.Core.Enums.ValidationType
dymaptic.GeoBlazor.Core.Enums.ValidationType.ForceRebuild = 2 -> dymaptic.GeoBlazor.Core.Enums.ValidationType
dymaptic.GeoBlazor.Core.Enums.ValidationType.Normal = 0 -> dymaptic.GeoBlazor.Core.Enums.ValidationType
dymaptic.GeoBlazor.Core.Enums.ValidationType.Rebuild = 1 -> dymaptic.GeoBlazor.Core.Enums.ValidationType
dymaptic.GeoBlazor.Core.Enums.VertexOperation
dymaptic.GeoBlazor.Core.Enums.VertexOperation.Move = 0 -> dymaptic.GeoBlazor.Core.Enums.VertexOperation
dymaptic.GeoBlazor.Core.Enums.VertexOperation.MoveXy = 1 -> dymaptic.GeoBlazor.Core.Enums.VertexOperation
dymaptic.GeoBlazor.Core.Enums.VertexSpace
dymaptic.GeoBlazor.Core.Enums.VertexSpace.Georeferenced = 1 -> dymaptic.GeoBlazor.Core.Enums.VertexSpace
dymaptic.GeoBlazor.Core.Enums.VertexSpace.Local = 0 -> dymaptic.GeoBlazor.Core.Enums.VertexSpace
dymaptic.GeoBlazor.Core.Enums.Vertical
dymaptic.GeoBlazor.Core.Enums.Vertical.Clamp = 0 -> dymaptic.GeoBlazor.Core.Enums.Vertical
dymaptic.GeoBlazor.Core.Enums.Vertical.Mirror = 2 -> dymaptic.GeoBlazor.Core.Enums.Vertical
dymaptic.GeoBlazor.Core.Enums.Vertical.Repeat = 1 -> dymaptic.GeoBlazor.Core.Enums.Vertical
dymaptic.GeoBlazor.Core.Enums.VerticalAlignment
dymaptic.GeoBlazor.Core.Enums.VerticalAlignment.Baseline = 0 -> dymaptic.GeoBlazor.Core.Enums.VerticalAlignment
dymaptic.GeoBlazor.Core.Enums.VerticalAlignment.Bottom = 3 -> dymaptic.GeoBlazor.Core.Enums.VerticalAlignment
dymaptic.GeoBlazor.Core.Enums.VerticalAlignment.Middle = 2 -> dymaptic.GeoBlazor.Core.Enums.VerticalAlignment
dymaptic.GeoBlazor.Core.Enums.VerticalAlignment.Top = 1 -> dymaptic.GeoBlazor.Core.Enums.VerticalAlignment
dymaptic.GeoBlazor.Core.Enums.ViewingMode
dymaptic.GeoBlazor.Core.Enums.ViewingMode.Global = 0 -> dymaptic.GeoBlazor.Core.Enums.ViewingMode
dymaptic.GeoBlazor.Core.Enums.ViewingMode.Local = 1 -> dymaptic.GeoBlazor.Core.Enums.ViewingMode
dymaptic.GeoBlazor.Core.Enums.ViewModelState
dymaptic.GeoBlazor.Core.Enums.ViewModelState.Disabled = 1 -> dymaptic.GeoBlazor.Core.Enums.ViewModelState
dymaptic.GeoBlazor.Core.Enums.ViewModelState.Error = 3 -> dymaptic.GeoBlazor.Core.Enums.ViewModelState
dymaptic.GeoBlazor.Core.Enums.ViewModelState.Loading = 2 -> dymaptic.GeoBlazor.Core.Enums.ViewModelState
dymaptic.GeoBlazor.Core.Enums.ViewModelState.Ready = 0 -> dymaptic.GeoBlazor.Core.Enums.ViewModelState
dymaptic.GeoBlazor.Core.Enums.Visibility
dymaptic.GeoBlazor.Core.Enums.Visibility.None = 0 -> dymaptic.GeoBlazor.Core.Enums.Visibility
dymaptic.GeoBlazor.Core.Enums.Visibility.Visible = 1 -> dymaptic.GeoBlazor.Core.Enums.Visibility
dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance
dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance.Checkbox = 1 -> dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance
dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance.Default = 0 -> dymaptic.GeoBlazor.Core.Enums.VisibilityAppearance
dymaptic.GeoBlazor.Core.Enums.VisibilityMode
dymaptic.GeoBlazor.Core.Enums.VisibilityMode.Exclusive = 2 -> dymaptic.GeoBlazor.Core.Enums.VisibilityMode
dymaptic.GeoBlazor.Core.Enums.VisibilityMode.Independent = 0 -> dymaptic.GeoBlazor.Core.Enums.VisibilityMode
dymaptic.GeoBlazor.Core.Enums.VisibilityMode.Inherited = 1 -> dymaptic.GeoBlazor.Core.Enums.VisibilityMode
dymaptic.GeoBlazor.Core.Enums.VisualAxis
dymaptic.GeoBlazor.Core.Enums.VisualAxis.All = 4 -> dymaptic.GeoBlazor.Core.Enums.VisualAxis
dymaptic.GeoBlazor.Core.Enums.VisualAxis.Depth = 1 -> dymaptic.GeoBlazor.Core.Enums.VisualAxis
dymaptic.GeoBlazor.Core.Enums.VisualAxis.Height = 2 -> dymaptic.GeoBlazor.Core.Enums.VisualAxis
dymaptic.GeoBlazor.Core.Enums.VisualAxis.Width = 0 -> dymaptic.GeoBlazor.Core.Enums.VisualAxis
dymaptic.GeoBlazor.Core.Enums.VisualAxis.WidthAndDepth = 3 -> dymaptic.GeoBlazor.Core.Enums.VisualAxis
dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation
dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation.Area = 2 -> dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation
dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation.Diameter = 1 -> dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation
dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation.Distance = 4 -> dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation
dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation.Radius = 0 -> dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation
dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation.Width = 3 -> dymaptic.GeoBlazor.Core.Enums.VisualValueRepresentation
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Centimeters = 7 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.DecimalDegrees = 11 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Decimeters = 8 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Feet = 2 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Inches = 1 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Kilometers = 10 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Meters = 9 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Miles = 4 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Millimeters = 6 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.NauticalMiles = 5 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Unknown = 0 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualValueUnit.Yards = 3 -> dymaptic.GeoBlazor.Core.Enums.VisualValueUnit
dymaptic.GeoBlazor.Core.Enums.VisualVariableType
dymaptic.GeoBlazor.Core.Enums.VisualVariableType.Color = 2 -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
dymaptic.GeoBlazor.Core.Enums.VisualVariableType.Opacity = 3 -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
dymaptic.GeoBlazor.Core.Enums.VisualVariableType.Rotation = 1 -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
dymaptic.GeoBlazor.Core.Enums.VisualVariableType.Size = 0 -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
dymaptic.GeoBlazor.Core.Enums.WidgetLayout
dymaptic.GeoBlazor.Core.Enums.WidgetLayout.Horizontal = 1 -> dymaptic.GeoBlazor.Core.Enums.WidgetLayout
dymaptic.GeoBlazor.Core.Enums.WidgetLayout.Vertical = 0 -> dymaptic.GeoBlazor.Core.Enums.WidgetLayout
dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.AreaMeasurement2D = 0 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.AreaMeasurement3D = 1 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Attachments = 2 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Attribution = 3 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.BasemapGallery = 4 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.BasemapLayerList = 5 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.BasemapToggle = 6 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.BatchAttributeForm = 73 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.BinaryColorSizeSlider = 7 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Bookmarks = 8 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.BuildingExplorer = 9 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ButtonMenu = 10 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.CatalogLayerList = 11 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ClassedColorSlider = 12 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ClassedSizeSlider = 13 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ColorSizeSlider = 14 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ColorSlider = 15 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Compass = 16 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.CoordinateConversion = 17 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Daylight = 18 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.DirectionalPad = 19 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Directions = 20 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.DirectLineMeasurement3D = 21 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.DistanceMeasurement2D = 22 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Editor = 23 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ElevationProfile = 24 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Expand = 25 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Feature = 26 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.FeatureForm = 27 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Features = 28 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.FeatureTable = 29 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.FeatureTemplates = 30 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.FloorFilter = 31 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.FullScreen = 32 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.GraphicsLegend = 33 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.GridControls = 34 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.HeatmapSlider = 35 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Histogram = 36 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.HistogramRangeSlider = 37 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Home = 38 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.LayerList = 39 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Legend = 41 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.LineOfSight = 42 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ListItemPanel = 40 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Locate = 43 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Measurement = 44 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.NavigationToggle = 45 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.OpacitySlider = 46 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.OrientedImageryViewer = 47 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Popup = 48 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Print = 49 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ScaleBar = 50 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ScaleRangeSlider = 51 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Search = 52 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.SearchResultRenderer = 53 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ShadowCast = 54 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.SizeSlider = 55 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Sketch = 56 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Slice = 57 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Slider = 58 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.SnappingControls = 59 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Swipe = 60 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.TableList = 61 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.TableListItemPanel = 62 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.TimeSlider = 63 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.TimeZoneLabel = 64 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Track = 65 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.UtilityNetworkAssociations = 66 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.UtilityNetworkTrace = 67 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.UtilityNetworkValidateTopology = 68 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.ValuePicker = 69 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.VideoPlayer = 70 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Weather = 71 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.WidgetType.Zoom = 72 -> dymaptic.GeoBlazor.Core.Enums.WidgetType
dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState
dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState.Disabled = 0 -> dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState
dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState.Ready = 1 -> dymaptic.GeoBlazor.Core.Enums.ZoomViewModelState
dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent
dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent.Action.get -> dymaptic.GeoBlazor.Core.Components.ActionBase?
dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent.Action.init -> void
dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent.BasemapLayerListTriggerActionEvent(dymaptic.GeoBlazor.Core.Components.ActionBase? Action = null, dymaptic.GeoBlazor.Core.Components.ListItem? Item = null) -> void
dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent.Item.get -> dymaptic.GeoBlazor.Core.Components.ListItem?
dymaptic.GeoBlazor.Core.Events.BasemapLayerListTriggerActionEvent.Item.init -> void
dymaptic.GeoBlazor.Core.Events.BlurEvent
dymaptic.GeoBlazor.Core.Events.BlurEvent.BlurEvent(dymaptic.GeoBlazor.Core.Components.Views.MapView! Target, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, string! Type, double Timestamp, bool? Cancelable) -> void
dymaptic.GeoBlazor.Core.Events.BlurEvent.Target.get -> dymaptic.GeoBlazor.Core.Components.Views.MapView!
dymaptic.GeoBlazor.Core.Events.BlurEvent.Target.init -> void
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkEditEvent
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkEditEvent.Bookmark.get -> dymaptic.GeoBlazor.Core.Components.Bookmark?
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkEditEvent.Bookmark.init -> void
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkEditEvent.BookmarksBookmarkEditEvent(dymaptic.GeoBlazor.Core.Components.Bookmark? Bookmark = null) -> void
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkSelectEvent
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkSelectEvent.Bookmark.get -> dymaptic.GeoBlazor.Core.Components.Bookmark?
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkSelectEvent.Bookmark.init -> void
dymaptic.GeoBlazor.Core.Events.BookmarksBookmarkSelectEvent.BookmarksBookmarkSelectEvent(dymaptic.GeoBlazor.Core.Components.Bookmark? Bookmark = null) -> void
dymaptic.GeoBlazor.Core.Events.BookmarkSelectEvent
dymaptic.GeoBlazor.Core.Events.BookmarkSelectEvent.Bookmark.get -> dymaptic.GeoBlazor.Core.Components.Bookmark!
dymaptic.GeoBlazor.Core.Events.BookmarkSelectEvent.Bookmark.init -> void
dymaptic.GeoBlazor.Core.Events.BookmarkSelectEvent.BookmarkSelectEvent(dymaptic.GeoBlazor.Core.Components.Bookmark! Bookmark) -> void
dymaptic.GeoBlazor.Core.Events.ClickEvent
dymaptic.GeoBlazor.Core.Events.ClickEvent.Button.get -> int
dymaptic.GeoBlazor.Core.Events.ClickEvent.Button.init -> void
dymaptic.GeoBlazor.Core.Events.ClickEvent.Buttons.get -> int
dymaptic.GeoBlazor.Core.Events.ClickEvent.Buttons.init -> void
dymaptic.GeoBlazor.Core.Events.ClickEvent.ClickEvent(string! Type, int? EventId, bool? Cancelable, dymaptic.GeoBlazor.Core.Components.Geometries.Point! MapPoint, double X, double Y, int Button, int Buttons, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType) -> void
dymaptic.GeoBlazor.Core.Events.ClickEvent.MapPoint.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point!
dymaptic.GeoBlazor.Core.Events.ClickEvent.MapPoint.init -> void
dymaptic.GeoBlazor.Core.Events.ClickEvent.X.get -> double
dymaptic.GeoBlazor.Core.Events.ClickEvent.X.init -> void
dymaptic.GeoBlazor.Core.Events.ClickEvent.Y.get -> double
dymaptic.GeoBlazor.Core.Events.ClickEvent.Y.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.AltKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.AltKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.CharCode.get -> int
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.CharCode.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Code.get -> string!
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Code.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.CtrlKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.CtrlKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.DomKeyboardEvent(bool AltKey, int CharCode, string! Code, bool CtrlKey, bool IsComposing, string! Key, int KeyCode, int Location, bool MetaKey, bool Repeat, bool ShiftKey) -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.IsComposing.get -> bool
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.IsComposing.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Key.get -> string!
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Key.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.KeyCode.get -> int
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.KeyCode.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Location.get -> int
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Location.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.MetaKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.MetaKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Repeat.get -> bool
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.Repeat.init -> void
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.ShiftKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomKeyboardEvent.ShiftKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.AltKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.AltKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.Button.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.Button.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.Buttons.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.Buttons.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ClientX.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ClientX.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ClientY.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ClientY.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.CtrlKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.CtrlKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.DomMouseEvent(bool AltKey, int Button, int Buttons, int ClientX, int ClientY, bool CtrlKey, bool MetaKey, double? MovementX, double? MovementY, double OffsetX, double OffsetY, double PageX, double PageY, Microsoft.AspNetCore.Components.ElementReference? RelatedTarget, int ScreenX, int ScreenY, bool ShiftKey, int X, int Y) -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.MetaKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.MetaKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.MovementX.get -> double?
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.MovementX.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.MovementY.get -> double?
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.MovementY.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.OffsetX.get -> double
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.OffsetX.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.OffsetY.get -> double
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.OffsetY.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.PageX.get -> double
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.PageX.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.PageY.get -> double
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.PageY.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.RelatedTarget.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.RelatedTarget.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ScreenX.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ScreenX.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ScreenY.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ScreenY.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ShiftKey.get -> bool
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.ShiftKey.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.X.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.X.init -> void
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.Y.get -> int
dymaptic.GeoBlazor.Core.Events.DomMouseEvent.Y.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.DomPointerEvent(long? PointerId, double? Width, double? Height, double? Pressure, double? TangentialPressure, double? TiltX, double? TiltY, double? Twist, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType, bool? IsPrimary, bool? IsTrusted) -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Height.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Height.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.IsPrimary.get -> bool?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.IsPrimary.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.IsTrusted.get -> bool?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.IsTrusted.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.PointerId.get -> long?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.PointerId.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.PointerType.get -> dymaptic.GeoBlazor.Core.Enums.PointerType?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.PointerType.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Pressure.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Pressure.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.TangentialPressure.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.TangentialPressure.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.TiltX.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.TiltX.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.TiltY.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.TiltY.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Twist.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Twist.init -> void
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Width.get -> double?
dymaptic.GeoBlazor.Core.Events.DomPointerEvent.Width.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent
dymaptic.GeoBlazor.Core.Events.DragEvent.Action.get -> dymaptic.GeoBlazor.Core.Enums.DragAction
dymaptic.GeoBlazor.Core.Events.DragEvent.Action.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.Angle.get -> double
dymaptic.GeoBlazor.Core.Events.DragEvent.Angle.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.Button.get -> int
dymaptic.GeoBlazor.Core.Events.DragEvent.Button.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.Buttons.get -> int
dymaptic.GeoBlazor.Core.Events.DragEvent.Buttons.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.DragEvent(string! Type, int? EventId, bool? Cancelable, dymaptic.GeoBlazor.Core.Enums.DragAction Action, double X, double Y, dymaptic.GeoBlazor.Core.Components.Geometries.Point! Origin, int Button, int Buttons, double Radius, double Angle, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType) -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.Origin.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point!
dymaptic.GeoBlazor.Core.Events.DragEvent.Origin.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.Radius.get -> double
dymaptic.GeoBlazor.Core.Events.DragEvent.Radius.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.X.get -> double
dymaptic.GeoBlazor.Core.Events.DragEvent.X.init -> void
dymaptic.GeoBlazor.Core.Events.DragEvent.Y.get -> double
dymaptic.GeoBlazor.Core.Events.DragEvent.Y.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.AddedAttachments.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.AddedAttachments.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.AddedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.AddedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.DeletedAttachments.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.DeletedAttachments.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.DeletedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.DeletedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.EditedFeatures.get -> dymaptic.GeoBlazor.Core.Results.EditedFeatureResult?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.EditedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.ExceededTransferLimit.get -> bool?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.ExceededTransferLimit.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.FeatureLayerEditsEvent(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? AddedAttachments = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? AddedFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? DeletedAttachments = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? DeletedFeatures = null, dymaptic.GeoBlazor.Core.Results.EditedFeatureResult? EditedFeatures = null, bool? ExceededTransferLimit = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? UpdatedAttachments = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? UpdatedFeatures = null) -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.UpdatedAttachments.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.UpdatedAttachments.init -> void
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.UpdatedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.FeatureLayerEditsEvent.UpdatedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.FeaturesViewModelTriggerActionEvent
dymaptic.GeoBlazor.Core.Events.FeaturesViewModelTriggerActionEvent.Action.get -> dymaptic.GeoBlazor.Core.Components.ActionBase?
dymaptic.GeoBlazor.Core.Events.FeaturesViewModelTriggerActionEvent.Action.init -> void
dymaptic.GeoBlazor.Core.Events.FeaturesViewModelTriggerActionEvent.FeaturesViewModelTriggerActionEvent(dymaptic.GeoBlazor.Core.Components.ActionBase? Action = null) -> void
dymaptic.GeoBlazor.Core.Events.FocusEvent
dymaptic.GeoBlazor.Core.Events.FocusEvent.FocusEvent(dymaptic.GeoBlazor.Core.Components.Views.MapView! Target, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, string! Type, double Timestamp, bool? Cancelable) -> void
dymaptic.GeoBlazor.Core.Events.FocusEvent.Target.get -> dymaptic.GeoBlazor.Core.Components.Views.MapView!
dymaptic.GeoBlazor.Core.Events.FocusEvent.Target.init -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.AddedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventAddedFeatures!>?
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.AddedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.DeletedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventDeletedFeatures!>?
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.DeletedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.GeoJSONLayerEditsEvent(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventAddedFeatures!>? AddedFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventDeletedFeatures!>? DeletedFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventUpdatedFeatures!>? UpdatedFeatures = null) -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.UpdatedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventUpdatedFeatures!>?
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEvent.UpdatedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventAddedFeatures
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventAddedFeatures.GeoJSONLayerEditsEventAddedFeatures(dymaptic.GeoBlazor.Core.Model.ObjectId? ObjectId = null) -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventAddedFeatures.ObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId?
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventAddedFeatures.ObjectId.init -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventDeletedFeatures
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventDeletedFeatures.GeoJSONLayerEditsEventDeletedFeatures(dymaptic.GeoBlazor.Core.Model.ObjectId? ObjectId = null) -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventDeletedFeatures.ObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId?
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventDeletedFeatures.ObjectId.init -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventUpdatedFeatures
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventUpdatedFeatures.GeoJSONLayerEditsEventUpdatedFeatures(dymaptic.GeoBlazor.Core.Model.ObjectId? ObjectId = null) -> void
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventUpdatedFeatures.ObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId?
dymaptic.GeoBlazor.Core.Events.GeoJSONLayerEditsEventUpdatedFeatures.ObjectId.init -> void
dymaptic.GeoBlazor.Core.Events.HomeGoEvent
dymaptic.GeoBlazor.Core.Events.HomeGoEvent.HomeGoEvent() -> void
dymaptic.GeoBlazor.Core.Events.HomeViewModelGoEvent
dymaptic.GeoBlazor.Core.Events.HomeViewModelGoEvent.HomeViewModelGoEvent() -> void
dymaptic.GeoBlazor.Core.Events.IDomUiEvent
dymaptic.GeoBlazor.Core.Events.JsEvent
dymaptic.GeoBlazor.Core.Events.JsEvent.Cancelable.get -> bool?
dymaptic.GeoBlazor.Core.Events.JsEvent.Cancelable.init -> void
dymaptic.GeoBlazor.Core.Events.JsEvent.EventId.get -> int?
dymaptic.GeoBlazor.Core.Events.JsEvent.EventId.init -> void
dymaptic.GeoBlazor.Core.Events.JsEvent.JsEvent(string! Type, int? EventId, bool? Cancelable, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType) -> void
dymaptic.GeoBlazor.Core.Events.JsEvent.Native.get -> dymaptic.GeoBlazor.Core.Events.DomPointerEvent!
dymaptic.GeoBlazor.Core.Events.JsEvent.Native.init -> void
dymaptic.GeoBlazor.Core.Events.JsEvent.PointerType.get -> dymaptic.GeoBlazor.Core.Enums.PointerType?
dymaptic.GeoBlazor.Core.Events.JsEvent.PointerType.init -> void
dymaptic.GeoBlazor.Core.Events.JsEvent.Timestamp.get -> double
dymaptic.GeoBlazor.Core.Events.JsEvent.Timestamp.init -> void
dymaptic.GeoBlazor.Core.Events.JsEvent.Type.get -> string!
dymaptic.GeoBlazor.Core.Events.JsEvent.Type.init -> void
dymaptic.GeoBlazor.Core.Events.KeyDownEvent
dymaptic.GeoBlazor.Core.Events.KeyDownEvent.Key.get -> string!
dymaptic.GeoBlazor.Core.Events.KeyDownEvent.Key.init -> void
dymaptic.GeoBlazor.Core.Events.KeyDownEvent.KeyDownEvent(string! Type, int? EventId, bool? Cancelable, bool Repeat, string! Key, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType) -> void
dymaptic.GeoBlazor.Core.Events.KeyDownEvent.Repeat.get -> bool
dymaptic.GeoBlazor.Core.Events.KeyDownEvent.Repeat.init -> void
dymaptic.GeoBlazor.Core.Events.KeyUpEvent
dymaptic.GeoBlazor.Core.Events.KeyUpEvent.Key.get -> string!
dymaptic.GeoBlazor.Core.Events.KeyUpEvent.Key.init -> void
dymaptic.GeoBlazor.Core.Events.KeyUpEvent.KeyUpEvent(string! Type, int? EventId, bool? Cancelable, string! Key, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType) -> void
dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent
dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent.Action.get -> dymaptic.GeoBlazor.Core.Components.ActionBase?
dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent.Action.init -> void
dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent.Item.get -> dymaptic.GeoBlazor.Core.Components.ListItem?
dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent.Item.init -> void
dymaptic.GeoBlazor.Core.Events.LayerListTriggerActionEvent.LayerListTriggerActionEvent(dymaptic.GeoBlazor.Core.Components.ActionBase? Action = null, dymaptic.GeoBlazor.Core.Components.ListItem? Item = null) -> void
dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent
dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent.Action.get -> dymaptic.GeoBlazor.Core.Components.ActionBase?
dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent.Action.init -> void
dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent.Item.get -> dymaptic.GeoBlazor.Core.Components.ListItem?
dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent.Item.init -> void
dymaptic.GeoBlazor.Core.Events.LayerListViewModelTriggerActionEvent.LayerListViewModelTriggerActionEvent(dymaptic.GeoBlazor.Core.Components.ActionBase? Action = null, dymaptic.GeoBlazor.Core.Components.ListItem? Item = null) -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent
dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent.Error.get -> dymaptic.GeoBlazor.Core.Exceptions.JavascriptError!
dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent.Error.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent.Layer.get -> dymaptic.GeoBlazor.Core.Components.Layers.Layer!
dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent.Layer.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateErrorEvent.LayerViewCreateErrorEvent(dymaptic.GeoBlazor.Core.Components.Layers.Layer! Layer, dymaptic.GeoBlazor.Core.Exceptions.JavascriptError! Error) -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent
dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent.Layer.get -> dymaptic.GeoBlazor.Core.Components.Layers.Layer?
dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent.Layer.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent.LayerView.get -> dymaptic.GeoBlazor.Core.Components.LayerView?
dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent.LayerView.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateEvent.LayerViewCreateEvent(dymaptic.GeoBlazor.Core.Components.Layers.Layer? Layer, dymaptic.GeoBlazor.Core.Components.LayerView? LayerView) -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.IsBasemapLayer.get -> bool
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.IsBasemapLayer.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.IsReferenceLayer.get -> bool
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.IsReferenceLayer.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.Layer.get -> dymaptic.GeoBlazor.Core.Components.Layers.Layer?
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.Layer.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerGeoBlazorId.get -> System.Guid?
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerGeoBlazorId.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerObjectRef.get -> Microsoft.JSInterop.IJSObjectReference!
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerObjectRef.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerView.get -> dymaptic.GeoBlazor.Core.Components.LayerView?
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerView.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerViewCreateInternalEvent(Microsoft.JSInterop.IJSObjectReference! LayerObjectRef, Microsoft.JSInterop.IJSObjectReference! LayerViewObjectRef, System.Guid? LayerGeoBlazorId, dymaptic.GeoBlazor.Core.Components.Layers.Layer? Layer, dymaptic.GeoBlazor.Core.Components.LayerView? LayerView, bool IsBasemapLayer, bool IsReferenceLayer) -> void
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerViewObjectRef.get -> Microsoft.JSInterop.IJSObjectReference!
dymaptic.GeoBlazor.Core.Events.LayerViewCreateInternalEvent.LayerViewObjectRef.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent
dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent.Layer.get -> dymaptic.GeoBlazor.Core.Components.Layers.Layer!
dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent.Layer.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent.LayerView.get -> dymaptic.GeoBlazor.Core.Components.LayerView!
dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent.LayerView.init -> void
dymaptic.GeoBlazor.Core.Events.LayerViewDestroyEvent.LayerViewDestroyEvent(dymaptic.GeoBlazor.Core.Components.Layers.Layer! Layer, dymaptic.GeoBlazor.Core.Components.LayerView! LayerView) -> void
dymaptic.GeoBlazor.Core.Events.LocateErrorEvent
dymaptic.GeoBlazor.Core.Events.LocateErrorEvent.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Events.LocateErrorEvent.Error.init -> void
dymaptic.GeoBlazor.Core.Events.LocateErrorEvent.LocateErrorEvent(dymaptic.GeoBlazor.Core.Model.Error? Error = null) -> void
dymaptic.GeoBlazor.Core.Events.LocateEvent
dymaptic.GeoBlazor.Core.Events.LocateEvent.LocateEvent(string? Position = null) -> void
dymaptic.GeoBlazor.Core.Events.LocateEvent.Position.get -> string?
dymaptic.GeoBlazor.Core.Events.LocateEvent.Position.init -> void
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent.Error.init -> void
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent.LocateViewModelLocateErrorEvent(dymaptic.GeoBlazor.Core.Model.Error? Error = null, string? StringError = null) -> void
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent.StringError.get -> string?
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateErrorEvent.StringError.init -> void
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateEvent
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateEvent.LocateViewModelLocateEvent(string? Position = null) -> void
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateEvent.Position.get -> string?
dymaptic.GeoBlazor.Core.Events.LocateViewModelLocateEvent.Position.init -> void
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.DeltaY.get -> double
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.DeltaY.init -> void
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.MouseWheelEvent(string! Type, int? EventId, bool? Cancelable, double X, double Y, double DeltaY, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType) -> void
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.X.get -> double
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.X.init -> void
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.Y.get -> double
dymaptic.GeoBlazor.Core.Events.MouseWheelEvent.Y.init -> void
dymaptic.GeoBlazor.Core.Events.PointerEvent
dymaptic.GeoBlazor.Core.Events.PointerEvent.Button.get -> int
dymaptic.GeoBlazor.Core.Events.PointerEvent.Button.init -> void
dymaptic.GeoBlazor.Core.Events.PointerEvent.Buttons.get -> int
dymaptic.GeoBlazor.Core.Events.PointerEvent.Buttons.init -> void
dymaptic.GeoBlazor.Core.Events.PointerEvent.PointerEvent(string! Type, int? EventId, bool? Cancelable, long PointerId, dymaptic.GeoBlazor.Core.Enums.PointerType? PointerType, double X, double Y, int Button, int Buttons, double Timestamp, dymaptic.GeoBlazor.Core.Events.DomPointerEvent! Native) -> void
dymaptic.GeoBlazor.Core.Events.PointerEvent.PointerId.get -> long
dymaptic.GeoBlazor.Core.Events.PointerEvent.PointerId.init -> void
dymaptic.GeoBlazor.Core.Events.PointerEvent.X.get -> double
dymaptic.GeoBlazor.Core.Events.PointerEvent.X.init -> void
dymaptic.GeoBlazor.Core.Events.PointerEvent.Y.get -> double
dymaptic.GeoBlazor.Core.Events.PointerEvent.Y.init -> void
dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent
dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent.Action.get -> dymaptic.GeoBlazor.Core.Components.ActionBase!
dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent.Action.init -> void
dymaptic.GeoBlazor.Core.Events.PopupTriggerActionEvent.PopupTriggerActionEvent(dymaptic.GeoBlazor.Core.Components.ActionBase! Action) -> void
dymaptic.GeoBlazor.Core.Events.RefreshEvent
dymaptic.GeoBlazor.Core.Events.RefreshEvent.DataChanged.get -> bool?
dymaptic.GeoBlazor.Core.Events.RefreshEvent.DataChanged.init -> void
dymaptic.GeoBlazor.Core.Events.RefreshEvent.RefreshEvent(bool? DataChanged = null) -> void
dymaptic.GeoBlazor.Core.Events.ResizeEvent
dymaptic.GeoBlazor.Core.Events.ResizeEvent.Height.get -> double
dymaptic.GeoBlazor.Core.Events.ResizeEvent.Height.init -> void
dymaptic.GeoBlazor.Core.Events.ResizeEvent.OldHeight.get -> double
dymaptic.GeoBlazor.Core.Events.ResizeEvent.OldHeight.init -> void
dymaptic.GeoBlazor.Core.Events.ResizeEvent.OldWidth.get -> double
dymaptic.GeoBlazor.Core.Events.ResizeEvent.OldWidth.init -> void
dymaptic.GeoBlazor.Core.Events.ResizeEvent.ResizeEvent(double OldWidth, double OldHeight, double Width, double Height) -> void
dymaptic.GeoBlazor.Core.Events.ResizeEvent.Width.get -> double
dymaptic.GeoBlazor.Core.Events.ResizeEvent.Width.init -> void
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.AddedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.AddedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.DeletedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.DeletedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.ExceededTransferLimit.get -> bool?
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.ExceededTransferLimit.init -> void
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.SceneLayerEditsEvent(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? AddedFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? DeletedFeatures = null, bool? ExceededTransferLimit = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>? UpdatedFeatures = null) -> void
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.UpdatedFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.FeatureEditResult!>?
dymaptic.GeoBlazor.Core.Events.SceneLayerEditsEvent.UpdatedFeatures.init -> void
dymaptic.GeoBlazor.Core.Events.SearchBlurEvent
dymaptic.GeoBlazor.Core.Events.SearchBlurEvent.SearchBlurEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchClearEvent
dymaptic.GeoBlazor.Core.Events.SearchClearEvent.SearchClearEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.ActiveSourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.ActiveSourceIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.Errors.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>?
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.Errors.init -> void
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.NumResults.get -> double?
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.NumResults.init -> void
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults!>?
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.Results.init -> void
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.SearchCompleteEvent(int? ActiveSourceIndex = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>? Errors = null, double? NumResults = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults!>? Results = null, string? SearchTerm = null) -> void
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Events.SearchCompleteEvent.SearchTerm.init -> void
dymaptic.GeoBlazor.Core.Events.SearchFocusEvent
dymaptic.GeoBlazor.Core.Events.SearchFocusEvent.SearchFocusEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.Result.get -> dymaptic.GeoBlazor.Core.Results.SearchResult?
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.Result.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.SearchSelectResultEvent(dymaptic.GeoBlazor.Core.Results.SearchResult? Result = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.Source.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.SearchSelectResultEvent.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SearchStartEvent
dymaptic.GeoBlazor.Core.Events.SearchStartEvent.SearchStartEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.ActiveSourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.ActiveSourceIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.Errors.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>?
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.Errors.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.NumResults.get -> double?
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.NumResults.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults!>?
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.Results.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.SearchSuggestCompleteEvent(int? ActiveSourceIndex = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>? Errors = null, double? NumResults = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults!>? Results = null, string? SearchTerm = null) -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Events.SearchSuggestCompleteEvent.SearchTerm.init -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestStartEvent
dymaptic.GeoBlazor.Core.Events.SearchSuggestStartEvent.SearchSuggestStartEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchSuggestStartEvent.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Events.SearchSuggestStartEvent.SearchTerm.set -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchClearEvent
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchClearEvent.SearchViewModelSearchClearEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.ActiveSourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.ActiveSourceIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.Errors.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.Errors.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.NumResults.get -> double?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.NumResults.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults!>?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.Results.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.SearchTerm.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchCompleteEvent.SearchViewModelSearchCompleteEvent(int? ActiveSourceIndex = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>? Errors = null, double? NumResults = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults!>? Results = null, string? SearchTerm = null) -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchStartEvent
dymaptic.GeoBlazor.Core.Events.SearchViewModelSearchStartEvent.SearchViewModelSearchStartEvent() -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.Result.get -> dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.Result.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.SearchViewModelSelectResultEvent(dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult? Result = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.Source.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSelectResultEvent.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.ActiveSourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.ActiveSourceIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.Errors.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.Errors.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.NumResults.get -> double?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.NumResults.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults!>?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.Results.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.SearchTerm.init -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestCompleteEvent.SearchViewModelSuggestCompleteEvent(int? ActiveSourceIndex = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.Error!>? Errors = null, double? NumResults = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults!>? Results = null, string? SearchTerm = null) -> void
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestStartEvent
dymaptic.GeoBlazor.Core.Events.SearchViewModelSuggestStartEvent.SearchViewModelSuggestStartEvent() -> void
dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent
dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent.OldValue.get -> double
dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent.OldValue.init -> void
dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent.SliderMaxChangeEvent(double OldValue, double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderMaxChangeEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderMaxClickEvent
dymaptic.GeoBlazor.Core.Events.SliderMaxClickEvent.SliderMaxClickEvent(double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderMaxClickEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderMaxClickEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent
dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent.OldValue.get -> double
dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent.OldValue.init -> void
dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent.SliderMinChangeEvent(double OldValue, double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderMinChangeEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderMinClickEvent
dymaptic.GeoBlazor.Core.Events.SliderMinClickEvent.SliderMinClickEvent(double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderMinClickEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderMinClickEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.Index.get -> int
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.Index.init -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.SliderSegmentClickEvent(int Index, System.Collections.Generic.IReadOnlyCollection<double>! ThumbIndices, double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.ThumbIndices.get -> System.Collections.Generic.IReadOnlyCollection<double>!
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.ThumbIndices.init -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderSegmentClickEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.Index.get -> int
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.Index.init -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.SliderSegmentDragEvent(int Index, dymaptic.GeoBlazor.Core.Enums.SliderDragEventState State, System.Collections.Generic.IReadOnlyCollection<double>! ThumbIndices) -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.State.get -> dymaptic.GeoBlazor.Core.Enums.SliderDragEventState
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.State.init -> void
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.ThumbIndices.get -> System.Collections.Generic.IReadOnlyCollection<double>!
dymaptic.GeoBlazor.Core.Events.SliderSegmentDragEvent.ThumbIndices.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.Index.get -> int
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.Index.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.OldValue.get -> double
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.OldValue.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.SliderThumbChangeEvent(int Index, double OldValue, double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderThumbChangeEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent
dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent.Index.get -> int
dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent.Index.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent.SliderThumbClickEvent(int Index, double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderThumbClickEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.Index.get -> int
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.Index.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.SliderThumbDragEvent(int Index, dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState State, double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.State.get -> dymaptic.GeoBlazor.Core.Enums.SliderThumbDragState
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.State.init -> void
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderThumbDragEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.ConfigIndex.get -> int
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.ConfigIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.GroupIndex.get -> int
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.GroupIndex.init -> void
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.SliderTickClickEvent(double Value, int ConfigIndex, int GroupIndex) -> void
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderTickClickEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.SliderTrackClickEvent
dymaptic.GeoBlazor.Core.Events.SliderTrackClickEvent.SliderTrackClickEvent(double Value) -> void
dymaptic.GeoBlazor.Core.Events.SliderTrackClickEvent.Value.get -> double
dymaptic.GeoBlazor.Core.Events.SliderTrackClickEvent.Value.init -> void
dymaptic.GeoBlazor.Core.Events.TrackTrackErrorEvent
dymaptic.GeoBlazor.Core.Events.TrackTrackErrorEvent.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Events.TrackTrackErrorEvent.Error.init -> void
dymaptic.GeoBlazor.Core.Events.TrackTrackErrorEvent.TrackTrackErrorEvent(dymaptic.GeoBlazor.Core.Model.Error? Error = null) -> void
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.ComponentIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.ComponentIndex.init -> void
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.Coordinates.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.Coordinates.init -> void
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.VertexAddEventInfoVertices(int? ComponentIndex = null, System.Collections.Generic.IReadOnlyCollection<double>? Coordinates = null, int? VertexIndex = null) -> void
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.VertexIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.VertexAddEventInfoVertices.VertexIndex.init -> void
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.ComponentIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.ComponentIndex.init -> void
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.Coordinates.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.Coordinates.init -> void
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.VertexIndex.get -> int?
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.VertexIndex.init -> void
dymaptic.GeoBlazor.Core.Events.VertexRemoveEventInfoVertices.VertexRemoveEventInfoVertices(int? ComponentIndex = null, System.Collections.Generic.IReadOnlyCollection<double>? Coordinates = null, int? VertexIndex = null) -> void
dymaptic.GeoBlazor.Core.Exceptions.InvalidChildElementException
dymaptic.GeoBlazor.Core.Exceptions.InvalidChildElementException.InvalidChildElementException(string! parentType, string! childType) -> void
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.JavascriptError(string? Message, string? Name, string? Stack = null) -> void
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.Message.get -> string?
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.Message.init -> void
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.Name.get -> string?
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.Name.init -> void
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.Stack.get -> string?
dymaptic.GeoBlazor.Core.Exceptions.JavascriptError.Stack.init -> void
dymaptic.GeoBlazor.Core.Exceptions.JavascriptException
dymaptic.GeoBlazor.Core.Exceptions.JavascriptException.JavascriptException(dymaptic.GeoBlazor.Core.Exceptions.JavascriptError! error) -> void
dymaptic.GeoBlazor.Core.Exceptions.JavascriptException.Name.get -> string?
dymaptic.GeoBlazor.Core.Exceptions.JavascriptException.Stack.get -> string?
dymaptic.GeoBlazor.Core.Exceptions.MissingMapException
dymaptic.GeoBlazor.Core.Exceptions.MissingMapException.MissingMapException() -> void
dymaptic.GeoBlazor.Core.Exceptions.MissingRequiredChildElementException
dymaptic.GeoBlazor.Core.Exceptions.MissingRequiredChildElementException.MissingRequiredChildElementException(string! parentType, string! childType) -> void
dymaptic.GeoBlazor.Core.Exceptions.MissingRequiredOptionsChildElementException
dymaptic.GeoBlazor.Core.Exceptions.MissingRequiredOptionsChildElementException.MissingRequiredOptionsChildElementException(string! parentType, System.Collections.Generic.IEnumerable<string!>! options) -> void
dymaptic.GeoBlazor.Core.Exceptions.UnMatchedTargetNameException
dymaptic.GeoBlazor.Core.Exceptions.UnMatchedTargetNameException.UnMatchedTargetNameException(string! targetName, string! watchExpression) -> void
dymaptic.GeoBlazor.Core.Functions.BaseFilterPredicate
dymaptic.GeoBlazor.Core.Functions.BasemapFilter
dymaptic.GeoBlazor.Core.Functions.ConvertFunction
dymaptic.GeoBlazor.Core.Functions.ConvertFunction.ConvertFunction(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.ConvertFunction.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.ConvertFunction.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.DateLabelFormatter
dymaptic.GeoBlazor.Core.Functions.FetchFeatureInfoFunction
dymaptic.GeoBlazor.Core.Functions.FilterFunction
dymaptic.GeoBlazor.Core.Functions.FilterFunction.FilterFunction(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.FilterFunction.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.FilterFunction.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.FormatFunction
dymaptic.GeoBlazor.Core.Functions.FormatFunction.FormatFunction(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.FormatFunction.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.FormatFunction.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.GetResultsHandler
dymaptic.GeoBlazor.Core.Functions.GetSpriteInfo
dymaptic.GeoBlazor.Core.Functions.GetSpriteInfo.GetSpriteInfo(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.GetSpriteInfo.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.GetSpriteInfo.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.GetSuggestionsHandler
dymaptic.GeoBlazor.Core.Functions.GoToOverride
dymaptic.GeoBlazor.Core.Functions.GroupByFunction
dymaptic.GeoBlazor.Core.Functions.GroupByFunction.GroupByFunction(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.GroupByFunction.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.GroupByFunction.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.InputCreatedFunction
dymaptic.GeoBlazor.Core.Functions.InputParser
dymaptic.GeoBlazor.Core.Functions.InputParser.InputParser(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.InputParser.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.InputParser.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.LayerListFilterPredicate
dymaptic.GeoBlazor.Core.Functions.PixelFilterFunction
dymaptic.GeoBlazor.Core.Functions.ReferenceFilterPredicate
dymaptic.GeoBlazor.Core.Functions.ReverseConvertFunction
dymaptic.GeoBlazor.Core.Functions.ReverseConvertFunction.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.ReverseConvertFunction.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.ReverseConvertFunction.ReverseConvertFunction(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter
dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter.JavaScriptFunction.get -> string!
dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter.JavaScriptFunction.init -> void
dymaptic.GeoBlazor.Core.Functions.SliderLabelFormatter.SliderLabelFormatter(string! JavaScriptFunction) -> void
dymaptic.GeoBlazor.Core.Functions.ThumbCreatedFunction
dymaptic.GeoBlazor.Core.Functions.TickCreatedFunction
dymaptic.GeoBlazor.Core.Functions.UpdateBasemapsCallback
dymaptic.GeoBlazor.Core.GeoBlazorSettings
dymaptic.GeoBlazor.Core.GeoBlazorSettings.GeoBlazorSettings() -> void
dymaptic.GeoBlazor.Core.GeoBlazorSettings.LicenseKey.get -> string?
dymaptic.GeoBlazor.Core.GeoBlazorSettings.LicenseKey.set -> void
dymaptic.GeoBlazor.Core.GeoBlazorSettings.RegistrationKey.get -> string?
dymaptic.GeoBlazor.Core.GeoBlazorSettings.RegistrationKey.set -> void
dymaptic.GeoBlazor.Core.IAppValidator
dymaptic.GeoBlazor.Core.IAppValidator.ValidateLicense() -> System.Threading.Tasks.ValueTask
dymaptic.GeoBlazor.Core.Interfaces.IAPIKeyMixin
dymaptic.GeoBlazor.Core.Interfaces.IAPIKeyMixin.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IAPIKeyMixin.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IAPIKeyMixin.GetApiKey() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IAPIKeyMixin.SetApiKey(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.Copyright.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.GetTileInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TileInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.SetTileInfo(dymaptic.GeoBlazor.Core.Components.TileInfo! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.TileInfo.get -> dymaptic.GeoBlazor.Core.Components.TileInfo?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISCachedService.TileInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.Copyright.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Interfaces.IArcGISMapService.Version.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IAttributeBinsQuery
dymaptic.GeoBlazor.Core.Interfaces.IAttributeBinsQueryBinParameters
dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableGroupElementElements
dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplate
dymaptic.GeoBlazor.Core.Interfaces.IAttributeTableTemplateElements
dymaptic.GeoBlazor.Core.Interfaces.IBasemapGalleryWidgetSource
dymaptic.GeoBlazor.Core.Interfaces.IBasemapLayerListCatalogOptionsVisibleElements
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.BlendMode.get -> dymaptic.GeoBlazor.Core.Enums.BlendMode?
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.BlendMode.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.Effect.get -> dymaptic.GeoBlazor.Core.Model.Effect?
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.Effect.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.GetBlendMode() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.BlendMode?>!
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.GetEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Effect?>!
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.SetBlendMode(dymaptic.GeoBlazor.Core.Enums.BlendMode? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IBlendLayer.SetEffect(dymaptic.GeoBlazor.Core.Model.Effect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ICatalogLayerListWidget
dymaptic.GeoBlazor.Core.Interfaces.IChartMediaInfo
dymaptic.GeoBlazor.Core.Interfaces.IChartMediaInfo.GetValue() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?>!
dymaptic.GeoBlazor.Core.Interfaces.IChartMediaInfo.SetValue(dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IChartMediaInfo.Value.get -> dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue?
dymaptic.GeoBlazor.Core.Interfaces.IChartMediaInfo.Value.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IClassBreaksRendererBackgroundFillSymbol
dymaptic.GeoBlazor.Core.Interfaces.IClosestFacilityParametersFacilities
dymaptic.GeoBlazor.Core.Interfaces.IClosestFacilityParametersIncidents
dymaptic.GeoBlazor.Core.Interfaces.IColorRampServiceCreateColorRamp
dymaptic.GeoBlazor.Core.Interfaces.IColorSizeSliderWidgetUpdateVisualVariables
dymaptic.GeoBlazor.Core.Interfaces.ICoverageInfoCoverageDescription
dymaptic.GeoBlazor.Core.Interfaces.ICreateFeaturesWorkflowDataFullTemplate
dymaptic.GeoBlazor.Core.Interfaces.ICreateToolEventInfo
dymaptic.GeoBlazor.Core.Interfaces.ICreationInfoTemplate
dymaptic.GeoBlazor.Core.Interfaces.ICustomParametersMixin
dymaptic.GeoBlazor.Core.Interfaces.ICustomParametersMixin.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Interfaces.ICustomParametersMixin.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ICustomParametersMixin.GetCustomParameters() -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string!, object!>?>!
dymaptic.GeoBlazor.Core.Interfaces.ICustomParametersMixin.SetCustomParameters(System.Collections.Generic.Dictionary<string!, object!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.DisplayFilterEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.DisplayFilterEnabled.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.DisplayFilterInfo.get -> dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.DisplayFilterInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.GetDisplayFilterEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.GetDisplayFilterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.SetDisplayFilterEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IDisplayFilteredLayer.SetDisplayFilterInfo(dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IDynamicDataLayerDataSource
dymaptic.GeoBlazor.Core.Interfaces.IEditorViewModelActiveWorkflow
dymaptic.GeoBlazor.Core.Interfaces.IEditorViewModelGetTemplatesForLayer
dymaptic.GeoBlazor.Core.Interfaces.IEditorWidgetActiveWorkflow
dymaptic.GeoBlazor.Core.Interfaces.IElement
dymaptic.GeoBlazor.Core.Interfaces.IElementsAttributeTableElement
dymaptic.GeoBlazor.Core.Interfaces.IElementsElement
dymaptic.GeoBlazor.Core.Interfaces.IElevationLayer
dymaptic.GeoBlazor.Core.Interfaces.IElevationSampler
dymaptic.GeoBlazor.Core.Interfaces.IElevationSource
dymaptic.GeoBlazor.Core.Interfaces.IElevationSource.IElevationSource() -> void
dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentLighting
dymaptic.GeoBlazor.Core.Interfaces.IEnvironmentWeather
dymaptic.GeoBlazor.Core.Interfaces.IFeatureEffectLayer
dymaptic.GeoBlazor.Core.Interfaces.IFeatureEffectLayer.FeatureEffect.get -> dymaptic.GeoBlazor.Core.Components.FeatureEffect?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureEffectLayer.FeatureEffect.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureEffectLayer.GetFeatureEffect() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureEffect?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureEffectLayer.SetFeatureEffect(dymaptic.GeoBlazor.Core.Components.FeatureEffect? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureFormViewModelInputs
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Capabilities.get -> dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Copyright.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DateFieldsTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DateFieldsTimeZone.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DatesInUnknownTimezone.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DefinitionExpression.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DisplayField.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.DisplayField.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.EditFieldsInfo.get -> dymaptic.GeoBlazor.Core.Model.EditFieldsInfo?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.EditingInfo.get -> dymaptic.GeoBlazor.Core.Model.EditingInfo?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.EffectiveCapabilities.get -> dymaptic.GeoBlazor.Core.Components.Capabilities?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.EffectiveEditingEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ElevationInfo.get -> dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ElevationInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.FieldsIndex.get -> dymaptic.GeoBlazor.Core.Model.FieldsIndex?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.FloorInfo.get -> dymaptic.GeoBlazor.Core.Components.LayerFloorInfo?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.FloorInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.FullExtent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.FullExtent.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GeometryFieldsInfo.get -> dymaptic.GeoBlazor.Core.Model.GeometryFieldsInfo?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetDateFieldsTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetDatesInUnknownTimezone() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetDisplayField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetEditFieldsInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.EditFieldsInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetEditingInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.EditingInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetEffectiveCapabilities() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Capabilities?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetEffectiveEditingEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetElevationInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetField(string! fieldName) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Field?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetFieldDomain(string! fieldName, dymaptic.GeoBlazor.Core.Components.Graphic? feature = null) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Domain?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetFieldsIndex() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.FieldsIndex?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetFloorInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.LayerFloorInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetFullExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Extent?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetGdbVersion() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetGeometryFieldsInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GeometryFieldsInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetGeometryType() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.FeatureGeometryType?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetHasM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetHasZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetHistoricMoment() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetIsTable() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetLayerIndex() -> System.Threading.Tasks.Task<int?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetObjectIdField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetPreferredTimeZone() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetRelationships() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Relationship!>?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetReturnM() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetReturnZ() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetServiceDefinitionExpression() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetServiceItemId() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetSourceJSON() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetSubtypeField() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetSubtypes() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Subtype!>?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetTitle() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.GetVersion() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.HasM.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.HasM.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.HasZ.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.HasZ.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.HistoricMoment.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.HistoricMoment.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.IsTable.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.LayerIndex.get -> int?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.LayerIndex.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.PreferredTimeZone.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Relationships.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Relationship!>?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ReturnM.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ReturnM.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ReturnZ.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ReturnZ.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ServiceDefinitionExpression.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.ServiceItemId.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetDateFieldsTimeZone(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetDefinitionExpression(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetDisplayField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetElevationInfo(dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetFloorInfo(dymaptic.GeoBlazor.Core.Components.LayerFloorInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetGdbVersion(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetHasM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetHasZ(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetHistoricMoment(System.DateTime? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetLayerIndex(int? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetObjectIdField(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetReturnM(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetReturnZ(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetSourceJSON(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetTitle(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SourceJSON.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SourceJSON.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.SubtypeField.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Subtypes.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Subtype!>?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Title.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Title.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Url.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Url.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureLayerBase.Version.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction
dymaptic.GeoBlazor.Core.Interfaces.IFeatureReductionLayer
dymaptic.GeoBlazor.Core.Interfaces.IFeatureReductionLayer.FeatureReduction.get -> dymaptic.GeoBlazor.Core.Interfaces.IFeatureReduction?
dymaptic.GeoBlazor.Core.Interfaces.IFeatureReductionLayer.FeatureReduction.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IFeatureServiceResourcesBundleLayers
dymaptic.GeoBlazor.Core.Interfaces.IFeatureSetLayer
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableCellDblclickEventNative
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableCellKeydownEventNative
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableViewModelActiveFilters
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableViewModelCellDblclickEventNative
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableViewModelCellPointeroutEventNative
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableViewModelColumns
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableWidgetActiveFilters
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableWidgetColumns
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableWidgetFindColumn
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTableWidgetLayers
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplatesViewModelItems
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplatesViewModelLayers
dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplatesWidgetLayers
dymaptic.GeoBlazor.Core.Interfaces.IFeatureViewModel
dymaptic.GeoBlazor.Core.Interfaces.IFeatureWidget
dymaptic.GeoBlazor.Core.Interfaces.IFormTemplate
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GeolocationOptions.get -> dymaptic.GeoBlazor.Core.Components.GeolocationOptions?
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GeolocationOptions.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GetGeolocationOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.GeolocationOptions?>!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GetGoToLocationEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GetGraphic() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Graphic?>!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GetScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GoToLocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.GoToLocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.Graphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.Graphic.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.Scale.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.Scale.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.SetGeolocationOptions(dymaptic.GeoBlazor.Core.Components.GeolocationOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.SetGoToLocationEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.SetGraphic(dymaptic.GeoBlazor.Core.Components.Graphic! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IGeolocationPositioning.SetScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IGoTo
dymaptic.GeoBlazor.Core.Interfaces.IGoTo.GoToOverride.get -> dymaptic.GeoBlazor.Core.Functions.GoToOverride?
dymaptic.GeoBlazor.Core.Interfaces.IGoTo.GoToOverride.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IGoTo.HasGoToOverride.get -> bool
dymaptic.GeoBlazor.Core.Interfaces.IGoTo.OnJsGoToOverride(Microsoft.JSInterop.IJSStreamReference! jsStreamReference) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IGroupLayer
dymaptic.GeoBlazor.Core.Interfaces.IGroupLayer.Layers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Interfaces.IGroupLayer.Layers.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.GetHighlightOptions() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.HighlightOptions?>!
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.Highlight(dymaptic.GeoBlazor.Core.Components.Graphic! graphic) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.Highlight(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.Highlight(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>! objectIds) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Handle!>!
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.HighlightOptions.get -> dymaptic.GeoBlazor.Core.Components.HighlightOptions?
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.HighlightOptions.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IHighlightLayerViewMixin.SetHighlightOptions(dymaptic.GeoBlazor.Core.Components.HighlightOptions? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IHitTestItem
dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer
dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer.Type.get -> dymaptic.GeoBlazor.Core.Enums.ImageryRendererType
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.AddToBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.AddToMultidimensionalDefinition(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.BandIds.get -> System.Collections.Generic.IReadOnlyList<long>?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.BandIds.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Copyright.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.FetchPixels(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, int width, int height, dymaptic.GeoBlazor.Core.Options.ImageryTileMixinFetchPixelsOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PixelData?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetBandIds() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<long>?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetInterpolation() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Enums.Interpolation?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetLegendEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetMultidimensionalDefinition() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetMultidimensionalSubset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetRenderer() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetServiceRasterInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.RasterInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Identify(dymaptic.GeoBlazor.Core.Components.Geometries.Point! point, dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult?>!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Interpolation.get -> dymaptic.GeoBlazor.Core.Enums.Interpolation?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Interpolation.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.LegendEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.LegendEnabled.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.MultidimensionalDefinition.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.MultidimensionalDefinition.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.MultidimensionalSubset.get -> dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.MultidimensionalSubset.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.RemoveFromBandIds(params long[]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.RemoveFromMultidimensionalDefinition(params dymaptic.GeoBlazor.Core.Components.DimensionalDefinition![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Renderer.get -> dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.Renderer.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.ServiceRasterInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterInfo?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetBandIds(System.Collections.Generic.IReadOnlyList<long>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetInterpolation(dymaptic.GeoBlazor.Core.Enums.Interpolation? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetLegendEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetMultidimensionalDefinition(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetMultidimensionalSubset(dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetRenderer(dymaptic.GeoBlazor.Core.Interfaces.IImageryRenderer? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.AbortManager.get -> dymaptic.GeoBlazor.Core.Model.AbortManager?
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.AbortManager.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.CoreJsModule.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.Id.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.JsComponentReference.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Interfaces.IInteractiveRecord.JsComponentReference.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IIntersectItem
dymaptic.GeoBlazor.Core.Interfaces.ILayerParent
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.Add(dymaptic.GeoBlazor.Core.Components.Layers.Layer! layer, int index) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.AddMany(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>! layers, int index) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.AddToLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.FindLayerById(string! layerId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.GetLayers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?>!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.Layers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.Layers.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.Remove(dymaptic.GeoBlazor.Core.Components.Layers.Layer! layer) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.RemoveAll() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer![]?>!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.RemoveFromLayers(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.RemoveMany(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>! layers) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer![]?>!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.Reorder(dymaptic.GeoBlazor.Core.Components.Layers.Layer! layer, int index) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Interfaces.ILayersMixin.SetLayers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ILegendElement
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.DisposeAsync() -> System.Threading.Tasks.ValueTask
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.Layer.get -> dymaptic.GeoBlazor.Core.Components.Layers.Layer?
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.Parent.get -> dymaptic.GeoBlazor.Core.Components.MapComponent?
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.ValidateRequiredChildren() -> void
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.ValidateRequiredGeneratedChildren() -> void
dymaptic.GeoBlazor.Core.Interfaces.IMapComponent.View.get -> dymaptic.GeoBlazor.Core.Components.Views.MapView?
dymaptic.GeoBlazor.Core.Interfaces.IMeasurementViewModelActiveViewModel
dymaptic.GeoBlazor.Core.Interfaces.IMeasurementWidgetActiveWidget
dymaptic.GeoBlazor.Core.Interfaces.IMeshComponentMaterial
dymaptic.GeoBlazor.Core.Interfaces.IMeshUtilsSource
dymaptic.GeoBlazor.Core.Interfaces.IMeshVertexSpace
dymaptic.GeoBlazor.Core.Interfaces.INamedTraceConfigurationTraceConfiguration
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationField.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationField.set -> void
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationMaxValue.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationMaxValue.set -> void
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationMinValue.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationMinValue.set -> void
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationTotal.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationTotal.set -> void
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationType.get -> dymaptic.GeoBlazor.Core.Enums.NormalizationType?
dymaptic.GeoBlazor.Core.Interfaces.INormalizationBinParametersMixin.NormalizationType.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IOperationalLayer
dymaptic.GeoBlazor.Core.Interfaces.IOperationalLayer.GetPersistenceEnabled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.IOperationalLayer.PersistenceEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IOperationalLayer.PersistenceEnabled.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IOperationalLayer.SetPersistenceEnabled(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer.AddToOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer.GetOrderBy() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?>!
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer.OrderBy.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>?
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer.OrderBy.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer.RemoveFromOrderBy(params dymaptic.GeoBlazor.Core.Components.OrderByInfo![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IOrderedLayer.SetOrderBy(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.OrderByInfo!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IPieChartRendererVisualVariables
dymaptic.GeoBlazor.Core.Interfaces.IPopupTemplateLayer
dymaptic.GeoBlazor.Core.Interfaces.IPopupTemplateLayer.PopupTemplate.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate?
dymaptic.GeoBlazor.Core.Interfaces.IPopupTemplateLayer.PopupTemplate.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IPortalLayer
dymaptic.GeoBlazor.Core.Interfaces.IPortalLayer.GetPortalItem() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.PortalItem?>!
dymaptic.GeoBlazor.Core.Interfaces.IPortalLayer.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Interfaces.IPortalLayer.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IPortalLayer.SetPortalItem(dymaptic.GeoBlazor.Core.Components.PortalItem? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IPublishableLayer
dymaptic.GeoBlazor.Core.Interfaces.IPublishableLayer.GetPublishingInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.PublishingInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.CacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.CacheHint.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Distance.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Distance.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Geometry.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.OutSpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.OutSpatialReference.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.SpatialRelationship.get -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.SpatialRelationship.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Units.get -> dymaptic.GeoBlazor.Core.Enums.QueryUnits?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Units.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Where.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.Where.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.ActivePresetRendererName.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.ActivePresetRendererName.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.AddToPresetRenderers(params dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.GetActivePresetRendererName() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.GetPresetRenderers() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>?>!
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.PresetRenderers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>?
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.PresetRenderers.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.RemoveFromPresetRenderers(params dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.SetActivePresetRendererName(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IRasterPresetRendererMixin.SetPresetRenderers(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IRefreshableLayer
dymaptic.GeoBlazor.Core.Interfaces.IRefreshableLayer.GetRefreshInterval() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Interfaces.IRefreshableLayer.Refresh() -> System.Threading.Tasks.ValueTask
dymaptic.GeoBlazor.Core.Interfaces.IRefreshableLayer.RefreshInterval.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IRefreshableLayer.RefreshInterval.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IRefreshableLayer.SetRefreshInterval(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IRenderersRenderer
dymaptic.GeoBlazor.Core.Interfaces.IRendererWithVisualVariables
dymaptic.GeoBlazor.Core.Interfaces.IRouteStopSymbolsBreak
dymaptic.GeoBlazor.Core.Interfaces.IRouteStopSymbolsFirst
dymaptic.GeoBlazor.Core.Interfaces.IRouteStopSymbolsLast
dymaptic.GeoBlazor.Core.Interfaces.IRouteStopSymbolsMiddle
dymaptic.GeoBlazor.Core.Interfaces.IRouteStopSymbolsUnlocated
dymaptic.GeoBlazor.Core.Interfaces.IRouteStopSymbolsWaypoint
dymaptic.GeoBlazor.Core.Interfaces.IRouteSymbolsDirectionLines
dymaptic.GeoBlazor.Core.Interfaces.IRouteSymbolsDirectionPoints
dymaptic.GeoBlazor.Core.Interfaces.IRouteSymbolsPointBarriers
dymaptic.GeoBlazor.Core.Interfaces.IRouteSymbolsPolygonBarriers
dymaptic.GeoBlazor.Core.Interfaces.IRouteSymbolsPolylineBarriers
dymaptic.GeoBlazor.Core.Interfaces.IRouteSymbolsRouteInfo
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.GetMaxScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.GetMinScale() -> System.Threading.Tasks.Task<double?>!
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.MaxScale.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.MinScale.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.SetMaxScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IScaleRangeLayer.SetMinScale(double? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.Copyright.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.Copyright.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.GetCopyright() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.GetSceneServiceLayerId() -> System.Threading.Tasks.Task<long?>!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.GetSpatialReference() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.SpatialReference?>!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.GetUrl() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.GetVersion() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.SceneServiceVersion?>!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SceneServiceLayerId.get -> long?
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SceneServiceLayerId.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SetCopyright(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SetSceneServiceLayerId(long? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SetSpatialReference(dymaptic.GeoBlazor.Core.Components.SpatialReference! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SetUrl(string? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.Url.get -> string?
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.Url.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ISceneService.Version.get -> dymaptic.GeoBlazor.Core.Model.SceneServiceVersion?
dymaptic.GeoBlazor.Core.Interfaces.ISceneViewEnvironmentLighting
dymaptic.GeoBlazor.Core.Interfaces.ISceneViewEnvironmentWeather
dymaptic.GeoBlazor.Core.Interfaces.IServiceAreaParametersFacilities
dymaptic.GeoBlazor.Core.Interfaces.ISizeScheme
dymaptic.GeoBlazor.Core.Interfaces.ISketchViewModelPointSymbol
dymaptic.GeoBlazor.Core.Interfaces.ISketchViewModelPolygonSymbol
dymaptic.GeoBlazor.Core.Interfaces.ISketchViewModelPolylineSymbol
dymaptic.GeoBlazor.Core.Interfaces.ISliceViewModelExcludedLayers
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.AddToSubtables(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.CreateServiceSublayers() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]?>!
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.FindSublayerById(long id) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer?>!
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.GetSubtables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?>!
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.RemoveFromSubtables(params dymaptic.GeoBlazor.Core.Components.Layers.Sublayer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.SetSubtables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.Subtables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Sublayer!>?
dymaptic.GeoBlazor.Core.Interfaces.ISublayersOwner.Subtables.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ISymbol2D
dymaptic.GeoBlazor.Core.Interfaces.ISymbol2D3D
dymaptic.GeoBlazor.Core.Interfaces.ISymbolsFillSymbol
dymaptic.GeoBlazor.Core.Interfaces.ISymbolsMarkerSymbol
dymaptic.GeoBlazor.Core.Interfaces.ISymbolsSymbol
dymaptic.GeoBlazor.Core.Interfaces.ISymbolTableElementType
dymaptic.GeoBlazor.Core.Interfaces.ITableListWidget
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.AddToTables(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.FindTableById(string! tableId) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Layers.Layer?>!
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.GetTables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?>!
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.RemoveFromTables(params dymaptic.GeoBlazor.Core.Components.Layers.Layer![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.SetTables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>! value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.Tables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Interfaces.ITablesMixin.Tables.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemplateItemTemplate
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.GetUseViewTime() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.SetUseViewTime(bool? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.UseViewTime.get -> bool?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalLayer.UseViewTime.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.GetTimeExtent() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeExtent?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.GetTimeInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.GetTimeOffset() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TimeInterval?>!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.SetTimeExtent(dymaptic.GeoBlazor.Core.Components.TimeExtent? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.SetTimeInfo(dymaptic.GeoBlazor.Core.Components.TimeInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.SetTimeOffset(dymaptic.GeoBlazor.Core.Components.TimeInterval? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.TimeInfo.get -> dymaptic.GeoBlazor.Core.Components.TimeInfo?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.TimeInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.TimeOffset.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Interfaces.ITemporalSceneLayer.TimeOffset.set -> void
dymaptic.GeoBlazor.Core.Interfaces.ITimeSliderViewModelDocument
dymaptic.GeoBlazor.Core.Interfaces.ITimeSliderWidgetDocument
dymaptic.GeoBlazor.Core.Interfaces.ITimeUtilsDocument
dymaptic.GeoBlazor.Core.Interfaces.ITrackableLayer
dymaptic.GeoBlazor.Core.Interfaces.ITrackableLayer.GetTrackInfo() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.TrackInfo?>!
dymaptic.GeoBlazor.Core.Interfaces.ITrackableLayer.SetTrackInfo(dymaptic.GeoBlazor.Core.Components.TrackInfo? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.ITrackableLayer.TrackInfo.get -> dymaptic.GeoBlazor.Core.Components.TrackInfo?
dymaptic.GeoBlazor.Core.Interfaces.ITrackableLayer.TrackInfo.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IUnivariateColorSizeRampElementInfos
dymaptic.GeoBlazor.Core.Interfaces.IUpdateToolEventInfo
dymaptic.GeoBlazor.Core.Interfaces.IUtilityNetwork
dymaptic.GeoBlazor.Core.Interfaces.IVectorTileLayerSpriteSourceInfo
dymaptic.GeoBlazor.Core.Interfaces.IVersionAdaptersUtilsInput
dymaptic.GeoBlazor.Core.Interfaces.IVersionAdapterVersionableItem
dymaptic.GeoBlazor.Core.Interfaces.IVersionManagementUtilsInput
dymaptic.GeoBlazor.Core.Interfaces.IViewModel
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin.AddToVisualVariables(params dymaptic.GeoBlazor.Core.Components.VisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin.GetVisualVariables() -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>?>!
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin.RemoveFromVisualVariables(params dymaptic.GeoBlazor.Core.Components.VisualVariable![]! values) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin.SetVisualVariables(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin.VisualVariables.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.VisualVariable!>?
dymaptic.GeoBlazor.Core.Interfaces.IVisualVariablesMixin.VisualVariables.set -> void
dymaptic.GeoBlazor.Core.Interfaces.IWMSLayerDimensions
dymaptic.GeoBlazor.Core.Interfaces.IWMSSublayerDimensions
dymaptic.GeoBlazor.Core.JsModuleManager
dymaptic.GeoBlazor.Core.JsModuleManager.GetArcGisJsCore(Microsoft.JSInterop.IJSRuntime! jsRuntime, Microsoft.JSInterop.IJSObjectReference? proModule, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
dymaptic.GeoBlazor.Core.JsModuleManager.GetArcGisJsPro(Microsoft.JSInterop.IJSRuntime! jsRuntime, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference?>
dymaptic.GeoBlazor.Core.JsModuleManager.JsModuleManager() -> void
dymaptic.GeoBlazor.Core.Model.AbortManager
dymaptic.GeoBlazor.Core.Model.AbortManager.AbortManager(Microsoft.JSInterop.IJSObjectReference! jsModule) -> void
dymaptic.GeoBlazor.Core.Model.AbortManager.AbortManager(Microsoft.JSInterop.IJSRuntime! jsRuntime, dymaptic.GeoBlazor.Core.JsModuleManager! jsModuleManager) -> void
dymaptic.GeoBlazor.Core.Model.AbortManager.CreateAbortSignal(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.JSInterop.IJSObjectReference!>!
dymaptic.GeoBlazor.Core.Model.AbortManager.DisposeAbortController(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AbortManager.DisposeAsync() -> System.Threading.Tasks.ValueTask
dymaptic.GeoBlazor.Core.Model.AbortManagerResult
dymaptic.GeoBlazor.Core.Model.AbortManagerResult.AbortControllerRef.get -> Microsoft.JSInterop.IJSObjectReference!
dymaptic.GeoBlazor.Core.Model.AbortManagerResult.AbortControllerRef.init -> void
dymaptic.GeoBlazor.Core.Model.AbortManagerResult.AbortManagerResult(Microsoft.JSInterop.IJSObjectReference! AbortControllerRef, Microsoft.JSInterop.IJSObjectReference! AbortSignalRef) -> void
dymaptic.GeoBlazor.Core.Model.AbortManagerResult.AbortSignalRef.get -> Microsoft.JSInterop.IJSObjectReference!
dymaptic.GeoBlazor.Core.Model.AbortManagerResult.AbortSignalRef.init -> void
dymaptic.GeoBlazor.Core.Model.Address
dymaptic.GeoBlazor.Core.Model.Address.Address(string! Street, string! City, string! State, string! Zone) -> void
dymaptic.GeoBlazor.Core.Model.Address.City.get -> string!
dymaptic.GeoBlazor.Core.Model.Address.City.init -> void
dymaptic.GeoBlazor.Core.Model.Address.State.get -> string!
dymaptic.GeoBlazor.Core.Model.Address.State.init -> void
dymaptic.GeoBlazor.Core.Model.Address.Street.get -> string!
dymaptic.GeoBlazor.Core.Model.Address.Street.init -> void
dymaptic.GeoBlazor.Core.Model.Address.Zone.get -> string!
dymaptic.GeoBlazor.Core.Model.Address.Zone.init -> void
dymaptic.GeoBlazor.Core.Model.AddressCandidate
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Address.get -> string?
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Address.set -> void
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Attributes.get -> System.Collections.Generic.Dictionary<string!, object!>!
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Attributes.set -> void
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Extent.set -> void
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Location.set -> void
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Score.get -> double?
dymaptic.GeoBlazor.Core.Model.AddressCandidate.Score.set -> void
dymaptic.GeoBlazor.Core.Model.AddressQuery
dymaptic.GeoBlazor.Core.Model.AddressQuery.Address.get -> dymaptic.GeoBlazor.Core.Model.Address?
dymaptic.GeoBlazor.Core.Model.AddressQuery.Address.set -> void
dymaptic.GeoBlazor.Core.Model.AddressQuery.Categories.get -> System.Collections.Generic.HashSet<string!>?
dymaptic.GeoBlazor.Core.Model.AddressQuery.Categories.set -> void
dymaptic.GeoBlazor.Core.Model.AddressQuery.LocatorUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.AddressQuery.LocatorUrl.set -> void
dymaptic.GeoBlazor.Core.Model.AddressQuery.MaxLocations.get -> int?
dymaptic.GeoBlazor.Core.Model.AddressQuery.MaxLocations.set -> void
dymaptic.GeoBlazor.Core.Model.AddressQuery.OutFields.get -> System.Collections.Generic.HashSet<string!>?
dymaptic.GeoBlazor.Core.Model.AddressQuery.OutFields.set -> void
dymaptic.GeoBlazor.Core.Model.AiAssistantServices
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.DocChatAssistant.get -> string?
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.DocChatAssistant.init -> void
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.GraphQueryAssistant.get -> string?
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.GraphQueryAssistant.init -> void
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.ItemInformationAssistant.get -> string?
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.ItemInformationAssistant.init -> void
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.QuestionAnswerAssistant.get -> string?
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.QuestionAnswerAssistant.init -> void
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.SqlGenerationAssistant.get -> string?
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.SqlGenerationAssistant.init -> void
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.AiAssistantServices.Url.init -> void
dymaptic.GeoBlazor.Core.Model.AiUtilityServices
dymaptic.GeoBlazor.Core.Model.AiUtilityServices.ImageExtractTextUtility.get -> string?
dymaptic.GeoBlazor.Core.Model.AiUtilityServices.ImageExtractTextUtility.init -> void
dymaptic.GeoBlazor.Core.Model.AiUtilityServices.TranslateUtility.get -> string?
dymaptic.GeoBlazor.Core.Model.AiUtilityServices.TranslateUtility.init -> void
dymaptic.GeoBlazor.Core.Model.AiUtilityServices.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.AiUtilityServices.Url.init -> void
dymaptic.GeoBlazor.Core.Model.AnalyticsCapability
dymaptic.GeoBlazor.Core.Model.AnalyticsCapability.AnalyticsCapability(bool SupportsCacheHint) -> void
dymaptic.GeoBlazor.Core.Model.AnalyticsCapability.SupportsCacheHint.get -> bool
dymaptic.GeoBlazor.Core.Model.AnalyticsCapability.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.ArcGISImageServiceCapabilitiesQuery(int? MaxRecordCount = null, bool? SupportsDistinct = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null, bool? SupportsStandardizedQueriesOnly = null, bool? SupportsStatistics = null, bool? SupportsTrueCurve = null) -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.MaxRecordCount.get -> int?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.MaxRecordCount.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsDistinct.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsStandardizedQueriesOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsTrueCurve.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISImageServiceCapabilitiesQuery.SupportsTrueCurve.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.ArcGISMapServiceCapabilities(dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap? ExportMap = null, dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportTiles? ExportTiles = null, dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations? Operations = null) -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.ExportMap.get -> dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.ExportMap.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.ExportTiles.get -> dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportTiles?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.ExportTiles.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.ArcGISMapServiceCapabilitiesExportMap(bool? SupportsArcadeExpressionForLabeling = null, bool? SupportsCIMSymbols = null, bool? SupportsDynamicLayers = null, bool? SupportsSublayerDefinitionExpression = null, bool? SupportsSublayerOrderBy = null, bool? SupportsSublayersChanges = null, bool? SupportsSublayerVisibility = null) -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsArcadeExpressionForLabeling.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsArcadeExpressionForLabeling.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsCIMSymbols.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsCIMSymbols.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsDynamicLayers.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsDynamicLayers.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayerDefinitionExpression.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayerDefinitionExpression.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayerOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayerOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayersChanges.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayersChanges.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayerVisibility.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportMap.SupportsSublayerVisibility.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportTiles
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportTiles.ArcGISMapServiceCapabilitiesExportTiles(int? MaxExportTilesCount = null) -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportTiles.MaxExportTilesCount.get -> int?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesExportTiles.MaxExportTilesCount.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.ArcGISMapServiceCapabilitiesOperations(bool? SupportsExportMap = null, bool? SupportsExportTiles = null, bool? SupportsIdentify = null, bool? SupportsQuery = null, bool? SupportsTileMap = null) -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsExportMap.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsExportMap.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsExportTiles.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsExportTiles.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsIdentify.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsIdentify.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsTileMap.get -> bool?
dymaptic.GeoBlazor.Core.Model.ArcGISMapServiceCapabilitiesOperations.SupportsTileMap.init -> void
dymaptic.GeoBlazor.Core.Model.AsyncFleetRouting
dymaptic.GeoBlazor.Core.Model.AsyncFleetRouting.DefaultTravelMode.get -> string?
dymaptic.GeoBlazor.Core.Model.AsyncFleetRouting.DefaultTravelMode.init -> void
dymaptic.GeoBlazor.Core.Model.AsyncFleetRouting.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.AsyncFleetRouting.Url.init -> void
dymaptic.GeoBlazor.Core.Model.AsyncPrintTask
dymaptic.GeoBlazor.Core.Model.AsyncPrintTask.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.AsyncPrintTask.Url.init -> void
dymaptic.GeoBlazor.Core.Model.AsyncRoutingService
dymaptic.GeoBlazor.Core.Model.AsyncRoutingService.DefaultTravelMode.get -> string?
dymaptic.GeoBlazor.Core.Model.AsyncRoutingService.DefaultTravelMode.init -> void
dymaptic.GeoBlazor.Core.Model.AsyncRoutingService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.AsyncRoutingService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.Attachment
dymaptic.GeoBlazor.Core.Model.Attachment.ContentType.get -> string?
dymaptic.GeoBlazor.Core.Model.Attachment.ContentType.set -> void
dymaptic.GeoBlazor.Core.Model.Attachment.Data.get -> string?
dymaptic.GeoBlazor.Core.Model.Attachment.Data.set -> void
dymaptic.GeoBlazor.Core.Model.Attachment.GlobalId.get -> string!
dymaptic.GeoBlazor.Core.Model.Attachment.GlobalId.set -> void
dymaptic.GeoBlazor.Core.Model.Attachment.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.Attachment.Name.set -> void
dymaptic.GeoBlazor.Core.Model.Attachment.UploadId.get -> string?
dymaptic.GeoBlazor.Core.Model.Attachment.UploadId.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapabilities
dymaptic.GeoBlazor.Core.Model.AttachmentCapabilities.AttachmentCapabilities(bool? Enabled = null) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapabilities.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Model.AttachmentCapabilities.Enabled.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.AttachmentCapability(bool SupportsCacheHint, bool SupportsContentType, bool SupportsExifInfo, bool SupportsKeywords, bool SupportsName, bool SupportsSize, bool SupportsResize) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsCacheHint.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsContentType.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsContentType.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsExifInfo.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsExifInfo.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsKeywords.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsKeywords.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsName.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsName.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsResize.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsResize.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsSize.get -> bool
dymaptic.GeoBlazor.Core.Model.AttachmentCapability.SupportsSize.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.Attachment.get -> dymaptic.GeoBlazor.Core.Model.Attachment!
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.Attachment.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.AttachmentEdit(dymaptic.GeoBlazor.Core.Components.Graphic! feature, dymaptic.GeoBlazor.Core.Model.Attachment! attachment) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.AttachmentEdit(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId, dymaptic.GeoBlazor.Core.Model.Attachment! attachment) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.AttachmentEdit(string! globalId, dymaptic.GeoBlazor.Core.Model.Attachment! attachment) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.Feature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.Feature.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.GlobalId.get -> string?
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.GlobalId.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.ObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId?
dymaptic.GeoBlazor.Core.Model.AttachmentEdit.ObjectId.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.AttachmentInfo(string! ContentType, string! GlobalId, long Id, string! Keywords, string! Name, dymaptic.GeoBlazor.Core.Model.OrientationInfo! OrientationInfo, string! ParentGlobalId, dymaptic.GeoBlazor.Core.Model.ObjectId! ParentObjectId, int Size, string! Url, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ExifInfo!>? ExifInfo = null, long? AttachmentInfoId = null) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.AttachmentInfoId.get -> long?
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.AttachmentInfoId.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ContentType.get -> string!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ContentType.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ExifInfo.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ExifInfo!>?
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ExifInfo.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.GlobalId.get -> string!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.GlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Id.get -> long
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Id.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Keywords.get -> string!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Keywords.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Name.get -> string!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Name.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.OrientationInfo.get -> dymaptic.GeoBlazor.Core.Model.OrientationInfo!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.OrientationInfo.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ParentGlobalId.get -> string!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ParentGlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ParentObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.ParentObjectId.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Size.get -> int
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Size.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Url.get -> string!
dymaptic.GeoBlazor.Core.Model.AttachmentInfo.Url.init -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.AttachmentQuery(string? AttachmentsWhere = null, System.Collections.Generic.IReadOnlyCollection<string!>? AttachmentTypes = null, bool? CacheHint = null, System.Collections.Generic.IReadOnlyCollection<string!>? GlobalIds = null, System.Collections.Generic.IReadOnlyCollection<string!>? Keywords = null, string? Name = null, double? Num = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null, System.Collections.Generic.IReadOnlyCollection<string!>? OrderByFields = null, bool? ReturnMetadata = null, System.Collections.Generic.IReadOnlyCollection<int>? Size = null, double? Start = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.AttachmentsWhere.get -> string?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.AttachmentsWhere.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.AttachmentTypes.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.AttachmentTypes.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.CacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.CacheHint.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.GlobalIds.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.GlobalIds.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Keywords.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Keywords.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Name.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Num.get -> double?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Num.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.ObjectIds.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.OrderByFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.ReturnMetadata.get -> bool?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.ReturnMetadata.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Size.get -> System.Collections.Generic.IReadOnlyCollection<int>?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Size.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Start.get -> double?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Start.set -> void
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.AttachmentQuery.Where.set -> void
dymaptic.GeoBlazor.Core.Model.AttributesDictionary
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.AddOrUpdate(string! key, object? value) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.AddOrUpdate(System.Collections.Generic.Dictionary<string!, object!>! newEntries) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.AttributesDictionary() -> void
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.AttributesDictionary(System.Collections.Generic.Dictionary<string!, object?>! dictionary) -> void
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Clear() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.ContainsKey(string! key) -> bool
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.ContainsValue(object! value) -> bool
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Count.get -> int
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Equals(dymaptic.GeoBlazor.Core.Model.AttributesDictionary? other) -> bool
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Equals(System.Collections.Generic.Dictionary<string!, object!>! otherDictionary) -> bool
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string!, object?>>!
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Keys.get -> System.Collections.Generic.Dictionary<string!, object?>.KeyCollection!
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.OnChange.get -> System.Func<System.Threading.Tasks.Task!>?
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.OnChange.set -> void
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Remove(string! key) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.this[string! key].get -> object?
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.TryGetValue(string! key, out object? value) -> bool
dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Values.get -> System.Collections.Generic.Dictionary<string!, object?>.ValueCollection!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.ApiKey.get -> string?
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.ApiKey.set -> void
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.AppId.get -> string?
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.AppId.set -> void
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.AuthenticationManager(Microsoft.JSInterop.IJSRuntime! jsRuntime, dymaptic.GeoBlazor.Core.JsModuleManager! jsModuleManager, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> void
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.EnsureLoggedIn() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.FontsUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.FontsUrl.set -> void
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.GetArcGisJsInterop() -> System.Threading.Tasks.Task<Microsoft.JSInterop.IJSObjectReference!>!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.GetCurrentToken() -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.GetTokenExpirationDateTime() -> System.Threading.Tasks.Task<System.DateTime?>!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.Initialize() -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.IsLoggedIn() -> System.Threading.Tasks.Task<bool>!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.Login() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.Logout() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.PortalUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.PortalUrl.set -> void
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.RegisterToken(string! token, System.DateTimeOffset expires) -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.TokenExpirationDateTime.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.TokenExpirationDateTime.set -> void
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.TrustedServers.get -> System.Collections.Generic.List<string!>?
dymaptic.GeoBlazor.Core.Model.AuthenticationManager.TrustedServers.set -> void
dymaptic.GeoBlazor.Core.Model.BaseImageMeasureParameters
dymaptic.GeoBlazor.Core.Model.BaseImageMeasureParameters.BaseImageMeasureParameters(dymaptic.GeoBlazor.Core.Model.MosaicRule? MosaicRule = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? PixelSize = null) -> void
dymaptic.GeoBlazor.Core.Model.BaseImageMeasureParameters.MosaicRule.get -> dymaptic.GeoBlazor.Core.Model.MosaicRule?
dymaptic.GeoBlazor.Core.Model.BaseImageMeasureParameters.MosaicRule.init -> void
dymaptic.GeoBlazor.Core.Model.BaseImageMeasureParameters.PixelSize.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.BaseImageMeasureParameters.PixelSize.init -> void
dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail
dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail.BookmarkThumbnail(string? Url = null) -> void
dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.BookmarkThumbnail.Url.init -> void
dymaptic.GeoBlazor.Core.Model.Bounds
dymaptic.GeoBlazor.Core.Model.Bounds.Bounds(double? Max = null, double? Min = null) -> void
dymaptic.GeoBlazor.Core.Model.Bounds.Max.get -> double?
dymaptic.GeoBlazor.Core.Model.Bounds.Max.init -> void
dymaptic.GeoBlazor.Core.Model.Bounds.Min.get -> double?
dymaptic.GeoBlazor.Core.Model.Bounds.Min.init -> void
dymaptic.GeoBlazor.Core.Model.BreakPoint
dymaptic.GeoBlazor.Core.Model.BreakPoint.BoolValue.get -> bool?
dymaptic.GeoBlazor.Core.Model.BreakPoint.BoolValue.set -> void
dymaptic.GeoBlazor.Core.Model.BreakPoint.BreakPoint(bool value) -> void
dymaptic.GeoBlazor.Core.Model.BreakPoint.BreakPoint(double? width = null, double? height = null) -> void
dymaptic.GeoBlazor.Core.Model.BreakPoint.Height.get -> double?
dymaptic.GeoBlazor.Core.Model.BreakPoint.Height.set -> void
dymaptic.GeoBlazor.Core.Model.BreakPoint.Width.get -> double?
dymaptic.GeoBlazor.Core.Model.BreakPoint.Width.set -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo
dymaptic.GeoBlazor.Core.Model.CameraInfo.CameraInfo(string? CameraInfoId = null, double? Cols = null, double? FocalLength = null, string? Make = null, string? Model = null, int? PixelSize = null, double? Rows = null) -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.CameraInfoId.get -> string?
dymaptic.GeoBlazor.Core.Model.CameraInfo.CameraInfoId.init -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.Cols.get -> double?
dymaptic.GeoBlazor.Core.Model.CameraInfo.Cols.init -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.FocalLength.get -> double?
dymaptic.GeoBlazor.Core.Model.CameraInfo.FocalLength.init -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.Make.get -> string?
dymaptic.GeoBlazor.Core.Model.CameraInfo.Make.init -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.Model.get -> string?
dymaptic.GeoBlazor.Core.Model.CameraInfo.Model.init -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.PixelSize.get -> int?
dymaptic.GeoBlazor.Core.Model.CameraInfo.PixelSize.init -> void
dymaptic.GeoBlazor.Core.Model.CameraInfo.Rows.get -> double?
dymaptic.GeoBlazor.Core.Model.CameraInfo.Rows.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.CapabilitiesQuery(int? MaxRecordCount = null, dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics? SupportedSpatialAggregationStatistics = null, bool? SupportsCacheHint = null, bool? SupportsCentroid = null, bool? SupportsDisjointSpatialRelationship = null, bool? SupportsDistance = null, bool? SupportsDistinct = null, bool? SupportsExtent = null, bool? SupportsGeometryProperties = null, bool? SupportsHavingClause = null, bool? SupportsHistoricMoment = null, bool? SupportsMaxRecordCountFactor = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null, bool? SupportsPercentileStatistics = null, bool? SupportsQuantization = null, bool? SupportsQuantizationEditMode = null, bool? SupportsQueryGeometry = null, bool? SupportsResultType = null, bool? SupportsReturnMesh = null, bool? SupportsSpatialAggregationStatistics = null, bool? SupportsSqlExpression = null, bool? SupportsStandardizedQueriesOnly = null, bool? SupportsStatistics = null, bool? SupportsTrueCurve = null) -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.MaxRecordCount.get -> int?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.MaxRecordCount.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportedSpatialAggregationStatistics.get -> dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportedSpatialAggregationStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsCentroid.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsDisjointSpatialRelationship.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsDisjointSpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsDistance.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsDistance.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsDistinct.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsExtent.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsExtent.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsGeometryProperties.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsGeometryProperties.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsHavingClause.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsHavingClause.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsHistoricMoment.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsHistoricMoment.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsMaxRecordCountFactor.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsMaxRecordCountFactor.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsPercentileStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsPercentileStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsQuantization.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsQuantization.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsQuantizationEditMode.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsQuantizationEditMode.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsQueryGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsQueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsResultType.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsResultType.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsReturnMesh.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsReturnMesh.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsSpatialAggregationStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsSpatialAggregationStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsSqlExpression.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsSqlExpression.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsStandardizedQueriesOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsTrueCurve.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuery.SupportsTrueCurve.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.CapabilitiesQuerySupportedSpatialAggregationStatistics(bool? Centroid = null, bool? ConvexHull = null, bool? Envelope = null) -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.Centroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.Centroid.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.ConvexHull.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.ConvexHull.init -> void
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.Envelope.get -> bool?
dymaptic.GeoBlazor.Core.Model.CapabilitiesQuerySupportedSpatialAggregationStatistics.Envelope.init -> void
dymaptic.GeoBlazor.Core.Model.ColorBackground
dymaptic.GeoBlazor.Core.Model.ColorBackground.Color.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Model.ColorBackground.Color.init -> void
dymaptic.GeoBlazor.Core.Model.ColorBackground.ColorBackground(dymaptic.GeoBlazor.Core.Model.MapColor? Color = null) -> void
dymaptic.GeoBlazor.Core.Model.ColormapPixel
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Blue.get -> double
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Blue.init -> void
dymaptic.GeoBlazor.Core.Model.ColormapPixel.ColormapPixel(double Value, double Red, double Green, double Blue) -> void
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Green.get -> double
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Green.init -> void
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Red.get -> double
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Red.init -> void
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Value.get -> double
dymaptic.GeoBlazor.Core.Model.ColormapPixel.Value.init -> void
dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1
dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1.CompositeTransformationGeoTransforms1(bool? TransformForward = null, long? Wkid = null) -> void
dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1.TransformForward.get -> bool?
dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1.TransformForward.init -> void
dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1.Wkid.get -> long?
dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1.Wkid.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.CoverageDescriptionV100(string? Description = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet? DomainSet = null, string? Label = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? LonLatEnvelope = null, string? Name = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet!>? RangeSet = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs? SupportedCRSs = null, System.Collections.Generic.IReadOnlyCollection<string!>? SupportedFormats = null, System.Collections.Generic.IReadOnlyCollection<string!>? SupportedInterpolations = null, string? Version = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Description.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.DomainSet.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.DomainSet.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Label.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Label.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.LonLatEnvelope.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.LonLatEnvelope.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Name.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.RangeSet.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.RangeSet.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.SupportedCRSs.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.SupportedCRSs.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.SupportedFormats.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.SupportedFormats.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.SupportedInterpolations.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.SupportedInterpolations.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Version.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100.Version.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet.CoverageDescriptionV100DomainSet(dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain? SpatialDomain = null, dymaptic.GeoBlazor.Core.Model.TemporalDomain? TemporalDomain = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet.SpatialDomain.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet.SpatialDomain.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet.TemporalDomain.get -> dymaptic.GeoBlazor.Core.Model.TemporalDomain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSet.TemporalDomain.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Columns.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Columns.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.CoverageDescriptionV100DomainSetSpatialDomain(double? Columns = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Envelope = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset? Offset = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin? Origin = null, double? Rows = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Envelope.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Envelope.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Offset.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Offset.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Origin.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Origin.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Rows.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomain.Rows.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset.CoverageDescriptionV100DomainSetSpatialDomainOffset(double? X = null, object? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset.X.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset.Y.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOffset.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin.CoverageDescriptionV100DomainSetSpatialDomainOrigin(double? X = null, object? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin.X.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin.Y.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100DomainSetSpatialDomainOrigin.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.Axis.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.Axis.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.CoverageDescriptionV100RangeSet(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis!>? Axis = null, string? Label = null, string? Name = null, System.Collections.Generic.IReadOnlyCollection<double>? NullValues = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.Label.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.Label.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.Name.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.NullValues.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSet.NullValues.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.CoverageDescriptionV100RangeSetAxis(string? Label = null, string? Name = null, System.Collections.Generic.IReadOnlyCollection<string!>? Values = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.Label.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.Label.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.Name.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.Values.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100RangeSetAxis.Values.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs.CoverageDescriptionV100SupportedCRSs(System.Collections.Generic.IReadOnlyCollection<string!>? NativeCRSs = null, System.Collections.Generic.IReadOnlyCollection<string!>? RequestResponseCRSs = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs.NativeCRSs.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs.NativeCRSs.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs.RequestResponseCRSs.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV100SupportedCRSs.RequestResponseCRSs.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Abstract.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Abstract.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.CoverageDescriptionV110(string? Abstract = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain? Domain = null, string? Identifier = null, string? Metadata = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range!>? Range = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution? Resolution = null, System.Collections.Generic.IReadOnlyCollection<string!>? SupportedCRSs = null, System.Collections.Generic.IReadOnlyCollection<string!>? SupportedFormats = null, string? Title = null, string? Version = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Domain.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Domain.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Identifier.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Identifier.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Metadata.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Metadata.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Range.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Range.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Resolution.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Resolution.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.SupportedCRSs.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.SupportedCRSs.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.SupportedFormats.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.SupportedFormats.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Title.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Version.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110.Version.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain.CoverageDescriptionV110Domain(dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain? SpatialDomain = null, dymaptic.GeoBlazor.Core.Model.TemporalDomain? TemporalDomain = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain.SpatialDomain.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain.SpatialDomain.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain.TemporalDomain.get -> dymaptic.GeoBlazor.Core.Model.TemporalDomain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Domain.TemporalDomain.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Columns.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Columns.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.CoverageDescriptionV110DomainSpatialDomain(double? Columns = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Envelope = null, string? GridBaseCRS = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset? Offset = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin? Origin = null, double? Rows = null, bool? UseEPSGAxis = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Envelope.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Envelope.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.GridBaseCRS.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.GridBaseCRS.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Offset.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Offset.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Origin.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Origin.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Rows.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.Rows.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.UseEPSGAxis.get -> bool?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomain.UseEPSGAxis.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset.CoverageDescriptionV110DomainSpatialDomainOffset(double? X = null, object? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset.X.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset.Y.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOffset.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin.CoverageDescriptionV110DomainSpatialDomainOrigin(double? X = null, object? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin.X.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin.Y.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110DomainSpatialDomainOrigin.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Abstract.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Abstract.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Axis.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Axis.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.CoverageDescriptionV110Range(string? Abstract = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis!>? Axis = null, string? Definition = null, string? Description = null, string? Identifier = null, System.Collections.Generic.IReadOnlyCollection<double>? NullValues = null, System.Collections.Generic.IReadOnlyCollection<string!>? SupportedInterpolations = null, string? Title = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Definition.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Definition.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Description.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Identifier.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Identifier.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.NullValues.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.NullValues.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.SupportedInterpolations.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.SupportedInterpolations.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Range.Title.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.BandNoDataValues.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.BandNoDataValues.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.CoverageDescriptionV110RangeAxis(System.Collections.Generic.IReadOnlyCollection<double>? BandNoDataValues = null, string? DataType = null, string? Identifier = null, string? Uom = null, System.Collections.Generic.IReadOnlyCollection<string!>? Values = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.DataType.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.DataType.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.Identifier.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.Identifier.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.Uom.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.Uom.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.Values.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110RangeAxis.Values.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution.CoverageDescriptionV110Resolution(object? X = null, object? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution.X.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution.Y.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV110Resolution.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.BoundedBy.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.BoundedBy.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.CoverageDescriptionV201(dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy? BoundedBy = null, object? CoverageFunction = null, string? CoverageId = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet? DomainSet = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadata? EoMetadata = null, string? Extension = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType!>? RangeType = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution? Resolution = null, object? ServiceParameters = null, string? Version = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.CoverageFunction.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.CoverageFunction.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.CoverageId.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.CoverageId.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.DomainSet.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.DomainSet.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.EoMetadata.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadata?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.EoMetadata.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.Extension.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.Extension.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.RangeType.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.RangeType.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.Resolution.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.Resolution.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.ServiceParameters.get -> object?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.ServiceParameters.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.Version.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201.Version.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.AxisLabels.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.AxisLabels.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.BeginPosition.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.BeginPosition.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.CoverageDescriptionV201BoundedBy(System.Collections.Generic.IReadOnlyCollection<string!>? AxisLabels = null, System.DateTime? BeginPosition = null, System.DateTime? EndPosition = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Envelope = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims? EnvelopeAllDims = null, bool? IsEastFirst = null, System.Collections.Generic.IReadOnlyCollection<string!>? UomLabels = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.EndPosition.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.EndPosition.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.Envelope.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.Envelope.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.EnvelopeAllDims.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.EnvelopeAllDims.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.IsEastFirst.get -> bool?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.IsEastFirst.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.UomLabels.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedBy.UomLabels.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims.CoverageDescriptionV201BoundedByEnvelopeAllDims(System.Collections.Generic.IReadOnlyCollection<double>? Maxs = null, System.Collections.Generic.IReadOnlyCollection<double>? Mins = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims.Maxs.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims.Maxs.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims.Mins.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201BoundedByEnvelopeAllDims.Mins.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.AxisLabels.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.AxisLabels.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Columns.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Columns.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.CoverageDescriptionV201DomainSet(System.Collections.Generic.IReadOnlyCollection<string!>? AxisLabels = null, double? Columns = null, System.Collections.Generic.IReadOnlyCollection<double>? GridSamples = null, bool? HasSameAxisLabelsAsBoundedBy = null, System.Collections.Generic.IReadOnlyCollection<double>? Offset = null, System.Collections.Generic.IReadOnlyCollection<double>? Origin = null, dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution? Resolution = null, double? Rows = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.GridSamples.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.GridSamples.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.HasSameAxisLabelsAsBoundedBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.HasSameAxisLabelsAsBoundedBy.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Offset.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Offset.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Origin.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Origin.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Resolution.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Resolution.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Rows.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSet.Rows.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution.CoverageDescriptionV201DomainSetResolution(double? X = null, double? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution.X.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution.Y.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201DomainSetResolution.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadata
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadata.CoverageDescriptionV201EoMetadata(dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation? Observation = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadata.Observation.get -> dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadata.Observation.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.AcquisitionType.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.AcquisitionType.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.CoverageDescriptionV201EoMetadataObservation(string? AcquisitionType = null, dymaptic.GeoBlazor.Core.Components.Geometries.Polygon? Footprint = null, string? Identifier = null, dymaptic.GeoBlazor.Core.Model.TemporalDomain? PhenomenonTime = null, dymaptic.GeoBlazor.Core.Model.TemporalDomain? ResultTime = null, string? Status = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.Footprint.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Polygon?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.Footprint.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.Identifier.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.Identifier.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.PhenomenonTime.get -> dymaptic.GeoBlazor.Core.Model.TemporalDomain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.PhenomenonTime.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.ResultTime.get -> dymaptic.GeoBlazor.Core.Model.TemporalDomain?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.ResultTime.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.Status.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201EoMetadataObservation.Status.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.AllowedValues.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.AllowedValues.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.CoverageDescriptionV201RangeType(System.Collections.Generic.IReadOnlyCollection<double>? AllowedValues = null, string? Description = null, string? Name = null, double? NilValue = null, string? Uom = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.Description.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.Name.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.NilValue.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.NilValue.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.Uom.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201RangeType.Uom.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution.CoverageDescriptionV201Resolution(double? X = null, double? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution.X.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution.X.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution.Y.get -> double?
dymaptic.GeoBlazor.Core.Model.CoverageDescriptionV201Resolution.Y.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo
dymaptic.GeoBlazor.Core.Model.CoverageInfo.BandNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.BandNames.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.CoverageDescription.get -> dymaptic.GeoBlazor.Core.Interfaces.ICoverageInfoCoverageDescription?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.CoverageDescription.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.CoverageId.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.CoverageId.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.CoverageInfo(System.Collections.Generic.IReadOnlyCollection<string!>? BandNames = null, dymaptic.GeoBlazor.Core.Interfaces.ICoverageInfoCoverageDescription? CoverageDescription = null, string? CoverageId = null, string? Description = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? LonLatEnvelope = null, dymaptic.GeoBlazor.Core.Model.RasterInfo? RasterInfo = null, System.Collections.Generic.IReadOnlyCollection<string!>? SupportedFormats = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations>? SupportedInterpolations = null, string? Title = null, bool? UseEPSGAxis = null, dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion? Version = null) -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.Description.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.LonLatEnvelope.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.LonLatEnvelope.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.RasterInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterInfo?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.RasterInfo.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.SupportedFormats.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.SupportedFormats.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.SupportedInterpolations.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Enums.SupportedInterpolations>?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.SupportedInterpolations.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.Title.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.UseEPSGAxis.get -> bool?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.UseEPSGAxis.init -> void
dymaptic.GeoBlazor.Core.Model.CoverageInfo.Version.get -> dymaptic.GeoBlazor.Core.Enums.CoverageInfoVersion?
dymaptic.GeoBlazor.Core.Model.CoverageInfo.Version.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Attachment.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesAttachment?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Attachment.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.CSVLayerCapabilities(dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesAttachment? Attachment = null, dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData? Data = null, dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing? Editing = null, dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations? Operations = null, dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery? Query = null, dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated? QueryRelated = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Data.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Data.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Editing.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Editing.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.Query.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilities.QueryRelated.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesAttachment
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesAttachment.CSVLayerCapabilitiesAttachment(bool? SupportsResize = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesAttachment.SupportsResize.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesAttachment.SupportsResize.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.CSVLayerCapabilitiesData(bool? SupportsAttachment = null, bool? SupportsM = null, bool? SupportsZ = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.SupportsAttachment.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.SupportsAttachment.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.SupportsM.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.SupportsM.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.SupportsZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesData.SupportsZ.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.CSVLayerCapabilitiesEditing(bool? SupportsDeleteByAnonymous = null, bool? SupportsDeleteByOthers = null, bool? SupportsGeometryUpdate = null, bool? SupportsGlobalId = null, bool? SupportsRollbackOnFailure = null, bool? SupportsUpdateByAnonymous = null, bool? SupportsUpdateByOthers = null, bool? SupportsUpdateWithoutM = null, bool? SupportsUploadWithItemId = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsDeleteByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsDeleteByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsDeleteByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsDeleteByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsGeometryUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsGeometryUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsGlobalId.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsGlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsRollbackOnFailure.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsRollbackOnFailure.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUpdateByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUpdateByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUpdateByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUpdateByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUpdateWithoutM.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUpdateWithoutM.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUploadWithItemId.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesEditing.SupportsUploadWithItemId.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.CSVLayerCapabilitiesOperations(bool? SupportsAdd = null, bool? SupportsCalculate = null, bool? SupportsDelete = null, bool? SupportsEditing = null, bool? SupportsQuery = null, bool? SupportsQueryAttachments = null, bool? SupportsResizeAttachments = null, bool? SupportsUpdate = null, bool? SupportsValidateSql = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsAdd.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsAdd.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsCalculate.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsCalculate.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsDelete.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsDelete.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsEditing.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsEditing.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsQueryAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsQueryAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsResizeAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsResizeAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsValidateSql.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesOperations.SupportsValidateSql.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.CSVLayerCapabilitiesQuery(bool? SupportsCentroid = null, bool? SupportsDisjointSpatialRelationship = null, bool? SupportsDistance = null, bool? SupportsDistinct = null, bool? SupportsExtent = null, bool? SupportsGeometryProperties = null, bool? SupportsHavingClause = null, bool? SupportsHistoricMoment = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null, bool? SupportsPercentileStatistics = null, bool? SupportsQuantization = null, bool? SupportsQuantizationEditMode = null, bool? SupportsQueryGeometry = null, bool? SupportsResultType = null, bool? SupportsSqlExpression = null, bool? SupportsStandardizedQueriesOnly = null, bool? SupportsStatistics = null, bool? SupportsTrueCurve = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsCentroid.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsDistance.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsDistance.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsDistinct.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsExtent.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsExtent.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsGeometryProperties.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsGeometryProperties.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsHavingClause.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsHavingClause.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsHistoricMoment.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsHistoricMoment.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsPercentileStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsPercentileStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsQuantization.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsQuantization.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsQuantizationEditMode.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsQuantizationEditMode.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsQueryGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsQueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsResultType.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsResultType.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsSqlExpression.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsSqlExpression.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsTrueCurve.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQuery.SupportsTrueCurve.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.CSVLayerCapabilitiesQueryRelated(bool? SupportsCount = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null) -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.SupportsCount.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.SupportsCount.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.CSVLayerCapabilitiesQueryRelated.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.DataCapability
dymaptic.GeoBlazor.Core.Model.DataCapability.DataCapability(bool IsVersioned, bool SupportsAttachment, bool SupportsM, bool SupportsZ) -> void
dymaptic.GeoBlazor.Core.Model.DataCapability.IsVersioned.get -> bool
dymaptic.GeoBlazor.Core.Model.DataCapability.IsVersioned.init -> void
dymaptic.GeoBlazor.Core.Model.DataCapability.SupportsAttachment.get -> bool
dymaptic.GeoBlazor.Core.Model.DataCapability.SupportsAttachment.init -> void
dymaptic.GeoBlazor.Core.Model.DataCapability.SupportsM.get -> bool
dymaptic.GeoBlazor.Core.Model.DataCapability.SupportsM.init -> void
dymaptic.GeoBlazor.Core.Model.DataCapability.SupportsZ.get -> bool
dymaptic.GeoBlazor.Core.Model.DataCapability.SupportsZ.init -> void
dymaptic.GeoBlazor.Core.Model.Dimension
dymaptic.GeoBlazor.Core.Model.Dimension.Dimension(double pointVal) -> void
dymaptic.GeoBlazor.Core.Model.Dimension.Dimension(string! stringVal) -> void
dymaptic.GeoBlazor.Core.Model.Dimension.Equals(dymaptic.GeoBlazor.Core.Model.Dimension? other) -> bool
dymaptic.GeoBlazor.Core.Model.Dimension.Pixels.get -> double
dymaptic.GeoBlazor.Core.Model.Dimension.Points.get -> double
dymaptic.GeoBlazor.Core.Model.Dimension.Points.init -> void
dymaptic.GeoBlazor.Core.Model.DisplayFilter
dymaptic.GeoBlazor.Core.Model.DisplayFilter.DisplayFilter(string? DisplayFilterId = null, double? MaxScale = null, double? MinScale = null, string? Title = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.DisplayFilter.DisplayFilterId.get -> string?
dymaptic.GeoBlazor.Core.Model.DisplayFilter.DisplayFilterId.init -> void
dymaptic.GeoBlazor.Core.Model.DisplayFilter.MaxScale.get -> double?
dymaptic.GeoBlazor.Core.Model.DisplayFilter.MaxScale.init -> void
dymaptic.GeoBlazor.Core.Model.DisplayFilter.MinScale.get -> double?
dymaptic.GeoBlazor.Core.Model.DisplayFilter.MinScale.init -> void
dymaptic.GeoBlazor.Core.Model.DisplayFilter.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.DisplayFilter.Title.init -> void
dymaptic.GeoBlazor.Core.Model.DisplayFilter.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.DisplayFilter.Where.init -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.Adds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.Adds.init -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.Deletes.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.Deletes.init -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.EditedFeatureResultEditedFeatures(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? Adds = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? Deletes = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? SpatialReference = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates!>? Updates = null) -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.SpatialReference.init -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.Updates.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates!>?
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures.Updates.init -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates.Current.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates.Current.init -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates.EditedFeatureResultEditedFeaturesUpdates(dymaptic.GeoBlazor.Core.Components.Graphic? Current = null, dymaptic.GeoBlazor.Core.Components.Graphic? Original = null) -> void
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates.Original.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeaturesUpdates.Original.init -> void
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.CreationDateField.get -> string?
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.CreationDateField.init -> void
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.CreatorField.get -> string?
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.CreatorField.init -> void
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.EditDateField.get -> string?
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.EditDateField.init -> void
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.EditFieldsInfo(string? CreationDateField = null, string? CreatorField = null, string? EditDateField = null, string? EditorField = null) -> void
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.EditorField.get -> string?
dymaptic.GeoBlazor.Core.Model.EditFieldsInfo.EditorField.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability
dymaptic.GeoBlazor.Core.Model.EditingCapability.EditingCapability(bool SupportsDeleteByAnonymous, bool SupportsDeleteByOthers, bool SupportsGeometryUpdate, bool SupportsGlobalId, bool SupportsRollbackOnFailure, bool SupportsUpdateByAnonymous, bool SupportsUpdateByOthers, bool SupportsUploadWithItemId, bool SupportsUpdateWithoutM) -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsDeleteByAnonymous.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsDeleteByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsDeleteByOthers.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsDeleteByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsGeometryUpdate.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsGeometryUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsGlobalId.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsGlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsRollbackOnFailure.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsRollbackOnFailure.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUpdateByAnonymous.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUpdateByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUpdateByOthers.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUpdateByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUpdateWithoutM.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUpdateWithoutM.init -> void
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUploadWithItemId.get -> bool
dymaptic.GeoBlazor.Core.Model.EditingCapability.SupportsUploadWithItemId.init -> void
dymaptic.GeoBlazor.Core.Model.EditingInfo
dymaptic.GeoBlazor.Core.Model.EditingInfo.EditingInfo(System.DateTime? LastEditDate = null) -> void
dymaptic.GeoBlazor.Core.Model.EditingInfo.LastEditDate.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.EditingInfo.LastEditDate.init -> void
dymaptic.GeoBlazor.Core.Model.Effect
dymaptic.GeoBlazor.Core.Model.Effect.Effect() -> void
dymaptic.GeoBlazor.Core.Model.Effect.Effect(string! value, double? scale = null) -> void
dymaptic.GeoBlazor.Core.Model.Effect.Scale.get -> double?
dymaptic.GeoBlazor.Core.Model.Effect.Scale.set -> void
dymaptic.GeoBlazor.Core.Model.Effect.Value.get -> string?
dymaptic.GeoBlazor.Core.Model.Effect.Value.set -> void
dymaptic.GeoBlazor.Core.Model.ElevationDimension
dymaptic.GeoBlazor.Core.Model.ElevationDimension.ElevationDimension(string? Name = null) -> void
dymaptic.GeoBlazor.Core.Model.ElevationDimension.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.ElevationDimension.Name.init -> void
dymaptic.GeoBlazor.Core.Model.ElevationLayerService
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.Id.get -> string?
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.Id.init -> void
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.LayerType.get -> string?
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.LayerType.init -> void
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.Units.get -> string?
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.Units.init -> void
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.ElevationLayerService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo
dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo.DemResolution.get -> double?
dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo.DemResolution.init -> void
dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo.ElevationQueryResultSampleInfo(double? DemResolution = null, dymaptic.GeoBlazor.Core.Interfaces.IElevationSource? Source = null) -> void
dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo.Source.get -> dymaptic.GeoBlazor.Core.Interfaces.IElevationSource?
dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo.Source.init -> void
dymaptic.GeoBlazor.Core.Model.Error
dymaptic.GeoBlazor.Core.Model.Error.Details.get -> object!
dymaptic.GeoBlazor.Core.Model.Error.Details.init -> void
dymaptic.GeoBlazor.Core.Model.Error.Error(string! Name, string! Message, object! Details) -> void
dymaptic.GeoBlazor.Core.Model.Error.Message.get -> string!
dymaptic.GeoBlazor.Core.Model.Error.Message.init -> void
dymaptic.GeoBlazor.Core.Model.Error.Name.get -> string!
dymaptic.GeoBlazor.Core.Model.Error.Name.init -> void
dymaptic.GeoBlazor.Core.Model.ExifInfo
dymaptic.GeoBlazor.Core.Model.ExifInfo.ExifInfo(string! Name, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ExifInfoTags!>! Tags) -> void
dymaptic.GeoBlazor.Core.Model.ExifInfo.Name.get -> string!
dymaptic.GeoBlazor.Core.Model.ExifInfo.Name.init -> void
dymaptic.GeoBlazor.Core.Model.ExifInfo.Tags.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ExifInfoTags!>!
dymaptic.GeoBlazor.Core.Model.ExifInfo.Tags.init -> void
dymaptic.GeoBlazor.Core.Model.ExifInfoTags
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.Description.init -> void
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.ExifInfoTags(string? Description = null, string? Name = null, string? Value = null) -> void
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.Name.init -> void
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.Value.get -> string?
dymaptic.GeoBlazor.Core.Model.ExifInfoTags.Value.init -> void
dymaptic.GeoBlazor.Core.Model.ExportTileMap
dymaptic.GeoBlazor.Core.Model.ExportTileMap.Export.get -> string?
dymaptic.GeoBlazor.Core.Model.ExportTileMap.Export.init -> void
dymaptic.GeoBlazor.Core.Model.ExportTileMap.Source.get -> string?
dymaptic.GeoBlazor.Core.Model.ExportTileMap.Source.init -> void
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.FacilityIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.FacilityIdField.init -> void
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.FacilityLayerInfo(string? FacilityIdField = null, string? LayerId = null, string? NameField = null, string? SiteIdField = null, long? SublayerId = null) -> void
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.LayerId.get -> string?
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.LayerId.init -> void
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.NameField.get -> string?
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.NameField.init -> void
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.SiteIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.SiteIdField.init -> void
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.SublayerId.get -> long?
dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo.SublayerId.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureEditResultError
dymaptic.GeoBlazor.Core.Model.FeatureEditResultError.FeatureEditResultError(string? Message = null, string? Name = null) -> void
dymaptic.GeoBlazor.Core.Model.FeatureEditResultError.Message.get -> string?
dymaptic.GeoBlazor.Core.Model.FeatureEditResultError.Message.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureEditResultError.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.FeatureEditResultError.Name.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits
dymaptic.GeoBlazor.Core.Model.FeatureEdits.AddAttachments.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>?
dymaptic.GeoBlazor.Core.Model.FeatureEdits.AddAttachments.set -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits.AddFeatures.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.FeatureEdits.AddFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits.DeleteAttachments.get -> System.Collections.Generic.IReadOnlyList<string!>?
dymaptic.GeoBlazor.Core.Model.FeatureEdits.DeleteAttachments.set -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits.DeleteFeatures.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.FeatureEdits.DeleteFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits.FeatureEdits(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>? AddAttachments = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? AddFeatures = null, System.Collections.Generic.IReadOnlyList<string!>? DeleteAttachments = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? DeleteFeatures = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>? UpdateAttachments = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>? UpdateFeatures = null) -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits.UpdateAttachments.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>?
dymaptic.GeoBlazor.Core.Model.FeatureEdits.UpdateAttachments.set -> void
dymaptic.GeoBlazor.Core.Model.FeatureEdits.UpdateFeatures.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.FeatureEdits.UpdateFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.FeatureIdentifier
dymaptic.GeoBlazor.Core.Model.FeatureIdentifier.FeatureIdentifier(string? GlobalId = null, dymaptic.GeoBlazor.Core.Model.ObjectId? ObjectId = null) -> void
dymaptic.GeoBlazor.Core.Model.FeatureIdentifier.GlobalId.get -> string?
dymaptic.GeoBlazor.Core.Model.FeatureIdentifier.GlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureIdentifier.ObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId?
dymaptic.GeoBlazor.Core.Model.FeatureIdentifier.ObjectId.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Analytics.get -> dymaptic.GeoBlazor.Core.Model.AnalyticsCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Analytics.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Attachment.get -> dymaptic.GeoBlazor.Core.Model.AttachmentCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Attachment.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Data.get -> dymaptic.GeoBlazor.Core.Model.DataCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Data.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Editing.get -> dymaptic.GeoBlazor.Core.Model.EditingCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Editing.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.FeatureLayerCapabilities(dymaptic.GeoBlazor.Core.Model.AnalyticsCapability! Analytics, dymaptic.GeoBlazor.Core.Model.AttachmentCapability! Attachment, dymaptic.GeoBlazor.Core.Model.DataCapability! Data, dymaptic.GeoBlazor.Core.Model.EditingCapability! Editing, dymaptic.GeoBlazor.Core.Model.MetadataCapability! Metadata, dymaptic.GeoBlazor.Core.Model.OperationsCapability! Operations, dymaptic.GeoBlazor.Core.Model.QueryCapability! Query, dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability! QueryRelated, dymaptic.GeoBlazor.Core.Model.QueryTopFeaturesCapability! QueryTopFeatures) -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Metadata.get -> dymaptic.GeoBlazor.Core.Model.MetadataCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Metadata.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.OperationsCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.QueryCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.Query.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.QueryRelated.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.QueryTopFeatures.get -> dymaptic.GeoBlazor.Core.Model.QueryTopFeaturesCapability!
dymaptic.GeoBlazor.Core.Model.FeatureLayerCapabilities.QueryTopFeatures.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet
dymaptic.GeoBlazor.Core.Model.FeatureSet.DisplayFieldName.get -> string?
dymaptic.GeoBlazor.Core.Model.FeatureSet.DisplayFieldName.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.ExceededTransferLimit.get -> bool?
dymaptic.GeoBlazor.Core.Model.FeatureSet.ExceededTransferLimit.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.Features.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.FeatureSet.Features.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.FeatureSet(string? DisplayFieldName = null, bool? ExceededTransferLimit = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? Fields = null, dymaptic.GeoBlazor.Core.Enums.GeometryType? GeometryType = null, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? QueryGeometry = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? SpatialReference = null) -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.Fields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Model.FeatureSet.Fields.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.GeometryType?
dymaptic.GeoBlazor.Core.Model.FeatureSet.GeometryType.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.QueryGeometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.FeatureSet.QueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureSet.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.FeatureSet.SpatialReference.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureType
dymaptic.GeoBlazor.Core.Model.FeatureType.Domains.get -> System.Collections.Generic.Dictionary<string!, dymaptic.GeoBlazor.Core.Components.Domain!>!
dymaptic.GeoBlazor.Core.Model.FeatureType.Domains.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureType.FeatureType(string! FeatureTypeId, string! Name, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>! Templates, System.Collections.Generic.Dictionary<string!, dymaptic.GeoBlazor.Core.Components.Domain!>! Domains) -> void
dymaptic.GeoBlazor.Core.Model.FeatureType.FeatureTypeId.get -> string!
dymaptic.GeoBlazor.Core.Model.FeatureType.FeatureTypeId.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureType.Name.get -> string!
dymaptic.GeoBlazor.Core.Model.FeatureType.Name.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureType.Templates.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Interfaces.IFeatureTemplate!>!
dymaptic.GeoBlazor.Core.Model.FeatureType.Templates.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureViewModelLastEditInfo
dymaptic.GeoBlazor.Core.Model.FeatureViewModelLastEditInfo.Date.get -> string?
dymaptic.GeoBlazor.Core.Model.FeatureViewModelLastEditInfo.Date.init -> void
dymaptic.GeoBlazor.Core.Model.FeatureViewModelLastEditInfo.FeatureViewModelLastEditInfo(string? Date = null, string? User = null) -> void
dymaptic.GeoBlazor.Core.Model.FeatureViewModelLastEditInfo.User.get -> string?
dymaptic.GeoBlazor.Core.Model.FeatureViewModelLastEditInfo.User.init -> void
dymaptic.GeoBlazor.Core.Model.FetchResource
dymaptic.GeoBlazor.Core.Model.FetchResource.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.FetchResource.Created.init -> void
dymaptic.GeoBlazor.Core.Model.FetchResource.FetchResource(System.DateTime? Created = null, dymaptic.GeoBlazor.Core.Model.PortalItemResource? Resource = null, int? Size = null) -> void
dymaptic.GeoBlazor.Core.Model.FetchResource.Resource.get -> dymaptic.GeoBlazor.Core.Model.PortalItemResource?
dymaptic.GeoBlazor.Core.Model.FetchResource.Resource.init -> void
dymaptic.GeoBlazor.Core.Model.FetchResource.Size.get -> int?
dymaptic.GeoBlazor.Core.Model.FetchResource.Size.init -> void
dymaptic.GeoBlazor.Core.Model.FieldsIndex
dymaptic.GeoBlazor.Core.Model.FieldsIndex.AbortManager.get -> dymaptic.GeoBlazor.Core.Model.AbortManager?
dymaptic.GeoBlazor.Core.Model.FieldsIndex.AbortManager.set -> void
dymaptic.GeoBlazor.Core.Model.FieldsIndex.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.FieldsIndex.CoreJsModule.set -> void
dymaptic.GeoBlazor.Core.Model.FieldsIndex.DateFields.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Model.FieldsIndex.DateFields.set -> void
dymaptic.GeoBlazor.Core.Model.FieldsIndex.FieldsIndex(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Field!>? DateFields = null) -> void
dymaptic.GeoBlazor.Core.Model.FieldsIndex.Get(string! fieldName) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Field?>!
dymaptic.GeoBlazor.Core.Model.FieldsIndex.GetTimeZone(string! fieldOrFieldName) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.FieldsIndex.Has(string! fieldName) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Model.FieldsIndex.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Model.FieldsIndex.Id.set -> void
dymaptic.GeoBlazor.Core.Model.FieldsIndex.IsDateField(string! fieldName) -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Model.FieldsIndex.JsComponentReference.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.FieldsIndex.JsComponentReference.set -> void
dymaptic.GeoBlazor.Core.Model.FindImagesParameters
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.FindImagesParameters(dymaptic.GeoBlazor.Core.Components.Geometries.Point? FromGeometry = null, int? MaxCount = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? ToGeometry = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.FromGeometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.FromGeometry.set -> void
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.MaxCount.get -> int?
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.MaxCount.set -> void
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.ObjectIds.set -> void
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.ToGeometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.ToGeometry.set -> void
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.FindImagesParameters.Where.set -> void
dymaptic.GeoBlazor.Core.Model.GenericDimension
dymaptic.GeoBlazor.Core.Model.GenericDimension.GenericDimension(string? Name = null) -> void
dymaptic.GeoBlazor.Core.Model.GenericDimension.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.GenericDimension.Name.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService
dymaptic.GeoBlazor.Core.Model.GeocodeService.Batch.get -> bool
dymaptic.GeoBlazor.Core.Model.GeocodeService.Batch.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.EastLon.get -> string?
dymaptic.GeoBlazor.Core.Model.GeocodeService.EastLon.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.GeocodeService.Name.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.NorthLat.get -> string?
dymaptic.GeoBlazor.Core.Model.GeocodeService.NorthLat.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.Placefinding.get -> bool
dymaptic.GeoBlazor.Core.Model.GeocodeService.Placefinding.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.SouthLat.get -> string?
dymaptic.GeoBlazor.Core.Model.GeocodeService.SouthLat.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.Suggest.get -> bool
dymaptic.GeoBlazor.Core.Model.GeocodeService.Suggest.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.GeocodeService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.GeocodeService.WestLon.get -> string?
dymaptic.GeoBlazor.Core.Model.GeocodeService.WestLon.init -> void
dymaptic.GeoBlazor.Core.Model.GeographicTransformation
dymaptic.GeoBlazor.Core.Model.GeographicTransformation.GetInverse() -> dymaptic.GeoBlazor.Core.Model.GeographicTransformation!
dymaptic.GeoBlazor.Core.Model.GeographicTransformation.Steps.get -> dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep![]!
dymaptic.GeoBlazor.Core.Model.GeographicTransformation.Steps.set -> void
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep.IsInverse.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep.IsInverse.set -> void
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep.Wkid.get -> double?
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep.Wkid.set -> void
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep.Wkt.get -> string?
dymaptic.GeoBlazor.Core.Model.GeographicTransformationStep.Wkt.set -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.AddFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.AddFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.GeoJSONLayerApplyEditsEdits(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? AddFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? GraphicCollectionDeleteFeatures = null, System.Collections.Generic.IReadOnlyCollection<string!>? StringCollectionDeleteFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? UpdateFeatures = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.GraphicCollectionDeleteFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.GraphicCollectionDeleteFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.StringCollectionDeleteFeatures.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.StringCollectionDeleteFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.UpdateFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerApplyEditsEdits.UpdateFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Attachment.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesAttachment?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Attachment.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Data.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Data.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Editing.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Editing.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.GeoJSONLayerCapabilities(dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesAttachment? Attachment = null, dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData? Data = null, dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing? Editing = null, dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations? Operations = null, dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery? Query = null, dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated? QueryRelated = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.Query.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilities.QueryRelated.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesAttachment
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesAttachment.GeoJSONLayerCapabilitiesAttachment(bool? SupportsResize = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesAttachment.SupportsResize.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesAttachment.SupportsResize.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.GeoJSONLayerCapabilitiesData(bool? SupportsAttachment = null, bool? SupportsM = null, bool? SupportsZ = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.SupportsAttachment.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.SupportsAttachment.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.SupportsM.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.SupportsM.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.SupportsZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesData.SupportsZ.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.GeoJSONLayerCapabilitiesEditing(bool? SupportsDeleteByAnonymous = null, bool? SupportsDeleteByOthers = null, bool? SupportsGeometryUpdate = null, bool? SupportsGlobalId = null, bool? SupportsRollbackOnFailure = null, bool? SupportsUpdateByAnonymous = null, bool? SupportsUpdateByOthers = null, bool? SupportsUpdateWithoutM = null, bool? SupportsUploadWithItemId = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsDeleteByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsDeleteByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsDeleteByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsDeleteByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsGeometryUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsGeometryUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsGlobalId.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsGlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsRollbackOnFailure.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsRollbackOnFailure.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUpdateByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUpdateByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUpdateByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUpdateByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUpdateWithoutM.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUpdateWithoutM.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUploadWithItemId.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesEditing.SupportsUploadWithItemId.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.GeoJSONLayerCapabilitiesOperations(bool? SupportsAdd = null, bool? SupportsCalculate = null, bool? SupportsDelete = null, bool? SupportsEditing = null, bool? SupportsQuery = null, bool? SupportsQueryAttachments = null, bool? SupportsResizeAttachments = null, bool? SupportsUpdate = null, bool? SupportsValidateSql = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsAdd.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsAdd.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsCalculate.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsCalculate.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsDelete.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsDelete.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsEditing.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsEditing.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsQueryAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsQueryAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsResizeAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsResizeAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsValidateSql.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesOperations.SupportsValidateSql.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.GeoJSONLayerCapabilitiesQuery(bool? SupportsCentroid = null, bool? SupportsDisjointSpatialRelationship = null, bool? SupportsDistance = null, bool? SupportsDistinct = null, bool? SupportsExtent = null, bool? SupportsGeometryProperties = null, bool? SupportsHavingClause = null, bool? SupportsHistoricMoment = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null, bool? SupportsPercentileStatistics = null, bool? SupportsQuantization = null, bool? SupportsQuantizationEditMode = null, bool? SupportsQueryGeometry = null, bool? SupportsResultType = null, bool? SupportsSqlExpression = null, bool? SupportsStandardizedQueriesOnly = null, bool? SupportsStatistics = null, bool? SupportsTrueCurve = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsCentroid.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsDistance.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsDistance.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsDistinct.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsExtent.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsExtent.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsGeometryProperties.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsGeometryProperties.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsHavingClause.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsHavingClause.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsHistoricMoment.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsHistoricMoment.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsPercentileStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsPercentileStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsQuantization.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsQuantization.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsQuantizationEditMode.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsQuantizationEditMode.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsQueryGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsQueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsResultType.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsResultType.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsSqlExpression.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsSqlExpression.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsTrueCurve.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQuery.SupportsTrueCurve.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.GeoJSONLayerCapabilitiesQueryRelated(bool? SupportsCount = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null) -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.SupportsCount.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.SupportsCount.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.GeoJSONLayerCapabilitiesQueryRelated.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.GeometryFieldsInfo
dymaptic.GeoBlazor.Core.Model.GeometryFieldsInfo.GeometryFieldsInfo() -> void
dymaptic.GeoBlazor.Core.Model.Geotrigger
dymaptic.GeoBlazor.Core.Model.Geotrigger.Geotrigger() -> void
dymaptic.GeoBlazor.Core.Model.GeotriggersInfo
dymaptic.GeoBlazor.Core.Model.GeotriggersInfo.Geotriggers.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Geotrigger!>?
dymaptic.GeoBlazor.Core.Model.GeotriggersInfo.Geotriggers.init -> void
dymaptic.GeoBlazor.Core.Model.GeotriggersInfo.GeotriggersInfo(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.Geotrigger!>? Geotriggers = null) -> void
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.GoToOverrideParameters(System.Guid ViewId, dymaptic.GeoBlazor.Core.Model.GoToTarget! Target, dymaptic.GeoBlazor.Core.Options.GoToOptions? Options) -> void
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.Options.get -> dymaptic.GeoBlazor.Core.Options.GoToOptions?
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.Options.init -> void
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.Target.get -> dymaptic.GeoBlazor.Core.Model.GoToTarget!
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.Target.init -> void
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.ViewId.get -> System.Guid
dymaptic.GeoBlazor.Core.Model.GoToOverrideParameters.ViewId.init -> void
dymaptic.GeoBlazor.Core.Model.GoToParameters
dymaptic.GeoBlazor.Core.Model.GoToParameters.GoToParameters(dymaptic.GeoBlazor.Core.Options.GoToOptions? Options = null, dymaptic.GeoBlazor.Core.Model.GoToTarget? Target = null) -> void
dymaptic.GeoBlazor.Core.Model.GoToParameters.Options.get -> dymaptic.GeoBlazor.Core.Options.GoToOptions?
dymaptic.GeoBlazor.Core.Model.GoToParameters.Options.set -> void
dymaptic.GeoBlazor.Core.Model.GoToParameters.Target.get -> dymaptic.GeoBlazor.Core.Model.GoToTarget?
dymaptic.GeoBlazor.Core.Model.GoToParameters.Target.set -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget
dymaptic.GeoBlazor.Core.Model.GoToTarget.Center.get -> double[]?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Center.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.GoToTarget(object? Target, double[]? Center, double? Scale, double? Zoom, double? Heading, double? Tilt, dymaptic.GeoBlazor.Core.Components.Geometries.Point? Position, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]? TargetGeometries, dymaptic.GeoBlazor.Core.Components.Graphic![]? TargetGraphics, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? TargetGeometry, dymaptic.GeoBlazor.Core.Components.Graphic? TargetGraphic) -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.Heading.get -> double?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Heading.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.Position.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Position.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.Scale.get -> double?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Scale.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.Target.get -> object?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Target.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGeometries.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]?
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGeometries.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGeometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGraphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGraphic.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGraphics.get -> dymaptic.GeoBlazor.Core.Components.Graphic![]?
dymaptic.GeoBlazor.Core.Model.GoToTarget.TargetGraphics.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.Tilt.get -> double?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Tilt.init -> void
dymaptic.GeoBlazor.Core.Model.GoToTarget.Zoom.get -> double?
dymaptic.GeoBlazor.Core.Model.GoToTarget.Zoom.init -> void
dymaptic.GeoBlazor.Core.Model.GraphicHit
dymaptic.GeoBlazor.Core.Model.GraphicHit.Graphic.get -> dymaptic.GeoBlazor.Core.Components.Graphic!
dymaptic.GeoBlazor.Core.Model.GraphicHit.Graphic.init -> void
dymaptic.GeoBlazor.Core.Model.GraphicHit.GraphicHit(dymaptic.GeoBlazor.Core.Components.Graphic! Graphic, System.Guid? LayerId, dymaptic.GeoBlazor.Core.Components.Geometries.Point! MapPoint) -> void
dymaptic.GeoBlazor.Core.Model.GraphicHit.LayerId.get -> System.Guid?
dymaptic.GeoBlazor.Core.Model.GraphicHit.LayerId.init -> void
dymaptic.GeoBlazor.Core.Model.GraphicOrigin
dymaptic.GeoBlazor.Core.Model.GraphicOrigin.GraphicOrigin(System.Guid? LayerId = null, string? ArcGISLayerId = null, int? LayerIndex = null) -> void
dymaptic.GeoBlazor.Core.Model.Ground
dymaptic.GeoBlazor.Core.Model.Ground.AbortManager.get -> dymaptic.GeoBlazor.Core.Model.AbortManager?
dymaptic.GeoBlazor.Core.Model.Ground.AbortManager.set -> void
dymaptic.GeoBlazor.Core.Model.Ground.CancelLoad() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.Ground.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.Ground.CoreJsModule.set -> void
dymaptic.GeoBlazor.Core.Model.Ground.CreateElevationSampler(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Interfaces.IElevationSampler?>!
dymaptic.GeoBlazor.Core.Model.Ground.Ground(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>? Layers = null, dymaptic.GeoBlazor.Core.Components.GroundNavigationConstraint? NavigationConstraint = null, double? Opacity = null, dymaptic.GeoBlazor.Core.Model.MapColor? SurfaceColor = null) -> void
dymaptic.GeoBlazor.Core.Model.Ground.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Model.Ground.Id.set -> void
dymaptic.GeoBlazor.Core.Model.Ground.IsFulfilled() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Model.Ground.IsRejected() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Model.Ground.IsResolved() -> System.Threading.Tasks.Task<bool?>!
dymaptic.GeoBlazor.Core.Model.Ground.JsComponentReference.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.Ground.JsComponentReference.set -> void
dymaptic.GeoBlazor.Core.Model.Ground.Layers.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Layers.Layer!>?
dymaptic.GeoBlazor.Core.Model.Ground.Layers.init -> void
dymaptic.GeoBlazor.Core.Model.Ground.Load(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.Ground.LoadAll() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Ground?>!
dymaptic.GeoBlazor.Core.Model.Ground.NavigationConstraint.get -> dymaptic.GeoBlazor.Core.Components.GroundNavigationConstraint?
dymaptic.GeoBlazor.Core.Model.Ground.NavigationConstraint.init -> void
dymaptic.GeoBlazor.Core.Model.Ground.Opacity.get -> double?
dymaptic.GeoBlazor.Core.Model.Ground.Opacity.init -> void
dymaptic.GeoBlazor.Core.Model.Ground.QueryElevation(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.ElevationQueryResult?>!
dymaptic.GeoBlazor.Core.Model.Ground.SurfaceColor.get -> dymaptic.GeoBlazor.Core.Model.MapColor?
dymaptic.GeoBlazor.Core.Model.Ground.SurfaceColor.init -> void
dymaptic.GeoBlazor.Core.Model.Ground.When(System.Func<System.Threading.Tasks.Task!>! callback, System.Func<System.Threading.Tasks.Task!>! errback) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.Handle
dymaptic.GeoBlazor.Core.Model.Handle.Handle(Microsoft.JSInterop.IJSObjectReference! JsObjectReference) -> void
dymaptic.GeoBlazor.Core.Model.Handle.JsObjectReference.get -> Microsoft.JSInterop.IJSObjectReference!
dymaptic.GeoBlazor.Core.Model.Handle.JsObjectReference.init -> void
dymaptic.GeoBlazor.Core.Model.Handle.Remove() -> System.Threading.Tasks.Task!
dymaptic.GeoBlazor.Core.Model.HeightModelInfo
dymaptic.GeoBlazor.Core.Model.HeightModelInfo.HeightModelInfo() -> void
dymaptic.GeoBlazor.Core.Model.HelperServices
dymaptic.GeoBlazor.Core.Model.HelperServices.AiAssistantServices.get -> dymaptic.GeoBlazor.Core.Model.AiAssistantServices?
dymaptic.GeoBlazor.Core.Model.HelperServices.AiAssistantServices.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AiUtilityServices.get -> dymaptic.GeoBlazor.Core.Model.AiUtilityServices?
dymaptic.GeoBlazor.Core.Model.HelperServices.AiUtilityServices.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Analysis.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Analysis.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AnalysisModels.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AnalysisModels.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncClosestFacility.get -> dymaptic.GeoBlazor.Core.Model.AsyncRoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncClosestFacility.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncFleetRouting.get -> dymaptic.GeoBlazor.Core.Model.AsyncFleetRouting?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncFleetRouting.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncGeocode.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncGeocode.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncLocationAllocation.get -> dymaptic.GeoBlazor.Core.Model.AsyncRoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncLocationAllocation.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncODCostMatrix.get -> dymaptic.GeoBlazor.Core.Model.AsyncRoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncODCostMatrix.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncPrintTask.get -> dymaptic.GeoBlazor.Core.Model.AsyncPrintTask?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncPrintTask.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncRoute.get -> dymaptic.GeoBlazor.Core.Model.AsyncRoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncRoute.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncServiceArea.get -> dymaptic.GeoBlazor.Core.Model.AsyncRoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncServiceArea.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncVRP.get -> dymaptic.GeoBlazor.Core.Model.AsyncRoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.AsyncVRP.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.ClosestFacility.get -> dymaptic.GeoBlazor.Core.Model.RoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.ClosestFacility.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.CreditEstimation.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.CreditEstimation.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.DashboardsUtility.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.DashboardsUtility.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.DataPipelines.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.DataPipelines.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.DatastoreManagement.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.DatastoreManagement.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.DefaultElevationLayers.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ElevationLayerService!>?
dymaptic.GeoBlazor.Core.Model.HelperServices.DefaultElevationLayers.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Elevation.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Elevation.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.ElevationSync.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.ElevationSync.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Geocode.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.GeocodeService!>?
dymaptic.GeoBlazor.Core.Model.HelperServices.Geocode.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Geoenrichment.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Geoenrichment.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Geometry.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Geometry.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Hydrology.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Hydrology.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.LayoutInfoTask.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.LayoutInfoTask.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.LocationTracking.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.LocationTracking.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.OdCostMatrix.get -> dymaptic.GeoBlazor.Core.Model.RoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.OdCostMatrix.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.OrthomappingElevation.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.OrthomappingElevation.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Packaging.get -> dymaptic.GeoBlazor.Core.Model.PackagingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Packaging.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.PrintTask.get -> dymaptic.GeoBlazor.Core.Model.PrintTaskService?
dymaptic.GeoBlazor.Core.Model.HelperServices.PrintTask.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.RasterAnalytics.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.RasterAnalytics.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.RasterUtilities.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.RasterUtilities.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Route.get -> dymaptic.GeoBlazor.Core.Model.RoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Route.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.RoutingUtilities.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.RoutingUtilities.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.ServiceArea.get -> dymaptic.GeoBlazor.Core.Model.RoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.ServiceArea.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.SnapToRoads.get -> dymaptic.GeoBlazor.Core.Model.RoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.SnapToRoads.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Symbols.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Symbols.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.SyncVRP.get -> dymaptic.GeoBlazor.Core.Model.RoutingService?
dymaptic.GeoBlazor.Core.Model.HelperServices.SyncVRP.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.Traffic.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.Traffic.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.TrafficData.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.TrafficData.init -> void
dymaptic.GeoBlazor.Core.Model.HelperServices.WorkflowManager.get -> dymaptic.GeoBlazor.Core.Model.UrlService?
dymaptic.GeoBlazor.Core.Model.HelperServices.WorkflowManager.init -> void
dymaptic.GeoBlazor.Core.Model.ImageData
dymaptic.GeoBlazor.Core.Model.ImageData.ColorSpace.get -> string!
dymaptic.GeoBlazor.Core.Model.ImageData.ColorSpace.init -> void
dymaptic.GeoBlazor.Core.Model.ImageData.Data.get -> byte[]!
dymaptic.GeoBlazor.Core.Model.ImageData.Data.init -> void
dymaptic.GeoBlazor.Core.Model.ImageData.Height.get -> long
dymaptic.GeoBlazor.Core.Model.ImageData.Height.init -> void
dymaptic.GeoBlazor.Core.Model.ImageData.ImageData(byte[]! Data, string! ColorSpace, long Height, long Width) -> void
dymaptic.GeoBlazor.Core.Model.ImageData.Width.get -> long
dymaptic.GeoBlazor.Core.Model.ImageData.Width.init -> void
dymaptic.GeoBlazor.Core.Model.ImageObject
dymaptic.GeoBlazor.Core.Model.ImageObject.Data.get -> System.IO.Stream?
dymaptic.GeoBlazor.Core.Model.ImageObject.Data.init -> void
dymaptic.GeoBlazor.Core.Model.ImageObject.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.ImageObject.Height.init -> void
dymaptic.GeoBlazor.Core.Model.ImageObject.ImageObject(System.IO.Stream? Data = null, int? Height = null, int? Width = null) -> void
dymaptic.GeoBlazor.Core.Model.ImageObject.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.ImageObject.Width.init -> void
dymaptic.GeoBlazor.Core.Model.LabelInfos
dymaptic.GeoBlazor.Core.Model.LabelInfos.LabelInfos(System.Collections.Generic.IReadOnlyCollection<string!>! Values, string? Max = null, string? Min = null) -> void
dymaptic.GeoBlazor.Core.Model.LabelInfos.Max.get -> string?
dymaptic.GeoBlazor.Core.Model.LabelInfos.Max.init -> void
dymaptic.GeoBlazor.Core.Model.LabelInfos.Min.get -> string?
dymaptic.GeoBlazor.Core.Model.LabelInfos.Min.init -> void
dymaptic.GeoBlazor.Core.Model.LabelInfos.Values.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
dymaptic.GeoBlazor.Core.Model.LabelInfos.Values.init -> void
dymaptic.GeoBlazor.Core.Model.LayerSearchSourceFilter
dymaptic.GeoBlazor.Core.Model.LayerSearchSourceFilter.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.LayerSearchSourceFilter.Geometry.set -> void
dymaptic.GeoBlazor.Core.Model.LayerSearchSourceFilter.LayerSearchSourceFilter() -> void
dymaptic.GeoBlazor.Core.Model.LayerSearchSourceFilter.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.LayerSearchSourceFilter.Where.set -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.FacilityIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.FacilityIdField.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LayerId.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LayerId.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LevelIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LevelIdField.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LevelLayerInfo(string? FacilityIdField = null, string? LayerId = null, string? LevelIdField = null, string? LevelNumberField = null, string? LongNameField = null, string? ShortNameField = null, long? SublayerId = null, string? VerticalOrderField = null) -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LevelNumberField.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LevelNumberField.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LongNameField.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.LongNameField.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.ShortNameField.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.ShortNameField.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.SublayerId.get -> long?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.SublayerId.init -> void
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.VerticalOrderField.get -> string?
dymaptic.GeoBlazor.Core.Model.LevelLayerInfo.VerticalOrderField.init -> void
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.HtmlElementContent.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.HtmlElementContent.set -> void
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.ListItemPanelContent(dymaptic.GeoBlazor.Core.Components.Widgets.Widget! widgetContent) -> void
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.ListItemPanelContent(Microsoft.AspNetCore.Components.ElementReference htmlElementContent) -> void
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.ListItemPanelContent(string! stringContent) -> void
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.StringContent.get -> string?
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.StringContent.set -> void
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.WidgetContent.get -> dymaptic.GeoBlazor.Core.Components.Widgets.Widget?
dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.WidgetContent.set -> void
dymaptic.GeoBlazor.Core.Model.LocatorSearchSourceFilter
dymaptic.GeoBlazor.Core.Model.LocatorSearchSourceFilter.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.LocatorSearchSourceFilter.Geometry.set -> void
dymaptic.GeoBlazor.Core.Model.LocatorSearchSourceFilter.LocatorSearchSourceFilter() -> void
dymaptic.GeoBlazor.Core.Model.LogicComponent
dymaptic.GeoBlazor.Core.Model.LogicComponent.Component.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.LogicComponent.Component.set -> void
dymaptic.GeoBlazor.Core.Model.LogicComponent.Dispose() -> void
dymaptic.GeoBlazor.Core.Model.LogicComponent.DotNetComponentReference.get -> Microsoft.JSInterop.DotNetObjectReference<dymaptic.GeoBlazor.Core.Model.LogicComponent!>!
dymaptic.GeoBlazor.Core.Model.LogicComponent.LogicComponent(dymaptic.GeoBlazor.Core.Model.AuthenticationManager! authenticationManager) -> void
dymaptic.GeoBlazor.Core.Model.LogicComponent.OnJavascriptError(dymaptic.GeoBlazor.Core.Exceptions.JavascriptError! error) -> void
dymaptic.GeoBlazor.Core.Model.MapColor
dymaptic.GeoBlazor.Core.Model.MapColor.Clone() -> dymaptic.GeoBlazor.Core.Model.MapColor!
dymaptic.GeoBlazor.Core.Model.MapColor.Equals(dymaptic.GeoBlazor.Core.Model.MapColor? other) -> bool
dymaptic.GeoBlazor.Core.Model.MapColor.HexOrNameValue.get -> string?
dymaptic.GeoBlazor.Core.Model.MapColor.HexOrNameValue.set -> void
dymaptic.GeoBlazor.Core.Model.MapColor.MapColor() -> void
dymaptic.GeoBlazor.Core.Model.MapColor.MapColor(params double[]! values) -> void
dymaptic.GeoBlazor.Core.Model.MapColor.MapColor(string! hexOrNameValue) -> void
dymaptic.GeoBlazor.Core.Model.MapColor.RgbaValues.get -> double[]?
dymaptic.GeoBlazor.Core.Model.MapColor.RgbaValues.set -> void
dymaptic.GeoBlazor.Core.Model.MapColor.ToCss() -> string?
dymaptic.GeoBlazor.Core.Model.MapColor.ToHex() -> string?
dymaptic.GeoBlazor.Core.Model.MapColor.ToSystemColor() -> System.Drawing.Color?
dymaptic.GeoBlazor.Core.Model.MapFloorInfo
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.FacilityLayer.get -> dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo?
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.FacilityLayer.init -> void
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.LevelLayer.get -> dymaptic.GeoBlazor.Core.Model.LevelLayerInfo?
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.LevelLayer.init -> void
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.MapFloorInfo(dymaptic.GeoBlazor.Core.Model.FacilityLayerInfo? FacilityLayer = null, dymaptic.GeoBlazor.Core.Model.LevelLayerInfo? LevelLayer = null, dymaptic.GeoBlazor.Core.Model.SiteLayerInfo? SiteLayer = null) -> void
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.SiteLayer.get -> dymaptic.GeoBlazor.Core.Model.SiteLayerInfo?
dymaptic.GeoBlazor.Core.Model.MapFloorInfo.SiteLayer.init -> void
dymaptic.GeoBlazor.Core.Model.MapPath
dymaptic.GeoBlazor.Core.Model.MapPath.Clone() -> dymaptic.GeoBlazor.Core.Model.MapPath!
dymaptic.GeoBlazor.Core.Model.MapPath.Equals(dymaptic.GeoBlazor.Core.Model.MapPath? other) -> bool
dymaptic.GeoBlazor.Core.Model.MapPath.MapPath(params dymaptic.GeoBlazor.Core.Model.MapPoint![]! p) -> void
dymaptic.GeoBlazor.Core.Model.MapPath.MapPath(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Model.MapPoint!>! p) -> void
dymaptic.GeoBlazor.Core.Model.MapPoint
dymaptic.GeoBlazor.Core.Model.MapPoint.Copy() -> dymaptic.GeoBlazor.Core.Model.MapPoint!
dymaptic.GeoBlazor.Core.Model.MapPoint.Equals(dymaptic.GeoBlazor.Core.Model.MapPoint? other) -> bool
dymaptic.GeoBlazor.Core.Model.MapPoint.MapPoint(params double[]! p) -> void
dymaptic.GeoBlazor.Core.Model.MapPoint.MapPoint(System.Collections.Generic.IEnumerable<double>! p) -> void
dymaptic.GeoBlazor.Core.Model.MeasurementValue
dymaptic.GeoBlazor.Core.Model.MeasurementValue.DisplayValue.get -> string?
dymaptic.GeoBlazor.Core.Model.MeasurementValue.DisplayValue.init -> void
dymaptic.GeoBlazor.Core.Model.MeasurementValue.MeasurementValue(string? DisplayValue = null, double? Uncertainty = null, string? Unit = null, double? Value = null) -> void
dymaptic.GeoBlazor.Core.Model.MeasurementValue.Uncertainty.get -> double?
dymaptic.GeoBlazor.Core.Model.MeasurementValue.Uncertainty.init -> void
dymaptic.GeoBlazor.Core.Model.MeasurementValue.Unit.get -> string?
dymaptic.GeoBlazor.Core.Model.MeasurementValue.Unit.init -> void
dymaptic.GeoBlazor.Core.Model.MeasurementValue.Value.get -> double?
dymaptic.GeoBlazor.Core.Model.MeasurementValue.Value.init -> void
dymaptic.GeoBlazor.Core.Model.Members
dymaptic.GeoBlazor.Core.Model.Members.Admins.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.Members.Admins.init -> void
dymaptic.GeoBlazor.Core.Model.Members.Members(System.Collections.Generic.IReadOnlyCollection<string!>? Admins = null, string? Owner = null, System.Collections.Generic.IReadOnlyCollection<string!>? Users = null) -> void
dymaptic.GeoBlazor.Core.Model.Members.Owner.get -> string?
dymaptic.GeoBlazor.Core.Model.Members.Owner.init -> void
dymaptic.GeoBlazor.Core.Model.Members.Users.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.Members.Users.init -> void
dymaptic.GeoBlazor.Core.Model.MetadataCapability
dymaptic.GeoBlazor.Core.Model.MetadataCapability.MetadataCapability(bool SupportsAdvancedFieldProperties) -> void
dymaptic.GeoBlazor.Core.Model.MetadataCapability.SupportsAdvancedFieldProperties.get -> bool
dymaptic.GeoBlazor.Core.Model.MetadataCapability.SupportsAdvancedFieldProperties.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule
dymaptic.GeoBlazor.Core.Model.MosaicRule.Ascending.get -> bool?
dymaptic.GeoBlazor.Core.Model.MosaicRule.Ascending.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.ItemRasterFunction.get -> dymaptic.GeoBlazor.Core.Components.RasterFunction?
dymaptic.GeoBlazor.Core.Model.MosaicRule.ItemRasterFunction.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.LockRasterIds.get -> System.Collections.Generic.IReadOnlyCollection<long>?
dymaptic.GeoBlazor.Core.Model.MosaicRule.LockRasterIds.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.Method.get -> dymaptic.GeoBlazor.Core.Enums.Method?
dymaptic.GeoBlazor.Core.Model.MosaicRule.Method.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.MosaicRule(bool? Ascending = null, dymaptic.GeoBlazor.Core.Components.RasterFunction? ItemRasterFunction = null, System.Collections.Generic.IReadOnlyCollection<long>? LockRasterIds = null, dymaptic.GeoBlazor.Core.Enums.Method? Method = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? MultidimensionalDefinition = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null, dymaptic.GeoBlazor.Core.Enums.Operation? Operation = null, string? SortField = null, string? SortValue = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? Viewpoint = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.MultidimensionalDefinition.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Model.MosaicRule.MultidimensionalDefinition.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.MosaicRule.ObjectIds.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.Operation.get -> dymaptic.GeoBlazor.Core.Enums.Operation?
dymaptic.GeoBlazor.Core.Model.MosaicRule.Operation.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.SortField.get -> string?
dymaptic.GeoBlazor.Core.Model.MosaicRule.SortField.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.SortValue.get -> string?
dymaptic.GeoBlazor.Core.Model.MosaicRule.SortValue.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.Viewpoint.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.MosaicRule.Viewpoint.init -> void
dymaptic.GeoBlazor.Core.Model.MosaicRule.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.MosaicRule.Where.init -> void
dymaptic.GeoBlazor.Core.Model.ObjectId
dymaptic.GeoBlazor.Core.Model.ObjectId.Equals(dymaptic.GeoBlazor.Core.Model.ObjectId? other) -> bool
dymaptic.GeoBlazor.Core.Model.ObjectId.NumericVal.get -> long?
dymaptic.GeoBlazor.Core.Model.ObjectId.ObjectId(long numericVal) -> void
dymaptic.GeoBlazor.Core.Model.ObjectId.ObjectId(string! stringVal) -> void
dymaptic.GeoBlazor.Core.Model.ObjectId.StringVal.get -> string!
dymaptic.GeoBlazor.Core.Model.OperationsCapability
dymaptic.GeoBlazor.Core.Model.OperationsCapability.OperationsCapability(bool SupportsAdd, bool SupportsCalculate, bool SupportsDelete, bool SupportsEditing, bool SupportsQuery, bool SupportsQueryAttachments, bool SupportsQueryTopFeatures, bool SupportsUpdate, bool SupportsValidateSql) -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsAdd.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsAdd.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsCalculate.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsCalculate.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsDelete.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsDelete.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsEditing.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsEditing.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsQuery.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsQueryAttachments.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsQueryAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsQueryTopFeatures.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsQueryTopFeatures.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsUpdate.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsValidateSql.get -> bool
dymaptic.GeoBlazor.Core.Model.OperationsCapability.SupportsValidateSql.init -> void
dymaptic.GeoBlazor.Core.Model.OrientationInfo
dymaptic.GeoBlazor.Core.Model.OrientationInfo.Id.get -> long
dymaptic.GeoBlazor.Core.Model.OrientationInfo.Id.init -> void
dymaptic.GeoBlazor.Core.Model.OrientationInfo.Mirrored.get -> bool
dymaptic.GeoBlazor.Core.Model.OrientationInfo.Mirrored.init -> void
dymaptic.GeoBlazor.Core.Model.OrientationInfo.OrientationInfo(long Id, double Rotation, bool Mirrored, long? OrientationInfoId = null) -> void
dymaptic.GeoBlazor.Core.Model.OrientationInfo.OrientationInfoId.get -> long?
dymaptic.GeoBlazor.Core.Model.OrientationInfo.OrientationInfoId.init -> void
dymaptic.GeoBlazor.Core.Model.OrientationInfo.Rotation.get -> double
dymaptic.GeoBlazor.Core.Model.OrientationInfo.Rotation.init -> void
dymaptic.GeoBlazor.Core.Model.PackagingService
dymaptic.GeoBlazor.Core.Model.PackagingService.ExportTilesMap.get -> System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.ExportTileMap!>?
dymaptic.GeoBlazor.Core.Model.PackagingService.ExportTilesMap.init -> void
dymaptic.GeoBlazor.Core.Model.PackagingService.MaxMapAreaItemsLimit.get -> int
dymaptic.GeoBlazor.Core.Model.PackagingService.MaxMapAreaItemsLimit.init -> void
dymaptic.GeoBlazor.Core.Model.PackagingService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.PackagingService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData.PixelBlockAddDataPlaneData(System.Collections.Generic.IReadOnlyCollection<double>? Pixels = null, dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics? Statistics = null) -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData.Pixels.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData.Pixels.set -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData.Statistics.get -> dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics?
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneData.Statistics.set -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.MaxValue.get -> double?
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.MaxValue.init -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.MinValue.get -> double?
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.MinValue.init -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.NoDataValue.get -> double?
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.NoDataValue.init -> void
dymaptic.GeoBlazor.Core.Model.PixelBlockAddDataPlaneDataStatistics.PixelBlockAddDataPlaneDataStatistics(double? MaxValue = null, double? MinValue = null, double? NoDataValue = null) -> void
dymaptic.GeoBlazor.Core.Model.PixelSize
dymaptic.GeoBlazor.Core.Model.PixelSize.PixelSize(double X, double Y, dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference? SpatialReference = null) -> void
dymaptic.GeoBlazor.Core.Model.PixelSize.SpatialReference.get -> dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference?
dymaptic.GeoBlazor.Core.Model.PixelSize.SpatialReference.init -> void
dymaptic.GeoBlazor.Core.Model.PixelSize.X.get -> double
dymaptic.GeoBlazor.Core.Model.PixelSize.X.init -> void
dymaptic.GeoBlazor.Core.Model.PixelSize.Y.get -> double
dymaptic.GeoBlazor.Core.Model.PixelSize.Y.init -> void
dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference
dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference.PixelSizeSpatialReference(long? Wkid = null, double? Wkt = null) -> void
dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference.Wkid.get -> long?
dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference.Wkid.init -> void
dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference.Wkt.get -> double?
dymaptic.GeoBlazor.Core.Model.PixelSizeSpatialReference.Wkt.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup
dymaptic.GeoBlazor.Core.Model.PortalGroup.AbortManager.get -> dymaptic.GeoBlazor.Core.Model.AbortManager?
dymaptic.GeoBlazor.Core.Model.PortalGroup.AbortManager.set -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Access.get -> dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Access.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.PortalGroup.CoreJsModule.set -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Created.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Description.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.FetchCategorySchema(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string![]?>!
dymaptic.GeoBlazor.Core.Model.PortalGroup.FetchMembers(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.Members?>!
dymaptic.GeoBlazor.Core.Model.PortalGroup.GetThumbnailUrl(int width) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.PortalGroup.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Model.PortalGroup.Id.set -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.IsInvitationOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.PortalGroup.IsInvitationOnly.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.JsComponentReference.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.PortalGroup.JsComponentReference.set -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Modified.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Modified.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Owner.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Owner.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Portal.get -> dymaptic.GeoBlazor.Core.Components.Portal?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Portal.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.PortalGroup(dymaptic.GeoBlazor.Core.Enums.PortalGroupAccess? Access = null, System.DateTime? Created = null, string? Description = null, bool? IsInvitationOnly = null, System.DateTime? Modified = null, string? Owner = null, dymaptic.GeoBlazor.Core.Components.Portal? Portal = null, string? PortalGroupId = null, string? Snippet = null, System.Collections.Generic.IReadOnlyCollection<string!>? Tags = null, string? Title = null) -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.PortalGroupId.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalGroup.PortalGroupId.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.QueryItems(dymaptic.GeoBlazor.Core.Model.PortalQueryParams! queryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Results.PortalQueryResult?>!
dymaptic.GeoBlazor.Core.Model.PortalGroup.Snippet.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Snippet.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Tags.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Tags.init -> void
dymaptic.GeoBlazor.Core.Model.PortalGroup.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalGroup.Title.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHub
dymaptic.GeoBlazor.Core.Model.PortalHub.Enabled.get -> bool
dymaptic.GeoBlazor.Core.Model.PortalHub.Enabled.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHub.Settings.get -> dymaptic.GeoBlazor.Core.Model.PortalHubSettings?
dymaptic.GeoBlazor.Core.Model.PortalHub.Settings.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubCommunityOrg
dymaptic.GeoBlazor.Core.Model.PortalHubCommunityOrg.OrgId.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalHubCommunityOrg.OrgId.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubCommunityOrg.PortalHostname.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalHubCommunityOrg.PortalHostname.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubEvents
dymaptic.GeoBlazor.Core.Model.PortalHubEvents.PublicViewId.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalHubEvents.PublicViewId.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubEvents.ServiceId.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalHubEvents.ServiceId.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubSettings
dymaptic.GeoBlazor.Core.Model.PortalHubSettings.CommunityOrg.get -> dymaptic.GeoBlazor.Core.Model.PortalHubCommunityOrg?
dymaptic.GeoBlazor.Core.Model.PortalHubSettings.CommunityOrg.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubSettings.Events.get -> dymaptic.GeoBlazor.Core.Model.PortalHubEvents?
dymaptic.GeoBlazor.Core.Model.PortalHubSettings.Events.init -> void
dymaptic.GeoBlazor.Core.Model.PortalHubSettings.OrgType.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalHubSettings.OrgType.init -> void
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.PortalItemApplicationProxies(string? ProxyId = null, string? ProxyUrl = null, string? SourceUrl = null) -> void
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.ProxyId.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.ProxyId.init -> void
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.ProxyUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.ProxyUrl.init -> void
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.SourceUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalItemApplicationProxies.SourceUrl.init -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource
dymaptic.GeoBlazor.Core.Model.PortalItemResource.AbortManager.get -> dymaptic.GeoBlazor.Core.Model.AbortManager?
dymaptic.GeoBlazor.Core.Model.PortalItemResource.AbortManager.set -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.CoreJsModule.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.PortalItemResource.CoreJsModule.set -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.Fetch(dymaptic.GeoBlazor.Core.Enums.ResponseType responseType, dymaptic.GeoBlazor.Core.Options.PortalItemResourceFetchOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.PortalItemResource.Id.get -> System.Guid
dymaptic.GeoBlazor.Core.Model.PortalItemResource.Id.set -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.JsComponentReference.get -> Microsoft.JSInterop.IJSObjectReference?
dymaptic.GeoBlazor.Core.Model.PortalItemResource.JsComponentReference.set -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.Path.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalItemResource.Path.set -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.PortalItem.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Model.PortalItemResource.PortalItem.set -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.PortalItemResource(string? Path = null, dymaptic.GeoBlazor.Core.Components.PortalItem? PortalItem = null) -> void
dymaptic.GeoBlazor.Core.Model.PortalItemResource.Update(System.IO.Stream! content, dymaptic.GeoBlazor.Core.Options.PortalItemResourceUpdateOptions! options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
dymaptic.GeoBlazor.Core.Model.PortalLink
dymaptic.GeoBlazor.Core.Model.PortalLink.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalLink.Url.init -> void
dymaptic.GeoBlazor.Core.Model.PortalLink.Visible.get -> bool
dymaptic.GeoBlazor.Core.Model.PortalLink.Visible.init -> void
dymaptic.GeoBlazor.Core.Model.PortalLinks
dymaptic.GeoBlazor.Core.Model.PortalLinks.ContactUs.get -> dymaptic.GeoBlazor.Core.Model.PortalLink?
dymaptic.GeoBlazor.Core.Model.PortalLinks.ContactUs.init -> void
dymaptic.GeoBlazor.Core.Model.PortalOpenData
dymaptic.GeoBlazor.Core.Model.PortalOpenData.Enabled.get -> bool
dymaptic.GeoBlazor.Core.Model.PortalOpenData.Enabled.init -> void
dymaptic.GeoBlazor.Core.Model.PortalOpenData.Settings.get -> dymaptic.GeoBlazor.Core.Model.PortalOpenDataSettings?
dymaptic.GeoBlazor.Core.Model.PortalOpenData.Settings.init -> void
dymaptic.GeoBlazor.Core.Model.PortalOpenDataMigrations
dymaptic.GeoBlazor.Core.Model.PortalOpenDataMigrations.SiteToItems.get -> bool
dymaptic.GeoBlazor.Core.Model.PortalOpenDataMigrations.SiteToItems.init -> void
dymaptic.GeoBlazor.Core.Model.PortalOpenDataSettings
dymaptic.GeoBlazor.Core.Model.PortalOpenDataSettings.AppVersion.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalOpenDataSettings.AppVersion.init -> void
dymaptic.GeoBlazor.Core.Model.PortalOpenDataSettings.Migrations.get -> dymaptic.GeoBlazor.Core.Model.PortalOpenDataMigrations?
dymaptic.GeoBlazor.Core.Model.PortalOpenDataSettings.Migrations.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties
dymaptic.GeoBlazor.Core.Model.PortalProperties.HomePage.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalProperties.HomePage.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.Hub.get -> dymaptic.GeoBlazor.Core.Model.PortalHub?
dymaptic.GeoBlazor.Core.Model.PortalProperties.Hub.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.Links.get -> dymaptic.GeoBlazor.Core.Model.PortalLinks?
dymaptic.GeoBlazor.Core.Model.PortalProperties.Links.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.MapViewer.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalProperties.MapViewer.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.MapViewerSwitchDate.get -> long
dymaptic.GeoBlazor.Core.Model.PortalProperties.MapViewerSwitchDate.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.OpenData.get -> dymaptic.GeoBlazor.Core.Model.PortalOpenData?
dymaptic.GeoBlazor.Core.Model.PortalProperties.OpenData.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.SharedTheme.get -> dymaptic.GeoBlazor.Core.Model.PortalSharedTheme?
dymaptic.GeoBlazor.Core.Model.PortalProperties.SharedTheme.init -> void
dymaptic.GeoBlazor.Core.Model.PortalProperties.ShowSocialMediaLinks.get -> bool
dymaptic.GeoBlazor.Core.Model.PortalProperties.ShowSocialMediaLinks.init -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Categories.get -> System.Collections.Generic.IReadOnlyCollection<string![]!>?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Categories.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Extent.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Filter.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Filter.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Num.get -> double?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Num.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.PortalQueryParams(System.Collections.Generic.IReadOnlyCollection<string![]!>? Categories = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, string? Filter = null, double? Num = null, string? Query = null, dymaptic.GeoBlazor.Core.Enums.SortField? SortField = null, dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder? SortOrder = null, double? Start = null) -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Query.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Query.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.SortField.get -> dymaptic.GeoBlazor.Core.Enums.SortField?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.SortField.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.SortOrder.get -> dymaptic.GeoBlazor.Core.Enums.PortalQuerySortOrder?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.SortOrder.set -> void
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Start.get -> double?
dymaptic.GeoBlazor.Core.Model.PortalQueryParams.Start.set -> void
dymaptic.GeoBlazor.Core.Model.PortalRating
dymaptic.GeoBlazor.Core.Model.PortalRating.Created.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.PortalRating.Created.init -> void
dymaptic.GeoBlazor.Core.Model.PortalRating.PortalRating(System.DateTime? Created = null, double? Rating = null) -> void
dymaptic.GeoBlazor.Core.Model.PortalRating.Rating.get -> double?
dymaptic.GeoBlazor.Core.Model.PortalRating.Rating.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Body.get -> dymaptic.GeoBlazor.Core.Model.PortalSharedThemeBody?
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Body.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Button.get -> dymaptic.GeoBlazor.Core.Model.PortalSharedThemeButton?
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Button.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Header.get -> dymaptic.GeoBlazor.Core.Model.PortalSharedThemeHeader?
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Header.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Logo.get -> dymaptic.GeoBlazor.Core.Model.PortalSharedThemeLogo?
dymaptic.GeoBlazor.Core.Model.PortalSharedTheme.Logo.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeBody
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeButton
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeHeader
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeHeader.Text.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeHeader.Text.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeLogo
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeLogo.Link.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeLogo.Link.init -> void
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeLogo.Small.get -> string?
dymaptic.GeoBlazor.Core.Model.PortalSharedThemeLogo.Small.init -> void
dymaptic.GeoBlazor.Core.Model.Presentation
dymaptic.GeoBlazor.Core.Model.Presentation.Presentation(System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Slide!>? Slides = null) -> void
dymaptic.GeoBlazor.Core.Model.Presentation.Slides.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Components.Slide!>?
dymaptic.GeoBlazor.Core.Model.Presentation.Slides.init -> void
dymaptic.GeoBlazor.Core.Model.PrintLayoutOptions
dymaptic.GeoBlazor.Core.Model.PrintLayoutOptions.Legend.get -> bool
dymaptic.GeoBlazor.Core.Model.PrintLayoutOptions.Legend.init -> void
dymaptic.GeoBlazor.Core.Model.PrintTaskService
dymaptic.GeoBlazor.Core.Model.PrintTaskService.Templates.get -> System.Collections.Generic.List<dymaptic.GeoBlazor.Core.Model.PrintTemplateService!>?
dymaptic.GeoBlazor.Core.Model.PrintTaskService.Templates.init -> void
dymaptic.GeoBlazor.Core.Model.PrintTaskService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.PrintTaskService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.PrintTemplateService
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.Format.get -> string?
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.Format.init -> void
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.Label.get -> string?
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.Label.init -> void
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.Layout.get -> string?
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.Layout.init -> void
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.LayoutOptions.get -> dymaptic.GeoBlazor.Core.Model.PrintLayoutOptions?
dymaptic.GeoBlazor.Core.Model.PrintTemplateService.LayoutOptions.init -> void
dymaptic.GeoBlazor.Core.Model.ProjectionEngine
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.GetTransformation(dymaptic.GeoBlazor.Core.Components.SpatialReference! inSpatialReference, dymaptic.GeoBlazor.Core.Components.SpatialReference! outSpatialReference, dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GeographicTransformation?>!
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.GetTransformations(dymaptic.GeoBlazor.Core.Components.SpatialReference! inSpatialReference, dymaptic.GeoBlazor.Core.Components.SpatialReference! outSpatialReference, dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Model.GeographicTransformation![]?>!
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.Project(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.Project(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry! geometry, dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference, dymaptic.GeoBlazor.Core.Model.GeographicTransformation? geographicTransformation) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?>!
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.Project(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]! geometries, dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]?>!
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.Project(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]! geometries, dymaptic.GeoBlazor.Core.Components.SpatialReference! spatialReference, dymaptic.GeoBlazor.Core.Model.GeographicTransformation? geographicTransformation) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Geometries.Geometry![]?>!
dymaptic.GeoBlazor.Core.Model.ProjectionEngine.ProjectionEngine(dymaptic.GeoBlazor.Core.Model.AuthenticationManager! authenticationManager) -> void
dymaptic.GeoBlazor.Core.Model.PublishingInfo
dymaptic.GeoBlazor.Core.Model.PublishingInfo.PublishingInfo() -> void
dymaptic.GeoBlazor.Core.Model.QuantizationParameters
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.Extent.init -> void
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.Mode.get -> dymaptic.GeoBlazor.Core.Enums.QuantizationMode?
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.Mode.init -> void
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.OriginPosition.get -> dymaptic.GeoBlazor.Core.Enums.OriginPosition?
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.OriginPosition.init -> void
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.Tolerance.get -> double?
dymaptic.GeoBlazor.Core.Model.QuantizationParameters.Tolerance.init -> void
dymaptic.GeoBlazor.Core.Model.Query
dymaptic.GeoBlazor.Core.Model.Query.AggregateIds.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.Query.AggregateIds.set -> void
dymaptic.GeoBlazor.Core.Model.Query.CacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.CacheHint.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Distance.get -> double?
dymaptic.GeoBlazor.Core.Model.Query.Distance.set -> void
dymaptic.GeoBlazor.Core.Model.Query.DoubleDatumTransformation.get -> double?
dymaptic.GeoBlazor.Core.Model.Query.DoubleDatumTransformation.set -> void
dymaptic.GeoBlazor.Core.Model.Query.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Model.Query.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.Query.Geometry.set -> void
dymaptic.GeoBlazor.Core.Model.Query.GeometryPrecision.get -> int?
dymaptic.GeoBlazor.Core.Model.Query.GeometryPrecision.set -> void
dymaptic.GeoBlazor.Core.Model.Query.GroupByFieldsForStatistics.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.Query.GroupByFieldsForStatistics.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Having.get -> string?
dymaptic.GeoBlazor.Core.Model.Query.Having.set -> void
dymaptic.GeoBlazor.Core.Model.Query.HistoricMoment.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.Query.HistoricMoment.set -> void
dymaptic.GeoBlazor.Core.Model.Query.MaxAllowableOffset.get -> double?
dymaptic.GeoBlazor.Core.Model.Query.MaxAllowableOffset.set -> void
dymaptic.GeoBlazor.Core.Model.Query.MaxRecordCountFactor.get -> int?
dymaptic.GeoBlazor.Core.Model.Query.MaxRecordCountFactor.set -> void
dymaptic.GeoBlazor.Core.Model.Query.MultipatchOption.get -> string?
dymaptic.GeoBlazor.Core.Model.Query.MultipatchOption.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Num.get -> int?
dymaptic.GeoBlazor.Core.Model.Query.Num.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.Query.ObjectIds.set -> void
dymaptic.GeoBlazor.Core.Model.Query.OrderByFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.Query.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Model.Query.OutFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.Query.OutFields.set -> void
dymaptic.GeoBlazor.Core.Model.Query.OutSpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.Query.OutSpatialReference.set -> void
dymaptic.GeoBlazor.Core.Model.Query.OutStatistics.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.StatisticDefinition!>?
dymaptic.GeoBlazor.Core.Model.Query.OutStatistics.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ParameterValues.get -> System.Collections.Generic.Dictionary<string!, object?>?
dymaptic.GeoBlazor.Core.Model.Query.ParameterValues.set -> void
dymaptic.GeoBlazor.Core.Model.Query.PixelSize.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.Query.PixelSize.set -> void
dymaptic.GeoBlazor.Core.Model.Query.QuantizationParameters.get -> dymaptic.GeoBlazor.Core.Model.QuantizationParameters?
dymaptic.GeoBlazor.Core.Model.Query.QuantizationParameters.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Query(System.Collections.Generic.IReadOnlyCollection<string!>? AggregateIds = null, bool? CacheHint = null, double? Distance = null, double? DoubleDatumTransformation = null, string? GdbVersion = null, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? Geometry = null, int? GeometryPrecision = null, System.Collections.Generic.IReadOnlyCollection<string!>? GroupByFieldsForStatistics = null, string? Having = null, System.DateTime? HistoricMoment = null, double? MaxAllowableOffset = null, int? MaxRecordCountFactor = null, string? MultipatchOption = null, int? Num = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null, System.Collections.Generic.IReadOnlyCollection<string!>? OrderByFields = null, System.Collections.Generic.IReadOnlyCollection<string!>? OutFields = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? OutSpatialReference = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.StatisticDefinition!>? OutStatistics = null, System.Collections.Generic.Dictionary<string!, object?>? ParameterValues = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? PixelSize = null, dymaptic.GeoBlazor.Core.Model.QuantizationParameters? QuantizationParameters = null, dymaptic.GeoBlazor.Core.Model.QueryCompositeTransformation? QueryCompositeTransformationDatumTransformation = null, dymaptic.GeoBlazor.Core.Model.QuerySimpleTransformation? QuerySimpleTransformationDatumTransformation = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.QueryRangeValues!>? RangeValues = null, string? RelationParameter = null, bool? ReturnCentroid = null, bool? ReturnDistinctValues = null, bool? ReturnExceededLimitFeatures = null, bool? ReturnGeometry = null, bool? ReturnM = null, bool? ReturnQueryGeometry = null, bool? ReturnZ = null, dymaptic.GeoBlazor.Core.Enums.SpatialRelationship? SpatialRelationship = null, dymaptic.GeoBlazor.Core.Enums.SqlFormat? SqlFormat = null, int? Start = null, string? Text = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? TimeExtent = null, dymaptic.GeoBlazor.Core.Enums.QueryUnits? Units = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.Query.QueryCompositeTransformationDatumTransformation.get -> dymaptic.GeoBlazor.Core.Model.QueryCompositeTransformation?
dymaptic.GeoBlazor.Core.Model.Query.QueryCompositeTransformationDatumTransformation.set -> void
dymaptic.GeoBlazor.Core.Model.Query.QuerySimpleTransformationDatumTransformation.get -> dymaptic.GeoBlazor.Core.Model.QuerySimpleTransformation?
dymaptic.GeoBlazor.Core.Model.Query.QuerySimpleTransformationDatumTransformation.set -> void
dymaptic.GeoBlazor.Core.Model.Query.RangeValues.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.QueryRangeValues!>?
dymaptic.GeoBlazor.Core.Model.Query.RangeValues.set -> void
dymaptic.GeoBlazor.Core.Model.Query.RelationParameter.get -> string?
dymaptic.GeoBlazor.Core.Model.Query.RelationParameter.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnCentroid.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnDistinctValues.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnDistinctValues.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnExceededLimitFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnExceededLimitFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnGeometry.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnM.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnM.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnQueryGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnQueryGeometry.set -> void
dymaptic.GeoBlazor.Core.Model.Query.ReturnZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.ReturnZ.set -> void
dymaptic.GeoBlazor.Core.Model.Query.SpatialRelationship.get -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship?
dymaptic.GeoBlazor.Core.Model.Query.SpatialRelationship.set -> void
dymaptic.GeoBlazor.Core.Model.Query.SqlFormat.get -> dymaptic.GeoBlazor.Core.Enums.SqlFormat?
dymaptic.GeoBlazor.Core.Model.Query.SqlFormat.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Start.get -> int?
dymaptic.GeoBlazor.Core.Model.Query.Start.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Text.get -> string?
dymaptic.GeoBlazor.Core.Model.Query.Text.set -> void
dymaptic.GeoBlazor.Core.Model.Query.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Model.Query.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Units.get -> dymaptic.GeoBlazor.Core.Enums.QueryUnits?
dymaptic.GeoBlazor.Core.Model.Query.Units.set -> void
dymaptic.GeoBlazor.Core.Model.Query.UseViewExtent.get -> bool?
dymaptic.GeoBlazor.Core.Model.Query.UseViewExtent.set -> void
dymaptic.GeoBlazor.Core.Model.Query.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.Query.Where.set -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability
dymaptic.GeoBlazor.Core.Model.QueryCapability.MaxRecordCount.get -> int
dymaptic.GeoBlazor.Core.Model.QueryCapability.MaxRecordCount.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.QueryCapability(int MaxRecordCount, bool SupportsCacheHint, bool SupportsCentroid, bool SupportsDisjointSpatialRelationship, bool SupportsDistance, bool SupportsDistinct, bool SupportsExtent, bool SupportsGeometryProperties, bool SupportsHavingClause, bool SupportsHistoricMoment, bool SupportsOrderBy, bool SupportsPagination, bool SupportsPercentileStatistics, bool SupportsQuantization, bool SupportsQuantizationEditMode, bool SupportsQueryGeometry, bool SupportsResultType, bool SupportsStandardizedQueriesOnly, bool SupportsStatistics, bool SupportsSqlExpression, bool SupportsSpatialAggregationStatistics, dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations! SupportedSpatialStatisticAggregations) -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportedSpatialStatisticAggregations.get -> dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations!
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportedSpatialStatisticAggregations.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsCacheHint.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsCentroid.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsCentroid.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsDisjointSpatialRelationship.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsDisjointSpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsDistance.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsDistance.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsDistinct.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsExtent.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsExtent.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsGeometryProperties.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsGeometryProperties.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsHavingClause.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsHavingClause.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsHistoricMoment.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsHistoricMoment.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsOrderBy.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsPagination.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsPercentileStatistics.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsPercentileStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsQuantization.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsQuantization.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsQuantizationEditMode.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsQuantizationEditMode.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsQueryGeometry.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsQueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsResultType.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsResultType.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsSpatialAggregationStatistics.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsSpatialAggregationStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsSqlExpression.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsSqlExpression.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsStandardizedQueriesOnly.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsStatistics.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryCapability.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCompositeTransformation
dymaptic.GeoBlazor.Core.Model.QueryCompositeTransformation.GeoTransforms.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1!>?
dymaptic.GeoBlazor.Core.Model.QueryCompositeTransformation.GeoTransforms.init -> void
dymaptic.GeoBlazor.Core.Model.QueryCompositeTransformation.QueryCompositeTransformation(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.CompositeTransformationGeoTransforms1!>? GeoTransforms = null) -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DateTimeCollectionValue.get -> System.Collections.Generic.IReadOnlyCollection<System.DateTime>?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DateTimeCollectionValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DateTimeValue.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DateTimeValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DoubleCollectionValue.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DoubleCollectionValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DoubleValue.get -> double?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.DoubleValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.Name.init -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.QueryParameterValues(System.Collections.Generic.IReadOnlyCollection<System.DateTime>? DateTimeCollectionValue = null, System.DateTime? DateTimeValue = null, System.Collections.Generic.IReadOnlyCollection<double>? DoubleCollectionValue = null, double? DoubleValue = null, string? Name = null, System.Collections.Generic.IReadOnlyCollection<string!>? StringCollectionValue = null, string? StringValue = null) -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.StringCollectionValue.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.StringCollectionValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.StringValue.get -> string?
dymaptic.GeoBlazor.Core.Model.QueryParameterValues.StringValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRangeValues
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.DoubleCollectionValue.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.DoubleCollectionValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.DoubleValue.get -> double?
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.DoubleValue.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.Name.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRangeValues.QueryRangeValues(System.Collections.Generic.IReadOnlyCollection<double>? DoubleCollectionValue = null, double? DoubleValue = null, string? Name = null) -> void
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.QueryRelatedCapability(bool SupportsCacheHint, bool SupportsCount, bool SupportsOrderBy, bool SupportsPagination) -> void
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsCacheHint.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsCount.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsCount.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsOrderBy.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsPagination.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryRelatedCapability.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.QuerySimpleTransformation
dymaptic.GeoBlazor.Core.Model.QuerySimpleTransformation.QuerySimpleTransformation(long? Wkid = null) -> void
dymaptic.GeoBlazor.Core.Model.QuerySimpleTransformation.Wkid.get -> long?
dymaptic.GeoBlazor.Core.Model.QuerySimpleTransformation.Wkid.init -> void
dymaptic.GeoBlazor.Core.Model.QueryTopFeaturesCapability
dymaptic.GeoBlazor.Core.Model.QueryTopFeaturesCapability.QueryTopFeaturesCapability(bool SupportsCacheHint) -> void
dymaptic.GeoBlazor.Core.Model.QueryTopFeaturesCapability.SupportsCacheHint.get -> bool
dymaptic.GeoBlazor.Core.Model.QueryTopFeaturesCapability.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.RampTitle
dymaptic.GeoBlazor.Core.Model.RampTitle.Field.get -> string?
dymaptic.GeoBlazor.Core.Model.RampTitle.Field.init -> void
dymaptic.GeoBlazor.Core.Model.RampTitle.NormField.get -> string?
dymaptic.GeoBlazor.Core.Model.RampTitle.NormField.init -> void
dymaptic.GeoBlazor.Core.Model.RampTitle.RampTitle(string? Field = null, string? NormField = null, bool? Ratio = null, bool? RatioPercent = null, bool? RatioPercentTotal = null) -> void
dymaptic.GeoBlazor.Core.Model.RampTitle.Ratio.get -> bool?
dymaptic.GeoBlazor.Core.Model.RampTitle.Ratio.init -> void
dymaptic.GeoBlazor.Core.Model.RampTitle.RatioPercent.get -> bool?
dymaptic.GeoBlazor.Core.Model.RampTitle.RatioPercent.init -> void
dymaptic.GeoBlazor.Core.Model.RampTitle.RatioPercentTotal.get -> bool?
dymaptic.GeoBlazor.Core.Model.RampTitle.RatioPercentTotal.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.MaxWavelength.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.MaxWavelength.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.MinWavelength.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.MinWavelength.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.Name.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.RadianceBias.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.RadianceBias.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.RadianceGain.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.RadianceGain.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.RasterBandInfo(double? MaxWavelength = null, double? MinWavelength = null, string? Name = null, double? RadianceBias = null, double? RadianceGain = null, double? ReflectanceBias = null, double? ReflectanceGain = null, double? SolarIrradiance = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.ReflectanceBias.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.ReflectanceBias.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.ReflectanceGain.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.ReflectanceGain.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.SolarIrradiance.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandInfo.SolarIrradiance.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Avg.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Avg.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Count.get -> int?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Count.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Max.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Max.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Median.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Median.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Min.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Min.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Mode.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Mode.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.RasterBandStatistics(double? Avg = null, int? Count = null, double? Max = null, double? Median = null, double? Min = null, double? Mode = null, double? Stddev = null, double? Sum = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Stddev.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Stddev.init -> void
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Sum.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterBandStatistics.Sum.init -> void
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Description.init -> void
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.FunctionType.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.FunctionType.init -> void
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Help.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Help.init -> void
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Name.init -> void
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.RasterFunctionInfo(string? Description = null, double? FunctionType = null, string? Help = null, string? Name = null, string? Thumbnail = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Thumbnail.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterFunctionInfo.Thumbnail.init -> void
dymaptic.GeoBlazor.Core.Model.RasterHistogram
dymaptic.GeoBlazor.Core.Model.RasterHistogram.ByteCounts.get -> byte[]?
dymaptic.GeoBlazor.Core.Model.RasterHistogram.ByteCounts.init -> void
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Counts.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Counts.init -> void
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Max.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Max.init -> void
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Min.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Min.init -> void
dymaptic.GeoBlazor.Core.Model.RasterHistogram.RasterHistogram(System.Collections.Generic.IReadOnlyCollection<double>? Counts = null, byte[]? ByteCounts = null, double? Max = null, double? Min = null, int? Size = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Size.get -> int?
dymaptic.GeoBlazor.Core.Model.RasterHistogram.Size.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo
dymaptic.GeoBlazor.Core.Model.RasterInfo.AttributeTable.get -> dymaptic.GeoBlazor.Core.Model.FeatureSet?
dymaptic.GeoBlazor.Core.Model.RasterInfo.AttributeTable.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.BandCount.get -> int?
dymaptic.GeoBlazor.Core.Model.RasterInfo.BandCount.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.Colormap.get -> System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ColormapPixel!>?
dymaptic.GeoBlazor.Core.Model.RasterInfo.Colormap.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.RasterInfo.Extent.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.HasMultidimensionalTranspose.get -> bool?
dymaptic.GeoBlazor.Core.Model.RasterInfo.HasMultidimensionalTranspose.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.RasterInfo.Height.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.Histograms.get -> System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.Dictionary<string!, object?>!>?
dymaptic.GeoBlazor.Core.Model.RasterInfo.Histograms.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.KeyProperties.get -> System.Collections.Generic.Dictionary<string!, object?>?
dymaptic.GeoBlazor.Core.Model.RasterInfo.KeyProperties.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.MultidimensionalInfo.get -> dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo?
dymaptic.GeoBlazor.Core.Model.RasterInfo.MultidimensionalInfo.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.NoDataValue.get -> dymaptic.GeoBlazor.Core.Components.NoData?
dymaptic.GeoBlazor.Core.Model.RasterInfo.NoDataValue.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.PixelSize.get -> dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize?
dymaptic.GeoBlazor.Core.Model.RasterInfo.PixelSize.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.PixelType.get -> dymaptic.GeoBlazor.Core.Enums.PixelType?
dymaptic.GeoBlazor.Core.Model.RasterInfo.PixelType.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.RasterInfo(dymaptic.GeoBlazor.Core.Model.FeatureSet? AttributeTable = null, int? BandCount = null, System.Collections.Generic.IReadOnlyList<dymaptic.GeoBlazor.Core.Model.ColormapPixel!>? Colormap = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, bool? HasMultidimensionalTranspose = null, int? Height = null, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.Dictionary<string!, object?>!>? Histograms = null, System.Collections.Generic.Dictionary<string!, object?>? KeyProperties = null, dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo? MultidimensionalInfo = null, dymaptic.GeoBlazor.Core.Components.NoData? NoDataValue = null, dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize? PixelSize = null, dymaptic.GeoBlazor.Core.Enums.PixelType? PixelType = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? SpatialReference = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics!>? Statistics = null, int? Width = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.RasterInfo.SpatialReference.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.Statistics.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics!>?
dymaptic.GeoBlazor.Core.Model.RasterInfo.Statistics.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfo.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.RasterInfo.Width.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize
dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize.RasterInfoPixelSize(double? X = null, double? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize.X.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize.X.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize.Y.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterInfoPixelSize.Y.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Avg.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Avg.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Max.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Max.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Min.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Min.init -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.RasterInfoStatistics(double? Avg = null, double? Max = null, double? Min = null, double? Stddev = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Stddev.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterInfoStatistics.Stddev.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo.RasterMultidimensionalInfo(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables!>? Variables = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo.Variables.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables!>?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfo.Variables.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Description.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Dimensions.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions!>?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Dimensions.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Histograms.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterHistogram!>?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Histograms.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Name.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.RasterMultidimensionalInfoVariables(string? Description = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions!>? Dimensions = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterHistogram!>? Histograms = null, string? Name = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterBandStatistics!>? Statistics = null, string? Unit = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Statistics.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterBandStatistics!>?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Statistics.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Unit.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariables.Unit.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Description.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Extent.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Extent.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.HasRanges.get -> bool?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.HasRanges.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.HasRegularIntervals.get -> bool?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.HasRegularIntervals.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Interval.get -> double?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Interval.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.IntervalUnit.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.IntervalUnit.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Name.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.RasterMultidimensionalInfoVariablesDimensions(string? Description = null, System.Collections.Generic.IReadOnlyCollection<double>? Extent = null, bool? HasRanges = null, bool? HasRegularIntervals = null, double? Interval = null, string? IntervalUnit = null, string? Name = null, bool? Recurring = null, string? Unit = null, System.Collections.Generic.IReadOnlyCollection<double>? Values = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Recurring.get -> bool?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Recurring.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Unit.get -> string?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Unit.init -> void
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Values.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.RasterMultidimensionalInfoVariablesDimensions.Values.init -> void
dymaptic.GeoBlazor.Core.Model.RasterSliceValue
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.MagdirValue.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.MagdirValue.init -> void
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.MultidimensionalDefinition.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.MultidimensionalDefinition.init -> void
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.RasterSliceValue(System.Collections.Generic.IReadOnlyCollection<double>? MagdirValue = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? MultidimensionalDefinition = null, System.Collections.Generic.IReadOnlyCollection<double>? Value = null) -> void
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.Value.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.RasterSliceValue.Value.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship
dymaptic.GeoBlazor.Core.Model.Relationship.Cardinality.get -> dymaptic.GeoBlazor.Core.Enums.Cardinality?
dymaptic.GeoBlazor.Core.Model.Relationship.Cardinality.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.CatalogId.get -> string?
dymaptic.GeoBlazor.Core.Model.Relationship.CatalogId.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.Composite.get -> bool?
dymaptic.GeoBlazor.Core.Model.Relationship.Composite.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.KeyField.get -> string?
dymaptic.GeoBlazor.Core.Model.Relationship.KeyField.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.KeyFieldInRelationshipTable.get -> string?
dymaptic.GeoBlazor.Core.Model.Relationship.KeyFieldInRelationshipTable.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.Relationship.Name.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.RelatedTableId.get -> long?
dymaptic.GeoBlazor.Core.Model.Relationship.RelatedTableId.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.Relationship(dymaptic.GeoBlazor.Core.Enums.Cardinality? Cardinality = null, string? CatalogId = null, bool? Composite = null, string? KeyField = null, string? KeyFieldInRelationshipTable = null, string? Name = null, long? RelatedTableId = null, long? RelationshipId = null, long? RelationshipTableId = null, dymaptic.GeoBlazor.Core.Enums.Role? Role = null) -> void
dymaptic.GeoBlazor.Core.Model.Relationship.RelationshipId.get -> long?
dymaptic.GeoBlazor.Core.Model.Relationship.RelationshipId.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.RelationshipTableId.get -> long?
dymaptic.GeoBlazor.Core.Model.Relationship.RelationshipTableId.init -> void
dymaptic.GeoBlazor.Core.Model.Relationship.Role.get -> dymaptic.GeoBlazor.Core.Enums.Role?
dymaptic.GeoBlazor.Core.Model.Relationship.Role.init -> void
dymaptic.GeoBlazor.Core.Model.RelationshipCapabilities
dymaptic.GeoBlazor.Core.Model.RelationshipCapabilities.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Model.RelationshipCapabilities.Enabled.init -> void
dymaptic.GeoBlazor.Core.Model.RelationshipCapabilities.RelationshipCapabilities(bool? Enabled = null) -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.CacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.CacheHint.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.GeometryPrecision.get -> double?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.GeometryPrecision.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.HistoricMoment.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.HistoricMoment.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.MaxAllowableOffset.get -> double?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.MaxAllowableOffset.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.Num.get -> int?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.Num.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ObjectIds.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.OrderByFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.OutFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.OutFields.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.OutSpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.OutSpatialReference.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.RelationshipId.get -> long?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.RelationshipId.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.RelationshipQuery(bool? CacheHint = null, string? GdbVersion = null, double? GeometryPrecision = null, System.DateTime? HistoricMoment = null, double? MaxAllowableOffset = null, int? Num = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null, System.Collections.Generic.IReadOnlyCollection<string!>? OrderByFields = null, System.Collections.Generic.IReadOnlyCollection<string!>? OutFields = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? OutSpatialReference = null, long? RelationshipId = null, bool? ReturnGeometry = null, bool? ReturnM = null, bool? ReturnZ = null, int? Start = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ReturnGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ReturnGeometry.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ReturnM.get -> bool?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ReturnM.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ReturnZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.ReturnZ.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.Start.get -> int?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.Start.set -> void
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.RelationshipQuery.Where.set -> void
dymaptic.GeoBlazor.Core.Model.RendererTitle
dymaptic.GeoBlazor.Core.Model.RendererTitle.Field.get -> string?
dymaptic.GeoBlazor.Core.Model.RendererTitle.Field.init -> void
dymaptic.GeoBlazor.Core.Model.RendererTitle.NormByPct.get -> bool?
dymaptic.GeoBlazor.Core.Model.RendererTitle.NormByPct.init -> void
dymaptic.GeoBlazor.Core.Model.RendererTitle.NormField.get -> string?
dymaptic.GeoBlazor.Core.Model.RendererTitle.NormField.init -> void
dymaptic.GeoBlazor.Core.Model.RendererTitle.RendererTitle(string? Field = null, bool? NormByPct = null, string? NormField = null, string? Title = null) -> void
dymaptic.GeoBlazor.Core.Model.RendererTitle.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.RendererTitle.Title.init -> void
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.DiagramTemplateName.get -> string?
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.DiagramTemplateName.init -> void
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.IncludeGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.IncludeGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.IncludePropagatedValues.get -> bool?
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.IncludePropagatedValues.init -> void
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.NetworkAttributeNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.NetworkAttributeNames.init -> void
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.ResultTypeFields.get -> System.Collections.Generic.IReadOnlyCollection<object!>?
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.ResultTypeFields.init -> void
dymaptic.GeoBlazor.Core.Model.ResultTypeJSON.ResultTypeJSON(string? DiagramTemplateName = null, bool? IncludeGeometry = null, bool? IncludePropagatedValues = null, System.Collections.Generic.IReadOnlyCollection<string!>? NetworkAttributeNames = null, System.Collections.Generic.IReadOnlyCollection<object!>? ResultTypeFields = null) -> void
dymaptic.GeoBlazor.Core.Model.RotatorPanel
dymaptic.GeoBlazor.Core.Model.RotatorPanel.Id.get -> string?
dymaptic.GeoBlazor.Core.Model.RotatorPanel.Id.init -> void
dymaptic.GeoBlazor.Core.Model.RotatorPanel.InnerHTML.get -> string?
dymaptic.GeoBlazor.Core.Model.RotatorPanel.InnerHTML.init -> void
dymaptic.GeoBlazor.Core.Model.RoutingService
dymaptic.GeoBlazor.Core.Model.RoutingService.DefaultTravelMode.get -> string?
dymaptic.GeoBlazor.Core.Model.RoutingService.DefaultTravelMode.init -> void
dymaptic.GeoBlazor.Core.Model.RoutingService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.RoutingService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.SceneFilter
dymaptic.GeoBlazor.Core.Model.SceneFilter.Geometries.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.SceneFilter.Geometries.init -> void
dymaptic.GeoBlazor.Core.Model.SceneFilter.SceneFilter(System.Collections.Generic.IReadOnlyCollection<string!>? Geometries = null, dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship? SpatialRelationship = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneFilter.SpatialRelationship.get -> dymaptic.GeoBlazor.Core.Enums.SceneFilterSpatialRelationship?
dymaptic.GeoBlazor.Core.Model.SceneFilter.SpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Data.get -> dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Data.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Editing.get -> dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Editing.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.Query.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.QueryRelated.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilities.SceneLayerCapabilities(dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData? Data = null, dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing? Editing = null, dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations? Operations = null, dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery? Query = null, dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated? QueryRelated = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData.SceneLayerCapabilitiesData(bool? SupportsAttachment = null, bool? SupportsZ = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData.SupportsAttachment.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData.SupportsAttachment.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData.SupportsZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesData.SupportsZ.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SceneLayerCapabilitiesEditing(bool? SupportsGeometryUpdate = null, bool? SupportsGlobalId = null, bool? SupportsRollbackOnFailure = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SupportsGeometryUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SupportsGeometryUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SupportsGlobalId.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SupportsGlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SupportsRollbackOnFailure.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesEditing.SupportsRollbackOnFailure.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SceneLayerCapabilitiesOperations(bool? SupportsAdd = null, bool? SupportsDelete = null, bool? SupportsEditing = null, bool? SupportsQuery = null, bool? SupportsQueryAttachments = null, bool? SupportsUpdate = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsAdd.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsAdd.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsDelete.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsDelete.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsEditing.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsEditing.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsQueryAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsQueryAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesOperations.SupportsUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.MaxRecordCount.get -> int?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.MaxRecordCount.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SceneLayerCapabilitiesQuery(int? MaxRecordCount = null, bool? SupportsCacheHint = null, bool? SupportsCentroid = null, bool? SupportsDisjointSpatialRelationship = null, bool? SupportsDistance = null, bool? SupportsDistinct = null, bool? SupportsExtent = null, bool? SupportsGeometryProperties = null, bool? SupportsHavingClause = null, bool? SupportsHistoricMoment = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null, bool? SupportsPercentileStatistics = null, bool? SupportsQuantization = null, bool? SupportsQuantizationEditMode = null, bool? SupportsQueryGeometry = null, bool? SupportsResultType = null, bool? SupportsReturnMesh = null, bool? SupportsSqlExpression = null, bool? SupportsStandardizedQueriesOnly = null, bool? SupportsStatistics = null, bool? SupportsTrueCurve = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsCentroid.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsDistance.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsDistance.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsDistinct.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsExtent.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsExtent.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsGeometryProperties.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsGeometryProperties.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsHavingClause.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsHavingClause.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsHistoricMoment.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsHistoricMoment.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsPercentileStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsPercentileStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsQuantization.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsQuantization.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsQuantizationEditMode.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsQuantizationEditMode.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsQueryGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsQueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsResultType.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsResultType.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsReturnMesh.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsReturnMesh.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsSqlExpression.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsSqlExpression.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsTrueCurve.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQuery.SupportsTrueCurve.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SceneLayerCapabilitiesQueryRelated(bool? SupportsCacheHint = null, bool? SupportsCount = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsCacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsCacheHint.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsCount.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsCount.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.SceneLayerCapabilitiesQueryRelated.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.Major.get -> double?
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.Major.init -> void
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.Minor.get -> double?
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.Minor.init -> void
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.SceneServiceVersion(double? Major = null, double? Minor = null, string? VersionString = null) -> void
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.VersionString.get -> string?
dymaptic.GeoBlazor.Core.Model.SceneServiceVersion.VersionString.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenPoint
dymaptic.GeoBlazor.Core.Model.ScreenPoint.ScreenPoint(double? X, double? Y) -> void
dymaptic.GeoBlazor.Core.Model.ScreenPoint.X.get -> double?
dymaptic.GeoBlazor.Core.Model.ScreenPoint.X.set -> void
dymaptic.GeoBlazor.Core.Model.ScreenPoint.Y.get -> double?
dymaptic.GeoBlazor.Core.Model.ScreenPoint.Y.set -> void
dymaptic.GeoBlazor.Core.Model.Screenshot
dymaptic.GeoBlazor.Core.Model.Screenshot.Data.get -> dymaptic.GeoBlazor.Core.Model.ImageData!
dymaptic.GeoBlazor.Core.Model.Screenshot.Data.init -> void
dymaptic.GeoBlazor.Core.Model.Screenshot.DataUrl.get -> string!
dymaptic.GeoBlazor.Core.Model.Screenshot.DataUrl.init -> void
dymaptic.GeoBlazor.Core.Model.Screenshot.Screenshot(string! DataUrl, dymaptic.GeoBlazor.Core.Model.ImageData! Data) -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotArea
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.Height.get -> double?
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.Height.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.Width.get -> double?
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.Width.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.X.get -> double?
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.X.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.Y.get -> double?
dymaptic.GeoBlazor.Core.Model.ScreenshotArea.Y.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotFormat
dymaptic.GeoBlazor.Core.Model.ScreenshotFormat.Jpg = 0 -> dymaptic.GeoBlazor.Core.Model.ScreenshotFormat
dymaptic.GeoBlazor.Core.Model.ScreenshotFormat.Png = 1 -> dymaptic.GeoBlazor.Core.Model.ScreenshotFormat
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Area.get -> dymaptic.GeoBlazor.Core.Model.ScreenshotArea?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Area.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Format.get -> dymaptic.GeoBlazor.Core.Model.ScreenshotFormat?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Format.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Height.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.IgnoreBackground.get -> bool?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.IgnoreBackground.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.IgnorePadding.get -> bool?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.IgnorePadding.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.LayerIds.get -> System.Collections.Generic.IReadOnlyCollection<System.Guid>?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.LayerIds.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Quality.get -> int?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Quality.init -> void
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.ScreenshotOptions.Width.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponse
dymaptic.GeoBlazor.Core.Model.SearchResponse.ActiveSourceIndex.get -> int
dymaptic.GeoBlazor.Core.Model.SearchResponse.ActiveSourceIndex.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponse.Errors.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.SearchResponseErrors!>!
dymaptic.GeoBlazor.Core.Model.SearchResponse.Errors.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponse.NumResults.get -> int
dymaptic.GeoBlazor.Core.Model.SearchResponse.NumResults.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponse.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResponseResults!>!
dymaptic.GeoBlazor.Core.Model.SearchResponse.Results.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponse.SearchResponse(int ActiveSourceIndex, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.SearchResponseErrors!>! Errors, int NumResults, string! SearchTerm, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResponseResults!>! Results) -> void
dymaptic.GeoBlazor.Core.Model.SearchResponse.SearchTerm.get -> string!
dymaptic.GeoBlazor.Core.Model.SearchResponse.SearchTerm.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.Error.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.SearchResponseErrors(dymaptic.GeoBlazor.Core.Model.Error? Error = null, string? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.Source.get -> string?
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.Source.init -> void
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Model.SearchResponseErrors.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Model.SearchSourceFilter
dymaptic.GeoBlazor.Core.Model.SearchSourceFilter.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.SearchSourceFilter.Geometry.init -> void
dymaptic.GeoBlazor.Core.Model.SearchSourceFilter.SearchSourceFilter(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? Geometry = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.SearchSourceFilter.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.SearchSourceFilter.Where.init -> void
dymaptic.GeoBlazor.Core.Model.SelectionFilter
dymaptic.GeoBlazor.Core.Model.SelectionFilter.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.SelectionFilter.ObjectIds.init -> void
dymaptic.GeoBlazor.Core.Model.SelectionFilter.SelectionFilter(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null) -> void
dymaptic.GeoBlazor.Core.Model.SeparableWrapModes
dymaptic.GeoBlazor.Core.Model.SeparableWrapModes.Horizontal.get -> dymaptic.GeoBlazor.Core.Enums.Horizontal?
dymaptic.GeoBlazor.Core.Model.SeparableWrapModes.Horizontal.init -> void
dymaptic.GeoBlazor.Core.Model.SeparableWrapModes.SeparableWrapModes(dymaptic.GeoBlazor.Core.Enums.Horizontal? Horizontal = null, dymaptic.GeoBlazor.Core.Enums.Vertical? Vertical = null) -> void
dymaptic.GeoBlazor.Core.Model.SeparableWrapModes.Vertical.get -> dymaptic.GeoBlazor.Core.Enums.Vertical?
dymaptic.GeoBlazor.Core.Model.SeparableWrapModes.Vertical.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEdits
dymaptic.GeoBlazor.Core.Model.ServiceEdits.AddFeatures.get -> System.Collections.Generic.IReadOnlyCollection<object!>?
dymaptic.GeoBlazor.Core.Model.ServiceEdits.AddFeatures.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEdits.DeleteFeatures.get -> System.Collections.Generic.IReadOnlyCollection<object!>?
dymaptic.GeoBlazor.Core.Model.ServiceEdits.DeleteFeatures.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEdits.IdentifierFields.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields!>?
dymaptic.GeoBlazor.Core.Model.ServiceEdits.IdentifierFields.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEdits.ServiceEdits(System.Collections.Generic.IReadOnlyCollection<object!>? AddFeatures = null, System.Collections.Generic.IReadOnlyCollection<object!>? DeleteFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields!>? IdentifierFields = null, long? ServiceEditsId = null) -> void
dymaptic.GeoBlazor.Core.Model.ServiceEdits.ServiceEditsId.get -> long?
dymaptic.GeoBlazor.Core.Model.ServiceEdits.ServiceEditsId.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields
dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields.GlobalIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields.GlobalIdField.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields.ObjectIdField.init -> void
dymaptic.GeoBlazor.Core.Model.ServiceEditsIdentifierFields.ServiceEditsIdentifierFields(string? GlobalIdField = null, string? ObjectIdField = null) -> void
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.LayerId.get -> string?
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.LayerId.init -> void
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.NameField.get -> string?
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.NameField.init -> void
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.SiteIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.SiteIdField.init -> void
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.SiteLayerInfo(string? LayerId = null, string? NameField = null, string? SiteIdField = null, long? SublayerId = null) -> void
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.SublayerId.get -> long?
dymaptic.GeoBlazor.Core.Model.SiteLayerInfo.SublayerId.init -> void
dymaptic.GeoBlazor.Core.Model.SlideDescription
dymaptic.GeoBlazor.Core.Model.SlideDescription.SlideDescription(string? Text = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideDescription.Text.get -> string?
dymaptic.GeoBlazor.Core.Model.SlideDescription.Text.init -> void
dymaptic.GeoBlazor.Core.Model.SlideEnvironment
dymaptic.GeoBlazor.Core.Model.SlideEnvironment.SlideEnvironment(dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting? WebsceneSunLighting = null, dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting? WebsceneVirtualLighting = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideEnvironment.WebsceneSunLighting.get -> dymaptic.GeoBlazor.Core.Components.WebsceneSunLighting?
dymaptic.GeoBlazor.Core.Model.SlideEnvironment.WebsceneSunLighting.init -> void
dymaptic.GeoBlazor.Core.Model.SlideEnvironment.WebsceneVirtualLighting.get -> dymaptic.GeoBlazor.Core.Components.WebsceneVirtualLighting?
dymaptic.GeoBlazor.Core.Model.SlideEnvironment.WebsceneVirtualLighting.init -> void
dymaptic.GeoBlazor.Core.Model.SlideGround
dymaptic.GeoBlazor.Core.Model.SlideGround.Opacity.get -> double?
dymaptic.GeoBlazor.Core.Model.SlideGround.Opacity.init -> void
dymaptic.GeoBlazor.Core.Model.SlideGround.SlideGround(double? Opacity = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideThumbnail
dymaptic.GeoBlazor.Core.Model.SlideThumbnail.SlideThumbnail(string? Url = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideThumbnail.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.SlideThumbnail.Url.init -> void
dymaptic.GeoBlazor.Core.Model.SlideTitle
dymaptic.GeoBlazor.Core.Model.SlideTitle.SlideTitle(string? Text = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideTitle.Text.get -> string?
dymaptic.GeoBlazor.Core.Model.SlideTitle.Text.init -> void
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Format.get -> string?
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Format.init -> void
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Height.init -> void
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Quality.get -> double?
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Quality.init -> void
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.SlideUpdateFromOptionsScreenshot(string? Format = null, int? Height = null, double? Quality = null, int? Width = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot.Width.init -> void
dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers
dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers.SlideVisibleLayers(string? SlideVisibleLayersId = null, System.Collections.Generic.IReadOnlyCollection<long>? SublayerIds = null) -> void
dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers.SlideVisibleLayersId.get -> string?
dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers.SlideVisibleLayersId.init -> void
dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers.SublayerIds.get -> System.Collections.Generic.IReadOnlyCollection<long>?
dymaptic.GeoBlazor.Core.Model.SlideVisibleLayers.SublayerIds.init -> void
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.Tolerance.get -> double
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.Tolerance.set -> void
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitBaseFactor.get -> double
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitBaseFactor.set -> void
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitID.get -> int
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitID.set -> void
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitSquareDerivative.get -> double
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitSquareDerivative.set -> void
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitType.get -> int
dymaptic.GeoBlazor.Core.Model.SpatialReferenceInfo.UnitType.set -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Height.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo.PixelRatio.get -> double?
dymaptic.GeoBlazor.Core.Model.SpriteInfo.PixelRatio.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Sdf.get -> bool?
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Sdf.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo.SpriteInfo(int? Height = null, double? PixelRatio = null, bool? Sdf = null, int? Width = null, double? X = null, double? Y = null) -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Width.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo.X.get -> double?
dymaptic.GeoBlazor.Core.Model.SpriteInfo.X.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Y.get -> double?
dymaptic.GeoBlazor.Core.Model.SpriteInfo.Y.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource
dymaptic.GeoBlazor.Core.Model.SpriteSource.BaseURL.get -> string?
dymaptic.GeoBlazor.Core.Model.SpriteSource.BaseURL.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.DevicePixelRatio.get -> double?
dymaptic.GeoBlazor.Core.Model.SpriteSource.DevicePixelRatio.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.GetSpriteInfo.get -> dymaptic.GeoBlazor.Core.Functions.GetSpriteInfo?
dymaptic.GeoBlazor.Core.Model.SpriteSource.GetSpriteInfo.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.SpriteSource.Height.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.Image.get -> System.IO.Stream?
dymaptic.GeoBlazor.Core.Model.SpriteSource.Image.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.LoadStatus.get -> dymaptic.GeoBlazor.Core.Enums.LoadStatus?
dymaptic.GeoBlazor.Core.Model.SpriteSource.LoadStatus.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.SpriteSource(string? BaseURL = null, double? DevicePixelRatio = null, dymaptic.GeoBlazor.Core.Functions.GetSpriteInfo? GetSpriteInfo = null, int? Height = null, System.IO.Stream? Image = null, dymaptic.GeoBlazor.Core.Enums.LoadStatus? LoadStatus = null, int? Width = null) -> void
dymaptic.GeoBlazor.Core.Model.SpriteSource.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.SpriteSource.Width.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.PixelRatio.get -> double?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.PixelRatio.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteSource1x.get -> dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteSource1x.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteSource2x.get -> dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteSource2x.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteSourceImageInfo(double? PixelRatio = null, dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x? SpriteSource1x = null, dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x? SpriteSource2x = null, string? SpriteUrl = null) -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfo.SpriteUrl.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ElementReferenceImage.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ElementReferenceImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ImageDataImage.get -> dymaptic.GeoBlazor.Core.Model.ImageData?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ImageDataImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ImageObjectImage.get -> dymaptic.GeoBlazor.Core.Model.ImageObject?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ImageObjectImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.Json.get -> dymaptic.GeoBlazor.Core.Model.SpriteInfo?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.Json.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ObjectImage.get -> object?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.ObjectImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource1x.SpriteSourceImageInfoSpriteSource1x(Microsoft.AspNetCore.Components.ElementReference? ElementReferenceImage = null, dymaptic.GeoBlazor.Core.Model.ImageData? ImageDataImage = null, dymaptic.GeoBlazor.Core.Model.ImageObject? ImageObjectImage = null, dymaptic.GeoBlazor.Core.Model.SpriteInfo? Json = null, object? ObjectImage = null) -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ElementReferenceImage.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ElementReferenceImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ImageDataImage.get -> dymaptic.GeoBlazor.Core.Model.ImageData?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ImageDataImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ImageObjectImage.get -> dymaptic.GeoBlazor.Core.Model.ImageObject?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ImageObjectImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.Json.get -> dymaptic.GeoBlazor.Core.Model.SpriteInfo?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.Json.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ObjectImage.get -> object?
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.ObjectImage.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceImageInfoSpriteSource2x.SpriteSourceImageInfoSpriteSource2x(Microsoft.AspNetCore.Components.ElementReference? ElementReferenceImage = null, dymaptic.GeoBlazor.Core.Model.ImageData? ImageDataImage = null, dymaptic.GeoBlazor.Core.Model.ImageObject? ImageObjectImage = null, dymaptic.GeoBlazor.Core.Model.SpriteInfo? Json = null, object? ObjectImage = null) -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.PixelRatio.get -> double?
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.PixelRatio.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.SpriteFormat.get -> dymaptic.GeoBlazor.Core.Enums.SpriteFormat?
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.SpriteFormat.init -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.SpriteSourceUrlInfo(double? PixelRatio = null, dymaptic.GeoBlazor.Core.Enums.SpriteFormat? SpriteFormat = null, string? SpriteUrl = null) -> void
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.SpriteUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.SpriteSourceUrlInfo.SpriteUrl.init -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinition
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.OnStatisticField.get -> string!
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.OnStatisticField.init -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.OutStatisticFieldName.get -> string!
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.OutStatisticFieldName.init -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.StatisticDefinition(string! OnStatisticField, string! OutStatisticFieldName, dymaptic.GeoBlazor.Core.Enums.StatisticType StatisticType, dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters! StatisticParameters) -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.StatisticParameters.get -> dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters!
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.StatisticParameters.init -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.StatisticType.get -> dymaptic.GeoBlazor.Core.Enums.StatisticType
dymaptic.GeoBlazor.Core.Model.StatisticDefinition.StatisticType.init -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters
dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters.OrderBy.get -> dymaptic.GeoBlazor.Core.Enums.OrderBy?
dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters.OrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters.StatisticDefinitionStatisticParameters(dymaptic.GeoBlazor.Core.Enums.OrderBy? OrderBy = null, double? Value = null) -> void
dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters.Value.get -> double?
dymaptic.GeoBlazor.Core.Model.StatisticDefinitionStatisticParameters.Value.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.Attachment.get -> dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesAttachment?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.Attachment.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.Data.get -> dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesData!
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.Data.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations!
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.QueryRelated.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilities.SublayerCapabilities(dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesData! Data, dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations! Operations, dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesAttachment? Attachment = null, dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated? QueryRelated = null) -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesAttachment
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesAttachment.SublayerCapabilitiesAttachment(bool? SupportsResize = null) -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesAttachment.SupportsResize.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesAttachment.SupportsResize.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesData
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesData.SublayerCapabilitiesData(bool? SupportsAttachment = null) -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesData.SupportsAttachment.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesData.SupportsAttachment.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations.SublayerCapabilitiesOperations(bool? SupportsQuery = null, bool? SupportsQueryAttachments = null) -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations.SupportsQueryAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesOperations.SupportsQueryAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SublayerCapabilitiesQueryRelated(bool? SupportsCount = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null) -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SupportsCount.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SupportsCount.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.SublayerCapabilitiesQueryRelated.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.SubsetDimension
dymaptic.GeoBlazor.Core.Model.SubsetDimension.Extent.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.SubsetDimension.Extent.init -> void
dymaptic.GeoBlazor.Core.Model.SubsetDimension.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.SubsetDimension.Name.init -> void
dymaptic.GeoBlazor.Core.Model.SubsetDimension.SubsetDimension(System.Collections.Generic.IReadOnlyCollection<double>? Extent = null, string? Name = null) -> void
dymaptic.GeoBlazor.Core.Model.Subtype
dymaptic.GeoBlazor.Core.Model.Subtype.Code.get -> double?
dymaptic.GeoBlazor.Core.Model.Subtype.Code.init -> void
dymaptic.GeoBlazor.Core.Model.Subtype.DefaultValues.get -> string?
dymaptic.GeoBlazor.Core.Model.Subtype.DefaultValues.init -> void
dymaptic.GeoBlazor.Core.Model.Subtype.Domains.get -> System.Collections.Generic.Dictionary<string!, dymaptic.GeoBlazor.Core.Components.Domain!>?
dymaptic.GeoBlazor.Core.Model.Subtype.Domains.init -> void
dymaptic.GeoBlazor.Core.Model.Subtype.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.Subtype.Name.init -> void
dymaptic.GeoBlazor.Core.Model.Subtype.Subtype(double? Code = null, string? DefaultValues = null, System.Collections.Generic.Dictionary<string!, dymaptic.GeoBlazor.Core.Components.Domain!>? Domains = null, string? Name = null) -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.AddAttachments.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.AddAttachments.set -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.AddFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.AddFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.DeleteAttachments.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.DeleteAttachments.set -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.GraphicCollectionDeleteFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.GraphicCollectionDeleteFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.StringCollectionDeleteFeatures.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.StringCollectionDeleteFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.SubtypeSublayerEdits(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>? AddAttachments = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? AddFeatures = null, System.Collections.Generic.IReadOnlyCollection<string!>? DeleteAttachments = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? GraphicCollectionDeleteFeatures = null, System.Collections.Generic.IReadOnlyCollection<string!>? StringCollectionDeleteFeatures = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>? UpdateAttachments = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? UpdateFeatures = null) -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.UpdateAttachments.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.AttachmentEdit!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.UpdateAttachments.set -> void
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.UpdateFeatures.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Model.SubtypeSublayerEdits.UpdateFeatures.set -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse
dymaptic.GeoBlazor.Core.Model.SuggestResponse.ActiveSourceIndex.get -> int
dymaptic.GeoBlazor.Core.Model.SuggestResponse.ActiveSourceIndex.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse.Errors.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors!>!
dymaptic.GeoBlazor.Core.Model.SuggestResponse.Errors.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse.NumResults.get -> int
dymaptic.GeoBlazor.Core.Model.SuggestResponse.NumResults.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResponseResults!>!
dymaptic.GeoBlazor.Core.Model.SuggestResponse.Results.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse.SearchTerm.get -> string?
dymaptic.GeoBlazor.Core.Model.SuggestResponse.SearchTerm.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse.SuggestResponse(int ActiveSourceIndex, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors!>! Errors, int NumResults, string! SuggestTerm, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResponseResults!>! Results, string? SearchTerm = null) -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponse.SuggestTerm.get -> string!
dymaptic.GeoBlazor.Core.Model.SuggestResponse.SuggestTerm.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.Error.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.Source.get -> string?
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.Source.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Model.SuggestResponseErrors.SuggestResponseErrors(dymaptic.GeoBlazor.Core.Model.Error? Error = null, string? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.Centroid.get -> bool
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.Centroid.init -> void
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.ConvexHull.get -> bool
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.ConvexHull.init -> void
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.Envelope.get -> bool
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.Envelope.init -> void
dymaptic.GeoBlazor.Core.Model.SupportedSpatialStatisticAggregations.SupportedSpatialStatisticAggregations(bool Centroid, bool Envelope, bool ConvexHull) -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Preview.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Preview.init -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.RampTitleLabel.get -> dymaptic.GeoBlazor.Core.Model.RampTitle?
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.RampTitleLabel.init -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Size.get -> int?
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Size.init -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.StringLabel.get -> string?
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.StringLabel.init -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Symbol.get -> dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Symbol.init -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.SymbolTableElementInfo(Microsoft.AspNetCore.Components.ElementReference? Preview = null, dymaptic.GeoBlazor.Core.Model.RampTitle? RampTitleLabel = null, int? Size = null, string? StringLabel = null, dymaptic.GeoBlazor.Core.Components.Symbols.Symbol? Symbol = null, string? Value = null) -> void
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Value.get -> string?
dymaptic.GeoBlazor.Core.Model.SymbolTableElementInfo.Value.init -> void
dymaptic.GeoBlazor.Core.Model.TemporalDomain
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Begin.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Begin.init -> void
dymaptic.GeoBlazor.Core.Model.TemporalDomain.End.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.TemporalDomain.End.init -> void
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Resolution.get -> double?
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Resolution.init -> void
dymaptic.GeoBlazor.Core.Model.TemporalDomain.TemporalDomain(System.DateTime? Begin = null, System.DateTime? End = null, double? Resolution = null, object? Units = null, System.Collections.Generic.IReadOnlyCollection<System.DateTime>? Values = null) -> void
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Units.get -> object?
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Units.init -> void
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Values.get -> System.Collections.Generic.IReadOnlyCollection<System.DateTime>?
dymaptic.GeoBlazor.Core.Model.TemporalDomain.Values.init -> void
dymaptic.GeoBlazor.Core.Model.Thumbnail
dymaptic.GeoBlazor.Core.Model.Thumbnail.ContentType.get -> string!
dymaptic.GeoBlazor.Core.Model.Thumbnail.ContentType.init -> void
dymaptic.GeoBlazor.Core.Model.Thumbnail.Height.get -> double
dymaptic.GeoBlazor.Core.Model.Thumbnail.Height.init -> void
dymaptic.GeoBlazor.Core.Model.Thumbnail.ImageData.get -> string!
dymaptic.GeoBlazor.Core.Model.Thumbnail.ImageData.init -> void
dymaptic.GeoBlazor.Core.Model.Thumbnail.Thumbnail(string! ContentType, string! ImageData, double Height, double Width) -> void
dymaptic.GeoBlazor.Core.Model.Thumbnail.Width.get -> double
dymaptic.GeoBlazor.Core.Model.Thumbnail.Width.init -> void
dymaptic.GeoBlazor.Core.Model.TickElementGroup
dymaptic.GeoBlazor.Core.Model.TickElementGroup.LabelElement.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Model.TickElementGroup.LabelElement.init -> void
dymaptic.GeoBlazor.Core.Model.TickElementGroup.TickElement.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Model.TickElementGroup.TickElement.init -> void
dymaptic.GeoBlazor.Core.Model.TickElementGroup.TickElementGroup(Microsoft.AspNetCore.Components.ElementReference? TickElement, Microsoft.AspNetCore.Components.ElementReference? LabelElement) -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension
dymaptic.GeoBlazor.Core.Model.TimeDimension.DateTimeCollectionDefault.get -> System.Collections.Generic.IReadOnlyCollection<System.DateTime>?
dymaptic.GeoBlazor.Core.Model.TimeDimension.DateTimeCollectionDefault.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.DateTimeCollectionExtent.get -> System.Collections.Generic.IReadOnlyCollection<System.DateTime>?
dymaptic.GeoBlazor.Core.Model.TimeDimension.DateTimeCollectionExtent.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.MultipleValues.get -> bool?
dymaptic.GeoBlazor.Core.Model.TimeDimension.MultipleValues.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.TimeDimension.Name.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.NearestValue.get -> bool?
dymaptic.GeoBlazor.Core.Model.TimeDimension.NearestValue.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.TimeDimension(System.Collections.Generic.IReadOnlyCollection<System.DateTime>? DateTimeCollectionDefault = null, System.Collections.Generic.IReadOnlyCollection<System.DateTime>? DateTimeCollectionExtent = null, bool? MultipleValues = null, string? Name = null, bool? NearestValue = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval!>? TimeDimensionIntervalCollectionDefault = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval!>? TimeDimensionIntervalCollectionExtent = null, string? Units = null) -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.TimeDimensionIntervalCollectionDefault.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval!>?
dymaptic.GeoBlazor.Core.Model.TimeDimension.TimeDimensionIntervalCollectionDefault.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.TimeDimensionIntervalCollectionExtent.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval!>?
dymaptic.GeoBlazor.Core.Model.TimeDimension.TimeDimensionIntervalCollectionExtent.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimension.Units.get -> string?
dymaptic.GeoBlazor.Core.Model.TimeDimension.Units.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.Max.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.Max.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.Min.get -> System.DateTime?
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.Min.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.Resolution.get -> dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution?
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.Resolution.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionInterval.TimeDimensionInterval(System.DateTime? Max = null, System.DateTime? Min = null, dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution? Resolution = null) -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Days.get -> double?
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Days.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Hours.get -> double?
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Hours.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Minutes.get -> double?
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Minutes.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Months.get -> double?
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Months.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Seconds.get -> double?
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Seconds.init -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.TimeDimensionIntervalResolution(double? Days = null, double? Hours = null, double? Minutes = null, double? Months = null, double? Seconds = null, double? Years = null) -> void
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Years.get -> double?
dymaptic.GeoBlazor.Core.Model.TimeDimensionIntervalResolution.Years.init -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.CacheHint.get -> bool?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.CacheHint.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Distance.get -> double?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Distance.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Geometry.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.GeometryPrecision.get -> double?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.GeometryPrecision.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.MaxAllowableOffset.get -> double?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.MaxAllowableOffset.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Num.get -> int?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Num.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ObjectIds.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ObjectIds.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.OrderByFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.OutFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.OutFields.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.OutSpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.OutSpatialReference.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ReturnGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ReturnGeometry.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ReturnM.get -> bool?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ReturnM.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ReturnZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.ReturnZ.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.SpatialRelationship.get -> dymaptic.GeoBlazor.Core.Enums.SpatialRelationship?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.SpatialRelationship.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Start.get -> int?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Start.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.TimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.TimeExtent.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.TopFeaturesQuery(bool? CacheHint = null, double? Distance = null, dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? Geometry = null, double? GeometryPrecision = null, double? MaxAllowableOffset = null, int? Num = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ObjectId!>? ObjectIds = null, System.Collections.Generic.IReadOnlyCollection<string!>? OrderByFields = null, System.Collections.Generic.IReadOnlyCollection<string!>? OutFields = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? OutSpatialReference = null, bool? ReturnGeometry = null, bool? ReturnM = null, bool? ReturnZ = null, dymaptic.GeoBlazor.Core.Enums.SpatialRelationship? SpatialRelationship = null, int? Start = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? TimeExtent = null, dymaptic.GeoBlazor.Core.Model.TopFilter? TopFilter = null, dymaptic.GeoBlazor.Core.Enums.QueryUnits? Units = null, string? Where = null) -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.TopFilter.get -> dymaptic.GeoBlazor.Core.Model.TopFilter?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.TopFilter.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Units.get -> dymaptic.GeoBlazor.Core.Enums.QueryUnits?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Units.set -> void
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Where.get -> string?
dymaptic.GeoBlazor.Core.Model.TopFeaturesQuery.Where.set -> void
dymaptic.GeoBlazor.Core.Model.TopFilter
dymaptic.GeoBlazor.Core.Model.TopFilter.GroupByFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.TopFilter.GroupByFields.set -> void
dymaptic.GeoBlazor.Core.Model.TopFilter.OrderByFields.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.TopFilter.OrderByFields.set -> void
dymaptic.GeoBlazor.Core.Model.TopFilter.TopCount.get -> int?
dymaptic.GeoBlazor.Core.Model.TopFilter.TopCount.set -> void
dymaptic.GeoBlazor.Core.Model.TopFilter.TopFilter(System.Collections.Generic.IReadOnlyCollection<string!>? GroupByFields = null, System.Collections.Generic.IReadOnlyCollection<string!>? OrderByFields = null, int? TopCount = null) -> void
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Attachments.get -> dymaptic.GeoBlazor.Core.Model.AttachmentCapabilities?
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Attachments.init -> void
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Attributes.get -> bool?
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Attributes.init -> void
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Enabled.get -> bool?
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Enabled.init -> void
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Geometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.Geometry.init -> void
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.ReliesOnOwnerAdminPrivileges.get -> bool?
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.ReliesOnOwnerAdminPrivileges.init -> void
dymaptic.GeoBlazor.Core.Model.UpdateCapabilities.UpdateCapabilities(dymaptic.GeoBlazor.Core.Model.AttachmentCapabilities? Attachments = null, bool? Attributes = null, bool? Enabled = null, bool? Geometry = null, bool? ReliesOnOwnerAdminPrivileges = null) -> void
dymaptic.GeoBlazor.Core.Model.UrlService
dymaptic.GeoBlazor.Core.Model.UrlService.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.UrlService.Url.init -> void
dymaptic.GeoBlazor.Core.Model.ValidateServiceEdits
dymaptic.GeoBlazor.Core.Model.ValidateServiceEdits.EditedFeatures.get -> object?
dymaptic.GeoBlazor.Core.Model.ValidateServiceEdits.EditedFeatures.init -> void
dymaptic.GeoBlazor.Core.Model.ValidateServiceEdits.LayerId.get -> long?
dymaptic.GeoBlazor.Core.Model.ValidateServiceEdits.LayerId.init -> void
dymaptic.GeoBlazor.Core.Model.ValidateServiceEdits.ValidateServiceEdits(object? EditedFeatures = null, long? LayerId = null) -> void
dymaptic.GeoBlazor.Core.Model.ValidationSetItemJSON
dymaptic.GeoBlazor.Core.Model.ValidationSetItemJSON.GlobalIds.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Model.ValidationSetItemJSON.GlobalIds.init -> void
dymaptic.GeoBlazor.Core.Model.ValidationSetItemJSON.SourceId.get -> long?
dymaptic.GeoBlazor.Core.Model.ValidationSetItemJSON.SourceId.init -> void
dymaptic.GeoBlazor.Core.Model.ValidationSetItemJSON.ValidationSetItemJSON(System.Collections.Generic.IReadOnlyCollection<string!>? GlobalIds = null, long? SourceId = null) -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities.ExportTiles.get -> dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesExportTiles?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities.ExportTiles.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilities.VectorTileLayerCapabilities(dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesExportTiles? ExportTiles = null, dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations? Operations = null) -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesExportTiles
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesExportTiles.MaxExportTilesCount.get -> int?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesExportTiles.MaxExportTilesCount.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesExportTiles.VectorTileLayerCapabilitiesExportTiles(int? MaxExportTilesCount = null) -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations.SupportsExportTiles.get -> bool?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations.SupportsExportTiles.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations.SupportsTileMap.get -> bool?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations.SupportsTileMap.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCapabilitiesOperations.VectorTileLayerCapabilitiesOperations(bool? SupportsExportTiles = null, bool? SupportsTileMap = null) -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.GlyphsUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.GlyphsUrl.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.LayerDefinition.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.LayerDefinition.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.ServiceUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.ServiceUrl.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.SpriteUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.SpriteUrl.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.Style.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.Style.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.StyleUrl.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.StyleUrl.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileLayerCurrentStyleInfo.VectorTileLayerCurrentStyleInfo(string? GlyphsUrl = null, string? LayerDefinition = null, string? ServiceUrl = null, string? SpriteUrl = null, string? Style = null, string? StyleUrl = null) -> void
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.ArcGISLayerId.get -> string?
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.ArcGISLayerId.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.LayerId.get -> System.Guid?
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.LayerId.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.LayerIndex.get -> int?
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.LayerIndex.init -> void
dymaptic.GeoBlazor.Core.Model.VectorTileOrigin.VectorTileOrigin(System.Guid? LayerId = null, string? ArcGISLayerId = null, int? LayerIndex = null) -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Center.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Center.init -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent!
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Extent.init -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Rotation.get -> double?
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Rotation.init -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Scale.get -> double
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Scale.init -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Tilt.get -> double?
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Tilt.init -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.ViewExtentUpdate(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! Extent, dymaptic.GeoBlazor.Core.Components.Geometries.Point? Center, double Scale, double Zoom, double? Rotation = null, double? Tilt = null) -> void
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Zoom.get -> double
dymaptic.GeoBlazor.Core.Model.ViewExtentUpdate.Zoom.init -> void
dymaptic.GeoBlazor.Core.Model.VisibleContentElements
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Attachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Attachments.init -> void
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Expression.get -> bool?
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Expression.init -> void
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Fields.get -> bool?
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Fields.init -> void
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Media.get -> bool?
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Media.init -> void
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Text.get -> bool?
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.Text.init -> void
dymaptic.GeoBlazor.Core.Model.VisibleContentElements.VisibleContentElements(bool? Attachments = null, bool? Expression = null, bool? Fields = null, bool? Media = null, bool? Text = null) -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.CurrentTimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.CurrentTimeExtent.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.FullTimeExtent.get -> dymaptic.GeoBlazor.Core.Components.TimeExtent?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.FullTimeExtent.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.Loop.get -> bool?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.Loop.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.NumStops.get -> double?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.NumStops.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.NumThumbs.get -> double?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.NumThumbs.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.StopDelay.get -> double?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.StopDelay.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.StopInterval.get -> dymaptic.GeoBlazor.Core.Components.TimeInterval?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.StopInterval.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.Stops.get -> System.Collections.Generic.IReadOnlyList<System.DateTime>?
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.Stops.init -> void
dymaptic.GeoBlazor.Core.Model.WebDocTimeSlider.WebDocTimeSlider(dymaptic.GeoBlazor.Core.Components.TimeExtent? CurrentTimeExtent = null, dymaptic.GeoBlazor.Core.Components.TimeExtent? FullTimeExtent = null, bool? Loop = null, double? NumStops = null, double? NumThumbs = null, double? StopDelay = null, dymaptic.GeoBlazor.Core.Components.TimeInterval? StopInterval = null, System.Collections.Generic.IReadOnlyList<System.DateTime>? Stops = null) -> void
dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion
dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion.Major.get -> double?
dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion.Major.init -> void
dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion.Minor.get -> double?
dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion.Minor.init -> void
dymaptic.GeoBlazor.Core.Model.WebMapSourceVersion.WebMapSourceVersion(double? Major = null, double? Minor = null) -> void
dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize
dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize.Height.init -> void
dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize.WebMapUpdateFromOptionsThumbnailSize(int? Height = null, int? Width = null) -> void
dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize.Width.init -> void
dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion
dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion.Major.get -> double?
dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion.Major.init -> void
dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion.Minor.get -> double?
dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion.Minor.init -> void
dymaptic.GeoBlazor.Core.Model.WebSceneSourceVersion.WebSceneSourceVersion(double? Major = null, double? Minor = null) -> void
dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize
dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize.Height.get -> int?
dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize.Height.init -> void
dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize.WebSceneUpdateFromOptionsThumbnailSize(int? Height = null, int? Width = null) -> void
dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize.Width.get -> int?
dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize.Width.init -> void
dymaptic.GeoBlazor.Core.Model.WFSCapabilities
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.FeatureTypes.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.WFSFeatureType!>?
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.FeatureTypes.set -> void
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.WFSOperations?
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.Operations.set -> void
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.Url.init -> void
dymaptic.GeoBlazor.Core.Model.WFSCapabilities.WFSCapabilities(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.WFSFeatureType!>? FeatureTypes = null, dymaptic.GeoBlazor.Core.Model.WFSOperations? Operations = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.DefaultSpatialReference.get -> double?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.DefaultSpatialReference.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Description.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Description.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Extent.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Name.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.NamespacePrefix.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.NamespacePrefix.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.NamespaceUri.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.NamespaceUri.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.SupportedSpatialReferences.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.SupportedSpatialReferences.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Title.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.Title.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.TypeName.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.TypeName.init -> void
dymaptic.GeoBlazor.Core.Model.WFSFeatureType.WFSFeatureType(double? DefaultSpatialReference = null, string? Description = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, string? Name = null, string? NamespacePrefix = null, string? NamespaceUri = null, System.Collections.Generic.IReadOnlyCollection<double>? SupportedSpatialReferences = null, string? Title = null, string? TypeName = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Attachment.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesAttachment?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Attachment.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Data.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Data.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Editing.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Editing.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Operations.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Operations.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Query.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.Query.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.QueryRelated.get -> dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.QueryRelated.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilities.WFSLayerCapabilities(dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesAttachment? Attachment = null, dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData? Data = null, dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing? Editing = null, dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations? Operations = null, dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery? Query = null, dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated? QueryRelated = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesAttachment
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesAttachment.SupportsResize.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesAttachment.SupportsResize.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesAttachment.WFSLayerCapabilitiesAttachment(bool? SupportsResize = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.SupportsAttachment.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.SupportsAttachment.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.SupportsM.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.SupportsM.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.SupportsZ.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.SupportsZ.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesData.WFSLayerCapabilitiesData(bool? SupportsAttachment = null, bool? SupportsM = null, bool? SupportsZ = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsDeleteByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsDeleteByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsDeleteByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsDeleteByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsGeometryUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsGeometryUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsGlobalId.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsGlobalId.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsRollbackOnFailure.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsRollbackOnFailure.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUpdateByAnonymous.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUpdateByAnonymous.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUpdateByOthers.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUpdateByOthers.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUpdateWithoutM.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUpdateWithoutM.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUploadWithItemId.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.SupportsUploadWithItemId.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesEditing.WFSLayerCapabilitiesEditing(bool? SupportsDeleteByAnonymous = null, bool? SupportsDeleteByOthers = null, bool? SupportsGeometryUpdate = null, bool? SupportsGlobalId = null, bool? SupportsRollbackOnFailure = null, bool? SupportsUpdateByAnonymous = null, bool? SupportsUpdateByOthers = null, bool? SupportsUpdateWithoutM = null, bool? SupportsUploadWithItemId = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsAdd.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsAdd.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsCalculate.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsCalculate.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsDelete.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsDelete.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsEditing.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsEditing.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsQuery.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsQuery.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsQueryAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsQueryAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsResizeAttachments.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsResizeAttachments.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsUpdate.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsUpdate.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsValidateSql.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.SupportsValidateSql.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesOperations.WFSLayerCapabilitiesOperations(bool? SupportsAdd = null, bool? SupportsCalculate = null, bool? SupportsDelete = null, bool? SupportsEditing = null, bool? SupportsQuery = null, bool? SupportsQueryAttachments = null, bool? SupportsResizeAttachments = null, bool? SupportsUpdate = null, bool? SupportsValidateSql = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsCentroid.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsCentroid.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsDisjointSpatialRelationship.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsDistance.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsDistance.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsDistinct.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsDistinct.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsExtent.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsExtent.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsGeometryProperties.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsGeometryProperties.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsHavingClause.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsHavingClause.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsHistoricMoment.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsHistoricMoment.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsPercentileStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsPercentileStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsQuantization.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsQuantization.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsQuantizationEditMode.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsQuantizationEditMode.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsQueryGeometry.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsQueryGeometry.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsResultType.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsResultType.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsSqlExpression.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsSqlExpression.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsStandardizedQueriesOnly.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsStatistics.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsStatistics.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsTrueCurve.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.SupportsTrueCurve.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQuery.WFSLayerCapabilitiesQuery(bool? SupportsCentroid = null, bool? SupportsDisjointSpatialRelationship = null, bool? SupportsDistance = null, bool? SupportsDistinct = null, bool? SupportsExtent = null, bool? SupportsGeometryProperties = null, bool? SupportsHavingClause = null, bool? SupportsHistoricMoment = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null, bool? SupportsPercentileStatistics = null, bool? SupportsQuantization = null, bool? SupportsQuantizationEditMode = null, bool? SupportsQueryGeometry = null, bool? SupportsResultType = null, bool? SupportsSqlExpression = null, bool? SupportsStandardizedQueriesOnly = null, bool? SupportsStatistics = null, bool? SupportsTrueCurve = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.SupportsCount.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.SupportsCount.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.SupportsOrderBy.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.SupportsOrderBy.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerCapabilitiesQueryRelated.WFSLayerCapabilitiesQueryRelated(bool? SupportsCount = null, bool? SupportsOrderBy = null, bool? SupportsPagination = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.CustomParameters.get -> System.Collections.Generic.Dictionary<string!, object!>?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Extent.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Fields.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Field!>?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Fields.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.GeometryType.get -> dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.GeometryType.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Name.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Name.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.NamespaceUri.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.NamespaceUri.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.ObjectIdField.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.ObjectIdField.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.SpatialReference.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.SwapXY.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.SwapXY.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.Url.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.WfsCapabilities.get -> dymaptic.GeoBlazor.Core.Model.WFSCapabilities?
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.WfsCapabilities.set -> void
dymaptic.GeoBlazor.Core.Model.WFSLayerInfo.WFSLayerInfo(System.Collections.Generic.Dictionary<string!, object!>? CustomParameters = null, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Field!>? Fields = null, dymaptic.GeoBlazor.Core.Enums.SimpleGeometryType? GeometryType = null, string? Name = null, string? NamespaceUri = null, string? ObjectIdField = null, dymaptic.GeoBlazor.Core.Components.SpatialReference? SpatialReference = null, bool? SwapXY = null, string? Url = null, dymaptic.GeoBlazor.Core.Model.WFSCapabilities? WfsCapabilities = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSOperations
dymaptic.GeoBlazor.Core.Model.WFSOperations.DescribeFeatureType.get -> dymaptic.GeoBlazor.Core.Model.WFSOperationsDescribeFeatureType?
dymaptic.GeoBlazor.Core.Model.WFSOperations.DescribeFeatureType.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperations.GetCapabilities.get -> dymaptic.GeoBlazor.Core.Model.WFSOperationsGetCapabilities?
dymaptic.GeoBlazor.Core.Model.WFSOperations.GetCapabilities.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperations.GetFeature.get -> dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature?
dymaptic.GeoBlazor.Core.Model.WFSOperations.GetFeature.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperations.WFSOperations(dymaptic.GeoBlazor.Core.Model.WFSOperationsDescribeFeatureType? DescribeFeatureType = null, dymaptic.GeoBlazor.Core.Model.WFSOperationsGetCapabilities? GetCapabilities = null, dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature? GetFeature = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsDescribeFeatureType
dymaptic.GeoBlazor.Core.Model.WFSOperationsDescribeFeatureType.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSOperationsDescribeFeatureType.Url.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsDescribeFeatureType.WFSOperationsDescribeFeatureType(string? Url = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetCapabilities
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetCapabilities.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetCapabilities.Url.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetCapabilities.WFSOperationsGetCapabilities(string? Url = null) -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.OutputFormat.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.OutputFormat.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.SupportsPagination.get -> bool?
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.SupportsPagination.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.Url.get -> string?
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.Url.init -> void
dymaptic.GeoBlazor.Core.Model.WFSOperationsGetFeature.WFSOperationsGetFeature(string? OutputFormat = null, bool? SupportsPagination = null, string? Url = null) -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.BasemapLayerListCatalogOptions(string? FilterPlaceholder = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? ListItemCreatedFunction = null, double? MinFilterItems = null, string? SelectionMode = null, string? VisibilityAppearance = null, dymaptic.GeoBlazor.Core.Interfaces.IBasemapLayerListCatalogOptionsVisibleElements? VisibleElements = null) -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.FilterPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.FilterPlaceholder.init -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.HasListItemCreatedHandler.get -> bool
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.ListItemCreatedFunction.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.ListItemCreatedFunction.init -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.MinFilterItems.get -> double?
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.MinFilterItems.init -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.OnListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! listItem) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.SelectionMode.get -> string?
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.SelectionMode.init -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.VisibilityAppearance.get -> string?
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.VisibilityAppearance.init -> void
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.VisibleElements.get -> dymaptic.GeoBlazor.Core.Interfaces.IBasemapLayerListCatalogOptionsVisibleElements?
dymaptic.GeoBlazor.Core.Options.BasemapLayerListCatalogOptions.VisibleElements.init -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.BookmarkOptions(bool? CaptureRotation = null, bool? CaptureScale = null, bool? CaptureTimeExtent = null, bool? CaptureViewpoint = null, dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings? ScreenshotSettings = null, bool? TakeScreenshot = null) -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureRotation.get -> bool?
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureRotation.set -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureScale.get -> bool?
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureScale.set -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureTimeExtent.get -> bool?
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureTimeExtent.set -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureViewpoint.get -> bool?
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.CaptureViewpoint.set -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.ScreenshotSettings.get -> dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings?
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.ScreenshotSettings.set -> void
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.TakeScreenshot.get -> bool?
dymaptic.GeoBlazor.Core.Options.BookmarkOptions.TakeScreenshot.set -> void
dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions
dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions.CreatePopupTemplateOptions(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes>? IgnoreFieldTypes = null, System.Collections.Generic.IReadOnlyCollection<string!>? VisibleFieldNames = null) -> void
dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions.IgnoreFieldTypes.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Enums.IgnoreFieldTypes>?
dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions.IgnoreFieldTypes.set -> void
dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions.VisibleFieldNames.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Options.CreatePopupTemplateOptions.VisibleFieldNames.set -> void
dymaptic.GeoBlazor.Core.Options.DefaultUpdateHighlightOptions
dymaptic.GeoBlazor.Core.Options.DefaultUpdateHighlightOptions.DefaultUpdateHighlightOptions(bool Enabled) -> void
dymaptic.GeoBlazor.Core.Options.DefaultUpdateHighlightOptions.Enabled.get -> bool
dymaptic.GeoBlazor.Core.Options.DefaultUpdateHighlightOptions.Enabled.init -> void
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.FeatureEditOptions(string? GdbVersion = null, bool? GlobalIdUsed = null, bool? ReturnEditMoment = null, dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption? ReturnServiceEditsOption = null, bool? RollbackOnFailureEnabled = null) -> void
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.GlobalIdUsed.get -> bool?
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.GlobalIdUsed.set -> void
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.ReturnEditMoment.get -> bool?
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.ReturnEditMoment.set -> void
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.ReturnServiceEditsOption.get -> dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption?
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.ReturnServiceEditsOption.set -> void
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.RollbackOnFailureEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Options.FeatureEditOptions.RollbackOnFailureEnabled.set -> void
dymaptic.GeoBlazor.Core.Options.FeatureFormViewModelValidateContingencyConstraintsOptions
dymaptic.GeoBlazor.Core.Options.FeatureFormViewModelValidateContingencyConstraintsOptions.FeatureFormViewModelValidateContingencyConstraintsOptions(bool? IncludeIncompleteViolations = null) -> void
dymaptic.GeoBlazor.Core.Options.FeatureFormViewModelValidateContingencyConstraintsOptions.IncludeIncompleteViolations.get -> bool?
dymaptic.GeoBlazor.Core.Options.FeatureFormViewModelValidateContingencyConstraintsOptions.IncludeIncompleteViolations.set -> void
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions.EnableHighAccuracy.get -> bool?
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions.EnableHighAccuracy.set -> void
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions.MaximumAge.get -> long?
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions.MaximumAge.set -> void
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions.Timeout.get -> long?
dymaptic.GeoBlazor.Core.Options.GeoLocationOptions.Timeout.set -> void
dymaptic.GeoBlazor.Core.Options.GoToOptions
dymaptic.GeoBlazor.Core.Options.GoToOptions.Animate.get -> bool?
dymaptic.GeoBlazor.Core.Options.GoToOptions.Animate.init -> void
dymaptic.GeoBlazor.Core.Options.GoToOptions.Duration.get -> double?
dymaptic.GeoBlazor.Core.Options.GoToOptions.Duration.init -> void
dymaptic.GeoBlazor.Core.Options.GoToOptions.Easing.get -> string?
dymaptic.GeoBlazor.Core.Options.GoToOptions.Easing.init -> void
dymaptic.GeoBlazor.Core.Options.GoToOptions.GoToOptions(bool? Animate, double? Duration, string? Easing, double? SpeedFactor, double? MaxDuration) -> void
dymaptic.GeoBlazor.Core.Options.GoToOptions.MaxDuration.get -> double?
dymaptic.GeoBlazor.Core.Options.GoToOptions.MaxDuration.init -> void
dymaptic.GeoBlazor.Core.Options.GoToOptions.SpeedFactor.get -> double?
dymaptic.GeoBlazor.Core.Options.GoToOptions.SpeedFactor.init -> void
dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions
dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions.DemResolution.get -> string?
dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions.DemResolution.set -> void
dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions.GroundCreateElevationSamplerOptions(string? DemResolution = null, double? NoDataValue = null) -> void
dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions.NoDataValue.get -> double?
dymaptic.GeoBlazor.Core.Options.GroundCreateElevationSamplerOptions.NoDataValue.set -> void
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.DemResolution.get -> string?
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.DemResolution.set -> void
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.GroundQueryElevationOptions(string? DemResolution = null, double? NoDataValue = null, bool? ReturnSampleInfo = null) -> void
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.NoDataValue.get -> double?
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.NoDataValue.set -> void
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.ReturnSampleInfo.get -> bool?
dymaptic.GeoBlazor.Core.Options.GroundQueryElevationOptions.ReturnSampleInfo.set -> void
dymaptic.GeoBlazor.Core.Options.HitTestOptions
dymaptic.GeoBlazor.Core.Options.HitTestOptions.ExcludeByGeoBlazorId.get -> System.Collections.Generic.IEnumerable<System.Guid>?
dymaptic.GeoBlazor.Core.Options.HitTestOptions.ExcludeByGeoBlazorId.set -> void
dymaptic.GeoBlazor.Core.Options.HitTestOptions.ExcludeGraphicsByArcGISId.get -> System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Options.HitTestOptions.ExcludeGraphicsByArcGISId.set -> void
dymaptic.GeoBlazor.Core.Options.HitTestOptions.ExcludeLayersByArcGISId.get -> System.Collections.Generic.IEnumerable<string!>?
dymaptic.GeoBlazor.Core.Options.HitTestOptions.ExcludeLayersByArcGISId.set -> void
dymaptic.GeoBlazor.Core.Options.HitTestOptions.IncludeByGeoBlazorId.get -> System.Collections.Generic.IEnumerable<System.Guid>?
dymaptic.GeoBlazor.Core.Options.HitTestOptions.IncludeByGeoBlazorId.set -> void
dymaptic.GeoBlazor.Core.Options.HitTestOptions.IncludeGraphicsByArcGISId.get -> System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Model.ObjectId!>?
dymaptic.GeoBlazor.Core.Options.HitTestOptions.IncludeGraphicsByArcGISId.set -> void
dymaptic.GeoBlazor.Core.Options.HitTestOptions.IncludeLayersByArcGISId.get -> System.Collections.Generic.IEnumerable<string!>?
dymaptic.GeoBlazor.Core.Options.HitTestOptions.IncludeLayersByArcGISId.set -> void
dymaptic.GeoBlazor.Core.Options.ImageryTileMixinFetchPixelsOptions
dymaptic.GeoBlazor.Core.Options.ImageryTileMixinFetchPixelsOptions.ImageryTileMixinFetchPixelsOptions(dymaptic.GeoBlazor.Core.Enums.Interpolation? Interpolation = null) -> void
dymaptic.GeoBlazor.Core.Options.ImageryTileMixinFetchPixelsOptions.Interpolation.get -> dymaptic.GeoBlazor.Core.Enums.Interpolation?
dymaptic.GeoBlazor.Core.Options.ImageryTileMixinFetchPixelsOptions.Interpolation.set -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.FilterPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.FilterPlaceholder.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.HasListItemCreatedHandler.get -> bool
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.LayerListCatalogOptions(string? FilterPlaceholder = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? ListItemCreatedFunction = null, double? MinFilterItems = null, string? SelectionMode = null, string? VisibilityAppearance = null, dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements? VisibleElements = null) -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.ListItemCreatedFunction.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.ListItemCreatedFunction.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.MinFilterItems.get -> double?
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.MinFilterItems.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.OnListItemCreated(dymaptic.GeoBlazor.Core.Components.ListItem! listItem) -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.SelectionMode.get -> string?
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.SelectionMode.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.VisibilityAppearance.get -> string?
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.VisibilityAppearance.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.LayerListCatalogOptionsVisibleElements?
dymaptic.GeoBlazor.Core.Options.LayerListCatalogOptions.VisibleElements.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.FilterPlaceholder.get -> string?
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.FilterPlaceholder.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.LayerListKnowledgeGraphOptions(string? FilterPlaceholder = null, System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>? ListItemCreatedFunction = null, double? MinFilterItems = null, dymaptic.GeoBlazor.Core.Enums.SelectionMode? SelectionMode = null, dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements? VisibleElements = null) -> void
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.ListItemCreatedFunction.get -> System.Func<dymaptic.GeoBlazor.Core.Components.ListItem!, System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.ListItem!>!>?
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.ListItemCreatedFunction.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.MinFilterItems.get -> double?
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.MinFilterItems.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.SelectionMode.get -> dymaptic.GeoBlazor.Core.Enums.SelectionMode?
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.SelectionMode.init -> void
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements?
dymaptic.GeoBlazor.Core.Options.LayerListKnowledgeGraphOptions.VisibleElements.init -> void
dymaptic.GeoBlazor.Core.Options.PopupFetchFeaturesOptions
dymaptic.GeoBlazor.Core.Options.PopupFetchFeaturesOptions.Event.get -> string?
dymaptic.GeoBlazor.Core.Options.PopupFetchFeaturesOptions.Event.set -> void
dymaptic.GeoBlazor.Core.Options.PopupFetchFeaturesOptions.PopupFetchFeaturesOptions(string? Event = null) -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Collapsed.get -> bool?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Collapsed.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.ElementReferenceContent.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.ElementReferenceContent.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.FeatureMenuOpen.get -> bool?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.FeatureMenuOpen.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Features.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Features.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.FetchFeatures.get -> bool?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.FetchFeatures.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Location.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.PopupOpenOptions(bool? Collapsed = null, Microsoft.AspNetCore.Components.ElementReference? ElementReferenceContent = null, bool? FeatureMenuOpen = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? Features = null, bool? FetchFeatures = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? Location = null, string? Promises = null, bool? ShouldFocus = null, string? StringContent = null, string? Title = null, bool? UpdateLocationEnabled = null, dymaptic.GeoBlazor.Core.Components.Widgets.Widget? WidgetContent = null) -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Promises.get -> string?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Promises.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.ShouldFocus.get -> bool?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.ShouldFocus.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.StringContent.get -> string?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.StringContent.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Title.get -> string?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.Title.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.UpdateLocationEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.UpdateLocationEnabled.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.WidgetContent.get -> dymaptic.GeoBlazor.Core.Components.Widgets.Widget?
dymaptic.GeoBlazor.Core.Options.PopupOpenOptions.WidgetContent.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOptions
dymaptic.GeoBlazor.Core.Options.PopupOptions.DockOptions.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions!
dymaptic.GeoBlazor.Core.Options.PopupOptions.DockOptions.set -> void
dymaptic.GeoBlazor.Core.Options.PopupOptions.PopupOptions(dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions? dockOptions = null, dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements? visibleElements = null) -> void
dymaptic.GeoBlazor.Core.Options.PopupOptions.VisibleElements.get -> dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements!
dymaptic.GeoBlazor.Core.Options.PopupOptions.VisibleElements.set -> void
dymaptic.GeoBlazor.Core.Options.PortalFetchBasemapsOptions
dymaptic.GeoBlazor.Core.Options.PortalFetchBasemapsOptions.Include3d.get -> bool?
dymaptic.GeoBlazor.Core.Options.PortalFetchBasemapsOptions.Include3d.set -> void
dymaptic.GeoBlazor.Core.Options.PortalFetchBasemapsOptions.PortalFetchBasemapsOptions(bool? Include3d = null) -> void
dymaptic.GeoBlazor.Core.Options.PortalItemAddResourceOptions
dymaptic.GeoBlazor.Core.Options.PortalItemAddResourceOptions.Access.get -> dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess?
dymaptic.GeoBlazor.Core.Options.PortalItemAddResourceOptions.Access.set -> void
dymaptic.GeoBlazor.Core.Options.PortalItemAddResourceOptions.PortalItemAddResourceOptions(dymaptic.GeoBlazor.Core.Enums.PortalItemAddResourceOptionsAccess? Access = null) -> void
dymaptic.GeoBlazor.Core.Options.PortalItemResourceFetchOptions
dymaptic.GeoBlazor.Core.Options.PortalItemResourceFetchOptions.CacheBust.get -> bool?
dymaptic.GeoBlazor.Core.Options.PortalItemResourceFetchOptions.CacheBust.set -> void
dymaptic.GeoBlazor.Core.Options.PortalItemResourceFetchOptions.PortalItemResourceFetchOptions(bool? CacheBust = null) -> void
dymaptic.GeoBlazor.Core.Options.PortalItemResourceUpdateOptions
dymaptic.GeoBlazor.Core.Options.PortalItemResourceUpdateOptions.Access.get -> dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess?
dymaptic.GeoBlazor.Core.Options.PortalItemResourceUpdateOptions.Access.set -> void
dymaptic.GeoBlazor.Core.Options.PortalItemResourceUpdateOptions.PortalItemResourceUpdateOptions(dymaptic.GeoBlazor.Core.Enums.PortalItemResourceUpdateOptionsAccess? Access = null) -> void
dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions
dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions.MultidimensionalDefinition.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>?
dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions.MultidimensionalDefinition.set -> void
dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions.RasterIdentifyOptions(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.DimensionalDefinition!>? MultidimensionalDefinition = null, string? TransposedVariableName = null) -> void
dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions.TransposedVariableName.get -> string?
dymaptic.GeoBlazor.Core.Options.RasterIdentifyOptions.TransposedVariableName.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions
dymaptic.GeoBlazor.Core.Options.RequestOptions.AuthMode.get -> dymaptic.GeoBlazor.Core.Enums.AuthMode?
dymaptic.GeoBlazor.Core.Options.RequestOptions.AuthMode.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.Body.get -> string?
dymaptic.GeoBlazor.Core.Options.RequestOptions.Body.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.CacheBust.get -> bool?
dymaptic.GeoBlazor.Core.Options.RequestOptions.CacheBust.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.ElementReferenceBody.get -> Microsoft.AspNetCore.Components.ElementReference?
dymaptic.GeoBlazor.Core.Options.RequestOptions.ElementReferenceBody.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.Headers.get -> string?
dymaptic.GeoBlazor.Core.Options.RequestOptions.Headers.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.Method.get -> dymaptic.GeoBlazor.Core.Enums.RequestMethod?
dymaptic.GeoBlazor.Core.Options.RequestOptions.Method.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.ObjectCollectionBody.get -> System.Collections.Generic.Dictionary<string!, object?>?
dymaptic.GeoBlazor.Core.Options.RequestOptions.ObjectCollectionBody.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.Query.get -> System.Collections.Generic.Dictionary<string!, object?>?
dymaptic.GeoBlazor.Core.Options.RequestOptions.Query.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.RequestOptions(dymaptic.GeoBlazor.Core.Enums.AuthMode? AuthMode = null, bool? CacheBust = null, Microsoft.AspNetCore.Components.ElementReference? ElementReferenceBody = null, string? Headers = null, dymaptic.GeoBlazor.Core.Enums.RequestMethod? Method = null, System.Collections.Generic.Dictionary<string!, object?>? ObjectCollectionBody = null, System.Collections.Generic.Dictionary<string!, object?>? Query = null, dymaptic.GeoBlazor.Core.Enums.ResponseType? ResponseType = null, string? StringBody = null, long? Timeout = null, bool? UseProxy = null, bool? WithCredentials = null) -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.ResponseType.get -> dymaptic.GeoBlazor.Core.Enums.ResponseType?
dymaptic.GeoBlazor.Core.Options.RequestOptions.ResponseType.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.StringBody.get -> string?
dymaptic.GeoBlazor.Core.Options.RequestOptions.StringBody.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.Timeout.get -> long?
dymaptic.GeoBlazor.Core.Options.RequestOptions.Timeout.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.UseProxy.get -> bool?
dymaptic.GeoBlazor.Core.Options.RequestOptions.UseProxy.set -> void
dymaptic.GeoBlazor.Core.Options.RequestOptions.WithCredentials.get -> bool?
dymaptic.GeoBlazor.Core.Options.RequestOptions.WithCredentials.set -> void
dymaptic.GeoBlazor.Core.Options.ReshapeOptions
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.EdgeOperation.get -> string!
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.EdgeOperation.init -> void
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.ReshapeOptions(string! EdgeOperation, string! ShapeOperation, string! VertexOperation) -> void
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.ShapeOperation.get -> string!
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.ShapeOperation.init -> void
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.VertexOperation.get -> string!
dymaptic.GeoBlazor.Core.Options.ReshapeOptions.VertexOperation.init -> void
dymaptic.GeoBlazor.Core.Options.SlideUpdateFromOptions
dymaptic.GeoBlazor.Core.Options.SlideUpdateFromOptions.Screenshot.get -> dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot?
dymaptic.GeoBlazor.Core.Options.SlideUpdateFromOptions.Screenshot.set -> void
dymaptic.GeoBlazor.Core.Options.SlideUpdateFromOptions.SlideUpdateFromOptions(dymaptic.GeoBlazor.Core.Model.SlideUpdateFromOptionsScreenshot? Screenshot = null) -> void
dymaptic.GeoBlazor.Core.Options.SublayerGetFieldDomainOptions
dymaptic.GeoBlazor.Core.Options.SublayerGetFieldDomainOptions.Feature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Options.SublayerGetFieldDomainOptions.Feature.set -> void
dymaptic.GeoBlazor.Core.Options.SublayerGetFieldDomainOptions.SublayerGetFieldDomainOptions(dymaptic.GeoBlazor.Core.Components.Graphic? Feature = null) -> void
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.GdbVersion.get -> string?
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.GdbVersion.set -> void
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.GlobalIdUsed.get -> bool?
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.GlobalIdUsed.set -> void
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.ReturnEditMoment.get -> bool?
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.ReturnEditMoment.set -> void
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.ReturnServiceEditsOption.get -> dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption?
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.ReturnServiceEditsOption.set -> void
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.RollbackOnFailureEnabled.get -> bool?
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.RollbackOnFailureEnabled.set -> void
dymaptic.GeoBlazor.Core.Options.SubtypeSublayerApplyEditsOptions.SubtypeSublayerApplyEditsOptions(string? GdbVersion = null, bool? GlobalIdUsed = null, bool? ReturnEditMoment = null, dymaptic.GeoBlazor.Core.Enums.ReturnServiceEditsOption? ReturnServiceEditsOption = null, bool? RollbackOnFailureEnabled = null) -> void
dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions
dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions.Folder.get -> dymaptic.GeoBlazor.Core.Components.PortalFolder?
dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions.Folder.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions.IgnoreUnsupported.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions.IgnoreUnsupported.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapSaveAsOptions.WebMapSaveAsOptions(dymaptic.GeoBlazor.Core.Components.PortalFolder? Folder = null, bool? IgnoreUnsupported = null) -> void
dymaptic.GeoBlazor.Core.Options.WebMapSaveOptions
dymaptic.GeoBlazor.Core.Options.WebMapSaveOptions.IgnoreUnsupported.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapSaveOptions.IgnoreUnsupported.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapSaveOptions.WebMapSaveOptions(bool? IgnoreUnsupported = null) -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.BackgroundExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.BackgroundExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ScalePreserved.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ScalePreserved.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ThumbnailExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ThumbnailExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ThumbnailSize.get -> dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize?
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ThumbnailSize.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ViewpointExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.ViewpointExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.WebMapUpdateFromOptions(bool? BackgroundExcluded = null, bool? ScalePreserved = null, bool? ThumbnailExcluded = null, dymaptic.GeoBlazor.Core.Model.WebMapUpdateFromOptionsThumbnailSize? ThumbnailSize = null, bool? ViewpointExcluded = null, bool? WidgetsExcluded = null) -> void
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.WidgetsExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebMapUpdateFromOptions.WidgetsExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions
dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions.Folder.get -> dymaptic.GeoBlazor.Core.Components.PortalFolder?
dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions.Folder.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions.IgnoreUnsupported.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions.IgnoreUnsupported.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneSaveAsOptions.WebSceneSaveAsOptions(dymaptic.GeoBlazor.Core.Components.PortalFolder? Folder = null, bool? IgnoreUnsupported = null) -> void
dymaptic.GeoBlazor.Core.Options.WebSceneSaveOptions
dymaptic.GeoBlazor.Core.Options.WebSceneSaveOptions.IgnoreUnsupported.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebSceneSaveOptions.IgnoreUnsupported.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneSaveOptions.WebSceneSaveOptions(bool? IgnoreUnsupported = null) -> void
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.EnvironmentExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.EnvironmentExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.ThumbnailExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.ThumbnailExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.ThumbnailSize.get -> dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize?
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.ThumbnailSize.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.ViewpointExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.ViewpointExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.WebSceneUpdateFromOptions(bool? EnvironmentExcluded = null, bool? ThumbnailExcluded = null, dymaptic.GeoBlazor.Core.Model.WebSceneUpdateFromOptionsThumbnailSize? ThumbnailSize = null, bool? ViewpointExcluded = null, bool? WidgetsExcluded = null) -> void
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.WidgetsExcluded.get -> bool?
dymaptic.GeoBlazor.Core.Options.WebSceneUpdateFromOptions.WidgetsExcluded.set -> void
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetCapabilitiesOptions
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetCapabilitiesOptions.CustomParameters.get -> string?
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetCapabilitiesOptions.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetCapabilitiesOptions.WfsUtilsGetCapabilitiesOptions(string? CustomParameters = null) -> void
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetWFSLayerInfoOptions
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetWFSLayerInfoOptions.CustomParameters.get -> string?
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetWFSLayerInfoOptions.CustomParameters.set -> void
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetWFSLayerInfoOptions.SpatialReference.get -> string?
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetWFSLayerInfoOptions.SpatialReference.set -> void
dymaptic.GeoBlazor.Core.Options.WfsUtilsGetWFSLayerInfoOptions.WfsUtilsGetWFSLayerInfoOptions(string? CustomParameters = null, string? SpatialReference = null) -> void
dymaptic.GeoBlazor.Core.Results.AttachmentsQueryResult
dymaptic.GeoBlazor.Core.Results.AttachmentsQueryResult.AttachmentsQueryResult() -> void
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.DeleteItemsResult(dymaptic.GeoBlazor.Core.Model.Error? Error = null, dymaptic.GeoBlazor.Core.Components.PortalItem? Item = null, bool? Success = null) -> void
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.Error.get -> dymaptic.GeoBlazor.Core.Model.Error?
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.Error.init -> void
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.Item.get -> dymaptic.GeoBlazor.Core.Components.PortalItem?
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.Item.init -> void
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.Success.get -> bool?
dymaptic.GeoBlazor.Core.Results.DeleteItemsResult.Success.init -> void
dymaptic.GeoBlazor.Core.Results.EditedFeatureResult
dymaptic.GeoBlazor.Core.Results.EditedFeatureResult.EditedFeatureResult(long? LayerId = null, dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures? EditedFeatures = null) -> void
dymaptic.GeoBlazor.Core.Results.EditedFeatureResult.EditedFeatures.get -> dymaptic.GeoBlazor.Core.Model.EditedFeatureResultEditedFeatures?
dymaptic.GeoBlazor.Core.Results.EditedFeatureResult.EditedFeatures.init -> void
dymaptic.GeoBlazor.Core.Results.EditedFeatureResult.LayerId.get -> long?
dymaptic.GeoBlazor.Core.Results.EditedFeatureResult.LayerId.init -> void
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.ElevationQueryResult(dymaptic.GeoBlazor.Core.Components.Geometries.Geometry? Geometry = null, double? NoDataValue = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo!>? SampleInfo = null) -> void
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.Geometry.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Geometry?
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.Geometry.init -> void
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.NoDataValue.get -> double?
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.NoDataValue.init -> void
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.SampleInfo.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.ElevationQueryResultSampleInfo!>?
dymaptic.GeoBlazor.Core.Results.ElevationQueryResult.SampleInfo.init -> void
dymaptic.GeoBlazor.Core.Results.ExtentQueryResult
dymaptic.GeoBlazor.Core.Results.ExtentQueryResult.Count.get -> int
dymaptic.GeoBlazor.Core.Results.ExtentQueryResult.Count.init -> void
dymaptic.GeoBlazor.Core.Results.ExtentQueryResult.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Results.ExtentQueryResult.Extent.init -> void
dymaptic.GeoBlazor.Core.Results.ExtentQueryResult.ExtentQueryResult(int Count, dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent) -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditResult
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.Error.get -> dymaptic.GeoBlazor.Core.Model.FeatureEditResultError?
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.Error.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.FeatureEditResult(dymaptic.GeoBlazor.Core.Model.ObjectId? ObjectId = null, string? GlobalId = null, dymaptic.GeoBlazor.Core.Model.FeatureEditResultError? Error = null) -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.GlobalId.get -> string?
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.GlobalId.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.ObjectId.get -> dymaptic.GeoBlazor.Core.Model.ObjectId?
dymaptic.GeoBlazor.Core.Results.FeatureEditResult.ObjectId.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.AddAttachmentResults.get -> dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.AddAttachmentResults.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.AddFeatureResults.get -> dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.AddFeatureResults.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.Concat(dymaptic.GeoBlazor.Core.Results.FeatureEditsResult? other) -> dymaptic.GeoBlazor.Core.Results.FeatureEditsResult!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.DeleteAttachmentResults.get -> dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.DeleteAttachmentResults.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.DeleteFeatureResults.get -> dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.DeleteFeatureResults.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.EditedFeatureResults.get -> dymaptic.GeoBlazor.Core.Results.EditedFeatureResult![]?
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.EditedFeatureResults.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.EditMoment.get -> long?
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.EditMoment.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.FeatureEditsResult(dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]! AddFeatureResults, dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]! UpdateFeatureResults, dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]! DeleteFeatureResults, dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]! AddAttachmentResults, dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]! UpdateAttachmentResults, dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]! DeleteAttachmentResults, dymaptic.GeoBlazor.Core.Results.EditedFeatureResult![]? EditedFeatureResults = null, long? EditMoment = null) -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.UpdateAttachmentResults.get -> dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.UpdateAttachmentResults.init -> void
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.UpdateFeatureResults.get -> dymaptic.GeoBlazor.Core.Results.FeatureEditResult![]!
dymaptic.GeoBlazor.Core.Results.FeatureEditsResult.UpdateFeatureResults.init -> void
dymaptic.GeoBlazor.Core.Results.FetchItemsResult
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.FetchItemsResult(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.PortalItem!>? Items = null, double? NextStart = null, double? Total = null) -> void
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.Items.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.PortalItem!>?
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.Items.init -> void
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.NextStart.get -> double?
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.NextStart.init -> void
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.Total.get -> double?
dymaptic.GeoBlazor.Core.Results.FetchItemsResult.Total.init -> void
dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult
dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult.AllGraphicsPromise.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>?
dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult.AllGraphicsPromise.init -> void
dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult.FetchPopupFeaturesResult(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Components.Graphic!>? AllGraphicsPromise = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? Location = null) -> void
dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Results.FetchPopupFeaturesResult.Location.init -> void
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.FetchResourcesResult(double? NextStart = null, System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.FetchResource!>? Resources = null, double? Total = null) -> void
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.NextStart.get -> double?
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.NextStart.init -> void
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.Resources.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.FetchResource!>?
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.Resources.init -> void
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.Total.get -> double?
dymaptic.GeoBlazor.Core.Results.FetchResourcesResult.Total.init -> void
dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult
dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult.Distance.get -> double
dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult.Distance.init -> void
dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult.GroundIntersectionResult(dymaptic.GeoBlazor.Core.Components.Geometries.Point! MapPoint, double Distance) -> void
dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult.MapPoint.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point!
dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult.MapPoint.init -> void
dymaptic.GeoBlazor.Core.Results.HitTestResult
dymaptic.GeoBlazor.Core.Results.HitTestResult.Ground.get -> dymaptic.GeoBlazor.Core.Results.GroundIntersectionResult?
dymaptic.GeoBlazor.Core.Results.HitTestResult.Ground.init -> void
dymaptic.GeoBlazor.Core.Results.HitTestResult.HitTestResult(dymaptic.GeoBlazor.Core.Model.ScreenPoint! ScreenPoint) -> void
dymaptic.GeoBlazor.Core.Results.HitTestResult.Results.get -> dymaptic.GeoBlazor.Core.Results.ViewHit![]!
dymaptic.GeoBlazor.Core.Results.HitTestResult.Results.set -> void
dymaptic.GeoBlazor.Core.Results.HitTestResult.ScreenPoint.get -> dymaptic.GeoBlazor.Core.Model.ScreenPoint!
dymaptic.GeoBlazor.Core.Results.HitTestResult.ScreenPoint.init -> void
dymaptic.GeoBlazor.Core.Results.NearestPointResult
dymaptic.GeoBlazor.Core.Results.NearestPointResult.Coordinate.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point!
dymaptic.GeoBlazor.Core.Results.NearestPointResult.Coordinate.set -> void
dymaptic.GeoBlazor.Core.Results.NearestPointResult.Distance.get -> double
dymaptic.GeoBlazor.Core.Results.NearestPointResult.Distance.set -> void
dymaptic.GeoBlazor.Core.Results.NearestPointResult.IsEmpty.get -> bool
dymaptic.GeoBlazor.Core.Results.NearestPointResult.IsEmpty.set -> void
dymaptic.GeoBlazor.Core.Results.NearestPointResult.VertexIndex.get -> int
dymaptic.GeoBlazor.Core.Results.NearestPointResult.VertexIndex.set -> void
dymaptic.GeoBlazor.Core.Results.PortalQueryResult
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.NextQueryParams.get -> dymaptic.GeoBlazor.Core.Model.PortalQueryParams?
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.NextQueryParams.init -> void
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.PortalQueryResult(dymaptic.GeoBlazor.Core.Model.PortalQueryParams? NextQueryParams = null, dymaptic.GeoBlazor.Core.Model.PortalQueryParams? QueryParams = null, System.Collections.Generic.IReadOnlyCollection<string!>? Results = null, double? Total = null) -> void
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.QueryParams.get -> dymaptic.GeoBlazor.Core.Model.PortalQueryParams?
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.QueryParams.init -> void
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.Results.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.Results.init -> void
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.Total.get -> double?
dymaptic.GeoBlazor.Core.Results.PortalQueryResult.Total.init -> void
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.DataSeries.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterSliceValue!>?
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.DataSeries.init -> void
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.Location.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point?
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.Location.init -> void
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.ProcessedValue.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.ProcessedValue.init -> void
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.RasterIdentifyResult(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Model.RasterSliceValue!>? DataSeries = null, dymaptic.GeoBlazor.Core.Components.Geometries.Point? Location = null, System.Collections.Generic.IReadOnlyCollection<double>? ProcessedValue = null, System.Collections.Generic.IReadOnlyCollection<double>? Value = null) -> void
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.Value.get -> System.Collections.Generic.IReadOnlyCollection<double>?
dymaptic.GeoBlazor.Core.Results.RasterIdentifyResult.Value.init -> void
dymaptic.GeoBlazor.Core.Results.RelatedFeaturesCountQueryResult
dymaptic.GeoBlazor.Core.Results.RelatedFeaturesCountQueryResult.RelatedFeaturesCountQueryResult() -> void
dymaptic.GeoBlazor.Core.Results.RelatedFeaturesQueryResult
dymaptic.GeoBlazor.Core.Results.RelatedFeaturesQueryResult.RelatedFeaturesQueryResult() -> void
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResult!>?
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.SearchCompleteEventResults(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResult!>? Results = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SearchCompleteEventResults.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResponseResults
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResult!>?
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.SearchResponseResults(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResult!>? Results = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SearchResponseResults.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResult
dymaptic.GeoBlazor.Core.Results.SearchResult.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Results.SearchResult.Extent.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResult.Feature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Results.SearchResult.Feature.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResult.Name.get -> string?
dymaptic.GeoBlazor.Core.Results.SearchResult.Name.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResult.SearchResult(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, dymaptic.GeoBlazor.Core.Components.Graphic? Feature = null, string? Name = null, dymaptic.GeoBlazor.Core.Components.Graphic? Target = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchResult.Target.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Results.SearchResult.Target.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResultResponse
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.Results.get -> dymaptic.GeoBlazor.Core.Results.SearchResult![]!
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.SearchResultResponse(dymaptic.GeoBlazor.Core.Results.SearchResult![]! Results, dymaptic.GeoBlazor.Core.Components.SearchSource! Source, int SourceIndex) -> void
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource!
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.SourceIndex.get -> int
dymaptic.GeoBlazor.Core.Results.SearchResultResponse.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.SearchSuggestCompleteEventResults(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResult!>? Results = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SearchSuggestCompleteEventResults.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResult!>?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.SearchViewModelSearchCompleteEventResults(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SearchResult!>? Results = null, System.Collections.Generic.IReadOnlyCollection<string!>? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.Source.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchCompleteEventResults.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.Extent.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.Feature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.Feature.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.Name.get -> string?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.Name.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSearchResult.SearchViewModelSearchResult(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, dymaptic.GeoBlazor.Core.Components.Graphic? Feature = null, string? Name = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.Extent.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Extent?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.Extent.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.Feature.get -> dymaptic.GeoBlazor.Core.Components.Graphic?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.Feature.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.Name.get -> string?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.Name.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSelectResultEventResult.SearchViewModelSelectResultEventResult(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? Extent = null, dymaptic.GeoBlazor.Core.Components.Graphic? Feature = null, string? Name = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.SearchViewModelSuggestCompleteEventResults(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResult!>? Results = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SearchViewModelSuggestCompleteEventResults.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestionResult
dymaptic.GeoBlazor.Core.Results.SuggestionResult.IsCollection.get -> bool
dymaptic.GeoBlazor.Core.Results.SuggestionResult.IsCollection.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestionResult.MagicKey.get -> string!
dymaptic.GeoBlazor.Core.Results.SuggestionResult.MagicKey.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestionResult.SuggestionResult(bool IsCollection, string! MagicKey, string! Text) -> void
dymaptic.GeoBlazor.Core.Results.SuggestionResult.Text.get -> string!
dymaptic.GeoBlazor.Core.Results.SuggestionResult.Text.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.Results.get -> System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResult!>?
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.Results.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.Source.get -> dymaptic.GeoBlazor.Core.Components.SearchSource?
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.Source.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestResponseResults.SuggestResponseResults(System.Collections.Generic.IReadOnlyCollection<dymaptic.GeoBlazor.Core.Results.SuggestResult!>? Results = null, dymaptic.GeoBlazor.Core.Components.SearchSource? Source = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SuggestResult
dymaptic.GeoBlazor.Core.Results.SuggestResult.Key.get -> string?
dymaptic.GeoBlazor.Core.Results.SuggestResult.Key.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestResult.SourceIndex.get -> int?
dymaptic.GeoBlazor.Core.Results.SuggestResult.SourceIndex.init -> void
dymaptic.GeoBlazor.Core.Results.SuggestResult.SuggestResult(string? Key = null, string? Text = null, int? SourceIndex = null) -> void
dymaptic.GeoBlazor.Core.Results.SuggestResult.Text.get -> string?
dymaptic.GeoBlazor.Core.Results.SuggestResult.Text.init -> void
dymaptic.GeoBlazor.Core.Results.ViewHit
dymaptic.GeoBlazor.Core.Results.ViewHit.MapPoint.get -> dymaptic.GeoBlazor.Core.Components.Geometries.Point!
dymaptic.GeoBlazor.Core.Results.ViewHit.MapPoint.init -> void
dymaptic.GeoBlazor.Core.Results.ViewHit.Type.get -> string!
dymaptic.GeoBlazor.Core.Results.ViewHit.Type.init -> void
dymaptic.GeoBlazor.Core.Results.ViewHit.ViewHit(string! Type, dymaptic.GeoBlazor.Core.Components.Geometries.Point! MapPoint) -> void
dymaptic.GeoBlazor.Core.Serialization.DrawingToolStringConverter
dymaptic.GeoBlazor.Core.Serialization.DrawingToolStringConverter.DrawingToolStringConverter() -> void
dymaptic.GeoBlazor.Core.Serialization.EnumToKebabCaseStringConverter<T>
dymaptic.GeoBlazor.Core.Serialization.EnumToKebabCaseStringConverter<T>.EnumToKebabCaseStringConverter() -> void
dymaptic.GeoBlazor.Core.Serialization.LabelPlacementStringConverter
dymaptic.GeoBlazor.Core.Serialization.LabelPlacementStringConverter.LabelPlacementStringConverter() -> void
override dymaptic.GeoBlazor.Core.Components.ActionBase.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ActionButton.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.ActionToggle.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ActiveLayerInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AggregateField.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AggregateField.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AggregateField.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AlgorithmicColorRamp.Type.get -> dymaptic.GeoBlazor.Core.Enums.ColorRampType
override dymaptic.GeoBlazor.Core.Components.ApplicationProperties.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ApplicationProperties.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ApplicationProperties.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilities.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModelMeasurement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AuthoringInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AuthoringInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AuthoringInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AuthoringInfoField.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.AuthoringInfoVisualVariable.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BarChartMediaInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BarcodeScannerInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.Basemap.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Basemap.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Basemap.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Basemap.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Basemap.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Basemap.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Basemap.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BasemapGalleryItem.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BasemapStyle.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BasemapToggleViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Bookmark.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Bookmark.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Bookmark.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BookmarkOptionsScreenshotSettings.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.BookmarksViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Camera.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Camera.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Camera.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Capabilities.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Capabilities.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Capabilities.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ChartMediaInfoValue.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.CodedValueDomain<T>.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.ColorRampElement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ColorRampElement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ColorRampElement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ColorStop.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ColorVariable.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.ColorVariable.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ColorVariable.Type.get -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
override dymaptic.GeoBlazor.Core.Components.ColorVariable.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.ColorVariable.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ColorVariable.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ColumnChartMediaInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ComboBoxInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.Constraints.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Constraints.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Constraints.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.CSVLayerElevationInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.CSVLayerView.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.CSVLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.CSVLayerView.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.CSVLayerView.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.DateTimePickerInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModelMeasurement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.DynamicDataLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.DynamicMapLayer.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.Environment.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Environment.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Environment.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.FeatureEffect.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeatureEffect.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeatureEffect.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeatureLayerBaseElevationInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.FeatureLayerView.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeatureLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.FeatureLayerView.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeatureLayerView.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Field.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Field.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Field.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.FieldInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FieldInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.FieldInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerElevationInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GeoJSONLayerView.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Geometries.Extent.Type.get -> dymaptic.GeoBlazor.Core.Enums.GeometryType
override dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Geometries.Geometry.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Geometries.Point.Type.get -> dymaptic.GeoBlazor.Core.Enums.GeometryType
override dymaptic.GeoBlazor.Core.Components.Geometries.Polygon.Type.get -> dymaptic.GeoBlazor.Core.Enums.GeometryType
override dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.Type.get -> dymaptic.GeoBlazor.Core.Enums.GeometryType
override dymaptic.GeoBlazor.Core.Components.GeometryEngine.ComponentName.get -> string!
override dymaptic.GeoBlazor.Core.Components.GeoRSSLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.Graphic.DisposeAsync() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Graphic.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Components.Graphic.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Components.Graphic.OnAfterRenderAsync(bool firstRender) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Graphic.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Graphic.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Graphic.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Graphic.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerElevationInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.GraphicsLayerView.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.HeatmapRampElement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.HomeViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.HomeViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.HomeViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ImageMediaInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ImageryLayerView.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ImageryLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.ImageryLayerView.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ImageryLayerView.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.InheritedDomain.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.InitialViewProperties.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.InitialViewProperties.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.InitialViewProperties.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
override dymaptic.GeoBlazor.Core.Components.JoinTableDataSource.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.KMLLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.KMLLayerViewMapImage.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.KMLSublayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.KMLSublayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.KMLSublayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Label.OnAfterRenderAsync(bool firstRender) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Label.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Label.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Label.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.BaseTileLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.BingMapsLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.CSVLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.FeatureLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.GeoRSSLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.GraphicsLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.ImageryTileLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.KMLLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.DisposeAsync() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnAfterRenderAsync(bool firstRender) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.OnJsComponentCreated(Microsoft.JSInterop.IJSObjectReference! jsComponentReference, Microsoft.JSInterop.IJSStreamReference! jsonStreamReference) -> System.Threading.Tasks.ValueTask<dymaptic.GeoBlazor.Core.Components.MapComponent?>
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.Layer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.MapImageLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.OpenStreetMapLayer.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? extent) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.OpenStreetMapLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.Sublayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.TileLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.UnknownLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.UnsupportedLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WCSLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WebTileLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.WFSLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WMSLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType
override dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Layers.WMTSLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LayerSearchSource.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.LayerSearchSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.SearchSourceType
override dymaptic.GeoBlazor.Core.Components.LayerSearchSource.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.LayerSearchSource.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LayerSearchSource.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LegendViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LegendViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LegendViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LineChartMediaInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.ListItem.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ListItem.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.ListItem.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LocalBasemapsSource.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LocateViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LocateViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.LocateViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.LocationService.ComponentName.get -> string!
override dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.SearchSourceType
override dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Map.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Map.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Map.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.MapComponent.OnAfterRenderAsync(bool firstRender) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.MapComponent.OnInitializedAsync() -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.MapComponent.OnParametersSet() -> void
override dymaptic.GeoBlazor.Core.Components.MapComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.MapComponent.ShouldRender() -> bool
override dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.MultidimensionalSubset.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.Type.get -> dymaptic.GeoBlazor.Core.Enums.ColorRampType
override dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.MultipartColorRamp.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.OpacityRampElement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.OpacityRampElement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.OpacityRampElement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.OpacityVariable.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.OpacityVariable.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.OpacityVariable.Type.get -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
override dymaptic.GeoBlazor.Core.Components.OpacityVariable.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.OpacityVariable.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.OpacityVariable.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PieChartMediaInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PixelBlock.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PixelBlock.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PixelBlock.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PixelData.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PixelData.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PixelData.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
override dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.AttachmentsPopupContent.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
override dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
override dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.FieldsPopupContent.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
override dymaptic.GeoBlazor.Core.Components.Popups.MediaPopupContent.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.PopupDockOptions.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Popups.PopupTemplate.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Popups.RelationshipPopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
override dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.Type.get -> dymaptic.GeoBlazor.Core.Enums.PopupContentType
override dymaptic.GeoBlazor.Core.Components.Portal.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Portal.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Portal.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalBasemapsSource.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PortalFolder.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalFolder.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalFolder.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PortalItem.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalItem.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalItem.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.PortalUser.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalUser.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.PortalUser.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Position.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Position.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Position.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
override dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.QueryTableDataSource.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.RadioButtonsInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.RangeDomain.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.RasterDataSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
override dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Renderers.DefaultSymbol.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.Renderer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.Type.get -> dymaptic.GeoBlazor.Core.Enums.RendererType
override dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.Type.get -> dymaptic.GeoBlazor.Core.Enums.RendererType
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.RotationVariable.Type.get -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
override dymaptic.GeoBlazor.Core.Components.Search.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Search.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Search.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SearchLayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchLayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchLayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SearchSource.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.SearchSource.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchSource.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.SearchSource.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchSource.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SearchTable.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchTable.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchTable.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SearchViewModel.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchViewModel.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SearchViewModel.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SizeRampElement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SizeRampElement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SizeRampElement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SizeRampStop.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SizeRampStop.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SizeRampStop.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SizeVariable.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.SizeVariable.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SizeVariable.Type.get -> dymaptic.GeoBlazor.Core.Enums.VisualVariableType
override dymaptic.GeoBlazor.Core.Components.SizeVariable.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.SizeVariable.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SizeVariable.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Slide.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Slide.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Slide.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SnappingOptions.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SnappingOptions.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.SnappingOptions.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SpatialReference.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Components.SpatialReference.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Components.SpatialReference.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.SwitchInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Symbols.FillSymbol.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
override dymaptic.GeoBlazor.Core.Components.Symbols.PictureFillSymbol.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
override dymaptic.GeoBlazor.Core.Components.Symbols.PictureMarkerSymbol.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleFillSymbol.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleLineSymbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Symbols.SimpleMarkerSymbol.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Symbols.SymbolTableElement.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.Type.get -> dymaptic.GeoBlazor.Core.Enums.SymbolType
override dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.TableDataSource.Type.get -> dymaptic.GeoBlazor.Core.Enums.DynamicDataSourceType
override dymaptic.GeoBlazor.Core.Components.TextAreaInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.TextBoxInput.Type.get -> string!
override dymaptic.GeoBlazor.Core.Components.TileInfo.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.TileInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TileInfo.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.TileInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TileInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.TileMatrixSet.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TileMatrixSet.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TileMatrixSet.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.TimeExtent.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Components.TimeExtent.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Components.TimeInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TimeInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TimeInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.TrackInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TrackInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TrackInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.TrackPartInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TrackPartInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.TrackPartInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.UniqueValueClass.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.UniqueValueClass.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.UniqueValueClass.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.UniqueValueGroup.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Viewing.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Viewing.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Viewing.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Viewpoint.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Viewpoint.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Viewpoint.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Views.MapView.DisposeAsync() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Views.MapView.OnAfterRenderAsync(bool firstRender) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.MapView.OnParametersSetAsync() -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.MapView.Refresh() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Views.MapView.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.MapView.RenderView(bool forceRender = false) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.MapView.ShouldRender() -> bool
override dymaptic.GeoBlazor.Core.Components.Views.MapView.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.MapView.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.BuildMapView() -> System.Threading.Tasks.ValueTask
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.GoTo(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.OnJavascriptExtentChanged(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, dymaptic.GeoBlazor.Core.Components.Geometries.Point? center, double zoom, double scale, double? rotation = null, double? tilt = null) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.SetCenter(dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.SetExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.SetScale(double scale) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.SetZoom(double zoom) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Views.SceneView.UpdateView() -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.VisualVariable.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.VisualVariable.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.VisualVariable.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebMap.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.WebMap.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebMap.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.WebMap.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebMap.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebMap.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebMapWidgets.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebMapWidgets.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebMapWidgets.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebScene.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.WebScene.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebScene.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.WebScene.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebScene.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebScene.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebsceneApplicationProperties.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WebsceneInitialViewProperties.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WFSLayerElevationInfo.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WFSLayerView.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WFSLayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
override dymaptic.GeoBlazor.Core.Components.WFSLayerView.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WFSLayerView.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.AreaMeasurement2DWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapGalleryWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapLayerListWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.ValidateRequiredChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.BasemapToggleWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.BookmarksWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.CompassWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.DistanceMeasurement2DWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.Hidden.get -> bool
override dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.ExpandWidget.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.HomeWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LayerListWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.ListItemPanelWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.LocateWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.MeasurementWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.PopupWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.ScaleBarWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.SearchWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.SliderWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.Widgets.Widget.OnAfterRenderAsync(bool firstRender) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.Widget.OnJsComponentCreated(Microsoft.JSInterop.IJSObjectReference! jsComponentReference, Microsoft.JSInterop.IJSStreamReference! jsonStreamReference) -> System.Threading.Tasks.ValueTask<dymaptic.GeoBlazor.Core.Components.MapComponent?>
override dymaptic.GeoBlazor.Core.Components.Widgets.Widget.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) -> System.Threading.Tasks.Task!
override dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.Type.get -> dymaptic.GeoBlazor.Core.Enums.WidgetType
override dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.Widgets.ZoomWidget.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WMSSublayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WMSSublayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WMSSublayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Components.WMTSSublayer.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WMTSSublayer.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
override dymaptic.GeoBlazor.Core.Components.WMTSSublayer.ValidateRequiredGeneratedChildren() -> void
override dymaptic.GeoBlazor.Core.Model.AttributesDictionary.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Model.AttributesDictionary.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Model.Dimension.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Model.Dimension.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Model.MapColor.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Model.MapColor.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Model.MapPath.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Model.MapPath.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Model.MapPoint.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Model.MapPoint.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Model.ObjectId.Equals(object? obj) -> bool
override dymaptic.GeoBlazor.Core.Model.ObjectId.GetHashCode() -> int
override dymaptic.GeoBlazor.Core.Model.ObjectId.ToString() -> string!
override dymaptic.GeoBlazor.Core.Model.ProjectionEngine.ComponentName.get -> string!
override dymaptic.GeoBlazor.Core.Serialization.DrawingToolStringConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> dymaptic.GeoBlazor.Core.Enums.DrawingTool
override dymaptic.GeoBlazor.Core.Serialization.EnumToKebabCaseStringConverter<T>.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> T
override dymaptic.GeoBlazor.Core.Serialization.EnumToKebabCaseStringConverter<T>.Write(System.Text.Json.Utf8JsonWriter! writer, T value, System.Text.Json.JsonSerializerOptions! options) -> void
override dymaptic.GeoBlazor.Core.Serialization.LabelPlacementStringConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> dymaptic.GeoBlazor.Core.Enums.LabelPlacement
readonly dymaptic.GeoBlazor.Core.Components.MapComponent.CancellationTokenSource -> System.Threading.CancellationTokenSource!
readonly dymaptic.GeoBlazor.Core.Model.FieldsIndex.CancellationTokenSource -> System.Threading.CancellationTokenSource!
readonly dymaptic.GeoBlazor.Core.Model.Ground.CancellationTokenSource -> System.Threading.CancellationTokenSource!
readonly dymaptic.GeoBlazor.Core.Model.LogicComponent.AuthenticationManager -> dymaptic.GeoBlazor.Core.Model.AuthenticationManager!
readonly dymaptic.GeoBlazor.Core.Model.LogicComponent.CancellationTokenSource -> System.Threading.CancellationTokenSource!
readonly dymaptic.GeoBlazor.Core.Model.PortalGroup.CancellationTokenSource -> System.Threading.CancellationTokenSource!
readonly dymaptic.GeoBlazor.Core.Model.PortalItemResource.CancellationTokenSource -> System.Threading.CancellationTokenSource!
static dymaptic.GeoBlazor.Core.Components.Graphic.operator !=(dymaptic.GeoBlazor.Core.Components.Graphic? left, dymaptic.GeoBlazor.Core.Components.Graphic? right) -> bool
static dymaptic.GeoBlazor.Core.Components.Graphic.operator ==(dymaptic.GeoBlazor.Core.Components.Graphic? left, dymaptic.GeoBlazor.Core.Components.Graphic? right) -> bool
static dymaptic.GeoBlazor.Core.Components.MapComponent.ProNotFound -> bool
static dymaptic.GeoBlazor.Core.Components.NoData.implicit operator dymaptic.GeoBlazor.Core.Components.NoData!(long pixelValue) -> dymaptic.GeoBlazor.Core.Components.NoData!
static dymaptic.GeoBlazor.Core.Components.NoData.implicit operator dymaptic.GeoBlazor.Core.Components.NoData!(long[]! pixelValueArray) -> dymaptic.GeoBlazor.Core.Components.NoData!
static dymaptic.GeoBlazor.Core.Components.NoData.implicit operator dymaptic.GeoBlazor.Core.Components.NoData!(System.Collections.Generic.List<long>! pixelValueList) -> dymaptic.GeoBlazor.Core.Components.NoData!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!((long, long) valueTuple) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!((long, long)[]! valueTupleArray) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!(long[]! valueArray) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!(long[]![]! valueArray) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!(System.Collections.Generic.List<(long, long)>! valueTupleList) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!(System.Collections.Generic.List<long>! valueList) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues.implicit operator dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!(System.Collections.Generic.List<System.Collections.Generic.List<long>!>! valueList) -> dymaptic.GeoBlazor.Core.Components.Renderers.DimensionalDefinitionValues!
static dymaptic.GeoBlazor.Core.Components.SpatialReference.operator !=(dymaptic.GeoBlazor.Core.Components.SpatialReference? left, dymaptic.GeoBlazor.Core.Components.SpatialReference? right) -> bool
static dymaptic.GeoBlazor.Core.Components.SpatialReference.operator ==(dymaptic.GeoBlazor.Core.Components.SpatialReference? left, dymaptic.GeoBlazor.Core.Components.SpatialReference? right) -> bool
static dymaptic.GeoBlazor.Core.Components.SpatialReference.WebMercator.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference!
static dymaptic.GeoBlazor.Core.Components.SpatialReference.Wgs84.get -> dymaptic.GeoBlazor.Core.Components.SpatialReference!
static dymaptic.GeoBlazor.Core.Components.TimeExtent.operator !=(dymaptic.GeoBlazor.Core.Components.TimeExtent? left, dymaptic.GeoBlazor.Core.Components.TimeExtent? right) -> bool
static dymaptic.GeoBlazor.Core.Components.TimeExtent.operator ==(dymaptic.GeoBlazor.Core.Components.TimeExtent? left, dymaptic.GeoBlazor.Core.Components.TimeExtent? right) -> bool
static dymaptic.GeoBlazor.Core.DependencyExtension.AddGeoBlazor(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, Microsoft.Extensions.Configuration.IConfiguration? configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static dymaptic.GeoBlazor.Core.Model.AttributesDictionary.explicit operator System.Collections.Generic.Dictionary<string!, object?>!(dymaptic.GeoBlazor.Core.Model.AttributesDictionary! attributesDictionary) -> System.Collections.Generic.Dictionary<string!, object?>!
static dymaptic.GeoBlazor.Core.Model.AttributesDictionary.operator !=(dymaptic.GeoBlazor.Core.Model.AttributesDictionary? left, dymaptic.GeoBlazor.Core.Model.AttributesDictionary? right) -> bool
static dymaptic.GeoBlazor.Core.Model.AttributesDictionary.operator ==(dymaptic.GeoBlazor.Core.Model.AttributesDictionary! left, dymaptic.GeoBlazor.Core.Model.AttributesDictionary! right) -> bool
static dymaptic.GeoBlazor.Core.Model.Dimension.explicit operator double?(dymaptic.GeoBlazor.Core.Model.Dimension? dimension) -> double?
static dymaptic.GeoBlazor.Core.Model.Dimension.explicit operator dymaptic.GeoBlazor.Core.Model.Dimension?(double? nullableDoubleVal) -> dymaptic.GeoBlazor.Core.Model.Dimension?
static dymaptic.GeoBlazor.Core.Model.Dimension.implicit operator double(dymaptic.GeoBlazor.Core.Model.Dimension! dimension) -> double
static dymaptic.GeoBlazor.Core.Model.Dimension.implicit operator dymaptic.GeoBlazor.Core.Model.Dimension!(double doubleVal) -> dymaptic.GeoBlazor.Core.Model.Dimension!
static dymaptic.GeoBlazor.Core.Model.Dimension.implicit operator dymaptic.GeoBlazor.Core.Model.Dimension!(int intVal) -> dymaptic.GeoBlazor.Core.Model.Dimension!
static dymaptic.GeoBlazor.Core.Model.Dimension.implicit operator dymaptic.GeoBlazor.Core.Model.Dimension!(string! stringVal) -> dymaptic.GeoBlazor.Core.Model.Dimension!
static dymaptic.GeoBlazor.Core.Model.Dimension.operator !=(dymaptic.GeoBlazor.Core.Model.Dimension? left, dymaptic.GeoBlazor.Core.Model.Dimension? right) -> bool
static dymaptic.GeoBlazor.Core.Model.Dimension.operator ==(dymaptic.GeoBlazor.Core.Model.Dimension? left, dymaptic.GeoBlazor.Core.Model.Dimension? right) -> bool
static dymaptic.GeoBlazor.Core.Model.Effect.implicit operator dymaptic.GeoBlazor.Core.Model.Effect!(string! stringVal) -> dymaptic.GeoBlazor.Core.Model.Effect!
static dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.implicit operator dymaptic.GeoBlazor.Core.Components.Widgets.Widget?(dymaptic.GeoBlazor.Core.Model.ListItemPanelContent! itemPanelContent) -> dymaptic.GeoBlazor.Core.Components.Widgets.Widget?
static dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.implicit operator dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!(dymaptic.GeoBlazor.Core.Components.Widgets.Widget! widgetContent) -> dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!
static dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.implicit operator dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!(Microsoft.AspNetCore.Components.ElementReference htmlElementContent) -> dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!
static dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.implicit operator dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!(string! stringContent) -> dymaptic.GeoBlazor.Core.Model.ListItemPanelContent!
static dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.implicit operator Microsoft.AspNetCore.Components.ElementReference?(dymaptic.GeoBlazor.Core.Model.ListItemPanelContent! itemPanelContent) -> Microsoft.AspNetCore.Components.ElementReference?
static dymaptic.GeoBlazor.Core.Model.ListItemPanelContent.implicit operator string?(dymaptic.GeoBlazor.Core.Model.ListItemPanelContent! itemPanelContent) -> string?
static dymaptic.GeoBlazor.Core.Model.MapColor.BlendColors(dymaptic.GeoBlazor.Core.Model.MapColor! start, dymaptic.GeoBlazor.Core.Model.MapColor! end, double weight) -> dymaptic.GeoBlazor.Core.Model.MapColor?
static dymaptic.GeoBlazor.Core.Model.MapColor.operator !=(dymaptic.GeoBlazor.Core.Model.MapColor? left, dymaptic.GeoBlazor.Core.Model.MapColor? right) -> bool
static dymaptic.GeoBlazor.Core.Model.MapColor.operator ==(dymaptic.GeoBlazor.Core.Model.MapColor? left, dymaptic.GeoBlazor.Core.Model.MapColor? right) -> bool
static dymaptic.GeoBlazor.Core.Model.MapPath.implicit operator dymaptic.GeoBlazor.Core.Model.MapPath!(double[]![]! p) -> dymaptic.GeoBlazor.Core.Model.MapPath!
static dymaptic.GeoBlazor.Core.Model.MapPath.implicit operator dymaptic.GeoBlazor.Core.Model.MapPath!(dymaptic.GeoBlazor.Core.Model.MapPoint![]! p) -> dymaptic.GeoBlazor.Core.Model.MapPath!
static dymaptic.GeoBlazor.Core.Model.MapPath.implicit operator dymaptic.GeoBlazor.Core.Model.MapPath!(System.Collections.Generic.List<System.Collections.Generic.List<double>!>! p) -> dymaptic.GeoBlazor.Core.Model.MapPath!
static dymaptic.GeoBlazor.Core.Model.MapPoint.implicit operator dymaptic.GeoBlazor.Core.Model.MapPoint!(double[]! p) -> dymaptic.GeoBlazor.Core.Model.MapPoint!
static dymaptic.GeoBlazor.Core.Model.ObjectId.implicit operator dymaptic.GeoBlazor.Core.Model.ObjectId!(long numericVal) -> dymaptic.GeoBlazor.Core.Model.ObjectId!
static dymaptic.GeoBlazor.Core.Model.ObjectId.implicit operator dymaptic.GeoBlazor.Core.Model.ObjectId!(string! stringVal) -> dymaptic.GeoBlazor.Core.Model.ObjectId!
static dymaptic.GeoBlazor.Core.Model.ObjectId.implicit operator long(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> long
static dymaptic.GeoBlazor.Core.Model.ObjectId.implicit operator string!(dymaptic.GeoBlazor.Core.Model.ObjectId! objectId) -> string!
static dymaptic.GeoBlazor.Core.Model.ObjectId.operator !=(dymaptic.GeoBlazor.Core.Model.ObjectId? left, dymaptic.GeoBlazor.Core.Model.ObjectId? right) -> bool
static dymaptic.GeoBlazor.Core.Model.ObjectId.operator ==(dymaptic.GeoBlazor.Core.Model.ObjectId? left, dymaptic.GeoBlazor.Core.Model.ObjectId? right) -> bool
virtual dymaptic.GeoBlazor.Core.Components.Label.GetSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
virtual dymaptic.GeoBlazor.Core.Components.Label.SetSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! symbol) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Url.get -> string!
virtual dymaptic.GeoBlazor.Core.Components.Layers.GeoJSONLayer.Url.set -> void
virtual dymaptic.GeoBlazor.Core.Components.Layers.Layer.Load() -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Layers.Layer.Load(Microsoft.JSInterop.IJSRuntime! jsRuntime, dymaptic.GeoBlazor.Core.JsModuleManager! jsModuleManager, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Layers.Layer.Load(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Layers.Layer.SetFullExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent? value) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.LayerView.Type.get -> dymaptic.GeoBlazor.Core.Enums.LayerType?
virtual dymaptic.GeoBlazor.Core.Components.LayerView.Type.set -> void
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.GetProperty<T>(string! propertyName) -> System.Threading.Tasks.Task<T?>!
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.Layer.get -> dymaptic.GeoBlazor.Core.Components.Layers.Layer?
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.Layer.set -> void
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.OnJsComponentCreated(Microsoft.JSInterop.IJSObjectReference! jsComponentReference, Microsoft.JSInterop.IJSStreamReference! jsonStreamReference) -> System.Threading.Tasks.ValueTask<dymaptic.GeoBlazor.Core.Components.MapComponent?>
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.Refresh() -> System.Threading.Tasks.ValueTask
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.RegisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.RegisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.RenderView(bool forceRender = false) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.SetProperty<T>(string! propertyName, T? value) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.UnregisterChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.UnregisterGeneratedChildComponent(dymaptic.GeoBlazor.Core.Components.MapComponent! child) -> System.Threading.Tasks.ValueTask<bool>
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.ValidateRequiredChildren() -> void
virtual dymaptic.GeoBlazor.Core.Components.MapComponent.ValidateRequiredGeneratedChildren() -> void
virtual dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.GetSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
virtual dymaptic.GeoBlazor.Core.Components.Renderers.SimpleRenderer.SetSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! symbol) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.GetSymbol() -> System.Threading.Tasks.Task<dymaptic.GeoBlazor.Core.Components.Symbols.Symbol?>!
virtual dymaptic.GeoBlazor.Core.Components.UniqueValueInfo.SetSymbol(dymaptic.GeoBlazor.Core.Components.Symbols.Symbol! symbol) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.BuildMapView() -> System.Threading.Tasks.ValueTask
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.GoTo(System.Collections.Generic.IEnumerable<dymaptic.GeoBlazor.Core.Components.Graphic!>! graphics) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.OnJavascriptExtentChanged(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent, dymaptic.GeoBlazor.Core.Components.Geometries.Point? center, double zoom, double scale, double? rotation = null, double? tilt = null) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.SetCenter(dymaptic.GeoBlazor.Core.Components.Geometries.Point! point) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.SetExtent(dymaptic.GeoBlazor.Core.Components.Geometries.Extent! extent) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.SetScale(double scale) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.SetZoom(double zoom) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Views.MapView.UpdateView() -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Components.Widgets.Widget.ArcGISWidget.get -> bool
virtual dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Hidden.get -> bool
virtual dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Label.get -> string?
virtual dymaptic.GeoBlazor.Core.Components.Widgets.Widget.Label.set -> void
virtual dymaptic.GeoBlazor.Core.Model.LogicComponent.Initialize() -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Model.LogicComponent.InvokeAsync<T>(string! method, params object?[]! parameters) -> System.Threading.Tasks.Task<T>!
virtual dymaptic.GeoBlazor.Core.Model.LogicComponent.InvokeAsync<T>(string! method, System.Threading.CancellationToken cancellationToken, params object?[]! parameters) -> System.Threading.Tasks.Task<T>!
virtual dymaptic.GeoBlazor.Core.Model.LogicComponent.InvokeVoidAsync(string! method, params object?[]! parameters) -> System.Threading.Tasks.Task!
virtual dymaptic.GeoBlazor.Core.Model.LogicComponent.Library.get -> string!
