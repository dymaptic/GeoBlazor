// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Model;

/// <summary>
///    The group resource represents a group within the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
/// <param name="Access">
///     The access privileges on the group which determines who can see and access the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#access">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Created">
///     The date the group was created.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#created">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Description">
///     A detailed description of the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#description">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="IsInvitationOnly">
///     If set to `true`, then users will not be able to apply to join the group.
///     default false
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#isInvitationOnly">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Modified">
///     The date the group was last modified.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#modified">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Owner">
///     The username of the group's owner.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#owner">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Portal">
///     The portal associated with the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#portal">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="PortalGroupId">
///     The unique id for the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#id">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Snippet">
///     A short summary that describes the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#snippet">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Tags">
///     User defined tags that describe the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#tags">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Title">
///     The title of the group.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#title">ArcGIS Maps SDK for JavaScript</a>
/// </param>
public partial record PortalGroup(
    PortalGroupAccess? Access = null,
    DateTime? Created = null,
    string? Description = null,
    bool? IsInvitationOnly = null,
    DateTime? Modified = null,
    string? Owner = null,
    Portal? Portal = null,
    string? PortalGroupId = null,
    string? Snippet = null,
    IReadOnlyCollection<string>? Tags = null,
    string? Title = null)
{
    internal IJSObjectReference? JsComponentReference { get; set; }
    internal AbortManager? AbortManager { get; set; }
    protected readonly CancellationTokenSource _cancellationTokenSource = new();
#region Public Methods

    /// <summary>
    ///     If present, fetches the group's category schema.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#fetchCategorySchema">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<object[]?> FetchCategorySchema(CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        object[]? result = await JsComponentReference!.InvokeAsync<object[]?>(
            "fetchCategorySchema", 
            _cancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Fetches the current members of the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#fetchMembers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<object?> FetchMembers(CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        object? result = await JsComponentReference!.InvokeAsync<object?>(
            "fetchMembers", 
            _cancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Get the URL to the thumbnail image for the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#getThumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="width">
    ///     The desired image width.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetThumbnailUrl(int width)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getThumbnailUrl", 
            _cancellationTokenSource.Token,
            width);
    }
    
    /// <summary>
    ///     Executes a query against the group to return an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">PortalItem</a> objects that match the input query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#queryItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="queryParams">
    ///     The input query parameters
    ///     defined in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalQueryParams.html">PortalQueryParams</a>.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalQueryResult?> QueryItems(PortalQueryParams queryParams,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalQueryResult? result = await JsComponentReference!.InvokeAsync<PortalQueryResult?>(
            "queryItems", 
            _cancellationTokenSource.Token,
            queryParams,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion

}
