// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Model;

/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html">GeoBlazor Docs</a>
///     The Ground class contains properties that specify how the ground surface is
///     displayed in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
/// <param name="Layers">
///     A collection of
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ElevationLayer.html">ElevationLayers</a>
///     that define the elevation or terrain that makes up the ground surface.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#layers">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="NavigationConstraint">
///     Specifies the user navigation constraints relative to
///     the ground surface.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#navigationConstraint">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Opacity">
///     Opacity of the ground, including surface default color and the basemap (without reference layers).
///     default 1
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#opacity">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="SurfaceColor">
///     The color of the ground surface, displayed underneath the basemap.
///     default null
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#surfaceColor">ArcGIS Maps SDK for JavaScript</a>
/// </param>
public partial record Ground(
    IReadOnlyCollection<Layer>? Layers = null,
    GroundNavigationConstraint? NavigationConstraint = null,
    double? Opacity = null,
    MapColor? SurfaceColor = null) : IIntersectItem, ILayerParent, IMeshUtilsSource, IInteractiveRecord
{
    /// <summary>
    ///     Represents the JavaScript component reference.
    /// </summary>
    public IJSObjectReference? JsComponentReference { get; set; }
    
    /// <summary>
    ///     Allows for transmitting CancellationToken cancel signals to JavaScript.
    /// </summary>
    public AbortManager? AbortManager { get; set; }
    
    /// <summary>
    ///     A unique Id to identify this record in JavaScript.
    /// </summary>
    public Guid Id { get; set; } = Guid.NewGuid();
    
    /// <summary>
    ///     Reference to the Core JavaScript module.
    /// </summary>
    public IJSObjectReference? CoreJsModule { get; set; }
    
    /// <summary>
    ///     Cancellation Token for async methods.
    /// </summary>
    protected readonly CancellationTokenSource CancellationTokenSource = new();
#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundcancelload-method">GeoBlazor Docs</a>
    ///     Cancels a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#load">load()</a> operation if it is already in progress.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#cancelLoad">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task CancelLoad()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "cancelLoad", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundcreateelevationsampler-method">GeoBlazor Docs</a>
    ///     Creates an elevation sampler for the given extent by querying the ground layers
    ///     for elevation data and caching it so values may be sampled quickly afterwards.
    ///     param options Additional sampler options.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#createElevationSampler">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="extent">
    ///     The extent for which to create the sampler.
    /// </param>
    /// <param name="options">
    ///     Additional sampler options.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<IElevationSampler?> CreateElevationSampler(Extent extent,
        GroundCreateElevationSamplerOptions options,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        IElevationSampler? result = await JsComponentReference!.InvokeAsync<IElevationSampler?>(
            "createElevationSampler", 
            CancellationTokenSource.Token,
            extent,
            new { demResolution = options.DemResolution, noDataValue = options.NoDataValue, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundisfulfilled-method">GeoBlazor Docs</a>
    ///     `isFulfilled()` may be used to verify if creating an instance of the class is fulfilled (either resolved or rejected).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#isFulfilled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<bool?> IsFulfilled()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "isFulfilled", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundisrejected-method">GeoBlazor Docs</a>
    ///     `isRejected()` may be used to verify if creating an instance of the class is rejected.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#isRejected">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<bool?> IsRejected()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "isRejected", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundisresolved-method">GeoBlazor Docs</a>
    ///     `isResolved()` may be used to verify if creating an instance of the class is resolved.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#isResolved">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<bool?> IsResolved()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "isResolved", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundload-method">GeoBlazor Docs</a>
    ///     Loads the resources referenced by this class.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#load">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> Load(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "load", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundloadall-method">GeoBlazor Docs</a>
    ///     Loads all the externally loadable resources associated with the ground.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#loadAll">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Ground?> LoadAll()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Ground?>(
            "loadAll", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundqueryelevation-method">GeoBlazor Docs</a>
    ///     Query the ground layer services for elevation values for the given geometry.
    ///     param options Additional query options.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#queryElevation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="geometry">
    ///     The geometry to sample.
    /// </param>
    /// <param name="options">
    ///     Additional query options.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<ElevationQueryResult?> QueryElevation(Geometry geometry,
        GroundQueryElevationOptions options,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        ElevationQueryResult? result = await JsComponentReference!.InvokeAsync<ElevationQueryResult?>(
            "queryElevation", 
            CancellationTokenSource.Token,
            geometry,
            new { demResolution = options.DemResolution, returnSampleInfo = options.ReturnSampleInfo, noDataValue = options.NoDataValue, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html#groundwhen-method">GeoBlazor Docs</a>
    ///     `when()` may be leveraged once an instance of the class is created.
    ///     param errback The function to execute when the promise fails.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#when">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="callback">
    ///     The function to call when the promise resolves.
    /// </param>
    /// <param name="errback">
    ///     The function to execute when the promise fails.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> When(Func<Task> callback,
        Func<Task> errback)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "when", 
            CancellationTokenSource.Token,
            callback,
            errback);
    }
    
#endregion

}
