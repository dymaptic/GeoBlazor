// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Model;

/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.Ground.html">GeoBlazor Docs</a>
///     The Ground class contains properties that specify how the ground surface is displayed in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
/// <param name="Layers">
///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ElevationLayer.html">ElevationLayers</a> that define the elevation or terrain that makes up the ground surface.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#layers">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="NavigationConstraint">
///     Specifies the user navigation constraints relative to the ground surface.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#navigationConstraint">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="Opacity">
///     Opacity of the ground, including surface default color and the basemap (without reference layers).
///     default 1
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#opacity">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="SurfaceColor">
///     The color of the ground surface, displayed underneath the basemap.
///     default null
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#surfaceColor">ArcGIS Maps SDK for JavaScript</a>
/// </param>
public partial record Ground(
    IReadOnlyCollection<Layer>? Layers = null,
    GroundNavigationConstraint? NavigationConstraint = null,
    double? Opacity = null,
    MapColor? SurfaceColor = null) : IMeshUtilsSource
{
    internal IJSObjectReference? JsComponentReference { get; set; }
    internal AbortManager? AbortManager { get; set; }
    
    /// <summary>
    ///     Cancellation Token for async methods.
    /// </summary>
    protected readonly CancellationTokenSource CancellationTokenSource = new();
#region Public Methods

    /// <summary>
    ///     Creates an elevation sampler for the given extent by querying the ground layers for elevation data and caching it so values may be sampled quickly afterwards.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#createElevationSampler">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="extent">
    ///     The extent for which to create the sampler.
    /// </param>
    /// <param name="options">
    ///     Additional sampler options.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<IElevationSampler?> CreateElevationSampler(Extent extent,
        GroundCreateElevationSamplerOptions options,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        IElevationSampler? result = await JsComponentReference!.InvokeAsync<IElevationSampler?>(
            "createElevationSampler", 
            CancellationTokenSource.Token,
            extent,
            new { demResolution = options.DemResolution, noDataValue = options.NoDataValue, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Loads all the externally loadable resources associated with the ground.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#loadAll">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Ground?> LoadAll()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Ground?>(
            "loadAll", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Query the ground layer services for elevation values for the given geometry.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#queryElevation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="geometry">
    ///     The geometry to sample.
    /// </param>
    /// <param name="options">
    ///     Additional query options.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<ElevationQueryResult?> QueryElevation(Geometry geometry,
        GroundQueryElevationOptions options,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        ElevationQueryResult? result = await JsComponentReference!.InvokeAsync<ElevationQueryResult?>(
            "queryElevation", 
            CancellationTokenSource.Token,
            geometry,
            new { demResolution = options.DemResolution, returnSampleInfo = options.ReturnSampleInfo, noDataValue = options.NoDataValue, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion

}
