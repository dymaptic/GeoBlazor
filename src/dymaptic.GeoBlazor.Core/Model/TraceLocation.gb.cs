// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Model;

/// <summary>
///    To perform the trace analytic, users can optionally supply a list of locations in forms of globalIds (UUID) and terminals.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-networks-support-TraceLocation.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
/// <param name="GlobalId">
///     The globalId (UUID) of the feature to start or stop the trace.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-networks-support-TraceLocation.html#globalId">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="IsFilterBarrier">
///     This indicates whether this barrier starting location should be skipped (filtered) when a trace attempts to find upstream controllers.
///     default false
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-networks-support-TraceLocation.html#isFilterBarrier">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="PercentAlong">
///     This double parameter of value of 0-1 indicates a percentage along the line of where the trace location is placed.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-networks-support-TraceLocation.html#percentAlong">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="TerminalId">
///     The terminal Id to place the starting location at.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-networks-support-TraceLocation.html#terminalId">ArcGIS Maps SDK for JavaScript</a>
/// </param>
public partial record TraceLocation(
    [property:JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    string? GlobalId = null,
    [property:JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    bool? IsFilterBarrier = null,
    [property:JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    double? PercentAlong = null,
    [property:JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    long? TerminalId = null);
