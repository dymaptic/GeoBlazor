// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Model;

/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Model.PortalItemResource.html">GeoBlazor Docs</a>
///     A reference to a portal item resource.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
/// <param name="Path">
///     Path of the resource relative to `{ITEM}/resources/`.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#path">ArcGIS Maps SDK for JavaScript</a>
/// </param>
/// <param name="PortalItem">
///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">portal item</a> that owns the resource.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
/// </param>
public partial record PortalItemResource(
    string? Path = null,
    PortalItem? PortalItem = null): IInteractiveRecord
{
    /// <summary>
    ///     Path of the resource relative to `{ITEM}/resources/`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#path">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    public string? Path { get; set; } = Path;
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">portal item</a> that owns the resource.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    public PortalItem? PortalItem { get; set; } = PortalItem;
    
    /// <summary>
    ///     Represents the JavaScript component reference.
    /// </summary>
    public IJSObjectReference? JsComponentReference { get; set; }
    
    /// <summary>
    ///     Allows for transmitting CancellationToken cancel signals to JavaScript.
    /// </summary>
    public AbortManager? AbortManager { get; set; }
    
    /// <summary>
    ///     A unique Id to identify this record in JavaScript.
    /// </summary>
    public Guid Id { get; set; } = Guid.NewGuid();
    
    /// <summary>
    ///     Reference to the Core JavaScript module.
    /// </summary>
    public IJSObjectReference? CoreJsModule { get; set; }
    
    /// <summary>
    ///     Cancellation Token for async methods.
    /// </summary>
    protected readonly CancellationTokenSource CancellationTokenSource = new();
#region Public Methods

    /// <summary>
    ///     Requests the PortalItemResource data in the format specified for the `responseType`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#fetch">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="responseType">
    ///     The format of the response.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<object?> Fetch(ResponseType responseType,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        object? result = await JsComponentReference!.InvokeAsync<object?>(
            "fetch", 
            CancellationTokenSource.Token,
            responseType,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Updates an existing resource with new content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#update">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="content">
    ///     The resource content.
    /// </param>
    /// <param name="options">
    ///     An object wih the following properties.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<object?> Update(Stream content,
        PortalItemResourceUpdateOptions options,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        object? result = await JsComponentReference!.InvokeAsync<object?>(
            "update", 
            CancellationTokenSource.Token,
            content,
            new { access = options.Access, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion

}
