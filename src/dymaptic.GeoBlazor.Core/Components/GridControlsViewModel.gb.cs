// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html">GeoBlazor Docs</a>
///     Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html">GridControls</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class GridControlsViewModel : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public GridControlsViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="dynamicScaling">
    ///     Returns `true` if the grid is set to scale dynamically.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#dynamicScaling">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="gridColor">
    ///     Sets the color used for grid display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#gridColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="interactivePlacementState">
    ///     Sets the interactive placement state, either starting or ending a draw operation that implicitly adjusts the grid.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#interactivePlacementState">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="majorLineInterval">
    ///     Controls the number of grid lines shown at 50% opacity between opaque grid lines when using <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#dynamicScaling">dynamicScaling</a>.
    ///     default 10
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#majorLineInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotateWithMap">
    ///     Determines the behavior of the grid when the map's viewpoint is rotated.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#rotateWithMap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotation">
    ///     The grid's rotation in radians.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#rotation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="snappingEnabled">
    ///     Controls snapping behavior if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#snappingOptions">snappingOptions</a> has been defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#snappingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="snappingOptions">
    ///     This is the snapping options object that will be configured by the 'enable snapping' property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#snappingOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spacing">
    ///     Length of a grid cell.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#spacing">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="unit">
    ///     Unit of measure (foot, meter, etc) used when defining the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#spacing">spacing</a> grid cell.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#unit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public GridControlsViewModel(
        bool? dynamicScaling = null,
        MapColor? gridColor = null,
        InteractivePlacementState? interactivePlacementState = null,
        double? majorLineInterval = null,
        bool? rotateWithMap = null,
        double? rotation = null,
        bool? snappingEnabled = null,
        SnappingOptions? snappingOptions = null,
        double? spacing = null,
        LengthUnit? unit = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        DynamicScaling = dynamicScaling;
        GridColor = gridColor;
        InteractivePlacementState = interactivePlacementState;
        MajorLineInterval = majorLineInterval;
        RotateWithMap = rotateWithMap;
        Rotation = rotation;
        SnappingEnabled = snappingEnabled;
        SnappingOptions = snappingOptions;
        Spacing = spacing;
        Unit = unit;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodeldisplayenabled-property">GeoBlazor Docs</a>
    ///     Returns `true` if the grid is enabled for display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#displayEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? DisplayEnabled { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodeldynamicscaling-property">GeoBlazor Docs</a>
    ///     Returns `true` if the grid is set to scale dynamically.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#dynamicScaling">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DynamicScaling { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodeleffectivespacingafterdynamicscaling-property">GeoBlazor Docs</a>
    ///     Returns the effective spacing of grid lines after applying the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#dynamicScaling">dynamicScaling</a>
    ///     setting at the current view scale.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#effectiveSpacingAfterDynamicScaling">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public double? EffectiveSpacingAfterDynamicScaling { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelgridcolor-property">GeoBlazor Docs</a>
    ///     Sets the color used for grid display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#gridColor">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MapColor? GridColor { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelgridcontrolsenabled-property">GeoBlazor Docs</a>
    ///     Returns `true` if the grid is in a valid state for manually setting grid properties or starting an interactive placement.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#gridControlsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? GridControlsEnabled { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelgridoutofscale-property">GeoBlazor Docs</a>
    ///     True if the grid is currently not displayed (and therefore also not a valid snap target),
    ///     because <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#dynamicScaling">dynamicScaling</a> is off and the grid cells are too small
    ///     to render at the current scale.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#gridOutOfScale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? GridOutOfScale { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelinteractiveplacementstate-property">GeoBlazor Docs</a>
    ///     Sets the interactive placement state, either starting or ending a draw operation that implicitly adjusts the grid.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#interactivePlacementState">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public InteractivePlacementState? InteractivePlacementState { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelmajorlineinterval-property">GeoBlazor Docs</a>
    ///     Controls the number of grid lines shown at 50% opacity between opaque grid lines when using <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#dynamicScaling">dynamicScaling</a>.
    ///     default 10
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#majorLineInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MajorLineInterval { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelnumericspacinginputshouldbevisible-property">GeoBlazor Docs</a>
    ///     True if the spacing input should be shown for the current view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#numericSpacingInputShouldBeVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? NumericSpacingInputShouldBeVisible { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelrotatewithmap-property">GeoBlazor Docs</a>
    ///     Determines the behavior of the grid when the map's viewpoint is rotated.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#rotateWithMap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RotateWithMap { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelrotation-property">GeoBlazor Docs</a>
    ///     The grid's rotation in radians.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#rotation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Rotation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelsnappingenabled-property">GeoBlazor Docs</a>
    ///     Controls snapping behavior if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#snappingOptions">snappingOptions</a> has been defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#snappingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SnappingEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelsnappingoptions-property">GeoBlazor Docs</a>
    ///     This is the snapping options object that will be configured by the 'enable snapping' property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#snappingOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SnappingOptions? SnappingOptions { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelspacing-property">GeoBlazor Docs</a>
    ///     Length of a grid cell.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#spacing">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Spacing { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodelunit-property">GeoBlazor Docs</a>
    ///     Unit of measure (foot, meter, etc) used when defining the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#spacing">spacing</a> grid cell.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#unit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LengthUnit? Unit { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DisplayEnabled property.
    /// </summary>
    public async Task<bool?> GetDisplayEnabled()
    {
        if (CoreJsModule is null)
        {
            return DisplayEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DisplayEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "displayEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DisplayEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DisplayEnabled)] = DisplayEnabled;
        }
         
        return DisplayEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DynamicScaling property.
    /// </summary>
    public async Task<bool?> GetDynamicScaling()
    {
        if (CoreJsModule is null)
        {
            return DynamicScaling;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DynamicScaling;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dynamicScaling");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DynamicScaling = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DynamicScaling)] = DynamicScaling;
        }
         
        return DynamicScaling;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EffectiveSpacingAfterDynamicScaling property.
    /// </summary>
    public async Task<double?> GetEffectiveSpacingAfterDynamicScaling()
    {
        if (CoreJsModule is null)
        {
            return EffectiveSpacingAfterDynamicScaling;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EffectiveSpacingAfterDynamicScaling;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "effectiveSpacingAfterDynamicScaling");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EffectiveSpacingAfterDynamicScaling = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EffectiveSpacingAfterDynamicScaling)] = EffectiveSpacingAfterDynamicScaling;
        }
         
        return EffectiveSpacingAfterDynamicScaling;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridColor property.
    /// </summary>
    public async Task<MapColor?> GetGridColor()
    {
        if (CoreJsModule is null)
        {
            return GridColor;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "gridColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             GridColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridColor)] = GridColor;
        }
         
        return GridColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridControlsEnabled property.
    /// </summary>
    public async Task<bool?> GetGridControlsEnabled()
    {
        if (CoreJsModule is null)
        {
            return GridControlsEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridControlsEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "gridControlsEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GridControlsEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridControlsEnabled)] = GridControlsEnabled;
        }
         
        return GridControlsEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridOutOfScale property.
    /// </summary>
    public async Task<bool?> GetGridOutOfScale()
    {
        if (CoreJsModule is null)
        {
            return GridOutOfScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridOutOfScale;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "gridOutOfScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GridOutOfScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridOutOfScale)] = GridOutOfScale;
        }
         
        return GridOutOfScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the InteractivePlacementState property.
    /// </summary>
    public async Task<InteractivePlacementState?> GetInteractivePlacementState()
    {
        if (CoreJsModule is null)
        {
            return InteractivePlacementState;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return InteractivePlacementState;
        }

        // get the property value
        JsNullableEnumWrapper<InteractivePlacementState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<InteractivePlacementState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "interactivePlacementState");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             InteractivePlacementState = (InteractivePlacementState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(InteractivePlacementState)] = InteractivePlacementState;
        }
         
        return InteractivePlacementState;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MajorLineInterval property.
    /// </summary>
    public async Task<double?> GetMajorLineInterval()
    {
        if (CoreJsModule is null)
        {
            return MajorLineInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MajorLineInterval;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "majorLineInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MajorLineInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MajorLineInterval)] = MajorLineInterval;
        }
         
        return MajorLineInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumericSpacingInputShouldBeVisible property.
    /// </summary>
    public async Task<bool?> GetNumericSpacingInputShouldBeVisible()
    {
        if (CoreJsModule is null)
        {
            return NumericSpacingInputShouldBeVisible;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NumericSpacingInputShouldBeVisible;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "numericSpacingInputShouldBeVisible");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NumericSpacingInputShouldBeVisible = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NumericSpacingInputShouldBeVisible)] = NumericSpacingInputShouldBeVisible;
        }
         
        return NumericSpacingInputShouldBeVisible;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RotateWithMap property.
    /// </summary>
    public async Task<bool?> GetRotateWithMap()
    {
        if (CoreJsModule is null)
        {
            return RotateWithMap;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RotateWithMap;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotateWithMap");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RotateWithMap = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RotateWithMap)] = RotateWithMap;
        }
         
        return RotateWithMap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Rotation property.
    /// </summary>
    public async Task<double?> GetRotation()
    {
        if (CoreJsModule is null)
        {
            return Rotation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Rotation;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Rotation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Rotation)] = Rotation;
        }
         
        return Rotation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SnappingEnabled property.
    /// </summary>
    public async Task<bool?> GetSnappingEnabled()
    {
        if (CoreJsModule is null)
        {
            return SnappingEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SnappingEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "snappingEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SnappingEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SnappingEnabled)] = SnappingEnabled;
        }
         
        return SnappingEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SnappingOptions property.
    /// </summary>
    public async Task<SnappingOptions?> GetSnappingOptions()
    {
        if (CoreJsModule is null)
        {
            return SnappingOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SnappingOptions;
        }

        SnappingOptions? result = await JsComponentReference.InvokeAsync<SnappingOptions?>(
            "getSnappingOptions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SnappingOptions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
        }
        
        return SnappingOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Spacing property.
    /// </summary>
    public async Task<double?> GetSpacing()
    {
        if (CoreJsModule is null)
        {
            return Spacing;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Spacing;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "spacing");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Spacing = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Spacing)] = Spacing;
        }
         
        return Spacing;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Unit property.
    /// </summary>
    public async Task<LengthUnit?> GetUnit()
    {
        if (CoreJsModule is null)
        {
            return Unit;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Unit;
        }

        // get the property value
        JsNullableEnumWrapper<LengthUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<LengthUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "unit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Unit = (LengthUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Unit)] = Unit;
        }
         
        return Unit;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the DynamicScaling property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDynamicScaling(bool? value)
    {
#pragma warning disable BL0005
        DynamicScaling = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DynamicScaling)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dynamicScaling", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridColor(MapColor? value)
    {
#pragma warning disable BL0005
        GridColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the InteractivePlacementState property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetInteractivePlacementState(InteractivePlacementState? value)
    {
#pragma warning disable BL0005
        InteractivePlacementState = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(InteractivePlacementState)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "interactivePlacementState", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MajorLineInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMajorLineInterval(double? value)
    {
#pragma warning disable BL0005
        MajorLineInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MajorLineInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "majorLineInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RotateWithMap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotateWithMap(bool? value)
    {
#pragma warning disable BL0005
        RotateWithMap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RotateWithMap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotateWithMap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Rotation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotation(double? value)
    {
#pragma warning disable BL0005
        Rotation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Rotation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SnappingEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSnappingEnabled(bool? value)
    {
#pragma warning disable BL0005
        SnappingEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SnappingEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "snappingEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SnappingOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSnappingOptions(SnappingOptions? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SnappingOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SnappingOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSnappingOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Spacing property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpacing(double? value)
    {
#pragma warning disable BL0005
        Spacing = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Spacing)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spacing", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Unit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnit(LengthUnit? value)
    {
#pragma warning disable BL0005
        Unit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Unit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "unit", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsViewModel.html#gridcontrolsviewmodeltrysetdisplayenabled-method">GeoBlazor Docs</a>
    ///     Try to enable or disable grid display.
    ///     param visible Controls whether to try to enable or disable grid display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls-GridControlsViewModel.html#trySetDisplayEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="visible">
    ///     Controls whether to try to enable or disable grid display.
    /// </param>
    [ArcGISMethod]
    public async Task TrySetDisplayEnabled(bool visible)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "trySetDisplayEnabled", 
            CancellationTokenSource.Token,
            visible);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SnappingOptions snappingOptions:
                if (snappingOptions != SnappingOptions)
                {
                    SnappingOptions = snappingOptions;
                    
                    ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SnappingOptions _:
                SnappingOptions = null;
                
                ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        SnappingOptions?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
