// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Creates a color ramp for use in a raster renderer.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AlgorithmicColorRamp.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class AlgorithmicColorRamp : IClassBreaksCreateRendererParamsColorRamp,
    IColorRampsCreateColorRamp,
    IRasterColormapByRampParametersColorRamp,
    IShadedReliefCreateRendererParamsColorRamp,
    IStretchCreateRendererParamsColorRamp,
    IUniqueValueCreateRendererParamsColorRamp
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public AlgorithmicColorRamp()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="algorithm">
    ///     The algorithm used to generate the colors between the `fromColor` and `toColor`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AlgorithmicColorRamp.html#algorithm">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fromColor">
    ///     The first color in the color ramp.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AlgorithmicColorRamp.html#fromColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="toColor">
    ///     The last color in the color ramp.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AlgorithmicColorRamp.html#toColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AlgorithmicColorRamp(
        Algorithm algorithm,
        MapColor? fromColor = null,
        MapColor? toColor = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Algorithm = algorithm;
        FromColor = fromColor;
        ToColor = toColor;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Algorithm property.
    /// </summary>
    public async Task<Algorithm?> GetAlgorithm()
    {
        if (CoreJsModule is null)
        {
            return Algorithm;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Algorithm;
        }

        // get the property value
        Algorithm? result = await JsComponentReference!.InvokeAsync<Algorithm?>("getProperty",
            CancellationTokenSource.Token, "algorithm");
        if (result is not null)
        {
#pragma warning disable BL0005
             Algorithm = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Algorithm)] = Algorithm;
        }
         
        return Algorithm;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FromColor property.
    /// </summary>
    public async Task<MapColor?> GetFromColor()
    {
        if (CoreJsModule is null)
        {
            return FromColor;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FromColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "fromColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             FromColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FromColor)] = FromColor;
        }
         
        return FromColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ToColor property.
    /// </summary>
    public async Task<MapColor?> GetToColor()
    {
        if (CoreJsModule is null)
        {
            return ToColor;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ToColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "toColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             ToColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ToColor)] = ToColor;
        }
         
        return ToColor;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Algorithm property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAlgorithm(Algorithm value)
    {
#pragma warning disable BL0005
        Algorithm = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Algorithm)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "algorithm", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FromColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFromColor(MapColor value)
    {
#pragma warning disable BL0005
        FromColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FromColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fromColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ToColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetToColor(MapColor value)
    {
#pragma warning disable BL0005
        ToColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ToColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "toColor", value);
    }
    
#endregion




}
