// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Indicates the layer's supported capabilities.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ArcGISMapServiceCapabilities : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ArcGISMapServiceCapabilities()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="exportMap">
    ///     Indicates options supported by the exportMap operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="exportTiles">
    ///     Indicates options supported by the exportTiles operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="operations">
    ///     Indicates operations that can be performed on the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ArcGISMapServiceCapabilities(
        ArcGISMapServiceCapabilitiesExportMap? exportMap = null,
        ArcGISMapServiceCapabilitiesExportTiles? exportTiles = null,
        ArcGISMapServiceCapabilitiesOperations? operations = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ExportMap = exportMap;
        ExportTiles = exportTiles;
        Operations = operations;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates options supported by the exportMap operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISMapServiceCapabilitiesExportMap? ExportMap { get; set; }
    
    /// <summary>
    ///     Indicates options supported by the exportTiles operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISMapServiceCapabilitiesExportTiles? ExportTiles { get; set; }
    
    /// <summary>
    ///     Indicates operations that can be performed on the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISMapServiceCapabilitiesOperations? Operations { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ExportMap property.
    /// </summary>
    public async Task<ArcGISMapServiceCapabilitiesExportMap?> GetExportMap()
    {
        if (CoreJsModule is null)
        {
            return ExportMap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ExportMap;
        }

        // get the property value
#pragma warning disable BL0005
        ExportMap = await CoreJsModule!.InvokeAsync<ArcGISMapServiceCapabilitiesExportMap?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "exportMap");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ExportMap)] = ExportMap;
        return ExportMap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ExportTiles property.
    /// </summary>
    public async Task<ArcGISMapServiceCapabilitiesExportTiles?> GetExportTiles()
    {
        if (CoreJsModule is null)
        {
            return ExportTiles;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ExportTiles;
        }

        // get the property value
#pragma warning disable BL0005
        ExportTiles = await CoreJsModule!.InvokeAsync<ArcGISMapServiceCapabilitiesExportTiles?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "exportTiles");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ExportTiles)] = ExportTiles;
        return ExportTiles;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Operations property.
    /// </summary>
    public async Task<ArcGISMapServiceCapabilitiesOperations?> GetOperations()
    {
        if (CoreJsModule is null)
        {
            return Operations;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Operations;
        }

        // get the property value
#pragma warning disable BL0005
        Operations = await CoreJsModule!.InvokeAsync<ArcGISMapServiceCapabilitiesOperations?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "operations");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Operations)] = Operations;
        return Operations;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ExportMap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExportMap(ArcGISMapServiceCapabilitiesExportMap value)
    {
#pragma warning disable BL0005
        ExportMap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExportMap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "exportMap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ExportTiles property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExportTiles(ArcGISMapServiceCapabilitiesExportTiles value)
    {
#pragma warning disable BL0005
        ExportTiles = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExportTiles)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "exportTiles", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Operations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOperations(ArcGISMapServiceCapabilitiesOperations value)
    {
#pragma warning disable BL0005
        Operations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Operations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "operations", value);
    }
    
#endregion





    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISMapServiceCapabilitiesExportMap exportMap:
                if (exportMap != ExportMap)
                {
                    ExportMap = exportMap;
                    
                    ModifiedParameters[nameof(ExportMap)] = ExportMap;
                }
                
                return true;
            case ArcGISMapServiceCapabilitiesExportTiles exportTiles:
                if (exportTiles != ExportTiles)
                {
                    ExportTiles = exportTiles;
                    
                    ModifiedParameters[nameof(ExportTiles)] = ExportTiles;
                }
                
                return true;
            case ArcGISMapServiceCapabilitiesOperations operations:
                if (operations != Operations)
                {
                    Operations = operations;
                    
                    ModifiedParameters[nameof(Operations)] = Operations;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISMapServiceCapabilitiesExportMap _:
                ExportMap = null;
                
                ModifiedParameters[nameof(ExportMap)] = ExportMap;
                return true;
            case ArcGISMapServiceCapabilitiesExportTiles _:
                ExportTiles = null;
                
                ModifiedParameters[nameof(ExportTiles)] = ExportTiles;
                return true;
            case ArcGISMapServiceCapabilitiesOperations _:
                Operations = null;
                
                ModifiedParameters[nameof(Operations)] = Operations;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        ExportMap?.ValidateRequiredGeneratedChildren();
        ExportTiles?.ValidateRequiredGeneratedChildren();
        Operations?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
