// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A cache of elevation values created from an elevation service or the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-GroundView.html">GroundView</a>
///    used for synchronously querying elevation information for geometries.
///    This class does not have a constructor. You can create an instance of this class by using
///    <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ElevationLayer.html#createElevationSampler">ElevationLayer.createElevationSampler()</a>
///    or <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#createElevationSampler">Ground.createElevationSampler()</a> methods.
///    The elevation sampler created from the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html">Ground</a> will sample data from the first elevation layer that has data available.
///    To control the layer used for elevation sampling and the sampling resolution, use
///    <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ElevationLayer.html#createElevationSampler">ElevationLayer.createElevationSampler()</a>.
///    <pre><code class="js">map.<span class="hljs-property">ground</span>.<span class="hljs-title function_">load</span>()
///    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
///    <span class="hljs-comment">// create an elevation sampler from a given extent</span>
///    <span class="hljs-keyword">return</span> view.<span class="hljs-property">map</span>.<span class="hljs-property">ground</span>.<span class="hljs-title function_">createElevationSampler</span>(extent);
///    })
///    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elevationSampler</span>) {
///    <span class="hljs-comment">// use the elevation sampler to get z-values for a point, multipoint or polyline geometry</span>
///    <span class="hljs-keyword">let</span> zEnrichedGeometry = elevationSampler.<span class="hljs-title function_">queryElevation</span>(geometry);
///    });
///    </code></pre>
///    An instance of this class is also available in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-GroundView.html#elevationSampler">GroundView.elevationSampler</a>.
///    This can be used when the elevation values need to reflect the elevation currently displayed in the view.
///    <pre><code class="js"><span class="hljs-keyword">let</span> elevationSampler = view.<span class="hljs-property">groundView</span>.<span class="hljs-property">elevationSampler</span>;
///    <span class="hljs-comment">// listen for elevation changes in the view</span>
///    elevationSampler.<span class="hljs-title function_">on</span>(<span class="hljs-string">'changed'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
///    <span class="hljs-comment">// enrich geometry with z-values from the elevation displayed in the view</span>
///    <span class="hljs-keyword">let</span> zEnrichedGeometry = elevationSampler.<span class="hljs-title function_">queryElevation</span>(point);
///    });
///    </code></pre>
/// </summary>
public partial class ElevationSampler : MapComponent,
    IMeshUtilsSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ElevationSampler()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The minimum and maximum resolution of the data in the sampler.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ElevationSampler.html#demResolution">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ElevationSamplerDemResolution? DemResolution { get; protected set; }
    
    /// <summary>
    ///     The extent within which the sampler can be queried.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ElevationSampler.html#extent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? Extent { get; protected set; }
    
    /// <summary>
    ///     The value that is used to represent areas where there is no data available.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ElevationSampler.html#noDataValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NoDataValue { get; protected set; }
    
    /// <summary>
    ///     The spatial reference of the sampler.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ElevationSampler.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DemResolution property.
    /// </summary>
    public async Task<ElevationSamplerDemResolution?> GetDemResolution()
    {
        if (CoreJsModule is null)
        {
            return DemResolution;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DemResolution;
        }

        // get the property value
#pragma warning disable BL0005
        DemResolution = await CoreJsModule!.InvokeAsync<ElevationSamplerDemResolution?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "demResolution");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DemResolution)] = DemResolution;
        return DemResolution;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Extent property.
    /// </summary>
    public async Task<Extent?> GetExtent()
    {
        if (CoreJsModule is null)
        {
            return Extent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Extent;
        }

        // get the property value
#pragma warning disable BL0005
        Extent = await CoreJsModule!.InvokeAsync<Extent?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "extent");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Extent)] = Extent;
        return Extent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NoDataValue property.
    /// </summary>
    public async Task<double?> GetNoDataValue()
    {
        if (CoreJsModule is null)
        {
            return NoDataValue;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NoDataValue;
        }

        // get the property value
#pragma warning disable BL0005
        NoDataValue = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "noDataValue");
#pragma warning restore BL0005
         ModifiedParameters[nameof(NoDataValue)] = NoDataValue;
        return NoDataValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        // get the property value
#pragma warning disable BL0005
        SpatialReference = await CoreJsModule!.InvokeAsync<SpatialReference?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "spatialReference");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        return SpatialReference;
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     Get elevation for a coordinate specified in the spatial reference of the sampler.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ElevationSampler.html#elevationAt">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="x">
    ///     The x coordinate.
    /// </param>
    /// <param name="y">
    ///     The y coordinate.
    /// </param>
    [ArcGISMethod]
    public async Task<double?> ElevationAt(double x,
        double y)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<double?>(
            "elevationAt", 
            CancellationTokenSource.Token,
            x,
            y);
    }
    
    /// <summary>
    ///     Query elevation for a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html">Polyline</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Multipoint.html">Multipoint</a> geometry.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ElevationSampler.html#queryElevation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="geometry">
    ///     The geometry to use for sampling elevation data.
    /// </param>
    [ArcGISMethod]
    public async Task<Geometry?> QueryElevation(Geometry geometry)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Geometry?>(
            "queryElevation", 
            CancellationTokenSource.Token,
            geometry);
    }
    
#endregion


#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsChanged(ElevationSamplerChangedEvent changedEvent)
    {
        await OnChanged.InvokeAsync(changedEvent);
    }
    
    /// <summary>
    ///     Fires when the data in the sampler has changed. This event is only relevant for dynamic elevation samplers
    ///     such as the elevation sampler on the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-GroundView.html">GroundView</a>.
    /// </summary>
    [Parameter]
    public EventCallback<ElevationSamplerChangedEvent> OnChanged { get; set; }
   
#endregion



    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ElevationSamplerDemResolution demResolution:
                if (demResolution != DemResolution)
                {
                    DemResolution = demResolution;
                    
                    ModifiedParameters[nameof(DemResolution)] = DemResolution;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ElevationSamplerDemResolution _:
                DemResolution = null;
                
                ModifiedParameters[nameof(DemResolution)] = DemResolution;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        DemResolution?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
