// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A material determines how a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html">MeshComponent</a> is visualized.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshMaterialMetallicRoughness : MeshMaterial,
    IMeshComponentMaterial
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshMaterialMetallicRoughness()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="alphaCutoff">
    ///     Specifies how transparency on the object is handled.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaCutoff">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="alphaMode">
    ///     Specifies how transparency on the object is handled.
    ///     default "auto"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="color">
    ///     Specifies a single, uniform color for the mesh component.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#color">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colorTexture">
    ///     Specifies a texture from which to get color information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colorTextureTransform">
    ///     A transformation of UV mesh coordinates used to sample the color texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="doubleSided">
    ///     Specifies whether both sides of each triangle are displayed, or only the front sides.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#doubleSided">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="emissiveColor">
    ///     Specifies a single, uniform emissive color for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html">MeshComponent</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="emissiveTexture">
    ///     Specifies a texture from which to get emissive color information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="emissiveTextureTransform">
    ///     A transformation of UV mesh coordinates used to sample the emissive texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="metallic">
    ///     Specifies how much the material behaves like a metal.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#metallic">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="metallicRoughnessTexture">
    ///     Specifies a texture from which to get the combined metallic/roughness information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#metallicRoughnessTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normalTexture">
    ///     Specifies a texture from which to get normal information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normalTextureTransform">
    ///     A transformation of UV mesh coordinates used to sample the normal texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="occlusionTexture">
    ///     Allows to specify a texture to get the occlusion information from.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#occlusionTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="occlusionTextureTransform">
    ///     A transformation of UV mesh coordinates used to sample the occlusion texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#occlusionTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="roughness">
    ///     Indicates how rough the surface of the material is.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#roughness">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshMaterialMetallicRoughness(
        double? alphaCutoff = null,
        AlphaMode? alphaMode = null,
        MapColor? color = null,
        MeshTexture? colorTexture = null,
        MeshTextureTransform? colorTextureTransform = null,
        bool? doubleSided = null,
        MapColor? emissiveColor = null,
        MeshTexture? emissiveTexture = null,
        MeshTextureTransform? emissiveTextureTransform = null,
        double? metallic = null,
        MeshTexture? metallicRoughnessTexture = null,
        MeshTexture? normalTexture = null,
        MeshTextureTransform? normalTextureTransform = null,
        MeshTexture? occlusionTexture = null,
        MeshTextureTransform? occlusionTextureTransform = null,
        double? roughness = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AlphaCutoff = alphaCutoff;
        AlphaMode = alphaMode;
        Color = color;
        ColorTexture = colorTexture;
        ColorTextureTransform = colorTextureTransform;
        DoubleSided = doubleSided;
        EmissiveColor = emissiveColor;
        EmissiveTexture = emissiveTexture;
        EmissiveTextureTransform = emissiveTextureTransform;
        Metallic = metallic;
        MetallicRoughnessTexture = metallicRoughnessTexture;
        NormalTexture = normalTexture;
        NormalTextureTransform = normalTextureTransform;
        OcclusionTexture = occlusionTexture;
        OcclusionTextureTransform = occlusionTextureTransform;
        Roughness = roughness;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies a single, uniform emissive color for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html">MeshComponent</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveColor">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MapColor? EmissiveColor { get; set; }
    
    /// <summary>
    ///     Specifies a texture from which to get emissive color information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTexture? EmissiveTexture { get; set; }
    
    /// <summary>
    ///     A transformation of UV mesh coordinates used to sample the emissive texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTextureTransform? EmissiveTextureTransform { get; set; }
    
    /// <summary>
    ///     Specifies how much the material behaves like a metal.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#metallic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Metallic { get; set; }
    
    /// <summary>
    ///     Specifies a texture from which to get the combined metallic/roughness information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#metallicRoughnessTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTexture? MetallicRoughnessTexture { get; set; }
    
    /// <summary>
    ///     Allows to specify a texture to get the occlusion information from.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#occlusionTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTexture? OcclusionTexture { get; set; }
    
    /// <summary>
    ///     A transformation of UV mesh coordinates used to sample the occlusion texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#occlusionTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTextureTransform? OcclusionTextureTransform { get; set; }
    
    /// <summary>
    ///     Indicates how rough the surface of the material is.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#roughness">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Roughness { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the EmissiveColor property.
    /// </summary>
    public async Task<MapColor?> GetEmissiveColor()
    {
        if (CoreJsModule is null)
        {
            return EmissiveColor;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EmissiveColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "emissiveColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             EmissiveColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EmissiveColor)] = EmissiveColor;
        }
         
        return EmissiveColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EmissiveTexture property.
    /// </summary>
    public async Task<MeshTexture?> GetEmissiveTexture()
    {
        if (CoreJsModule is null)
        {
            return EmissiveTexture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EmissiveTexture;
        }

        // get the property value
        MeshTexture? result = await JsComponentReference!.InvokeAsync<MeshTexture?>("getProperty",
            CancellationTokenSource.Token, "emissiveTexture");
        if (result is not null)
        {
#pragma warning disable BL0005
             EmissiveTexture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EmissiveTexture)] = EmissiveTexture;
        }
         
        return EmissiveTexture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EmissiveTextureTransform property.
    /// </summary>
    public async Task<MeshTextureTransform?> GetEmissiveTextureTransform()
    {
        if (CoreJsModule is null)
        {
            return EmissiveTextureTransform;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EmissiveTextureTransform;
        }

        // get the property value
        MeshTextureTransform? result = await JsComponentReference!.InvokeAsync<MeshTextureTransform?>("getProperty",
            CancellationTokenSource.Token, "emissiveTextureTransform");
        if (result is not null)
        {
#pragma warning disable BL0005
             EmissiveTextureTransform = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EmissiveTextureTransform)] = EmissiveTextureTransform;
        }
         
        return EmissiveTextureTransform;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Metallic property.
    /// </summary>
    public async Task<double?> GetMetallic()
    {
        if (CoreJsModule is null)
        {
            return Metallic;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Metallic;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "metallic");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Metallic = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Metallic)] = Metallic;
        }
         
        return Metallic;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MetallicRoughnessTexture property.
    /// </summary>
    public async Task<MeshTexture?> GetMetallicRoughnessTexture()
    {
        if (CoreJsModule is null)
        {
            return MetallicRoughnessTexture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MetallicRoughnessTexture;
        }

        // get the property value
        MeshTexture? result = await JsComponentReference!.InvokeAsync<MeshTexture?>("getProperty",
            CancellationTokenSource.Token, "metallicRoughnessTexture");
        if (result is not null)
        {
#pragma warning disable BL0005
             MetallicRoughnessTexture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MetallicRoughnessTexture)] = MetallicRoughnessTexture;
        }
         
        return MetallicRoughnessTexture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OcclusionTexture property.
    /// </summary>
    public async Task<MeshTexture?> GetOcclusionTexture()
    {
        if (CoreJsModule is null)
        {
            return OcclusionTexture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OcclusionTexture;
        }

        // get the property value
        MeshTexture? result = await JsComponentReference!.InvokeAsync<MeshTexture?>("getProperty",
            CancellationTokenSource.Token, "occlusionTexture");
        if (result is not null)
        {
#pragma warning disable BL0005
             OcclusionTexture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OcclusionTexture)] = OcclusionTexture;
        }
         
        return OcclusionTexture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OcclusionTextureTransform property.
    /// </summary>
    public async Task<MeshTextureTransform?> GetOcclusionTextureTransform()
    {
        if (CoreJsModule is null)
        {
            return OcclusionTextureTransform;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OcclusionTextureTransform;
        }

        // get the property value
        MeshTextureTransform? result = await JsComponentReference!.InvokeAsync<MeshTextureTransform?>("getProperty",
            CancellationTokenSource.Token, "occlusionTextureTransform");
        if (result is not null)
        {
#pragma warning disable BL0005
             OcclusionTextureTransform = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OcclusionTextureTransform)] = OcclusionTextureTransform;
        }
         
        return OcclusionTextureTransform;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Roughness property.
    /// </summary>
    public async Task<double?> GetRoughness()
    {
        if (CoreJsModule is null)
        {
            return Roughness;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Roughness;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "roughness");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Roughness = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Roughness)] = Roughness;
        }
         
        return Roughness;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the EmissiveColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEmissiveColor(MapColor? value)
    {
#pragma warning disable BL0005
        EmissiveColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EmissiveColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEmissiveColor", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EmissiveTexture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEmissiveTexture(MeshTexture? value)
    {
#pragma warning disable BL0005
        EmissiveTexture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EmissiveTexture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEmissiveTexture", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EmissiveTextureTransform property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEmissiveTextureTransform(MeshTextureTransform? value)
    {
#pragma warning disable BL0005
        EmissiveTextureTransform = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EmissiveTextureTransform)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEmissiveTextureTransform", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Metallic property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMetallic(double? value)
    {
#pragma warning disable BL0005
        Metallic = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Metallic)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "metallic", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MetallicRoughnessTexture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMetallicRoughnessTexture(MeshTexture? value)
    {
#pragma warning disable BL0005
        MetallicRoughnessTexture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MetallicRoughnessTexture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setMetallicRoughnessTexture", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OcclusionTexture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOcclusionTexture(MeshTexture? value)
    {
#pragma warning disable BL0005
        OcclusionTexture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OcclusionTexture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setOcclusionTexture", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OcclusionTextureTransform property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOcclusionTextureTransform(MeshTextureTransform? value)
    {
#pragma warning disable BL0005
        OcclusionTextureTransform = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OcclusionTextureTransform)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setOcclusionTextureTransform", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Roughness property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRoughness(double? value)
    {
#pragma warning disable BL0005
        Roughness = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Roughness)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "roughness", value);
    }
    
#endregion

}
