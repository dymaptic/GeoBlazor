// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Represents the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html">FeatureLayer</a> after it has been added to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html">Map</a> in either a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureLayerView : IFeatureLayerViewMixin,
    IHighlightLayerViewMixin
{

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A list of attribute fields fetched for each feature including fields required for layer's `renderer` `labelingInfo`, `elevationInfo`, and additional fields defined on the `outFields` properties.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#availableFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? AvailableFields { get; protected set; }
    
    /// <summary>
    ///     Indicates if the layer view is updating its data and new features are being fetched.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#dataUpdating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DataUpdating { get; protected set; }
    
    /// <summary>
    ///     The featureEffect can be used to draw attention features of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#featureEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureEffect? FeatureEffect { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#where">attribute</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#geometry">geometry</a>, and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#timeExtent">time extent</a> filter.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureFilter? Filter { get; set; }
    
    /// <summary>
    ///     Indicates whether the layer view contains all available features from the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#hasAllFeatures">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasAllFeatures { get; protected set; }
    
    /// <summary>
    ///     Indicates whether the layer view has all the features available in the current view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#hasAllFeaturesInView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasAllFeaturesInView { get; protected set; }
    
    /// <summary>
    ///     Indicates whether the layer view has geometries at full resolution.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#hasFullGeometries">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasFullGeometries { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AvailableFields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetAvailableFields()
    {
        if (CoreJsModule is null)
        {
            return AvailableFields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AvailableFields;
        }

        // get the property value
        IReadOnlyList<string>? result = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "availableFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             AvailableFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AvailableFields)] = AvailableFields;
        }
         
        return AvailableFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DataUpdating property.
    /// </summary>
    public async Task<bool?> GetDataUpdating()
    {
        if (CoreJsModule is null)
        {
            return DataUpdating;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DataUpdating;
        }

        // get the property value
        bool? result = await CoreJsModule!.InvokeAsync<bool?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "dataUpdating");
        if (result is not null)
        {
#pragma warning disable BL0005
             DataUpdating = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DataUpdating)] = DataUpdating;
        }
         
        return DataUpdating;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureEffect property.
    /// </summary>
    public async Task<FeatureEffect?> GetFeatureEffect()
    {
        if (CoreJsModule is null)
        {
            return FeatureEffect;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FeatureEffect;
        }

        // get the property value
        FeatureEffect? result = await CoreJsModule!.InvokeAsync<FeatureEffect?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "featureEffect");
        if (result is not null)
        {
#pragma warning disable BL0005
             FeatureEffect = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
        }
         
        return FeatureEffect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filter property.
    /// </summary>
    public async Task<FeatureFilter?> GetFilter()
    {
        if (CoreJsModule is null)
        {
            return Filter;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Filter;
        }

        // get the JS object reference
        IJSObjectReference? refResult = (await CoreJsModule!.InvokeAsync<JsObjectRefWrapper?>(
            "getObjectRefForProperty", CancellationTokenSource.Token, JsComponentReference, 
            "filter"))?.Value;
            
        if (refResult is null)
        {
            return null;
        }
        
        FeatureFilter? result = null;
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
            result = await CoreJsModule.InvokeAsync<FeatureFilter?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
            if (result is not null)
            {
#pragma warning disable BL0005
                Filter = result;
#pragma warning restore BL0005
                ModifiedParameters[nameof(Filter)] = Filter;
            }
            
            if (Filter is not null)
            {
                Filter.Parent = this;
                Filter.View = View;
                Filter.JsComponentReference = refResult;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, refResult, Filter.Id);
                return Filter;
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize Filter");
        }
#pragma warning disable BL0005
        Filter = new FeatureFilter();
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filter)] = Filter;
        Filter.Parent = this;
        Filter.View = View;
        Filter.JsComponentReference = refResult;
        // register this type in JS
        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
            CancellationTokenSource.Token, refResult, Filter.Id);
        await Filter.GetProperty<double>(nameof(FeatureFilter.Distance));
        await Filter.GetProperty<Geometry>(nameof(FeatureFilter.Geometry));
        await Filter.GetProperty<IReadOnlyList<long>>(nameof(FeatureFilter.ObjectIds));
        await Filter.GetProperty<SpatialRelationship>(nameof(FeatureFilter.SpatialRelationship));
        await Filter.GetProperty<TimeExtent>(nameof(FeatureFilter.TimeExtent));
        await Filter.GetProperty<QueryUnits>(nameof(FeatureFilter.Units));
        await Filter.GetProperty<string>(nameof(FeatureFilter.Where));
        return Filter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasAllFeatures property.
    /// </summary>
    public async Task<bool?> GetHasAllFeatures()
    {
        if (CoreJsModule is null)
        {
            return HasAllFeatures;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HasAllFeatures;
        }

        // get the property value
        bool? result = await CoreJsModule!.InvokeAsync<bool?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasAllFeatures");
        if (result is not null)
        {
#pragma warning disable BL0005
             HasAllFeatures = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasAllFeatures)] = HasAllFeatures;
        }
         
        return HasAllFeatures;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasAllFeaturesInView property.
    /// </summary>
    public async Task<bool?> GetHasAllFeaturesInView()
    {
        if (CoreJsModule is null)
        {
            return HasAllFeaturesInView;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HasAllFeaturesInView;
        }

        // get the property value
        bool? result = await CoreJsModule!.InvokeAsync<bool?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasAllFeaturesInView");
        if (result is not null)
        {
#pragma warning disable BL0005
             HasAllFeaturesInView = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasAllFeaturesInView)] = HasAllFeaturesInView;
        }
         
        return HasAllFeaturesInView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasFullGeometries property.
    /// </summary>
    public async Task<bool?> GetHasFullGeometries()
    {
        if (CoreJsModule is null)
        {
            return HasFullGeometries;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HasFullGeometries;
        }

        // get the property value
        bool? result = await CoreJsModule!.InvokeAsync<bool?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasFullGeometries");
        if (result is not null)
        {
#pragma warning disable BL0005
             HasFullGeometries = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasFullGeometries)] = HasFullGeometries;
        }
         
        return HasFullGeometries;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HighlightOptions property.
    /// </summary>
    public async Task<HighlightOptions?> GetHighlightOptions()
    {
        if (CoreJsModule is null)
        {
            return HighlightOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HighlightOptions;
        }

        // get the property value
        HighlightOptions? result = await CoreJsModule!.InvokeAsync<HighlightOptions?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "highlightOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             HighlightOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HighlightOptions)] = HighlightOptions;
        }
         
        return HighlightOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaximumNumberOfFeatures property.
    /// </summary>
    public async Task<double?> GetMaximumNumberOfFeatures()
    {
        if (CoreJsModule is null)
        {
            return MaximumNumberOfFeatures;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaximumNumberOfFeatures;
        }

        // get the property value
        double? result = await CoreJsModule!.InvokeAsync<double?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "maximumNumberOfFeatures");
        if (result is not null)
        {
#pragma warning disable BL0005
             MaximumNumberOfFeatures = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaximumNumberOfFeatures)] = MaximumNumberOfFeatures;
        }
         
        return MaximumNumberOfFeatures;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaximumNumberOfFeaturesExceeded property.
    /// </summary>
    public async Task<bool?> GetMaximumNumberOfFeaturesExceeded()
    {
        if (CoreJsModule is null)
        {
            return MaximumNumberOfFeaturesExceeded;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaximumNumberOfFeaturesExceeded;
        }

        // get the property value
        bool? result = await CoreJsModule!.InvokeAsync<bool?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "maximumNumberOfFeaturesExceeded");
        if (result is not null)
        {
#pragma warning disable BL0005
             MaximumNumberOfFeaturesExceeded = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaximumNumberOfFeaturesExceeded)] = MaximumNumberOfFeaturesExceeded;
        }
         
        return MaximumNumberOfFeaturesExceeded;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the HighlightOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHighlightOptions(HighlightOptions value)
    {
#pragma warning disable BL0005
        HighlightOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HighlightOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "highlightOptions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaximumNumberOfFeatures property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaximumNumberOfFeatures(double value)
    {
#pragma warning disable BL0005
        MaximumNumberOfFeatures = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaximumNumberOfFeatures)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maximumNumberOfFeatures", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaximumNumberOfFeaturesExceeded property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaximumNumberOfFeaturesExceeded(bool value)
    {
#pragma warning disable BL0005
        MaximumNumberOfFeaturesExceeded = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaximumNumberOfFeaturesExceeded)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maximumNumberOfFeaturesExceeded", value);
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     Creates query parameter object that can be used to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#queryAggregates">fetch aggregate features</a> as they are being displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#createAggregateQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Query?> CreateAggregateQuery()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Query?>(
            "createAggregateQuery", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against aggregate features (i.e.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#queryAggregates">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureSet?> QueryAggregates(Query query,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        FeatureSet? result = await JsComponentReference!.InvokeAsync<FeatureSet?>(
            "queryAggregates", 
            CancellationTokenSource.Token,
            query,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion




    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FeatureEffect featureEffect:
                if (featureEffect != FeatureEffect)
                {
                    FeatureEffect = featureEffect;
                    
                    ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
                }
                
                return true;
            case FeatureFilter filter:
                if (filter != Filter)
                {
                    Filter = filter;
                    
                    ModifiedParameters[nameof(Filter)] = Filter;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FeatureEffect _:
                FeatureEffect = null;
                
                ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
                return true;
            case FeatureFilter _:
                Filter = null;
                
                ModifiedParameters[nameof(Filter)] = Filter;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        FeatureEffect?.ValidateRequiredGeneratedChildren();
        Filter?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
