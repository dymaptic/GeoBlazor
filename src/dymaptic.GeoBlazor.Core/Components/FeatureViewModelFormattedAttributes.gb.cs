// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The formatted attributes calculated from `fieldInfo` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> content.
///    default null
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#formattedAttributes">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureViewModelFormattedAttributes : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureViewModelFormattedAttributes()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="content">
    ///     The formatted attributes for an individual content element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#formattedAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="global">
    ///     The formatted attributes specified at the root level of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#fieldInfos">PopupTemplate.fieldInfos</a> property.
    ///     <a target="_blank" href="global.html">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureViewModelFormattedAttributes(
        string? content = null,
        string? global = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Content = content;
        Global = global;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The formatted attributes for an individual content element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#formattedAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Content { get; set; }
    
    /// <summary>
    ///     The formatted attributes specified at the root level of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#fieldInfos">PopupTemplate.fieldInfos</a> property.
    ///     <a target="_blank" href="global.html">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Global { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Content property.
    /// </summary>
    public async Task<string?> GetContent()
    {
        if (CoreJsModule is null)
        {
            return Content;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Content;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "content");
        if (result is not null)
        {
#pragma warning disable BL0005
             Content = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Content)] = Content;
        }
         
        return Content;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Global property.
    /// </summary>
    public async Task<string?> GetGlobal()
    {
        if (CoreJsModule is null)
        {
            return Global;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Global;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "global");
        if (result is not null)
        {
#pragma warning disable BL0005
             Global = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Global)] = Global;
        }
         
        return Global;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Content property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetContent(string? value)
    {
#pragma warning disable BL0005
        Content = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Content)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "content", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Global property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGlobal(string? value)
    {
#pragma warning disable BL0005
        Global = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Global)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "global", value);
    }
    
#endregion

}
