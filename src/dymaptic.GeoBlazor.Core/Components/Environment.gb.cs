// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Environment.html">GeoBlazor Docs</a>
///     Represents settings that affect the environment in which the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html">WebScene</a> is displayed (such as lighting).
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Environment : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Environment()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="atmosphereEnabled">
    ///     Specifies whether the atmosphere should be displayed.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#atmosphereEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="background">
    ///     Specifies how the background of the scene (which lies behind sky, stars and atmosphere) should be displayed.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#background">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lighting">
    ///     Settings for defining the lighting of the scene.
    ///     default SunLighting
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#lighting">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="starsEnabled">
    ///     Specifies whether stars should be displayed in the sky.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#starsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="weather">
    ///     Indicates the type of weather visualization in the scene.
    ///     default SunnyWeather
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#weather">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Environment(
        bool? atmosphereEnabled = null,
        Background? background = null,
        IEnvironmentLighting? lighting = null,
        bool? starsEnabled = null,
        IEnvironmentWeather? weather = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AtmosphereEnabled = atmosphereEnabled;
        Background = background;
        Lighting = lighting;
        StarsEnabled = starsEnabled;
        Weather = weather;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies whether the atmosphere should be displayed.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#atmosphereEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AtmosphereEnabled { get; set; }
    
    /// <summary>
    ///     Specifies how the background of the scene (which lies behind sky, stars and atmosphere) should be displayed.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#background">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Background? Background { get; set; }
    
    /// <summary>
    ///     Settings for defining the lighting of the scene.
    ///     default SunLighting
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#lighting">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IEnvironmentLighting? Lighting { get; set; }
    
    /// <summary>
    ///     Specifies whether stars should be displayed in the sky.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#starsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? StarsEnabled { get; set; }
    
    /// <summary>
    ///     Indicates the type of weather visualization in the scene.
    ///     default SunnyWeather
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Environment.html#weather">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IEnvironmentWeather? Weather { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AtmosphereEnabled property.
    /// </summary>
    public async Task<bool?> GetAtmosphereEnabled()
    {
        if (CoreJsModule is null)
        {
            return AtmosphereEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AtmosphereEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "atmosphereEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AtmosphereEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AtmosphereEnabled)] = AtmosphereEnabled;
        }
         
        return AtmosphereEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Background property.
    /// </summary>
    public async Task<Background?> GetBackground()
    {
        if (CoreJsModule is null)
        {
            return Background;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Background;
        }

        Background? result = await JsComponentReference.InvokeAsync<Background?>(
            "getBackground", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Background = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Background)] = Background;
        }
        
        return Background;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Lighting property.
    /// </summary>
    public async Task<IEnvironmentLighting?> GetLighting()
    {
        if (CoreJsModule is null)
        {
            return Lighting;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Lighting;
        }

        IEnvironmentLighting? result = await JsComponentReference.InvokeAsync<IEnvironmentLighting?>(
            "getLighting", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Lighting is not null)
            {
                result.Id = Lighting.Id;
            }
            
#pragma warning disable BL0005
            Lighting = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Lighting)] = Lighting;
        }
        
        return Lighting;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StarsEnabled property.
    /// </summary>
    public async Task<bool?> GetStarsEnabled()
    {
        if (CoreJsModule is null)
        {
            return StarsEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StarsEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "starsEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             StarsEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StarsEnabled)] = StarsEnabled;
        }
         
        return StarsEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Weather property.
    /// </summary>
    public async Task<IEnvironmentWeather?> GetWeather()
    {
        if (CoreJsModule is null)
        {
            return Weather;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Weather;
        }

        IEnvironmentWeather? result = await JsComponentReference.InvokeAsync<IEnvironmentWeather?>(
            "getWeather", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Weather is not null)
            {
                result.Id = Weather.Id;
            }
            
#pragma warning disable BL0005
            Weather = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Weather)] = Weather;
        }
        
        return Weather;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AtmosphereEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAtmosphereEnabled(bool? value)
    {
#pragma warning disable BL0005
        AtmosphereEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AtmosphereEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "atmosphereEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Background property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBackground(Background? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Background = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Background)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "background", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Lighting property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLighting(IEnvironmentLighting? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Lighting = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Lighting)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lighting", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StarsEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStarsEnabled(bool? value)
    {
#pragma warning disable BL0005
        StarsEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StarsEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "starsEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Weather property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWeather(IEnvironmentWeather? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Weather = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Weather)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "weather", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Background background:
                if (background != Background)
                {
                    Background = background;
                    ModifiedParameters[nameof(Background)] = Background;
                }
                
                return true;
            case IEnvironmentLighting lighting:
                if (lighting != Lighting)
                {
                    Lighting = lighting;
                    ModifiedParameters[nameof(Lighting)] = Lighting;
                }
                
                return true;
            case IEnvironmentWeather weather:
                if (weather != Weather)
                {
                    Weather = weather;
                    ModifiedParameters[nameof(Weather)] = Weather;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Background _:
                Background = null;
                ModifiedParameters[nameof(Background)] = Background;
                return true;
            case IEnvironmentLighting _:
                Lighting = null;
                ModifiedParameters[nameof(Lighting)] = Lighting;
                return true;
            case IEnvironmentWeather _:
                Weather = null;
                ModifiedParameters[nameof(Weather)] = Weather;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Background?.ValidateRequiredGeneratedChildren();
        Lighting?.ValidateRequiredGeneratedChildren();
        Weather?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
