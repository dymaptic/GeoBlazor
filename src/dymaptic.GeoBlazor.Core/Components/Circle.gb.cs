// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A circle is a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html">Polygon</a> created by specifying a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#center">center point</a> and a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#radius">radius</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Circle : Polygon
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Circle()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The center point of the circle.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#center">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Center { get; set; }
    
    /// <summary>
    ///     Applicable when the spatial reference of the center point is either set to Web Mercator (wkid: 3857) or geographic/geodesic (wkid: 4326).
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#geodesic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Geodesic { get; set; }
    
    /// <summary>
    ///     This value defines the number of points along the curve of the circle.
    ///     default 60
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#numberOfPoints">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NumberOfPoints { get; set; }
    
    /// <summary>
    ///     The radius of the circle.
    ///     default 1000
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#radius">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Radius { get; set; }
    
    /// <summary>
    ///     Unit of the radius.
    ///     default meters
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Circle.html#radiusUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RadiusUnit? RadiusUnit { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Center property.
    /// </summary>
    public async Task<Point?> GetCenter()
    {
        if (CoreJsModule is null)
        {
            return Center;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Center;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getCenter", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Center is not null)
            {
                result.Id = Center.Id;
            }
            
#pragma warning disable BL0005
            Center = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Center)] = Center;
        }
        
        return Center;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Geodesic property.
    /// </summary>
    public async Task<bool?> GetGeodesic()
    {
        if (CoreJsModule is null)
        {
            return Geodesic;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Geodesic;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "geodesic");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Geodesic = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Geodesic)] = Geodesic;
        }
         
        return Geodesic;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumberOfPoints property.
    /// </summary>
    public async Task<double?> GetNumberOfPoints()
    {
        if (CoreJsModule is null)
        {
            return NumberOfPoints;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NumberOfPoints;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "numberOfPoints");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NumberOfPoints = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NumberOfPoints)] = NumberOfPoints;
        }
         
        return NumberOfPoints;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Radius property.
    /// </summary>
    public async Task<double?> GetRadius()
    {
        if (CoreJsModule is null)
        {
            return Radius;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Radius;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "radius");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Radius = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Radius)] = Radius;
        }
         
        return Radius;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RadiusUnit property.
    /// </summary>
    public async Task<RadiusUnit?> GetRadiusUnit()
    {
        if (CoreJsModule is null)
        {
            return RadiusUnit;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RadiusUnit;
        }

        // get the property value
        JsNullableEnumWrapper<RadiusUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<RadiusUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "radiusUnit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RadiusUnit = (RadiusUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RadiusUnit)] = RadiusUnit;
        }
         
        return RadiusUnit;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Center property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCenter(Point? value)
    {
#pragma warning disable BL0005
        Center = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Center)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setCenter", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Geodesic property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGeodesic(bool? value)
    {
#pragma warning disable BL0005
        Geodesic = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Geodesic)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "geodesic", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumberOfPoints property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumberOfPoints(double? value)
    {
#pragma warning disable BL0005
        NumberOfPoints = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumberOfPoints)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numberOfPoints", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Radius property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRadius(double? value)
    {
#pragma warning disable BL0005
        Radius = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Radius)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "radius", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RadiusUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRadiusUnit(RadiusUnit? value)
    {
#pragma warning disable BL0005
        RadiusUnit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RadiusUnit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "radiusUnit", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Point center:
                if (center != Center)
                {
                    Center = center;
                    
                    ModifiedParameters[nameof(Center)] = Center;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Point _:
                Center = null;
                
                ModifiedParameters[nameof(Center)] = Center;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Center?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
