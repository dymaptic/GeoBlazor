// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Layers;


/// <summary>
///    A FeatureLayer is a single layer that can be created from a <a target="_blank" href="https://enterprise.arcgis.com/en/server/latest/publish-services/windows/what-is-a-map-service.htm">Map Service</a> or <a target="_blank" href="https://enterprise.arcgis.com/en/server/latest/publish-services/windows/what-is-a-feature-service-.htm">Feature Service</a>; ArcGIS Online or ArcGIS Enterprise portal items; or from an array of client-side features.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureLayer : IAPIKeyMixin,
    IBlendLayer,
    ICustomParametersMixin,
    IFeatureEffectLayer,
    IFeatureSetLayer,
    IFeatureTableWidgetLayers,
    IFeatureTemplatesViewModelLayers,
    IFeatureTemplatesWidgetLayers,
    IOperationalLayer,
    IOrderedLayer,
    IPortalLayer,
    IPublishableLayer,
    IScaleRangeLayer,
    ITemporalLayer,
    IVersionAdaptersUtilsInput,
    IVersionAdapterVersionableItem
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureLayer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="url">
    ///     The absolute URL of the REST endpoint of the layer, non-spatial table or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItem">
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PortalLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="source">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html">Graphic</a> objects used to create a FeatureLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#source">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="outFields">
    ///     An array of field names from the service to include with each feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#outFields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="definitionExpression">
    ///     The SQL where clause used to filter features on the client.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#definitionExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minScale">
    ///     The minimum scale (most zoomed out) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#minScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxScale">
    ///     The maximum scale (most zoomed in) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#maxScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="objectIdField">
    ///     The name of an `oid` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#fields">field</a> containing a unique value or identifier for each feature in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#objectIdField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="geometryType">
    ///     The geometry type of features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#geometryType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the layer used to identify it in places such as the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="opacity">
    ///     The opacity of the layer.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates if the layer is visible in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="listMode">
    ///     Indicates how the layer should display in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     default "show"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupTemplate">
    ///     The popup template for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="apiKey">
    ///     An authorization string used to access a resource or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-APIKeyMixin.html#apiKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="arcGISLayerId">
    ///     The unique ID assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="blendMode">
    ///     Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#blendMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="charts">
    ///     Array of Chart Items of type WebMapWebChart available on the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#charts">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="copyright">
    ///     Copyright information for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#copyright">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customParameters">
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-CustomParametersMixin.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dateFieldsTimeZone">
    ///     The time zone that dates are stored in.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#dateFieldsTimeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="displayField">
    ///     The name of the layer's primary display field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#displayField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dynamicDataSource">
    ///     An object that allows you to create a dynamic layer with data either from map service sublayers or data from a registered workspace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#dynamicDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="editingEnabled">
    ///     Determines if the layer is editable.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#editingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="effect">
    ///     Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to how image filters work.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#effect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="elevationInfo">
    ///     Specifies how features are placed on the vertical axis (z).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#elevationInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureEffect">
    ///     The featureEffect can be used to draw attention features of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureEffectLayer.html#featureEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureReduction">
    ///     Configures the method for reducing the number of point features in the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureReductionLayer.html#featureReduction">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fields">
    ///     An array of fields in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="floorInfo">
    ///     When a feature layer is configured as floor-aware, it has a floorInfo property defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#floorInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="formTemplate">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html">template</a> used in an associated layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html">FeatureForm</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#formTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fullExtent">
    ///     The full extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fullExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="gdbVersion">
    ///     The version of the geodatabase of the feature service data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#gdbVersion">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasM">
    ///     Indicates whether the client-side features in the layer have `M` (measurement) values.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#hasM">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasZ">
    ///     Indicates whether the client-side features in the layer have `Z` (elevation) values.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#hasZ">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="historicMoment">
    ///     The historic moment to query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#historicMoment">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isBasemapReferenceLayer">
    ///     Indicates whether the layer is a basemap reference layer. Default value: false.
    /// </param>
    /// <param name="labelingInfo">
    ///     The label definition for this layer, specified as an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html">LabelClass</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#labelingInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="labelsVisible">
    ///     Indicates whether to display labels for this layer.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#labelsVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerIndex">
    ///     The layer ID, or layer index, of a Feature Service layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#layerId">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendEnabled">
    ///     Indicates whether the layer will be included in the legend.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#legendEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="orderBy">
    ///     Determines the order in which features are drawn in the view.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-OrderedLayer.html#orderBy">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="persistenceEnabled">
    ///     When `true`, the layer can be persisted.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupEnabled">
    ///     Indicates whether to display popups when features in the layer are clicked.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#popupEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="refreshInterval">
    ///     Refresh interval of the layer in minutes.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#refreshInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="renderer">
    ///     The renderer assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#renderer">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="returnM">
    ///     When `true`, indicates that M values will be returned.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#returnM">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="returnZ">
    ///     When `true`, indicates that z-values will always be returned.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#returnZ">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="screenSizePerspectiveEnabled">
    ///     Apply perspective scaling to screen-size point symbols in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#screenSizePerspectiveEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sourceJSON">
    ///     The <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm">feature service's metadata JSON</a> exposed by the ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="templates">
    ///     An array of feature templates defined in the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#templates">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeExtent">
    ///     The layer's time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeInfo">
    ///     TimeInfo provides information such as date fields that store <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField">start</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField">end</a> time for each feature and the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent">fullTimeExtent</a> for the layer.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeOffset">
    ///     A temporary offset of the time data based on a certain <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeInterval.html">TimeInterval</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeOffset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="typeIdField">
    ///     The name of the field holding the type ID for the features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#typeIdField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="types">
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html">types</a> defined in the feature service exposed by ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#types">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useViewTime">
    ///     Determines if the time enabled layer will update its temporal data based on the view's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent">timeExtent</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#useViewTime">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibilityTimeExtent">
    ///     Specifies a fixed <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html">time extent</a> during which a layer should be visible.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureLayer(
        string? url = null,
        PortalItem? portalItem = null,
        IReadOnlyList<Graphic>? source = null,
        IReadOnlyList<string>? outFields = null,
        string? definitionExpression = null,
        double? minScale = null,
        double? maxScale = null,
        string? objectIdField = null,
        FeatureGeometryType? geometryType = null,
        string? title = null,
        double? opacity = null,
        bool? visible = null,
        ListMode? listMode = null,
        PopupTemplate? popupTemplate = null,
        string? apiKey = null,
        string? arcGISLayerId = null,
        BlendMode? blendMode = null,
        IReadOnlyList<object>? charts = null,
        string? copyright = null,
        Dictionary<string, object>? customParameters = null,
        string? dateFieldsTimeZone = null,
        string? displayField = null,
        DynamicLayer? dynamicDataSource = null,
        bool? editingEnabled = null,
        Effect? effect = null,
        FeatureLayerBaseElevationInfo? elevationInfo = null,
        FeatureEffect? featureEffect = null,
        IFeatureReduction? featureReduction = null,
        IReadOnlyList<Field>? fields = null,
        LayerFloorInfo? floorInfo = null,
        IFormTemplate? formTemplate = null,
        Extent? fullExtent = null,
        string? gdbVersion = null,
        bool? hasM = null,
        bool? hasZ = null,
        DateTime? historicMoment = null,
        bool? isBasemapReferenceLayer = null,
        IReadOnlyList<Label>? labelingInfo = null,
        bool? labelsVisible = null,
        int? layerIndex = null,
        bool? legendEnabled = null,
        IReadOnlyList<OrderedLayerOrderBy>? orderBy = null,
        bool? persistenceEnabled = null,
        bool? popupEnabled = null,
        double? refreshInterval = null,
        Renderer? renderer = null,
        bool? returnM = null,
        bool? returnZ = null,
        bool? screenSizePerspectiveEnabled = null,
        object? sourceJSON = null,
        SpatialReference? spatialReference = null,
        IReadOnlyList<IFeatureTemplate>? templates = null,
        TimeExtent? timeExtent = null,
        TimeInfo? timeInfo = null,
        TimeInterval? timeOffset = null,
        string? typeIdField = null,
        IReadOnlyList<FeatureType>? types = null,
        bool? useViewTime = null,
        TimeExtent? visibilityTimeExtent = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Url = url;
        PortalItem = portalItem;
        Source = source;
        OutFields = outFields;
        DefinitionExpression = definitionExpression;
        MinScale = minScale;
        MaxScale = maxScale;
        ObjectIdField = objectIdField;
        GeometryType = geometryType;
        Title = title;
        Opacity = opacity;
        Visible = visible;
        ListMode = listMode;
        PopupTemplate = popupTemplate;
        ApiKey = apiKey;
        ArcGISLayerId = arcGISLayerId;
        BlendMode = blendMode;
        Charts = charts;
        Copyright = copyright;
        CustomParameters = customParameters;
        DateFieldsTimeZone = dateFieldsTimeZone;
        DisplayField = displayField;
        DynamicDataSource = dynamicDataSource;
        EditingEnabled = editingEnabled;
        Effect = effect;
        ElevationInfo = elevationInfo;
        FeatureEffect = featureEffect;
        FeatureReduction = featureReduction;
        Fields = fields;
        FloorInfo = floorInfo;
        FormTemplate = formTemplate;
        FullExtent = fullExtent;
        GdbVersion = gdbVersion;
        HasM = hasM;
        HasZ = hasZ;
        HistoricMoment = historicMoment;
        IsBasemapReferenceLayer = isBasemapReferenceLayer;
        LabelingInfo = labelingInfo;
        LabelsVisible = labelsVisible;
        LayerIndex = layerIndex;
        LegendEnabled = legendEnabled;
        OrderBy = orderBy;
        PersistenceEnabled = persistenceEnabled;
        PopupEnabled = popupEnabled;
        RefreshInterval = refreshInterval;
        Renderer = renderer;
        ReturnM = returnM;
        ReturnZ = returnZ;
        ScreenSizePerspectiveEnabled = screenSizePerspectiveEnabled;
        SourceJSON = sourceJSON;
        SpatialReference = spatialReference;
        Templates = templates;
        TimeExtent = timeExtent;
        TimeInfo = timeInfo;
        TimeOffset = timeOffset;
        TypeIdField = typeIdField;
        Types = types;
        UseViewTime = useViewTime;
        VisibilityTimeExtent = visibilityTimeExtent;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Describes the layer's supported capabilities.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public FeatureLayerCapabilities? Capabilities { get; protected set; }
    
    /// <summary>
    ///     Array of Chart Items of type WebMapWebChart available on the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#charts">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<object>? Charts { get; set; }
    
    /// <summary>
    ///     Copyright information for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#copyright">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Copyright { get; set; }
    
    /// <summary>
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-CustomParametersMixin.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Dictionary<string, object>? CustomParameters { get; set; }
    
    /// <summary>
    ///     The time zone that dates are stored in.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#dateFieldsTimeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? DateFieldsTimeZone { get; set; }
    
    /// <summary>
    ///     This property is set by the service publisher and indicates that dates should be considered without the local timezone.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#datesInUnknownTimezone">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? DatesInUnknownTimezone { get; protected set; }
    
    /// <summary>
    ///     The name of the layer's primary display field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#displayField">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? DisplayField { get; set; }
    
    /// <summary>
    ///     An object that allows you to create a dynamic layer with data either from map service sublayers or data from a registered workspace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#dynamicDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DynamicLayer? DynamicDataSource { get; set; }
    
    /// <summary>
    ///     The editor tracking fields, which record who adds or edits the data through the feature service and when edits are made.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#editFieldsInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public EditFieldsInfo? EditFieldsInfo { get; protected set; }
    
    /// <summary>
    ///     Determines if the layer is editable.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#editingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? EditingEnabled { get; set; }
    
    /// <summary>
    ///     Specifies information about editing.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#editingInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public EditingInfo? EditingInfo { get; protected set; }
    
    /// <summary>
    ///     Describes effective capabilities of the layer taking in to consideration privileges of the currently signed-in user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#effectiveCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Capabilities? EffectiveCapabilities { get; protected set; }
    
    /// <summary>
    ///     Indicates whether the layer is editable taking in to consideration privileges of the currently signed-in user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#effectiveEditingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? EffectiveEditingEnabled { get; protected set; }
    
    /// <summary>
    ///     Specifies how features are placed on the vertical axis (z).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#elevationInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureLayerBaseElevationInfo? ElevationInfo { get; set; }
    
    /// <summary>
    ///     The featureEffect can be used to draw attention features of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureEffectLayer.html#featureEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureEffect? FeatureEffect { get; set; }
    
    /// <summary>
    ///     An array of fields in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Field>? Fields { get; set; }
    
    /// <summary>
    ///     A convenient property that can be used to make case-insensitive lookups for a field by name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#fieldsIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public FieldsIndex? FieldsIndex { get; protected set; }
    
    /// <summary>
    ///     When a feature layer is configured as floor-aware, it has a floorInfo property defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#floorInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerFloorInfo? FloorInfo { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html">template</a> used in an associated layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html">FeatureForm</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#formTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IFormTemplate? FormTemplate { get; set; }
    
    /// <summary>
    ///     The version of the geodatabase of the feature service data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#gdbVersion">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? GdbVersion { get; set; }
    
    /// <summary>
    ///     Provides information on the system maintained area and length fields along with their respective units.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#geometryFieldsInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public GeometryFieldsInfo? GeometryFieldsInfo { get; protected set; }
    
    /// <summary>
    ///     Indicates whether the client-side features in the layer have `M` (measurement) values.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#hasM">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasM { get; set; }
    
    /// <summary>
    ///     Indicates whether the client-side features in the layer have `Z` (elevation) values.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#hasZ">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasZ { get; set; }
    
    /// <summary>
    ///     The historic moment to query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#historicMoment">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? HistoricMoment { get; set; }
    
    /// <summary>
    ///     Returns `true` if the layer is loaded from a non-spatial table in a service.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#isTable">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? IsTable { get; protected set; }
    
    /// <summary>
    ///     The label definition for this layer, specified as an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html">LabelClass</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#labelingInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Label>? LabelingInfo { get; set; }
    
    /// <summary>
    ///     Indicates whether to display labels for this layer.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#labelsVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LabelsVisible { get; set; }
    
    /// <summary>
    ///     The layer ID, or layer index, of a Feature Service layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#layerId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? LayerIndex { get; set; }
    
    /// <summary>
    ///     Determines the order in which features are drawn in the view.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-OrderedLayer.html#orderBy">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<OrderedLayerOrderBy>? OrderBy { get; set; }
    
    /// <summary>
    ///     An array of field names from the service to include with each feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#outFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? OutFields { get; set; }
    
    /// <summary>
    ///     The popup template for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupTemplate? PopupTemplate { get; set; }
    
    /// <summary>
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PortalLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(Url), nameof(Source))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalItem? PortalItem { get; set; }
    
    /// <summary>
    ///     The IANA time zone the author of the service intended data from date fields to be viewed in.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#preferredTimeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? PreferredTimeZone { get; protected set; }
    
    /// <summary>
    ///     Checks layer's publishing status while the layer is being published to the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PublishableLayer.html#publishingInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public PublishingInfo? PublishingInfo { get; protected set; }
    
    /// <summary>
    ///     Refresh interval of the layer in minutes.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#refreshInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? RefreshInterval { get; set; }
    
    /// <summary>
    ///     Array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html">relationships</a> set up for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#relationships">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<Relationship>? Relationships { get; protected set; }
    
    /// <summary>
    ///     The renderer assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#renderer">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Renderer? Renderer { get; set; }
    
    /// <summary>
    ///     When `true`, indicates that M values will be returned.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#returnM">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ReturnM { get; set; }
    
    /// <summary>
    ///     When `true`, indicates that z-values will always be returned.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#returnZ">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ReturnZ { get; set; }
    
    /// <summary>
    ///     Apply perspective scaling to screen-size point symbols in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#screenSizePerspectiveEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ScreenSizePerspectiveEnabled { get; set; }
    
    /// <summary>
    ///     The service definition expression limits the features available for display and query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#serviceDefinitionExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? ServiceDefinitionExpression { get; protected set; }
    
    /// <summary>
    ///     Indicates the portal item of the hosted feature service that contains this layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#serviceItemId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? ServiceItemId { get; protected set; }
    
    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html">Graphic</a> objects used to create a FeatureLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#source">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(Url), nameof(PortalItem))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Graphic>? Source { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm">feature service's metadata JSON</a> exposed by the ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public object? SourceJSON { get; set; }
    
    /// <summary>
    ///     The spatial reference of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
    /// <summary>
    ///     The name of the field which holds the id of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#subtypes">subtypes</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#subtypeField">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? SubtypeField { get; protected set; }
    
    /// <summary>
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html">subtypes</a> defined in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#subtypes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<Subtype>? Subtypes { get; protected set; }
    
    /// <summary>
    ///     An array of feature templates defined in the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#templates">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<IFeatureTemplate>? Templates { get; set; }
    
    /// <summary>
    ///     The layer's time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TimeExtent? TimeExtent { get; set; }
    
    /// <summary>
    ///     TimeInfo provides information such as date fields that store <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField">start</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField">end</a> time for each feature and the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent">fullTimeExtent</a> for the layer.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TimeInfo? TimeInfo { get; set; }
    
    /// <summary>
    ///     A temporary offset of the time data based on a certain <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeInterval.html">TimeInterval</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeOffset">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TimeInterval? TimeOffset { get; set; }
    
    /// <summary>
    ///     The name of the field holding the type ID for the features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#typeIdField">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TypeIdField { get; set; }
    
    /// <summary>
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html">types</a> defined in the feature service exposed by ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#types">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<FeatureType>? Types { get; set; }
    
    /// <summary>
    ///     The absolute URL of the REST endpoint of the layer, non-spatial table or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(PortalItem), nameof(Source))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; set; }
    
    /// <summary>
    ///     Determines if the time enabled layer will update its temporal data based on the view's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent">timeExtent</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#useViewTime">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UseViewTime { get; set; }
    
    /// <summary>
    ///     The version of ArcGIS Server in which the layer is published.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#version">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public double? Version { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ApiKey property.
    /// </summary>
    public async Task<string?> GetApiKey()
    {
        if (CoreJsModule is null)
        {
            return ApiKey;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ApiKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "apiKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             ApiKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ApiKey)] = ApiKey;
        }
         
        return ApiKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BlendMode property.
    /// </summary>
    public async Task<BlendMode?> GetBlendMode()
    {
        if (CoreJsModule is null)
        {
            return BlendMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BlendMode;
        }

        // get the property value
        JsNullableEnumWrapper<BlendMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<BlendMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "blendMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BlendMode = (BlendMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BlendMode)] = BlendMode;
        }
         
        return BlendMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Charts property.
    /// </summary>
    public async Task<IReadOnlyList<object>?> GetCharts()
    {
        if (CoreJsModule is null)
        {
            return Charts;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Charts;
        }

        // get the property value
        IReadOnlyList<object>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<object>?>("getProperty",
            CancellationTokenSource.Token, "charts");
        if (result is not null)
        {
#pragma warning disable BL0005
             Charts = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Charts)] = Charts;
        }
         
        return Charts;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Copyright property.
    /// </summary>
    public async Task<string?> GetCopyright()
    {
        if (CoreJsModule is null)
        {
            return Copyright;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Copyright;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "copyright");
        if (result is not null)
        {
#pragma warning disable BL0005
             Copyright = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Copyright)] = Copyright;
        }
         
        return Copyright;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomParameters property.
    /// </summary>
    public async Task<Dictionary<string, object>?> GetCustomParameters()
    {
        if (CoreJsModule is null)
        {
            return CustomParameters;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomParameters;
        }

        // get the property value
        Dictionary<string, object>? result = await JsComponentReference!.InvokeAsync<Dictionary<string, object>?>("getProperty",
            CancellationTokenSource.Token, "customParameters");
        if (result is not null)
        {
#pragma warning disable BL0005
             CustomParameters = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomParameters)] = CustomParameters;
        }
         
        return CustomParameters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DateFieldsTimeZone property.
    /// </summary>
    public async Task<string?> GetDateFieldsTimeZone()
    {
        if (CoreJsModule is null)
        {
            return DateFieldsTimeZone;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DateFieldsTimeZone;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "dateFieldsTimeZone");
        if (result is not null)
        {
#pragma warning disable BL0005
             DateFieldsTimeZone = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DateFieldsTimeZone)] = DateFieldsTimeZone;
        }
         
        return DateFieldsTimeZone;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DatesInUnknownTimezone property.
    /// </summary>
    public async Task<bool?> GetDatesInUnknownTimezone()
    {
        if (CoreJsModule is null)
        {
            return DatesInUnknownTimezone;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DatesInUnknownTimezone;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "datesInUnknownTimezone");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DatesInUnknownTimezone = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DatesInUnknownTimezone)] = DatesInUnknownTimezone;
        }
         
        return DatesInUnknownTimezone;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefinitionExpression property.
    /// </summary>
    public async Task<string?> GetDefinitionExpression()
    {
        if (CoreJsModule is null)
        {
            return DefinitionExpression;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefinitionExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "definitionExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             DefinitionExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefinitionExpression)] = DefinitionExpression;
        }
         
        return DefinitionExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DisplayField property.
    /// </summary>
    public async Task<string?> GetDisplayField()
    {
        if (CoreJsModule is null)
        {
            return DisplayField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DisplayField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "displayField");
        if (result is not null)
        {
#pragma warning disable BL0005
             DisplayField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DisplayField)] = DisplayField;
        }
         
        return DisplayField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DynamicDataSource property.
    /// </summary>
    public async Task<DynamicLayer?> GetDynamicDataSource()
    {
        if (CoreJsModule is null)
        {
            return DynamicDataSource;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DynamicDataSource;
        }

        // get the property value
        DynamicLayer? result = await JsComponentReference!.InvokeAsync<DynamicLayer?>("getProperty",
            CancellationTokenSource.Token, "dynamicDataSource");
        if (result is not null)
        {
#pragma warning disable BL0005
             DynamicDataSource = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DynamicDataSource)] = DynamicDataSource;
        }
         
        return DynamicDataSource;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditFieldsInfo property.
    /// </summary>
    public async Task<EditFieldsInfo?> GetEditFieldsInfo()
    {
        if (CoreJsModule is null)
        {
            return EditFieldsInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EditFieldsInfo;
        }

        // get the property value
        EditFieldsInfo? result = await JsComponentReference!.InvokeAsync<EditFieldsInfo?>("getProperty",
            CancellationTokenSource.Token, "editFieldsInfo");
        if (result is not null)
        {
#pragma warning disable BL0005
             EditFieldsInfo = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditFieldsInfo)] = EditFieldsInfo;
        }
         
        return EditFieldsInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditingEnabled property.
    /// </summary>
    public async Task<bool?> GetEditingEnabled()
    {
        if (CoreJsModule is null)
        {
            return EditingEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EditingEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "editingEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EditingEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditingEnabled)] = EditingEnabled;
        }
         
        return EditingEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditingInfo property.
    /// </summary>
    public async Task<EditingInfo?> GetEditingInfo()
    {
        if (CoreJsModule is null)
        {
            return EditingInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EditingInfo;
        }

        // get the property value
        EditingInfo? result = await JsComponentReference!.InvokeAsync<EditingInfo?>("getProperty",
            CancellationTokenSource.Token, "editingInfo");
        if (result is not null)
        {
#pragma warning disable BL0005
             EditingInfo = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditingInfo)] = EditingInfo;
        }
         
        return EditingInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Effect property.
    /// </summary>
    public async Task<Effect?> GetEffect()
    {
        if (CoreJsModule is null)
        {
            return Effect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Effect;
        }

        Effect? result = await JsComponentReference.InvokeAsync<Effect?>(
            "getEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Effect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Effect)] = Effect;
        }
        
        return Effect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EffectiveCapabilities property.
    /// </summary>
    public async Task<Capabilities?> GetEffectiveCapabilities()
    {
        if (CoreJsModule is null)
        {
            return EffectiveCapabilities;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EffectiveCapabilities;
        }

        Capabilities? result = await JsComponentReference.InvokeAsync<Capabilities?>(
            "getEffectiveCapabilities", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            EffectiveCapabilities = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(EffectiveCapabilities)] = EffectiveCapabilities;
        }
        
        return EffectiveCapabilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EffectiveEditingEnabled property.
    /// </summary>
    public async Task<bool?> GetEffectiveEditingEnabled()
    {
        if (CoreJsModule is null)
        {
            return EffectiveEditingEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EffectiveEditingEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "effectiveEditingEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EffectiveEditingEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EffectiveEditingEnabled)] = EffectiveEditingEnabled;
        }
         
        return EffectiveEditingEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ElevationInfo property.
    /// </summary>
    public async Task<FeatureLayerBaseElevationInfo?> GetElevationInfo()
    {
        if (CoreJsModule is null)
        {
            return ElevationInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ElevationInfo;
        }

        FeatureLayerBaseElevationInfo? result = await JsComponentReference.InvokeAsync<FeatureLayerBaseElevationInfo?>(
            "getElevationInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ElevationInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ElevationInfo)] = ElevationInfo;
        }
        
        return ElevationInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureEffect property.
    /// </summary>
    public async Task<FeatureEffect?> GetFeatureEffect()
    {
        if (CoreJsModule is null)
        {
            return FeatureEffect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureEffect;
        }

        FeatureEffect? result = await JsComponentReference.InvokeAsync<FeatureEffect?>(
            "getFeatureEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FeatureEffect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
        }
        
        return FeatureEffect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureReduction property.
    /// </summary>
    public async Task<IFeatureReduction?> GetFeatureReduction()
    {
        if (CoreJsModule is null)
        {
            return FeatureReduction;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureReduction;
        }

        // get the property value
        IFeatureReduction? result = await JsComponentReference!.InvokeAsync<IFeatureReduction?>("getProperty",
            CancellationTokenSource.Token, "featureReduction");
        if (result is not null)
        {
#pragma warning disable BL0005
             FeatureReduction = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureReduction)] = FeatureReduction;
        }
         
        return FeatureReduction;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Fields property.
    /// </summary>
    public async Task<IReadOnlyList<Field>?> GetFields()
    {
        if (CoreJsModule is null)
        {
            return Fields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Fields;
        }

        IReadOnlyList<Field>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Field>?>(
            "getFields", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Fields = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Fields)] = Fields;
        }
        
        return Fields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FieldsIndex property.
    /// </summary>
    public async Task<FieldsIndex?> GetFieldsIndex()
    {
        if (CoreJsModule is null)
        {
            return FieldsIndex;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FieldsIndex;
        }

        FieldsIndex? result = await JsComponentReference.InvokeAsync<FieldsIndex?>(
            "getFieldsIndex", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FieldsIndex = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FieldsIndex)] = FieldsIndex;
        }
        
        return FieldsIndex;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FloorInfo property.
    /// </summary>
    public async Task<LayerFloorInfo?> GetFloorInfo()
    {
        if (CoreJsModule is null)
        {
            return FloorInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FloorInfo;
        }

        LayerFloorInfo? result = await JsComponentReference.InvokeAsync<LayerFloorInfo?>(
            "getFloorInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FloorInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FloorInfo)] = FloorInfo;
        }
        
        return FloorInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FormTemplate property.
    /// </summary>
    public async Task<IFormTemplate?> GetFormTemplate()
    {
        if (CoreJsModule is null)
        {
            return FormTemplate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FormTemplate;
        }

        // get the property value
        IFormTemplate? result = await JsComponentReference!.InvokeAsync<IFormTemplate?>("getProperty",
            CancellationTokenSource.Token, "formTemplate");
        if (result is not null)
        {
#pragma warning disable BL0005
             FormTemplate = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FormTemplate)] = FormTemplate;
        }
         
        return FormTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GdbVersion property.
    /// </summary>
    public async Task<string?> GetGdbVersion()
    {
        if (CoreJsModule is null)
        {
            return GdbVersion;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GdbVersion;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "gdbVersion");
        if (result is not null)
        {
#pragma warning disable BL0005
             GdbVersion = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GdbVersion)] = GdbVersion;
        }
         
        return GdbVersion;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GeometryFieldsInfo property.
    /// </summary>
    public async Task<GeometryFieldsInfo?> GetGeometryFieldsInfo()
    {
        if (CoreJsModule is null)
        {
            return GeometryFieldsInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GeometryFieldsInfo;
        }

        // get the property value
        GeometryFieldsInfo? result = await JsComponentReference!.InvokeAsync<GeometryFieldsInfo?>("getProperty",
            CancellationTokenSource.Token, "geometryFieldsInfo");
        if (result is not null)
        {
#pragma warning disable BL0005
             GeometryFieldsInfo = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GeometryFieldsInfo)] = GeometryFieldsInfo;
        }
         
        return GeometryFieldsInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GeometryType property.
    /// </summary>
    public async Task<FeatureGeometryType?> GetGeometryType()
    {
        if (CoreJsModule is null)
        {
            return GeometryType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GeometryType;
        }

        // get the property value
        JsNullableEnumWrapper<FeatureGeometryType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<FeatureGeometryType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "geometryType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GeometryType = (FeatureGeometryType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GeometryType)] = GeometryType;
        }
         
        return GeometryType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasM property.
    /// </summary>
    public async Task<bool?> GetHasM()
    {
        if (CoreJsModule is null)
        {
            return HasM;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasM;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasM");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasM = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasM)] = HasM;
        }
         
        return HasM;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasZ property.
    /// </summary>
    public async Task<bool?> GetHasZ()
    {
        if (CoreJsModule is null)
        {
            return HasZ;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasZ;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasZ");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasZ = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasZ)] = HasZ;
        }
         
        return HasZ;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HistoricMoment property.
    /// </summary>
    public async Task<DateTime?> GetHistoricMoment()
    {
        if (CoreJsModule is null)
        {
            return HistoricMoment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HistoricMoment;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "historicMoment");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HistoricMoment = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HistoricMoment)] = HistoricMoment;
        }
         
        return HistoricMoment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsTable property.
    /// </summary>
    public async Task<bool?> GetIsTable()
    {
        if (CoreJsModule is null)
        {
            return IsTable;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IsTable;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isTable");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsTable = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsTable)] = IsTable;
        }
         
        return IsTable;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LabelingInfo property.
    /// </summary>
    public async Task<IReadOnlyList<Label>?> GetLabelingInfo()
    {
        if (CoreJsModule is null)
        {
            return LabelingInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LabelingInfo;
        }

        IReadOnlyList<Label>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Label>?>(
            "getLabelingInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            LabelingInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(LabelingInfo)] = LabelingInfo;
        }
        
        return LabelingInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LabelsVisible property.
    /// </summary>
    public async Task<bool?> GetLabelsVisible()
    {
        if (CoreJsModule is null)
        {
            return LabelsVisible;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LabelsVisible;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "labelsVisible");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LabelsVisible = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LabelsVisible)] = LabelsVisible;
        }
         
        return LabelsVisible;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerIndex property.
    /// </summary>
    public async Task<int?> GetLayerIndex()
    {
        if (CoreJsModule is null)
        {
            return LayerIndex;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LayerIndex;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "layerIndex");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LayerIndex = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LayerIndex)] = LayerIndex;
        }
         
        return LayerIndex;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendEnabled property.
    /// </summary>
    public async Task<bool?> GetLegendEnabled()
    {
        if (CoreJsModule is null)
        {
            return LegendEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LegendEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "legendEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LegendEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LegendEnabled)] = LegendEnabled;
        }
         
        return LegendEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxScale property.
    /// </summary>
    public async Task<double?> GetMaxScale()
    {
        if (CoreJsModule is null)
        {
            return MaxScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxScale)] = MaxScale;
        }
         
        return MaxScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinScale property.
    /// </summary>
    public async Task<double?> GetMinScale()
    {
        if (CoreJsModule is null)
        {
            return MinScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MinScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinScale)] = MinScale;
        }
         
        return MinScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ObjectIdField property.
    /// </summary>
    public async Task<string?> GetObjectIdField()
    {
        if (CoreJsModule is null)
        {
            return ObjectIdField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ObjectIdField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "objectIdField");
        if (result is not null)
        {
#pragma warning disable BL0005
             ObjectIdField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ObjectIdField)] = ObjectIdField;
        }
         
        return ObjectIdField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OrderBy property.
    /// </summary>
    public async Task<IReadOnlyList<OrderedLayerOrderBy>?> GetOrderBy()
    {
        if (CoreJsModule is null)
        {
            return OrderBy;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return OrderBy;
        }

        IReadOnlyList<OrderedLayerOrderBy>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<OrderedLayerOrderBy>?>(
            "getOrderBy", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            OrderBy = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(OrderBy)] = OrderBy;
        }
        
        return OrderBy;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OutFields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetOutFields()
    {
        if (CoreJsModule is null)
        {
            return OutFields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return OutFields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "outFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             OutFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OutFields)] = OutFields;
        }
         
        return OutFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupEnabled property.
    /// </summary>
    public async Task<bool?> GetPopupEnabled()
    {
        if (CoreJsModule is null)
        {
            return PopupEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "popupEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PopupEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PopupEnabled)] = PopupEnabled;
        }
         
        return PopupEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupTemplate property.
    /// </summary>
    public async Task<PopupTemplate?> GetPopupTemplate()
    {
        if (CoreJsModule is null)
        {
            return PopupTemplate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupTemplate;
        }

        PopupTemplate? result = await JsComponentReference.InvokeAsync<PopupTemplate?>(
            "getPopupTemplate", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            PopupTemplate = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
        }
        
        return PopupTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalItem property.
    /// </summary>
    public async Task<PortalItem?> GetPortalItem()
    {
        if (CoreJsModule is null)
        {
            return PortalItem;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalItem;
        }

        PortalItem? result = await JsComponentReference.InvokeAsync<PortalItem?>(
            "getPortalItem", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (PortalItem is not null)
            {
                result.Id = PortalItem.Id;
            }
            
#pragma warning disable BL0005
            PortalItem = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PortalItem)] = PortalItem;
        }
        
        return PortalItem;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PreferredTimeZone property.
    /// </summary>
    public async Task<string?> GetPreferredTimeZone()
    {
        if (CoreJsModule is null)
        {
            return PreferredTimeZone;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PreferredTimeZone;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "preferredTimeZone");
        if (result is not null)
        {
#pragma warning disable BL0005
             PreferredTimeZone = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PreferredTimeZone)] = PreferredTimeZone;
        }
         
        return PreferredTimeZone;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PublishingInfo property.
    /// </summary>
    public async Task<PublishingInfo?> GetPublishingInfo()
    {
        if (CoreJsModule is null)
        {
            return PublishingInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PublishingInfo;
        }

        // get the property value
        PublishingInfo? result = await JsComponentReference!.InvokeAsync<PublishingInfo?>("getProperty",
            CancellationTokenSource.Token, "publishingInfo");
        if (result is not null)
        {
#pragma warning disable BL0005
             PublishingInfo = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PublishingInfo)] = PublishingInfo;
        }
         
        return PublishingInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RefreshInterval property.
    /// </summary>
    public async Task<double?> GetRefreshInterval()
    {
        if (CoreJsModule is null)
        {
            return RefreshInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RefreshInterval;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "refreshInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RefreshInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RefreshInterval)] = RefreshInterval;
        }
         
        return RefreshInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Relationships property.
    /// </summary>
    public async Task<IReadOnlyList<Relationship>?> GetRelationships()
    {
        if (CoreJsModule is null)
        {
            return Relationships;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Relationships;
        }

        // get the property value
        IReadOnlyList<Relationship>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<Relationship>?>("getProperty",
            CancellationTokenSource.Token, "relationships");
        if (result is not null)
        {
#pragma warning disable BL0005
             Relationships = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Relationships)] = Relationships;
        }
         
        return Relationships;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Renderer property.
    /// </summary>
    public async Task<Renderer?> GetRenderer()
    {
        if (CoreJsModule is null)
        {
            return Renderer;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Renderer;
        }

        Renderer? result = await JsComponentReference.InvokeAsync<Renderer?>(
            "getRenderer", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Renderer = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Renderer)] = Renderer;
        }
        
        return Renderer;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReturnM property.
    /// </summary>
    public async Task<bool?> GetReturnM()
    {
        if (CoreJsModule is null)
        {
            return ReturnM;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ReturnM;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "returnM");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ReturnM = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ReturnM)] = ReturnM;
        }
         
        return ReturnM;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReturnZ property.
    /// </summary>
    public async Task<bool?> GetReturnZ()
    {
        if (CoreJsModule is null)
        {
            return ReturnZ;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ReturnZ;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "returnZ");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ReturnZ = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ReturnZ)] = ReturnZ;
        }
         
        return ReturnZ;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ScreenSizePerspectiveEnabled property.
    /// </summary>
    public async Task<bool?> GetScreenSizePerspectiveEnabled()
    {
        if (CoreJsModule is null)
        {
            return ScreenSizePerspectiveEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ScreenSizePerspectiveEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "screenSizePerspectiveEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ScreenSizePerspectiveEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ScreenSizePerspectiveEnabled)] = ScreenSizePerspectiveEnabled;
        }
         
        return ScreenSizePerspectiveEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceDefinitionExpression property.
    /// </summary>
    public async Task<string?> GetServiceDefinitionExpression()
    {
        if (CoreJsModule is null)
        {
            return ServiceDefinitionExpression;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ServiceDefinitionExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "serviceDefinitionExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             ServiceDefinitionExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ServiceDefinitionExpression)] = ServiceDefinitionExpression;
        }
         
        return ServiceDefinitionExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceItemId property.
    /// </summary>
    public async Task<string?> GetServiceItemId()
    {
        if (CoreJsModule is null)
        {
            return ServiceItemId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ServiceItemId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "serviceItemId");
        if (result is not null)
        {
#pragma warning disable BL0005
             ServiceItemId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ServiceItemId)] = ServiceItemId;
        }
         
        return ServiceItemId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<object?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
        object? result = await JsComponentReference!.InvokeAsync<object?>("getProperty",
            CancellationTokenSource.Token, "sourceJSON");
        if (result is not null)
        {
#pragma warning disable BL0005
             SourceJSON = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        }
         
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        SpatialReference? result = await JsComponentReference.InvokeAsync<SpatialReference?>(
            "getSpatialReference", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SpatialReference = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
        
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SubtypeField property.
    /// </summary>
    public async Task<string?> GetSubtypeField()
    {
        if (CoreJsModule is null)
        {
            return SubtypeField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SubtypeField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "subtypeField");
        if (result is not null)
        {
#pragma warning disable BL0005
             SubtypeField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SubtypeField)] = SubtypeField;
        }
         
        return SubtypeField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Subtypes property.
    /// </summary>
    public async Task<IReadOnlyList<Subtype>?> GetSubtypes()
    {
        if (CoreJsModule is null)
        {
            return Subtypes;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Subtypes;
        }

        IReadOnlyList<Subtype>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Subtype>?>(
            "getSubtypes", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Subtypes = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Subtypes)] = Subtypes;
        }
        
        return Subtypes;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Templates property.
    /// </summary>
    public async Task<IReadOnlyList<IFeatureTemplate>?> GetTemplates()
    {
        if (CoreJsModule is null)
        {
            return Templates;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Templates;
        }

        // get the property value
        IReadOnlyList<IFeatureTemplate>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<IFeatureTemplate>?>("getProperty",
            CancellationTokenSource.Token, "templates");
        if (result is not null)
        {
#pragma warning disable BL0005
             Templates = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Templates)] = Templates;
        }
         
        return Templates;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeExtent property.
    /// </summary>
    public async Task<TimeExtent?> GetTimeExtent()
    {
        if (CoreJsModule is null)
        {
            return TimeExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeExtent;
        }

        TimeExtent? result = await JsComponentReference.InvokeAsync<TimeExtent?>(
            "getTimeExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (TimeExtent is not null)
            {
                result.Id = TimeExtent.Id;
            }
            
#pragma warning disable BL0005
            TimeExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
        }
        
        return TimeExtent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeInfo property.
    /// </summary>
    public async Task<TimeInfo?> GetTimeInfo()
    {
        if (CoreJsModule is null)
        {
            return TimeInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeInfo;
        }

        TimeInfo? result = await JsComponentReference.InvokeAsync<TimeInfo?>(
            "getTimeInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TimeInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeInfo)] = TimeInfo;
        }
        
        return TimeInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeOffset property.
    /// </summary>
    public async Task<TimeInterval?> GetTimeOffset()
    {
        if (CoreJsModule is null)
        {
            return TimeOffset;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeOffset;
        }

        TimeInterval? result = await JsComponentReference.InvokeAsync<TimeInterval?>(
            "getTimeOffset", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TimeOffset = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeOffset)] = TimeOffset;
        }
        
        return TimeOffset;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TypeIdField property.
    /// </summary>
    public async Task<string?> GetTypeIdField()
    {
        if (CoreJsModule is null)
        {
            return TypeIdField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TypeIdField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "typeIdField");
        if (result is not null)
        {
#pragma warning disable BL0005
             TypeIdField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TypeIdField)] = TypeIdField;
        }
         
        return TypeIdField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Types property.
    /// </summary>
    public async Task<IReadOnlyList<FeatureType>?> GetTypes()
    {
        if (CoreJsModule is null)
        {
            return Types;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Types;
        }

        IReadOnlyList<FeatureType>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<FeatureType>?>(
            "getTypes", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Types = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Types)] = Types;
        }
        
        return Types;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "url");
        if (result is not null)
        {
#pragma warning disable BL0005
             Url = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Url)] = Url;
        }
         
        return Url;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseViewTime property.
    /// </summary>
    public async Task<bool?> GetUseViewTime()
    {
        if (CoreJsModule is null)
        {
            return UseViewTime;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UseViewTime;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "useViewTime");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UseViewTime = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UseViewTime)] = UseViewTime;
        }
         
        return UseViewTime;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Version property.
    /// </summary>
    public async Task<double?> GetVersion()
    {
        if (CoreJsModule is null)
        {
            return Version;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Version;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "version");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Version = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Version)] = Version;
        }
         
        return Version;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ApiKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetApiKey(string? value)
    {
#pragma warning disable BL0005
        ApiKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ApiKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "apiKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BlendMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBlendMode(BlendMode? value)
    {
#pragma warning disable BL0005
        BlendMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BlendMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "blendMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Charts property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCharts(IReadOnlyList<object>? value)
    {
#pragma warning disable BL0005
        Charts = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Charts)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "charts", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Copyright property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCopyright(string? value)
    {
#pragma warning disable BL0005
        Copyright = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Copyright)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "copyright", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomParameters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomParameters(Dictionary<string, object>? value)
    {
#pragma warning disable BL0005
        CustomParameters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomParameters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customParameters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DateFieldsTimeZone property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDateFieldsTimeZone(string? value)
    {
#pragma warning disable BL0005
        DateFieldsTimeZone = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DateFieldsTimeZone)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dateFieldsTimeZone", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefinitionExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefinitionExpression(string? value)
    {
#pragma warning disable BL0005
        DefinitionExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefinitionExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "definitionExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DisplayField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDisplayField(string? value)
    {
#pragma warning disable BL0005
        DisplayField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DisplayField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "displayField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DynamicDataSource property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDynamicDataSource(DynamicLayer? value)
    {
#pragma warning disable BL0005
        DynamicDataSource = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DynamicDataSource)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dynamicDataSource", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EditingEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEditingEnabled(bool? value)
    {
#pragma warning disable BL0005
        EditingEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EditingEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "editingEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ElevationInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetElevationInfo(FeatureLayerBaseElevationInfo? value)
    {
        if (ElevationInfo is not null)
        {
            await ElevationInfo.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ElevationInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ElevationInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setElevationInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureEffect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureEffect(FeatureEffect? value)
    {
        if (FeatureEffect is not null)
        {
            await FeatureEffect.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        FeatureEffect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureEffect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFeatureEffect", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Fields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFields(IReadOnlyList<Field>? value)
    {
        if (Fields is not null)
        {
            foreach (Field item in Fields)
            {
                await item.DisposeAsync();
            }
        }
        
        if (value is not null)
        {
            foreach (Field item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Fields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Fields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFields", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FloorInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFloorInfo(LayerFloorInfo? value)
    {
        if (FloorInfo is not null)
        {
            await FloorInfo.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        FloorInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FloorInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFloorInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FormTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFormTemplate(IFormTemplate? value)
    {
#pragma warning disable BL0005
        FormTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FormTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "formTemplate", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GdbVersion property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGdbVersion(string? value)
    {
#pragma warning disable BL0005
        GdbVersion = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GdbVersion)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gdbVersion", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HasM property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHasM(bool? value)
    {
#pragma warning disable BL0005
        HasM = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HasM)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hasM", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HasZ property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHasZ(bool? value)
    {
#pragma warning disable BL0005
        HasZ = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HasZ)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hasZ", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HistoricMoment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHistoricMoment(DateTime? value)
    {
#pragma warning disable BL0005
        HistoricMoment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HistoricMoment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "historicMoment", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LabelingInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLabelingInfo(IReadOnlyList<Label>? value)
    {
        if (LabelingInfo is not null)
        {
            foreach (Label item in LabelingInfo)
            {
                await item.DisposeAsync();
            }
        }
        
        if (value is not null)
        {
            foreach (Label item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        LabelingInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LabelingInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLabelingInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LabelsVisible property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLabelsVisible(bool? value)
    {
#pragma warning disable BL0005
        LabelsVisible = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LabelsVisible)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "labelsVisible", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerIndex property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerIndex(int? value)
    {
#pragma warning disable BL0005
        LayerIndex = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerIndex)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerIndex", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendEnabled(bool? value)
    {
#pragma warning disable BL0005
        LegendEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "legendEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxScale(double? value)
    {
#pragma warning disable BL0005
        MaxScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinScale(double? value)
    {
#pragma warning disable BL0005
        MinScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ObjectIdField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetObjectIdField(string? value)
    {
#pragma warning disable BL0005
        ObjectIdField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ObjectIdField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "objectIdField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OrderBy property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrderBy(IReadOnlyList<OrderedLayerOrderBy>? value)
    {
        if (OrderBy is not null)
        {
            foreach (OrderedLayerOrderBy item in OrderBy)
            {
                await item.DisposeAsync();
            }
        }
        
        if (value is not null)
        {
            foreach (OrderedLayerOrderBy item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        OrderBy = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OrderBy)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setOrderBy", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OutFields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOutFields(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        OutFields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OutFields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "outFields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupEnabled(bool? value)
    {
#pragma warning disable BL0005
        PopupEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "popupEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupTemplate(PopupTemplate? value)
    {
        if (PopupTemplate is not null)
        {
            await PopupTemplate.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PopupTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPopupTemplate", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalItem property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalItem(PortalItem? value)
    {
        if (PortalItem is not null)
        {
            await PortalItem.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PortalItem = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalItem)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPortalItem", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RefreshInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRefreshInterval(double? value)
    {
#pragma warning disable BL0005
        RefreshInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RefreshInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "refreshInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Renderer property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRenderer(Renderer? value)
    {
        if (Renderer is not null)
        {
            await Renderer.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Renderer = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Renderer)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setRenderer", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReturnM property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReturnM(bool? value)
    {
#pragma warning disable BL0005
        ReturnM = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReturnM)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "returnM", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReturnZ property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReturnZ(bool? value)
    {
#pragma warning disable BL0005
        ReturnZ = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReturnZ)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "returnZ", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ScreenSizePerspectiveEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScreenSizePerspectiveEnabled(bool? value)
    {
#pragma warning disable BL0005
        ScreenSizePerspectiveEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ScreenSizePerspectiveEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "screenSizePerspectiveEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Source property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSource(IReadOnlyList<Graphic>? value)
    {
        if (Source is not null)
        {
            foreach (Graphic item in Source)
            {
                await item.DisposeAsync();
            }
        }
        
        if (value is not null)
        {
            foreach (Graphic item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Source = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Source)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSource", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SourceJSON property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSourceJSON(object? value)
    {
#pragma warning disable BL0005
        SourceJSON = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SourceJSON)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sourceJSON", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference? value)
    {
        if (SpatialReference is not null)
        {
            await SpatialReference.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSpatialReference", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Templates property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTemplates(IReadOnlyList<IFeatureTemplate>? value)
    {
#pragma warning disable BL0005
        Templates = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Templates)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "templates", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeExtent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeExtent(TimeExtent? value)
    {
        if (TimeExtent is not null)
        {
            await TimeExtent.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeExtent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeExtent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeExtent", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeInfo(TimeInfo? value)
    {
        if (TimeInfo is not null)
        {
            await TimeInfo.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeOffset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeOffset(TimeInterval? value)
    {
        if (TimeOffset is not null)
        {
            await TimeOffset.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeOffset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeOffset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeOffset", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TypeIdField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTypeIdField(string? value)
    {
#pragma warning disable BL0005
        TypeIdField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TypeIdField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "typeIdField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Types property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTypes(IReadOnlyList<FeatureType>? value)
    {
#pragma warning disable BL0005
        Types = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Types)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTypes", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string? value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseViewTime property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseViewTime(bool? value)
    {
#pragma warning disable BL0005
        UseViewTime = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseViewTime)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useViewTime", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Charts property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToCharts(params object[] values)
    {
        object[] join = Charts is null
            ? values
            : [..Charts, ..values];
        await SetCharts(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFields(params Field[] values)
    {
        Field[] join = Fields is null
            ? values
            : [..Fields, ..values];
        await SetFields(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the LabelingInfo property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToLabelingInfo(params Label[] values)
    {
        Label[] join = LabelingInfo is null
            ? values
            : [..LabelingInfo, ..values];
        await SetLabelingInfo(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the OrderBy property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOrderBy(params OrderedLayerOrderBy[] values)
    {
        OrderedLayerOrderBy[] join = OrderBy is null
            ? values
            : [..OrderBy, ..values];
        await SetOrderBy(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the OutFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOutFields(params string[] values)
    {
        string[] join = OutFields is null
            ? values
            : [..OutFields, ..values];
        await SetOutFields(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Source property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSource(params Graphic[] values)
    {
        Graphic[] join = Source is null
            ? values
            : [..Source, ..values];
        await SetSource(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Templates property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTemplates(params IFeatureTemplate[] values)
    {
        IFeatureTemplate[] join = Templates is null
            ? values
            : [..Templates, ..values];
        await SetTemplates(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Types property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTypes(params FeatureType[] values)
    {
        FeatureType[] join = Types is null
            ? values
            : [..Types, ..values];
        await SetTypes(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Charts property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromCharts(params object[] values)
    {
        if (Charts is null)
        {
            return;
        }
        await SetCharts(Charts.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFields(params Field[] values)
    {
        if (Fields is null)
        {
            return;
        }
        await SetFields(Fields.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the LabelingInfo property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromLabelingInfo(params Label[] values)
    {
        if (LabelingInfo is null)
        {
            return;
        }
        await SetLabelingInfo(LabelingInfo.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the OrderBy property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOrderBy(params OrderedLayerOrderBy[] values)
    {
        if (OrderBy is null)
        {
            return;
        }
        await SetOrderBy(OrderBy.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the OutFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOutFields(params string[] values)
    {
        if (OutFields is null)
        {
            return;
        }
        await SetOutFields(OutFields.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Source property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSource(params Graphic[] values)
    {
        if (Source is null)
        {
            return;
        }
        await SetSource(Source.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Templates property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTemplates(params IFeatureTemplate[] values)
    {
        if (Templates is null)
        {
            return;
        }
        await SetTemplates(Templates.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Types property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTypes(params FeatureType[] values)
    {
        if (Types is null)
        {
            return;
        }
        await SetTypes(Types.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Adds an attachment to a feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#addAttachment">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="feature">
    /// </param>
    /// <param name="attachment">
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureEditResult?> AddAttachment(Graphic feature,
        ElementReference attachment)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<FeatureEditResult?>(
            "addAttachment", 
            CancellationTokenSource.Token,
            feature,
            attachment);
    }
    
    /// <summary>
    ///     Deletes attachments from a feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#deleteAttachments">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="feature">
    /// </param>
    /// <param name="attachmentIds">
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureEditResult[]?> DeleteAttachments(Graphic feature,
        IReadOnlyCollection<long> attachmentIds)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<FeatureEditResult[]?>(
            "deleteAttachments", 
            CancellationTokenSource.Token,
            feature,
            attachmentIds);
    }
    
    /// <summary>
    ///     Query information about attachments associated with features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#queryAttachments">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="attachmentQuery">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<AttachmentsQueryResult?> QueryAttachments(AttachmentQuery attachmentQuery,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        AttachmentsQueryResult? result = await JsComponentReference!.InvokeAsync<AttachmentsQueryResult?>(
            "queryAttachments", 
            CancellationTokenSource.Token,
            attachmentQuery,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Saves the layer to its existing portal item in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a> authenticated within the user's current session.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#save">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="options">
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> Save(FeatureLayerBaseSaveOptions options)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "save", 
            CancellationTokenSource.Token,
            options);
    }
    
    /// <summary>
    ///     Saves the layer to a new portal item in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a> authenticated within the user's current session.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#saveAs">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="portalItem">
    /// </param>
    /// <param name="options">
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> SaveAs(PortalItem portalItem,
        FeatureLayerBaseSaveAsOptions options)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "saveAs", 
            CancellationTokenSource.Token,
            portalItem,
            options);
    }
    
    /// <summary>
    ///     Updates an existing attachment for a feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-FeatureLayerBase.html#updateAttachment">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="feature">
    /// </param>
    /// <param name="attachmentId">
    /// </param>
    /// <param name="attachment">
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureEditResult?> UpdateAttachment(Graphic feature,
        long attachmentId,
        ElementReference attachment)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<FeatureEditResult?>(
            "updateAttachment", 
            CancellationTokenSource.Token,
            feature,
            attachmentId,
            attachment);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsEdits(FeatureLayerEditsEvent editsEvent)
    {
        await OnEdits.InvokeAsync(editsEvent);
    }
    
    /// <summary>
    ///     Fires after <a href="#applyEdits">applyEdits()</a> is completed successfully.
    ///     The event payload includes only successful edits, not the failed edits.
    ///     <code>applyEdits()</code> will pass in a <code>sessionId</code> during an active edit session.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<FeatureLayerEditsEvent> OnEdits { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsRefresh(RefreshEvent refreshEvent)
    {
        await OnRefresh.InvokeAsync(refreshEvent);
    }
    
    /// <summary>
    ///     Fires if the layer has the <a href="#refreshInterval">refreshInterval</a> set or when <a href="#refresh">refresh()</a> method is called.
    ///     The event payload indicates if the layer's data has changed.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<RefreshEvent> OnRefresh { get; set; }
   
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case DynamicLayer dynamicDataSource:
                if (dynamicDataSource != DynamicDataSource)
                {
                    DynamicDataSource = dynamicDataSource;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(DynamicDataSource)] = DynamicDataSource;
                }
                
                return true;
            case FeatureLayerBaseElevationInfo elevationInfo:
                if (elevationInfo != ElevationInfo)
                {
                    ElevationInfo = elevationInfo;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(ElevationInfo)] = ElevationInfo;
                }
                
                return true;
            case FeatureEffect featureEffect:
                if (featureEffect != FeatureEffect)
                {
                    FeatureEffect = featureEffect;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
                }
                
                return true;
            case Field fields:
                Fields ??= [];
                if (!Fields.Contains(fields))
                {
                    Fields = [..Fields, fields];
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(Fields)] = Fields;
                }
                
                return true;
            case LayerFloorInfo floorInfo:
                if (floorInfo != FloorInfo)
                {
                    FloorInfo = floorInfo;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(FloorInfo)] = FloorInfo;
                }
                
                return true;
            case Label labelingInfo:
                LabelingInfo ??= [];
                if (!LabelingInfo.Contains(labelingInfo))
                {
                    LabelingInfo = [..LabelingInfo, labelingInfo];
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(LabelingInfo)] = LabelingInfo;
                }
                
                return true;
            case OrderedLayerOrderBy orderBy:
                OrderBy ??= [];
                if (!OrderBy.Contains(orderBy))
                {
                    OrderBy = [..OrderBy, orderBy];
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(OrderBy)] = OrderBy;
                }
                
                return true;
            case PopupTemplate popupTemplate:
                if (popupTemplate != PopupTemplate)
                {
                    PopupTemplate = popupTemplate;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
                }
                
                return true;
            case PortalItem portalItem:
                if (portalItem != PortalItem)
                {
                    PortalItem = portalItem;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(PortalItem)] = PortalItem;
                }
                
                return true;
            case Renderer renderer:
                if (renderer != Renderer)
                {
                    Renderer = renderer;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(Renderer)] = Renderer;
                }
                
                return true;
            case Graphic source:
                Source ??= [];
                if (!Source.Contains(source))
                {
                    Source = [..Source, source];
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(Source)] = Source;
                }
                
                return true;
            case SpatialReference spatialReference:
                if (spatialReference != SpatialReference)
                {
                    SpatialReference = spatialReference;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                }
                
                return true;
            case TimeExtent timeExtent:
                if (timeExtent != TimeExtent)
                {
                    TimeExtent = timeExtent;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
                }
                
                return true;
            case TimeInfo timeInfo:
                if (timeInfo != TimeInfo)
                {
                    TimeInfo = timeInfo;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(TimeInfo)] = TimeInfo;
                }
                
                return true;
            case TimeInterval timeOffset:
                if (timeOffset != TimeOffset)
                {
                    TimeOffset = timeOffset;
                    LayerChanged = MapRendered;
                    ModifiedParameters[nameof(TimeOffset)] = TimeOffset;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case DynamicLayer _:
                DynamicDataSource = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(DynamicDataSource)] = DynamicDataSource;
                return true;
            case FeatureLayerBaseElevationInfo _:
                ElevationInfo = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(ElevationInfo)] = ElevationInfo;
                return true;
            case FeatureEffect _:
                FeatureEffect = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
                return true;
            case Field fields:
                Fields = Fields?.Where(f => f != fields).ToList();
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(Fields)] = Fields;
                return true;
            case LayerFloorInfo _:
                FloorInfo = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(FloorInfo)] = FloorInfo;
                return true;
            case Label labelingInfo:
                LabelingInfo = LabelingInfo?.Where(l => l != labelingInfo).ToList();
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(LabelingInfo)] = LabelingInfo;
                return true;
            case OrderedLayerOrderBy orderBy:
                OrderBy = OrderBy?.Where(o => o != orderBy).ToList();
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(OrderBy)] = OrderBy;
                return true;
            case PopupTemplate _:
                PopupTemplate = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
                return true;
            case PortalItem _:
                PortalItem = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(PortalItem)] = PortalItem;
                return true;
            case Renderer _:
                Renderer = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(Renderer)] = Renderer;
                return true;
            case Graphic source:
                Source = Source?.Where(s => s != source).ToList();
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(Source)] = Source;
                return true;
            case SpatialReference _:
                SpatialReference = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                return true;
            case TimeExtent _:
                TimeExtent = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
                return true;
            case TimeInfo _:
                TimeInfo = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(TimeInfo)] = TimeInfo;
                return true;
            case TimeInterval _:
                TimeOffset = null;
                LayerChanged = MapRendered;
                ModifiedParameters[nameof(TimeOffset)] = TimeOffset;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (PortalItem is null && (Source is null || Source.Count == 0) && Url is null)
        {
            throw new MissingRequiredOptionsChildElementException(nameof(FeatureLayer), [nameof(PortalItem), nameof(Source), nameof(Url)]);
        }
        DynamicDataSource?.ValidateRequiredGeneratedChildren();
        ElevationInfo?.ValidateRequiredGeneratedChildren();
        FeatureEffect?.ValidateRequiredGeneratedChildren();
        if (Fields is not null)
        {
            foreach (Field child in Fields)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        FloorInfo?.ValidateRequiredGeneratedChildren();
        if (LabelingInfo is not null)
        {
            foreach (Label child in LabelingInfo)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        if (OrderBy is not null)
        {
            foreach (OrderedLayerOrderBy child in OrderBy)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        PopupTemplate?.ValidateRequiredGeneratedChildren();
        Renderer?.ValidateRequiredGeneratedChildren();
        SpatialReference?.ValidateRequiredGeneratedChildren();
        TimeExtent?.ValidateRequiredGeneratedChildren();
        TimeInfo?.ValidateRequiredGeneratedChildren();
        TimeOffset?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
