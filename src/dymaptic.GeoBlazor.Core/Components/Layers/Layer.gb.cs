// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Layers;


/// <summary>
///    The layer is the most fundamental component of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html">Map</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public abstract partial class Layer : IHitTestItem,
    IIntersectItem,
    ISliceViewModelExcludedLayers
{

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The unique ID assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ArcGISLayerId { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ArcGISLayerId property.
    /// </summary>
    public async Task<string?> GetArcGISLayerId()
    {
        if (CoreJsModule is null)
        {
            return ArcGISLayerId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ArcGISLayerId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "arcGISLayerId");
        if (result is not null)
        {
#pragma warning disable BL0005
             ArcGISLayerId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ArcGISLayerId)] = ArcGISLayerId;
        }
         
        return ArcGISLayerId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ListMode property.
    /// </summary>
    public async Task<ListMode?> GetListMode()
    {
        if (CoreJsModule is null)
        {
            return ListMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ListMode;
        }

        // get the property value
        JsNullableEnumWrapper<ListMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ListMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "listMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ListMode = (ListMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ListMode)] = ListMode;
        }
         
        return ListMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PersistenceEnabled property.
    /// </summary>
    public async Task<bool?> GetPersistenceEnabled()
    {
        if (CoreJsModule is null)
        {
            return PersistenceEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PersistenceEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "persistenceEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PersistenceEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PersistenceEnabled)] = PersistenceEnabled;
        }
         
        return PersistenceEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibilityTimeExtent property.
    /// </summary>
    public async Task<TimeExtent?> GetVisibilityTimeExtent()
    {
        if (CoreJsModule is null)
        {
            return VisibilityTimeExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibilityTimeExtent;
        }

        TimeExtent? result = await JsComponentReference.InvokeAsync<TimeExtent?>(
            "getVisibilityTimeExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (VisibilityTimeExtent is not null)
            {
                result.Id = VisibilityTimeExtent.Id;
            }
            
#pragma warning disable BL0005
            VisibilityTimeExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(VisibilityTimeExtent)] = VisibilityTimeExtent;
        }
        
        return VisibilityTimeExtent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ArcGISLayerId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetArcGISLayerId(string? value)
    {
#pragma warning disable BL0005
        ArcGISLayerId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ArcGISLayerId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "arcGISLayerId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ListMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetListMode(ListMode? value)
    {
#pragma warning disable BL0005
        ListMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ListMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "listMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PersistenceEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPersistenceEnabled(bool? value)
    {
#pragma warning disable BL0005
        PersistenceEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PersistenceEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "persistenceEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibilityTimeExtent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibilityTimeExtent(TimeExtent? value)
    {
        if (VisibilityTimeExtent is not null)
        {
            await VisibilityTimeExtent.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        VisibilityTimeExtent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibilityTimeExtent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "visibilityTimeExtent", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Called by the views, such as <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>, when the layer is added to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#layers">Map.layers</a> collection and a layer view must be created for it.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#createLayerView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="view">
    ///     The parent view.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<LayerView?> CreateLayerView(object view,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        LayerView? result = await JsComponentReference!.InvokeAsync<LayerView?>(
            "createLayerView", 
            CancellationTokenSource.Token,
            view,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Fetches custom attribution data for the layer when it becomes available.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fetchAttributionData">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<object?> FetchAttributionData()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<object?>(
            "fetchAttributionData", 
            CancellationTokenSource.Token);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsCreate(LayerViewCreateEvent createEvent)
    {
        await OnCreate.InvokeAsync(createEvent);
    }
    
    /// <summary>
    ///     Fires after the layer's <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> is created and rendered in a view.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<LayerViewCreateEvent> OnCreate { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsCreateError(LayerViewCreateErrorEvent createErrorEvent)
    {
        await OnCreateError.InvokeAsync(createErrorEvent);
    }
    
    /// <summary>
    ///     Fires when an error emits during the creation of a <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a>
    ///     after a layer has been added to the map.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<LayerViewCreateErrorEvent> OnCreateError { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsDestroy(LayerViewDestroyEvent destroyEvent)
    {
        await OnDestroy.InvokeAsync(destroyEvent);
    }
    
    /// <summary>
    ///     Fires after the layer's <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> is destroyed and no longer renders in a view.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<LayerViewDestroyEvent> OnDestroy { get; set; }
   
#endregion

}
