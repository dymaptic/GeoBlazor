// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Layers;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html">GeoBlazor Docs</a>
///     VectorTileLayer accesses cached tiles of data and renders it in vector format.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VectorTileLayer : IBlendLayer,
    IOperationalLayer,
    IScaleRangeLayer
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VectorTileLayer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="apiKey">
    ///     An authorization string used to access a resource or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#apiKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="arcGISLayerId">
    ///     The unique ID assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="blendMode">
    ///     Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#blendMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customParameters">
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="effect">
    ///     Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to
    ///     how image filters work.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#effect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fullExtent">
    ///     The full extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fullExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isBasemapReferenceLayer">
    ///     Indicates whether the layer is a basemap reference layer. Default value: false.
    /// </param>
    /// <param name="listMode">
    ///     Indicates how the layer should display in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     default "show"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxScale">
    ///     The maximum scale (most zoomed in) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#maxScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minScale">
    ///     The minimum scale (most zoomed out) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#minScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="opacity">
    ///     The opacity of the layer.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="persistenceEnabled">
    ///     Enable persistence of the layer in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html">WebScene</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-OperationalLayer.html#persistenceEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItem">
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="refreshInterval">
    ///     Refresh interval of the layer in minutes.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#refreshInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="style">
    ///     A style JSON object of vector tiles that will be used to render the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the layer used to identify it in places such as the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="url">
    ///     The URL to the vector tile service, or the URL to the style resource of vector tiles that
    ///     will be used to render the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibilityTimeExtent">
    ///     Specifies a fixed <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html">time extent</a> during which a layer should be visible.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates if the layer is visible in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VectorTileLayer(
        string? apiKey = null,
        string? arcGISLayerId = null,
        BlendMode? blendMode = null,
        Dictionary<string, object>? customParameters = null,
        Effect? effect = null,
        Extent? fullExtent = null,
        bool? isBasemapReferenceLayer = null,
        ListMode? listMode = null,
        double? maxScale = null,
        double? minScale = null,
        double? opacity = null,
        bool? persistenceEnabled = null,
        PortalItem? portalItem = null,
        double? refreshInterval = null,
        string? style = null,
        string? title = null,
        string? url = null,
        TimeExtent? visibilityTimeExtent = null,
        bool? visible = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ApiKey = apiKey;
        ArcGISLayerId = arcGISLayerId;
        BlendMode = blendMode;
        CustomParameters = customParameters;
        Effect = effect;
        FullExtent = fullExtent;
        IsBasemapReferenceLayer = isBasemapReferenceLayer;
        ListMode = listMode;
        MaxScale = maxScale;
        MinScale = minScale;
        Opacity = opacity;
        PersistenceEnabled = persistenceEnabled;
        PortalItem = portalItem;
        RefreshInterval = refreshInterval;
        Style = style;
        Title = title;
        Url = url;
        VisibilityTimeExtent = visibilityTimeExtent;
        Visible = visible;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerapikey-property">GeoBlazor Docs</a>
    ///     An authorization string used to access a resource or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#apiKey">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ApiKey { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerattributiondataurl-property">GeoBlazor Docs</a>
    ///     The URL that points to the location of the layer's attribution data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#attributionDataUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? AttributionDataUrl { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerblendmode-property">GeoBlazor Docs</a>
    ///     Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#blendMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BlendMode? BlendMode { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayercapabilities-property">GeoBlazor Docs</a>
    ///     Indicates the layer's supported capabilities.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public VectorTileLayerCapabilities? Capabilities { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayercurrentstyleinfo-property">GeoBlazor Docs</a>
    ///     The current style information of the VectorTileLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public VectorTileLayerCurrentStyleInfo? CurrentStyleInfo { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayercustomparameters-property">GeoBlazor Docs</a>
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Dictionary<string, object>? CustomParameters { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayereffect-property">GeoBlazor Docs</a>
    ///     Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to
    ///     how image filters work.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#effect">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Effect? Effect { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerinitialextent-property">GeoBlazor Docs</a>
    ///     The initial extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#initialExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Extent? InitialExtent { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerrefreshinterval-property">GeoBlazor Docs</a>
    ///     Refresh interval of the layer in minutes.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#refreshInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? RefreshInterval { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerstyle-property">GeoBlazor Docs</a>
    ///     A style JSON object of vector tiles that will be used to render the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Style { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayertileinfo-property">GeoBlazor Docs</a>
    ///     The tiling scheme information for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#tileInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public TileInfo? TileInfo { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ApiKey property.
    /// </summary>
    public async Task<string?> GetApiKey()
    {
        if (CoreJsModule is null)
        {
            return ApiKey;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ApiKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "apiKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             ApiKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ApiKey)] = ApiKey;
        }
         
        return ApiKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AttributionDataUrl property.
    /// </summary>
    public async Task<string?> GetAttributionDataUrl()
    {
        if (CoreJsModule is null)
        {
            return AttributionDataUrl;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AttributionDataUrl;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "attributionDataUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             AttributionDataUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AttributionDataUrl)] = AttributionDataUrl;
        }
         
        return AttributionDataUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BlendMode property.
    /// </summary>
    public async Task<BlendMode?> GetBlendMode()
    {
        if (CoreJsModule is null)
        {
            return BlendMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BlendMode;
        }

        // get the property value
        JsNullableEnumWrapper<BlendMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<BlendMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "blendMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BlendMode = (BlendMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BlendMode)] = BlendMode;
        }
         
        return BlendMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Capabilities property.
    /// </summary>
    public async Task<VectorTileLayerCapabilities?> GetCapabilities()
    {
        if (CoreJsModule is null)
        {
            return Capabilities;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Capabilities;
        }

        // get the property value
        VectorTileLayerCapabilities? result = await JsComponentReference!.InvokeAsync<VectorTileLayerCapabilities?>("getProperty",
            CancellationTokenSource.Token, "capabilities");
        if (result is not null)
        {
#pragma warning disable BL0005
             Capabilities = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Capabilities)] = Capabilities;
        }
         
        return Capabilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CurrentStyleInfo property.
    /// </summary>
    public async Task<VectorTileLayerCurrentStyleInfo?> GetCurrentStyleInfo()
    {
        if (CoreJsModule is null)
        {
            return CurrentStyleInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CurrentStyleInfo;
        }

        VectorTileLayerCurrentStyleInfo? result = await JsComponentReference.InvokeAsync<VectorTileLayerCurrentStyleInfo?>(
            "getCurrentStyleInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            CurrentStyleInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(CurrentStyleInfo)] = CurrentStyleInfo;
        }
        
        return CurrentStyleInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomParameters property.
    /// </summary>
    public async Task<Dictionary<string, object>?> GetCustomParameters()
    {
        if (CoreJsModule is null)
        {
            return CustomParameters;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomParameters;
        }

        // get the property value
        Dictionary<string, object>? result = await JsComponentReference!.InvokeAsync<Dictionary<string, object>?>("getProperty",
            CancellationTokenSource.Token, "customParameters");
        if (result is not null)
        {
#pragma warning disable BL0005
             CustomParameters = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomParameters)] = CustomParameters;
        }
         
        return CustomParameters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Effect property.
    /// </summary>
    public async Task<Effect?> GetEffect()
    {
        if (CoreJsModule is null)
        {
            return Effect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Effect;
        }

        Effect? result = await JsComponentReference.InvokeAsync<Effect?>(
            "getEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Effect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Effect)] = Effect;
        }
        
        return Effect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the InitialExtent property.
    /// </summary>
    public async Task<Extent?> GetInitialExtent()
    {
        if (CoreJsModule is null)
        {
            return InitialExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return InitialExtent;
        }

        Extent? result = await JsComponentReference.InvokeAsync<Extent?>(
            "getInitialExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (InitialExtent is not null)
            {
                result.Id = InitialExtent.Id;
            }
            
#pragma warning disable BL0005
            InitialExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(InitialExtent)] = InitialExtent;
        }
        
        return InitialExtent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxScale property.
    /// </summary>
    public async Task<double?> GetMaxScale()
    {
        if (CoreJsModule is null)
        {
            return MaxScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxScale)] = MaxScale;
        }
         
        return MaxScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinScale property.
    /// </summary>
    public async Task<double?> GetMinScale()
    {
        if (CoreJsModule is null)
        {
            return MinScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MinScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinScale)] = MinScale;
        }
         
        return MinScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalItem property.
    /// </summary>
    public async Task<PortalItem?> GetPortalItem()
    {
        if (CoreJsModule is null)
        {
            return PortalItem;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalItem;
        }

        PortalItem? result = await JsComponentReference.InvokeAsync<PortalItem?>(
            "getPortalItem", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (PortalItem is not null)
            {
                result.Id = PortalItem.Id;
            }
            
#pragma warning disable BL0005
            PortalItem = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PortalItem)] = PortalItem;
        }
        
        return PortalItem;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RefreshInterval property.
    /// </summary>
    public async Task<double?> GetRefreshInterval()
    {
        if (CoreJsModule is null)
        {
            return RefreshInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RefreshInterval;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "refreshInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RefreshInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RefreshInterval)] = RefreshInterval;
        }
         
        return RefreshInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        SpatialReference? result = await JsComponentReference.InvokeAsync<SpatialReference?>(
            "getSpatialReference", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SpatialReference = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
        
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Style property.
    /// </summary>
    public async Task<string?> GetStyle()
    {
        if (CoreJsModule is null)
        {
            return Style;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Style;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "style");
        if (result is not null)
        {
#pragma warning disable BL0005
             Style = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Style)] = Style;
        }
         
        return Style;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TileInfo property.
    /// </summary>
    public async Task<TileInfo?> GetTileInfo()
    {
        if (CoreJsModule is null)
        {
            return TileInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TileInfo;
        }

        TileInfo? result = await JsComponentReference.InvokeAsync<TileInfo?>(
            "getTileInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (TileInfo is not null)
            {
                result.Id = TileInfo.Id;
            }
            
#pragma warning disable BL0005
            TileInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TileInfo)] = TileInfo;
        }
        
        return TileInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "url");
        if (result is not null)
        {
#pragma warning disable BL0005
             Url = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Url)] = Url;
        }
         
        return Url;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ApiKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetApiKey(string? value)
    {
#pragma warning disable BL0005
        ApiKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ApiKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "apiKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BlendMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBlendMode(BlendMode? value)
    {
#pragma warning disable BL0005
        BlendMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BlendMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "blendMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomParameters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomParameters(Dictionary<string, object>? value)
    {
#pragma warning disable BL0005
        CustomParameters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomParameters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customParameters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Effect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEffect(Effect? value)
    {
#pragma warning disable BL0005
        Effect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Effect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEffect", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxScale(double? value)
    {
#pragma warning disable BL0005
        MaxScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinScale(double? value)
    {
#pragma warning disable BL0005
        MinScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PersistenceEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPersistenceEnabled(bool? value)
    {
#pragma warning disable BL0005
        PersistenceEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PersistenceEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "persistenceEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalItem property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalItem(PortalItem? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PortalItem = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalItem)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPortalItem", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RefreshInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRefreshInterval(double? value)
    {
#pragma warning disable BL0005
        RefreshInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RefreshInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "refreshInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Style property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyle(string? value)
    {
#pragma warning disable BL0005
        Style = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Style)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "style", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string? value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerdeletestylelayer-method">GeoBlazor Docs</a>
    ///     Deletes the specified <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a> from the
    ///     VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> as specified in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#deleteStyleLayer">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     as specified in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task DeleteStyleLayer(string layerId)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "deleteStyleLayer", 
            CancellationTokenSource.Token,
            layerId);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayergetlayoutproperties-method">GeoBlazor Docs</a>
    ///     Returns an instance of <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#layout-property">layout</a>
    ///     properties for the specified <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getLayoutProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetLayoutProperties(string layerId)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getLayoutProperties", 
            CancellationTokenSource.Token,
            layerId);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayergetpaintproperties-method">GeoBlazor Docs</a>
    ///     Returns an instance of <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#paint">paint</a> properties for the specified
    ///     <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getPaintProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetPaintProperties(string layerId)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getPaintProperties", 
            CancellationTokenSource.Token,
            layerId);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayergetstylelayer-method">GeoBlazor Docs</a>
    ///     Returns an instance of a <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers">style layer</a>
    ///     from the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> specified in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getStyleLayer">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     specified in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetStyleLayer(string layerId)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getStyleLayer", 
            CancellationTokenSource.Token,
            layerId);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayergetstylelayerid-method">GeoBlazor Docs</a>
    ///     Returns the layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     of the <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers">style layer</a>
    ///     based on its index.
    ///     param index Index of the style layer in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getStyleLayerId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="index">
    ///     Index of the style layer in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetStyleLayerId(int index)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getStyleLayerId", 
            CancellationTokenSource.Token,
            index);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayergetstylelayerindex-method">GeoBlazor Docs</a>
    ///     Returns the index of the <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers">style layer</a> from the VectorTileLayer's
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param layerId The <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">style layer id</a> as specified in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getStyleLayerIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">style layer id</a> as specified
    ///     in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<int?> GetStyleLayerIndex(string layerId)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<int?>(
            "getStyleLayerIndex", 
            CancellationTokenSource.Token,
            layerId);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayergetstylelayervisibility-method">GeoBlazor Docs</a>
    ///     Gets the visibility of the specified <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a> from the
    ///     VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> as specified in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getStyleLayerVisibility">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     as specified in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetStyleLayerVisibility(string layerId)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getStyleLayerVisibility", 
            CancellationTokenSource.Token,
            layerId);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerloadstyle-method">GeoBlazor Docs</a>
    ///     Loads a style to render a layer from the specified URL to a style resource or style JSON object.
    ///     param style The URL to a style of vector tiles or style JSON object.
    ///     param options An object with the following properties.
    ///     param options.signal Signal object that can be used to abort the asynchronous task. The returned promise will be rejected with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html">Error</a> named `AbortError` when an abort is signaled. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a> for more information on how to construct a controller that can be used to deliver abort signals.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#loadStyle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="style">
    ///     The URL to a style of vector tiles or style JSON object.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> LoadStyle(string style,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "loadStyle", 
            CancellationTokenSource.Token,
            style,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayerrefresh-method">GeoBlazor Docs</a>
    ///     Fetches all the data for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#refresh">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public override async ValueTask Refresh()
    {
        await base.Refresh();
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "refresh", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayersetlayoutproperties-method">GeoBlazor Docs</a>
    ///     Updates the <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#layout-property">layout</a> properties to the specified
    ///     <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param layout An instance of layout properties to assign to the style layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#setLayoutProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    /// <param name="layout">
    ///     An instance of layout properties to assign to the style layer.
    /// </param>
    [ArcGISMethod]
    public async Task SetLayoutProperties(string layerId,
        string layout)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "setLayoutProperties", 
            CancellationTokenSource.Token,
            layerId,
            layout);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayersetpaintproperties-method">GeoBlazor Docs</a>
    ///     Updates the <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#paint">paint</a> properties to the specified
    ///     <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers">style layer</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param painter An instance of paint properties to assign to the specified style layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#setPaintProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    /// <param name="painter">
    ///     An instance of paint properties to assign to the specified style layer.
    /// </param>
    [ArcGISMethod]
    public async Task SetPaintProperties(string layerId,
        string painter)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "setPaintProperties", 
            CancellationTokenSource.Token,
            layerId,
            painter);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayersetspritesource-method">GeoBlazor Docs</a>
    ///     Changes the sprite source associated with the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">current style</a>.
    ///     param spriteSourceInfo The sprite source info is used to set the sprites in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>. The user can set the sprite source from a URL to fetch the sprite resources or from the image info to set the sprite resources directly on the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#setSpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="spriteSourceInfo">
    ///     The sprite source info is used
    ///     to set the sprites in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>. The user can set the sprite source from a URL to fetch the sprite resources or from the image info
    ///     to set the sprite resources directly on the layer.
    /// </param>
    [ArcGISMethod]
    public async Task<SpriteSource?> SetSpriteSource(Object spriteSourceInfo)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<SpriteSource?>(
            "setSpriteSource", 
            CancellationTokenSource.Token,
            spriteSourceInfo);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayersetstylelayer-method">GeoBlazor Docs</a>
    ///     Changes the layer properties of the specified <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a>.
    ///     param layer The <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a> specified in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>. Get an instance of a style layer from a loaded style using <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#getStyleLayer">getStyleLayer</a> method.
    ///     param index Index of the style layer in the style. Set this parameter when adding a new style layer or re-ordering a style layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#setStyleLayer">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layer">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/">style layer</a>
    ///     specified in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>. Get an instance of a style layer from a loaded style using
    ///     <a href="#getStyleLayer">getStyleLayer</a> method.
    /// </param>
    /// <param name="index">
    ///     Index of the style layer in the style. Set this parameter when adding a new style layer or re-ordering a style layer.
    /// </param>
    [ArcGISMethod]
    public async Task SetStyleLayer(string layer,
        int index)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "setStyleLayer", 
            CancellationTokenSource.Token,
            layer,
            index);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayersetstylelayervisibility-method">GeoBlazor Docs</a>
    ///     Toggles the visibility of the specified <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/">style layer</a> in the
    ///     VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param layerId The style layer <a target="_blank" href="https://maplibre.org/maplibre-style-spec/layers/#id">id</a> as specified in the VectorTileLayer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">currentStyleInfo.style</a>.
    ///     param visibility Set this parameter to `"none"` to hide the style layer or to `"visible"` to show the style layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#setStyleLayerVisibility">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="layerId">
    ///     The style layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/https://maplibre.org/maplibre-style-spec/layers/#id">id</a>
    ///     as specified in the VectorTileLayer's <a href="#currentStyleInfo">currentStyleInfo.style</a>.
    /// </param>
    /// <param name="visibility">
    ///     Set this parameter to <code>"none"</code> to hide the style layer or to <code>"visible"</code> to show the style layer.
    /// </param>
    [ArcGISMethod]
    public async Task SetStyleLayerVisibility(string layerId,
        Visibility visibility)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "setStyleLayerVisibility", 
            CancellationTokenSource.Token,
            layerId,
            visibility);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsRefresh(IJSStreamReference jsStreamRef)
    {
        await using Stream stream = await jsStreamRef.OpenReadStreamAsync(1_000_000_000L);
        await using MemoryStream ms = new();
        await stream.CopyToAsync(ms);
        ms.Seek(0, SeekOrigin.Begin);
        byte[] encodedJson = ms.ToArray();
        string json = Encoding.UTF8.GetString(encodedJson);
        RefreshEvent refreshEvent = 
            JsonSerializer.Deserialize<RefreshEvent>(json, 
                GeoBlazorSerialization.JsonSerializerOptions)!;
        await OnRefresh.InvokeAsync(refreshEvent);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.VectorTileLayer.html#vectortilelayeronrefresh-property">GeoBlazor Docs</a>
    ///     Fires if the layer has the <a href="#refreshInterval">refreshInterval</a> set or when <a href="#refresh">refresh()</a> is called.
    ///     The event payload indicates if the layer's data has changed.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<RefreshEvent> OnRefresh { get; set; }
   
    /// <summary>
    ///     Used in JavaScript layer to determine if the event listener is registered.
    /// </summary>
    public bool HasRefreshListener => OnRefresh.HasDelegate;
    
#endregion

    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (PortalItem is null && Url is null)
        {
            throw new MissingRequiredOptionsChildElementException(nameof(VectorTileLayer), [nameof(PortalItem), nameof(Url)]);
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
