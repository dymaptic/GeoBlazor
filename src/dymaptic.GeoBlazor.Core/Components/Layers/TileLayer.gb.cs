// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Layers;


/// <summary>
///    The TileLayer allows you work with a cached <a target="_blank" href="https://enterprise.arcgis.com/en/server/latest/publish-services/windows/what-is-a-map-service.htm">map service</a> exposed by the ArcGIS Server REST API and add it to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html">Map</a> as a tile layer.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TileLayer : IAPIKeyMixin,
    IArcGISCachedService,
    IArcGISMapService,
    IBlendLayer,
    ICustomParametersMixin,
    IOperationalLayer,
    IPortalLayer,
    IRefreshableLayer,
    IScaleRangeLayer,
    ISublayersOwner
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TileLayer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="apiKey">
    ///     An authorization string used to access a resource or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-APIKeyMixin.html#apiKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="blendMode">
    ///     Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#blendMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="copyright">
    ///     The copyright text as defined by the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISCachedService.html#copyright">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customParameters">
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-CustomParametersMixin.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="effect">
    ///     Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to how image filters work.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#effect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fullExtent">
    ///     The full extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fullExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendEnabled">
    ///     Indicates whether the layer will be included in the legend.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#legendEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="listMode">
    ///     Indicates how the layer should display in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     default "show"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxScale">
    ///     The maximum scale (most zoomed in) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#maxScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minScale">
    ///     The minimum scale (most zoomed out) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#minScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="opacity">
    ///     The opacity of the layer.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="persistenceEnabled">
    ///     When `true`, the layer can be persisted.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItem">
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PortalLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="refreshInterval">
    ///     Refresh interval of the layer in minutes.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-RefreshableLayer.html#refreshInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resampling">
    ///     Resampling is enabled by default in 2D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> and 3D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#resampling">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="subtables">
    ///     A flat <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of all the tables in the layer including the tables of its sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-SublayersOwner.html#subtables">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tileInfo">
    ///     Contains information about the tiling scheme for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISCachedService.html#tileInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tileServers">
    ///     An array of tile servers used for changing map tiles.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#tileServers">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the layer used to identify it in places such as the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="url">
    ///     The URL of the REST endpoint of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibilityTimeExtent">
    ///     Specifies a fixed <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html">time extent</a> during which a layer should be visible.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TileLayer(
        string? apiKey = null,
        BlendMode? blendMode = null,
        string? copyright = null,
        Dictionary<string, object>? customParameters = null,
        Effect? effect = null,
        Extent? fullExtent = null,
        bool? legendEnabled = null,
        ListMode? listMode = null,
        double? maxScale = null,
        double? minScale = null,
        double? opacity = null,
        bool? persistenceEnabled = null,
        PortalItem? portalItem = null,
        double? refreshInterval = null,
        bool? resampling = null,
        IReadOnlyList<Sublayer>? subtables = null,
        TileInfo? tileInfo = null,
        IReadOnlyList<string>? tileServers = null,
        string? title = null,
        string? url = null,
        TimeExtent? visibilityTimeExtent = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ApiKey = apiKey;
        BlendMode = blendMode;
        Copyright = copyright;
        CustomParameters = customParameters;
        Effect = effect;
        FullExtent = fullExtent;
        LegendEnabled = legendEnabled;
        ListMode = listMode;
        MaxScale = maxScale;
        MinScale = minScale;
        Opacity = opacity;
        PersistenceEnabled = persistenceEnabled;
        PortalItem = portalItem;
        RefreshInterval = refreshInterval;
        Resampling = resampling;
        Subtables = subtables;
        TileInfo = tileInfo;
        TileServers = tileServers;
        Title = title;
        Url = url;
        VisibilityTimeExtent = visibilityTimeExtent;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A flat <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of all the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#sublayers">sublayers</a> in the TileLayer including the sublayers of its sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#allSublayers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Sublayer>? AllSublayers { get; protected set; }
    
    /// <summary>
    ///     The URL that points to the location of the layer's attribution data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#attributionDataUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? AttributionDataUrl { get; protected set; }
    
    /// <summary>
    ///     Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#blendMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BlendMode? BlendMode { get; set; }
    
    /// <summary>
    ///     Indicates the layer's supported capabilities.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISMapServiceCapabilities? Capabilities { get; protected set; }
    
    /// <summary>
    ///     The copyright text as defined by the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISCachedService.html#copyright">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Copyright { get; set; }
    
    /// <summary>
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-CustomParametersMixin.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Dictionary<string, object>? CustomParameters { get; set; }
    
    /// <summary>
    ///     Indicates if the layer has attribution data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#hasAttributionData">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasAttributionData { get; protected set; }
    
    /// <summary>
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PortalLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(Url))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalItem? PortalItem { get; set; }
    
    /// <summary>
    ///     Resampling is enabled by default in 2D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> and 3D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#resampling">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Resampling { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/map-service.htm">tiled map service's metadata JSON</a> exposed by the ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SourceJSON { get; protected set; }
    
    /// <summary>
    ///     The spatial reference of the layer as defined by the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISCachedService.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; protected set; }
    
    /// <summary>
    ///     A <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html">Sublayer</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#sublayers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Sublayer>? Sublayers { get; protected set; }
    
    /// <summary>
    ///     A flat <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of all the tables in the layer including the tables of its sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-SublayersOwner.html#subtables">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Sublayer>? Subtables { get; set; }
    
    /// <summary>
    ///     The URL of the REST endpoint of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(PortalItem))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; set; }
    
    /// <summary>
    ///     The version of ArcGIS Server in which the map service is published.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISMapService.html#version">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Version { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AllSublayers property.
    /// </summary>
    public async Task<IReadOnlyList<Sublayer>?> GetAllSublayers()
    {
        if (CoreJsModule is null)
        {
            return AllSublayers;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllSublayers;
        }

        // get the JS object reference
        IJSObjectReference? refResult = (await CoreJsModule!.InvokeAsync<JsObjectRefWrapper?>(
            "getObjectRefForProperty", CancellationTokenSource.Token, JsComponentReference, 
            "allSublayers"))?.Value;
            
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            AllSublayers = await CoreJsModule.InvokeAsync<IReadOnlyList<Sublayer>?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(AllSublayers)] = AllSublayers;
            if (AllSublayers is not null)
            {
                for (int i = 0; i < AllSublayers.Count; i++)
                {
                    Sublayer item = AllSublayers[i];
                    item.Parent = this;
                    item.View = View;
                    // register this type in JS
                    IJSObjectReference? itemRef = await refResult.InvokeAsync<IJSObjectReference?>(
                        "at", CancellationTokenSource.Token, i);
                    if (itemRef is not null)
                    {
                        item.JsComponentReference = itemRef;
                        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                            CancellationTokenSource.Token, itemRef, item.Id);
                    }
                }
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize AllSublayers");
        }
        int? length = await CoreJsModule.InvokeAsync<int?>("getProperty",
            CancellationTokenSource.Token, refResult, "length");
        if (length is null)
        {
            return null;
        }
        List<Sublayer> result = new List<Sublayer>();
        for (int i = 0; i < length; i++)
        {
            result.Add(new Sublayer());
        }
#pragma warning disable BL0005
        AllSublayers = result;
#pragma warning restore BL0005
         ModifiedParameters[nameof(AllSublayers)] = AllSublayers;
        for (int i = 0; i < AllSublayers.Count; i++)
        {
            Sublayer item = AllSublayers[i];
            item.Parent = this;
            item.View = View;
            // register this type in JS
            IJSObjectReference? itemRef = await refResult.InvokeAsync<IJSObjectReference?>(
                "at", CancellationTokenSource.Token, i);
            if (itemRef is not null)
            {
                item.JsComponentReference = itemRef;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, itemRef, item.Id);
            }
            await item.GetProperty<SublayerCapabilities>(nameof(Sublayer.Capabilities));
            await item.GetProperty<DynamicDataSource>(nameof(Sublayer.DataSource));
            await item.GetProperty<string>(nameof(Sublayer.DefinitionExpression));
            await item.GetProperty<IReadOnlyList<Field>>(nameof(Sublayer.Fields));
            await item.GetProperty<FieldsIndex>(nameof(Sublayer.FieldsIndex));
            await item.GetProperty<LayerFloorInfo>(nameof(Sublayer.FloorInfo));
            await item.GetProperty<Extent>(nameof(Sublayer.FullExtent));
            await item.GetProperty<bool>(nameof(Sublayer.IsTable));
            await item.GetProperty<IReadOnlyList<Label>>(nameof(Sublayer.LabelingInfo));
            await item.GetProperty<bool>(nameof(Sublayer.LabelsVisible));
            await item.GetProperty<bool>(nameof(Sublayer.LegendEnabled));
            await item.GetProperty<ListMode>(nameof(Sublayer.ListMode));
            await item.GetProperty<double>(nameof(Sublayer.MaxScale));
            await item.GetProperty<double>(nameof(Sublayer.MinScale));
            await item.GetProperty<string>(nameof(Sublayer.ObjectIdField));
            await item.GetProperty<double>(nameof(Sublayer.Opacity));
            await item.GetProperty<bool>(nameof(Sublayer.PopupEnabled));
            await item.GetProperty<PopupTemplate>(nameof(Sublayer.PopupTemplate));
            await item.GetProperty<IReadOnlyList<Relationship>>(nameof(Sublayer.Relationships));
            await item.GetProperty<Renderer>(nameof(Sublayer.Renderer));
            await item.GetProperty<string>(nameof(Sublayer.SourceJSON));
            await item.GetProperty<SpatialReference>(nameof(Sublayer.SpatialReference));
            await item.GetProperty<long>(nameof(Sublayer.SublayerId));
            await item.GetProperty<string>(nameof(Sublayer.Title));
            await item.GetProperty<string>(nameof(Sublayer.TypeIdField));
            await item.GetProperty<IReadOnlyList<FeatureType>>(nameof(Sublayer.Types));
            await item.GetProperty<string>(nameof(Sublayer.Url));
        }
        return AllSublayers;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ApiKey property.
    /// </summary>
    public async Task<string?> GetApiKey()
    {
        if (CoreJsModule is null)
        {
            return ApiKey;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ApiKey;
        }

        // get the property value
#pragma warning disable BL0005
        ApiKey = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "apiKey");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ApiKey)] = ApiKey;
        return ApiKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AttributionDataUrl property.
    /// </summary>
    public async Task<string?> GetAttributionDataUrl()
    {
        if (CoreJsModule is null)
        {
            return AttributionDataUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AttributionDataUrl;
        }

        // get the property value
#pragma warning disable BL0005
        AttributionDataUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "attributionDataUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(AttributionDataUrl)] = AttributionDataUrl;
        return AttributionDataUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BlendMode property.
    /// </summary>
    public async Task<BlendMode?> GetBlendMode()
    {
        if (CoreJsModule is null)
        {
            return BlendMode;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BlendMode;
        }

        // get the property value
#pragma warning disable BL0005
        BlendMode = await CoreJsModule!.InvokeAsync<BlendMode>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "blendMode");
#pragma warning restore BL0005
         ModifiedParameters[nameof(BlendMode)] = BlendMode;
        return BlendMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Capabilities property.
    /// </summary>
    public async Task<ArcGISMapServiceCapabilities?> GetCapabilities()
    {
        if (CoreJsModule is null)
        {
            return Capabilities;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Capabilities;
        }

        // get the property value
#pragma warning disable BL0005
        Capabilities = await CoreJsModule!.InvokeAsync<ArcGISMapServiceCapabilities?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "capabilities");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Capabilities)] = Capabilities;
        return Capabilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Copyright property.
    /// </summary>
    public async Task<string?> GetCopyright()
    {
        if (CoreJsModule is null)
        {
            return Copyright;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Copyright;
        }

        // get the property value
#pragma warning disable BL0005
        Copyright = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "copyright");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Copyright)] = Copyright;
        return Copyright;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomParameters property.
    /// </summary>
    public async Task<Dictionary<string, object>?> GetCustomParameters()
    {
        if (CoreJsModule is null)
        {
            return CustomParameters;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CustomParameters;
        }

        // get the property value
#pragma warning disable BL0005
        CustomParameters = await CoreJsModule!.InvokeAsync<Dictionary<string, object>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "customParameters");
#pragma warning restore BL0005
         ModifiedParameters[nameof(CustomParameters)] = CustomParameters;
        return CustomParameters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Effect property.
    /// </summary>
    public async Task<Effect?> GetEffect()
    {
        if (CoreJsModule is null)
        {
            return Effect;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Effect;
        }

        // get the property value
#pragma warning disable BL0005
        Effect = await CoreJsModule!.InvokeAsync<Effect?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "effect");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Effect)] = Effect;
        return Effect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasAttributionData property.
    /// </summary>
    public async Task<bool?> GetHasAttributionData()
    {
        if (CoreJsModule is null)
        {
            return HasAttributionData;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HasAttributionData;
        }

        // get the property value
#pragma warning disable BL0005
        HasAttributionData = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasAttributionData");
#pragma warning restore BL0005
         ModifiedParameters[nameof(HasAttributionData)] = HasAttributionData;
        return HasAttributionData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendEnabled property.
    /// </summary>
    public async Task<bool?> GetLegendEnabled()
    {
        if (CoreJsModule is null)
        {
            return LegendEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LegendEnabled;
        }

        // get the property value
#pragma warning disable BL0005
        LegendEnabled = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "legendEnabled");
#pragma warning restore BL0005
         ModifiedParameters[nameof(LegendEnabled)] = LegendEnabled;
        return LegendEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxScale property.
    /// </summary>
    public async Task<double?> GetMaxScale()
    {
        if (CoreJsModule is null)
        {
            return MaxScale;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaxScale;
        }

        // get the property value
#pragma warning disable BL0005
        MaxScale = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxScale");
#pragma warning restore BL0005
         ModifiedParameters[nameof(MaxScale)] = MaxScale;
        return MaxScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinScale property.
    /// </summary>
    public async Task<double?> GetMinScale()
    {
        if (CoreJsModule is null)
        {
            return MinScale;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MinScale;
        }

        // get the property value
#pragma warning disable BL0005
        MinScale = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "minScale");
#pragma warning restore BL0005
         ModifiedParameters[nameof(MinScale)] = MinScale;
        return MinScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalItem property.
    /// </summary>
    public async Task<PortalItem?> GetPortalItem()
    {
        if (CoreJsModule is null)
        {
            return PortalItem;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PortalItem;
        }

        // get the JS object reference
        IJSObjectReference? refResult = (await CoreJsModule!.InvokeAsync<JsObjectRefWrapper?>(
            "getObjectRefForProperty", CancellationTokenSource.Token, JsComponentReference, 
            "portalItem"))?.Value;
            
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            PortalItem = await CoreJsModule.InvokeAsync<PortalItem?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(PortalItem)] = PortalItem;
            if (PortalItem is not null)
            {
                PortalItem.Parent = this;
                PortalItem.View = View;
                PortalItem.JsComponentReference = refResult;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, refResult, PortalItem.Id);
                return PortalItem;
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize PortalItem");
        }
#pragma warning disable BL0005
        PortalItem = new PortalItem();
#pragma warning restore BL0005
         ModifiedParameters[nameof(PortalItem)] = PortalItem;
        PortalItem.Parent = this;
        PortalItem.View = View;
        PortalItem.JsComponentReference = refResult;
        // register this type in JS
        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
            CancellationTokenSource.Token, refResult, PortalItem.Id);
        await PortalItem.GetProperty<PortalItemAccess>(nameof(PortalItem.Access));
        await PortalItem.GetProperty<string>(nameof(PortalItem.AccessInformation));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ApiKey));
        await PortalItem.GetProperty<IReadOnlyList<PortalItemApplicationProxies>>(nameof(PortalItem.ApplicationProxies));
        await PortalItem.GetProperty<double>(nameof(PortalItem.AvgRating));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.Categories));
        await PortalItem.GetProperty<DateTime>(nameof(PortalItem.Created));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Culture));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Description));
        await PortalItem.GetProperty<Extent>(nameof(PortalItem.Extent));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.GroupCategories));
        await PortalItem.GetProperty<bool>(nameof(PortalItem.IsLayer));
        await PortalItem.GetProperty<bool>(nameof(PortalItem.IsOrgItem));
        await PortalItem.GetProperty<ItemControl>(nameof(PortalItem.ItemControl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ItemPageUrl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ItemUrl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.LicenseInfo));
        await PortalItem.GetProperty<bool>(nameof(PortalItem.Loaded));
        await PortalItem.GetProperty<DateTime>(nameof(PortalItem.Modified));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Name));
        await PortalItem.GetProperty<double>(nameof(PortalItem.NumComments));
        await PortalItem.GetProperty<double>(nameof(PortalItem.NumRatings));
        await PortalItem.GetProperty<double>(nameof(PortalItem.NumViews));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Owner));
        await PortalItem.GetProperty<string>(nameof(PortalItem.OwnerFolder));
        await PortalItem.GetProperty<Portal>(nameof(PortalItem.Portal));
        await PortalItem.GetProperty<string>(nameof(PortalItem.PortalItemId));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.Screenshots));
        await PortalItem.GetProperty<int>(nameof(PortalItem.Size));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Snippet));
        await PortalItem.GetProperty<string>(nameof(PortalItem.SourceJSON));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.Tags));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ThumbnailUrl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Title));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.TypeKeywords));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Url));
        return PortalItem;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RefreshInterval property.
    /// </summary>
    public async Task<double?> GetRefreshInterval()
    {
        if (CoreJsModule is null)
        {
            return RefreshInterval;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RefreshInterval;
        }

        // get the property value
#pragma warning disable BL0005
        RefreshInterval = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "refreshInterval");
#pragma warning restore BL0005
         ModifiedParameters[nameof(RefreshInterval)] = RefreshInterval;
        return RefreshInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Resampling property.
    /// </summary>
    public async Task<bool?> GetResampling()
    {
        if (CoreJsModule is null)
        {
            return Resampling;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Resampling;
        }

        // get the property value
#pragma warning disable BL0005
        Resampling = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "resampling");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Resampling)] = Resampling;
        return Resampling;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<string?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
#pragma warning disable BL0005
        SourceJSON = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sourceJSON");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        // get the property value
#pragma warning disable BL0005
        SpatialReference = await CoreJsModule!.InvokeAsync<SpatialReference?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "spatialReference");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Sublayers property.
    /// </summary>
    public async Task<IReadOnlyList<Sublayer>?> GetSublayers()
    {
        if (CoreJsModule is null)
        {
            return Sublayers;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Sublayers;
        }

        // get the JS object reference
        IJSObjectReference? refResult = (await CoreJsModule!.InvokeAsync<JsObjectRefWrapper?>(
            "getObjectRefForProperty", CancellationTokenSource.Token, JsComponentReference, 
            "sublayers"))?.Value;
            
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            Sublayers = await CoreJsModule.InvokeAsync<IReadOnlyList<Sublayer>?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(Sublayers)] = Sublayers;
            if (Sublayers is not null)
            {
                for (int i = 0; i < Sublayers.Count; i++)
                {
                    Sublayer item = Sublayers[i];
                    item.Parent = this;
                    item.View = View;
                    // register this type in JS
                    IJSObjectReference? itemRef = await refResult.InvokeAsync<IJSObjectReference?>(
                        "at", CancellationTokenSource.Token, i);
                    if (itemRef is not null)
                    {
                        item.JsComponentReference = itemRef;
                        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                            CancellationTokenSource.Token, itemRef, item.Id);
                    }
                }
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize Sublayers");
        }
        int? length = await CoreJsModule.InvokeAsync<int?>("getProperty",
            CancellationTokenSource.Token, refResult, "length");
        if (length is null)
        {
            return null;
        }
        List<Sublayer> result = new List<Sublayer>();
        for (int i = 0; i < length; i++)
        {
            result.Add(new Sublayer());
        }
#pragma warning disable BL0005
        Sublayers = result;
#pragma warning restore BL0005
         ModifiedParameters[nameof(Sublayers)] = Sublayers;
        for (int i = 0; i < Sublayers.Count; i++)
        {
            Sublayer item = Sublayers[i];
            item.Parent = this;
            item.View = View;
            // register this type in JS
            IJSObjectReference? itemRef = await refResult.InvokeAsync<IJSObjectReference?>(
                "at", CancellationTokenSource.Token, i);
            if (itemRef is not null)
            {
                item.JsComponentReference = itemRef;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, itemRef, item.Id);
            }
            await item.GetProperty<SublayerCapabilities>(nameof(Sublayer.Capabilities));
            await item.GetProperty<DynamicDataSource>(nameof(Sublayer.DataSource));
            await item.GetProperty<string>(nameof(Sublayer.DefinitionExpression));
            await item.GetProperty<IReadOnlyList<Field>>(nameof(Sublayer.Fields));
            await item.GetProperty<FieldsIndex>(nameof(Sublayer.FieldsIndex));
            await item.GetProperty<LayerFloorInfo>(nameof(Sublayer.FloorInfo));
            await item.GetProperty<Extent>(nameof(Sublayer.FullExtent));
            await item.GetProperty<bool>(nameof(Sublayer.IsTable));
            await item.GetProperty<IReadOnlyList<Label>>(nameof(Sublayer.LabelingInfo));
            await item.GetProperty<bool>(nameof(Sublayer.LabelsVisible));
            await item.GetProperty<bool>(nameof(Sublayer.LegendEnabled));
            await item.GetProperty<ListMode>(nameof(Sublayer.ListMode));
            await item.GetProperty<double>(nameof(Sublayer.MaxScale));
            await item.GetProperty<double>(nameof(Sublayer.MinScale));
            await item.GetProperty<string>(nameof(Sublayer.ObjectIdField));
            await item.GetProperty<double>(nameof(Sublayer.Opacity));
            await item.GetProperty<bool>(nameof(Sublayer.PopupEnabled));
            await item.GetProperty<PopupTemplate>(nameof(Sublayer.PopupTemplate));
            await item.GetProperty<IReadOnlyList<Relationship>>(nameof(Sublayer.Relationships));
            await item.GetProperty<Renderer>(nameof(Sublayer.Renderer));
            await item.GetProperty<string>(nameof(Sublayer.SourceJSON));
            await item.GetProperty<SpatialReference>(nameof(Sublayer.SpatialReference));
            await item.GetProperty<long>(nameof(Sublayer.SublayerId));
            await item.GetProperty<string>(nameof(Sublayer.Title));
            await item.GetProperty<string>(nameof(Sublayer.TypeIdField));
            await item.GetProperty<IReadOnlyList<FeatureType>>(nameof(Sublayer.Types));
            await item.GetProperty<string>(nameof(Sublayer.Url));
        }
        return Sublayers;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TileInfo property.
    /// </summary>
    public async Task<TileInfo?> GetTileInfo()
    {
        if (CoreJsModule is null)
        {
            return TileInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TileInfo;
        }

        // get the JS object reference
        IJSObjectReference? refResult = (await CoreJsModule!.InvokeAsync<JsObjectRefWrapper?>(
            "getObjectRefForProperty", CancellationTokenSource.Token, JsComponentReference, 
            "tileInfo"))?.Value;
            
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            TileInfo = await CoreJsModule.InvokeAsync<TileInfo?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(TileInfo)] = TileInfo;
            if (TileInfo is not null)
            {
                TileInfo.Parent = this;
                TileInfo.View = View;
                TileInfo.JsComponentReference = refResult;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, refResult, TileInfo.Id);
                return TileInfo;
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize TileInfo");
        }
#pragma warning disable BL0005
        TileInfo = new TileInfo();
#pragma warning restore BL0005
         ModifiedParameters[nameof(TileInfo)] = TileInfo;
        TileInfo.Parent = this;
        TileInfo.View = View;
        TileInfo.JsComponentReference = refResult;
        // register this type in JS
        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
            CancellationTokenSource.Token, refResult, TileInfo.Id);
        await TileInfo.GetProperty<double>(nameof(TileInfo.Dpi));
        await TileInfo.GetProperty<TileInfoFormat>(nameof(TileInfo.Format));
        await TileInfo.GetProperty<bool>(nameof(TileInfo.IsWrappable));
        await TileInfo.GetProperty<IReadOnlyList<LOD>>(nameof(TileInfo.Lods));
        await TileInfo.GetProperty<Point>(nameof(TileInfo.Origin));
        await TileInfo.GetProperty<IReadOnlyList<int>>(nameof(TileInfo.Size));
        await TileInfo.GetProperty<SpatialReference>(nameof(TileInfo.SpatialReference));
        return TileInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TileServers property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetTileServers()
    {
        if (CoreJsModule is null)
        {
            return TileServers;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TileServers;
        }

        // get the property value
#pragma warning disable BL0005
        TileServers = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "tileServers");
#pragma warning restore BL0005
         ModifiedParameters[nameof(TileServers)] = TileServers;
        return TileServers;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
#pragma warning disable BL0005
        Url = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "url");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Url)] = Url;
        return Url;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Version property.
    /// </summary>
    public async Task<double?> GetVersion()
    {
        if (CoreJsModule is null)
        {
            return Version;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Version;
        }

        // get the property value
#pragma warning disable BL0005
        Version = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "version");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Version)] = Version;
        return Version;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ApiKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetApiKey(string value)
    {
#pragma warning disable BL0005
        ApiKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ApiKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "apiKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BlendMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBlendMode(BlendMode value)
    {
#pragma warning disable BL0005
        BlendMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BlendMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "blendMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Copyright property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCopyright(string value)
    {
#pragma warning disable BL0005
        Copyright = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Copyright)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "copyright", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomParameters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomParameters(Dictionary<string, object> value)
    {
#pragma warning disable BL0005
        CustomParameters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomParameters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customParameters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Effect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEffect(Effect value)
    {
#pragma warning disable BL0005
        Effect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Effect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "effect", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendEnabled(bool value)
    {
#pragma warning disable BL0005
        LegendEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "legendEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxScale(double value)
    {
#pragma warning disable BL0005
        MaxScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinScale(double value)
    {
#pragma warning disable BL0005
        MinScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalItem property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalItem(PortalItem value)
    {
#pragma warning disable BL0005
        PortalItem = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalItem)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        PortalItem.Parent = this;
        PortalItem.View = View;
        
        if (PortalItem.JsComponentReference is null)
        {
            // new MapComponent, needs to be built and registered in JS
            // this also calls back to OnJsComponentCreated
            IJSObjectReference jsObjectReference = await CoreJsModule.InvokeAsync<IJSObjectReference>(
                $"buildJsPortalItem", CancellationTokenSource.Token, 
                    PortalItem, View?.Id);
            // in case the fallback failed, set this here.
            PortalItem.JsComponentReference ??= jsObjectReference;
            
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference, "portalItem", jsObjectReference);
        }
        else
        {
            // this component has already been registered, but we'll call setProperty to make sure
            // it is attached to the parent
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference,
                "portalItem", PortalItem.JsComponentReference);
        }
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RefreshInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRefreshInterval(double value)
    {
#pragma warning disable BL0005
        RefreshInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RefreshInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "refreshInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Resampling property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetResampling(bool value)
    {
#pragma warning disable BL0005
        Resampling = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Resampling)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "resampling", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Subtables property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSubtables(IReadOnlyList<Sublayer> value)
    {
#pragma warning disable BL0005
        Subtables = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Subtables)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        foreach (Sublayer item in value)
        {
            item.Parent = this;
            item.View = View;
            
            if (item.JsComponentReference is null)
            {
                // new MapComponent, needs to be built and registered in JS
                // this also calls back to OnJsComponentCreated
                IJSObjectReference jsObjectReference = await CoreJsModule.InvokeAsync<IJSObjectReference>(
                    $"buildJsSublayer", CancellationTokenSource.Token, 
                        item, View?.Id);
                // in case the fallback failed, set this here.
                item.JsComponentReference ??= jsObjectReference;
                
                await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                    JsComponentReference, "subtables", jsObjectReference);
            }
            else
            {
                // this component has already been registered, but we'll call setProperty to make sure
                // it is attached to the parent
                await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                    JsComponentReference,
                    "subtables", item.JsComponentReference);

            }
        }
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TileInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTileInfo(TileInfo value)
    {
#pragma warning disable BL0005
        TileInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TileInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        TileInfo.Parent = this;
        TileInfo.View = View;
        
        if (TileInfo.JsComponentReference is null)
        {
            // new MapComponent, needs to be built and registered in JS
            // this also calls back to OnJsComponentCreated
            IJSObjectReference jsObjectReference = await CoreJsModule.InvokeAsync<IJSObjectReference>(
                $"buildJsTileInfo", CancellationTokenSource.Token, 
                    TileInfo, View?.Id);
            // in case the fallback failed, set this here.
            TileInfo.JsComponentReference ??= jsObjectReference;
            
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference, "tileInfo", jsObjectReference);
        }
        else
        {
            // this component has already been registered, but we'll call setProperty to make sure
            // it is attached to the parent
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference,
                "tileInfo", TileInfo.JsComponentReference);
        }
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TileServers property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTileServers(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        TileServers = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TileServers)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tileServers", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Subtables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSubtables(params Sublayer[] values)
    {
        Sublayer[] join = Subtables is null
            ? values
            : [..Subtables, ..values];
        await SetSubtables(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the TileServers property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTileServers(params string[] values)
    {
        string[] join = TileServers is null
            ? values
            : [..TileServers, ..values];
        await SetTileServers(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Subtables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSubtables(params Sublayer[] values)
    {
        if (Subtables is null)
        {
            return;
        }
        await SetSubtables(Subtables.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the TileServers property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTileServers(params string[] values)
    {
        if (TileServers is null)
        {
            return;
        }
        await SetTileServers(TileServers.Except(values).ToArray());
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     Returns a deep clone of a map service's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html">sublayers</a> as defined by the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-SublayersOwner.html#createServiceSublayers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Sublayer[]?> CreateServiceSublayers()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Sublayer[]?>(
            "createServiceSublayers", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     This method fetches a tile for the given level, row and column present in the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#fetchTile">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="level">
    ///     Level of detail of the tile to fetch. This value is provided by <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a>.
    /// </param>
    /// <param name="row">
    ///     The row(y) position of the tile fetch. This value is provided by <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a>.
    /// </param>
    /// <param name="col">
    ///     The column(x) position of the tile to fetch. This value is provided by <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a>.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<ElementReference?> FetchTile(double level,
        double row,
        double col,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        ElementReference? result = await JsComponentReference!.InvokeAsync<ElementReference?>(
            "fetchTile", 
            CancellationTokenSource.Token,
            level,
            row,
            col,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Returns the sublayer with the given layerId.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-SublayersOwner.html#findSublayerById">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="id">
    /// </param>
    [ArcGISMethod]
    public async Task<Sublayer?> FindSublayerById(long id)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Sublayer?>(
            "findSublayerById", 
            CancellationTokenSource.Token,
            id);
    }
    
    /// <summary>
    ///     This method returns a URL to a tile for a given level, row and column.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#getTileUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="level">
    ///     The requested tile's level.
    /// </param>
    /// <param name="row">
    ///     The requested tile's row.
    /// </param>
    /// <param name="col">
    ///     The requested tile's column.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetTileUrl(double level,
        double row,
        double col)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getTileUrl", 
            CancellationTokenSource.Token,
            level,
            row,
            col);
    }
    
    /// <summary>
    ///     Loads all of the sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html#loadAll">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Sublayer?> LoadAll()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Sublayer?>(
            "loadAll", 
            CancellationTokenSource.Token);
    }
    
#endregion


#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsRefresh(RefreshEvent refreshEvent)
    {
        await OnRefresh.InvokeAsync(refreshEvent);
    }
    
    /// <summary>
    ///     Fires if the layer has the <a href="#refreshInterval">refreshInterval</a> set or when <a href="#refresh">refresh()</a> method is called.
    ///     The event payload indicates if the layer's data has changed.
    /// </summary>
    [Parameter]
    public EventCallback<RefreshEvent> OnRefresh { get; set; }
   
#endregion



    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISMapServiceCapabilities capabilities:
                if (capabilities != Capabilities)
                {
                    Capabilities = capabilities;
                    LayerChanged = true;
                    ModifiedParameters[nameof(Capabilities)] = Capabilities;
                }
                
                return true;
            case PortalItem portalItem:
                if (portalItem != PortalItem)
                {
                    PortalItem = portalItem;
                    LayerChanged = true;
                    ModifiedParameters[nameof(PortalItem)] = PortalItem;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISMapServiceCapabilities _:
                Capabilities = null;
                LayerChanged = true;
                ModifiedParameters[nameof(Capabilities)] = Capabilities;
                return true;
            case PortalItem _:
                PortalItem = null;
                LayerChanged = true;
                ModifiedParameters[nameof(PortalItem)] = PortalItem;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        if (Url is null && PortalItem is null)
        {
            throw new MissingRequiredOptionsChildElementException(nameof(TileLayer), [nameof(Url), nameof(PortalItem)]);
        }
        Capabilities?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
