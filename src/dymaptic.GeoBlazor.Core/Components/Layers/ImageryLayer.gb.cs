// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Layers;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Layers.ImageryLayer.html">GeoBlazor Docs</a>
///     Represents a dynamic <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/image-service.htm">image service resource</a> as a layer.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ImageryLayer : IArcGISImageService,
    IBlendLayer,
    IFeatureTableWidgetLayers,
    IOperationalLayer,
    IPortalLayer,
    IRefreshableLayer,
    IScaleRangeLayer,
    ITemporalLayer
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ImageryLayer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="url">
    ///     The URL to the REST endpoint of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItem">
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PortalLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="renderer">
    ///     The renderer assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#renderer">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="bandIds">
    ///     Defines a band combination using 0-based band indexes.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#bandIds">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="blendMode">
    ///     Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#blendMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="compressionQuality">
    ///     The compression quality value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#compressionQuality">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="compressionTolerance">
    ///     Controls the tolerance of the lerc compression algorithm.
    ///     default 0.01
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#compressionTolerance">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="copyright">
    ///     The copyright text as defined by the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#copyright">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="definitionExpression">
    ///     The SQL where clause used to filter rasters.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#definitionExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="effect">
    ///     Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to how image filters work.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-BlendLayer.html#effect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="format">
    ///     The format of the exported image.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#format">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasMultidimensions">
    ///     Indicates if the layer has <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#multidimensionalInfo">multidimensionalInfo</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#hasMultidimensions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="imageMaxHeight">
    ///     Indicates the maximum height of the image exported by the service.
    ///     default 4100
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#imageMaxHeight">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="imageMaxWidth">
    ///     Indicates the maximum width of the image exported by the service.
    ///     default 15000
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#imageMaxWidth">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="interpolation">
    ///     Defines how to interpolate pixel values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#interpolation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendEnabled">
    ///     Indicates whether the layer will be included in the legend.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#legendEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxScale">
    ///     The maximum scale (most zoomed in) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#maxScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minScale">
    ///     The minimum scale (most zoomed out) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#minScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="noData">
    ///     The pixel value representing no available information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#noData">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="noDataInterpretation">
    ///     Interpretation of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#noData">noData</a> setting.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#noDataInterpretation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="objectIdField">
    ///     The name of an `oid` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#fields">field</a> containing a unique value or identifier for each raster in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#objectIdField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="persistenceEnabled">
    ///     When `true`, the layer can be persisted.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="pixelType">
    ///     Raster source pixel type.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#pixelType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupEnabled">
    ///     Indicates whether to display popups when features in the layer are clicked.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#popupEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="refreshInterval">
    ///     Refresh interval of the layer in minutes.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-RefreshableLayer.html#refreshInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useViewTime">
    ///     Determines if the time enabled layer will update its temporal data based on the view's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent">timeExtent</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#useViewTime">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tileInfo">
    ///     The tiling scheme information for the layer.
    /// </param>
    /// <param name="timeExtent">
    ///     The layer's time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeInfo">
    ///     TimeInfo provides information such as date fields that store <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField">start</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField">end</a> time for each feature and the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent">fullTimeExtent</a> for the layer.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeOffset">
    ///     A temporary offset of the time data based on a certain <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeInterval.html">TimeInterval</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-TemporalLayer.html#timeOffset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the layer used to identify it in places such as the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="opacity">
    ///     The opacity of the layer.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="listMode">
    ///     Indicates how the layer should display in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     default "show"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates if the layer is visible in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customParameters">
    ///     A list of custom parameters appended to the URL of all resources fetched by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#customParameters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fullExtent">
    ///     The full extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fullExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="arcGISLayerId">
    ///     The unique ID assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="capabilities">
    ///     Describes the layer's supported capabilities.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fields">
    ///     An array of fields in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isBasemapReferenceLayer">
    ///     Indicates whether the layer is a basemap reference layer. Default value: false.
    /// </param>
    /// <param name="mosaicRule">
    ///     Defines how overlapping images should be mosaicked.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#mosaicRule">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="multidimensionalSubset">
    ///     Represents a multidimensional subset of raster data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#multidimensionalSubset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="pixelFilter">
    ///     A function that processes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-ImageryLayerView.html#pixelData">pixelData</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#pixelFilter">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupTemplate">
    ///     The popup template for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rasterFunction">
    ///     Specifies the rule for how the requested image should be processed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#rasterFunction">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sourceJSON">
    ///     The <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/image-service.htm">image service's metadata JSON</a> exposed by the ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibilityTimeExtent">
    ///     Specifies a fixed <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html">time extent</a> during which a layer should be visible.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ImageryLayer(
        string? url = null,
        PortalItem? portalItem = null,
        IImageryRenderer? renderer = null,
        IReadOnlyList<long>? bandIds = null,
        BlendMode? blendMode = null,
        double? compressionQuality = null,
        double? compressionTolerance = null,
        string? copyright = null,
        string? definitionExpression = null,
        Effect? effect = null,
        ImageFormat? format = null,
        bool? hasMultidimensions = null,
        int? imageMaxHeight = null,
        int? imageMaxWidth = null,
        Interpolation? interpolation = null,
        bool? legendEnabled = null,
        double? maxScale = null,
        double? minScale = null,
        NoData? noData = null,
        NoDataInterpretation? noDataInterpretation = null,
        string? objectIdField = null,
        bool? persistenceEnabled = null,
        PixelType? pixelType = null,
        bool? popupEnabled = null,
        double? refreshInterval = null,
        bool? useViewTime = null,
        TileInfo? tileInfo = null,
        TimeExtent? timeExtent = null,
        TimeInfo? timeInfo = null,
        TimeInterval? timeOffset = null,
        string? title = null,
        double? opacity = null,
        ListMode? listMode = null,
        bool? visible = null,
        Dictionary<string, object>? customParameters = null,
        Extent? fullExtent = null,
        string? arcGISLayerId = null,
        ArcGISImageServiceCapabilities? capabilities = null,
        IReadOnlyList<Field>? fields = null,
        bool? isBasemapReferenceLayer = null,
        MosaicRule? mosaicRule = null,
        MultidimensionalSubset? multidimensionalSubset = null,
        PixelFilterFunction? pixelFilter = null,
        PopupTemplate? popupTemplate = null,
        RasterFunction? rasterFunction = null,
        object? sourceJSON = null,
        TimeExtent? visibilityTimeExtent = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Url = url;
        PortalItem = portalItem;
        Renderer = renderer;
        BandIds = bandIds;
        BlendMode = blendMode;
        CompressionQuality = compressionQuality;
        CompressionTolerance = compressionTolerance;
        Copyright = copyright;
        DefinitionExpression = definitionExpression;
        Effect = effect;
        Format = format;
        HasMultidimensions = hasMultidimensions;
        ImageMaxHeight = imageMaxHeight;
        ImageMaxWidth = imageMaxWidth;
        Interpolation = interpolation;
        LegendEnabled = legendEnabled;
        MaxScale = maxScale;
        MinScale = minScale;
        NoData = noData;
        NoDataInterpretation = noDataInterpretation;
        ObjectIdField = objectIdField;
        PersistenceEnabled = persistenceEnabled;
        PixelType = pixelType;
        PopupEnabled = popupEnabled;
        RefreshInterval = refreshInterval;
        UseViewTime = useViewTime;
        if (tileInfo is not null)
        {
            TileInfo = tileInfo;
        }
        TimeExtent = timeExtent;
        TimeInfo = timeInfo;
        TimeOffset = timeOffset;
        Title = title;
        Opacity = opacity;
        ListMode = listMode;
        Visible = visible;
        CustomParameters = customParameters;
        FullExtent = fullExtent;
        ArcGISLayerId = arcGISLayerId;
        Capabilities = capabilities;
        Fields = fields;
        IsBasemapReferenceLayer = isBasemapReferenceLayer;
        MosaicRule = mosaicRule;
        MultidimensionalSubset = multidimensionalSubset;
        PixelFilter = pixelFilter;
        PopupTemplate = popupTemplate;
        RasterFunction = rasterFunction;
        SourceJSON = sourceJSON;
        VisibilityTimeExtent = visibilityTimeExtent;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Defines a band combination using 0-based band indexes.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#bandIds">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<long>? BandIds { get; set; }
    
    /// <summary>
    ///     Describes the layer's supported capabilities.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISImageServiceCapabilities? Capabilities { get; set; }
    
    /// <summary>
    ///     The compression quality value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#compressionQuality">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? CompressionQuality { get; set; }
    
    /// <summary>
    ///     Default mosaic rule of the image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#defaultMosaicRule">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public MosaicRule? DefaultMosaicRule { get; protected set; }
    
    /// <summary>
    ///     An array of fields in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Field>? Fields { get; set; }
    
    /// <summary>
    ///     A convenient property that can be used to make case-insensitive lookups for a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#fields">field</a> by name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#fieldsIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public FieldsIndex? FieldsIndex { get; protected set; }
    
    /// <summary>
    ///     Defines how to interpolate pixel values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#interpolation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Interpolation? Interpolation { get; set; }
    
    /// <summary>
    ///     Defines how overlapping images should be mosaicked.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#mosaicRule">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MosaicRule? MosaicRule { get; set; }
    
    /// <summary>
    ///     The multidimensional information associated with the layer if the layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#hasMultidimensions">hasMultidimensions</a> property is `true`.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#multidimensionalInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public RasterMultidimensionalInfo? MultidimensionalInfo { get; protected set; }
    
    /// <summary>
    ///     Represents a multidimensional subset of raster data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#multidimensionalSubset">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MultidimensionalSubset? MultidimensionalSubset { get; set; }
    
    /// <summary>
    ///     The pixel value representing no available information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#noData">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public NoData? NoData { get; set; }
    
    /// <summary>
    ///     Interpretation of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#noData">noData</a> setting.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#noDataInterpretation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public NoDataInterpretation? NoDataInterpretation { get; set; }
    
    /// <summary>
    ///     A function that processes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-ImageryLayerView.html#pixelData">pixelData</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#pixelFilter">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public PixelFilterFunction? PixelFilter { get; set; }
    
    /// <summary>
    ///    JS-invokable method that triggers the <see cref="PixelFilter"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task OnJsPixelFilter(PixelData pixelData)
    {
        if (PixelFilter is not null)
        {
            await PixelFilter.Invoke(pixelData);
        }
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="PixelFilter" /> function was registered.
    /// </summary>
    public bool HasPixelFilter => PixelFilter is not null;
    
    /// <summary>
    ///     The popup template for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupTemplate? PopupTemplate { get; set; }
    
    /// <summary>
    ///     The portal item from which the layer is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-PortalLayer.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(Url))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalItem? PortalItem { get; set; }
    
    /// <summary>
    ///     A complete list of fields that consists of raster attribute table fields, item pixel value, service pixel value, service pixel value with various server defined function templates, and raster attribute table fields.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#rasterFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<Field>? RasterFields { get; protected set; }
    
    /// <summary>
    ///     Specifies the rule for how the requested image should be processed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#rasterFunction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RasterFunction? RasterFunction { get; set; }
    
    /// <summary>
    ///     Returns raster function information for the image services, including the name, description, help, function type, and a thumbnail of pre-configured raster function templates.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#rasterFunctionInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<RasterFunctionInfo>? RasterFunctionInfos { get; protected set; }
    
    /// <summary>
    ///     The renderer assigned to the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#renderer">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IImageryRenderer? Renderer { get; set; }
    
    /// <summary>
    ///     Source raster information of the image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#serviceRasterInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public RasterInfo? ServiceRasterInfo { get; protected set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/image-service.htm">image service's metadata JSON</a> exposed by the ArcGIS REST API.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public object? SourceJSON { get; set; }
    
    /// <summary>
    ///     Image service data source type.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#sourceType">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public SourceType? SourceType { get; protected set; }
    
    /// <summary>
    ///     The spatial reference of the image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public SpatialReference? SpatialReference { get; protected set; }
    
    /// <summary>
    ///     The URL to the REST endpoint of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty(nameof(PortalItem))]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; set; }
    
    /// <summary>
    ///     The version of ArcGIS Server in which the image service is published.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#version">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public double? Version { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BandIds property.
    /// </summary>
    public async Task<IReadOnlyList<long>?> GetBandIds()
    {
        if (CoreJsModule is null)
        {
            return BandIds;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BandIds;
        }

        // get the property value
        IReadOnlyList<long>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<long>?>("getProperty",
            CancellationTokenSource.Token, "bandIds");
        if (result is not null)
        {
#pragma warning disable BL0005
             BandIds = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BandIds)] = BandIds;
        }
         
        return BandIds;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BlendMode property.
    /// </summary>
    public async Task<BlendMode?> GetBlendMode()
    {
        if (CoreJsModule is null)
        {
            return BlendMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BlendMode;
        }

        // get the property value
        JsNullableEnumWrapper<BlendMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<BlendMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "blendMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BlendMode = (BlendMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BlendMode)] = BlendMode;
        }
         
        return BlendMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Capabilities property.
    /// </summary>
    public async Task<ArcGISImageServiceCapabilities?> GetCapabilities()
    {
        if (CoreJsModule is null)
        {
            return Capabilities;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Capabilities;
        }

        ArcGISImageServiceCapabilities? result = await JsComponentReference.InvokeAsync<ArcGISImageServiceCapabilities?>(
            "getCapabilities", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Capabilities = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Capabilities)] = Capabilities;
        }
        
        return Capabilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CompressionQuality property.
    /// </summary>
    public async Task<double?> GetCompressionQuality()
    {
        if (CoreJsModule is null)
        {
            return CompressionQuality;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CompressionQuality;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "compressionQuality");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CompressionQuality = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CompressionQuality)] = CompressionQuality;
        }
         
        return CompressionQuality;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CompressionTolerance property.
    /// </summary>
    public async Task<double?> GetCompressionTolerance()
    {
        if (CoreJsModule is null)
        {
            return CompressionTolerance;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CompressionTolerance;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "compressionTolerance");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CompressionTolerance = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CompressionTolerance)] = CompressionTolerance;
        }
         
        return CompressionTolerance;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Copyright property.
    /// </summary>
    public async Task<string?> GetCopyright()
    {
        if (CoreJsModule is null)
        {
            return Copyright;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Copyright;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "copyright");
        if (result is not null)
        {
#pragma warning disable BL0005
             Copyright = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Copyright)] = Copyright;
        }
         
        return Copyright;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomParameters property.
    /// </summary>
    public async Task<Dictionary<string, object>?> GetCustomParameters()
    {
        if (CoreJsModule is null)
        {
            return CustomParameters;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomParameters;
        }

        // get the property value
        Dictionary<string, object>? result = await JsComponentReference!.InvokeAsync<Dictionary<string, object>?>("getProperty",
            CancellationTokenSource.Token, "customParameters");
        if (result is not null)
        {
#pragma warning disable BL0005
             CustomParameters = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomParameters)] = CustomParameters;
        }
         
        return CustomParameters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultMosaicRule property.
    /// </summary>
    public async Task<MosaicRule?> GetDefaultMosaicRule()
    {
        if (CoreJsModule is null)
        {
            return DefaultMosaicRule;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultMosaicRule;
        }

        MosaicRule? result = await JsComponentReference.InvokeAsync<MosaicRule?>(
            "getDefaultMosaicRule", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            DefaultMosaicRule = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(DefaultMosaicRule)] = DefaultMosaicRule;
        }
        
        return DefaultMosaicRule;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefinitionExpression property.
    /// </summary>
    public async Task<string?> GetDefinitionExpression()
    {
        if (CoreJsModule is null)
        {
            return DefinitionExpression;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefinitionExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "definitionExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             DefinitionExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefinitionExpression)] = DefinitionExpression;
        }
         
        return DefinitionExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Effect property.
    /// </summary>
    public async Task<Effect?> GetEffect()
    {
        if (CoreJsModule is null)
        {
            return Effect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Effect;
        }

        Effect? result = await JsComponentReference.InvokeAsync<Effect?>(
            "getEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Effect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Effect)] = Effect;
        }
        
        return Effect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Fields property.
    /// </summary>
    public async Task<IReadOnlyList<Field>?> GetFields()
    {
        if (CoreJsModule is null)
        {
            return Fields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Fields;
        }

        IReadOnlyList<Field>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Field>?>(
            "getFields", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Fields = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Fields)] = Fields;
        }
        
        return Fields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FieldsIndex property.
    /// </summary>
    public async Task<FieldsIndex?> GetFieldsIndex()
    {
        if (CoreJsModule is null)
        {
            return FieldsIndex;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FieldsIndex;
        }

        FieldsIndex? result = await JsComponentReference.InvokeAsync<FieldsIndex?>(
            "getFieldsIndex", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FieldsIndex = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FieldsIndex)] = FieldsIndex;
        }
        
        return FieldsIndex;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Format property.
    /// </summary>
    public async Task<ImageFormat?> GetFormat()
    {
        if (CoreJsModule is null)
        {
            return Format;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Format;
        }

        // get the property value
        JsNullableEnumWrapper<ImageFormat>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ImageFormat>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "format");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Format = (ImageFormat)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Format)] = Format;
        }
         
        return Format;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasMultidimensions property.
    /// </summary>
    public async Task<bool?> GetHasMultidimensions()
    {
        if (CoreJsModule is null)
        {
            return HasMultidimensions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasMultidimensions;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasMultidimensions");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasMultidimensions = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasMultidimensions)] = HasMultidimensions;
        }
         
        return HasMultidimensions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ImageMaxHeight property.
    /// </summary>
    public async Task<int?> GetImageMaxHeight()
    {
        if (CoreJsModule is null)
        {
            return ImageMaxHeight;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ImageMaxHeight;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "imageMaxHeight");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ImageMaxHeight = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ImageMaxHeight)] = ImageMaxHeight;
        }
         
        return ImageMaxHeight;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ImageMaxWidth property.
    /// </summary>
    public async Task<int?> GetImageMaxWidth()
    {
        if (CoreJsModule is null)
        {
            return ImageMaxWidth;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ImageMaxWidth;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "imageMaxWidth");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ImageMaxWidth = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ImageMaxWidth)] = ImageMaxWidth;
        }
         
        return ImageMaxWidth;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Interpolation property.
    /// </summary>
    public async Task<Interpolation?> GetInterpolation()
    {
        if (CoreJsModule is null)
        {
            return Interpolation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Interpolation;
        }

        // get the property value
        JsNullableEnumWrapper<Interpolation>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<Interpolation>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "interpolation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Interpolation = (Interpolation)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Interpolation)] = Interpolation;
        }
         
        return Interpolation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendEnabled property.
    /// </summary>
    public async Task<bool?> GetLegendEnabled()
    {
        if (CoreJsModule is null)
        {
            return LegendEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LegendEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "legendEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LegendEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LegendEnabled)] = LegendEnabled;
        }
         
        return LegendEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxScale property.
    /// </summary>
    public async Task<double?> GetMaxScale()
    {
        if (CoreJsModule is null)
        {
            return MaxScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxScale)] = MaxScale;
        }
         
        return MaxScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinScale property.
    /// </summary>
    public async Task<double?> GetMinScale()
    {
        if (CoreJsModule is null)
        {
            return MinScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MinScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinScale)] = MinScale;
        }
         
        return MinScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MosaicRule property.
    /// </summary>
    public async Task<MosaicRule?> GetMosaicRule()
    {
        if (CoreJsModule is null)
        {
            return MosaicRule;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MosaicRule;
        }

        MosaicRule? result = await JsComponentReference.InvokeAsync<MosaicRule?>(
            "getMosaicRule", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            MosaicRule = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(MosaicRule)] = MosaicRule;
        }
        
        return MosaicRule;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MultidimensionalInfo property.
    /// </summary>
    public async Task<RasterMultidimensionalInfo?> GetMultidimensionalInfo()
    {
        if (CoreJsModule is null)
        {
            return MultidimensionalInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MultidimensionalInfo;
        }

        RasterMultidimensionalInfo? result = await JsComponentReference.InvokeAsync<RasterMultidimensionalInfo?>(
            "getMultidimensionalInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            MultidimensionalInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(MultidimensionalInfo)] = MultidimensionalInfo;
        }
        
        return MultidimensionalInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MultidimensionalSubset property.
    /// </summary>
    public async Task<MultidimensionalSubset?> GetMultidimensionalSubset()
    {
        if (CoreJsModule is null)
        {
            return MultidimensionalSubset;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MultidimensionalSubset;
        }

        MultidimensionalSubset? result = await JsComponentReference.InvokeAsync<MultidimensionalSubset?>(
            "getMultidimensionalSubset", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            MultidimensionalSubset = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(MultidimensionalSubset)] = MultidimensionalSubset;
        }
        
        return MultidimensionalSubset;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NoData property.
    /// </summary>
    public async Task<NoData?> GetNoData()
    {
        if (CoreJsModule is null)
        {
            return NoData;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NoData;
        }

        // get the property value
        NoData? result = await JsComponentReference!.InvokeAsync<NoData?>("getProperty",
            CancellationTokenSource.Token, "noData");
        if (result is not null)
        {
#pragma warning disable BL0005
             NoData = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NoData)] = NoData;
        }
         
        return NoData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NoDataInterpretation property.
    /// </summary>
    public async Task<NoDataInterpretation?> GetNoDataInterpretation()
    {
        if (CoreJsModule is null)
        {
            return NoDataInterpretation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NoDataInterpretation;
        }

        // get the property value
        JsNullableEnumWrapper<NoDataInterpretation>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<NoDataInterpretation>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "noDataInterpretation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NoDataInterpretation = (NoDataInterpretation)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NoDataInterpretation)] = NoDataInterpretation;
        }
         
        return NoDataInterpretation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ObjectIdField property.
    /// </summary>
    public async Task<string?> GetObjectIdField()
    {
        if (CoreJsModule is null)
        {
            return ObjectIdField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ObjectIdField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "objectIdField");
        if (result is not null)
        {
#pragma warning disable BL0005
             ObjectIdField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ObjectIdField)] = ObjectIdField;
        }
         
        return ObjectIdField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PixelType property.
    /// </summary>
    public async Task<PixelType?> GetPixelType()
    {
        if (CoreJsModule is null)
        {
            return PixelType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PixelType;
        }

        // get the property value
        JsNullableEnumWrapper<PixelType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<PixelType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "pixelType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PixelType = (PixelType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PixelType)] = PixelType;
        }
         
        return PixelType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupEnabled property.
    /// </summary>
    public async Task<bool?> GetPopupEnabled()
    {
        if (CoreJsModule is null)
        {
            return PopupEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "popupEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PopupEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PopupEnabled)] = PopupEnabled;
        }
         
        return PopupEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupTemplate property.
    /// </summary>
    public async Task<PopupTemplate?> GetPopupTemplate()
    {
        if (CoreJsModule is null)
        {
            return PopupTemplate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupTemplate;
        }

        PopupTemplate? result = await JsComponentReference.InvokeAsync<PopupTemplate?>(
            "getPopupTemplate", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            PopupTemplate = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
        }
        
        return PopupTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalItem property.
    /// </summary>
    public async Task<PortalItem?> GetPortalItem()
    {
        if (CoreJsModule is null)
        {
            return PortalItem;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalItem;
        }

        PortalItem? result = await JsComponentReference.InvokeAsync<PortalItem?>(
            "getPortalItem", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (PortalItem is not null)
            {
                result.Id = PortalItem.Id;
            }
            
#pragma warning disable BL0005
            PortalItem = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PortalItem)] = PortalItem;
        }
        
        return PortalItem;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RasterFields property.
    /// </summary>
    public async Task<IReadOnlyList<Field>?> GetRasterFields()
    {
        if (CoreJsModule is null)
        {
            return RasterFields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RasterFields;
        }

        IReadOnlyList<Field>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Field>?>(
            "getRasterFields", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            RasterFields = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(RasterFields)] = RasterFields;
        }
        
        return RasterFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RasterFunction property.
    /// </summary>
    public async Task<RasterFunction?> GetRasterFunction()
    {
        if (CoreJsModule is null)
        {
            return RasterFunction;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RasterFunction;
        }

        RasterFunction? result = await JsComponentReference.InvokeAsync<RasterFunction?>(
            "getRasterFunction", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            RasterFunction = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(RasterFunction)] = RasterFunction;
        }
        
        return RasterFunction;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RasterFunctionInfos property.
    /// </summary>
    public async Task<IReadOnlyList<RasterFunctionInfo>?> GetRasterFunctionInfos()
    {
        if (CoreJsModule is null)
        {
            return RasterFunctionInfos;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RasterFunctionInfos;
        }

        // get the property value
        IReadOnlyList<RasterFunctionInfo>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<RasterFunctionInfo>?>("getProperty",
            CancellationTokenSource.Token, "rasterFunctionInfos");
        if (result is not null)
        {
#pragma warning disable BL0005
             RasterFunctionInfos = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RasterFunctionInfos)] = RasterFunctionInfos;
        }
         
        return RasterFunctionInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RefreshInterval property.
    /// </summary>
    public async Task<double?> GetRefreshInterval()
    {
        if (CoreJsModule is null)
        {
            return RefreshInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RefreshInterval;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "refreshInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RefreshInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RefreshInterval)] = RefreshInterval;
        }
         
        return RefreshInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Renderer property.
    /// </summary>
    public async Task<IImageryRenderer?> GetRenderer()
    {
        if (CoreJsModule is null)
        {
            return Renderer;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Renderer;
        }

        // get the property value
        IImageryRenderer? result = await JsComponentReference!.InvokeAsync<IImageryRenderer?>("getProperty",
            CancellationTokenSource.Token, "renderer");
        if (result is not null)
        {
#pragma warning disable BL0005
             Renderer = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Renderer)] = Renderer;
        }
         
        return Renderer;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceRasterInfo property.
    /// </summary>
    public async Task<RasterInfo?> GetServiceRasterInfo()
    {
        if (CoreJsModule is null)
        {
            return ServiceRasterInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ServiceRasterInfo;
        }

        RasterInfo? result = await JsComponentReference.InvokeAsync<RasterInfo?>(
            "getServiceRasterInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ServiceRasterInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ServiceRasterInfo)] = ServiceRasterInfo;
        }
        
        return ServiceRasterInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<object?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
        object? result = await JsComponentReference!.InvokeAsync<object?>("getProperty",
            CancellationTokenSource.Token, "sourceJSON");
        if (result is not null)
        {
#pragma warning disable BL0005
             SourceJSON = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        }
         
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceType property.
    /// </summary>
    public async Task<SourceType?> GetSourceType()
    {
        if (CoreJsModule is null)
        {
            return SourceType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SourceType;
        }

        // get the property value
        JsNullableEnumWrapper<SourceType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SourceType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "sourceType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SourceType = (SourceType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SourceType)] = SourceType;
        }
         
        return SourceType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        SpatialReference? result = await JsComponentReference.InvokeAsync<SpatialReference?>(
            "getSpatialReference", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SpatialReference = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
        
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeExtent property.
    /// </summary>
    public async Task<TimeExtent?> GetTimeExtent()
    {
        if (CoreJsModule is null)
        {
            return TimeExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeExtent;
        }

        TimeExtent? result = await JsComponentReference.InvokeAsync<TimeExtent?>(
            "getTimeExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (TimeExtent is not null)
            {
                result.Id = TimeExtent.Id;
            }
            
#pragma warning disable BL0005
            TimeExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
        }
        
        return TimeExtent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeInfo property.
    /// </summary>
    public async Task<TimeInfo?> GetTimeInfo()
    {
        if (CoreJsModule is null)
        {
            return TimeInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeInfo;
        }

        TimeInfo? result = await JsComponentReference.InvokeAsync<TimeInfo?>(
            "getTimeInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TimeInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeInfo)] = TimeInfo;
        }
        
        return TimeInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeOffset property.
    /// </summary>
    public async Task<TimeInterval?> GetTimeOffset()
    {
        if (CoreJsModule is null)
        {
            return TimeOffset;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeOffset;
        }

        TimeInterval? result = await JsComponentReference.InvokeAsync<TimeInterval?>(
            "getTimeOffset", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TimeOffset = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeOffset)] = TimeOffset;
        }
        
        return TimeOffset;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "url");
        if (result is not null)
        {
#pragma warning disable BL0005
             Url = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Url)] = Url;
        }
         
        return Url;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseViewTime property.
    /// </summary>
    public async Task<bool?> GetUseViewTime()
    {
        if (CoreJsModule is null)
        {
            return UseViewTime;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UseViewTime;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "useViewTime");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UseViewTime = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UseViewTime)] = UseViewTime;
        }
         
        return UseViewTime;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Version property.
    /// </summary>
    public async Task<double?> GetVersion()
    {
        if (CoreJsModule is null)
        {
            return Version;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Version;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "version");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Version = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Version)] = Version;
        }
         
        return Version;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BandIds property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBandIds(IReadOnlyList<long>? value)
    {
#pragma warning disable BL0005
        BandIds = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BandIds)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bandIds", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BlendMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBlendMode(BlendMode? value)
    {
#pragma warning disable BL0005
        BlendMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BlendMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "blendMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Capabilities property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCapabilities(ArcGISImageServiceCapabilities? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Capabilities = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Capabilities)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setCapabilities", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CompressionQuality property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCompressionQuality(double? value)
    {
#pragma warning disable BL0005
        CompressionQuality = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CompressionQuality)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "compressionQuality", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CompressionTolerance property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCompressionTolerance(double? value)
    {
#pragma warning disable BL0005
        CompressionTolerance = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CompressionTolerance)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "compressionTolerance", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Copyright property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCopyright(string? value)
    {
#pragma warning disable BL0005
        Copyright = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Copyright)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "copyright", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomParameters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomParameters(Dictionary<string, object>? value)
    {
#pragma warning disable BL0005
        CustomParameters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomParameters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customParameters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefinitionExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefinitionExpression(string? value)
    {
#pragma warning disable BL0005
        DefinitionExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefinitionExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "definitionExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Effect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEffect(Effect? value)
    {
#pragma warning disable BL0005
        Effect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Effect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEffect", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Fields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFields(IReadOnlyList<Field>? value)
    {
        if (value is not null)
        {
            foreach (Field item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Fields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Fields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFields", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Format property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFormat(ImageFormat? value)
    {
#pragma warning disable BL0005
        Format = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Format)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "format", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ImageMaxHeight property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetImageMaxHeight(int? value)
    {
#pragma warning disable BL0005
        ImageMaxHeight = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ImageMaxHeight)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "imageMaxHeight", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ImageMaxWidth property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetImageMaxWidth(int? value)
    {
#pragma warning disable BL0005
        ImageMaxWidth = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ImageMaxWidth)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "imageMaxWidth", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Interpolation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetInterpolation(Interpolation? value)
    {
#pragma warning disable BL0005
        Interpolation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Interpolation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "interpolation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendEnabled(bool? value)
    {
#pragma warning disable BL0005
        LegendEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "legendEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxScale(double? value)
    {
#pragma warning disable BL0005
        MaxScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinScale(double? value)
    {
#pragma warning disable BL0005
        MinScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MosaicRule property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMosaicRule(MosaicRule? value)
    {
#pragma warning disable BL0005
        MosaicRule = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MosaicRule)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setMosaicRule", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MultidimensionalSubset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMultidimensionalSubset(MultidimensionalSubset? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        MultidimensionalSubset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MultidimensionalSubset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setMultidimensionalSubset", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NoData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNoData(NoData? value)
    {
#pragma warning disable BL0005
        NoData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NoData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "noData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NoDataInterpretation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNoDataInterpretation(NoDataInterpretation? value)
    {
#pragma warning disable BL0005
        NoDataInterpretation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NoDataInterpretation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "noDataInterpretation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ObjectIdField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetObjectIdField(string? value)
    {
#pragma warning disable BL0005
        ObjectIdField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ObjectIdField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "objectIdField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PixelType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPixelType(PixelType? value)
    {
#pragma warning disable BL0005
        PixelType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PixelType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "pixelType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupEnabled(bool? value)
    {
#pragma warning disable BL0005
        PopupEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "popupEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupTemplate(PopupTemplate? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PopupTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPopupTemplate", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalItem property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalItem(PortalItem? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PortalItem = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalItem)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPortalItem", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RasterFunction property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRasterFunction(RasterFunction? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        RasterFunction = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RasterFunction)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setRasterFunction", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RefreshInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRefreshInterval(double? value)
    {
#pragma warning disable BL0005
        RefreshInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RefreshInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "refreshInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Renderer property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRenderer(IImageryRenderer? value)
    {
#pragma warning disable BL0005
        Renderer = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Renderer)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "renderer", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SourceJSON property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSourceJSON(object? value)
    {
#pragma warning disable BL0005
        SourceJSON = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SourceJSON)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sourceJSON", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeExtent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeExtent(TimeExtent? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeExtent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeExtent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeExtent", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeInfo(TimeInfo? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeOffset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeOffset(TimeInterval? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeOffset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeOffset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeOffset", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string? value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseViewTime property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseViewTime(bool? value)
    {
#pragma warning disable BL0005
        UseViewTime = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseViewTime)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useViewTime", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the BandIds property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBandIds(params long[] values)
    {
        long[] join = BandIds is null
            ? values
            : [..BandIds, ..values];
        await SetBandIds(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFields(params Field[] values)
    {
        Field[] join = Fields is null
            ? values
            : [..Fields, ..values];
        await SetFields(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the BandIds property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBandIds(params long[] values)
    {
        if (BandIds is null)
        {
            return;
        }
        await SetBandIds(BandIds.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFields(params Field[] values)
    {
        if (Fields is null)
        {
            return;
        }
        await SetFields(Fields.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Computes the rotation angle of a ImageryLayer at a given location.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#computeAngles">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageAngleResult?> ComputeAngles(ImageAngleParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageAngleResult?>(
            "computeAngles", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Computes histograms based on the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageHistogramParameters.html">ImageHistogramParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#computeHistograms">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<HistogramsResult?> ComputeHistograms(ImageHistogramParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<HistogramsResult?>(
            "computeHistograms", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Computes the corresponding pixel location in columns and rows for an image based on input geometry.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#computePixelSpaceLocations">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImagePixelLocationResult?> ComputePixelSpaceLocations(ImagePixelLocationParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImagePixelLocationResult?>(
            "computePixelSpaceLocations", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Computes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterBandStatistics">statistics</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">histograms</a> for the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageHistogramParameters.html">ImageHistogramParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#computeStatisticsHistograms">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<object?> ComputeStatisticsHistograms(ImageHistogramParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<object?>(
            "computeStatisticsHistograms", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Creates a default popup template for the layer, populated with all the fields of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#createPopupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="options">
    ///     Options for creating the popup template.
    /// </param>
    [ArcGISMethod]
    public async Task<PopupTemplate?> CreatePopupTemplate(CreatePopupTemplateOptions options)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PopupTemplate?>(
            "createPopupTemplate", 
            CancellationTokenSource.Token,
            options);
    }
    
    /// <summary>
    ///     Returns an image using the <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/export-image.htm">export REST operation</a> that displays data from an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html">ImageryLayer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#fetchImage">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="extent">
    /// </param>
    /// <param name="width">
    /// </param>
    /// <param name="height">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<object?> FetchImage(Extent extent,
        int width,
        int height,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        object? result = await JsComponentReference!.InvokeAsync<object?>(
            "fetchImage", 
            CancellationTokenSource.Token,
            extent,
            width,
            height,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Finds images based on the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-FindImagesParameters.html">FindImagesParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#findImages">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<FindImagesResult?> FindImages(FindImagesParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<FindImagesResult?>(
            "findImages", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Generates raster info for the specified raster function.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#generateRasterInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="rasterFunction">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<RasterInfo?> GenerateRasterInfo(RasterFunction rasterFunction,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        RasterInfo? result = await JsComponentReference!.InvokeAsync<RasterInfo?>(
            "generateRasterInfo", 
            CancellationTokenSource.Token,
            rasterFunction,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Gets the <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/raster-ics.htm">image coordinate system</a> information of a catalog item in an image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#getCatalogItemICSInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="rasterId">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<object?> GetCatalogItemICSInfo(long rasterId,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        object? result = await JsComponentReference!.InvokeAsync<object?>(
            "getCatalogItemICSInfo", 
            CancellationTokenSource.Token,
            rasterId,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Get the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html">raster info</a> of a <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/raster-catalog-item.htm">catalog item</a> in an image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#getCatalogItemRasterInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="rasterId">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<RasterInfo?> GetCatalogItemRasterInfo(long rasterId,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        RasterInfo? result = await JsComponentReference!.InvokeAsync<RasterInfo?>(
            "getCatalogItemRasterInfo", 
            CancellationTokenSource.Token,
            rasterId,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Retrieves an image's url using the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageUrlParameters.html">ImageUrlParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#getImageUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageUrlResult?> GetImageUrl(ImageUrlParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageUrlResult?>(
            "getImageUrl", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Returns sample point locations, pixel values and corresponding resolutions of the source data for a given geometry.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#getSamples">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageSampleResult?> GetSamples(ImageSampleParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageSampleResult?>(
            "getSamples", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Sends a request to the ArcGIS REST image service to identify content based on the specified <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageIdentifyParameters.html">ImageIdentifyParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#identify">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageIdentifyResult?> Identify(ImageIdentifyParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageIdentifyResult?>(
            "identify", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Converts a geometry from an image space to a map space using the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageToMapParameters.html">ImageToMapParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#imageToMap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<Geometry?> ImageToMap(ImageToMapParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Geometry?>(
            "imageToMap", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Creates a map space geometry from multiray image space geometries using the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageToMapMultirayParameters.html">ImageToMapMultirayParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#imageToMapMultiray">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<Geometry?> ImageToMapMultiray(ImageToMapMultirayParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Geometry?>(
            "imageToMapMultiray", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Converts a given geometry from a map space to an image space using the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-MapToImageParameters.html">MapToImageParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#mapToImage">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<Geometry?> MapToImage(MapToImageParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Geometry?>(
            "mapToImage", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Calculates the area and perimeter of a given geometry on an image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#measureAreaAndPerimeter">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageAreaResult?> MeasureAreaAndPerimeter(ImageAreaParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageAreaResult?>(
            "measureAreaAndPerimeter", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Measures the area and the perimeter of a polygon in an image space on a selected raster when the following conditions are met:
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#measureAreaFromImage">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<MeasureAreaFromImageResult?> MeasureAreaFromImage(MeasureFromImageParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<MeasureAreaFromImageResult?>(
            "measureAreaFromImage", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Calculates the distance and angle between two points on an image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#measureDistanceAndAngle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageDistanceResult?> MeasureDistanceAndAngle(ImageDistanceParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageDistanceResult?>(
            "measureDistanceAndAngle", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Calculates the height of an object between two points on an image service if the sensor info is available.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#measureHeight">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageHeightResult?> MeasureHeight(ImageHeightParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageHeightResult?>(
            "measureHeight", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Measures the length of a polyline in an image space on a selected raster when the following conditions are met:
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#measureLengthFromImage">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<MeasureLengthFromImageResult?> MeasureLengthFromImage(MeasureFromImageParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<MeasureLengthFromImageResult?>(
            "measureLengthFromImage", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Returns the location for a given point or centroid of a given area on an image service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#measurePointOrCentroid">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImagePointResult?> MeasurePointOrCentroid(ImagePointParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImagePointResult?>(
            "measurePointOrCentroid", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Returns the boundary of an image for the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageBoundaryParameters.html">ImageBoundaryParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#queryBoundary">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageBoundaryResult?> QueryBoundary(ImageBoundaryParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageBoundaryResult?>(
            "queryBoundary", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Returns GPS information for the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageGPSInfoParameters.html">ImageGPSInfoParameters</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#queryGPSInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="parameters">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<ImageGPSInfoResult?> QueryGPSInfo(ImageGPSInfoParameters parameters,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<ImageGPSInfoResult?>(
            "queryGPSInfo", 
            CancellationTokenSource.Token,
            parameters,
            requestOptions);
    }
    
    /// <summary>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against the image service and returns an array of Object IDs for the rasters.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#queryObjectIds">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<long[]?> QueryObjectIds(Query query,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<long[]?>(
            "queryObjectIds", 
            CancellationTokenSource.Token,
            query,
            requestOptions);
    }
    
    /// <summary>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against the image service and returns the number of rasters that satisfy the query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#queryRasterCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<int?> QueryRasterCount(Query query,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<int?>(
            "queryRasterCount", 
            CancellationTokenSource.Token,
            query,
            requestOptions);
    }
    
    /// <summary>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against an image service and returns a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-FeatureSet.html">FeatureSet</a>, which can be accessed using the `.then()` method once the promise resolves.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#queryRasters">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    /// </param>
    /// <param name="requestOptions">
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureSet?> QueryRasters(Query query,
        object requestOptions)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<FeatureSet?>(
            "queryRasters", 
            CancellationTokenSource.Token,
            query,
            requestOptions);
    }
    
    /// <summary>
    ///     Executes the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#pixelFilter">pixelFilter</a> function and redraws the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#redraw">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Redraw()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "redraw", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Fetches all the data for the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-RefreshableLayer.html#refresh">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public override async ValueTask Refresh()
    {
        await base.Refresh();
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "refresh", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Saves the layer to its existing portal item in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a> authenticated within the user's current session.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#save">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="options">
    ///     Various options for saving the layer.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> Save(ImageryLayerSaveOptions options)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "save", 
            CancellationTokenSource.Token,
            options);
    }
    
    /// <summary>
    ///     Saves the layer to a new portal item in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a> authenticated within the user's current session.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#saveAs">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="portalItem">
    ///     The portal item to which the layer will be saved.
    /// </param>
    /// <param name="options">
    ///     Various options for saving the layer.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> SaveAs(PortalItem portalItem,
        ImageryLayerSaveAsOptions options)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "saveAs", 
            CancellationTokenSource.Token,
            portalItem,
            options);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsRefresh(IJSStreamReference jsStreamRef)
    {
        await using Stream stream = await jsStreamRef.OpenReadStreamAsync(1_000_000_000L);
        await using MemoryStream ms = new();
        await stream.CopyToAsync(ms);
        ms.Seek(0, SeekOrigin.Begin);
        byte[] encodedJson = ms.ToArray();
        string json = Encoding.UTF8.GetString(encodedJson);
        RefreshEvent refreshEvent = 
            JsonSerializer.Deserialize<RefreshEvent>(json, 
                GeoBlazorSerialization.JsonSerializerOptions)!;
        await OnRefresh.InvokeAsync(refreshEvent);
    }
    
    /// <summary>
    ///     Fires if the layer has the <a href="#refreshInterval">refreshInterval</a> set or when <a href="#refresh">refresh()</a> method is called.
    ///     The event payload indicates if the layer's data has changed.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<RefreshEvent> OnRefresh { get; set; }
   
    /// <summary>
    ///     Used in JavaScript layer to determine if the event listener is registered.
    /// </summary>
    public bool HasRefreshListener => OnRefresh.HasDelegate;
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISImageServiceCapabilities capabilities:
                if (capabilities != Capabilities)
                {
                    Capabilities = capabilities;
                    ModifiedParameters[nameof(Capabilities)] = Capabilities;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            case Field fields:
                Fields ??= [];
                if (!Fields.Contains(fields))
                {
                    Fields = [..Fields, fields];
                    ModifiedParameters[nameof(Fields)] = Fields;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            case MultidimensionalSubset multidimensionalSubset:
                if (multidimensionalSubset != MultidimensionalSubset)
                {
                    MultidimensionalSubset = multidimensionalSubset;
                    ModifiedParameters[nameof(MultidimensionalSubset)] = MultidimensionalSubset;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            case NoData noData:
                if (noData != NoData)
                {
                    NoData = noData;
                    ModifiedParameters[nameof(NoData)] = NoData;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            case PopupTemplate popupTemplate:
                if (popupTemplate != PopupTemplate)
                {
                    PopupTemplate = popupTemplate;
                    ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            case PortalItem portalItem:
                if (portalItem != PortalItem)
                {
                    PortalItem = portalItem;
                    ModifiedParameters[nameof(PortalItem)] = PortalItem;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            case RasterFunction rasterFunction:
                if (rasterFunction != RasterFunction)
                {
                    RasterFunction = rasterFunction;
                    ModifiedParameters[nameof(RasterFunction)] = RasterFunction;
                    if (MapRendered)
                    {
                        await UpdateLayer();
                    }
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISImageServiceCapabilities _:
                Capabilities = null;
                ModifiedParameters[nameof(Capabilities)] = Capabilities;
                    
                return true;
            case Field fields:
                Fields = Fields?.Where(f => f != fields).ToList();
                ModifiedParameters[nameof(Fields)] = Fields;
                    
                return true;
            case MultidimensionalSubset _:
                MultidimensionalSubset = null;
                ModifiedParameters[nameof(MultidimensionalSubset)] = MultidimensionalSubset;
                    
                return true;
            case NoData _:
                NoData = null;
                ModifiedParameters[nameof(NoData)] = NoData;

                return true;
            case PopupTemplate _:
                PopupTemplate = null;
                ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;

                return true;
            case PortalItem _:
                PortalItem = null;
                ModifiedParameters[nameof(PortalItem)] = PortalItem;

                return true;
            case RasterFunction _:
                RasterFunction = null;
                ModifiedParameters[nameof(RasterFunction)] = RasterFunction;

                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (PortalItem is null && Url is null)
        {
            throw new MissingRequiredOptionsChildElementException(nameof(ImageryLayer), [nameof(PortalItem), nameof(Url)]);
        }
        Capabilities?.ValidateRequiredGeneratedChildren();
        if (Fields is not null)
        {
            foreach (Field child in Fields)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        MultidimensionalSubset?.ValidateRequiredGeneratedChildren();
        NoData?.ValidateRequiredGeneratedChildren();
        PopupTemplate?.ValidateRequiredGeneratedChildren();
        RasterFunction?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
