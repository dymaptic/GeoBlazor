// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TimeExtent.html">GeoBlazor Docs</a>
///     A period of time with a definitive <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#start">start</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#end">end</a> date.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TimeExtent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TimeExtent()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="start">
    ///     The start time of the time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#start">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="end">
    ///     The end time of the time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#end">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TimeExtent(
        DateTime start,
        DateTime end)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Start = start;
        End = end;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The end time of the time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#end">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? End { get; set; }
    
    /// <summary>
    ///     The start time of the time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#start">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Start { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the End property.
    /// </summary>
    public async Task<DateTime?> GetEnd()
    {
        if (CoreJsModule is null)
        {
            return End;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return End;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "end");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             End = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(End)] = End;
        }
         
        return End;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Start property.
    /// </summary>
    public async Task<DateTime?> GetStart()
    {
        if (CoreJsModule is null)
        {
            return Start;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Start;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "start");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Start = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Start)] = Start;
        }
         
        return Start;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the End property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnd(DateTime? value)
    {
#pragma warning disable BL0005
        End = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(End)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "end", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Start property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStart(DateTime? value)
    {
#pragma warning disable BL0005
        Start = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Start)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "start", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Returns the time extent resulting from the intersection of a given time extent and parsed time extent.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#intersection">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="timeExtent">
    ///     The time extent to be intersected with the time extent on which <code>intersection()</code> is being called on.
    /// </param>
    [ArcGISMethod]
    public async Task<TimeExtent?> Intersection(TimeExtent timeExtent)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<TimeExtent?>(
            "intersection", 
            CancellationTokenSource.Token,
            timeExtent);
    }
    
    /// <summary>
    ///     Returns the time extent resulting from the union of the current time extent and a given time extent.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeExtent.html#union">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="timeExtent">
    ///     The time extent to be unioned with.
    /// </param>
    [ArcGISMethod]
    public async Task<TimeExtent?> Union(TimeExtent timeExtent)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<TimeExtent?>(
            "union", 
            CancellationTokenSource.Token,
            timeExtent);
    }
    
#endregion

}
