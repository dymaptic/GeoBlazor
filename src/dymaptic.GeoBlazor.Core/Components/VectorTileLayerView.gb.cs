// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VectorTileLayerView.html">GeoBlazor Docs</a>
///     Represents the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html">VectorTileLayer</a>
///     after it has been added to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html">Map</a> in either a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-VectorTileLayerView.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VectorTileLayerView : LayerView
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VectorTileLayerView()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="visible">
    ///     When `true`, the layer is visible in the view.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VectorTileLayerView(
        bool? visible = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Visible = visible;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VectorTileLayerView.html#vectortilelayerviewhasvisiblefeatures-property">GeoBlazor Docs</a>
    ///     When `false`, it indicates that tiles have no visible features within the current extent.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-VectorTileLayerView.html#hasVisibleFeatures">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? HasVisibleFeatures { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the HasVisibleFeatures property.
    /// </summary>
    public async Task<bool?> GetHasVisibleFeatures()
    {
        if (CoreJsModule is null)
        {
            return HasVisibleFeatures;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasVisibleFeatures;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasVisibleFeatures");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasVisibleFeatures = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasVisibleFeatures)] = HasVisibleFeatures;
        }
         
        return HasVisibleFeatures;
    }
    
#endregion

}
