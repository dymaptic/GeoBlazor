// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The BasemapGalleryItem class represents one of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#items">items</a> in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BasemapGalleryItem : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BasemapGalleryItem()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="basemap">
    ///     The item's associated basemap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html#basemap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public BasemapGalleryItem(
        Basemap? basemap = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Basemap = basemap;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The item's associated basemap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html#basemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? Basemap { get; set; }
    
    /// <summary>
    ///     The Error object returned if an error occurred.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html#error">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Error? Error { get; protected set; }
    
    /// <summary>
    ///     The item's state.
    ///     default loading
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public BasemapGalleryItemState? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Basemap property.
    /// </summary>
    public async Task<Basemap?> GetBasemap()
    {
        if (CoreJsModule is null)
        {
            return Basemap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Basemap;
        }

        Basemap? result = await JsComponentReference.InvokeAsync<Basemap?>(
            "getBasemap", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Basemap is not null)
            {
                result.Id = Basemap.Id;
            }
            
#pragma warning disable BL0005
            Basemap = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Basemap)] = Basemap;
        }
        
        return Basemap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Error property.
    /// </summary>
    public async Task<Error?> GetError()
    {
        if (CoreJsModule is null)
        {
            return Error;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Error;
        }

        // get the property value
        Error? result = await JsComponentReference!.InvokeAsync<Error?>("getProperty",
            CancellationTokenSource.Token, "error");
        if (result is not null)
        {
#pragma warning disable BL0005
             Error = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Error)] = Error;
        }
         
        return Error;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<BasemapGalleryItemState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<BasemapGalleryItemState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<BasemapGalleryItemState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (BasemapGalleryItemState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Basemap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemap(Basemap? value)
    {
#pragma warning disable BL0005
        Basemap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Basemap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "basemap", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap basemap:
                if (basemap != Basemap)
                {
                    Basemap = basemap;
                    
                    ModifiedParameters[nameof(Basemap)] = Basemap;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap _:
                Basemap = null;
                
                ModifiedParameters[nameof(Basemap)] = Basemap;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Basemap?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
