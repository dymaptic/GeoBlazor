// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Represents a registered user of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PortalUser : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PortalUser()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="access">
    ///     Indicates the level of access of the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="created">
    ///     The date the user was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="culture">
    ///     The culture information for the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#culture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     A description of the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="email">
    ///     The user's e-mail address.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#email">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fullName">
    ///     The user's full name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fullName">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="modified">
    ///     The date the user was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="orgId">
    ///     The ID of the organization the user belongs to.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#orgId">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="preferredView">
    ///     The user's preferred view for content, either web or GIS.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#preferredView">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="privileges">
    ///     The user's privileges based on their user type or role in their organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#privileges">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="region">
    ///     The user preferred region, used to set the featured maps on the home page, content in the gallery, and the default extent of new maps in the Viewer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#region">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="role">
    ///     Defines the user's role in the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#role">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="roleId">
    ///     The ID of the user's role.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#roleId">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="units">
    ///     The user's personal units of measure setting.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#units">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="username">
    ///     The username of the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#username">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PortalUser(
        PortalUserAccess? access = null,
        DateTime? created = null,
        string? culture = null,
        string? description = null,
        string? email = null,
        string? fullName = null,
        DateTime? modified = null,
        string? orgId = null,
        string? preferredView = null,
        IReadOnlyList<string>? privileges = null,
        string? region = null,
        PortalUserRole? role = null,
        string? roleId = null,
        PortalUserUnits? units = null,
        string? username = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Access = access;
        Created = created;
        Culture = culture;
        Description = description;
        Email = email;
        FullName = fullName;
        Modified = modified;
        OrgId = orgId;
        PreferredView = preferredView;
        Privileges = privileges;
        Region = region;
        Role = role;
        RoleId = roleId;
        Units = units;
        Username = username;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates the level of access of the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalUserAccess? Access { get; set; }
    
    /// <summary>
    ///     The date the user was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Created { get; set; }
    
    /// <summary>
    ///     The culture information for the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#culture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Culture { get; set; }
    
    /// <summary>
    ///     A description of the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; set; }
    
    /// <summary>
    ///     The user's e-mail address.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#email">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Email { get; set; }
    
    /// <summary>
    ///     The user's full name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fullName">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FullName { get; set; }
    
    /// <summary>
    ///     The date the user was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Modified { get; set; }
    
    /// <summary>
    ///     The ID of the organization the user belongs to.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#orgId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? OrgId { get; set; }
    
    /// <summary>
    ///     The portal associated with the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [AncestorPropertyReference]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Portal? Portal { get; set; }
    
    /// <summary>
    ///     The user's preferred view for content, either web or GIS.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#preferredView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? PreferredView { get; set; }
    
    /// <summary>
    ///     The user's privileges based on their user type or role in their organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#privileges">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Privileges { get; set; }
    
    /// <summary>
    ///     The user preferred region, used to set the featured maps on the home page, content in the gallery, and the default extent of new maps in the Viewer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#region">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Region { get; set; }
    
    /// <summary>
    ///     Defines the user's role in the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#role">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalUserRole? Role { get; set; }
    
    /// <summary>
    ///     The ID of the user's role.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#roleId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? RoleId { get; set; }
    
    /// <summary>
    ///     The JSON used to create the property values when the `PortalUser` is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SourceJSON { get; protected set; }
    
    /// <summary>
    ///     The URL to the thumbnail image for the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#thumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ThumbnailUrl { get; protected set; }
    
    /// <summary>
    ///     The user's personal units of measure setting.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#units">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalUserUnits? Units { get; set; }
    
    /// <summary>
    ///     The URL for the user's content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#userContentUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? UserContentUrl { get; protected set; }
    
    /// <summary>
    ///     The username of the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#username">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Username { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Access property.
    /// </summary>
    public async Task<PortalUserAccess?> GetAccess()
    {
        if (CoreJsModule is null)
        {
            return Access;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Access;
        }

        // get the property value
        PortalUserAccess? result = await CoreJsModule!.InvokeAsync<PortalUserAccess?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "access");
        if (result is not null)
        {
#pragma warning disable BL0005
             Access = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Access)] = Access;
        }
         
        return Access;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Created property.
    /// </summary>
    public async Task<DateTime?> GetCreated()
    {
        if (CoreJsModule is null)
        {
            return Created;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Created;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "created");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Created = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Created)] = Created;
        }
         
        return Created;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Culture property.
    /// </summary>
    public async Task<string?> GetCulture()
    {
        if (CoreJsModule is null)
        {
            return Culture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Culture;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "culture");
        if (result is not null)
        {
#pragma warning disable BL0005
             Culture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Culture)] = Culture;
        }
         
        return Culture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<string?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "description");
        if (result is not null)
        {
#pragma warning disable BL0005
             Description = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Description)] = Description;
        }
         
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Email property.
    /// </summary>
    public async Task<string?> GetEmail()
    {
        if (CoreJsModule is null)
        {
            return Email;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Email;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "email");
        if (result is not null)
        {
#pragma warning disable BL0005
             Email = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Email)] = Email;
        }
         
        return Email;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FullName property.
    /// </summary>
    public async Task<string?> GetFullName()
    {
        if (CoreJsModule is null)
        {
            return FullName;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FullName;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "fullName");
        if (result is not null)
        {
#pragma warning disable BL0005
             FullName = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FullName)] = FullName;
        }
         
        return FullName;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Modified property.
    /// </summary>
    public async Task<DateTime?> GetModified()
    {
        if (CoreJsModule is null)
        {
            return Modified;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Modified;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "modified");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Modified = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Modified)] = Modified;
        }
         
        return Modified;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OrgId property.
    /// </summary>
    public async Task<string?> GetOrgId()
    {
        if (CoreJsModule is null)
        {
            return OrgId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OrgId;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "orgId");
        if (result is not null)
        {
#pragma warning disable BL0005
             OrgId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OrgId)] = OrgId;
        }
         
        return OrgId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PreferredView property.
    /// </summary>
    public async Task<string?> GetPreferredView()
    {
        if (CoreJsModule is null)
        {
            return PreferredView;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PreferredView;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "preferredView");
        if (result is not null)
        {
#pragma warning disable BL0005
             PreferredView = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PreferredView)] = PreferredView;
        }
         
        return PreferredView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Privileges property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetPrivileges()
    {
        if (CoreJsModule is null)
        {
            return Privileges;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Privileges;
        }

        // get the property value
        IReadOnlyList<string>? result = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "privileges");
        if (result is not null)
        {
#pragma warning disable BL0005
             Privileges = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Privileges)] = Privileges;
        }
         
        return Privileges;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Region property.
    /// </summary>
    public async Task<string?> GetRegion()
    {
        if (CoreJsModule is null)
        {
            return Region;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Region;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "region");
        if (result is not null)
        {
#pragma warning disable BL0005
             Region = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Region)] = Region;
        }
         
        return Region;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Role property.
    /// </summary>
    public async Task<PortalUserRole?> GetRole()
    {
        if (CoreJsModule is null)
        {
            return Role;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Role;
        }

        // get the property value
        PortalUserRole? result = await CoreJsModule!.InvokeAsync<PortalUserRole?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "role");
        if (result is not null)
        {
#pragma warning disable BL0005
             Role = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Role)] = Role;
        }
         
        return Role;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RoleId property.
    /// </summary>
    public async Task<string?> GetRoleId()
    {
        if (CoreJsModule is null)
        {
            return RoleId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RoleId;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "roleId");
        if (result is not null)
        {
#pragma warning disable BL0005
             RoleId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RoleId)] = RoleId;
        }
         
        return RoleId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<string?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sourceJSON");
        if (result is not null)
        {
#pragma warning disable BL0005
             SourceJSON = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        }
         
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ThumbnailUrl property.
    /// </summary>
    public async Task<string?> GetThumbnailUrl()
    {
        if (CoreJsModule is null)
        {
            return ThumbnailUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ThumbnailUrl;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "thumbnailUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             ThumbnailUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ThumbnailUrl)] = ThumbnailUrl;
        }
         
        return ThumbnailUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Units property.
    /// </summary>
    public async Task<PortalUserUnits?> GetUnits()
    {
        if (CoreJsModule is null)
        {
            return Units;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Units;
        }

        // get the property value
        PortalUserUnits? result = await CoreJsModule!.InvokeAsync<PortalUserUnits?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "units");
        if (result is not null)
        {
#pragma warning disable BL0005
             Units = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Units)] = Units;
        }
         
        return Units;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UserContentUrl property.
    /// </summary>
    public async Task<string?> GetUserContentUrl()
    {
        if (CoreJsModule is null)
        {
            return UserContentUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return UserContentUrl;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "userContentUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             UserContentUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UserContentUrl)] = UserContentUrl;
        }
         
        return UserContentUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Username property.
    /// </summary>
    public async Task<string?> GetUsername()
    {
        if (CoreJsModule is null)
        {
            return Username;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Username;
        }

        // get the property value
        string? result = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "username");
        if (result is not null)
        {
#pragma warning disable BL0005
             Username = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Username)] = Username;
        }
         
        return Username;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Access property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAccess(PortalUserAccess value)
    {
#pragma warning disable BL0005
        Access = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Access)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "access", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Created property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCreated(DateTime value)
    {
#pragma warning disable BL0005
        Created = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Created)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "created", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Culture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCulture(string value)
    {
#pragma warning disable BL0005
        Culture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Culture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "culture", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(string value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Email property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEmail(string value)
    {
#pragma warning disable BL0005
        Email = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Email)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "email", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FullName property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFullName(string value)
    {
#pragma warning disable BL0005
        FullName = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FullName)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fullName", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Modified property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetModified(DateTime value)
    {
#pragma warning disable BL0005
        Modified = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Modified)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "modified", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OrgId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrgId(string value)
    {
#pragma warning disable BL0005
        OrgId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OrgId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "orgId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PreferredView property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPreferredView(string value)
    {
#pragma warning disable BL0005
        PreferredView = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PreferredView)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "preferredView", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Privileges property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPrivileges(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        Privileges = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Privileges)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "privileges", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Region property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRegion(string value)
    {
#pragma warning disable BL0005
        Region = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Region)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "region", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Role property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRole(PortalUserRole value)
    {
#pragma warning disable BL0005
        Role = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Role)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "role", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RoleId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRoleId(string value)
    {
#pragma warning disable BL0005
        RoleId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RoleId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "roleId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Units property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnits(PortalUserUnits value)
    {
#pragma warning disable BL0005
        Units = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Units)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "units", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Username property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUsername(string value)
    {
#pragma warning disable BL0005
        Username = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Username)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "username", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Privileges property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToPrivileges(params string[] values)
    {
        string[] join = Privileges is null
            ? values
            : [..Privileges, ..values];
        await SetPrivileges(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Privileges property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromPrivileges(params string[] values)
    {
        if (Privileges is null)
        {
            return;
        }
        await SetPrivileges(Privileges.Except(values).ToArray());
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     Adds an item to the user's portal content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#addItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="item">
    ///     The item to add to the user's content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#addItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="data">
    ///     The component used to stream the data represented by the item to the client.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#addItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="folder">
    ///     The portal folder in which to store the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#addItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> AddItem(PortalItem item,
        string data,
        string folder)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "addItem", 
            CancellationTokenSource.Token,
            new { item, data, folder });
    }
    
    /// <summary>
    ///     Deletes an item from the user's portal content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#deleteItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="item">
    ///     The portal item to remove.
    /// </param>
    /// <param name="permanentDelete">
    ///     <strong>Since 4.30.</strong> When the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#recycleBinEnabled">recycle bin is enabled</a> and the item to be deleted is an item type supported by the recycle bin, this parameter determines if the item should be permanently deleted. If <code>true</code>, the item will be permanently deleted. Otherwise, the item will be moved to the recycle bin. If the recycle bin is disabled, this parameter has no effect. If the item is not supported by the recycle bin, it will be permanently deleted regardless of the value of this parameter.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> DeleteItem(PortalItem item,
        bool permanentDelete)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "deleteItem", 
            CancellationTokenSource.Token,
            item,
            permanentDelete);
    }
    
    /// <summary>
    ///     Deletes items from the user's portal content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#deleteItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="items">
    ///     The portal items to remove.
    /// </param>
    /// <param name="permanentDelete">
    ///     <strong>Since 4.30.</strong> When the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#recycleBinEnabled">recycle bin is enabled</a> and the items to be deleted are item types supported by the recycle bin, this parameter determines if the items should be permanently deleted. If <code>true</code>, the items will be permanently deleted. Otherwise, the items will be moved to the recycle bin. If the recycle bin is disabled, this parameter has no effect. If items are not supported by the recycle bin, they will be permanently deleted regardless of the value of this parameter.
    /// </param>
    [ArcGISMethod]
    public async Task<DeleteItemsResult[]?> DeleteItems(IReadOnlyCollection<PortalItem> items,
        bool permanentDelete)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<DeleteItemsResult[]?>(
            "deleteItems", 
            CancellationTokenSource.Token,
            items,
            permanentDelete);
    }
    
    /// <summary>
    ///     Fetches all of the user's folders used to organize portal content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchFolders">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<PortalFolder[]?> FetchFolders()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalFolder[]?>(
            "fetchFolders", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Fetches all the groups that the portal user has permission to access.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<PortalGroup[]?> FetchGroups()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalGroup[]?>(
            "fetchGroups", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Retrieves all the items in either the user's root folder or the specified folder.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="folder">
    ///     The folder to retrieve items from.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="inRecycleBin">
    ///     Option to retrieve items from the recycle bin instead.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="includeSubfolderItems">
    ///     Option to include items from subfolders along with items in the root folder.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="num">
    ///     The maximum number of results to be included in the result set response.
    ///     default 10
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sortField">
    ///     A comma-delimited list of fields to sort by.
    ///     default created
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sortOrder">
    ///     The order in which to sort the results.
    ///     default asc
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="start">
    ///     The index of the first entry in the result set response.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    [ArcGISMethod]
    public async Task<FetchItemsResult?> FetchItems(PortalFolder folder,
        bool inRecycleBin,
        bool includeSubfolderItems,
        double num,
        string sortField,
        string sortOrder,
        double start)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<FetchItemsResult?>(
            "fetchItems", 
            CancellationTokenSource.Token,
            new { folder, inRecycleBin, includeSubfolderItems, num, sortField, sortOrder, start });
    }
    
    /// <summary>
    ///     Fetches the tag objects that have been created by the portal user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fetchTags">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<string[]?> FetchTags()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string[]?>(
            "fetchTags", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Get the URL to the thumbnail image for the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#getThumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="width">
    ///     The desired image width.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetThumbnailUrl(int width)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getThumbnailUrl", 
            CancellationTokenSource.Token,
            width);
    }
    
    /// <summary>
    ///     Executes a query against the user's favorite group to return an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">PortalItem</a> objects that match the input query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#queryFavorites">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="queryParams">
    ///     The input query parameters
    ///     defined in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalQueryParams.html">PortalQueryParams</a>. This object may be
    ///     <a href="https://developers.arcgis.com/javascript/latest/autocasting/">autocast</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalQueryResult?> QueryFavorites(PortalQueryParams queryParams)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalQueryResult?>(
            "queryFavorites", 
            CancellationTokenSource.Token,
            queryParams);
    }
    
    /// <summary>
    ///     Restores an item from the user's recycle bin to their content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#restoreItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="item">
    ///     The portal item to restore.
    /// </param>
    /// <param name="folder">
    ///     The folder to restore the item to. If not specified, the item will be restored to the root folder.
    ///     If an invalid folder is specified, an error will be returned and the item will not be restored.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> RestoreItem(PortalItem item,
        PortalFolder folder)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "restoreItem", 
            CancellationTokenSource.Token,
            item,
            folder);
    }
    
#endregion




    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Portal portal:
                if (portal != Portal)
                {
                    Portal = portal;
                    
                    ModifiedParameters[nameof(Portal)] = Portal;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Portal _:
                Portal = null;
                
                ModifiedParameters[nameof(Portal)] = Portal;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        Portal?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
