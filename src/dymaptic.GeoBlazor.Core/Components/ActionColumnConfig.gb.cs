// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Configuration for the FeatureTable's actionColumn.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ActionColumnConfig : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ActionColumnConfig()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="actionColumnDisabledFunctionDisabled">
    ///     Indicates if a specific action should be conditionally disabled.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="boolDisabled">
    ///     Indicates if a specific action should be conditionally disabled.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="callback">
    ///     Callback function invoked when the action is clicked or activated via the keyboard.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="frozenToEnd">
    ///     Indicates the column should be frozen to the end of the table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="icon">
    ///     The string value indicating the <a target="_blank" href="https://developers.arcgis.com/calcite-design-system/icons/">Calcite icon</a> displayed for the action.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     The accessible label to display when hovering over the action.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ActionColumnConfig(
        ActionColumnDisabledFunction? actionColumnDisabledFunctionDisabled = null,
        bool? boolDisabled = null,
        ActionColumnCallback? callback = null,
        bool? frozenToEnd = null,
        string? icon = null,
        string? label = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ActionColumnDisabledFunctionDisabled = actionColumnDisabledFunctionDisabled;
        BoolDisabled = boolDisabled;
        Callback = callback;
        FrozenToEnd = frozenToEnd;
        Icon = icon;
        Label = label;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates if a specific action should be conditionally disabled.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    public ActionColumnDisabledFunction? ActionColumnDisabledFunctionDisabled { get; set; }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="ActionColumnDisabledFunctionDisabled" /> function was registered.
    /// </summary>
    public bool HasActionColumnDisabledFunctionDisabled => ActionColumnDisabledFunctionDisabled is not null;
    
    /// <summary>
    ///     Indicates if a specific action should be conditionally disabled.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? BoolDisabled { get; set; }
    
    /// <summary>
    ///     Callback function invoked when the action is clicked or activated via the keyboard.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public ActionColumnCallback? Callback { get; set; }
    
    /// <summary>
    ///    JS-invokable method that triggers the <see cref="Callback"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task OnJsCallback(string parameters)
    {
        if (Callback is not null)
        {
            await Callback.Invoke(parameters);
        }
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="Callback" /> function was registered.
    /// </summary>
    public bool HasCallback => Callback is not null;
    
    /// <summary>
    ///     Indicates the column should be frozen to the end of the table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? FrozenToEnd { get; set; }
    
    /// <summary>
    ///     The string value indicating the <a target="_blank" href="https://developers.arcgis.com/calcite-design-system/icons/">Calcite icon</a> displayed for the action.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Icon { get; set; }
    
    /// <summary>
    ///     The accessible label to display when hovering over the action.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-FeatureTableViewModel.html#ActionColumnConfig">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Label { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BoolDisabled property.
    /// </summary>
    public async Task<bool?> GetBoolDisabled()
    {
        if (CoreJsModule is null)
        {
            return BoolDisabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BoolDisabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "boolDisabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BoolDisabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BoolDisabled)] = BoolDisabled;
        }
         
        return BoolDisabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FrozenToEnd property.
    /// </summary>
    public async Task<bool?> GetFrozenToEnd()
    {
        if (CoreJsModule is null)
        {
            return FrozenToEnd;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FrozenToEnd;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "frozenToEnd");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FrozenToEnd = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FrozenToEnd)] = FrozenToEnd;
        }
         
        return FrozenToEnd;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Icon property.
    /// </summary>
    public async Task<string?> GetIcon()
    {
        if (CoreJsModule is null)
        {
            return Icon;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Icon;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "icon");
        if (result is not null)
        {
#pragma warning disable BL0005
             Icon = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Icon)] = Icon;
        }
         
        return Icon;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Label property.
    /// </summary>
    public async Task<string?> GetLabel()
    {
        if (CoreJsModule is null)
        {
            return Label;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Label;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "label");
        if (result is not null)
        {
#pragma warning disable BL0005
             Label = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Label)] = Label;
        }
         
        return Label;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BoolDisabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBoolDisabled(bool? value)
    {
#pragma warning disable BL0005
        BoolDisabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BoolDisabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "boolDisabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FrozenToEnd property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFrozenToEnd(bool? value)
    {
#pragma warning disable BL0005
        FrozenToEnd = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FrozenToEnd)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "frozenToEnd", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Icon property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIcon(string? value)
    {
#pragma warning disable BL0005
        Icon = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Icon)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "icon", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Label property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLabel(string? value)
    {
#pragma warning disable BL0005
        Label = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Label)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "label", value);
    }
    
#endregion

}
