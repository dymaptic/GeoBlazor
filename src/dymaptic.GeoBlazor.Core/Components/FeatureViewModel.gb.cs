// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html">Feature</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureViewModel : MapComponent,
    IViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="abilities">
    ///     Defines the specific <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">abilities</a> that the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html">Feature</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">Popup</a> widgets should use when querying and displaying its content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultPopupTemplateEnabled">
    ///     Enables automatic creation of a popup template for layers that have popups enabled but no popupTemplate defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#defaultPopupTemplateEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="graphic">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html">Graphic</a> used to represent the feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#graphic">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="location">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a> representing the location of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> interaction used to trigger the opening of the widget.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#location">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference used for <a target="_blank" href="https://developers.arcgis.com/arcade">Arcade</a> operations.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeZone">
    ///     Dates and times displayed in the widget will be displayed in this time zone.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#timeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureViewModel(
        Abilities? abilities = null,
        bool? defaultPopupTemplateEnabled = null,
        Graphic? graphic = null,
        Point? location = null,
        SpatialReference? spatialReference = null,
        string? timeZone = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Abilities = abilities;
        DefaultPopupTemplateEnabled = defaultPopupTemplateEnabled;
        Graphic = graphic;
        Location = location;
        SpatialReference = spatialReference;
        TimeZone = timeZone;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Defines the specific <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">abilities</a> that the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html">Feature</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">Popup</a> widgets should use when querying and displaying its content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Abilities? Abilities { get; set; }
    
    /// <summary>
    ///     Enables automatic creation of a popup template for layers that have popups enabled but no popupTemplate defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#defaultPopupTemplateEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DefaultPopupTemplateEnabled { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#content">content</a> of the feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ElementReference? ElementReferenceContent { get; protected set; }
    
    /// <summary>
    ///     The formatted attributes calculated from `fieldInfo` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> content.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#formattedAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureViewModelFormattedAttributes? FormattedAttributes { get; protected set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html">Graphic</a> used to represent the feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#graphic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Graphic? Graphic { get; set; }
    
    /// <summary>
    ///     A read-only property containing metadata regarding the last edit performed on a feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#lastEditInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureViewModelLastEditInfo? LastEditInfo { get; protected set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a> representing the location of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> interaction used to trigger the opening of the widget.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#location">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Location { get; set; }
    
    /// <summary>
    ///     A map is required when the input <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#graphic">graphic</a> has a popupTemplate that contains <a target="_blank" href="https://developers.arcgis.com/arcade">Arcade</a> expressions in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html">ExpressionInfo</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html">ExpressionContent</a> that may use the `$map` profile variable to access data from layers within a map.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#map">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Map? Map { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#content">content</a> of the feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<PopupContent>? PopupContentCollectionContent { get; protected set; }
    
    /// <summary>
    ///     The spatial reference used for <a target="_blank" href="https://developers.arcgis.com/arcade">Arcade</a> operations.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
    /// <summary>
    ///     The view model's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public State? State { get; protected set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#content">content</a> of the feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringContent { get; protected set; }
    
    /// <summary>
    ///     Dates and times displayed in the widget will be displayed in this time zone.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#timeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TimeZone { get; set; }
    
    /// <summary>
    ///     The title for the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; protected set; }
    
    /// <summary>
    ///     Indicates whether the feature is currently waiting for all of its content to finish loading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#waitingForContent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? WaitingForContent { get; protected set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#content">content</a> of the feature.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Widget? WidgetContent { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Abilities property.
    /// </summary>
    public async Task<Abilities?> GetAbilities()
    {
        if (CoreJsModule is null)
        {
            return Abilities;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Abilities;
        }

        // get the property value
        Abilities? result = await JsComponentReference!.InvokeAsync<Abilities?>("getProperty",
            CancellationTokenSource.Token, "abilities");
        if (result is not null)
        {
#pragma warning disable BL0005
             Abilities = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Abilities)] = Abilities;
        }
         
        return Abilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultPopupTemplateEnabled property.
    /// </summary>
    public async Task<bool?> GetDefaultPopupTemplateEnabled()
    {
        if (CoreJsModule is null)
        {
            return DefaultPopupTemplateEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DefaultPopupTemplateEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "defaultPopupTemplateEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DefaultPopupTemplateEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultPopupTemplateEnabled)] = DefaultPopupTemplateEnabled;
        }
         
        return DefaultPopupTemplateEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ElementReferenceContent property.
    /// </summary>
    public async Task<ElementReference?> GetElementReferenceContent()
    {
        if (CoreJsModule is null)
        {
            return ElementReferenceContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ElementReferenceContent;
        }

        // get the property value
        JsNullableElementReferenceWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableElementReferenceWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "elementReferenceContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ElementReferenceContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ElementReferenceContent)] = ElementReferenceContent;
        }
         
        return ElementReferenceContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FormattedAttributes property.
    /// </summary>
    public async Task<FeatureViewModelFormattedAttributes?> GetFormattedAttributes()
    {
        if (CoreJsModule is null)
        {
            return FormattedAttributes;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FormattedAttributes;
        }

        // get the property value
        FeatureViewModelFormattedAttributes? result = await JsComponentReference!.InvokeAsync<FeatureViewModelFormattedAttributes?>("getProperty",
            CancellationTokenSource.Token, "formattedAttributes");
        if (result is not null)
        {
#pragma warning disable BL0005
             FormattedAttributes = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FormattedAttributes)] = FormattedAttributes;
        }
         
        return FormattedAttributes;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Graphic property.
    /// </summary>
    public async Task<Graphic?> GetGraphic()
    {
        if (CoreJsModule is null)
        {
            return Graphic;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Graphic;
        }

        Graphic? result = await JsComponentReference.InvokeAsync<Graphic?>(
            "getGraphic", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Graphic is not null)
            {
                result.Id = Graphic.Id;
            }
            
#pragma warning disable BL0005
            Graphic = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Graphic)] = Graphic;
        }
        
        return Graphic;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LastEditInfo property.
    /// </summary>
    public async Task<FeatureViewModelLastEditInfo?> GetLastEditInfo()
    {
        if (CoreJsModule is null)
        {
            return LastEditInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LastEditInfo;
        }

        // get the property value
        FeatureViewModelLastEditInfo? result = await JsComponentReference!.InvokeAsync<FeatureViewModelLastEditInfo?>("getProperty",
            CancellationTokenSource.Token, "lastEditInfo");
        if (result is not null)
        {
#pragma warning disable BL0005
             LastEditInfo = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LastEditInfo)] = LastEditInfo;
        }
         
        return LastEditInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Location property.
    /// </summary>
    public async Task<Point?> GetLocation()
    {
        if (CoreJsModule is null)
        {
            return Location;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Location;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getLocation", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Location is not null)
            {
                result.Id = Location.Id;
            }
            
#pragma warning disable BL0005
            Location = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Location)] = Location;
        }
        
        return Location;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Map property.
    /// </summary>
    public async Task<Map?> GetMap()
    {
        if (CoreJsModule is null)
        {
            return Map;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Map;
        }

        // get the property value
        Map? result = await JsComponentReference!.InvokeAsync<Map?>("getProperty",
            CancellationTokenSource.Token, "map");
        if (result is not null)
        {
#pragma warning disable BL0005
             Map = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Map)] = Map;
        }
         
        return Map;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupContentCollectionContent property.
    /// </summary>
    public async Task<IReadOnlyList<PopupContent>?> GetPopupContentCollectionContent()
    {
        if (CoreJsModule is null)
        {
            return PopupContentCollectionContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PopupContentCollectionContent;
        }

        // get the property value
        IReadOnlyList<PopupContent>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<PopupContent>?>("getProperty",
            CancellationTokenSource.Token, "popupContentCollectionContent");
        if (result is not null)
        {
#pragma warning disable BL0005
             PopupContentCollectionContent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PopupContentCollectionContent)] = PopupContentCollectionContent;
        }
         
        return PopupContentCollectionContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        // get the property value
        SpatialReference? result = await JsComponentReference!.InvokeAsync<SpatialReference?>("getProperty",
            CancellationTokenSource.Token, "spatialReference");
        if (result is not null)
        {
#pragma warning disable BL0005
             SpatialReference = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
         
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<State?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<State>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<State>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (State)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringContent property.
    /// </summary>
    public async Task<string?> GetStringContent()
    {
        if (CoreJsModule is null)
        {
            return StringContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return StringContent;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "stringContent");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringContent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringContent)] = StringContent;
        }
         
        return StringContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeZone property.
    /// </summary>
    public async Task<string?> GetTimeZone()
    {
        if (CoreJsModule is null)
        {
            return TimeZone;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TimeZone;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "timeZone");
        if (result is not null)
        {
#pragma warning disable BL0005
             TimeZone = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TimeZone)] = TimeZone;
        }
         
        return TimeZone;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WaitingForContent property.
    /// </summary>
    public async Task<bool?> GetWaitingForContent()
    {
        if (CoreJsModule is null)
        {
            return WaitingForContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return WaitingForContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "waitingForContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             WaitingForContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(WaitingForContent)] = WaitingForContent;
        }
         
        return WaitingForContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WidgetContent property.
    /// </summary>
    public async Task<Widget?> GetWidgetContent()
    {
        if (CoreJsModule is null)
        {
            return WidgetContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return WidgetContent;
        }

        Widget? result = await JsComponentReference.InvokeAsync<Widget?>(
            "getWidgetContent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (WidgetContent is not null)
            {
                result.Id = WidgetContent.Id;
            }
            
#pragma warning disable BL0005
            WidgetContent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(WidgetContent)] = WidgetContent;
        }
        
        return WidgetContent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Abilities property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAbilities(Abilities? value)
    {
#pragma warning disable BL0005
        Abilities = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Abilities)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "abilities", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultPopupTemplateEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultPopupTemplateEnabled(bool? value)
    {
#pragma warning disable BL0005
        DefaultPopupTemplateEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultPopupTemplateEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultPopupTemplateEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Graphic property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGraphic(Graphic? value)
    {
#pragma warning disable BL0005
        Graphic = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Graphic)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "graphic", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Location property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocation(Point? value)
    {
#pragma warning disable BL0005
        Location = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Location)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "location", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Map property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMap(Map? value)
    {
#pragma warning disable BL0005
        Map = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Map)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "map", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference? value)
    {
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spatialReference", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeZone property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeZone(string? value)
    {
#pragma warning disable BL0005
        TimeZone = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeZone)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "timeZone", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Paginates to the next <a target="_blank" href="esri-popup-content-MediaContent.html">media</a> info.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#nextMedia">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="contentElementIndex">
    ///     The index position of the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media</a> content element.
    /// </param>
    [ArcGISMethod]
    public async Task NextMedia(int contentElementIndex)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "nextMedia", 
            CancellationTokenSource.Token,
            contentElementIndex);
    }
    
    /// <summary>
    ///     Paginates to the previous <a target="_blank" href="esri-popup-content-MediaContent.html">media</a> info in the specified <a target="_blank" href="esri-popup-content-MediaContent.html">media</a> content element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#previousMedia">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="contentElementIndex">
    ///     The index position of the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media</a> content element.
    /// </param>
    [ArcGISMethod]
    public async Task PreviousMedia(int contentElementIndex)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "previousMedia", 
            CancellationTokenSource.Token,
            contentElementIndex);
    }
    
    /// <summary>
    ///     Paginates to a specified <a target="_blank" href="esri-popup-content-MediaContent.html">media</a> info object.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#setActiveMedia">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="contentElementIndex">
    ///     The index position of the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media</a> content element to be updated.
    /// </param>
    /// <param name="mediaInfoIndex">
    ///     The index position of the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media</a> info object you wish to display.
    /// </param>
    [ArcGISMethod]
    public async Task SetActiveMedia(int contentElementIndex,
        int mediaInfoIndex)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "setActiveMedia", 
            CancellationTokenSource.Token,
            contentElementIndex,
            mediaInfoIndex);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Abilities abilities:
                if (abilities != Abilities)
                {
                    Abilities = abilities;
                    
                    ModifiedParameters[nameof(Abilities)] = Abilities;
                }
                
                return true;
            case FeatureViewModelFormattedAttributes formattedAttributes:
                if (formattedAttributes != FormattedAttributes)
                {
                    FormattedAttributes = formattedAttributes;
                    
                    ModifiedParameters[nameof(FormattedAttributes)] = FormattedAttributes;
                }
                
                return true;
            case Graphic graphic:
                if (graphic != Graphic)
                {
                    Graphic = graphic;
                    
                    ModifiedParameters[nameof(Graphic)] = Graphic;
                }
                
                return true;
            case Point location:
                if (location != Location)
                {
                    Location = location;
                    
                    ModifiedParameters[nameof(Location)] = Location;
                }
                
                return true;
            case PopupContent popupContentCollectionContent:
                PopupContentCollectionContent ??= [];
                if (!PopupContentCollectionContent.Contains(popupContentCollectionContent))
                {
                    PopupContentCollectionContent = [..PopupContentCollectionContent, popupContentCollectionContent];
                    
                    ModifiedParameters[nameof(PopupContentCollectionContent)] = PopupContentCollectionContent;
                }
                
                return true;
            case SpatialReference spatialReference:
                if (spatialReference != SpatialReference)
                {
                    SpatialReference = spatialReference;
                    
                    ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Abilities _:
                Abilities = null;
                
                ModifiedParameters[nameof(Abilities)] = Abilities;
                return true;
            case FeatureViewModelFormattedAttributes _:
                FormattedAttributes = null;
                
                ModifiedParameters[nameof(FormattedAttributes)] = FormattedAttributes;
                return true;
            case Graphic _:
                Graphic = null;
                
                ModifiedParameters[nameof(Graphic)] = Graphic;
                return true;
            case Point _:
                Location = null;
                
                ModifiedParameters[nameof(Location)] = Location;
                return true;
            case PopupContent popupContentCollectionContent:
                PopupContentCollectionContent = PopupContentCollectionContent?.Where(p => p != popupContentCollectionContent).ToList();
                
                ModifiedParameters[nameof(PopupContentCollectionContent)] = PopupContentCollectionContent;
                return true;
            case SpatialReference _:
                SpatialReference = null;
                
                ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Abilities?.ValidateRequiredGeneratedChildren();
        FormattedAttributes?.ValidateRequiredGeneratedChildren();
        Graphic?.ValidateRequiredGeneratedChildren();
        Location?.ValidateRequiredGeneratedChildren();
        if (PopupContentCollectionContent is not null)
        {
            foreach (PopupContent child in PopupContentCollectionContent)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        SpatialReference?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
