// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Geometries;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Polyline.html">GeoBlazor Docs</a>
///     A polyline contains an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#paths">paths</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#spatialReference">spatialReference</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Polyline
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Polyline()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="paths">
    ///     An array of paths, or line segments, that make up the polyline.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#paths">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference of the geometry.
    ///     default WGS84 (wkid: 4326)
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasM">
    ///     Indicates if the geometry has M values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasZ">
    ///     Indicates if the geometry has z-values (elevation).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Polyline(
        IReadOnlyList<MapPath> paths,
        SpatialReference? spatialReference = null,
        bool? hasM = null,
        bool? hasZ = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Paths = paths;
        SpatialReference = spatialReference;
        HasM = hasM;
        HasZ = hasZ;
#pragma warning restore BL0005    
    }
    
    
#region Public Methods

    /// <summary>
    ///     Adds a path, or line segment, to the polyline.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#addPath">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="points">
    ///     A polyline path. This can either be defined as an array of Point geometries or an array of XY coordinates.
    /// </param>
    [ArcGISMethod]
    public async Task<Polyline?> AddPath(IReadOnlyCollection<Point> points)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Polyline?>(
            "addPath", 
            CancellationTokenSource.Token,
            points);
    }
    
    /// <summary>
    ///     Returns a point specified by a path and point in the path.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#getPoint">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="pathIndex">
    ///     The index of a path in the polyline.
    /// </param>
    /// <param name="pointIndex">
    ///     The index of a point in a path.
    /// </param>
    [ArcGISMethod]
    public async Task<Point?> GetPoint(int pathIndex,
        int pointIndex)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Point?>(
            "getPoint", 
            CancellationTokenSource.Token,
            pathIndex,
            pointIndex);
    }
    
    /// <summary>
    ///     Inserts a new point into a polyline.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#insertPoint">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="pathIndex">
    ///     The index of the path in which to insert a point.
    /// </param>
    /// <param name="pointIndex">
    ///     The index of the inserted point in the path.
    /// </param>
    /// <param name="point">
    ///     The point to insert.
    /// </param>
    [ArcGISMethod]
    public async Task<Polyline?> InsertPoint(int pathIndex,
        int pointIndex,
        Point point)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Polyline?>(
            "insertPoint", 
            CancellationTokenSource.Token,
            pathIndex,
            pointIndex,
            point);
    }
    
    /// <summary>
    ///     Removes a path from the Polyline.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#removePath">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="index">
    ///     The index of the path to remove from the polyline.
    /// </param>
    [ArcGISMethod]
    public async Task<Point[]?> RemovePath(int index)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Point[]?>(
            "removePath", 
            CancellationTokenSource.Token,
            index);
    }
    
    /// <summary>
    ///     Removes a point from the polyline at the given `pointIndex` within the path identified by the given `pathIndex`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#removePoint">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="pathIndex">
    ///     The index of the path containing the point to be removed.
    /// </param>
    /// <param name="pointIndex">
    ///     The index of the point to be removed within the path.
    /// </param>
    [ArcGISMethod]
    public async Task<Point?> RemovePoint(int pathIndex,
        int pointIndex)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Point?>(
            "removePoint", 
            CancellationTokenSource.Token,
            pathIndex,
            pointIndex);
    }
    
    /// <summary>
    ///     Updates a point in a polyline.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#setPoint">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="pathIndex">
    ///     The index of the path that contains the point to be updated.
    /// </param>
    /// <param name="pointIndex">
    ///     The index of the point to be updated in the path.
    /// </param>
    /// <param name="point">
    ///     Point geometry to update in the path.
    /// </param>
    [ArcGISMethod]
    public async Task<Polyline?> SetPoint(int pathIndex,
        int pointIndex,
        Point point)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Polyline?>(
            "setPoint", 
            CancellationTokenSource.Token,
            pathIndex,
            pointIndex,
            point);
    }
    
#endregion

}
