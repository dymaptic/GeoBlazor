// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Geometries;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html">GeoBlazor Docs</a>
///     The minimum and maximum X and Y coordinates of a bounding box.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Extent
{

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentcenter-property">GeoBlazor Docs</a>
    ///     The center point of the extent in map units.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#center">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Point? Center { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentheight-property">GeoBlazor Docs</a>
    ///     The height of the extent in map units (the distance between <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#ymin">ymin</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#ymax">ymax</a>).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#height">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public double? Height { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentwidth-property">GeoBlazor Docs</a>
    ///     The width of the extent in map units (the distance between <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#xmin">xmin</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#xmax">xmax</a>).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#width">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public double? Width { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Center property.
    /// </summary>
    public async Task<Point?> GetCenter()
    {
        if (CoreJsModule is null)
        {
            return Center;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Center;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getCenter", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Center is not null)
            {
                result.Id = Center.Id;
            }
            
#pragma warning disable BL0005
            Center = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Center)] = Center;
        }
        
        return Center;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Height property.
    /// </summary>
    public async Task<double?> GetHeight()
    {
        if (CoreJsModule is null)
        {
            return Height;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Height;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "height");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Height = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Height)] = Height;
        }
         
        return Height;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Mmax property.
    /// </summary>
    public async Task<double?> GetMmax()
    {
        if (CoreJsModule is null)
        {
            return Mmax;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Mmax;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "mmax");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Mmax = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Mmax)] = Mmax;
        }
         
        return Mmax;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Mmin property.
    /// </summary>
    public async Task<double?> GetMmin()
    {
        if (CoreJsModule is null)
        {
            return Mmin;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Mmin;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "mmin");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Mmin = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Mmin)] = Mmin;
        }
         
        return Mmin;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Width property.
    /// </summary>
    public async Task<double?> GetWidth()
    {
        if (CoreJsModule is null)
        {
            return Width;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Width;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "width");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Width = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Width)] = Width;
        }
         
        return Width;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Zmax property.
    /// </summary>
    public async Task<double?> GetZmax()
    {
        if (CoreJsModule is null)
        {
            return Zmax;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Zmax;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "zmax");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Zmax = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Zmax)] = Zmax;
        }
         
        return Zmax;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Zmin property.
    /// </summary>
    public async Task<double?> GetZmin()
    {
        if (CoreJsModule is null)
        {
            return Zmin;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Zmin;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "zmin");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Zmin = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Zmin)] = Zmin;
        }
         
        return Zmin;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Mmax property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMmax(double? value)
    {
#pragma warning disable BL0005
        Mmax = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Mmax)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "mmax", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Mmin property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMmin(double? value)
    {
#pragma warning disable BL0005
        Mmin = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Mmin)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "mmin", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Zmax property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetZmax(double? value)
    {
#pragma warning disable BL0005
        Zmax = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Zmax)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "zmax", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Zmin property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetZmin(double? value)
    {
#pragma warning disable BL0005
        Zmin = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Zmin)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "zmin", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentcenterat-method">GeoBlazor Docs</a>
    ///     Centers the extent to the specified <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a>.
    ///     param point The point to center the extent.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#centerAt">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="point">
    ///     The point to center the extent.
    /// </param>
    [ArcGISMethod]
    public async Task<Extent?> CenterAt(Point point)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Extent?>(
            "centerAt", 
            CancellationTokenSource.Token,
            point);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentcontains-method">GeoBlazor Docs</a>
    ///     Checks if the input geometry is contained within the extent.
    ///     param geometry Input geometry to test if it is contained within the extent.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#contains">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="geometry">
    ///     Input geometry to test if it is contained within the extent.
    /// </param>
    [ArcGISMethod]
    public async Task<bool?> Contains(Geometry geometry)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "contains", 
            CancellationTokenSource.Token,
            geometry);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentexpand-method">GeoBlazor Docs</a>
    ///     Expands the extent by the given factor.
    ///     param factor The multiplier value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#expand">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="factor">
    ///     The multiplier value.
    /// </param>
    [ArcGISMethod]
    public async Task<Extent?> Expand(double factor)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Extent?>(
            "expand", 
            CancellationTokenSource.Token,
            factor);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentintersection-method">GeoBlazor Docs</a>
    ///     Shrinks the original extent to the intersection with the input extent.
    ///     param extent The input extent to intersect.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#intersection">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="extent">
    ///     The input extent to intersect.
    /// </param>
    [ArcGISMethod]
    public async Task<Extent?> Intersection(Extent extent)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Extent?>(
            "intersection", 
            CancellationTokenSource.Token,
            extent);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentintersects-method">GeoBlazor Docs</a>
    ///     Tests to validate if the input geometry intersects the extent and returns a Boolean value.
    ///     param geometry The geometry used to test the intersection. It can be a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html">Polyline</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html">Polygon</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html">Extent</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Multipoint.html">Multipoint</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#intersects">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="geometry">
    ///     The geometry used to test the intersection. It can be a
    ///     <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a>, <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html">Polyline</a>,
    ///     <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html">Polygon</a>, <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html">Extent</a> or
    ///     <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Multipoint.html">Multipoint</a>.
    /// </param>
    [ArcGISMethod]
    public async Task<bool?> Intersects(Geometry geometry)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "intersects", 
            CancellationTokenSource.Token,
            geometry);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentnormalize-method">GeoBlazor Docs</a>
    ///     Returns an array with either one Extent that's been shifted to within +/- 180 or two Extents
    ///     if the original extent intersects the International Dateline.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#normalize">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Extent[]?> Normalize()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Extent[]?>(
            "normalize", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentoffset-method">GeoBlazor Docs</a>
    ///     Modifies the extent geometry in-place with X and Y offsets in map units.
    ///     param dx The offset distance in map units for the X-coordinate.
    ///     param dy The offset distance in map units for the Y-coordinate.
    ///     param dz The offset distance in map units for the Z-coordinate.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#offset">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="dx">
    ///     The offset distance in map units for the X-coordinate.
    /// </param>
    /// <param name="dy">
    ///     The offset distance in map units for the Y-coordinate.
    /// </param>
    /// <param name="dz">
    ///     The offset distance in map units for the Z-coordinate.
    /// </param>
    [ArcGISMethod]
    public async Task<Extent?> Offset(double dx,
        double dy,
        double dz)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Extent?>(
            "offset", 
            CancellationTokenSource.Token,
            dx,
            dy,
            dz);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Geometries.Extent.html#extentunion-method">GeoBlazor Docs</a>
    ///     Expands the original extent to include the extent of the input Extent.
    ///     param extent The input extent to union.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#union">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="extent">
    ///     The input extent to union.
    /// </param>
    [ArcGISMethod]
    public async Task<Extent?> Union(Extent extent)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Extent?>(
            "union", 
            CancellationTokenSource.Token,
            extent);
    }
    
#endregion

}
