// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.ArcGISImageServiceCapabilitiesOperations.html">GeoBlazor Docs</a>
///     Describes operations supported by the ImageryLayer.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ArcGISImageServiceCapabilitiesOperations : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ArcGISImageServiceCapabilitiesOperations()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="supportsCalculateVolume">
    ///     Indicates if the elevation layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/calculate-volume.htm">compute volumes</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsComputeHistograms">
    ///     Indicates if the layer supports a <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/compute-histograms.htm">compute histograms</a> operation from an area of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsComputePixelLocation">
    ///     Indicates if the layer supports <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/compute-pixel-location.htm">computing pixel location</a> in pixel space.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsComputeStatisticsHistograms">
    ///     Indicates if the layer supports an operation <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/compute-statistics-and-histograms.htm">computing statistics and histograms</a> from an area of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsDownload">
    ///     Indicates if the layer allows the source image to be <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/download-rasters.htm">downloaded</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsExportImage">
    ///     Indicates if the layer supports an <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/export-image.htm">export image</a> operation based on a bounding box.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsFindImages">
    ///     Indicates if the layer supports find images operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsGetImageUrl">
    ///     Indicates if the layer supports get image url operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsGetSamples">
    ///     Indicates if the layer supports a <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/get-samples.htm">sampling operation</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsIdentify">
    ///     Indicates if the layer supports an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-identify.html#identify">identify</a> operation on pixel values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsImageToMap">
    ///     Indicates if the layer supports image to map operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsImageToMapMultiray">
    ///     Indicates if the layer supports image to map multiray operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsMapToImage">
    ///     Indicates if the layer supports map to image operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsMeasure">
    ///     Indicates if the layer supports mensuration.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsProject">
    ///     Indicates if the layer supports <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/project.htm">projection of geometries</a>, including from/to image spatial reference.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsQuery">
    ///     Indicates if the layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/query-image-service-.htm">query images</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsQueryBoundary">
    ///     Indicates if the layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/query-boundary.htm">query the service's boundary</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsQueryGPSInfo">
    ///     Indicates if the layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/enterprise/query-gps-.htm">query the service's gps info</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ArcGISImageServiceCapabilitiesOperations(
        bool? supportsCalculateVolume = null,
        bool? supportsComputeHistograms = null,
        bool? supportsComputePixelLocation = null,
        bool? supportsComputeStatisticsHistograms = null,
        bool? supportsDownload = null,
        bool? supportsExportImage = null,
        bool? supportsFindImages = null,
        bool? supportsGetImageUrl = null,
        bool? supportsGetSamples = null,
        bool? supportsIdentify = null,
        bool? supportsImageToMap = null,
        bool? supportsImageToMapMultiray = null,
        bool? supportsMapToImage = null,
        bool? supportsMeasure = null,
        bool? supportsProject = null,
        bool? supportsQuery = null,
        bool? supportsQueryBoundary = null,
        bool? supportsQueryGPSInfo = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        SupportsCalculateVolume = supportsCalculateVolume;
        SupportsComputeHistograms = supportsComputeHistograms;
        SupportsComputePixelLocation = supportsComputePixelLocation;
        SupportsComputeStatisticsHistograms = supportsComputeStatisticsHistograms;
        SupportsDownload = supportsDownload;
        SupportsExportImage = supportsExportImage;
        SupportsFindImages = supportsFindImages;
        SupportsGetImageUrl = supportsGetImageUrl;
        SupportsGetSamples = supportsGetSamples;
        SupportsIdentify = supportsIdentify;
        SupportsImageToMap = supportsImageToMap;
        SupportsImageToMapMultiray = supportsImageToMapMultiray;
        SupportsMapToImage = supportsMapToImage;
        SupportsMeasure = supportsMeasure;
        SupportsProject = supportsProject;
        SupportsQuery = supportsQuery;
        SupportsQueryBoundary = supportsQueryBoundary;
        SupportsQueryGPSInfo = supportsQueryGPSInfo;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates if the elevation layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/calculate-volume.htm">compute volumes</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsCalculateVolume { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports a <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/compute-histograms.htm">compute histograms</a> operation from an area of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsComputeHistograms { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/compute-pixel-location.htm">computing pixel location</a> in pixel space.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsComputePixelLocation { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports an operation <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/compute-statistics-and-histograms.htm">computing statistics and histograms</a> from an area of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsComputeStatisticsHistograms { get; set; }
    
    /// <summary>
    ///     Indicates if the layer allows the source image to be <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/download-rasters.htm">downloaded</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsDownload { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports an <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/export-image.htm">export image</a> operation based on a bounding box.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsExportImage { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports find images operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsFindImages { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports get image url operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsGetImageUrl { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports a <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/get-samples.htm">sampling operation</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsGetSamples { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-identify.html#identify">identify</a> operation on pixel values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsIdentify { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports image to map operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsImageToMap { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports image to map multiray operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsImageToMapMultiray { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports map to image operation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsMapToImage { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports mensuration.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsMeasure { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/project.htm">projection of geometries</a>, including from/to image spatial reference.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsProject { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/query-image-service-.htm">query images</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsQuery { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/query-boundary.htm">query the service's boundary</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsQueryBoundary { get; set; }
    
    /// <summary>
    ///     Indicates if the layer supports an operation to <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/enterprise/query-gps-.htm">query the service's gps info</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsQueryGPSInfo { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsCalculateVolume property.
    /// </summary>
    public async Task<bool?> GetSupportsCalculateVolume()
    {
        if (CoreJsModule is null)
        {
            return SupportsCalculateVolume;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsCalculateVolume;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsCalculateVolume");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsCalculateVolume = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsCalculateVolume)] = SupportsCalculateVolume;
        }
         
        return SupportsCalculateVolume;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsComputeHistograms property.
    /// </summary>
    public async Task<bool?> GetSupportsComputeHistograms()
    {
        if (CoreJsModule is null)
        {
            return SupportsComputeHistograms;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsComputeHistograms;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsComputeHistograms");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsComputeHistograms = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsComputeHistograms)] = SupportsComputeHistograms;
        }
         
        return SupportsComputeHistograms;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsComputePixelLocation property.
    /// </summary>
    public async Task<bool?> GetSupportsComputePixelLocation()
    {
        if (CoreJsModule is null)
        {
            return SupportsComputePixelLocation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsComputePixelLocation;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsComputePixelLocation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsComputePixelLocation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsComputePixelLocation)] = SupportsComputePixelLocation;
        }
         
        return SupportsComputePixelLocation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsComputeStatisticsHistograms property.
    /// </summary>
    public async Task<bool?> GetSupportsComputeStatisticsHistograms()
    {
        if (CoreJsModule is null)
        {
            return SupportsComputeStatisticsHistograms;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsComputeStatisticsHistograms;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsComputeStatisticsHistograms");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsComputeStatisticsHistograms = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsComputeStatisticsHistograms)] = SupportsComputeStatisticsHistograms;
        }
         
        return SupportsComputeStatisticsHistograms;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsDownload property.
    /// </summary>
    public async Task<bool?> GetSupportsDownload()
    {
        if (CoreJsModule is null)
        {
            return SupportsDownload;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsDownload;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsDownload");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsDownload = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsDownload)] = SupportsDownload;
        }
         
        return SupportsDownload;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsExportImage property.
    /// </summary>
    public async Task<bool?> GetSupportsExportImage()
    {
        if (CoreJsModule is null)
        {
            return SupportsExportImage;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsExportImage;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsExportImage");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsExportImage = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsExportImage)] = SupportsExportImage;
        }
         
        return SupportsExportImage;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsFindImages property.
    /// </summary>
    public async Task<bool?> GetSupportsFindImages()
    {
        if (CoreJsModule is null)
        {
            return SupportsFindImages;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsFindImages;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsFindImages");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsFindImages = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsFindImages)] = SupportsFindImages;
        }
         
        return SupportsFindImages;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsGetImageUrl property.
    /// </summary>
    public async Task<bool?> GetSupportsGetImageUrl()
    {
        if (CoreJsModule is null)
        {
            return SupportsGetImageUrl;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsGetImageUrl;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsGetImageUrl");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsGetImageUrl = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsGetImageUrl)] = SupportsGetImageUrl;
        }
         
        return SupportsGetImageUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsGetSamples property.
    /// </summary>
    public async Task<bool?> GetSupportsGetSamples()
    {
        if (CoreJsModule is null)
        {
            return SupportsGetSamples;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsGetSamples;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsGetSamples");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsGetSamples = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsGetSamples)] = SupportsGetSamples;
        }
         
        return SupportsGetSamples;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsIdentify property.
    /// </summary>
    public async Task<bool?> GetSupportsIdentify()
    {
        if (CoreJsModule is null)
        {
            return SupportsIdentify;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsIdentify;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsIdentify");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsIdentify = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsIdentify)] = SupportsIdentify;
        }
         
        return SupportsIdentify;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsImageToMap property.
    /// </summary>
    public async Task<bool?> GetSupportsImageToMap()
    {
        if (CoreJsModule is null)
        {
            return SupportsImageToMap;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsImageToMap;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsImageToMap");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsImageToMap = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsImageToMap)] = SupportsImageToMap;
        }
         
        return SupportsImageToMap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsImageToMapMultiray property.
    /// </summary>
    public async Task<bool?> GetSupportsImageToMapMultiray()
    {
        if (CoreJsModule is null)
        {
            return SupportsImageToMapMultiray;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsImageToMapMultiray;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsImageToMapMultiray");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsImageToMapMultiray = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsImageToMapMultiray)] = SupportsImageToMapMultiray;
        }
         
        return SupportsImageToMapMultiray;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsMapToImage property.
    /// </summary>
    public async Task<bool?> GetSupportsMapToImage()
    {
        if (CoreJsModule is null)
        {
            return SupportsMapToImage;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsMapToImage;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsMapToImage");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsMapToImage = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsMapToImage)] = SupportsMapToImage;
        }
         
        return SupportsMapToImage;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsMeasure property.
    /// </summary>
    public async Task<bool?> GetSupportsMeasure()
    {
        if (CoreJsModule is null)
        {
            return SupportsMeasure;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsMeasure;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsMeasure");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsMeasure = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsMeasure)] = SupportsMeasure;
        }
         
        return SupportsMeasure;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsProject property.
    /// </summary>
    public async Task<bool?> GetSupportsProject()
    {
        if (CoreJsModule is null)
        {
            return SupportsProject;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsProject;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsProject");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsProject = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsProject)] = SupportsProject;
        }
         
        return SupportsProject;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsQuery property.
    /// </summary>
    public async Task<bool?> GetSupportsQuery()
    {
        if (CoreJsModule is null)
        {
            return SupportsQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsQuery;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsQuery");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsQuery = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsQuery)] = SupportsQuery;
        }
         
        return SupportsQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsQueryBoundary property.
    /// </summary>
    public async Task<bool?> GetSupportsQueryBoundary()
    {
        if (CoreJsModule is null)
        {
            return SupportsQueryBoundary;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsQueryBoundary;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsQueryBoundary");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsQueryBoundary = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsQueryBoundary)] = SupportsQueryBoundary;
        }
         
        return SupportsQueryBoundary;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsQueryGPSInfo property.
    /// </summary>
    public async Task<bool?> GetSupportsQueryGPSInfo()
    {
        if (CoreJsModule is null)
        {
            return SupportsQueryGPSInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsQueryGPSInfo;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsQueryGPSInfo");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsQueryGPSInfo = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsQueryGPSInfo)] = SupportsQueryGPSInfo;
        }
         
        return SupportsQueryGPSInfo;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the SupportsCalculateVolume property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsCalculateVolume(bool? value)
    {
#pragma warning disable BL0005
        SupportsCalculateVolume = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsCalculateVolume)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsCalculateVolume", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsComputeHistograms property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsComputeHistograms(bool? value)
    {
#pragma warning disable BL0005
        SupportsComputeHistograms = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsComputeHistograms)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsComputeHistograms", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsComputePixelLocation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsComputePixelLocation(bool? value)
    {
#pragma warning disable BL0005
        SupportsComputePixelLocation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsComputePixelLocation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsComputePixelLocation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsComputeStatisticsHistograms property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsComputeStatisticsHistograms(bool? value)
    {
#pragma warning disable BL0005
        SupportsComputeStatisticsHistograms = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsComputeStatisticsHistograms)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsComputeStatisticsHistograms", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsDownload property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsDownload(bool? value)
    {
#pragma warning disable BL0005
        SupportsDownload = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsDownload)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsDownload", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsExportImage property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsExportImage(bool? value)
    {
#pragma warning disable BL0005
        SupportsExportImage = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsExportImage)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsExportImage", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsFindImages property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsFindImages(bool? value)
    {
#pragma warning disable BL0005
        SupportsFindImages = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsFindImages)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsFindImages", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsGetImageUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsGetImageUrl(bool? value)
    {
#pragma warning disable BL0005
        SupportsGetImageUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsGetImageUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsGetImageUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsGetSamples property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsGetSamples(bool? value)
    {
#pragma warning disable BL0005
        SupportsGetSamples = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsGetSamples)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsGetSamples", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsIdentify property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsIdentify(bool? value)
    {
#pragma warning disable BL0005
        SupportsIdentify = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsIdentify)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsIdentify", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsImageToMap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsImageToMap(bool? value)
    {
#pragma warning disable BL0005
        SupportsImageToMap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsImageToMap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsImageToMap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsImageToMapMultiray property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsImageToMapMultiray(bool? value)
    {
#pragma warning disable BL0005
        SupportsImageToMapMultiray = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsImageToMapMultiray)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsImageToMapMultiray", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsMapToImage property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsMapToImage(bool? value)
    {
#pragma warning disable BL0005
        SupportsMapToImage = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsMapToImage)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsMapToImage", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsMeasure property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsMeasure(bool? value)
    {
#pragma warning disable BL0005
        SupportsMeasure = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsMeasure)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsMeasure", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsProject property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsProject(bool? value)
    {
#pragma warning disable BL0005
        SupportsProject = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsProject)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsProject", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsQuery(bool? value)
    {
#pragma warning disable BL0005
        SupportsQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsQueryBoundary property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsQueryBoundary(bool? value)
    {
#pragma warning disable BL0005
        SupportsQueryBoundary = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsQueryBoundary)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsQueryBoundary", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsQueryGPSInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsQueryGPSInfo(bool? value)
    {
#pragma warning disable BL0005
        SupportsQueryGPSInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsQueryGPSInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsQueryGPSInfo", value);
    }
    
#endregion

}
