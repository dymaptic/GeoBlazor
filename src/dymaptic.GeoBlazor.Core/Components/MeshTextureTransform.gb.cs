// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    MeshTextureTransform represents a transformation of UV mesh coordinates used to sample a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html">MeshTexture</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshTextureTransform : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshTextureTransform()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="offset">
    ///     The offset of the UV coordinate origin as a factor of the texture dimensions.
    ///     default [0, 0]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#offset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotation">
    ///     The rotation of the UV coordinates in degrees, counter-clockwise around the origin.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#rotation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="scale">
    ///     The scale factor applied to the components of the UV coordinates.
    ///     default [1, 1]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#scale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshTextureTransform(
        IReadOnlyList<double>? offset = null,
        double? rotation = null,
        IReadOnlyList<double>? scale = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Offset = offset;
        Rotation = rotation;
        Scale = scale;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The offset of the UV coordinate origin as a factor of the texture dimensions.
    ///     default [0, 0]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#offset">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Offset { get; set; }
    
    /// <summary>
    ///     The rotation of the UV coordinates in degrees, counter-clockwise around the origin.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#rotation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Rotation { get; set; }
    
    /// <summary>
    ///     The scale factor applied to the components of the UV coordinates.
    ///     default [1, 1]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#scale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Scale { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Offset property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetOffset()
    {
        if (CoreJsModule is null)
        {
            return Offset;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Offset;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "offset");
        if (result is not null)
        {
#pragma warning disable BL0005
             Offset = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Offset)] = Offset;
        }
         
        return Offset;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Rotation property.
    /// </summary>
    public async Task<double?> GetRotation()
    {
        if (CoreJsModule is null)
        {
            return Rotation;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Rotation;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Rotation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Rotation)] = Rotation;
        }
         
        return Rotation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Scale property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetScale()
    {
        if (CoreJsModule is null)
        {
            return Scale;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Scale;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "scale");
        if (result is not null)
        {
#pragma warning disable BL0005
             Scale = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Scale)] = Scale;
        }
         
        return Scale;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Offset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOffset(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Offset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Offset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "offset", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Rotation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotation(double? value)
    {
#pragma warning disable BL0005
        Rotation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Rotation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Scale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScale(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Scale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Scale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "scale", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Offset property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOffset(params double[] values)
    {
        double[] join = Offset is null
            ? values
            : [..Offset, ..values];
        await SetOffset(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Scale property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToScale(params double[] values)
    {
        double[] join = Scale is null
            ? values
            : [..Scale, ..values];
        await SetScale(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Offset property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOffset(params double[] values)
    {
        if (Offset is null)
        {
            return;
        }
        await SetOffset(Offset.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Scale property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromScale(params double[] values)
    {
        if (Scale is null)
        {
            return;
        }
        await SetScale(Scale.Except(values).ToArray());
    }
    
#endregion

}
