// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.RainyWeather.html">GeoBlazor Docs</a>
///     The RainyWeather class allows you to change the weather conditions in the scene to rainy weather.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-RainyWeather.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RainyWeather : MapComponent,
    IEnvironmentWeather,
    ISceneViewEnvironmentWeather
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RainyWeather()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="cloudCover">
    ///     Specifies the amount of cloud cover in the sky for a certain weather type.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-RainyWeather.html#cloudCover">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="precipitation">
    ///     Specifies the amount of falling rain.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-RainyWeather.html#precipitation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RainyWeather(
        double? cloudCover = null,
        double? precipitation = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        CloudCover = cloudCover;
        Precipitation = precipitation;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies the amount of cloud cover in the sky for a certain weather type.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-RainyWeather.html#cloudCover">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? CloudCover { get; set; }
    
    /// <summary>
    ///     Specifies the amount of falling rain.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-RainyWeather.html#precipitation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Precipitation { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CloudCover property.
    /// </summary>
    public async Task<double?> GetCloudCover()
    {
        if (CoreJsModule is null)
        {
            return CloudCover;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CloudCover;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "cloudCover");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CloudCover = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CloudCover)] = CloudCover;
        }
         
        return CloudCover;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Precipitation property.
    /// </summary>
    public async Task<double?> GetPrecipitation()
    {
        if (CoreJsModule is null)
        {
            return Precipitation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Precipitation;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "precipitation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Precipitation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Precipitation)] = Precipitation;
        }
         
        return Precipitation;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CloudCover property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCloudCover(double? value)
    {
#pragma warning disable BL0005
        CloudCover = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CloudCover)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "cloudCover", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Precipitation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPrecipitation(double? value)
    {
#pragma warning disable BL0005
        Precipitation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Precipitation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "precipitation", value);
    }
    
#endregion

}
