// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The MeshComponent class is used to apply one or more materials to a single <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html">Mesh</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshComponent : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshComponent()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="faces">
    ///     A flat array of indices that refer to vertices in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">vertexAttributes</a> of the mesh to which the component belongs.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#faces">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="material">
    ///     The material determines how the component is visualized.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#material">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     Specifies a name of the component.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="shading">
    ///     Specifies the type of normals used for lighting.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#shading">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshComponent(
        byte[]? faces = null,
        IMeshComponentMaterial? material = null,
        string? name = null,
        Shading? shading = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Faces = faces;
        Material = material;
        Name = name;
        Shading = shading;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A flat array of indices that refer to vertices in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">vertexAttributes</a> of the mesh to which the component belongs.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#faces">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public byte[]? Faces { get; set; }
    
    /// <summary>
    ///     The material determines how the component is visualized.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#material">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IMeshComponentMaterial? Material { get; set; }
    
    /// <summary>
    ///     Specifies a name of the component.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     Specifies the type of normals used for lighting.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#shading">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Shading? Shading { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Faces property.
    /// </summary>
    public async Task<byte[]?> GetFaces()
    {
        if (CoreJsModule is null)
        {
            return Faces;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Faces;
        }

        // get the property value
        byte[]? result = await JsComponentReference!.InvokeAsync<byte[]?>("getProperty",
            CancellationTokenSource.Token, "faces");
        if (result is not null)
        {
#pragma warning disable BL0005
             Faces = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Faces)] = Faces;
        }
         
        return Faces;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Material property.
    /// </summary>
    public async Task<IMeshComponentMaterial?> GetMaterial()
    {
        if (CoreJsModule is null)
        {
            return Material;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Material;
        }

        // get the property value
        IMeshComponentMaterial? result = await JsComponentReference!.InvokeAsync<IMeshComponentMaterial?>("getProperty",
            CancellationTokenSource.Token, "material");
        if (result is not null)
        {
#pragma warning disable BL0005
             Material = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Material)] = Material;
        }
         
        return Material;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "name");
        if (result is not null)
        {
#pragma warning disable BL0005
             Name = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Name)] = Name;
        }
         
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Shading property.
    /// </summary>
    public async Task<Shading?> GetShading()
    {
        if (CoreJsModule is null)
        {
            return Shading;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Shading;
        }

        // get the property value
        JsNullableEnumWrapper<Shading>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<Shading>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "shading");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Shading = (Shading)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Shading)] = Shading;
        }
         
        return Shading;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Faces property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFaces(byte[]? value)
    {
#pragma warning disable BL0005
        Faces = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Faces)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "faces", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Material property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaterial(IMeshComponentMaterial? value)
    {
#pragma warning disable BL0005
        Material = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Material)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "material", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string? value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Shading property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetShading(Shading? value)
    {
#pragma warning disable BL0005
        Shading = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Shading)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "shading", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Faces property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFaces(params byte[] values)
    {
        byte[] join = Faces is null
            ? values
            : [..Faces, ..values];
        await SetFaces(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Faces property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFaces(params byte[] values)
    {
        if (Faces is null)
        {
            return;
        }
        await SetFaces(Faces.Except(values).ToArray());
    }
    
#endregion

}
