// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.html">GeoBlazor Docs</a>
///     Describes the configurable attachments operations.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class AttachmentsCapabilitiesOperations : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public AttachmentsCapabilitiesOperations()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="add">
    ///     Indicates whether to allow adding attachments.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="delete">
    ///     Indicates whether to allow deleting an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="update">
    ///     Indicates whether to allow updating an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AttachmentsCapabilitiesOperations(
        bool? add = null,
        bool? delete = null,
        bool? update = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Add = add;
        Delete = delete;
        Update = update;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.html#attachmentscapabilitiesoperationsadd-property">GeoBlazor Docs</a>
    ///     Indicates whether to allow adding attachments.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Add { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.html#attachmentscapabilitiesoperationsdelete-property">GeoBlazor Docs</a>
    ///     Indicates whether to allow deleting an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Delete { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AttachmentsCapabilitiesOperations.html#attachmentscapabilitiesoperationsupdate-property">GeoBlazor Docs</a>
    ///     Indicates whether to allow updating an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments-AttachmentsViewModel.html#AttachmentsCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Update { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Add property.
    /// </summary>
    public async Task<bool?> GetAdd()
    {
        if (CoreJsModule is null)
        {
            return Add;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Add;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "add");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Add = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Add)] = Add;
        }
         
        return Add;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Delete property.
    /// </summary>
    public async Task<bool?> GetDelete()
    {
        if (CoreJsModule is null)
        {
            return Delete;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Delete;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "delete");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Delete = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Delete)] = Delete;
        }
         
        return Delete;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Update property.
    /// </summary>
    public async Task<bool?> GetUpdate()
    {
        if (CoreJsModule is null)
        {
            return Update;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Update;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "update");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Update = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Update)] = Update;
        }
         
        return Update;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Add property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAdd(bool? value)
    {
#pragma warning disable BL0005
        Add = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Add)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "add", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Delete property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDelete(bool? value)
    {
#pragma warning disable BL0005
        Delete = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Delete)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "delete", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Update property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUpdate(bool? value)
    {
#pragma warning disable BL0005
        Update = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Update)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "update", value);
    }
    
#endregion

}
