// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.InitialViewProperties.html">GeoBlazor Docs</a>
///     Represents the initial viewing state of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a> when displayed in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class InitialViewProperties : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public InitialViewProperties()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="background">
    ///     The background color of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#background">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeZone">
    ///     The initial time zone of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#timeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewpoint">
    ///     The initial viewpoint of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#viewpoint">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public InitialViewProperties(
        ColorBackground? background = null,
        SpatialReference? spatialReference = null,
        string? timeZone = null,
        Viewpoint? viewpoint = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Background = background;
        SpatialReference = spatialReference;
        TimeZone = timeZone;
        Viewpoint = viewpoint;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The background color of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#background">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ColorBackground? Background { get; set; }
    
    /// <summary>
    ///     The spatial reference of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
    /// <summary>
    ///     The initial time zone of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#timeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TimeZone { get; set; }
    
    /// <summary>
    ///     The initial viewpoint of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">WebMap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-InitialViewProperties.html#viewpoint">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Viewpoint? Viewpoint { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Background property.
    /// </summary>
    public async Task<ColorBackground?> GetBackground()
    {
        if (CoreJsModule is null)
        {
            return Background;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Background;
        }

        ColorBackground? result = await JsComponentReference.InvokeAsync<ColorBackground?>(
            "getBackground", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Background = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Background)] = Background;
        }
        
        return Background;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        SpatialReference? result = await JsComponentReference.InvokeAsync<SpatialReference?>(
            "getSpatialReference", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SpatialReference = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
        
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeZone property.
    /// </summary>
    public async Task<string?> GetTimeZone()
    {
        if (CoreJsModule is null)
        {
            return TimeZone;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeZone;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "timeZone");
        if (result is not null)
        {
#pragma warning disable BL0005
             TimeZone = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TimeZone)] = TimeZone;
        }
         
        return TimeZone;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Viewpoint property.
    /// </summary>
    public async Task<Viewpoint?> GetViewpoint()
    {
        if (CoreJsModule is null)
        {
            return Viewpoint;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Viewpoint;
        }

        Viewpoint? result = await JsComponentReference.InvokeAsync<Viewpoint?>(
            "getViewpoint", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Viewpoint = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Viewpoint)] = Viewpoint;
        }
        
        return Viewpoint;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Background property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBackground(ColorBackground? value)
    {
#pragma warning disable BL0005
        Background = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Background)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "background", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spatialReference", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeZone property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeZone(string? value)
    {
#pragma warning disable BL0005
        TimeZone = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeZone)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "timeZone", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Viewpoint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewpoint(Viewpoint? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Viewpoint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Viewpoint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "viewpoint", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SpatialReference spatialReference:
                if (spatialReference != SpatialReference)
                {
                    SpatialReference = spatialReference;
                    
                    ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                }
                
                return true;
            case Viewpoint viewpoint:
                if (viewpoint != Viewpoint)
                {
                    Viewpoint = viewpoint;
                    
                    ModifiedParameters[nameof(Viewpoint)] = Viewpoint;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SpatialReference _:
                SpatialReference = null;
                
                ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                return true;
            case Viewpoint _:
                Viewpoint = null;
                
                ModifiedParameters[nameof(Viewpoint)] = Viewpoint;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        SpatialReference?.ValidateRequiredGeneratedChildren();
        Viewpoint?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
