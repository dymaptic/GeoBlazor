// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html">GeoBlazor Docs</a>
///     The available <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-SnappingControls.html">SnappingControls</a> elements within the widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VisibleElementsSnappingControlsElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VisibleElementsSnappingControlsElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="enabledToggle">
    ///     Indicates whether to display the `enabledToggle` (Enable snapping).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureEnabledToggle">
    ///     Indicates whether to display the `featureEnabledToggle` (Feature to feature).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="gridControls">
    /// </param>
    /// <param name="gridControlsElements">
    /// </param>
    /// <param name="gridEnabledToggle">
    /// </param>
    /// <param name="header">
    ///     Indicates whether to display the header.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerList">
    ///     Indicates whether to display the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-FeatureSnappingLayerSource.html">FeatureSnappingLayerSource</a> layerList.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerListToggleLayersButton">
    ///     Indicates whether to display the “Enable all” or “Disable all” button to enable / disable snapping for all the layers in the list.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="selfEnabledToggle">
    ///     Indicates whether to display the `selfEnabledToggle` (Geometry guides).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VisibleElementsSnappingControlsElements(
        bool? enabledToggle = null,
        bool? featureEnabledToggle = null,
        bool? gridControls = null,
        VisibleElementsSnappingControlsElementsGridControlsElements? gridControlsElements = null,
        bool? gridEnabledToggle = null,
        bool? header = null,
        bool? layerList = null,
        bool? layerListToggleLayersButton = null,
        bool? selfEnabledToggle = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        EnabledToggle = enabledToggle;
        FeatureEnabledToggle = featureEnabledToggle;
        GridControls = gridControls;
        GridControlsElements = gridControlsElements;
        GridEnabledToggle = gridEnabledToggle;
        Header = header;
        LayerList = layerList;
        LayerListToggleLayersButton = layerListToggleLayersButton;
        SelfEnabledToggle = selfEnabledToggle;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsenabledtoggle-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the `enabledToggle` (Enable snapping).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? EnabledToggle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsfeatureenabledtoggle-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the `featureEnabledToggle` (Feature to feature).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? FeatureEnabledToggle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsgridcontrols-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? GridControls { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsgridcontrolselements-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public VisibleElementsSnappingControlsElementsGridControlsElements? GridControlsElements { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsgridenabledtoggle-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? GridEnabledToggle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsheader-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the header.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Header { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementslayerlist-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-FeatureSnappingLayerSource.html">FeatureSnappingLayerSource</a> layerList.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LayerList { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementslayerlisttogglelayersbutton-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the “Enable all” or “Disable all” button to enable / disable snapping for all the layers in the list.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LayerListToggleLayersButton { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsSnappingControlsElements.html#visibleelementssnappingcontrolselementsselfenabledtoggle-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the `selfEnabledToggle` (Geometry guides).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SelfEnabledToggle { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the EnabledToggle property.
    /// </summary>
    public async Task<bool?> GetEnabledToggle()
    {
        if (CoreJsModule is null)
        {
            return EnabledToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EnabledToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "enabledToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EnabledToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EnabledToggle)] = EnabledToggle;
        }
         
        return EnabledToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureEnabledToggle property.
    /// </summary>
    public async Task<bool?> GetFeatureEnabledToggle()
    {
        if (CoreJsModule is null)
        {
            return FeatureEnabledToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureEnabledToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featureEnabledToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeatureEnabledToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureEnabledToggle)] = FeatureEnabledToggle;
        }
         
        return FeatureEnabledToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridControls property.
    /// </summary>
    public async Task<bool?> GetGridControls()
    {
        if (CoreJsModule is null)
        {
            return GridControls;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridControls;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "gridControls");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GridControls = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridControls)] = GridControls;
        }
         
        return GridControls;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridControlsElements property.
    /// </summary>
    public async Task<VisibleElementsSnappingControlsElementsGridControlsElements?> GetGridControlsElements()
    {
        if (CoreJsModule is null)
        {
            return GridControlsElements;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridControlsElements;
        }

        VisibleElementsSnappingControlsElementsGridControlsElements? result = await JsComponentReference.InvokeAsync<VisibleElementsSnappingControlsElementsGridControlsElements?>(
            "getGridControlsElements", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            GridControlsElements = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(GridControlsElements)] = GridControlsElements;
        }
        
        return GridControlsElements;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridEnabledToggle property.
    /// </summary>
    public async Task<bool?> GetGridEnabledToggle()
    {
        if (CoreJsModule is null)
        {
            return GridEnabledToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridEnabledToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "gridEnabledToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GridEnabledToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridEnabledToggle)] = GridEnabledToggle;
        }
         
        return GridEnabledToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Header property.
    /// </summary>
    public async Task<bool?> GetHeader()
    {
        if (CoreJsModule is null)
        {
            return Header;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Header;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "header");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Header = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Header)] = Header;
        }
         
        return Header;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerList property.
    /// </summary>
    public async Task<bool?> GetLayerList()
    {
        if (CoreJsModule is null)
        {
            return LayerList;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LayerList;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "layerList");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LayerList = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LayerList)] = LayerList;
        }
         
        return LayerList;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerListToggleLayersButton property.
    /// </summary>
    public async Task<bool?> GetLayerListToggleLayersButton()
    {
        if (CoreJsModule is null)
        {
            return LayerListToggleLayersButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LayerListToggleLayersButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "layerListToggleLayersButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LayerListToggleLayersButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LayerListToggleLayersButton)] = LayerListToggleLayersButton;
        }
         
        return LayerListToggleLayersButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelfEnabledToggle property.
    /// </summary>
    public async Task<bool?> GetSelfEnabledToggle()
    {
        if (CoreJsModule is null)
        {
            return SelfEnabledToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelfEnabledToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "selfEnabledToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SelfEnabledToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelfEnabledToggle)] = SelfEnabledToggle;
        }
         
        return SelfEnabledToggle;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the EnabledToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnabledToggle(bool? value)
    {
#pragma warning disable BL0005
        EnabledToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EnabledToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "enabledToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureEnabledToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureEnabledToggle(bool? value)
    {
#pragma warning disable BL0005
        FeatureEnabledToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureEnabledToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featureEnabledToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridControls property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridControls(bool? value)
    {
#pragma warning disable BL0005
        GridControls = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridControls)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridControls", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridControlsElements property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridControlsElements(VisibleElementsSnappingControlsElementsGridControlsElements? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        GridControlsElements = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridControlsElements)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridControlsElements", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridEnabledToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridEnabledToggle(bool? value)
    {
#pragma warning disable BL0005
        GridEnabledToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridEnabledToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridEnabledToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Header property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeader(bool? value)
    {
#pragma warning disable BL0005
        Header = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Header)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "header", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerList property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerList(bool? value)
    {
#pragma warning disable BL0005
        LayerList = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerList)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerList", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerListToggleLayersButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerListToggleLayersButton(bool? value)
    {
#pragma warning disable BL0005
        LayerListToggleLayersButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerListToggleLayersButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerListToggleLayersButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelfEnabledToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelfEnabledToggle(bool? value)
    {
#pragma warning disable BL0005
        SelfEnabledToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelfEnabledToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selfEnabledToggle", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case VisibleElementsSnappingControlsElementsGridControlsElements gridControlsElements:
                if (gridControlsElements != GridControlsElements)
                {
                    GridControlsElements = gridControlsElements;
                    
                    ModifiedParameters[nameof(GridControlsElements)] = GridControlsElements;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case VisibleElementsSnappingControlsElementsGridControlsElements _:
                GridControlsElements = null;
                
                ModifiedParameters[nameof(GridControlsElements)] = GridControlsElements;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        GridControlsElements?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
