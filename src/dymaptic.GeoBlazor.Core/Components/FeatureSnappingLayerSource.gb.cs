// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.html">GeoBlazor Docs</a>
///     The FeatureSnappingLayerSource specifies which layers will be utilized for snapping in the
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html">SnappingOptions</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-FeatureSnappingLayerSource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureSnappingLayerSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureSnappingLayerSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="enabled">
    ///     Indicates whether feature snapping is turned on or off.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-FeatureSnappingLayerSource.html#enabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureSnappingLayerSource(
        bool? enabled = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Enabled = enabled;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeatureSnappingLayerSource.html#featuresnappinglayersourceenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether feature snapping is turned on or off.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-FeatureSnappingLayerSource.html#enabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Enabled { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Enabled property.
    /// </summary>
    public async Task<bool?> GetEnabled()
    {
        if (CoreJsModule is null)
        {
            return Enabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Enabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "enabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Enabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Enabled)] = Enabled;
        }
         
        return Enabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Layer property.
    /// </summary>
    public async Task<Layer?> GetLayer()
    {
        if (CoreJsModule is null)
        {
            return Layer;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Layer;
        }

        Layer? result = await JsComponentReference.InvokeAsync<Layer?>(
            "getLayer", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Layer is not null)
            {
                result.Id = Layer.Id;
            }
            
#pragma warning disable BL0005
            Layer = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Layer)] = Layer;
        }
        
        return Layer;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Enabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnabled(bool? value)
    {
#pragma warning disable BL0005
        Enabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Enabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "enabled", value);
    }
    
#endregion

}
