// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The following properties define a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html">Layer</a>-based <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#sources">source</a> whose features may be searched by a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html">Search</a> widget instance.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LayerSearchSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LayerSearchSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="autoNavigate">
    ///     Indicates whether to automatically navigate to the selected result once selected.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#autoNavigate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="displayField">
    ///     The results are displayed using this field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#displayField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="exactMatch">
    ///     Indicates to only return results that match the search value exactly.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#exactMatch">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     For filtering suggests or search results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layer">
    ///     The layer queried in the search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#layer">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxResults">
    ///     Indicates the maximum number of search results to return.
    ///     default 6
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#maxResults">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxSuggestions">
    ///     Indicates the maximum number of suggestions to return for the widget's input.
    ///     default 6
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#maxSuggestions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minSuggestCharacters">
    ///     Indicates the minimum number of characters required before querying for a suggestion.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#minSuggestCharacters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     The name of the source for display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="orderByFields">
    ///     One or more field names used to order the query results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#orderByFields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="outFields">
    ///     Specifies the fields returned with the search results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#outFields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="placeholder">
    ///     Used as a hint for the source input text.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#placeholder">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupEnabled">
    ///     Indicates whether to display a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">Popup</a> when a selected result is clicked.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#popupEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupTemplate">
    ///     The popup template used to display search results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="prefix">
    ///     Specify this to prefix the user's input of the search text.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#prefix">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resultGraphicEnabled">
    ///     Indicates whether to show a graphic on the map for the selected source using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#resultSymbol">resultSymbol</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#resultGraphicEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resultSymbol">
    ///     The symbol used to display the result.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#resultSymbol">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="searchFields">
    ///     An array of string values representing the names of fields in the feature layer to search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#searchFields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="searchTemplate">
    ///     A template string used to display multiple fields in a defined order when results are displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#searchTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="suffix">
    ///     Specify this to add a suffix to the user's input for the search value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#suffix">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="suggestionsEnabled">
    ///     Indicates whether to display suggestions as the user enters input text in the widget.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#suggestionsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="suggestionTemplate">
    ///     A template string used to display multiple fields in a defined order when suggestions are displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#suggestionTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="withinViewEnabled">
    ///     Indicates whether to constrain the search results to the view's extent.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#withinViewEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="zoomScale">
    ///     The set zoom scale for the resulting search result.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#zoomScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LayerSearchSource(
        bool? autoNavigate = null,
        string? displayField = null,
        bool? exactMatch = null,
        SearchSourceFilter? filter = null,
        Layer? layer = null,
        int? maxResults = null,
        double? maxSuggestions = null,
        int? minSuggestCharacters = null,
        string? name = null,
        IReadOnlyList<string>? orderByFields = null,
        IReadOnlyList<string>? outFields = null,
        string? placeholder = null,
        bool? popupEnabled = null,
        PopupTemplate? popupTemplate = null,
        string? prefix = null,
        bool? resultGraphicEnabled = null,
        Symbol? resultSymbol = null,
        IReadOnlyList<string>? searchFields = null,
        string? searchTemplate = null,
        string? suffix = null,
        bool? suggestionsEnabled = null,
        string? suggestionTemplate = null,
        bool? withinViewEnabled = null,
        double? zoomScale = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AutoNavigate = autoNavigate;
        DisplayField = displayField;
        ExactMatch = exactMatch;
        Filter = filter;
        Layer = layer;
        MaxResults = maxResults;
        MaxSuggestions = maxSuggestions;
        MinSuggestCharacters = minSuggestCharacters;
        Name = name;
        OrderByFields = orderByFields;
        OutFields = outFields;
        Placeholder = placeholder;
        PopupEnabled = popupEnabled;
        PopupTemplate = popupTemplate;
        Prefix = prefix;
        ResultGraphicEnabled = resultGraphicEnabled;
        ResultSymbol = resultSymbol;
        SearchFields = searchFields;
        SearchTemplate = searchTemplate;
        Suffix = suffix;
        SuggestionsEnabled = suggestionsEnabled;
        SuggestionTemplate = suggestionTemplate;
        WithinViewEnabled = withinViewEnabled;
        ZoomScale = zoomScale;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The name of the source for display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     One or more field names used to order the query results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#orderByFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? OrderByFields { get; set; }
    
    /// <summary>
    ///     An array of string values representing the names of fields in the feature layer to search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#searchFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? SearchFields { get; set; }
    
    /// <summary>
    ///     A template string used to display multiple fields in a defined order when results are displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html#searchTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SearchTemplate { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DisplayField property.
    /// </summary>
    public async Task<string?> GetDisplayField()
    {
        if (CoreJsModule is null)
        {
            return DisplayField;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DisplayField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "displayField");
        if (result is not null)
        {
#pragma warning disable BL0005
             DisplayField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DisplayField)] = DisplayField;
        }
         
        return DisplayField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ExactMatch property.
    /// </summary>
    public async Task<bool?> GetExactMatch()
    {
        if (CoreJsModule is null)
        {
            return ExactMatch;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ExactMatch;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "exactMatch");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ExactMatch = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ExactMatch)] = ExactMatch;
        }
         
        return ExactMatch;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Layer property.
    /// </summary>
    public async Task<Layer?> GetLayer()
    {
        if (CoreJsModule is null)
        {
            return Layer;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Layer;
        }

        Layer? result = await JsComponentReference.InvokeAsync<Layer?>(
            "getLayer", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Layer is not null)
            {
                result.Id = Layer.Id;
            }
            
#pragma warning disable BL0005
            Layer = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Layer)] = Layer;
        }
        
        return Layer;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "name");
        if (result is not null)
        {
#pragma warning disable BL0005
             Name = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Name)] = Name;
        }
         
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OrderByFields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetOrderByFields()
    {
        if (CoreJsModule is null)
        {
            return OrderByFields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OrderByFields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "orderByFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             OrderByFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OrderByFields)] = OrderByFields;
        }
         
        return OrderByFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SearchFields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetSearchFields()
    {
        if (CoreJsModule is null)
        {
            return SearchFields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SearchFields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "searchFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             SearchFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SearchFields)] = SearchFields;
        }
         
        return SearchFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SearchTemplate property.
    /// </summary>
    public async Task<string?> GetSearchTemplate()
    {
        if (CoreJsModule is null)
        {
            return SearchTemplate;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SearchTemplate;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "searchTemplate");
        if (result is not null)
        {
#pragma warning disable BL0005
             SearchTemplate = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SearchTemplate)] = SearchTemplate;
        }
         
        return SearchTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SuggestionTemplate property.
    /// </summary>
    public async Task<string?> GetSuggestionTemplate()
    {
        if (CoreJsModule is null)
        {
            return SuggestionTemplate;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SuggestionTemplate;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "suggestionTemplate");
        if (result is not null)
        {
#pragma warning disable BL0005
             SuggestionTemplate = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SuggestionTemplate)] = SuggestionTemplate;
        }
         
        return SuggestionTemplate;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the DisplayField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDisplayField(string? value)
    {
#pragma warning disable BL0005
        DisplayField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DisplayField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "displayField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ExactMatch property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExactMatch(bool? value)
    {
#pragma warning disable BL0005
        ExactMatch = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExactMatch)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "exactMatch", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Layer property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayer(Layer? value)
    {
#pragma warning disable BL0005
        Layer = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Layer)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layer", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string? value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OrderByFields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrderByFields(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        OrderByFields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OrderByFields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "orderByFields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SearchFields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSearchFields(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        SearchFields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SearchFields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "searchFields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SearchTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSearchTemplate(string? value)
    {
#pragma warning disable BL0005
        SearchTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SearchTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "searchTemplate", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SuggestionTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSuggestionTemplate(string? value)
    {
#pragma warning disable BL0005
        SuggestionTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SuggestionTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "suggestionTemplate", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the OrderByFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOrderByFields(params string[] values)
    {
        string[] join = OrderByFields is null
            ? values
            : [..OrderByFields, ..values];
        await SetOrderByFields(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the SearchFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSearchFields(params string[] values)
    {
        string[] join = SearchFields is null
            ? values
            : [..SearchFields, ..values];
        await SetSearchFields(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the OrderByFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOrderByFields(params string[] values)
    {
        if (OrderByFields is null)
        {
            return;
        }
        await SetOrderByFields(OrderByFields.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the SearchFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSearchFields(params string[] values)
    {
        if (SearchFields is null)
        {
            return;
        }
        await SetSearchFields(SearchFields.Except(values).ToArray());
    }
    
#endregion

    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Layer is null)
        {
            throw new MissingRequiredChildElementException(nameof(LayerSearchSource), nameof(Layer));
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
