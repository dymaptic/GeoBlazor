// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    referenced by <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#serviceRasterInfo">ImageryLayer</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html#rasterInfo">ImageryTileLayer</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RasterBandInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RasterBandInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="maxWavelength">
    ///     The maximum wavelength of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#maxWavelength">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minWavelength">
    ///     The minimum wavelength of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#minWavelength">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     The name of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="radianceBias">
    ///     The radiance bias of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#radianceBias">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="radianceGain">
    ///     The radiance gain of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#radianceGain">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="reflectanceBias">
    ///     The reflectance bias of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#reflectanceBias">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="reflectanceGain">
    ///     The reflectance gain of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#reflectanceGain">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="solarIrradiance">
    ///     The solar irradiance of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#solarIrradiance">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RasterBandInfo(
        double? maxWavelength = null,
        double? minWavelength = null,
        string? name = null,
        double? radianceBias = null,
        double? radianceGain = null,
        double? reflectanceBias = null,
        double? reflectanceGain = null,
        double? solarIrradiance = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        MaxWavelength = maxWavelength;
        MinWavelength = minWavelength;
        Name = name;
        RadianceBias = radianceBias;
        RadianceGain = radianceGain;
        ReflectanceBias = reflectanceBias;
        ReflectanceGain = reflectanceGain;
        SolarIrradiance = solarIrradiance;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The maximum wavelength of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#maxWavelength">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxWavelength { get; set; }
    
    /// <summary>
    ///     The minimum wavelength of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#minWavelength">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinWavelength { get; set; }
    
    /// <summary>
    ///     The name of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     The radiance bias of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#radianceBias">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? RadianceBias { get; set; }
    
    /// <summary>
    ///     The radiance gain of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#radianceGain">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? RadianceGain { get; set; }
    
    /// <summary>
    ///     The reflectance bias of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#reflectanceBias">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? ReflectanceBias { get; set; }
    
    /// <summary>
    ///     The reflectance gain of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#reflectanceGain">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? ReflectanceGain { get; set; }
    
    /// <summary>
    ///     The solar irradiance of the band.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterBandInfo.html#solarIrradiance">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? SolarIrradiance { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxWavelength property.
    /// </summary>
    public async Task<double?> GetMaxWavelength()
    {
        if (CoreJsModule is null)
        {
            return MaxWavelength;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaxWavelength;
        }

        // get the property value
#pragma warning disable BL0005
        MaxWavelength = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxWavelength");
#pragma warning restore BL0005
         ModifiedParameters[nameof(MaxWavelength)] = MaxWavelength;
        return MaxWavelength;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinWavelength property.
    /// </summary>
    public async Task<double?> GetMinWavelength()
    {
        if (CoreJsModule is null)
        {
            return MinWavelength;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MinWavelength;
        }

        // get the property value
#pragma warning disable BL0005
        MinWavelength = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "minWavelength");
#pragma warning restore BL0005
         ModifiedParameters[nameof(MinWavelength)] = MinWavelength;
        return MinWavelength;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
#pragma warning disable BL0005
        Name = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "name");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Name)] = Name;
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RadianceBias property.
    /// </summary>
    public async Task<double?> GetRadianceBias()
    {
        if (CoreJsModule is null)
        {
            return RadianceBias;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RadianceBias;
        }

        // get the property value
#pragma warning disable BL0005
        RadianceBias = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "radianceBias");
#pragma warning restore BL0005
         ModifiedParameters[nameof(RadianceBias)] = RadianceBias;
        return RadianceBias;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RadianceGain property.
    /// </summary>
    public async Task<double?> GetRadianceGain()
    {
        if (CoreJsModule is null)
        {
            return RadianceGain;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RadianceGain;
        }

        // get the property value
#pragma warning disable BL0005
        RadianceGain = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "radianceGain");
#pragma warning restore BL0005
         ModifiedParameters[nameof(RadianceGain)] = RadianceGain;
        return RadianceGain;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReflectanceBias property.
    /// </summary>
    public async Task<double?> GetReflectanceBias()
    {
        if (CoreJsModule is null)
        {
            return ReflectanceBias;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ReflectanceBias;
        }

        // get the property value
#pragma warning disable BL0005
        ReflectanceBias = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "reflectanceBias");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ReflectanceBias)] = ReflectanceBias;
        return ReflectanceBias;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReflectanceGain property.
    /// </summary>
    public async Task<double?> GetReflectanceGain()
    {
        if (CoreJsModule is null)
        {
            return ReflectanceGain;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ReflectanceGain;
        }

        // get the property value
#pragma warning disable BL0005
        ReflectanceGain = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "reflectanceGain");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ReflectanceGain)] = ReflectanceGain;
        return ReflectanceGain;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SolarIrradiance property.
    /// </summary>
    public async Task<double?> GetSolarIrradiance()
    {
        if (CoreJsModule is null)
        {
            return SolarIrradiance;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SolarIrradiance;
        }

        // get the property value
#pragma warning disable BL0005
        SolarIrradiance = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "solarIrradiance");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SolarIrradiance)] = SolarIrradiance;
        return SolarIrradiance;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the MaxWavelength property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxWavelength(double value)
    {
#pragma warning disable BL0005
        MaxWavelength = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxWavelength)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxWavelength", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinWavelength property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinWavelength(double value)
    {
#pragma warning disable BL0005
        MinWavelength = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinWavelength)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minWavelength", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RadianceBias property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRadianceBias(double value)
    {
#pragma warning disable BL0005
        RadianceBias = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RadianceBias)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "radianceBias", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RadianceGain property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRadianceGain(double value)
    {
#pragma warning disable BL0005
        RadianceGain = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RadianceGain)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "radianceGain", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReflectanceBias property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReflectanceBias(double value)
    {
#pragma warning disable BL0005
        ReflectanceBias = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReflectanceBias)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "reflectanceBias", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReflectanceGain property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReflectanceGain(double value)
    {
#pragma warning disable BL0005
        ReflectanceGain = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReflectanceGain)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "reflectanceGain", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SolarIrradiance property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSolarIrradiance(double value)
    {
#pragma warning disable BL0005
        SolarIrradiance = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SolarIrradiance)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "solarIrradiance", value);
    }
    
#endregion




}
