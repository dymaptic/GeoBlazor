// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The menu items within the feature table menu.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VisibleElementsMenuItems : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VisibleElementsMenuItems()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="clearSelection">
    ///     Indicates whether to display the `Clear selection` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="deleteSelection">
    ///     _(Since 4.25)_ Indicates whether to display the `Delete Selection` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="refreshData">
    ///     Indicates whether to display the `Refresh data` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="selectedRecordsShowAllToggle">
    ///     _(Since 4.23)_ Indicates whether to toggle between showing only selected records in the table to showing all of the records.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="selectedRecordsShowSelectedToggle">
    ///     _(Since 4.23)_ Indicates whether to display the `Show selected records` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="toggleColumns">
    ///     Indicates whether to enable toggling column visibility within the menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="zoomToSelection">
    ///     _(Since 4.23)_ Indicates whether to display the `Zoom to selected` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VisibleElementsMenuItems(
        bool? clearSelection = null,
        bool? deleteSelection = null,
        bool? refreshData = null,
        bool? selectedRecordsShowAllToggle = null,
        bool? selectedRecordsShowSelectedToggle = null,
        bool? toggleColumns = null,
        bool? zoomToSelection = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ClearSelection = clearSelection;
        DeleteSelection = deleteSelection;
        RefreshData = refreshData;
        SelectedRecordsShowAllToggle = selectedRecordsShowAllToggle;
        SelectedRecordsShowSelectedToggle = selectedRecordsShowSelectedToggle;
        ToggleColumns = toggleColumns;
        ZoomToSelection = zoomToSelection;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether to display the `Clear selection` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ClearSelection { get; set; }
    
    /// <summary>
    ///     _(Since 4.25)_ Indicates whether to display the `Delete Selection` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DeleteSelection { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the `Refresh data` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RefreshData { get; set; }
    
    /// <summary>
    ///     _(Since 4.23)_ Indicates whether to toggle between showing only selected records in the table to showing all of the records.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SelectedRecordsShowAllToggle { get; set; }
    
    /// <summary>
    ///     _(Since 4.23)_ Indicates whether to display the `Show selected records` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SelectedRecordsShowSelectedToggle { get; set; }
    
    /// <summary>
    ///     Indicates whether to enable toggling column visibility within the menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ToggleColumns { get; set; }
    
    /// <summary>
    ///     _(Since 4.23)_ Indicates whether to display the `Zoom to selected` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ZoomToSelection { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ClearSelection property.
    /// </summary>
    public async Task<bool?> GetClearSelection()
    {
        if (CoreJsModule is null)
        {
            return ClearSelection;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ClearSelection;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "clearSelection");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ClearSelection = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ClearSelection)] = ClearSelection;
        }
         
        return ClearSelection;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DeleteSelection property.
    /// </summary>
    public async Task<bool?> GetDeleteSelection()
    {
        if (CoreJsModule is null)
        {
            return DeleteSelection;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DeleteSelection;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "deleteSelection");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DeleteSelection = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DeleteSelection)] = DeleteSelection;
        }
         
        return DeleteSelection;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RefreshData property.
    /// </summary>
    public async Task<bool?> GetRefreshData()
    {
        if (CoreJsModule is null)
        {
            return RefreshData;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RefreshData;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "refreshData");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RefreshData = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RefreshData)] = RefreshData;
        }
         
        return RefreshData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedRecordsShowAllToggle property.
    /// </summary>
    public async Task<bool?> GetSelectedRecordsShowAllToggle()
    {
        if (CoreJsModule is null)
        {
            return SelectedRecordsShowAllToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedRecordsShowAllToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "selectedRecordsShowAllToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SelectedRecordsShowAllToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectedRecordsShowAllToggle)] = SelectedRecordsShowAllToggle;
        }
         
        return SelectedRecordsShowAllToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedRecordsShowSelectedToggle property.
    /// </summary>
    public async Task<bool?> GetSelectedRecordsShowSelectedToggle()
    {
        if (CoreJsModule is null)
        {
            return SelectedRecordsShowSelectedToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedRecordsShowSelectedToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "selectedRecordsShowSelectedToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SelectedRecordsShowSelectedToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectedRecordsShowSelectedToggle)] = SelectedRecordsShowSelectedToggle;
        }
         
        return SelectedRecordsShowSelectedToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ToggleColumns property.
    /// </summary>
    public async Task<bool?> GetToggleColumns()
    {
        if (CoreJsModule is null)
        {
            return ToggleColumns;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ToggleColumns;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "toggleColumns");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ToggleColumns = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ToggleColumns)] = ToggleColumns;
        }
         
        return ToggleColumns;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ZoomToSelection property.
    /// </summary>
    public async Task<bool?> GetZoomToSelection()
    {
        if (CoreJsModule is null)
        {
            return ZoomToSelection;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ZoomToSelection;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "zoomToSelection");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ZoomToSelection = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ZoomToSelection)] = ZoomToSelection;
        }
         
        return ZoomToSelection;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ClearSelection property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetClearSelection(bool? value)
    {
#pragma warning disable BL0005
        ClearSelection = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ClearSelection)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "clearSelection", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DeleteSelection property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDeleteSelection(bool? value)
    {
#pragma warning disable BL0005
        DeleteSelection = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DeleteSelection)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "deleteSelection", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RefreshData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRefreshData(bool? value)
    {
#pragma warning disable BL0005
        RefreshData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RefreshData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "refreshData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectedRecordsShowAllToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectedRecordsShowAllToggle(bool? value)
    {
#pragma warning disable BL0005
        SelectedRecordsShowAllToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectedRecordsShowAllToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selectedRecordsShowAllToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectedRecordsShowSelectedToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectedRecordsShowSelectedToggle(bool? value)
    {
#pragma warning disable BL0005
        SelectedRecordsShowSelectedToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectedRecordsShowSelectedToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selectedRecordsShowSelectedToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ToggleColumns property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetToggleColumns(bool? value)
    {
#pragma warning disable BL0005
        ToggleColumns = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ToggleColumns)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "toggleColumns", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ZoomToSelection property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetZoomToSelection(bool? value)
    {
#pragma warning disable BL0005
        ZoomToSelection = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ZoomToSelection)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "zoomToSelection", value);
    }
    
#endregion

}
