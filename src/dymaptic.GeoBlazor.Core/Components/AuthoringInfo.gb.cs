// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Authoring information related to generating renderers and visual variables with the Smart Mapping methods.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class AuthoringInfo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public AuthoringInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="classificationMethod">
    ///     Indicates which classification method was used if a classed color or classed size renderer was generated using one of the Smart Mapping functions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#classificationMethod">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colorRamp">
    ///     Indicates the color ramp was used to create the symbols for Unique Value or Class Breaks renderer for Imagery Layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#colorRamp">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fadeRatio">
    ///     Only applicable to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html">HeatmapRenderer</a> created with the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-heatmap.html">heatmap renderer creator</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fadeRatio">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field1">
    ///     A numeric field used for generating a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a> along with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2">field2</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field2">
    ///     A numeric field used for generating a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a> along with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1">field1</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fields">
    ///     An array of string values representing field names used for creating a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-predominance.html">predominance renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="flowTheme">
    ///     Only applicable to flow renderers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#flowTheme">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="focus">
    ///     The focus of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#focus">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isAutoGenerated">
    ///     Indicates whether the renderer was created internally by the JS API's rendering engine for default <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html">FeatureReductionCluster</a> visualizations.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#isAutoGenerated">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lengthUnit">
    ///     Only applicable to renderer used in web scenes. Indicates the unit used in real-world sizes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#lengthUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxSliderValue">
    ///     Indicates the value of the upper handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#maxSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minSliderValue">
    ///     Indicates the value of the lower handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#minSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="numClasses">
    ///     The number of classes used to classify each field of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#numClasses">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="standardDeviationInterval">
    ///     Indicates the standard deviation interval for each stop in a classed color or classed size renderer that was generated using the `standard-deviation` classification method.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#standardDeviationInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="statistics">
    ///     Only for renderers of type `univariate-color-size` with an `above-and-below` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme">univariateTheme</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#statistics">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="univariateSymbolStyle">
    ///     Only applicable to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-univariateColorSize.html">univariateColorSize</a> renderers with an `above-and-below` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme">univariateTheme</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateSymbolStyle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="univariateTheme">
    ///     Only applicable to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-univariateColorSize.html">univariateColorSize</a> renderers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visualVariables">
    ///     Contains authoring properties of visual variables generated from one of the Smart Mapping methods or sliders.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#visualVariables">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AuthoringInfo(
        ClassificationMethod? classificationMethod = null,
        ColorRamp? colorRamp = null,
        double? fadeRatio = null,
        AuthoringInfoField? field1 = null,
        AuthoringInfoField? field2 = null,
        IReadOnlyList<string>? fields = null,
        AuthoringInfoFlowTheme? flowTheme = null,
        string? focus = null,
        bool? isAutoGenerated = null,
        LengthUnit? lengthUnit = null,
        double? maxSliderValue = null,
        double? minSliderValue = null,
        double? numClasses = null,
        double? standardDeviationInterval = null,
        AuthoringInfoStatistics? statistics = null,
        UnivariateSymbolStyle? univariateSymbolStyle = null,
        UnivariateTheme? univariateTheme = null,
        IReadOnlyList<AuthoringInfoVisualVariable>? visualVariables = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ClassificationMethod = classificationMethod;
        ColorRamp = colorRamp;
        FadeRatio = fadeRatio;
        Field1 = field1;
        Field2 = field2;
        Fields = fields;
        FlowTheme = flowTheme;
        Focus = focus;
        IsAutoGenerated = isAutoGenerated;
        LengthUnit = lengthUnit;
        MaxSliderValue = maxSliderValue;
        MinSliderValue = minSliderValue;
        NumClasses = numClasses;
        StandardDeviationInterval = standardDeviationInterval;
        Statistics = statistics;
        UnivariateSymbolStyle = univariateSymbolStyle;
        UnivariateTheme = univariateTheme;
        VisualVariables = visualVariables;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates which classification method was used if a classed color or classed size renderer was generated using one of the Smart Mapping functions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#classificationMethod">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ClassificationMethod? ClassificationMethod { get; set; }
    
    /// <summary>
    ///     Indicates the color ramp was used to create the symbols for Unique Value or Class Breaks renderer for Imagery Layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#colorRamp">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ColorRamp? ColorRamp { get; set; }
    
    /// <summary>
    ///     Only applicable to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html">HeatmapRenderer</a> created with the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-heatmap.html">heatmap renderer creator</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fadeRatio">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? FadeRatio { get; set; }
    
    /// <summary>
    ///     A numeric field used for generating a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a> along with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2">field2</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoField? Field1 { get; set; }
    
    /// <summary>
    ///     A numeric field used for generating a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a> along with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1">field1</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoField? Field2 { get; set; }
    
    /// <summary>
    ///     An array of string values representing field names used for creating a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-predominance.html">predominance renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Fields { get; set; }
    
    /// <summary>
    ///     Only applicable to flow renderers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#flowTheme">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoFlowTheme? FlowTheme { get; set; }
    
    /// <summary>
    ///     The focus of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#focus">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Focus { get; set; }
    
    /// <summary>
    ///     Indicates whether the renderer was created internally by the JS API's rendering engine for default <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html">FeatureReductionCluster</a> visualizations.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#isAutoGenerated">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsAutoGenerated { get; set; }
    
    /// <summary>
    ///     Only applicable to renderer used in web scenes. Indicates the unit used in real-world sizes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#lengthUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LengthUnit? LengthUnit { get; set; }
    
    /// <summary>
    ///     Indicates the value of the upper handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#maxSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxSliderValue { get; set; }
    
    /// <summary>
    ///     Indicates the value of the lower handle if a slider was used to generate the dot value for dot density renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#minSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinSliderValue { get; set; }
    
    /// <summary>
    ///     The number of classes used to classify each field of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html">relationship renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#numClasses">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NumClasses { get; set; }
    
    /// <summary>
    ///     Indicates the standard deviation interval for each stop in a classed color or classed size renderer that was generated using the `standard-deviation` classification method.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#standardDeviationInterval">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? StandardDeviationInterval { get; set; }
    
    /// <summary>
    ///     Only for renderers of type `univariate-color-size` with an `above-and-below` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme">univariateTheme</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#statistics">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoStatistics? Statistics { get; set; }
    
    /// <summary>
    ///     Only applicable to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-univariateColorSize.html">univariateColorSize</a> renderers with an `above-and-below` <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme">univariateTheme</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateSymbolStyle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public UnivariateSymbolStyle? UnivariateSymbolStyle { get; set; }
    
    /// <summary>
    ///     Only applicable to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-univariateColorSize.html">univariateColorSize</a> renderers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public UnivariateTheme? UnivariateTheme { get; set; }
    
    /// <summary>
    ///     Contains authoring properties of visual variables generated from one of the Smart Mapping methods or sliders.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#visualVariables">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<AuthoringInfoVisualVariable>? VisualVariables { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ClassificationMethod property.
    /// </summary>
    public async Task<ClassificationMethod?> GetClassificationMethod()
    {
        if (CoreJsModule is null)
        {
            return ClassificationMethod;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ClassificationMethod;
        }

        // get the property value
        JsNullableEnumWrapper<ClassificationMethod>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ClassificationMethod>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "classificationMethod");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ClassificationMethod = (ClassificationMethod)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ClassificationMethod)] = ClassificationMethod;
        }
         
        return ClassificationMethod;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorRamp property.
    /// </summary>
    public async Task<ColorRamp?> GetColorRamp()
    {
        if (CoreJsModule is null)
        {
            return ColorRamp;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ColorRamp;
        }

        ColorRamp? result = await JsComponentReference.InvokeAsync<ColorRamp?>(
            "getColorRamp", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ColorRamp = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ColorRamp)] = ColorRamp;
        }
        
        return ColorRamp;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FadeRatio property.
    /// </summary>
    public async Task<double?> GetFadeRatio()
    {
        if (CoreJsModule is null)
        {
            return FadeRatio;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FadeRatio;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "fadeRatio");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FadeRatio = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FadeRatio)] = FadeRatio;
        }
         
        return FadeRatio;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Field1 property.
    /// </summary>
    public async Task<AuthoringInfoField?> GetField1()
    {
        if (CoreJsModule is null)
        {
            return Field1;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field1;
        }

        AuthoringInfoField? result = await JsComponentReference.InvokeAsync<AuthoringInfoField?>(
            "getField1", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Field1 = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Field1)] = Field1;
        }
        
        return Field1;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Field2 property.
    /// </summary>
    public async Task<AuthoringInfoField?> GetField2()
    {
        if (CoreJsModule is null)
        {
            return Field2;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field2;
        }

        AuthoringInfoField? result = await JsComponentReference.InvokeAsync<AuthoringInfoField?>(
            "getField2", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Field2 = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Field2)] = Field2;
        }
        
        return Field2;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Fields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetFields()
    {
        if (CoreJsModule is null)
        {
            return Fields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Fields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "fields");
        if (result is not null)
        {
#pragma warning disable BL0005
             Fields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Fields)] = Fields;
        }
         
        return Fields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FlowTheme property.
    /// </summary>
    public async Task<AuthoringInfoFlowTheme?> GetFlowTheme()
    {
        if (CoreJsModule is null)
        {
            return FlowTheme;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FlowTheme;
        }

        // get the property value
        JsNullableEnumWrapper<AuthoringInfoFlowTheme>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<AuthoringInfoFlowTheme>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "flowTheme");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FlowTheme = (AuthoringInfoFlowTheme)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FlowTheme)] = FlowTheme;
        }
         
        return FlowTheme;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Focus property.
    /// </summary>
    public async Task<string?> GetFocus()
    {
        if (CoreJsModule is null)
        {
            return Focus;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Focus;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "focus");
        if (result is not null)
        {
#pragma warning disable BL0005
             Focus = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Focus)] = Focus;
        }
         
        return Focus;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsAutoGenerated property.
    /// </summary>
    public async Task<bool?> GetIsAutoGenerated()
    {
        if (CoreJsModule is null)
        {
            return IsAutoGenerated;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IsAutoGenerated;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isAutoGenerated");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsAutoGenerated = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsAutoGenerated)] = IsAutoGenerated;
        }
         
        return IsAutoGenerated;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LengthUnit property.
    /// </summary>
    public async Task<LengthUnit?> GetLengthUnit()
    {
        if (CoreJsModule is null)
        {
            return LengthUnit;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LengthUnit;
        }

        // get the property value
        JsNullableEnumWrapper<LengthUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<LengthUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "lengthUnit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LengthUnit = (LengthUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LengthUnit)] = LengthUnit;
        }
         
        return LengthUnit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxSliderValue property.
    /// </summary>
    public async Task<double?> GetMaxSliderValue()
    {
        if (CoreJsModule is null)
        {
            return MaxSliderValue;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxSliderValue;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxSliderValue");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxSliderValue = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxSliderValue)] = MaxSliderValue;
        }
         
        return MaxSliderValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinSliderValue property.
    /// </summary>
    public async Task<double?> GetMinSliderValue()
    {
        if (CoreJsModule is null)
        {
            return MinSliderValue;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MinSliderValue;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minSliderValue");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinSliderValue = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinSliderValue)] = MinSliderValue;
        }
         
        return MinSliderValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumClasses property.
    /// </summary>
    public async Task<double?> GetNumClasses()
    {
        if (CoreJsModule is null)
        {
            return NumClasses;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NumClasses;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "numClasses");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NumClasses = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NumClasses)] = NumClasses;
        }
         
        return NumClasses;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StandardDeviationInterval property.
    /// </summary>
    public async Task<double?> GetStandardDeviationInterval()
    {
        if (CoreJsModule is null)
        {
            return StandardDeviationInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StandardDeviationInterval;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "standardDeviationInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             StandardDeviationInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StandardDeviationInterval)] = StandardDeviationInterval;
        }
         
        return StandardDeviationInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Statistics property.
    /// </summary>
    public async Task<AuthoringInfoStatistics?> GetStatistics()
    {
        if (CoreJsModule is null)
        {
            return Statistics;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Statistics;
        }

        AuthoringInfoStatistics? result = await JsComponentReference.InvokeAsync<AuthoringInfoStatistics?>(
            "getStatistics", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Statistics = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Statistics)] = Statistics;
        }
        
        return Statistics;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UnivariateSymbolStyle property.
    /// </summary>
    public async Task<UnivariateSymbolStyle?> GetUnivariateSymbolStyle()
    {
        if (CoreJsModule is null)
        {
            return UnivariateSymbolStyle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UnivariateSymbolStyle;
        }

        // get the property value
        JsNullableEnumWrapper<UnivariateSymbolStyle>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<UnivariateSymbolStyle>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "univariateSymbolStyle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UnivariateSymbolStyle = (UnivariateSymbolStyle)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UnivariateSymbolStyle)] = UnivariateSymbolStyle;
        }
         
        return UnivariateSymbolStyle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UnivariateTheme property.
    /// </summary>
    public async Task<UnivariateTheme?> GetUnivariateTheme()
    {
        if (CoreJsModule is null)
        {
            return UnivariateTheme;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UnivariateTheme;
        }

        // get the property value
        JsNullableEnumWrapper<UnivariateTheme>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<UnivariateTheme>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "univariateTheme");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UnivariateTheme = (UnivariateTheme)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UnivariateTheme)] = UnivariateTheme;
        }
         
        return UnivariateTheme;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisualVariables property.
    /// </summary>
    public async Task<IReadOnlyList<AuthoringInfoVisualVariable>?> GetVisualVariables()
    {
        if (CoreJsModule is null)
        {
            return VisualVariables;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisualVariables;
        }

        IReadOnlyList<AuthoringInfoVisualVariable>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<AuthoringInfoVisualVariable>?>(
            "getVisualVariables", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            VisualVariables = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(VisualVariables)] = VisualVariables;
        }
        
        return VisualVariables;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ClassificationMethod property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetClassificationMethod(ClassificationMethod? value)
    {
#pragma warning disable BL0005
        ClassificationMethod = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ClassificationMethod)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "classificationMethod", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ColorRamp property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorRamp(ColorRamp? value)
    {
#pragma warning disable BL0005
        ColorRamp = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColorRamp)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "colorRamp", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FadeRatio property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFadeRatio(double? value)
    {
#pragma warning disable BL0005
        FadeRatio = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FadeRatio)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fadeRatio", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field1 property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField1(AuthoringInfoField? value)
    {
#pragma warning disable BL0005
        Field1 = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field1)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field1", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field2 property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField2(AuthoringInfoField? value)
    {
#pragma warning disable BL0005
        Field2 = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field2)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field2", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Fields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFields(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        Fields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Fields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FlowTheme property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFlowTheme(AuthoringInfoFlowTheme? value)
    {
#pragma warning disable BL0005
        FlowTheme = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FlowTheme)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "flowTheme", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Focus property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFocus(string? value)
    {
#pragma warning disable BL0005
        Focus = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Focus)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "focus", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsAutoGenerated property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsAutoGenerated(bool? value)
    {
#pragma warning disable BL0005
        IsAutoGenerated = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsAutoGenerated)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isAutoGenerated", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LengthUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLengthUnit(LengthUnit? value)
    {
#pragma warning disable BL0005
        LengthUnit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LengthUnit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lengthUnit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxSliderValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxSliderValue(double? value)
    {
#pragma warning disable BL0005
        MaxSliderValue = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxSliderValue)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxSliderValue", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinSliderValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinSliderValue(double? value)
    {
#pragma warning disable BL0005
        MinSliderValue = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinSliderValue)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minSliderValue", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumClasses property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumClasses(double? value)
    {
#pragma warning disable BL0005
        NumClasses = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumClasses)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numClasses", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StandardDeviationInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStandardDeviationInterval(double? value)
    {
#pragma warning disable BL0005
        StandardDeviationInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StandardDeviationInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "standardDeviationInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Statistics property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStatistics(AuthoringInfoStatistics? value)
    {
#pragma warning disable BL0005
        Statistics = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Statistics)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "statistics", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UnivariateSymbolStyle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnivariateSymbolStyle(UnivariateSymbolStyle? value)
    {
#pragma warning disable BL0005
        UnivariateSymbolStyle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UnivariateSymbolStyle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "univariateSymbolStyle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UnivariateTheme property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnivariateTheme(UnivariateTheme? value)
    {
#pragma warning disable BL0005
        UnivariateTheme = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UnivariateTheme)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "univariateTheme", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisualVariables property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisualVariables(IReadOnlyList<AuthoringInfoVisualVariable>? value)
    {
#pragma warning disable BL0005
        VisualVariables = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisualVariables)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "visualVariables", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFields(params string[] values)
    {
        string[] join = Fields is null
            ? values
            : [..Fields, ..values];
        await SetFields(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the VisualVariables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToVisualVariables(params AuthoringInfoVisualVariable[] values)
    {
        AuthoringInfoVisualVariable[] join = VisualVariables is null
            ? values
            : [..VisualVariables, ..values];
        await SetVisualVariables(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFields(params string[] values)
    {
        if (Fields is null)
        {
            return;
        }
        await SetFields(Fields.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the VisualVariables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromVisualVariables(params AuthoringInfoVisualVariable[] values)
    {
        if (VisualVariables is null)
        {
            return;
        }
        await SetVisualVariables(VisualVariables.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ColorRamp colorRamp:
                if (colorRamp != ColorRamp)
                {
                    ColorRamp = colorRamp;
                    
                    ModifiedParameters[nameof(ColorRamp)] = ColorRamp;
                }
                
                return true;
            case AuthoringInfoStatistics statistics:
                if (statistics != Statistics)
                {
                    Statistics = statistics;
                    
                    ModifiedParameters[nameof(Statistics)] = Statistics;
                }
                
                return true;
            case AuthoringInfoVisualVariable visualVariables:
                VisualVariables ??= [];
                if (!VisualVariables.Contains(visualVariables))
                {
                    VisualVariables = [..VisualVariables, visualVariables];
                    
                    ModifiedParameters[nameof(VisualVariables)] = VisualVariables;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ColorRamp _:
                ColorRamp = null;
                
                ModifiedParameters[nameof(ColorRamp)] = ColorRamp;
                return true;
            case AuthoringInfoStatistics _:
                Statistics = null;
                
                ModifiedParameters[nameof(Statistics)] = Statistics;
                return true;
            case AuthoringInfoVisualVariable visualVariables:
                VisualVariables = VisualVariables?.Where(v => v != visualVariables).ToList();
                
                ModifiedParameters[nameof(VisualVariables)] = VisualVariables;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ColorRamp?.ValidateRequiredGeneratedChildren();
        Statistics?.ValidateRequiredGeneratedChildren();
        if (VisualVariables is not null)
        {
            foreach (AuthoringInfoVisualVariable child in VisualVariables)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
