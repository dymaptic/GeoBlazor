// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The visible elements that are displayed within the widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureTableVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureTableVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="columnMenuItems">
    ///     _(Since 4.30)_ The menu items within the column menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="columnMenus">
    ///     _(Since 4.23)_ Indicates whether to display the menu items within the individual columns.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="header">
    ///     Indicates whether to display the feature table's header information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="menu">
    ///     Indicates whether to display the feature table's menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="menuItems">
    ///     The menu items within the feature table menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="progress">
    ///     _(Since 4.30)_ Indicates whether to display the progress indicator when the table is querying or syncing data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="selectionColumn">
    ///     Indicates whether to display the selection column in the table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tooltips">
    ///     _(Since 4.30)_ Indicates whether to display the tooltip for the Show/hide columns button.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureTableVisibleElements(
        VisibleElementsColumnMenuItems? columnMenuItems = null,
        bool? columnMenus = null,
        bool? header = null,
        bool? menu = null,
        VisibleElementsMenuItems? menuItems = null,
        bool? progress = null,
        bool? selectionColumn = null,
        bool? tooltips = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ColumnMenuItems = columnMenuItems;
        ColumnMenus = columnMenus;
        Header = header;
        Menu = menu;
        MenuItems = menuItems;
        Progress = progress;
        SelectionColumn = selectionColumn;
        Tooltips = tooltips;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     _(Since 4.30)_ The menu items within the column menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public VisibleElementsColumnMenuItems? ColumnMenuItems { get; set; }
    
    /// <summary>
    ///     _(Since 4.23)_ Indicates whether to display the menu items within the individual columns.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ColumnMenus { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the feature table's header information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Header { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the feature table's menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Menu { get; set; }
    
    /// <summary>
    ///     The menu items within the feature table menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public VisibleElementsMenuItems? MenuItems { get; set; }
    
    /// <summary>
    ///     _(Since 4.30)_ Indicates whether to display the progress indicator when the table is querying or syncing data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Progress { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the selection column in the table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SelectionColumn { get; set; }
    
    /// <summary>
    ///     _(Since 4.30)_ Indicates whether to display the tooltip for the Show/hide columns button.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Tooltips { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ColumnMenuItems property.
    /// </summary>
    public async Task<VisibleElementsColumnMenuItems?> GetColumnMenuItems()
    {
        if (CoreJsModule is null)
        {
            return ColumnMenuItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ColumnMenuItems;
        }

        // get the property value
        VisibleElementsColumnMenuItems? result = await JsComponentReference!.InvokeAsync<VisibleElementsColumnMenuItems?>("getProperty",
            CancellationTokenSource.Token, "columnMenuItems");
        if (result is not null)
        {
#pragma warning disable BL0005
             ColumnMenuItems = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColumnMenuItems)] = ColumnMenuItems;
        }
         
        return ColumnMenuItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ColumnMenus property.
    /// </summary>
    public async Task<bool?> GetColumnMenus()
    {
        if (CoreJsModule is null)
        {
            return ColumnMenus;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ColumnMenus;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "columnMenus");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ColumnMenus = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColumnMenus)] = ColumnMenus;
        }
         
        return ColumnMenus;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Header property.
    /// </summary>
    public async Task<bool?> GetHeader()
    {
        if (CoreJsModule is null)
        {
            return Header;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Header;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "header");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Header = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Header)] = Header;
        }
         
        return Header;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Menu property.
    /// </summary>
    public async Task<bool?> GetMenu()
    {
        if (CoreJsModule is null)
        {
            return Menu;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Menu;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "menu");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Menu = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Menu)] = Menu;
        }
         
        return Menu;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MenuItems property.
    /// </summary>
    public async Task<VisibleElementsMenuItems?> GetMenuItems()
    {
        if (CoreJsModule is null)
        {
            return MenuItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MenuItems;
        }

        // get the property value
        VisibleElementsMenuItems? result = await JsComponentReference!.InvokeAsync<VisibleElementsMenuItems?>("getProperty",
            CancellationTokenSource.Token, "menuItems");
        if (result is not null)
        {
#pragma warning disable BL0005
             MenuItems = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MenuItems)] = MenuItems;
        }
         
        return MenuItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Progress property.
    /// </summary>
    public async Task<bool?> GetProgress()
    {
        if (CoreJsModule is null)
        {
            return Progress;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Progress;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "progress");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Progress = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Progress)] = Progress;
        }
         
        return Progress;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectionColumn property.
    /// </summary>
    public async Task<bool?> GetSelectionColumn()
    {
        if (CoreJsModule is null)
        {
            return SelectionColumn;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SelectionColumn;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "selectionColumn");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SelectionColumn = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectionColumn)] = SelectionColumn;
        }
         
        return SelectionColumn;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Tooltips property.
    /// </summary>
    public async Task<bool?> GetTooltips()
    {
        if (CoreJsModule is null)
        {
            return Tooltips;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Tooltips;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "tooltips");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Tooltips = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Tooltips)] = Tooltips;
        }
         
        return Tooltips;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ColumnMenuItems property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColumnMenuItems(VisibleElementsColumnMenuItems? value)
    {
#pragma warning disable BL0005
        ColumnMenuItems = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColumnMenuItems)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "columnMenuItems", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ColumnMenus property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColumnMenus(bool? value)
    {
#pragma warning disable BL0005
        ColumnMenus = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColumnMenus)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "columnMenus", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Header property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeader(bool? value)
    {
#pragma warning disable BL0005
        Header = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Header)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "header", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Menu property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMenu(bool? value)
    {
#pragma warning disable BL0005
        Menu = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Menu)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "menu", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MenuItems property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMenuItems(VisibleElementsMenuItems? value)
    {
#pragma warning disable BL0005
        MenuItems = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MenuItems)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "menuItems", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Progress property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetProgress(bool? value)
    {
#pragma warning disable BL0005
        Progress = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Progress)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "progress", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectionColumn property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectionColumn(bool? value)
    {
#pragma warning disable BL0005
        SelectionColumn = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectionColumn)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selectionColumn", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Tooltips property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTooltips(bool? value)
    {
#pragma warning disable BL0005
        Tooltips = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Tooltips)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tooltips", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case VisibleElementsColumnMenuItems columnMenuItems:
                if (columnMenuItems != ColumnMenuItems)
                {
                    ColumnMenuItems = columnMenuItems;
                    
                    ModifiedParameters[nameof(ColumnMenuItems)] = ColumnMenuItems;
                }
                
                return true;
            case VisibleElementsMenuItems menuItems:
                if (menuItems != MenuItems)
                {
                    MenuItems = menuItems;
                    
                    ModifiedParameters[nameof(MenuItems)] = MenuItems;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case VisibleElementsColumnMenuItems _:
                ColumnMenuItems = null;
                
                ModifiedParameters[nameof(ColumnMenuItems)] = ColumnMenuItems;
                return true;
            case VisibleElementsMenuItems _:
                MenuItems = null;
                
                ModifiedParameters[nameof(MenuItems)] = MenuItems;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ColumnMenuItems?.ValidateRequiredGeneratedChildren();
        MenuItems?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
