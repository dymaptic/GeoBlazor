// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The result of an on-the-fly join operation at runtime.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class JoinTableDataSource : IDynamicDataLayerDataSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public JoinTableDataSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="leftTableKey">
    ///     The field name used for joining or matching records in the left table to records in the right table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rightTableKey">
    ///     The field name used for joining or matching records in the right table to records in the left table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="joinType">
    ///     The type of join that will be performed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="leftTableSource">
    ///     The left table for joining to the right table source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rightTableSource">
    ///     The right table for joining to the left table source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public JoinTableDataSource(
        string leftTableKey,
        string rightTableKey,
        DynamicJoinType joinType,
        DynamicLayer leftTableSource,
        DynamicLayer rightTableSource)
    {
        AllowRender = false;
#pragma warning disable BL0005
        LeftTableKey = leftTableKey;
        RightTableKey = rightTableKey;
        JoinType = joinType;
        LeftTableSource = leftTableSource;
        RightTableSource = rightTableSource;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The left table for joining to the right table source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DynamicLayer? LeftTableSource { get; set; }
    
    /// <summary>
    ///     The right table for joining to the left table source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DynamicLayer? RightTableSource { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the JoinType property.
    /// </summary>
    public async Task<DynamicJoinType?> GetJoinType()
    {
        if (CoreJsModule is null)
        {
            return JoinType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return JoinType;
        }

        // get the property value
        JsNullableEnumWrapper<DynamicJoinType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<DynamicJoinType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "joinType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             JoinType = (DynamicJoinType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(JoinType)] = JoinType;
        }
         
        return JoinType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LeftTableKey property.
    /// </summary>
    public async Task<string?> GetLeftTableKey()
    {
        if (CoreJsModule is null)
        {
            return LeftTableKey;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LeftTableKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "leftTableKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             LeftTableKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LeftTableKey)] = LeftTableKey;
        }
         
        return LeftTableKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LeftTableSource property.
    /// </summary>
    public async Task<DynamicLayer?> GetLeftTableSource()
    {
        if (CoreJsModule is null)
        {
            return LeftTableSource;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LeftTableSource;
        }

        // get the property value
        DynamicLayer? result = await JsComponentReference!.InvokeAsync<DynamicLayer?>("getProperty",
            CancellationTokenSource.Token, "leftTableSource");
        if (result is not null)
        {
#pragma warning disable BL0005
             LeftTableSource = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LeftTableSource)] = LeftTableSource;
        }
         
        return LeftTableSource;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RightTableKey property.
    /// </summary>
    public async Task<string?> GetRightTableKey()
    {
        if (CoreJsModule is null)
        {
            return RightTableKey;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RightTableKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "rightTableKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             RightTableKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RightTableKey)] = RightTableKey;
        }
         
        return RightTableKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RightTableSource property.
    /// </summary>
    public async Task<DynamicLayer?> GetRightTableSource()
    {
        if (CoreJsModule is null)
        {
            return RightTableSource;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RightTableSource;
        }

        // get the property value
        DynamicLayer? result = await JsComponentReference!.InvokeAsync<DynamicLayer?>("getProperty",
            CancellationTokenSource.Token, "rightTableSource");
        if (result is not null)
        {
#pragma warning disable BL0005
             RightTableSource = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RightTableSource)] = RightTableSource;
        }
         
        return RightTableSource;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the JoinType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetJoinType(DynamicJoinType value)
    {
#pragma warning disable BL0005
        JoinType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(JoinType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "joinType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LeftTableKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLeftTableKey(string value)
    {
#pragma warning disable BL0005
        LeftTableKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LeftTableKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "leftTableKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LeftTableSource property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLeftTableSource(DynamicLayer value)
    {
#pragma warning disable BL0005
        LeftTableSource = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LeftTableSource)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "leftTableSource", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RightTableKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRightTableKey(string value)
    {
#pragma warning disable BL0005
        RightTableKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RightTableKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rightTableKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RightTableSource property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRightTableSource(DynamicLayer value)
    {
#pragma warning disable BL0005
        RightTableSource = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RightTableSource)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rightTableSource", value);
    }
    
#endregion

}
