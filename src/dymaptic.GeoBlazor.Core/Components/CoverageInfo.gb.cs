// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Coverage information associated with a WCS service.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoverageInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoverageInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="bandNames">
    ///     Coverage band names.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="coverageDescription">
    ///     Coverage description for different versions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="coverageId">
    ///     Service coverage id.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     Service coverage description.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lonLatEnvelope">
    ///     Spatial extent of the coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rasterInfo">
    ///     Coverage raster info.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportedFormats">
    ///     Formats supported by a service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportedInterpolations">
    ///     Interpolation supported by a service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     Service coverage title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useEPSGAxis">
    ///     Indicates if the EPSG axis is used.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="version">
    ///     The service version.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoverageInfo(
        IReadOnlyList<string>? bandNames = null,
        ICoverageInfoCoverageDescription? coverageDescription = null,
        string? coverageId = null,
        string? description = null,
        Extent? lonLatEnvelope = null,
        RasterInfo? rasterInfo = null,
        IReadOnlyList<string>? supportedFormats = null,
        IReadOnlyList<SupportedInterpolations>? supportedInterpolations = null,
        string? title = null,
        bool? useEPSGAxis = null,
        CoverageInfoVersion? version = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        BandNames = bandNames;
        CoverageDescription = coverageDescription;
        CoverageId = coverageId;
        Description = description;
        LonLatEnvelope = lonLatEnvelope;
        RasterInfo = rasterInfo;
        SupportedFormats = supportedFormats;
        SupportedInterpolations = supportedInterpolations;
        Title = title;
        UseEPSGAxis = useEPSGAxis;
        Version = version;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Coverage band names.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? BandNames { get; set; }
    
    /// <summary>
    ///     Coverage description for different versions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ICoverageInfoCoverageDescription? CoverageDescription { get; set; }
    
    /// <summary>
    ///     Service coverage id.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? CoverageId { get; set; }
    
    /// <summary>
    ///     Service coverage description.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; set; }
    
    /// <summary>
    ///     Spatial extent of the coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? LonLatEnvelope { get; set; }
    
    /// <summary>
    ///     Coverage raster info.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RasterInfo? RasterInfo { get; set; }
    
    /// <summary>
    ///     Formats supported by a service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? SupportedFormats { get; set; }
    
    /// <summary>
    ///     Interpolation supported by a service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SupportedInterpolations>? SupportedInterpolations { get; set; }
    
    /// <summary>
    ///     Service coverage title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     Indicates if the EPSG axis is used.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UseEPSGAxis { get; set; }
    
    /// <summary>
    ///     The service version.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageInfoVersion? Version { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BandNames property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetBandNames()
    {
        if (CoreJsModule is null)
        {
            return BandNames;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BandNames;
        }

        // get the property value
#pragma warning disable BL0005
        BandNames = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "bandNames");
#pragma warning restore BL0005
         ModifiedParameters[nameof(BandNames)] = BandNames;
        return BandNames;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CoverageDescription property.
    /// </summary>
    public async Task<ICoverageInfoCoverageDescription?> GetCoverageDescription()
    {
        if (CoreJsModule is null)
        {
            return CoverageDescription;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CoverageDescription;
        }

        // get the property value
#pragma warning disable BL0005
        CoverageDescription = await CoreJsModule!.InvokeAsync<ICoverageInfoCoverageDescription?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "coverageDescription");
#pragma warning restore BL0005
         ModifiedParameters[nameof(CoverageDescription)] = CoverageDescription;
        return CoverageDescription;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CoverageId property.
    /// </summary>
    public async Task<string?> GetCoverageId()
    {
        if (CoreJsModule is null)
        {
            return CoverageId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CoverageId;
        }

        // get the property value
#pragma warning disable BL0005
        CoverageId = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "coverageId");
#pragma warning restore BL0005
         ModifiedParameters[nameof(CoverageId)] = CoverageId;
        return CoverageId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<string?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
#pragma warning disable BL0005
        Description = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "description");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Description)] = Description;
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LonLatEnvelope property.
    /// </summary>
    public async Task<Extent?> GetLonLatEnvelope()
    {
        if (CoreJsModule is null)
        {
            return LonLatEnvelope;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LonLatEnvelope;
        }

        // get the property value
#pragma warning disable BL0005
        LonLatEnvelope = await CoreJsModule!.InvokeAsync<Extent?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "lonLatEnvelope");
#pragma warning restore BL0005
         ModifiedParameters[nameof(LonLatEnvelope)] = LonLatEnvelope;
        return LonLatEnvelope;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RasterInfo property.
    /// </summary>
    public async Task<RasterInfo?> GetRasterInfo()
    {
        if (CoreJsModule is null)
        {
            return RasterInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RasterInfo;
        }

        // get the property value
#pragma warning disable BL0005
        RasterInfo = await CoreJsModule!.InvokeAsync<RasterInfo?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "rasterInfo");
#pragma warning restore BL0005
         ModifiedParameters[nameof(RasterInfo)] = RasterInfo;
        return RasterInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportedFormats property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetSupportedFormats()
    {
        if (CoreJsModule is null)
        {
            return SupportedFormats;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SupportedFormats;
        }

        // get the property value
#pragma warning disable BL0005
        SupportedFormats = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportedFormats");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SupportedFormats)] = SupportedFormats;
        return SupportedFormats;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportedInterpolations property.
    /// </summary>
    public async Task<IReadOnlyList<SupportedInterpolations>?> GetSupportedInterpolations()
    {
        if (CoreJsModule is null)
        {
            return SupportedInterpolations;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SupportedInterpolations;
        }

        // get the property value
#pragma warning disable BL0005
        SupportedInterpolations = await CoreJsModule!.InvokeAsync<IReadOnlyList<SupportedInterpolations>>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportedInterpolations");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SupportedInterpolations)] = SupportedInterpolations;
        return SupportedInterpolations;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
#pragma warning disable BL0005
        Title = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "title");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Title)] = Title;
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseEPSGAxis property.
    /// </summary>
    public async Task<bool?> GetUseEPSGAxis()
    {
        if (CoreJsModule is null)
        {
            return UseEPSGAxis;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return UseEPSGAxis;
        }

        // get the property value
#pragma warning disable BL0005
        UseEPSGAxis = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "useEPSGAxis");
#pragma warning restore BL0005
         ModifiedParameters[nameof(UseEPSGAxis)] = UseEPSGAxis;
        return UseEPSGAxis;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Version property.
    /// </summary>
    public async Task<CoverageInfoVersion?> GetVersion()
    {
        if (CoreJsModule is null)
        {
            return Version;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Version;
        }

        // get the property value
#pragma warning disable BL0005
        Version = await CoreJsModule!.InvokeAsync<CoverageInfoVersion>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "version");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Version)] = Version;
        return Version;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BandNames property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBandNames(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        BandNames = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BandNames)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bandNames", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CoverageDescription property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCoverageDescription(ICoverageInfoCoverageDescription value)
    {
#pragma warning disable BL0005
        CoverageDescription = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CoverageDescription)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "coverageDescription", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CoverageId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCoverageId(string value)
    {
#pragma warning disable BL0005
        CoverageId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CoverageId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "coverageId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(string value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LonLatEnvelope property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLonLatEnvelope(Extent value)
    {
#pragma warning disable BL0005
        LonLatEnvelope = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LonLatEnvelope)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lonLatEnvelope", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RasterInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRasterInfo(RasterInfo value)
    {
#pragma warning disable BL0005
        RasterInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RasterInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rasterInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportedFormats property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportedFormats(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        SupportedFormats = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportedFormats)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportedFormats", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportedInterpolations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportedInterpolations(IReadOnlyList<SupportedInterpolations> value)
    {
#pragma warning disable BL0005
        SupportedInterpolations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportedInterpolations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportedInterpolations", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseEPSGAxis property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseEPSGAxis(bool value)
    {
#pragma warning disable BL0005
        UseEPSGAxis = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseEPSGAxis)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useEPSGAxis", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Version property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVersion(CoverageInfoVersion value)
    {
#pragma warning disable BL0005
        Version = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Version)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "version", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the BandNames property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBandNames(params string[] values)
    {
        string[] join = BandNames is null
            ? values
            : [..BandNames, ..values];
        await SetBandNames(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the SupportedFormats property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSupportedFormats(params string[] values)
    {
        string[] join = SupportedFormats is null
            ? values
            : [..SupportedFormats, ..values];
        await SetSupportedFormats(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the SupportedInterpolations property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSupportedInterpolations(params SupportedInterpolations[] values)
    {
        SupportedInterpolations[] join = SupportedInterpolations is null
            ? values
            : [..SupportedInterpolations, ..values];
        await SetSupportedInterpolations(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the BandNames property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBandNames(params string[] values)
    {
        if (BandNames is null)
        {
            return;
        }
        await SetBandNames(BandNames.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the SupportedFormats property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSupportedFormats(params string[] values)
    {
        if (SupportedFormats is null)
        {
            return;
        }
        await SetSupportedFormats(SupportedFormats.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the SupportedInterpolations property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSupportedInterpolations(params SupportedInterpolations[] values)
    {
        if (SupportedInterpolations is null)
        {
            return;
        }
        await SetSupportedInterpolations(SupportedInterpolations.Except(values).ToArray());
    }
    
#endregion





    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case RasterInfo rasterInfo:
                if (rasterInfo != RasterInfo)
                {
                    RasterInfo = rasterInfo;
                    
                    ModifiedParameters[nameof(RasterInfo)] = RasterInfo;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case RasterInfo _:
                RasterInfo = null;
                
                ModifiedParameters[nameof(RasterInfo)] = RasterInfo;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        RasterInfo?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
