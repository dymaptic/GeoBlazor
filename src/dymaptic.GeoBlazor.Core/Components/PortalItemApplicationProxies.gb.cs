// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Contains an array of objects containing proxy information for premium platform services.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PortalItemApplicationProxies : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PortalItemApplicationProxies()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="proxyId">
    ///     The proxy ID registered in ArcGIS Online or ArcGIS Enterprise Portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="proxyUrl">
    ///     The proxy URL for the source URL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sourceUrl">
    ///     The URL of the premium map service layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PortalItemApplicationProxies(
        string? proxyId = null,
        string? proxyUrl = null,
        string? sourceUrl = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ProxyId = proxyId;
        ProxyUrl = proxyUrl;
        SourceUrl = sourceUrl;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The proxy ID registered in ArcGIS Online or ArcGIS Enterprise Portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ProxyId { get; set; }
    
    /// <summary>
    ///     The proxy URL for the source URL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ProxyUrl { get; set; }
    
    /// <summary>
    ///     The URL of the premium map service layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SourceUrl { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ProxyId property.
    /// </summary>
    public async Task<string?> GetProxyId()
    {
        if (CoreJsModule is null)
        {
            return ProxyId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ProxyId;
        }

        // get the property value
#pragma warning disable BL0005
        ProxyId = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "proxyId");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ProxyId)] = ProxyId;
        return ProxyId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ProxyUrl property.
    /// </summary>
    public async Task<string?> GetProxyUrl()
    {
        if (CoreJsModule is null)
        {
            return ProxyUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ProxyUrl;
        }

        // get the property value
#pragma warning disable BL0005
        ProxyUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "proxyUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ProxyUrl)] = ProxyUrl;
        return ProxyUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceUrl property.
    /// </summary>
    public async Task<string?> GetSourceUrl()
    {
        if (CoreJsModule is null)
        {
            return SourceUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SourceUrl;
        }

        // get the property value
#pragma warning disable BL0005
        SourceUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sourceUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SourceUrl)] = SourceUrl;
        return SourceUrl;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ProxyId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetProxyId(string value)
    {
#pragma warning disable BL0005
        ProxyId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ProxyId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "proxyId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ProxyUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetProxyUrl(string value)
    {
#pragma warning disable BL0005
        ProxyUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ProxyUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "proxyUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SourceUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSourceUrl(string value)
    {
#pragma warning disable BL0005
        SourceUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SourceUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sourceUrl", value);
    }
    
#endregion




}
