// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A mesh transform.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshTransform : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshTransform()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="rotationAngle">
    ///     Rotation angle in degrees.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#rotationAngle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotationAxis">
    ///     Axis of rotation.
    ///     default [0, 0, 1]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#rotationAxis">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="scale">
    ///     Scale.
    ///     default [1, 1, 1]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#scale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="translation">
    ///     Translation.
    ///     default [0, 0, 0]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#translation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshTransform(
        double? rotationAngle = null,
        IReadOnlyList<double>? rotationAxis = null,
        IReadOnlyList<double>? scale = null,
        IReadOnlyList<double>? translation = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        RotationAngle = rotationAngle;
        RotationAxis = rotationAxis;
        Scale = scale;
        Translation = translation;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Rotation angle in degrees.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#rotationAngle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? RotationAngle { get; set; }
    
    /// <summary>
    ///     Axis of rotation.
    ///     default [0, 0, 1]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#rotationAxis">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? RotationAxis { get; set; }
    
    /// <summary>
    ///     Scale.
    ///     default [1, 1, 1]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#scale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Scale { get; set; }
    
    /// <summary>
    ///     Translation.
    ///     default [0, 0, 0]
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#translation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Translation { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the RotationAngle property.
    /// </summary>
    public async Task<double?> GetRotationAngle()
    {
        if (CoreJsModule is null)
        {
            return RotationAngle;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RotationAngle;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotationAngle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RotationAngle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RotationAngle)] = RotationAngle;
        }
         
        return RotationAngle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RotationAxis property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetRotationAxis()
    {
        if (CoreJsModule is null)
        {
            return RotationAxis;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RotationAxis;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "rotationAxis");
        if (result is not null)
        {
#pragma warning disable BL0005
             RotationAxis = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RotationAxis)] = RotationAxis;
        }
         
        return RotationAxis;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Scale property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetScale()
    {
        if (CoreJsModule is null)
        {
            return Scale;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Scale;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "scale");
        if (result is not null)
        {
#pragma warning disable BL0005
             Scale = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Scale)] = Scale;
        }
         
        return Scale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Translation property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetTranslation()
    {
        if (CoreJsModule is null)
        {
            return Translation;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Translation;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "translation");
        if (result is not null)
        {
#pragma warning disable BL0005
             Translation = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Translation)] = Translation;
        }
         
        return Translation;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the RotationAngle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotationAngle(double? value)
    {
#pragma warning disable BL0005
        RotationAngle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RotationAngle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotationAngle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RotationAxis property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotationAxis(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        RotationAxis = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RotationAxis)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotationAxis", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Scale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScale(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Scale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Scale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "scale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Translation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTranslation(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Translation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Translation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "translation", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the RotationAxis property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToRotationAxis(params double[] values)
    {
        double[] join = RotationAxis is null
            ? values
            : [..RotationAxis, ..values];
        await SetRotationAxis(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Scale property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToScale(params double[] values)
    {
        double[] join = Scale is null
            ? values
            : [..Scale, ..values];
        await SetScale(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Translation property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTranslation(params double[] values)
    {
        double[] join = Translation is null
            ? values
            : [..Translation, ..values];
        await SetTranslation(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the RotationAxis property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromRotationAxis(params double[] values)
    {
        if (RotationAxis is null)
        {
            return;
        }
        await SetRotationAxis(RotationAxis.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Scale property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromScale(params double[] values)
    {
        if (Scale is null)
        {
            return;
        }
        await SetScale(Scale.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Translation property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTranslation(params double[] values)
    {
        if (Translation is null)
        {
            return;
        }
        await SetTranslation(Translation.Except(values).ToArray());
    }
    
#endregion

}
