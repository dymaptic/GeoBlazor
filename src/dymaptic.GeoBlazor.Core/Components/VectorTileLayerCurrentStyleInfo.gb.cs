// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The current style information of the VectorTileLayer.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VectorTileLayerCurrentStyleInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VectorTileLayerCurrentStyleInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="glyphsUrl">
    ///     Absolute template URL for font sets included in a style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerDefinition">
    ///     Vector tile service information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="serviceUrl">
    ///     Absolute URL for a vector tile service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spriteUrl">
    ///     Absolute URL for sprites included in a style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="style">
    ///     Style JSON object for vector tiles.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="styleUrl">
    ///     Absolute URL for vector tile service style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VectorTileLayerCurrentStyleInfo(
        string? glyphsUrl = null,
        string? layerDefinition = null,
        string? serviceUrl = null,
        string? spriteUrl = null,
        string? style = null,
        string? styleUrl = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        GlyphsUrl = glyphsUrl;
        LayerDefinition = layerDefinition;
        ServiceUrl = serviceUrl;
        SpriteUrl = spriteUrl;
        Style = style;
        StyleUrl = styleUrl;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Absolute template URL for font sets included in a style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? GlyphsUrl { get; set; }
    
    /// <summary>
    ///     Vector tile service information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? LayerDefinition { get; set; }
    
    /// <summary>
    ///     Absolute URL for a vector tile service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ServiceUrl { get; set; }
    
    /// <summary>
    ///     Absolute URL for sprites included in a style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SpriteUrl { get; set; }
    
    /// <summary>
    ///     Style JSON object for vector tiles.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Style { get; set; }
    
    /// <summary>
    ///     Absolute URL for vector tile service style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#currentStyleInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StyleUrl { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the GlyphsUrl property.
    /// </summary>
    public async Task<string?> GetGlyphsUrl()
    {
        if (CoreJsModule is null)
        {
            return GlyphsUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return GlyphsUrl;
        }

        // get the property value
#pragma warning disable BL0005
        GlyphsUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "glyphsUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(GlyphsUrl)] = GlyphsUrl;
        return GlyphsUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerDefinition property.
    /// </summary>
    public async Task<string?> GetLayerDefinition()
    {
        if (CoreJsModule is null)
        {
            return LayerDefinition;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LayerDefinition;
        }

        // get the property value
#pragma warning disable BL0005
        LayerDefinition = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "layerDefinition");
#pragma warning restore BL0005
         ModifiedParameters[nameof(LayerDefinition)] = LayerDefinition;
        return LayerDefinition;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceUrl property.
    /// </summary>
    public async Task<string?> GetServiceUrl()
    {
        if (CoreJsModule is null)
        {
            return ServiceUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ServiceUrl;
        }

        // get the property value
#pragma warning disable BL0005
        ServiceUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "serviceUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ServiceUrl)] = ServiceUrl;
        return ServiceUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpriteUrl property.
    /// </summary>
    public async Task<string?> GetSpriteUrl()
    {
        if (CoreJsModule is null)
        {
            return SpriteUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SpriteUrl;
        }

        // get the property value
#pragma warning disable BL0005
        SpriteUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "spriteUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SpriteUrl)] = SpriteUrl;
        return SpriteUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Style property.
    /// </summary>
    public async Task<string?> GetStyle()
    {
        if (CoreJsModule is null)
        {
            return Style;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Style;
        }

        // get the property value
#pragma warning disable BL0005
        Style = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "style");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Style)] = Style;
        return Style;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StyleUrl property.
    /// </summary>
    public async Task<string?> GetStyleUrl()
    {
        if (CoreJsModule is null)
        {
            return StyleUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return StyleUrl;
        }

        // get the property value
#pragma warning disable BL0005
        StyleUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "styleUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(StyleUrl)] = StyleUrl;
        return StyleUrl;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the GlyphsUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGlyphsUrl(string value)
    {
#pragma warning disable BL0005
        GlyphsUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GlyphsUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "glyphsUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerDefinition property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerDefinition(string value)
    {
#pragma warning disable BL0005
        LayerDefinition = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerDefinition)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerDefinition", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ServiceUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetServiceUrl(string value)
    {
#pragma warning disable BL0005
        ServiceUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ServiceUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "serviceUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpriteUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpriteUrl(string value)
    {
#pragma warning disable BL0005
        SpriteUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpriteUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spriteUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Style property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyle(string value)
    {
#pragma warning disable BL0005
        Style = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Style)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "style", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StyleUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyleUrl(string value)
    {
#pragma warning disable BL0005
        StyleUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StyleUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "styleUrl", value);
    }
    
#endregion




}
