// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle.html">BasemapToggle</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BasemapToggleViewModel : MapComponent,
    IViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BasemapToggleViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="nextBasemap">
    ///     The next basemap for toggling.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#nextBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public BasemapToggleViewModel(
        Basemap? nextBasemap = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        NextBasemap = nextBasemap;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The map's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap">basemap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#activeBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Basemap? ActiveBasemap { get; protected set; }
    
    /// <summary>
    ///     The next basemap for toggling.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#nextBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? NextBasemap { get; set; }
    
    /// <summary>
    ///     The view model's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public State? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveBasemap property.
    /// </summary>
    public async Task<Basemap?> GetActiveBasemap()
    {
        if (CoreJsModule is null)
        {
            return ActiveBasemap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ActiveBasemap;
        }

        Basemap? result = await JsComponentReference.InvokeAsync<Basemap?>(
            "getActiveBasemap", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ActiveBasemap is not null)
            {
                result.Id = ActiveBasemap.Id;
            }
            
#pragma warning disable BL0005
            ActiveBasemap = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ActiveBasemap)] = ActiveBasemap;
        }
        
        return ActiveBasemap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NextBasemap property.
    /// </summary>
    public async Task<Basemap?> GetNextBasemap()
    {
        if (CoreJsModule is null)
        {
            return NextBasemap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NextBasemap;
        }

        Basemap? result = await JsComponentReference.InvokeAsync<Basemap?>(
            "getNextBasemap", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (NextBasemap is not null)
            {
                result.Id = NextBasemap.Id;
            }
            
#pragma warning disable BL0005
            NextBasemap = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(NextBasemap)] = NextBasemap;
        }
        
        return NextBasemap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<State?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<State>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<State>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (State)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the NextBasemap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNextBasemap(Basemap? value)
    {
#pragma warning disable BL0005
        NextBasemap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NextBasemap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setNextBasemap", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Helper method to find a basemap's thumbnail URL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#getThumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="basemap">
    ///     The basemap used to retrieve the thumbnail URL.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetThumbnailUrl(Basemap basemap)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getThumbnailUrl", 
            CancellationTokenSource.Token,
            basemap);
    }
    
    /// <summary>
    ///     Toggles to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#nextBasemap">next basemap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle-BasemapToggleViewModel.html#toggle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<string?> Toggle()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "toggle", 
            CancellationTokenSource.Token);
    }
    
#endregion

}
