// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Describes what attachment capabilities are enabled on the layer.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CapabilitiesAttachment : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CapabilitiesAttachment()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="supportsCacheHint">
    ///     Indicates if the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">attachment operations</a> support a cache hint.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsContentType">
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their content types.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsExifInfo">
    ///     Indicates if the attachment <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queries</a> support `exifInfo`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsKeywords">
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their keywords.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsName">
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their names.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsResize">
    ///     Indicates if resized attachments are supported in the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsSize">
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their sizes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CapabilitiesAttachment(
        bool? supportsCacheHint = null,
        bool? supportsContentType = null,
        bool? supportsExifInfo = null,
        bool? supportsKeywords = null,
        bool? supportsName = null,
        bool? supportsResize = null,
        bool? supportsSize = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        SupportsCacheHint = supportsCacheHint;
        SupportsContentType = supportsContentType;
        SupportsExifInfo = supportsExifInfo;
        SupportsKeywords = supportsKeywords;
        SupportsName = supportsName;
        SupportsResize = supportsResize;
        SupportsSize = supportsSize;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates if the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">attachment operations</a> support a cache hint.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsCacheHint { get; set; }
    
    /// <summary>
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their content types.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsContentType { get; set; }
    
    /// <summary>
    ///     Indicates if the attachment <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queries</a> support `exifInfo`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsExifInfo { get; set; }
    
    /// <summary>
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their keywords.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsKeywords { get; set; }
    
    /// <summary>
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their names.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsName { get; set; }
    
    /// <summary>
    ///     Indicates if resized attachments are supported in the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsResize { get; set; }
    
    /// <summary>
    ///     Indicates if the attachments can be <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-AttachmentQuery.html">queried</a> by their sizes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsSize { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsCacheHint property.
    /// </summary>
    public async Task<bool?> GetSupportsCacheHint()
    {
        if (CoreJsModule is null)
        {
            return SupportsCacheHint;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsCacheHint;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsCacheHint");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsCacheHint = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsCacheHint)] = SupportsCacheHint;
        }
         
        return SupportsCacheHint;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsContentType property.
    /// </summary>
    public async Task<bool?> GetSupportsContentType()
    {
        if (CoreJsModule is null)
        {
            return SupportsContentType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsContentType;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsContentType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsContentType = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsContentType)] = SupportsContentType;
        }
         
        return SupportsContentType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsExifInfo property.
    /// </summary>
    public async Task<bool?> GetSupportsExifInfo()
    {
        if (CoreJsModule is null)
        {
            return SupportsExifInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsExifInfo;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsExifInfo");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsExifInfo = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsExifInfo)] = SupportsExifInfo;
        }
         
        return SupportsExifInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsKeywords property.
    /// </summary>
    public async Task<bool?> GetSupportsKeywords()
    {
        if (CoreJsModule is null)
        {
            return SupportsKeywords;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsKeywords;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsKeywords");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsKeywords = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsKeywords)] = SupportsKeywords;
        }
         
        return SupportsKeywords;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsName property.
    /// </summary>
    public async Task<bool?> GetSupportsName()
    {
        if (CoreJsModule is null)
        {
            return SupportsName;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsName;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsName");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsName = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsName)] = SupportsName;
        }
         
        return SupportsName;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsResize property.
    /// </summary>
    public async Task<bool?> GetSupportsResize()
    {
        if (CoreJsModule is null)
        {
            return SupportsResize;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsResize;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsResize");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsResize = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsResize)] = SupportsResize;
        }
         
        return SupportsResize;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsSize property.
    /// </summary>
    public async Task<bool?> GetSupportsSize()
    {
        if (CoreJsModule is null)
        {
            return SupportsSize;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsSize;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsSize");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsSize = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsSize)] = SupportsSize;
        }
         
        return SupportsSize;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the SupportsCacheHint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsCacheHint(bool? value)
    {
#pragma warning disable BL0005
        SupportsCacheHint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsCacheHint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsCacheHint", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsContentType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsContentType(bool? value)
    {
#pragma warning disable BL0005
        SupportsContentType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsContentType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsContentType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsExifInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsExifInfo(bool? value)
    {
#pragma warning disable BL0005
        SupportsExifInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsExifInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsExifInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsKeywords property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsKeywords(bool? value)
    {
#pragma warning disable BL0005
        SupportsKeywords = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsKeywords)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsKeywords", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsName property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsName(bool? value)
    {
#pragma warning disable BL0005
        SupportsName = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsName)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsName", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsResize property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsResize(bool? value)
    {
#pragma warning disable BL0005
        SupportsResize = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsResize)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsResize", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsSize property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsSize(bool? value)
    {
#pragma warning disable BL0005
        SupportsSize = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsSize)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsSize", value);
    }
    
#endregion

}
