// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Search.html">GeoBlazor Docs</a>
///     Represents the search parameters set within the web scene or the web map.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Search : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Search()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="addressSearchEnabled">
    ///     Indicates whether the place finder is enabled in the web scene or the web map.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#addressSearchEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="enabled">
    ///     Whether search functionality is enabled in the web scene or the web map.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#enabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hintText">
    ///     The hint provided with the search dialog.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#hintText">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layers">
    ///     A collection of layers to be included in search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#layers">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tables">
    ///     A collection of tables to be included in search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#tables">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Search(
        bool? addressSearchEnabled = null,
        bool? enabled = null,
        string? hintText = null,
        IReadOnlyList<SearchLayer>? layers = null,
        IReadOnlyList<SearchTable>? tables = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AddressSearchEnabled = addressSearchEnabled;
        Enabled = enabled;
        HintText = hintText;
        Layers = layers;
        Tables = tables;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether the place finder is enabled in the web scene or the web map.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#addressSearchEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AddressSearchEnabled { get; set; }
    
    /// <summary>
    ///     Whether search functionality is enabled in the web scene or the web map.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#enabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Enabled { get; set; }
    
    /// <summary>
    ///     The hint provided with the search dialog.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#hintText">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? HintText { get; set; }
    
    /// <summary>
    ///     A collection of layers to be included in search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#layers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SearchLayer>? Layers { get; set; }
    
    /// <summary>
    ///     A collection of tables to be included in search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-Search.html#tables">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SearchTable>? Tables { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AddressSearchEnabled property.
    /// </summary>
    public async Task<bool?> GetAddressSearchEnabled()
    {
        if (CoreJsModule is null)
        {
            return AddressSearchEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AddressSearchEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "addressSearchEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AddressSearchEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AddressSearchEnabled)] = AddressSearchEnabled;
        }
         
        return AddressSearchEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Enabled property.
    /// </summary>
    public async Task<bool?> GetEnabled()
    {
        if (CoreJsModule is null)
        {
            return Enabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Enabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "enabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Enabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Enabled)] = Enabled;
        }
         
        return Enabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HintText property.
    /// </summary>
    public async Task<string?> GetHintText()
    {
        if (CoreJsModule is null)
        {
            return HintText;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HintText;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "hintText");
        if (result is not null)
        {
#pragma warning disable BL0005
             HintText = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HintText)] = HintText;
        }
         
        return HintText;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Layers property.
    /// </summary>
    public async Task<IReadOnlyList<SearchLayer>?> GetLayers()
    {
        if (CoreJsModule is null)
        {
            return Layers;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Layers;
        }

        IReadOnlyList<SearchLayer>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<SearchLayer>?>(
            "getLayers", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Layers = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Layers)] = Layers;
        }
        
        return Layers;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Tables property.
    /// </summary>
    public async Task<IReadOnlyList<SearchTable>?> GetTables()
    {
        if (CoreJsModule is null)
        {
            return Tables;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Tables;
        }

        IReadOnlyList<SearchTable>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<SearchTable>?>(
            "getTables", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Tables = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Tables)] = Tables;
        }
        
        return Tables;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AddressSearchEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAddressSearchEnabled(bool? value)
    {
#pragma warning disable BL0005
        AddressSearchEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AddressSearchEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "addressSearchEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Enabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnabled(bool? value)
    {
#pragma warning disable BL0005
        Enabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Enabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "enabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HintText property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHintText(string? value)
    {
#pragma warning disable BL0005
        HintText = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HintText)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hintText", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Layers property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayers(IReadOnlyList<SearchLayer>? value)
    {
        if (value is not null)
        {
            foreach (SearchLayer item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Layers = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Layers)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layers", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Tables property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTables(IReadOnlyList<SearchTable>? value)
    {
        if (value is not null)
        {
            foreach (SearchTable item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Tables = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Tables)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tables", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Layers property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToLayers(params SearchLayer[] values)
    {
        SearchLayer[] join = Layers is null
            ? values
            : [..Layers, ..values];
        await SetLayers(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Tables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTables(params SearchTable[] values)
    {
        SearchTable[] join = Tables is null
            ? values
            : [..Tables, ..values];
        await SetTables(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Layers property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromLayers(params SearchLayer[] values)
    {
        if (Layers is null)
        {
            return;
        }
        await SetLayers(Layers.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Tables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTables(params SearchTable[] values)
    {
        if (Tables is null)
        {
            return;
        }
        await SetTables(Tables.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SearchLayer layers:
                Layers ??= [];
                if (!Layers.Contains(layers))
                {
                    Layers = [..Layers, layers];
                    
                    ModifiedParameters[nameof(Layers)] = Layers;
                }
                
                return true;
            case SearchTable tables:
                Tables ??= [];
                if (!Tables.Contains(tables))
                {
                    Tables = [..Tables, tables];
                    
                    ModifiedParameters[nameof(Tables)] = Tables;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SearchLayer layers:
                Layers = Layers?.Where(l => l != layers).ToList();
                
                ModifiedParameters[nameof(Layers)] = Layers;
                return true;
            case SearchTable tables:
                Tables = Tables?.Where(t => t != tables).ToList();
                
                ModifiedParameters[nameof(Tables)] = Tables;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Layers is not null)
        {
            foreach (SearchLayer child in Layers)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        if (Tables is not null)
        {
            foreach (SearchTable child in Tables)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
