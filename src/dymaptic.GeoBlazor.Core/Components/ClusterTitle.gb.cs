// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.ClusterTitle.html">GeoBlazor Docs</a>
///     Describes the schema of the ClusterTitle element.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#ClusterTitle">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ClusterTitle : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ClusterTitle()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="showCount">
    /// </param>
    public ClusterTitle(
        bool? showCount = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ShowCount = showCount;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.ClusterTitle.html#clustertitleshowcount-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ShowCount { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ShowCount property.
    /// </summary>
    public async Task<bool?> GetShowCount()
    {
        if (CoreJsModule is null)
        {
            return ShowCount;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ShowCount;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "showCount");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ShowCount = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ShowCount)] = ShowCount;
        }
         
        return ShowCount;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ShowCount property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetShowCount(bool? value)
    {
#pragma warning disable BL0005
        ShowCount = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ShowCount)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "showCount", value);
    }
    
#endregion

}
