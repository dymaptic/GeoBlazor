// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListWidgetVisibleElements.html">GeoBlazor Docs</a>
///     The visible elements that are displayed within the widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BasemapLayerListWidgetVisibleElements
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BasemapLayerListWidgetVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="baseLayers">
    ///     Indicates whether to the base layers will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="closeButton">
    ///     Since 4.29 Indicates whether to display a close button in the header.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="collapseButton">
    ///     Since 4.29 Indicates whether to display a collapse button in the header.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="editTitleButton">
    ///     Since 4.29 Indicates whether to display a button in the header to edit the basemap title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="errors">
    ///     Since 4.25 Indicates whether layer load errors will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     Since 4.29 Indicates whether to display a filter input box when then number of list items is equal to or greater than the value set in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#minFilterItems">minFilterItems</a>, allowing users to filter layers by their title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="flow">
    ///     Since 4.29 Determines whether the widget should be shown within its built-in <a target="_blank" href="https://developers.arcgis.com/calcite-design-system/components/flow/">flow component</a> or if the flow component should be excluded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="heading">
    ///     Since 4.29 Indicates whether the widget displays a heading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="referenceLayers">
    ///     Indicates whether to the reference layers will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="statusIndicators">
    ///     Indicates whether the status indicators will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="temporaryLayerIndicators">
    ///     Since 4.29 Indicates whether temporary layer indicators will be displayed for layers with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled">layer.persistenceEnabled</a> set to `false`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public BasemapLayerListWidgetVisibleElements(
        bool? baseLayers = null,
        bool? closeButton = null,
        bool? collapseButton = null,
        bool? editTitleButton = null,
        bool? errors = null,
        bool? filter = null,
        bool? flow = null,
        bool? heading = null,
        bool? referenceLayers = null,
        bool? statusIndicators = null,
        bool? temporaryLayerIndicators = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        BaseLayers = baseLayers;
        CloseButton = closeButton;
        CollapseButton = collapseButton;
        EditTitleButton = editTitleButton;
        Errors = errors;
        Filter = filter;
        Flow = flow;
        Heading = heading;
        ReferenceLayers = referenceLayers;
        StatusIndicators = statusIndicators;
        TemporaryLayerIndicators = temporaryLayerIndicators;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Since 4.29 Indicates whether to display a close button in the header.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CloseButton { get; set; }
    
    /// <summary>
    ///     Since 4.29 Indicates whether to display a collapse button in the header.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CollapseButton { get; set; }
    
    /// <summary>
    ///     Since 4.29 Indicates whether to display a button in the header to edit the basemap title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? EditTitleButton { get; set; }
    
    /// <summary>
    ///     Since 4.29 Indicates whether to display a filter input box when then number of list items is equal to or greater than the value set in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#minFilterItems">minFilterItems</a>, allowing users to filter layers by their title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Filter { get; set; }
    
    /// <summary>
    ///     Since 4.29 Determines whether the widget should be shown within its built-in <a target="_blank" href="https://developers.arcgis.com/calcite-design-system/components/flow/">flow component</a> or if the flow component should be excluded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Flow { get; set; }
    
    /// <summary>
    ///     Since 4.29 Indicates whether the widget displays a heading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Heading { get; set; }
    
    /// <summary>
    ///     Since 4.29 Indicates whether temporary layer indicators will be displayed for layers with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled">layer.persistenceEnabled</a> set to `false`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? TemporaryLayerIndicators { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BaseLayers property.
    /// </summary>
    public async Task<bool?> GetBaseLayers()
    {
        if (CoreJsModule is null)
        {
            return BaseLayers;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BaseLayers;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "baseLayers");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BaseLayers = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BaseLayers)] = BaseLayers;
        }
         
        return BaseLayers;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CloseButton property.
    /// </summary>
    public async Task<bool?> GetCloseButton()
    {
        if (CoreJsModule is null)
        {
            return CloseButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CloseButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "closeButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CloseButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CloseButton)] = CloseButton;
        }
         
        return CloseButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CollapseButton property.
    /// </summary>
    public async Task<bool?> GetCollapseButton()
    {
        if (CoreJsModule is null)
        {
            return CollapseButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CollapseButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "collapseButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CollapseButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CollapseButton)] = CollapseButton;
        }
         
        return CollapseButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditTitleButton property.
    /// </summary>
    public async Task<bool?> GetEditTitleButton()
    {
        if (CoreJsModule is null)
        {
            return EditTitleButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EditTitleButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "editTitleButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EditTitleButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditTitleButton)] = EditTitleButton;
        }
         
        return EditTitleButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Errors property.
    /// </summary>
    public async Task<bool?> GetErrors()
    {
        if (CoreJsModule is null)
        {
            return Errors;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Errors;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "errors");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Errors = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Errors)] = Errors;
        }
         
        return Errors;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filter property.
    /// </summary>
    public async Task<bool?> GetFilter()
    {
        if (CoreJsModule is null)
        {
            return Filter;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Filter;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "filter");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Filter = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Filter)] = Filter;
        }
         
        return Filter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Flow property.
    /// </summary>
    public async Task<bool?> GetFlow()
    {
        if (CoreJsModule is null)
        {
            return Flow;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Flow;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "flow");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Flow = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Flow)] = Flow;
        }
         
        return Flow;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Heading property.
    /// </summary>
    public async Task<bool?> GetHeading()
    {
        if (CoreJsModule is null)
        {
            return Heading;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Heading;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "heading");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Heading = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Heading)] = Heading;
        }
         
        return Heading;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReferenceLayers property.
    /// </summary>
    public async Task<bool?> GetReferenceLayers()
    {
        if (CoreJsModule is null)
        {
            return ReferenceLayers;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ReferenceLayers;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "referenceLayers");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ReferenceLayers = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ReferenceLayers)] = ReferenceLayers;
        }
         
        return ReferenceLayers;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StatusIndicators property.
    /// </summary>
    public async Task<bool?> GetStatusIndicators()
    {
        if (CoreJsModule is null)
        {
            return StatusIndicators;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StatusIndicators;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "statusIndicators");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             StatusIndicators = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StatusIndicators)] = StatusIndicators;
        }
         
        return StatusIndicators;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TemporaryLayerIndicators property.
    /// </summary>
    public async Task<bool?> GetTemporaryLayerIndicators()
    {
        if (CoreJsModule is null)
        {
            return TemporaryLayerIndicators;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TemporaryLayerIndicators;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "temporaryLayerIndicators");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             TemporaryLayerIndicators = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TemporaryLayerIndicators)] = TemporaryLayerIndicators;
        }
         
        return TemporaryLayerIndicators;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BaseLayers property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBaseLayers(bool? value)
    {
#pragma warning disable BL0005
        BaseLayers = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BaseLayers)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "baseLayers", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CloseButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCloseButton(bool? value)
    {
#pragma warning disable BL0005
        CloseButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CloseButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "closeButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CollapseButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCollapseButton(bool? value)
    {
#pragma warning disable BL0005
        CollapseButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CollapseButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "collapseButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EditTitleButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEditTitleButton(bool? value)
    {
#pragma warning disable BL0005
        EditTitleButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EditTitleButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "editTitleButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Errors property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetErrors(bool? value)
    {
#pragma warning disable BL0005
        Errors = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Errors)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "errors", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Filter property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilter(bool? value)
    {
#pragma warning disable BL0005
        Filter = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filter)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filter", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Flow property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFlow(bool? value)
    {
#pragma warning disable BL0005
        Flow = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Flow)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "flow", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Heading property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeading(bool? value)
    {
#pragma warning disable BL0005
        Heading = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Heading)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "heading", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReferenceLayers property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReferenceLayers(bool? value)
    {
#pragma warning disable BL0005
        ReferenceLayers = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReferenceLayers)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "referenceLayers", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StatusIndicators property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStatusIndicators(bool? value)
    {
#pragma warning disable BL0005
        StatusIndicators = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StatusIndicators)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "statusIndicators", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TemporaryLayerIndicators property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTemporaryLayerIndicators(bool? value)
    {
#pragma warning disable BL0005
        TemporaryLayerIndicators = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TemporaryLayerIndicators)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "temporaryLayerIndicators", value);
    }
    
#endregion

}
