// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The visible elements that are displayed within the widget's <a target="_blank" href="esri-PopupTemplate.html#content">graphic.popupTemplate.content</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="boolContent">
    ///     Indicates whether content for the Feature displays, can also indicate the specific types of content elements by setting it via <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleContentElements">VisibleContentElements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lastEditedInfo">
    ///     Indicates whether <a target="_blank" href="esri-widgets-Feature-FeatureViewModel.html#lastEditInfo">lastEditInfo</a> is displayed within the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     Indicates whether the title associated with the feature displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibleContentElementsContent">
    ///     Indicates whether content for the Feature displays, can also indicate the specific types of content elements by setting it via <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleContentElements">VisibleContentElements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureVisibleElements(
        bool? boolContent = null,
        bool? lastEditedInfo = null,
        bool? title = null,
        VisibleContentElements? visibleContentElementsContent = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        BoolContent = boolContent;
        LastEditedInfo = lastEditedInfo;
        Title = title;
        VisibleContentElementsContent = visibleContentElementsContent;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether content for the Feature displays, can also indicate the specific types of content elements by setting it via <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleContentElements">VisibleContentElements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? BoolContent { get; set; }
    
    /// <summary>
    ///     Indicates whether <a target="_blank" href="esri-widgets-Feature-FeatureViewModel.html#lastEditInfo">lastEditInfo</a> is displayed within the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LastEditedInfo { get; set; }
    
    /// <summary>
    ///     Indicates whether the title associated with the feature displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Title { get; set; }
    
    /// <summary>
    ///     Indicates whether content for the Feature displays, can also indicate the specific types of content elements by setting it via <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleContentElements">VisibleContentElements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public VisibleContentElements? VisibleContentElementsContent { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BoolContent property.
    /// </summary>
    public async Task<bool?> GetBoolContent()
    {
        if (CoreJsModule is null)
        {
            return BoolContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BoolContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "boolContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BoolContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BoolContent)] = BoolContent;
        }
         
        return BoolContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LastEditedInfo property.
    /// </summary>
    public async Task<bool?> GetLastEditedInfo()
    {
        if (CoreJsModule is null)
        {
            return LastEditedInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LastEditedInfo;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "lastEditedInfo");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LastEditedInfo = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LastEditedInfo)] = LastEditedInfo;
        }
         
        return LastEditedInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<bool?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "title");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Title = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleContentElementsContent property.
    /// </summary>
    public async Task<VisibleContentElements?> GetVisibleContentElementsContent()
    {
        if (CoreJsModule is null)
        {
            return VisibleContentElementsContent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return VisibleContentElementsContent;
        }

        // get the property value
        VisibleContentElements? result = await JsComponentReference!.InvokeAsync<VisibleContentElements?>("getProperty",
            CancellationTokenSource.Token, "visibleContentElementsContent");
        if (result is not null)
        {
#pragma warning disable BL0005
             VisibleContentElementsContent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibleContentElementsContent)] = VisibleContentElementsContent;
        }
         
        return VisibleContentElementsContent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BoolContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBoolContent(bool? value)
    {
#pragma warning disable BL0005
        BoolContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BoolContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "boolContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LastEditedInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLastEditedInfo(bool? value)
    {
#pragma warning disable BL0005
        LastEditedInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LastEditedInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lastEditedInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(bool? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibleContentElementsContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibleContentElementsContent(VisibleContentElements? value)
    {
#pragma warning disable BL0005
        VisibleContentElementsContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibleContentElementsContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "visibleContentElementsContent", value);
    }
    
#endregion

}
