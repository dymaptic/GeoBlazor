// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Contains authoring properties of visual variables generated from one of the Smart Mapping methods or sliders.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class AuthoringInfoVisualVariable
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public AuthoringInfoVisualVariable()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="endTime">
    ///     If an age or timeline renderer was generated, indicates the end time of the visualization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#endTime">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field">
    ///     Indicates the field name used for generating the data-driven visualization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxSliderValue">
    ///     Indicates the value of the upper handle if a slider was used to generate the visual variable.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#maxSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minSliderValue">
    ///     Indicates the value of the lower handle if a slider was used to generate the visual variable.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#minSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normalizationField">
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#normalizationField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="referenceSizeScale">
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#referenceSizeScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="referenceSizeSymbolStyle">
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#referenceSizeSymbolStyle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sizeStops">
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#sizeStops">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="startTime">
    ///     If an age or timeline renderer was generated, indicates the start time of the visualization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#startTime">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="style">
    ///     If the UI offers the option to display values based on a ratio or percentage, this indicates which selection was made.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="theme">
    ///     Indicates the theme selected by the user when generating a renderer or visual variable with one of the Smart Mapping functions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="units">
    ///     If an age or timeline renderer was generated, indicates the time units used.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#units">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AuthoringInfoVisualVariable(
        string? endTime = null,
        string? field = null,
        double? maxSliderValue = null,
        double? minSliderValue = null,
        string? normalizationField = null,
        double? referenceSizeScale = null,
        ReferenceSizeSymbolStyle? referenceSizeSymbolStyle = null,
        IReadOnlyList<SizeStop>? sizeStops = null,
        string? startTime = null,
        AuthoringInfoVisualVariableStyle? style = null,
        AuthoringInfoVisualVariableTheme? theme = null,
        AuthoringInfoVisualVariableUnits? units = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        EndTime = endTime;
        Field = field;
        MaxSliderValue = maxSliderValue;
        MinSliderValue = minSliderValue;
        NormalizationField = normalizationField;
        ReferenceSizeScale = referenceSizeScale;
        ReferenceSizeSymbolStyle = referenceSizeSymbolStyle;
        SizeStops = sizeStops;
        StartTime = startTime;
        Style = style;
        Theme = theme;
        Units = units;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     If an age or timeline renderer was generated, indicates the end time of the visualization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#endTime">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? EndTime { get; set; }
    
    /// <summary>
    ///     Indicates the field name used for generating the data-driven visualization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Field { get; set; }
    
    /// <summary>
    ///     Indicates the value of the upper handle if a slider was used to generate the visual variable.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#maxSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxSliderValue { get; set; }
    
    /// <summary>
    ///     Indicates the value of the lower handle if a slider was used to generate the visual variable.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#minSliderValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinSliderValue { get; set; }
    
    /// <summary>
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#normalizationField">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? NormalizationField { get; set; }
    
    /// <summary>
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#referenceSizeScale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? ReferenceSizeScale { get; set; }
    
    /// <summary>
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#referenceSizeSymbolStyle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ReferenceSizeSymbolStyle? ReferenceSizeSymbolStyle { get; set; }
    
    /// <summary>
    ///     Only applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">theme</a> is `reference-size`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#sizeStops">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SizeStop>? SizeStops { get; set; }
    
    /// <summary>
    ///     If an age or timeline renderer was generated, indicates the start time of the visualization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#startTime">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StartTime { get; set; }
    
    /// <summary>
    ///     If the UI offers the option to display values based on a ratio or percentage, this indicates which selection was made.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoVisualVariableStyle? Style { get; set; }
    
    /// <summary>
    ///     Indicates the theme selected by the user when generating a renderer or visual variable with one of the Smart Mapping functions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoVisualVariableTheme? Theme { get; set; }
    
    /// <summary>
    ///     If an age or timeline renderer was generated, indicates the time units used.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#units">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthoringInfoVisualVariableUnits? Units { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the EndTime property.
    /// </summary>
    public async Task<string?> GetEndTime()
    {
        if (CoreJsModule is null)
        {
            return EndTime;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EndTime;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "endTime");
        if (result is not null)
        {
#pragma warning disable BL0005
             EndTime = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EndTime)] = EndTime;
        }
         
        return EndTime;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Field property.
    /// </summary>
    public async Task<string?> GetField()
    {
        if (CoreJsModule is null)
        {
            return Field;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "field");
        if (result is not null)
        {
#pragma warning disable BL0005
             Field = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field)] = Field;
        }
         
        return Field;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxSliderValue property.
    /// </summary>
    public async Task<double?> GetMaxSliderValue()
    {
        if (CoreJsModule is null)
        {
            return MaxSliderValue;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxSliderValue;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxSliderValue");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxSliderValue = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxSliderValue)] = MaxSliderValue;
        }
         
        return MaxSliderValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinSliderValue property.
    /// </summary>
    public async Task<double?> GetMinSliderValue()
    {
        if (CoreJsModule is null)
        {
            return MinSliderValue;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MinSliderValue;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minSliderValue");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinSliderValue = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinSliderValue)] = MinSliderValue;
        }
         
        return MinSliderValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NormalizationField property.
    /// </summary>
    public async Task<string?> GetNormalizationField()
    {
        if (CoreJsModule is null)
        {
            return NormalizationField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NormalizationField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "normalizationField");
        if (result is not null)
        {
#pragma warning disable BL0005
             NormalizationField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NormalizationField)] = NormalizationField;
        }
         
        return NormalizationField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReferenceSizeScale property.
    /// </summary>
    public async Task<double?> GetReferenceSizeScale()
    {
        if (CoreJsModule is null)
        {
            return ReferenceSizeScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ReferenceSizeScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "referenceSizeScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ReferenceSizeScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ReferenceSizeScale)] = ReferenceSizeScale;
        }
         
        return ReferenceSizeScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReferenceSizeSymbolStyle property.
    /// </summary>
    public async Task<ReferenceSizeSymbolStyle?> GetReferenceSizeSymbolStyle()
    {
        if (CoreJsModule is null)
        {
            return ReferenceSizeSymbolStyle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ReferenceSizeSymbolStyle;
        }

        // get the property value
        JsNullableEnumWrapper<ReferenceSizeSymbolStyle>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ReferenceSizeSymbolStyle>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "referenceSizeSymbolStyle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ReferenceSizeSymbolStyle = (ReferenceSizeSymbolStyle)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ReferenceSizeSymbolStyle)] = ReferenceSizeSymbolStyle;
        }
         
        return ReferenceSizeSymbolStyle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SizeStops property.
    /// </summary>
    public async Task<IReadOnlyList<SizeStop>?> GetSizeStops()
    {
        if (CoreJsModule is null)
        {
            return SizeStops;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SizeStops;
        }

        IReadOnlyList<SizeStop>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<SizeStop>?>(
            "getSizeStops", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SizeStops = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SizeStops)] = SizeStops;
        }
        
        return SizeStops;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StartTime property.
    /// </summary>
    public async Task<string?> GetStartTime()
    {
        if (CoreJsModule is null)
        {
            return StartTime;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StartTime;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "startTime");
        if (result is not null)
        {
#pragma warning disable BL0005
             StartTime = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StartTime)] = StartTime;
        }
         
        return StartTime;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Style property.
    /// </summary>
    public async Task<AuthoringInfoVisualVariableStyle?> GetStyle()
    {
        if (CoreJsModule is null)
        {
            return Style;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Style;
        }

        // get the property value
        JsNullableEnumWrapper<AuthoringInfoVisualVariableStyle>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<AuthoringInfoVisualVariableStyle>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "style");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Style = (AuthoringInfoVisualVariableStyle)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Style)] = Style;
        }
         
        return Style;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Theme property.
    /// </summary>
    public async Task<AuthoringInfoVisualVariableTheme?> GetTheme()
    {
        if (CoreJsModule is null)
        {
            return Theme;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Theme;
        }

        // get the property value
        JsNullableEnumWrapper<AuthoringInfoVisualVariableTheme>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<AuthoringInfoVisualVariableTheme>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "theme");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Theme = (AuthoringInfoVisualVariableTheme)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Theme)] = Theme;
        }
         
        return Theme;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Units property.
    /// </summary>
    public async Task<AuthoringInfoVisualVariableUnits?> GetUnits()
    {
        if (CoreJsModule is null)
        {
            return Units;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Units;
        }

        // get the property value
        JsNullableEnumWrapper<AuthoringInfoVisualVariableUnits>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<AuthoringInfoVisualVariableUnits>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "units");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Units = (AuthoringInfoVisualVariableUnits)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Units)] = Units;
        }
         
        return Units;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the EndTime property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEndTime(string? value)
    {
#pragma warning disable BL0005
        EndTime = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EndTime)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "endTime", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField(string? value)
    {
#pragma warning disable BL0005
        Field = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxSliderValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxSliderValue(double? value)
    {
#pragma warning disable BL0005
        MaxSliderValue = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxSliderValue)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxSliderValue", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinSliderValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinSliderValue(double? value)
    {
#pragma warning disable BL0005
        MinSliderValue = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinSliderValue)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minSliderValue", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NormalizationField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNormalizationField(string? value)
    {
#pragma warning disable BL0005
        NormalizationField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NormalizationField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "normalizationField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReferenceSizeScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReferenceSizeScale(double? value)
    {
#pragma warning disable BL0005
        ReferenceSizeScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReferenceSizeScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "referenceSizeScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReferenceSizeSymbolStyle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReferenceSizeSymbolStyle(ReferenceSizeSymbolStyle? value)
    {
#pragma warning disable BL0005
        ReferenceSizeSymbolStyle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReferenceSizeSymbolStyle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "referenceSizeSymbolStyle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SizeStops property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSizeStops(IReadOnlyList<SizeStop>? value)
    {
#pragma warning disable BL0005
        SizeStops = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SizeStops)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sizeStops", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StartTime property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStartTime(string? value)
    {
#pragma warning disable BL0005
        StartTime = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StartTime)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "startTime", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Style property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyle(AuthoringInfoVisualVariableStyle? value)
    {
#pragma warning disable BL0005
        Style = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Style)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "style", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Theme property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTheme(AuthoringInfoVisualVariableTheme? value)
    {
#pragma warning disable BL0005
        Theme = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Theme)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "theme", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Units property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnits(AuthoringInfoVisualVariableUnits? value)
    {
#pragma warning disable BL0005
        Units = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Units)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "units", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the SizeStops property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSizeStops(params SizeStop[] values)
    {
        SizeStop[] join = SizeStops is null
            ? values
            : [..SizeStops, ..values];
        await SetSizeStops(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the SizeStops property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSizeStops(params SizeStop[] values)
    {
        if (SizeStops is null)
        {
            return;
        }
        await SetSizeStops(SizeStops.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SizeStop sizeStops:
                SizeStops ??= [];
                if (!SizeStops.Contains(sizeStops))
                {
                    SizeStops = [..SizeStops, sizeStops];
                    
                    ModifiedParameters[nameof(SizeStops)] = SizeStops;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SizeStop sizeStops:
                SizeStops = SizeStops?.Where(s => s != sizeStops).ToList();
                
                ModifiedParameters[nameof(SizeStops)] = SizeStops;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (SizeStops is not null)
        {
            foreach (SizeStop child in SizeStops)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
