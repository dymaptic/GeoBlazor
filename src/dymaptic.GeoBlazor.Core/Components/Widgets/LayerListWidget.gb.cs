// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///    The LayerList widget provides a way to display a list of layers, and switch on/off their visibility.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LayerListWidget
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LayerListWidget()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html">CatalogLayerList</a> widget instance that displays a catalog layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#dynamicGroupLayer">dynamic group layer</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#catalogLayerList">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public ICatalogLayerListWidget? CatalogLayerList { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html">CatalogLayer</a> specific properties.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#catalogOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerListCatalogOptions? CatalogOptions { get; set; }
    
    /// <summary>
    ///     Indicates whether the widget is collapsed.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#collapsed">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Collapsed { get; set; }
    
    /// <summary>
    ///     Indicates whether <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">list items</a> may be reordered within the list by dragging and dropping.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#dragEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DragEnabled { get; set; }
    
    /// <summary>
    ///     Placeholder text used in the filter input if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements">visibleElements.filter</a> is true.
    ///     default ""
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#filterPlaceholder">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FilterPlaceholder { get; set; }
    
    /// <summary>
    ///     The value of the filter input if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements">visibleElements.filter</a> is true.
    ///     default ""
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#filterText">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FilterText { get; set; }
    
    /// <summary>
    ///     Indicates the heading level to use for the heading of the widget.
    ///     default 2
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#headingLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? HeadingLevel { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KnowledgeGraphLayer.html">KnowledgeGraphLayer</a> specific properties.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerListKnowledgeGraphOptions? KnowledgeGraphOptions { get; set; }
    
    /// <summary>
    ///     The minimum number of list items required to enable drag and drop reordering with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#dragEnabled">dragEnabled</a>.
    ///     default 2
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#minDragEnabledItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinDragEnabledItems { get; set; }
    
    /// <summary>
    ///     The minimum number of list items required to display the visibleElements.filter input box.
    ///     default 10
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#minFilterItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinFilterItems { get; set; }
    
    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>s representing operational layers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#operationalItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<ListItem>? OperationalItems { get; protected set; }
    
    /// <summary>
    ///     A collection of selected <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>s representing operational layers selected by the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#selectedItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ListItem>? SelectedItems { get; set; }
    
    /// <summary>
    ///     Specifies the selection mode.
    ///     default "none"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#selectionMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SelectionMode? SelectionMode { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html">TableList</a> widget instance that displays the tables associated with a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KnowledgeGraphLayer.html">KnowledgeGraphLayer</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#tableList">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public ITableListWidget? TableList { get; protected set; }
    
    /// <summary>
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerListViewModel? ViewModel { get; set; }
    
    /// <summary>
    ///     Determines the icons used to indicate visibility.
    ///     default "default"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibilityAppearance">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public VisibilityAppearance? VisibilityAppearance { get; set; }
    
    /// <summary>
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerListVisibleElements? VisibleElements { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CatalogLayerList property.
    /// </summary>
    public async Task<ICatalogLayerListWidget?> GetCatalogLayerList()
    {
        if (CoreJsModule is null)
        {
            return CatalogLayerList;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CatalogLayerList;
        }

        // get the property value
        ICatalogLayerListWidget? result = await JsComponentReference!.InvokeAsync<ICatalogLayerListWidget?>("getProperty",
            CancellationTokenSource.Token, "catalogLayerList");
        if (result is not null)
        {
#pragma warning disable BL0005
             CatalogLayerList = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CatalogLayerList)] = CatalogLayerList;
        }
         
        return CatalogLayerList;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CatalogOptions property.
    /// </summary>
    public async Task<LayerListCatalogOptions?> GetCatalogOptions()
    {
        if (CoreJsModule is null)
        {
            return CatalogOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CatalogOptions;
        }

        // get the property value
        LayerListCatalogOptions? result = await JsComponentReference!.InvokeAsync<LayerListCatalogOptions?>("getProperty",
            CancellationTokenSource.Token, "catalogOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             CatalogOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CatalogOptions)] = CatalogOptions;
        }
         
        return CatalogOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Collapsed property.
    /// </summary>
    public async Task<bool?> GetCollapsed()
    {
        if (CoreJsModule is null)
        {
            return Collapsed;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Collapsed;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "collapsed");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Collapsed = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Collapsed)] = Collapsed;
        }
         
        return Collapsed;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DragEnabled property.
    /// </summary>
    public async Task<bool?> GetDragEnabled()
    {
        if (CoreJsModule is null)
        {
            return DragEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DragEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dragEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DragEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DragEnabled)] = DragEnabled;
        }
         
        return DragEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FilterPlaceholder property.
    /// </summary>
    public async Task<string?> GetFilterPlaceholder()
    {
        if (CoreJsModule is null)
        {
            return FilterPlaceholder;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FilterPlaceholder;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "filterPlaceholder");
        if (result is not null)
        {
#pragma warning disable BL0005
             FilterPlaceholder = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FilterPlaceholder)] = FilterPlaceholder;
        }
         
        return FilterPlaceholder;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FilterText property.
    /// </summary>
    public async Task<string?> GetFilterText()
    {
        if (CoreJsModule is null)
        {
            return FilterText;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FilterText;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "filterText");
        if (result is not null)
        {
#pragma warning disable BL0005
             FilterText = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FilterText)] = FilterText;
        }
         
        return FilterText;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HeadingLevel property.
    /// </summary>
    public async Task<double?> GetHeadingLevel()
    {
        if (CoreJsModule is null)
        {
            return HeadingLevel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HeadingLevel;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "headingLevel");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HeadingLevel = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HeadingLevel)] = HeadingLevel;
        }
         
        return HeadingLevel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the KnowledgeGraphOptions property.
    /// </summary>
    public async Task<LayerListKnowledgeGraphOptions?> GetKnowledgeGraphOptions()
    {
        if (CoreJsModule is null)
        {
            return KnowledgeGraphOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return KnowledgeGraphOptions;
        }

        // get the property value
        LayerListKnowledgeGraphOptions? result = await JsComponentReference!.InvokeAsync<LayerListKnowledgeGraphOptions?>("getProperty",
            CancellationTokenSource.Token, "knowledgeGraphOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             KnowledgeGraphOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(KnowledgeGraphOptions)] = KnowledgeGraphOptions;
        }
         
        return KnowledgeGraphOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinDragEnabledItems property.
    /// </summary>
    public async Task<double?> GetMinDragEnabledItems()
    {
        if (CoreJsModule is null)
        {
            return MinDragEnabledItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MinDragEnabledItems;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minDragEnabledItems");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinDragEnabledItems = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinDragEnabledItems)] = MinDragEnabledItems;
        }
         
        return MinDragEnabledItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinFilterItems property.
    /// </summary>
    public async Task<double?> GetMinFilterItems()
    {
        if (CoreJsModule is null)
        {
            return MinFilterItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MinFilterItems;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minFilterItems");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinFilterItems = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinFilterItems)] = MinFilterItems;
        }
         
        return MinFilterItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OperationalItems property.
    /// </summary>
    public async Task<IReadOnlyList<ListItem>?> GetOperationalItems()
    {
        if (CoreJsModule is null)
        {
            return OperationalItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OperationalItems;
        }

        // get the property value
        IReadOnlyList<ListItem>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ListItem>?>("getProperty",
            CancellationTokenSource.Token, "operationalItems");
        if (result is not null)
        {
#pragma warning disable BL0005
             OperationalItems = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OperationalItems)] = OperationalItems;
        }
         
        return OperationalItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedItems property.
    /// </summary>
    public async Task<IReadOnlyList<ListItem>?> GetSelectedItems()
    {
        if (CoreJsModule is null)
        {
            return SelectedItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SelectedItems;
        }

        // get the property value
        IReadOnlyList<ListItem>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ListItem>?>("getProperty",
            CancellationTokenSource.Token, "selectedItems");
        if (result is not null)
        {
#pragma warning disable BL0005
             SelectedItems = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectedItems)] = SelectedItems;
        }
         
        return SelectedItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectionMode property.
    /// </summary>
    public async Task<SelectionMode?> GetSelectionMode()
    {
        if (CoreJsModule is null)
        {
            return SelectionMode;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SelectionMode;
        }

        // get the property value
        JsNullableEnumWrapper<SelectionMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SelectionMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "selectionMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SelectionMode = (SelectionMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectionMode)] = SelectionMode;
        }
         
        return SelectionMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TableList property.
    /// </summary>
    public async Task<ITableListWidget?> GetTableList()
    {
        if (CoreJsModule is null)
        {
            return TableList;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TableList;
        }

        // get the property value
        ITableListWidget? result = await JsComponentReference!.InvokeAsync<ITableListWidget?>("getProperty",
            CancellationTokenSource.Token, "tableList");
        if (result is not null)
        {
#pragma warning disable BL0005
             TableList = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TableList)] = TableList;
        }
         
        return TableList;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<LayerListViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        LayerListViewModel? result = await JsComponentReference.InvokeAsync<LayerListViewModel?>(
            "getViewModel", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ViewModel is not null)
            {
                result.Id = ViewModel.Id;
            }
            
#pragma warning disable BL0005
            ViewModel = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
        
        return ViewModel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibilityAppearance property.
    /// </summary>
    public async Task<VisibilityAppearance?> GetVisibilityAppearance()
    {
        if (CoreJsModule is null)
        {
            return VisibilityAppearance;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return VisibilityAppearance;
        }

        // get the property value
        JsNullableEnumWrapper<VisibilityAppearance>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<VisibilityAppearance>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "visibilityAppearance");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             VisibilityAppearance = (VisibilityAppearance)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibilityAppearance)] = VisibilityAppearance;
        }
         
        return VisibilityAppearance;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleElements property.
    /// </summary>
    public async Task<LayerListVisibleElements?> GetVisibleElements()
    {
        if (CoreJsModule is null)
        {
            return VisibleElements;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return VisibleElements;
        }

        // get the property value
        LayerListVisibleElements? result = await JsComponentReference!.InvokeAsync<LayerListVisibleElements?>("getProperty",
            CancellationTokenSource.Token, "visibleElements");
        if (result is not null)
        {
#pragma warning disable BL0005
             VisibleElements = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
        }
         
        return VisibleElements;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CatalogOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCatalogOptions(LayerListCatalogOptions? value)
    {
#pragma warning disable BL0005
        CatalogOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CatalogOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "catalogOptions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Collapsed property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCollapsed(bool? value)
    {
#pragma warning disable BL0005
        Collapsed = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Collapsed)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "collapsed", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DragEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDragEnabled(bool? value)
    {
#pragma warning disable BL0005
        DragEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DragEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dragEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FilterPlaceholder property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilterPlaceholder(string? value)
    {
#pragma warning disable BL0005
        FilterPlaceholder = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FilterPlaceholder)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filterPlaceholder", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FilterText property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilterText(string? value)
    {
#pragma warning disable BL0005
        FilterText = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FilterText)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filterText", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HeadingLevel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeadingLevel(double? value)
    {
#pragma warning disable BL0005
        HeadingLevel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HeadingLevel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "headingLevel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the KnowledgeGraphOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetKnowledgeGraphOptions(LayerListKnowledgeGraphOptions? value)
    {
#pragma warning disable BL0005
        KnowledgeGraphOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(KnowledgeGraphOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "knowledgeGraphOptions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinDragEnabledItems property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinDragEnabledItems(double? value)
    {
#pragma warning disable BL0005
        MinDragEnabledItems = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinDragEnabledItems)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minDragEnabledItems", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinFilterItems property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinFilterItems(double? value)
    {
#pragma warning disable BL0005
        MinFilterItems = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinFilterItems)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minFilterItems", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectedItems property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectedItems(IReadOnlyList<ListItem>? value)
    {
#pragma warning disable BL0005
        SelectedItems = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectedItems)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSelectedItems", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectionMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectionMode(SelectionMode? value)
    {
#pragma warning disable BL0005
        SelectionMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectionMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selectionMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(LayerListViewModel? value)
    {
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setViewModel", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibilityAppearance property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibilityAppearance(VisibilityAppearance? value)
    {
#pragma warning disable BL0005
        VisibilityAppearance = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibilityAppearance)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "visibilityAppearance", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibleElements property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibleElements(LayerListVisibleElements? value)
    {
#pragma warning disable BL0005
        VisibleElements = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibleElements)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "visibleElements", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the SelectedItems property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSelectedItems(params ListItem[] values)
    {
        ListItem[] join = SelectedItems is null
            ? values
            : [..SelectedItems, ..values];
        await SetSelectedItems(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the SelectedItems property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSelectedItems(params ListItem[] values)
    {
        if (SelectedItems is null)
        {
            return;
        }
        await SetSelectedItems(SelectedItems.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Triggers the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#event-trigger-action">trigger-action</a> event and executes the given <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#triggerAction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="action">
    /// </param>
    /// <param name="item">
    /// </param>
    [ArcGISMethod]
    public async Task TriggerAction(ActionBase action,
        ListItem item)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "triggerAction", 
            CancellationTokenSource.Token,
            action,
            item);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsTriggerAction(LayerListTriggerActionEvent triggerActionEvent)
    {
        await OnTriggerAction.InvokeAsync(triggerActionEvent);
    }
    
    /// <summary>
    ///     Event Listener for TriggerAction.
    /// </summary>
    [Parameter]
    public EventCallback<LayerListTriggerActionEvent> OnTriggerAction { get; set; }
   
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case LayerListViewModel viewModel:
                if (viewModel != ViewModel)
                {
                    ViewModel = viewModel;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(ViewModel)] = ViewModel;
                }
                
                return true;
            case LayerListVisibleElements visibleElements:
                if (visibleElements != VisibleElements)
                {
                    VisibleElements = visibleElements;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case LayerListViewModel _:
                ViewModel = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(ViewModel)] = ViewModel;
                return true;
            case LayerListVisibleElements _:
                VisibleElements = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ViewModel?.ValidateRequiredGeneratedChildren();
        VisibleElements?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
