// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///    The Measurement widget groups and manages multiple measurement tools and allows you to easily switch between them using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#activeTool">activeTool</a> property.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeasurementWidget
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeasurementWidget()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="activeTool">
    ///     Specifies the current measurement tool to display.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#activeTool">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="areaUnit">
    ///     Unit system (imperial, metric) or specific unit used for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#areaUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="icon">
    ///     Icon which represents the widget.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#icon">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     The widget's label.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="linearUnit">
    ///     Unit system (imperial, metric) or specific unit used for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#linearUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewModel">
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetId">
    ///     The unique ID assigned to the widget when the widget is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeasurementWidget(
        ActiveTool? activeTool = null,
        SystemOrAreaUnit? areaUnit = null,
        string? icon = null,
        string? label = null,
        SystemOrLengthUnit? linearUnit = null,
        MeasurementViewModel? viewModel = null,
        string? widgetId = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ActiveTool = activeTool;
        AreaUnit = areaUnit;
        Icon = icon;
        Label = label;
        LinearUnit = linearUnit;
        ViewModel = viewModel;
        WidgetId = widgetId;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The measurement widget that is currently being used.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#activeWidget">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IMeasurementWidgetActiveWidget? ActiveWidget { get; protected set; }
    
    /// <summary>
    ///     Unit system (imperial, metric) or specific unit used for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#areaUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SystemOrAreaUnit? AreaUnit { get; set; }
    
    /// <summary>
    ///     Unit system (imperial, metric) or specific unit used for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#linearUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SystemOrLengthUnit? LinearUnit { get; set; }
    
    /// <summary>
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeasurementViewModel? ViewModel { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveTool property.
    /// </summary>
    public async Task<ActiveTool?> GetActiveTool()
    {
        if (CoreJsModule is null)
        {
            return ActiveTool;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ActiveTool;
        }

        // get the property value
        JsNullableEnumWrapper<ActiveTool>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ActiveTool>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "activeTool");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ActiveTool = (ActiveTool)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActiveTool)] = ActiveTool;
        }
         
        return ActiveTool;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveWidget property.
    /// </summary>
    public async Task<IMeasurementWidgetActiveWidget?> GetActiveWidget()
    {
        if (CoreJsModule is null)
        {
            return ActiveWidget;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ActiveWidget;
        }

        // get the property value
        IMeasurementWidgetActiveWidget? result = await JsComponentReference!.InvokeAsync<IMeasurementWidgetActiveWidget?>("getProperty",
            CancellationTokenSource.Token, "activeWidget");
        if (result is not null)
        {
#pragma warning disable BL0005
             ActiveWidget = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActiveWidget)] = ActiveWidget;
        }
         
        return ActiveWidget;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AreaUnit property.
    /// </summary>
    public async Task<SystemOrAreaUnit?> GetAreaUnit()
    {
        if (CoreJsModule is null)
        {
            return AreaUnit;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AreaUnit;
        }

        // get the property value
        JsNullableEnumWrapper<SystemOrAreaUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SystemOrAreaUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "areaUnit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AreaUnit = (SystemOrAreaUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AreaUnit)] = AreaUnit;
        }
         
        return AreaUnit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LinearUnit property.
    /// </summary>
    public async Task<SystemOrLengthUnit?> GetLinearUnit()
    {
        if (CoreJsModule is null)
        {
            return LinearUnit;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LinearUnit;
        }

        // get the property value
        JsNullableEnumWrapper<SystemOrLengthUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SystemOrLengthUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "linearUnit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LinearUnit = (SystemOrLengthUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LinearUnit)] = LinearUnit;
        }
         
        return LinearUnit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<MeasurementViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        // get the property value
        MeasurementViewModel? result = await JsComponentReference!.InvokeAsync<MeasurementViewModel?>("getProperty",
            CancellationTokenSource.Token, "viewModel");
        if (result is not null)
        {
#pragma warning disable BL0005
             ViewModel = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
         
        return ViewModel;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActiveTool property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveTool(ActiveTool? value)
    {
#pragma warning disable BL0005
        ActiveTool = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveTool)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "activeTool", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AreaUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAreaUnit(SystemOrAreaUnit? value)
    {
#pragma warning disable BL0005
        AreaUnit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AreaUnit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "areaUnit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LinearUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLinearUnit(SystemOrLengthUnit? value)
    {
#pragma warning disable BL0005
        LinearUnit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LinearUnit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "linearUnit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(MeasurementViewModel? value)
    {
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "viewModel", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Removes all measurement widgets and associated graphics.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#clear">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Clear()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "clear", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Starts a new measurement for the active measurement widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#startMeasurement">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task StartMeasurement()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "startMeasurement", 
            CancellationTokenSource.Token);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case MeasurementViewModel viewModel:
                if (viewModel != ViewModel)
                {
                    ViewModel = viewModel;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(ViewModel)] = ViewModel;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case MeasurementViewModel _:
                ViewModel = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(ViewModel)] = ViewModel;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ViewModel?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
