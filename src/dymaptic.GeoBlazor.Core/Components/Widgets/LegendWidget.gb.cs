// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.LegendWidget.html">GeoBlazor Docs</a>
///     The Legend widget describes the symbols used to represent layers in a map.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LegendWidget
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LegendWidget()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="activeLayerInfos">
    ///     Collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html">ActiveLayerInfo</a> objects used by the legend view to display data in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#activeLayerInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="basemapLegendVisible">
    ///     Indicates whether to show the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a> layers in the Legend.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#basemapLegendVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="containerId">
    ///     The id of an external HTML Element (div). If provided, the widget will be placed inside that element, instead of on the map.
    /// </param>
    /// <param name="headingLevel">
    ///     Indicates the heading level to use for the legend title.
    ///     default 3
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#headingLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hideLayersNotInCurrentView">
    ///     When `true`, layers will only be shown in the legend if they are visible in the view's extent.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#hideLayersNotInCurrentView">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="icon">
    ///     Icon which represents the widget.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#icon">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     The widget's label.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerInfos">
    ///     Specifies a subset of the layers to display in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#layerInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendStyle">
    ///     Indicates the style of the legend.
    ///     default classic
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="mapView">
    ///     If the Widget is defined outside of the MapView, this link is required to connect them together.
    /// </param>
    /// <param name="position">
    ///     The position of the widget in relation to the map view.
    /// </param>
    /// <param name="respectLayerDefinitionExpression">
    ///     If a layer uses a unique value render, only features that satisfy the layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#definitionExpression">definition expression</a> will be displayed in the legend when set to true.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#respectLayerDefinitionExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="respectLayerVisibility">
    ///     Determines whether to respect the properties of the layers in the map that control the legend's visibility (`minScale`, `maxScale`, `legendEnabled`).
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#respectLayerVisibility">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="stringStyle">
    ///     Indicates the style of the legend.
    ///     default classic
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewModel">
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates whether the widget is visible.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetId">
    ///     The unique ID assigned to the widget when the widget is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LegendWidget(
        IReadOnlyList<ActiveLayerInfo>? activeLayerInfos = null,
        bool? basemapLegendVisible = null,
        string? containerId = null,
        double? headingLevel = null,
        bool? hideLayersNotInCurrentView = null,
        string? icon = null,
        string? label = null,
        IReadOnlyList<LegendLayerInfos>? layerInfos = null,
        LegendStyle? legendStyle = null,
        MapView? mapView = null,
        OverlayPosition? position = null,
        bool? respectLayerDefinitionExpression = null,
        bool? respectLayerVisibility = null,
        string? stringStyle = null,
        LegendViewModel? viewModel = null,
        bool? visible = null,
        string? widgetId = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ActiveLayerInfos = activeLayerInfos;
        BasemapLegendVisible = basemapLegendVisible;
        ContainerId = containerId;
        HeadingLevel = headingLevel;
        HideLayersNotInCurrentView = hideLayersNotInCurrentView;
        Icon = icon;
        Label = label;
        LayerInfos = layerInfos;
        LegendStyle = legendStyle;
        MapView = mapView;
        Position = position;
        RespectLayerDefinitionExpression = respectLayerDefinitionExpression;
        RespectLayerVisibility = respectLayerVisibility;
        StringStyle = stringStyle;
        ViewModel = viewModel;
        Visible = visible;
        WidgetId = widgetId;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html">ActiveLayerInfo</a> objects used by the legend view to display data in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#activeLayerInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ActiveLayerInfo>? ActiveLayerInfos { get; set; }
    
    /// <summary>
    ///     Indicates whether to show the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a> layers in the Legend.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#basemapLegendVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? BasemapLegendVisible { get; set; }
    
    /// <summary>
    ///     Indicates the heading level to use for the legend title.
    ///     default 3
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#headingLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? HeadingLevel { get; set; }
    
    /// <summary>
    ///     When `true`, layers will only be shown in the legend if they are visible in the view's extent.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#hideLayersNotInCurrentView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HideLayersNotInCurrentView { get; set; }
    
    /// <summary>
    ///     Specifies a subset of the layers to display in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#layerInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<LegendLayerInfos>? LayerInfos { get; set; }
    
    /// <summary>
    ///     Indicates the style of the legend.
    ///     default classic
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LegendStyle? LegendStyle { get; set; }
    
    /// <summary>
    ///     If a layer uses a unique value render, only features that satisfy the layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#definitionExpression">definition expression</a> will be displayed in the legend when set to true.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#respectLayerDefinitionExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RespectLayerDefinitionExpression { get; set; }
    
    /// <summary>
    ///     Determines whether to respect the properties of the layers in the map that control the legend's visibility (`minScale`, `maxScale`, `legendEnabled`).
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#respectLayerVisibility">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RespectLayerVisibility { get; set; }
    
    /// <summary>
    ///     Indicates the style of the legend.
    ///     default classic
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringStyle { get; set; }
    
    /// <summary>
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LegendViewModel? ViewModel { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveLayerInfos property.
    /// </summary>
    public async Task<IReadOnlyList<ActiveLayerInfo>?> GetActiveLayerInfos()
    {
        if (CoreJsModule is null)
        {
            return ActiveLayerInfos;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActiveLayerInfos;
        }

        IReadOnlyList<ActiveLayerInfo>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<ActiveLayerInfo>?>(
            "getActiveLayerInfos", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ActiveLayerInfos = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ActiveLayerInfos)] = ActiveLayerInfos;
        }
        
        return ActiveLayerInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BasemapLegendVisible property.
    /// </summary>
    public async Task<bool?> GetBasemapLegendVisible()
    {
        if (CoreJsModule is null)
        {
            return BasemapLegendVisible;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BasemapLegendVisible;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "basemapLegendVisible");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BasemapLegendVisible = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BasemapLegendVisible)] = BasemapLegendVisible;
        }
         
        return BasemapLegendVisible;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HeadingLevel property.
    /// </summary>
    public async Task<double?> GetHeadingLevel()
    {
        if (CoreJsModule is null)
        {
            return HeadingLevel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HeadingLevel;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "headingLevel");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HeadingLevel = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HeadingLevel)] = HeadingLevel;
        }
         
        return HeadingLevel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HideLayersNotInCurrentView property.
    /// </summary>
    public async Task<bool?> GetHideLayersNotInCurrentView()
    {
        if (CoreJsModule is null)
        {
            return HideLayersNotInCurrentView;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HideLayersNotInCurrentView;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hideLayersNotInCurrentView");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HideLayersNotInCurrentView = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HideLayersNotInCurrentView)] = HideLayersNotInCurrentView;
        }
         
        return HideLayersNotInCurrentView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerInfos property.
    /// </summary>
    public async Task<IReadOnlyList<LegendLayerInfos>?> GetLayerInfos()
    {
        if (CoreJsModule is null)
        {
            return LayerInfos;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LayerInfos;
        }

        IReadOnlyList<LegendLayerInfos>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<LegendLayerInfos>?>(
            "getLayerInfos", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            LayerInfos = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(LayerInfos)] = LayerInfos;
        }
        
        return LayerInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendStyle property.
    /// </summary>
    public async Task<LegendStyle?> GetLegendStyle()
    {
        if (CoreJsModule is null)
        {
            return LegendStyle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LegendStyle;
        }

        LegendStyle? result = await JsComponentReference.InvokeAsync<LegendStyle?>(
            "getLegendStyle", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            LegendStyle = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(LegendStyle)] = LegendStyle;
        }
        
        return LegendStyle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RespectLayerDefinitionExpression property.
    /// </summary>
    public async Task<bool?> GetRespectLayerDefinitionExpression()
    {
        if (CoreJsModule is null)
        {
            return RespectLayerDefinitionExpression;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RespectLayerDefinitionExpression;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "respectLayerDefinitionExpression");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RespectLayerDefinitionExpression = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RespectLayerDefinitionExpression)] = RespectLayerDefinitionExpression;
        }
         
        return RespectLayerDefinitionExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RespectLayerVisibility property.
    /// </summary>
    public async Task<bool?> GetRespectLayerVisibility()
    {
        if (CoreJsModule is null)
        {
            return RespectLayerVisibility;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RespectLayerVisibility;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "respectLayerVisibility");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RespectLayerVisibility = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RespectLayerVisibility)] = RespectLayerVisibility;
        }
         
        return RespectLayerVisibility;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringStyle property.
    /// </summary>
    public async Task<string?> GetStringStyle()
    {
        if (CoreJsModule is null)
        {
            return StringStyle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StringStyle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "style");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringStyle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringStyle)] = StringStyle;
        }
         
        return StringStyle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<LegendViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        LegendViewModel? result = await JsComponentReference.InvokeAsync<LegendViewModel?>(
            "getViewModel", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ViewModel = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
        
        return ViewModel;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActiveLayerInfos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveLayerInfos(IReadOnlyList<ActiveLayerInfo>? value)
    {
        if (value is not null)
        {
            foreach (ActiveLayerInfo item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        ActiveLayerInfos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveLayerInfos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setActiveLayerInfos", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BasemapLegendVisible property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemapLegendVisible(bool? value)
    {
#pragma warning disable BL0005
        BasemapLegendVisible = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BasemapLegendVisible)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "basemapLegendVisible", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HeadingLevel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeadingLevel(double? value)
    {
#pragma warning disable BL0005
        HeadingLevel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HeadingLevel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "headingLevel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HideLayersNotInCurrentView property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHideLayersNotInCurrentView(bool? value)
    {
#pragma warning disable BL0005
        HideLayersNotInCurrentView = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HideLayersNotInCurrentView)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hideLayersNotInCurrentView", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerInfos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerInfos(IReadOnlyList<LegendLayerInfos>? value)
    {
        if (value is not null)
        {
            foreach (LegendLayerInfos item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        LayerInfos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerInfos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLayerInfos", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendStyle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendStyle(LegendStyle? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        LegendStyle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendStyle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLegendStyle", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RespectLayerDefinitionExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRespectLayerDefinitionExpression(bool? value)
    {
#pragma warning disable BL0005
        RespectLayerDefinitionExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RespectLayerDefinitionExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "respectLayerDefinitionExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RespectLayerVisibility property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRespectLayerVisibility(bool? value)
    {
#pragma warning disable BL0005
        RespectLayerVisibility = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RespectLayerVisibility)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "respectLayerVisibility", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringStyle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringStyle(string? value)
    {
#pragma warning disable BL0005
        StringStyle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringStyle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "style", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(LegendViewModel? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setViewModel", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the ActiveLayerInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToActiveLayerInfos(params ActiveLayerInfo[] values)
    {
        ActiveLayerInfo[] join = ActiveLayerInfos is null
            ? values
            : [..ActiveLayerInfos, ..values];
        await SetActiveLayerInfos(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the LayerInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToLayerInfos(params LegendLayerInfos[] values)
    {
        LegendLayerInfos[] join = LayerInfos is null
            ? values
            : [..LayerInfos, ..values];
        await SetLayerInfos(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the ActiveLayerInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromActiveLayerInfos(params ActiveLayerInfo[] values)
    {
        if (ActiveLayerInfos is null)
        {
            return;
        }
        await SetActiveLayerInfos(ActiveLayerInfos.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the LayerInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromLayerInfos(params LegendLayerInfos[] values)
    {
        if (LayerInfos is null)
        {
            return;
        }
        await SetLayerInfos(LayerInfos.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ActiveLayerInfo activeLayerInfos:
                ActiveLayerInfos ??= [];
                if (!ActiveLayerInfos.Contains(activeLayerInfos))
                {
                    ActiveLayerInfos = [..ActiveLayerInfos, activeLayerInfos];
                    ModifiedParameters[nameof(ActiveLayerInfos)] = ActiveLayerInfos;
                    if (MapRendered)
                    {
                        await UpdateWidget();
                    }
                }
                
                return true;
            case LegendLayerInfos layerInfos:
                LayerInfos ??= [];
                if (!LayerInfos.Contains(layerInfos))
                {
                    LayerInfos = [..LayerInfos, layerInfos];
                    ModifiedParameters[nameof(LayerInfos)] = LayerInfos;
                    if (MapRendered)
                    {
                        await UpdateWidget();
                    }
                }
                
                return true;
            case LegendStyle legendStyle:
                if (legendStyle != LegendStyle)
                {
                    LegendStyle = legendStyle;
                    ModifiedParameters[nameof(LegendStyle)] = LegendStyle;
                    if (MapRendered)
                    {
                        await UpdateWidget();
                    }
                }
                
                return true;
            case LegendViewModel viewModel:
                if (viewModel != ViewModel)
                {
                    ViewModel = viewModel;
                    ModifiedParameters[nameof(ViewModel)] = ViewModel;
                    if (MapRendered)
                    {
                        await UpdateWidget();
                    }
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ActiveLayerInfo activeLayerInfos:
                ActiveLayerInfos = ActiveLayerInfos?.Where(a => a != activeLayerInfos).ToList();
                ModifiedParameters[nameof(ActiveLayerInfos)] = ActiveLayerInfos;
                return true;
            case LegendLayerInfos layerInfos:
                LayerInfos = LayerInfos?.Where(l => l != layerInfos).ToList();
                ModifiedParameters[nameof(LayerInfos)] = LayerInfos;
                return true;
            case LegendStyle _:
                LegendStyle = null;
                ModifiedParameters[nameof(LegendStyle)] = LegendStyle;
                return true;
            case LegendViewModel _:
                ViewModel = null;
                ModifiedParameters[nameof(ViewModel)] = ViewModel;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Layer is null)
        {
            throw new MissingRequiredChildElementException(nameof(LegendWidget), nameof(Layer));
        }
        if (ActiveLayerInfos is not null)
        {
            foreach (ActiveLayerInfo child in ActiveLayerInfos)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        if (LayerInfos is not null)
        {
            foreach (LegendLayerInfos child in LayerInfos)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        LegendStyle?.ValidateRequiredGeneratedChildren();
        ViewModel?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
