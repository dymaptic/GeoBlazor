// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///    The Popup widget allows users to view content from feature attributes.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PopupWidget : IGoTo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PopupWidget()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="actions">
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#actions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="alignment">
    ///     Position of the popup in relation to the selected feature.
    ///     default auto
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#alignment">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="autoCloseEnabled">
    ///     This closes the popup when the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> camera or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Viewpoint.html">Viewpoint</a> changes.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#autoCloseEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="containerId">
    ///     The id of an external HTML Element (div). If provided, the widget will be placed inside that element, instead of on the map.
    /// </param>
    /// <param name="defaultPopupTemplateEnabled">
    ///     Enables automatic creation of a popup template for layers that have popups enabled but no popupTemplate defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#defaultPopupTemplateEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dockEnabled">
    ///     Indicates whether the placement of the popup is docked to the side of the view.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dockOptions">
    ///     Docking the popup allows for a better user experience, particularly when opening popups in apps on mobile devices.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="features">
    ///     An array of features associated with the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#features">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="goToOverride">
    ///     This function provides the ability to override either the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo">MapView goTo()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo">SceneView goTo()</a> methods.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="headingLevel">
    ///     Indicates the heading level to use for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#title">title</a> of the popup.
    ///     default 2
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#headingLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="highlightEnabled">
    ///     Highlight the selected popup feature using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#highlightOptions">highlightOptions</a> set on the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#highlightOptions">highlightOptions</a> set on the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#highlightEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="htmlContent">
    ///     The content of the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="icon">
    ///     Icon which represents the widget.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#icon">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     The widget's label.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="location">
    ///     Point used to position the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#location">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="mapView">
    ///     If the Widget is defined outside of the MapView, this link is required to connect them together.
    /// </param>
    /// <param name="position">
    ///     The position of the widget in relation to the map view.
    /// </param>
    /// <param name="promises">
    ///     An array of pending Promises that have not yet been fulfilled.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#promises">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="selectedFeatureIndex">
    ///     Index of the feature that is <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#selectedFeature">selected</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#selectedFeatureIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="stringContent">
    ///     The content of the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewModel">
    ///     This is a class that contains all the logic (properties and methods) that controls this widget's behavior.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates whether the widget is visible.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibleElements">
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetContent">
    ///     The content of the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetId">
    ///     The unique ID assigned to the widget when the widget is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PopupWidget(
        IReadOnlyList<ActionBase>? actions = null,
        PopupAlignment? alignment = null,
        bool? autoCloseEnabled = null,
        string? containerId = null,
        bool? defaultPopupTemplateEnabled = null,
        bool? dockEnabled = null,
        PopupDockOptions? dockOptions = null,
        IReadOnlyList<Graphic>? features = null,
        GoToOverride? goToOverride = null,
        int? headingLevel = null,
        bool? highlightEnabled = null,
        ElementReference? htmlContent = null,
        string? icon = null,
        string? label = null,
        Point? location = null,
        MapView? mapView = null,
        OverlayPosition? position = null,
        object? promises = null,
        int? selectedFeatureIndex = null,
        string? stringContent = null,
        string? title = null,
        PopupViewModel? viewModel = null,
        bool? visible = null,
        PopupVisibleElements? visibleElements = null,
        Widget? widgetContent = null,
        string? widgetId = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Actions = actions;
        Alignment = alignment;
        AutoCloseEnabled = autoCloseEnabled;
        ContainerId = containerId;
        DefaultPopupTemplateEnabled = defaultPopupTemplateEnabled;
        DockEnabled = dockEnabled;
        DockOptions = dockOptions;
        Features = features;
        GoToOverride = goToOverride;
        HeadingLevel = headingLevel;
        HighlightEnabled = highlightEnabled;
        HtmlContent = htmlContent;
        Icon = icon;
        Label = label;
        Location = location;
        MapView = mapView;
        Position = position;
        Promises = promises;
        SelectedFeatureIndex = selectedFeatureIndex;
        StringContent = stringContent;
        Title = title;
        ViewModel = viewModel;
        Visible = visible;
        VisibleElements = visibleElements;
        WidgetContent = widgetContent;
        WidgetId = widgetId;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates if the widget is active when it is visible and is not <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup-PopupViewModel.html#waitingForResult">waiting for results</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#active">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? Active { get; protected set; }
    
    /// <summary>
    ///     Dock position in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#currentDockPosition">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public CurrentDockPosition? CurrentDockPosition { get; protected set; }
    
    /// <summary>
    ///     Docking the popup allows for a better user experience, particularly when opening popups in apps on mobile devices.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupDockOptions? DockOptions { get; set; }
    
    /// <summary>
    ///     The number of selected <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#features">features</a> available to the popup.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#featureCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public int? FeatureCount { get; protected set; }
    
    /// <summary>
    ///     An array of features associated with the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#features">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Graphic>? Features { get; set; }
    
    /// <summary>
    ///     The content of the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ElementReference? HtmlContent { get; set; }
    
    /// <summary>
    ///     Point used to position the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#location">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Location { get; set; }
    
    /// <summary>
    ///     An array of pending Promises that have not yet been fulfilled.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#promises">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public object? Promises { get; set; }
    
    /// <summary>
    ///     The selected feature accessed by the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#selectedFeature">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Graphic? SelectedFeature { get; protected set; }
    
    /// <summary>
    ///     Index of the feature that is <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#selectedFeature">selected</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#selectedFeatureIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? SelectedFeatureIndex { get; set; }
    
    /// <summary>
    ///     Returns a reference to the current <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html">Feature</a> that the Popup is using.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#selectedFeatureWidget">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IFeatureWidget? SelectedFeatureWidget { get; protected set; }
    
    /// <summary>
    ///     This is a class that contains all the logic (properties and methods) that controls this widget's behavior.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupViewModel? ViewModel { get; set; }
    
    /// <summary>
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupVisibleElements? VisibleElements { get; set; }
    
    /// <summary>
    ///     The content of the popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Widget? WidgetContent { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Active property.
    /// </summary>
    public async Task<bool?> GetActive()
    {
        if (CoreJsModule is null)
        {
            return Active;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Active;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "active");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Active = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Active)] = Active;
        }
         
        return Active;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Alignment property.
    /// </summary>
    public async Task<PopupAlignment?> GetAlignment()
    {
        if (CoreJsModule is null)
        {
            return Alignment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Alignment;
        }

        // get the property value
        JsNullableEnumWrapper<PopupAlignment>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<PopupAlignment>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "alignment");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Alignment = (PopupAlignment)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Alignment)] = Alignment;
        }
         
        return Alignment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AutoCloseEnabled property.
    /// </summary>
    public async Task<bool?> GetAutoCloseEnabled()
    {
        if (CoreJsModule is null)
        {
            return AutoCloseEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AutoCloseEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "autoCloseEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AutoCloseEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AutoCloseEnabled)] = AutoCloseEnabled;
        }
         
        return AutoCloseEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Collapsed property.
    /// </summary>
    public async Task<bool?> GetCollapsed()
    {
        if (CoreJsModule is null)
        {
            return Collapsed;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Collapsed;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "collapsed");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Collapsed = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Collapsed)] = Collapsed;
        }
         
        return Collapsed;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CurrentDockPosition property.
    /// </summary>
    public async Task<CurrentDockPosition?> GetCurrentDockPosition()
    {
        if (CoreJsModule is null)
        {
            return CurrentDockPosition;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CurrentDockPosition;
        }

        // get the property value
        JsNullableEnumWrapper<CurrentDockPosition>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<CurrentDockPosition>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "currentDockPosition");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CurrentDockPosition = (CurrentDockPosition)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CurrentDockPosition)] = CurrentDockPosition;
        }
         
        return CurrentDockPosition;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultPopupTemplateEnabled property.
    /// </summary>
    public async Task<bool?> GetDefaultPopupTemplateEnabled()
    {
        if (CoreJsModule is null)
        {
            return DefaultPopupTemplateEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultPopupTemplateEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "defaultPopupTemplateEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DefaultPopupTemplateEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultPopupTemplateEnabled)] = DefaultPopupTemplateEnabled;
        }
         
        return DefaultPopupTemplateEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DockEnabled property.
    /// </summary>
    public async Task<bool?> GetDockEnabled()
    {
        if (CoreJsModule is null)
        {
            return DockEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DockEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dockEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DockEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DockEnabled)] = DockEnabled;
        }
         
        return DockEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DockOptions property.
    /// </summary>
    public async Task<PopupDockOptions?> GetDockOptions()
    {
        if (CoreJsModule is null)
        {
            return DockOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DockOptions;
        }

        PopupDockOptions? result = await JsComponentReference.InvokeAsync<PopupDockOptions?>(
            "getDockOptions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            DockOptions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(DockOptions)] = DockOptions;
        }
        
        return DockOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Features property.
    /// </summary>
    public async Task<IReadOnlyList<Graphic>?> GetFeatures()
    {
        if (CoreJsModule is null)
        {
            return Features;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Features;
        }

        IReadOnlyList<Graphic>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Graphic>?>(
            "getFeatures", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Features = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Features)] = Features;
        }
        
        return Features;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HeadingLevel property.
    /// </summary>
    public async Task<int?> GetHeadingLevel()
    {
        if (CoreJsModule is null)
        {
            return HeadingLevel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HeadingLevel;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "headingLevel");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HeadingLevel = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HeadingLevel)] = HeadingLevel;
        }
         
        return HeadingLevel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HighlightEnabled property.
    /// </summary>
    public async Task<bool?> GetHighlightEnabled()
    {
        if (CoreJsModule is null)
        {
            return HighlightEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HighlightEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "highlightEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HighlightEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HighlightEnabled)] = HighlightEnabled;
        }
         
        return HighlightEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HtmlContent property.
    /// </summary>
    public async Task<ElementReference?> GetHtmlContent()
    {
        if (CoreJsModule is null)
        {
            return HtmlContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HtmlContent;
        }

        // get the property value
        JsNullableElementReferenceWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableElementReferenceWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "htmlContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HtmlContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HtmlContent)] = HtmlContent;
        }
         
        return HtmlContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Location property.
    /// </summary>
    public async Task<Point?> GetLocation()
    {
        if (CoreJsModule is null)
        {
            return Location;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Location;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getLocation", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Location is not null)
            {
                result.Id = Location.Id;
            }
            
#pragma warning disable BL0005
            Location = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Location)] = Location;
        }
        
        return Location;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Promises property.
    /// </summary>
    public async Task<object?> GetPromises()
    {
        if (CoreJsModule is null)
        {
            return Promises;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Promises;
        }

        // get the property value
        object? result = await JsComponentReference!.InvokeAsync<object?>("getProperty",
            CancellationTokenSource.Token, "promises");
        if (result is not null)
        {
#pragma warning disable BL0005
             Promises = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Promises)] = Promises;
        }
         
        return Promises;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedFeatureWidget property.
    /// </summary>
    public async Task<IFeatureWidget?> GetSelectedFeatureWidget()
    {
        if (CoreJsModule is null)
        {
            return SelectedFeatureWidget;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedFeatureWidget;
        }

        // get the property value
        IFeatureWidget? result = await JsComponentReference!.InvokeAsync<IFeatureWidget?>("getProperty",
            CancellationTokenSource.Token, "selectedFeatureWidget");
        if (result is not null)
        {
#pragma warning disable BL0005
             SelectedFeatureWidget = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectedFeatureWidget)] = SelectedFeatureWidget;
        }
         
        return SelectedFeatureWidget;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringContent property.
    /// </summary>
    public async Task<string?> GetStringContent()
    {
        if (CoreJsModule is null)
        {
            return StringContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StringContent;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "stringContent");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringContent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringContent)] = StringContent;
        }
         
        return StringContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<PopupViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        PopupViewModel? result = await JsComponentReference.InvokeAsync<PopupViewModel?>(
            "getViewModel", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ViewModel is not null)
            {
                result.Id = ViewModel.Id;
            }
            
#pragma warning disable BL0005
            ViewModel = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
        
        return ViewModel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleElements property.
    /// </summary>
    public async Task<PopupVisibleElements?> GetVisibleElements()
    {
        if (CoreJsModule is null)
        {
            return VisibleElements;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibleElements;
        }

        PopupVisibleElements? result = await JsComponentReference.InvokeAsync<PopupVisibleElements?>(
            "getVisibleElements", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            VisibleElements = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
        }
        
        return VisibleElements;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WidgetContent property.
    /// </summary>
    public async Task<Widget?> GetWidgetContent()
    {
        if (CoreJsModule is null)
        {
            return WidgetContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return WidgetContent;
        }

        Widget? result = await JsComponentReference.InvokeAsync<Widget?>(
            "getWidgetContent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (WidgetContent is not null)
            {
                result.Id = WidgetContent.Id;
            }
            
#pragma warning disable BL0005
            WidgetContent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(WidgetContent)] = WidgetContent;
        }
        
        return WidgetContent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Alignment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAlignment(PopupAlignment? value)
    {
#pragma warning disable BL0005
        Alignment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Alignment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "alignment", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AutoCloseEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAutoCloseEnabled(bool? value)
    {
#pragma warning disable BL0005
        AutoCloseEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AutoCloseEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "autoCloseEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultPopupTemplateEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultPopupTemplateEnabled(bool? value)
    {
#pragma warning disable BL0005
        DefaultPopupTemplateEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultPopupTemplateEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultPopupTemplateEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DockEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDockEnabled(bool? value)
    {
#pragma warning disable BL0005
        DockEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DockEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dockEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DockOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDockOptions(PopupDockOptions? value)
    {
#pragma warning disable BL0005
        DockOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DockOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setDockOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Features property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatures(IReadOnlyList<Graphic>? value)
    {
#pragma warning disable BL0005
        Features = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Features)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFeatures", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HeadingLevel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeadingLevel(int? value)
    {
#pragma warning disable BL0005
        HeadingLevel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HeadingLevel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "headingLevel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HighlightEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHighlightEnabled(bool? value)
    {
#pragma warning disable BL0005
        HighlightEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HighlightEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "highlightEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HtmlContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHtmlContent(ElementReference? value)
    {
#pragma warning disable BL0005
        HtmlContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HtmlContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "htmlContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Location property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocation(Point? value)
    {
#pragma warning disable BL0005
        Location = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Location)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLocation", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Promises property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPromises(object? value)
    {
#pragma warning disable BL0005
        Promises = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Promises)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "promises", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectedFeatureIndex property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectedFeatureIndex(int? value)
    {
#pragma warning disable BL0005
        SelectedFeatureIndex = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectedFeatureIndex)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selectedFeatureIndex", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringContent(string? value)
    {
#pragma warning disable BL0005
        StringContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "stringContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(PopupViewModel? value)
    {
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setViewModel", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibleElements property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibleElements(PopupVisibleElements? value)
    {
#pragma warning disable BL0005
        VisibleElements = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibleElements)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setVisibleElements", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the WidgetContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWidgetContent(Widget? value)
    {
#pragma warning disable BL0005
        WidgetContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(WidgetContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setWidgetContent", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Features property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFeatures(params Graphic[] values)
    {
        Graphic[] join = Features is null
            ? values
            : [..Features, ..values];
        await SetFeatures(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Features property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFeatures(params Graphic[] values)
    {
        if (Features is null)
        {
            return;
        }
        await SetFeatures(Features.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Use this method to remove focus from the Widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#blur">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Blur()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "blur", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Use this method to give focus to the Widget if the widget is able to be focused.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#focus">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Focus()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "focus", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Selects the feature at the next index in relation to the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#next">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<PopupViewModel?> Next()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PopupViewModel?>(
            "next", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Opens the popup at the given location with content defined either explicitly with `content` or driven from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> of input features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#open">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="options">
    /// </param>
    [ArcGISMethod]
    public async Task Open(PopupOpenOptions options)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "open", 
            CancellationTokenSource.Token,
            options);
    }
    
    /// <summary>
    ///     Selects the feature at the previous index in relation to the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#previous">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<PopupViewModel?> Previous()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PopupViewModel?>(
            "previous", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Positions the popup on the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#reposition">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Reposition()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "reposition", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Triggers the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#event-trigger-action">trigger-action</a> event and executes the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#actions">action</a> at the specified index in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#actions">actions</a> array.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#triggerAction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="actionIndex">
    /// </param>
    [ArcGISMethod]
    public async Task TriggerAction(int actionIndex)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "triggerAction", 
            CancellationTokenSource.Token,
            actionIndex);
    }
    
#endregion

#region Event Handlers

#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PopupDockOptions dockOptions:
                if (dockOptions != DockOptions)
                {
                    DockOptions = dockOptions;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(DockOptions)] = DockOptions;
                }
                
                return true;
            case Graphic features:
                Features ??= [];
                if (!Features.Contains(features))
                {
                    Features = [..Features, features];
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(Features)] = Features;
                }
                
                return true;
            case Point location:
                if (location != Location)
                {
                    Location = location;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(Location)] = Location;
                }
                
                return true;
            case PopupViewModel viewModel:
                if (viewModel != ViewModel)
                {
                    ViewModel = viewModel;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(ViewModel)] = ViewModel;
                }
                
                return true;
            case PopupVisibleElements visibleElements:
                if (visibleElements != VisibleElements)
                {
                    VisibleElements = visibleElements;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PopupDockOptions _:
                DockOptions = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(DockOptions)] = DockOptions;
                return true;
            case Graphic features:
                Features = Features?.Where(f => f != features).ToList();
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(Features)] = Features;
                return true;
            case Point _:
                Location = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(Location)] = Location;
                return true;
            case PopupViewModel _:
                ViewModel = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(ViewModel)] = ViewModel;
                return true;
            case PopupVisibleElements _:
                VisibleElements = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        DockOptions?.ValidateRequiredGeneratedChildren();
        if (Features is not null)
        {
            foreach (Graphic child in Features)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        Location?.ValidateRequiredGeneratedChildren();
        ViewModel?.ValidateRequiredGeneratedChildren();
        VisibleElements?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
