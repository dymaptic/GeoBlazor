// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.GridControlsWidget.html">GeoBlazor Docs</a>
///     The `GridControls` can be configured using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#visibleElements">visibleElements</a> below.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class GridControlsWidget : Widget
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public GridControlsWidget()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="containerId">
    ///     The id of an external HTML Element (div). If provided, the widget will be placed inside that element, instead of on the map.
    /// </param>
    /// <param name="customColor">
    ///     The custom color used for drawing the grid, if any.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#customColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="icon">
    ///     Icon which represents the widget.
    ///     default "grid-unit"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#icon">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     The widget's default label.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#label">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="mapView">
    ///     If the Widget is defined outside of the MapView, this link is required to connect them together.
    /// </param>
    /// <param name="position">
    ///     The position of the widget in relation to the map view.
    /// </param>
    /// <param name="snappingOptions">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html">SnappingOptions</a> that will be controlled by this
    ///     widget if the snapping toggle is enabled for display by <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#visibleElements">visibleElements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#snappingOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="theme">
    ///     The color scheme used to display the grid.
    ///     default "light"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#theme">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewModel">
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates whether the widget is visible.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibleElements">
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetId">
    ///     The unique ID assigned to the widget when the widget is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public GridControlsWidget(
        string? containerId = null,
        MapColor? customColor = null,
        string? icon = null,
        string? label = null,
        MapView? mapView = null,
        OverlayPosition? position = null,
        SnappingOptions? snappingOptions = null,
        Theme? theme = null,
        GridControlsViewModel? viewModel = null,
        bool? visible = null,
        GridControlsVisibleElements? visibleElements = null,
        string? widgetId = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ContainerId = containerId;
        CustomColor = customColor;
        Icon = icon;
        Label = label;
        MapView = mapView;
        Position = position;
        SnappingOptions = snappingOptions;
        Theme = theme;
        ViewModel = viewModel;
        Visible = visible;
        VisibleElements = visibleElements;
        WidgetId = widgetId;
#pragma warning restore BL0005    
    }
    
    
    /// <inheritdoc />
    public override WidgetType Type => WidgetType.GridControls;
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.GridControlsWidget.html#gridcontrolswidgetcustomcolor-property">GeoBlazor Docs</a>
    ///     The custom color used for drawing the grid, if any.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#customColor">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MapColor? CustomColor { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.GridControlsWidget.html#gridcontrolswidgetsnappingoptions-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html">SnappingOptions</a> that will be controlled by this
    ///     widget if the snapping toggle is enabled for display by <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#visibleElements">visibleElements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#snappingOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SnappingOptions? SnappingOptions { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.GridControlsWidget.html#gridcontrolswidgettheme-property">GeoBlazor Docs</a>
    ///     The color scheme used to display the grid.
    ///     default "light"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#theme">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Theme? Theme { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.GridControlsWidget.html#gridcontrolswidgetviewmodel-property">GeoBlazor Docs</a>
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public GridControlsViewModel? ViewModel { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Widgets.GridControlsWidget.html#gridcontrolswidgetvisibleelements-property">GeoBlazor Docs</a>
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public GridControlsVisibleElements? VisibleElements { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomColor property.
    /// </summary>
    public async Task<MapColor?> GetCustomColor()
    {
        if (CoreJsModule is null)
        {
            return CustomColor;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "customColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             CustomColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomColor)] = CustomColor;
        }
         
        return CustomColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SnappingOptions property.
    /// </summary>
    public async Task<SnappingOptions?> GetSnappingOptions()
    {
        if (CoreJsModule is null)
        {
            return SnappingOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SnappingOptions;
        }

        SnappingOptions? result = await JsComponentReference.InvokeAsync<SnappingOptions?>(
            "getSnappingOptions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SnappingOptions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
        }
        
        return SnappingOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Theme property.
    /// </summary>
    public async Task<Theme?> GetTheme()
    {
        if (CoreJsModule is null)
        {
            return Theme;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Theme;
        }

        Theme? result = await JsComponentReference.InvokeAsync<Theme?>(
            "getTheme", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Theme = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Theme)] = Theme;
        }
        
        return Theme;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<GridControlsViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        GridControlsViewModel? result = await JsComponentReference.InvokeAsync<GridControlsViewModel?>(
            "getViewModel", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ViewModel is not null)
            {
                result.Id = ViewModel.Id;
            }
            
#pragma warning disable BL0005
            ViewModel = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
        
        return ViewModel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleElements property.
    /// </summary>
    public async Task<GridControlsVisibleElements?> GetVisibleElements()
    {
        if (CoreJsModule is null)
        {
            return VisibleElements;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibleElements;
        }

        GridControlsVisibleElements? result = await JsComponentReference.InvokeAsync<GridControlsVisibleElements?>(
            "getVisibleElements", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            VisibleElements = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
        }
        
        return VisibleElements;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CustomColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomColor(MapColor? value)
    {
#pragma warning disable BL0005
        CustomColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SnappingOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSnappingOptions(SnappingOptions? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SnappingOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SnappingOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSnappingOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Theme property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTheme(Theme? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Theme = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Theme)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTheme", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(GridControlsViewModel? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setViewModel", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibleElements property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibleElements(GridControlsVisibleElements? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        VisibleElements = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibleElements)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setVisibleElements", 
            CancellationTokenSource.Token, value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SnappingOptions snappingOptions:
                if (snappingOptions != SnappingOptions)
                {
                    SnappingOptions = snappingOptions;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
                }
                
                return true;
            case Theme theme:
                if (theme != Theme)
                {
                    Theme = theme;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(Theme)] = Theme;
                }
                
                return true;
            case GridControlsViewModel viewModel:
                if (viewModel != ViewModel)
                {
                    ViewModel = viewModel;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(ViewModel)] = ViewModel;
                }
                
                return true;
            case GridControlsVisibleElements visibleElements:
                if (visibleElements != VisibleElements)
                {
                    VisibleElements = visibleElements;
                    WidgetChanged = MapRendered;
                    ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SnappingOptions _:
                SnappingOptions = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
                return true;
            case Theme _:
                Theme = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(Theme)] = Theme;
                return true;
            case GridControlsViewModel _:
                ViewModel = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(ViewModel)] = ViewModel;
                return true;
            case GridControlsVisibleElements _:
                VisibleElements = null;
                WidgetChanged = MapRendered;
                ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        SnappingOptions?.ValidateRequiredGeneratedChildren();
        Theme?.ValidateRequiredGeneratedChildren();
        ViewModel?.ValidateRequiredGeneratedChildren();
        VisibleElements?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
