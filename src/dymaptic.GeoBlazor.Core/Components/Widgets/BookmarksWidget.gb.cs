// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///    The Bookmarks widget allows end users to quickly navigate to a particular area of interest.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BookmarksWidget : IGoTo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BookmarksWidget()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="bookmarks">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-Bookmark.html">Bookmark</a>s.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#bookmarks">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultCreateOptions">
    ///     Specifies how new bookmarks will be created if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">visibleElements.addBookmarkButton</a> is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultCreateOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultEditOptions">
    ///     Specifies how bookmarks will be edited, if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">visibleElements.editBookmarkButton</a> is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultEditOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="disabled">
    ///     When true, the widget is visually withdrawn and cannot be interacted with.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#disabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dragEnabled">
    ///     Indicates if a Bookmark is able to be dragged in order to update its position in the list.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#dragEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filterPlaceholder">
    ///     Defines the text used as a placeholder when visibleElements.filter is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterPlaceholder">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filterText">
    ///     Defines the text used to filter the bookmarks when visibleElements.filter is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterText">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="goToOverride">
    ///     This function provides the ability to override either the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo">MapView goTo()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo">SceneView goTo()</a> methods.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="headingLevel">
    ///     Indicates the heading level to use for the message "No bookmarks" when no bookmarks are available in this widget.
    ///     default 2
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#headingLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="icon">
    ///     Icon which represents the widget.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#icon">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     The widget's label.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewModel">
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibleElements">
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetId">
    ///     The unique ID assigned to the widget when the widget is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public BookmarksWidget(
        IReadOnlyList<Bookmark>? bookmarks = null,
        BookmarkOptions? defaultCreateOptions = null,
        BookmarkOptions? defaultEditOptions = null,
        bool? disabled = null,
        bool? dragEnabled = null,
        string? filterPlaceholder = null,
        string? filterText = null,
        GoToOverride? goToOverride = null,
        int? headingLevel = null,
        string? icon = null,
        string? label = null,
        BookmarksViewModel? viewModel = null,
        BookmarksVisibleElements? visibleElements = null,
        string? widgetId = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Bookmarks = bookmarks;
        DefaultCreateOptions = defaultCreateOptions;
        DefaultEditOptions = defaultEditOptions;
        Disabled = disabled;
        DragEnabled = dragEnabled;
        FilterPlaceholder = filterPlaceholder;
        FilterText = filterText;
        GoToOverride = goToOverride;
        HeadingLevel = headingLevel;
        Icon = icon;
        Label = label;
        ViewModel = viewModel;
        VisibleElements = visibleElements;
        WidgetId = widgetId;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-Bookmark.html">Bookmark</a>s.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#bookmarks">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Bookmark>? Bookmarks { get; set; }
    
    /// <summary>
    ///     Specifies how new bookmarks will be created if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">visibleElements.addBookmarkButton</a> is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultCreateOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BookmarkOptions? DefaultCreateOptions { get; set; }
    
    /// <summary>
    ///     Specifies how bookmarks will be edited, if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">visibleElements.editBookmarkButton</a> is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultEditOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BookmarkOptions? DefaultEditOptions { get; set; }
    
    /// <summary>
    ///     Indicates if a Bookmark is able to be dragged in order to update its position in the list.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#dragEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DragEnabled { get; set; }
    
    /// <summary>
    ///     Defines the text used as a placeholder when visibleElements.filter is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterPlaceholder">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FilterPlaceholder { get; set; }
    
    /// <summary>
    ///     Defines the text used to filter the bookmarks when visibleElements.filter is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterText">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FilterText { get; set; }
    
    /// <summary>
    ///     This function provides the ability to override either the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo">MapView goTo()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo">SceneView goTo()</a> methods.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public GoToOverride? GoToOverride { get; set; }
    
    /// <summary>
    ///    JS-invokable method that triggers the <see cref="GoToOverride"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task OnJsGoToOverride(GoToOverrideParameters goToOverrideParameters)  
    {  
        if (GoToOverride is not null)  
        {
            await GoToOverride.Invoke(goToOverrideParameters);  
        }
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="GoToOverride" /> function was registered.
    /// </summary>
    public bool HasGoToOverride => GoToOverride is not null;
    
    /// <summary>
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BookmarksViewModel? ViewModel { get; set; }
    
    /// <summary>
    ///     The visible elements that are displayed within the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#visibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BookmarksVisibleElements? VisibleElements { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Bookmarks property.
    /// </summary>
    public async Task<IReadOnlyList<Bookmark>?> GetBookmarks()
    {
        if (CoreJsModule is null)
        {
            return Bookmarks;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Bookmarks;
        }

        // get the property value
        IReadOnlyList<Bookmark>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<Bookmark>?>("getProperty",
            CancellationTokenSource.Token, "bookmarks");
        if (result is not null)
        {
#pragma warning disable BL0005
             Bookmarks = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Bookmarks)] = Bookmarks;
        }
         
        return Bookmarks;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultCreateOptions property.
    /// </summary>
    public async Task<BookmarkOptions?> GetDefaultCreateOptions()
    {
        if (CoreJsModule is null)
        {
            return DefaultCreateOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DefaultCreateOptions;
        }

        // get the property value
        BookmarkOptions? result = await JsComponentReference!.InvokeAsync<BookmarkOptions?>("getProperty",
            CancellationTokenSource.Token, "defaultCreateOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             DefaultCreateOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultCreateOptions)] = DefaultCreateOptions;
        }
         
        return DefaultCreateOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultEditOptions property.
    /// </summary>
    public async Task<BookmarkOptions?> GetDefaultEditOptions()
    {
        if (CoreJsModule is null)
        {
            return DefaultEditOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DefaultEditOptions;
        }

        // get the property value
        BookmarkOptions? result = await JsComponentReference!.InvokeAsync<BookmarkOptions?>("getProperty",
            CancellationTokenSource.Token, "defaultEditOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             DefaultEditOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultEditOptions)] = DefaultEditOptions;
        }
         
        return DefaultEditOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Disabled property.
    /// </summary>
    public async Task<bool?> GetDisabled()
    {
        if (CoreJsModule is null)
        {
            return Disabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Disabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "disabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Disabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Disabled)] = Disabled;
        }
         
        return Disabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DragEnabled property.
    /// </summary>
    public async Task<bool?> GetDragEnabled()
    {
        if (CoreJsModule is null)
        {
            return DragEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DragEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dragEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DragEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DragEnabled)] = DragEnabled;
        }
         
        return DragEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FilterPlaceholder property.
    /// </summary>
    public async Task<string?> GetFilterPlaceholder()
    {
        if (CoreJsModule is null)
        {
            return FilterPlaceholder;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FilterPlaceholder;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "filterPlaceholder");
        if (result is not null)
        {
#pragma warning disable BL0005
             FilterPlaceholder = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FilterPlaceholder)] = FilterPlaceholder;
        }
         
        return FilterPlaceholder;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FilterText property.
    /// </summary>
    public async Task<string?> GetFilterText()
    {
        if (CoreJsModule is null)
        {
            return FilterText;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FilterText;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "filterText");
        if (result is not null)
        {
#pragma warning disable BL0005
             FilterText = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FilterText)] = FilterText;
        }
         
        return FilterText;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HeadingLevel property.
    /// </summary>
    public async Task<int?> GetHeadingLevel()
    {
        if (CoreJsModule is null)
        {
            return HeadingLevel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HeadingLevel;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "headingLevel");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HeadingLevel = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HeadingLevel)] = HeadingLevel;
        }
         
        return HeadingLevel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<BookmarksViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        BookmarksViewModel? result = await JsComponentReference.InvokeAsync<BookmarksViewModel?>(
            "getViewModel", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ViewModel is not null)
            {
                result.Id = ViewModel.Id;
            }
            
#pragma warning disable BL0005
            ViewModel = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
        
        return ViewModel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleElements property.
    /// </summary>
    public async Task<BookmarksVisibleElements?> GetVisibleElements()
    {
        if (CoreJsModule is null)
        {
            return VisibleElements;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return VisibleElements;
        }

        // get the property value
        BookmarksVisibleElements? result = await JsComponentReference!.InvokeAsync<BookmarksVisibleElements?>("getProperty",
            CancellationTokenSource.Token, "visibleElements");
        if (result is not null)
        {
#pragma warning disable BL0005
             VisibleElements = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
        }
         
        return VisibleElements;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Bookmarks property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBookmarks(IReadOnlyList<Bookmark>? value)
    {
#pragma warning disable BL0005
        Bookmarks = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Bookmarks)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bookmarks", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultCreateOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultCreateOptions(BookmarkOptions? value)
    {
#pragma warning disable BL0005
        DefaultCreateOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultCreateOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultCreateOptions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultEditOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultEditOptions(BookmarkOptions? value)
    {
#pragma warning disable BL0005
        DefaultEditOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultEditOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultEditOptions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Disabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDisabled(bool? value)
    {
#pragma warning disable BL0005
        Disabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Disabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "disabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DragEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDragEnabled(bool? value)
    {
#pragma warning disable BL0005
        DragEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DragEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dragEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FilterPlaceholder property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilterPlaceholder(string? value)
    {
#pragma warning disable BL0005
        FilterPlaceholder = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FilterPlaceholder)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filterPlaceholder", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FilterText property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilterText(string? value)
    {
#pragma warning disable BL0005
        FilterText = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FilterText)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filterText", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HeadingLevel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeadingLevel(int? value)
    {
#pragma warning disable BL0005
        HeadingLevel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HeadingLevel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "headingLevel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(BookmarksViewModel? value)
    {
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setViewModel", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibleElements property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibleElements(BookmarksVisibleElements? value)
    {
#pragma warning disable BL0005
        VisibleElements = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibleElements)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setVisibleElements", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Bookmarks property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBookmarks(params Bookmark[] values)
    {
        Bookmark[] join = Bookmarks is null
            ? values
            : [..Bookmarks, ..values];
        await SetBookmarks(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Bookmarks property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBookmarks(params Bookmark[] values)
    {
        if (Bookmarks is null)
        {
            return;
        }
        await SetBookmarks(Bookmarks.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Zoom to a specific bookmark.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#goTo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="bookmark">
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GoTo(Bookmark bookmark)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "goTo", 
            CancellationTokenSource.Token,
            bookmark);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsBookmarkEdit(BookmarksBookmarkEditEvent bookmarkEditEvent)
    {
        await OnBookmarkEdit.InvokeAsync(bookmarkEditEvent);
    }
    
    /// <summary>
    ///     Event Listener for BookmarkEdit.
    /// </summary>
    [Parameter]
    public EventCallback<BookmarksBookmarkEditEvent> OnBookmarkEdit { get; set; }
   
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case BookmarksViewModel viewModel:
                if (viewModel != ViewModel)
                {
                    ViewModel = viewModel;
                    WidgetChanged = true;
                    ModifiedParameters[nameof(ViewModel)] = ViewModel;
                }
                
                return true;
            case BookmarksVisibleElements visibleElements:
                if (visibleElements != VisibleElements)
                {
                    VisibleElements = visibleElements;
                    WidgetChanged = true;
                    ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case BookmarksViewModel _:
                ViewModel = null;
                WidgetChanged = true;
                ModifiedParameters[nameof(ViewModel)] = ViewModel;
                return true;
            case BookmarksVisibleElements _:
                VisibleElements = null;
                WidgetChanged = true;
                ModifiedParameters[nameof(VisibleElements)] = VisibleElements;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ViewModel?.ValidateRequiredGeneratedChildren();
        VisibleElements?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
