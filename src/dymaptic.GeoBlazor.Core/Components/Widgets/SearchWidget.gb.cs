// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Widgets;


/// <summary>
///    The Search widget provides a way to perform search operations on <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-locator.html">locator service(s)</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html">map</a>/<a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html">feature</a> service feature layer(s), <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SceneLayer.html">SceneLayers</a> with an associated feature layer, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-buildingSublayers-BuildingComponentSublayer.html">BuildingComponentSublayer</a> with an associated feature layer, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html">GeoJSONLayer</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html">CSVLayer</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OGCFeatureLayer.html">OGCFeatureLayer</a>, and/or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-SearchTable.html">table(s)</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class SearchWidget : IGoTo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public SearchWidget()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#sources">source</a> object currently selected.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#activeSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ISearchWidgetActiveSource? ActiveSource { get; protected set; }
    
    /// <summary>
    ///     The combined collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchViewModel.html#defaultSources">defaultSources</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchViewModel.html#sources">sources</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#allSources">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ISearchWidgetAllSources>? AllSources { get; protected set; }
    
    /// <summary>
    ///     A read-only property that is a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LayerSearchSource.html">LayerSearchSource</a> and/or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html">LocatorSearchSource</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#defaultSources">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ISearchWidgetDefaultSources>? DefaultSources { get; protected set; }
    
    /// <summary>
    ///     This function provides the ability to override either the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo">MapView goTo()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo">SceneView goTo()</a> methods.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public GoToOverride? GoToOverride { get; set; }
    
    /// <summary>
    ///    JS-invokable method that triggers the <see cref="GoToOverride"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task OnJsGoToOverride(GoToOverrideParameters goToOverrideParameters)  
    {  
        if (GoToOverride is not null)  
        {
            await GoToOverride.Invoke(goToOverrideParameters);  
        }
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="GoToOverride" /> function was registered.
    /// </summary>
    public bool HasGoToOverride => GoToOverride is not null;
    
    /// <summary>
    ///     The graphic used to highlight the resulting feature or location.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#resultGraphic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Graphic? ResultGraphic { get; protected set; }
    
    /// <summary>
    ///     An array of objects, each containing a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#SearchResult">SearchResult</a> from the search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#results">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Results { get; protected set; }
    
    /// <summary>
    ///     The result selected from a search.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#selectedResult">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SearchResult? SelectedResult { get; protected set; }
    
    /// <summary>
    ///     The Search widget may be used to search features in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html">map</a>/<a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html">feature</a> service feature layer(s), <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SceneLayer.html">SceneLayers</a> with an associated feature layer, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-buildingSublayers-BuildingComponentSublayer.html">BuildingComponentSublayer</a> with an associated feature layer, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html">GeoJSONLayer</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html">CSVLayer</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OGCFeatureLayer.html">OGCFeatureLayer</a>, or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-SearchTable.html">table</a>, or geocode locations with a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-locator.html">locator</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#sources">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SearchSource>? Sources { get; set; }
    
    /// <summary>
    ///     An array of results from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#suggest">suggest method</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#suggestions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SuggestResult>? Suggestions { get; protected set; }
    
    /// <summary>
    ///     The view model for this widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#viewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SearchViewModel? ViewModel { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveSource property.
    /// </summary>
    public async Task<ISearchWidgetActiveSource?> GetActiveSource()
    {
        if (CoreJsModule is null)
        {
            return ActiveSource;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ActiveSource;
        }

        // get the property value
        ISearchWidgetActiveSource? result = await JsComponentReference!.InvokeAsync<ISearchWidgetActiveSource?>("getProperty",
            CancellationTokenSource.Token, "activeSource");
        if (result is not null)
        {
#pragma warning disable BL0005
             ActiveSource = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActiveSource)] = ActiveSource;
        }
         
        return ActiveSource;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllPlaceholder property.
    /// </summary>
    public async Task<string?> GetAllPlaceholder()
    {
        if (CoreJsModule is null)
        {
            return AllPlaceholder;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllPlaceholder;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "allPlaceholder");
        if (result is not null)
        {
#pragma warning disable BL0005
             AllPlaceholder = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AllPlaceholder)] = AllPlaceholder;
        }
         
        return AllPlaceholder;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllSources property.
    /// </summary>
    public async Task<IReadOnlyList<ISearchWidgetAllSources>?> GetAllSources()
    {
        if (CoreJsModule is null)
        {
            return AllSources;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllSources;
        }

        // get the property value
        IReadOnlyList<ISearchWidgetAllSources>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ISearchWidgetAllSources>?>("getProperty",
            CancellationTokenSource.Token, "allSources");
        if (result is not null)
        {
#pragma warning disable BL0005
             AllSources = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AllSources)] = AllSources;
        }
         
        return AllSources;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AutoSelect property.
    /// </summary>
    public async Task<bool?> GetAutoSelect()
    {
        if (CoreJsModule is null)
        {
            return AutoSelect;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AutoSelect;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "autoSelect");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AutoSelect = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AutoSelect)] = AutoSelect;
        }
         
        return AutoSelect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultSources property.
    /// </summary>
    public async Task<IReadOnlyList<ISearchWidgetDefaultSources>?> GetDefaultSources()
    {
        if (CoreJsModule is null)
        {
            return DefaultSources;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DefaultSources;
        }

        // get the property value
        IReadOnlyList<ISearchWidgetDefaultSources>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ISearchWidgetDefaultSources>?>("getProperty",
            CancellationTokenSource.Token, "defaultSources");
        if (result is not null)
        {
#pragma warning disable BL0005
             DefaultSources = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultSources)] = DefaultSources;
        }
         
        return DefaultSources;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Disabled property.
    /// </summary>
    public async Task<bool?> GetDisabled()
    {
        if (CoreJsModule is null)
        {
            return Disabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Disabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "disabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Disabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Disabled)] = Disabled;
        }
         
        return Disabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IncludeDefaultSources property.
    /// </summary>
    public async Task<bool?> GetIncludeDefaultSources()
    {
        if (CoreJsModule is null)
        {
            return IncludeDefaultSources;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IncludeDefaultSources;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "includeDefaultSources");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IncludeDefaultSources = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IncludeDefaultSources)] = IncludeDefaultSources;
        }
         
        return IncludeDefaultSources;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LocationEnabled property.
    /// </summary>
    public async Task<bool?> GetLocationEnabled()
    {
        if (CoreJsModule is null)
        {
            return LocationEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LocationEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "locationEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LocationEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LocationEnabled)] = LocationEnabled;
        }
         
        return LocationEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxResults property.
    /// </summary>
    public async Task<int?> GetMaxResults()
    {
        if (CoreJsModule is null)
        {
            return MaxResults;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaxResults;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxResults");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxResults = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxResults)] = MaxResults;
        }
         
        return MaxResults;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxSuggestions property.
    /// </summary>
    public async Task<int?> GetMaxSuggestions()
    {
        if (CoreJsModule is null)
        {
            return MaxSuggestions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaxSuggestions;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxSuggestions");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxSuggestions = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxSuggestions)] = MaxSuggestions;
        }
         
        return MaxSuggestions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinSuggestCharacters property.
    /// </summary>
    public async Task<int?> GetMinSuggestCharacters()
    {
        if (CoreJsModule is null)
        {
            return MinSuggestCharacters;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MinSuggestCharacters;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minSuggestCharacters");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinSuggestCharacters = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinSuggestCharacters)] = MinSuggestCharacters;
        }
         
        return MinSuggestCharacters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupEnabled property.
    /// </summary>
    public async Task<bool?> GetPopupEnabled()
    {
        if (CoreJsModule is null)
        {
            return PopupEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PopupEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "popupEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PopupEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PopupEnabled)] = PopupEnabled;
        }
         
        return PopupEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupTemplate property.
    /// </summary>
    public async Task<PopupTemplate?> GetPopupTemplate()
    {
        if (CoreJsModule is null)
        {
            return PopupTemplate;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PopupTemplate;
        }

        // get the property value
        PopupTemplate? result = await JsComponentReference!.InvokeAsync<PopupTemplate?>("getProperty",
            CancellationTokenSource.Token, "popupTemplate");
        if (result is not null)
        {
#pragma warning disable BL0005
             PopupTemplate = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
        }
         
        return PopupTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Portal property.
    /// </summary>
    public async Task<Portal?> GetPortal()
    {
        if (CoreJsModule is null)
        {
            return Portal;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Portal;
        }

        Portal? result = await JsComponentReference.InvokeAsync<Portal?>(
            "getPortal", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Portal is not null)
            {
                result.Id = Portal.Id;
            }
            
#pragma warning disable BL0005
            Portal = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Portal)] = Portal;
        }
        
        return Portal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ResultGraphicEnabled property.
    /// </summary>
    public async Task<bool?> GetResultGraphicEnabled()
    {
        if (CoreJsModule is null)
        {
            return ResultGraphicEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ResultGraphicEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "resultGraphicEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ResultGraphicEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ResultGraphicEnabled)] = ResultGraphicEnabled;
        }
         
        return ResultGraphicEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SearchAllEnabled property.
    /// </summary>
    public async Task<bool?> GetSearchAllEnabled()
    {
        if (CoreJsModule is null)
        {
            return SearchAllEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SearchAllEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "searchAllEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SearchAllEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SearchAllEnabled)] = SearchAllEnabled;
        }
         
        return SearchAllEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Sources property.
    /// </summary>
    public async Task<IReadOnlyList<SearchSource>?> GetSources()
    {
        if (CoreJsModule is null)
        {
            return Sources;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Sources;
        }

        // get the property value
        IReadOnlyList<SearchSource>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<SearchSource>?>("getProperty",
            CancellationTokenSource.Token, "sources");
        if (result is not null)
        {
#pragma warning disable BL0005
             Sources = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Sources)] = Sources;
        }
         
        return Sources;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SuggestionsEnabled property.
    /// </summary>
    public async Task<bool?> GetSuggestionsEnabled()
    {
        if (CoreJsModule is null)
        {
            return SuggestionsEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SuggestionsEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "suggestionsEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SuggestionsEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SuggestionsEnabled)] = SuggestionsEnabled;
        }
         
        return SuggestionsEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ViewModel property.
    /// </summary>
    public async Task<SearchViewModel?> GetViewModel()
    {
        if (CoreJsModule is null)
        {
            return ViewModel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ViewModel;
        }

        // get the property value
        SearchViewModel? result = await JsComponentReference!.InvokeAsync<SearchViewModel?>("getProperty",
            CancellationTokenSource.Token, "viewModel");
        if (result is not null)
        {
#pragma warning disable BL0005
             ViewModel = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ViewModel)] = ViewModel;
        }
         
        return ViewModel;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActiveMenu property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveMenu(SearchMenu? value)
    {
#pragma warning disable BL0005
        ActiveMenu = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveMenu)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "activeMenu", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ActiveSourceIndex property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveSourceIndex(int? value)
    {
#pragma warning disable BL0005
        ActiveSourceIndex = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveSourceIndex)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "activeSourceIndex", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AllPlaceholder property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAllPlaceholder(string? value)
    {
#pragma warning disable BL0005
        AllPlaceholder = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AllPlaceholder)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "allPlaceholder", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AutoSelect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAutoSelect(bool? value)
    {
#pragma warning disable BL0005
        AutoSelect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AutoSelect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "autoSelect", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Disabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDisabled(bool? value)
    {
#pragma warning disable BL0005
        Disabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Disabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "disabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IncludeDefaultSources property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIncludeDefaultSources(bool? value)
    {
#pragma warning disable BL0005
        IncludeDefaultSources = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IncludeDefaultSources)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "includeDefaultSources", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LocationEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocationEnabled(bool? value)
    {
#pragma warning disable BL0005
        LocationEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LocationEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "locationEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxResults property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxResults(int? value)
    {
#pragma warning disable BL0005
        MaxResults = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxResults)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxResults", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxSuggestions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxSuggestions(int? value)
    {
#pragma warning disable BL0005
        MaxSuggestions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxSuggestions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxSuggestions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinSuggestCharacters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinSuggestCharacters(int? value)
    {
#pragma warning disable BL0005
        MinSuggestCharacters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinSuggestCharacters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minSuggestCharacters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupEnabled(bool? value)
    {
#pragma warning disable BL0005
        PopupEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "popupEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupTemplate(PopupTemplate? value)
    {
#pragma warning disable BL0005
        PopupTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPopupTemplate", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Portal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortal(Portal? value)
    {
#pragma warning disable BL0005
        Portal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Portal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPortal", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ResultGraphicEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetResultGraphicEnabled(bool? value)
    {
#pragma warning disable BL0005
        ResultGraphicEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ResultGraphicEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "resultGraphicEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SearchAllEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSearchAllEnabled(bool? value)
    {
#pragma warning disable BL0005
        SearchAllEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SearchAllEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "searchAllEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Sources property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSources(IReadOnlyList<SearchSource>? value)
    {
#pragma warning disable BL0005
        Sources = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Sources)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSources", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SuggestionsEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSuggestionsEnabled(bool? value)
    {
#pragma warning disable BL0005
        SuggestionsEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SuggestionsEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "suggestionsEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewModel(SearchViewModel? value)
    {
#pragma warning disable BL0005
        ViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "viewModel", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Sources property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSources(params SearchSource[] values)
    {
        SearchSource[] join = Sources is null
            ? values
            : [..Sources, ..values];
        await SetSources(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Sources property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSources(params SearchSource[] values)
    {
        if (Sources is null)
        {
            return;
        }
        await SetSources(Sources.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Unfocuses the widget's text input.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#blur">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Blur()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "blur", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Clears the current searchTerm, search results, suggest results, graphic, and graphics layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#clear">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Clear()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "clear", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Brings focus to the widget's text input.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#focus">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Focus()
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "focus", 
            CancellationTokenSource.Token);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSearchBlur(SearchBlurEvent searchBlurEvent)
    {
        await OnSearchBlur.InvokeAsync(searchBlurEvent);
    }
    
    /// <summary>
    ///     Event Listener for SearchBlur.
    /// </summary>
    [Parameter]
    public EventCallback<SearchBlurEvent> OnSearchBlur { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSearchClear(SearchClearEvent searchClearEvent)
    {
        await OnSearchClear.InvokeAsync(searchClearEvent);
    }
    
    /// <summary>
    ///     Event Listener for SearchClear.
    /// </summary>
    [Parameter]
    public EventCallback<SearchClearEvent> OnSearchClear { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSearchComplete(SearchCompleteEvent searchCompleteEvent)
    {
        await OnSearchComplete.InvokeAsync(searchCompleteEvent);
    }
    
    /// <summary>
    ///     Event Listener for SearchComplete.
    /// </summary>
    [Parameter]
    public EventCallback<SearchCompleteEvent> OnSearchComplete { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSearchFocus(SearchFocusEvent searchFocusEvent)
    {
        await OnSearchFocus.InvokeAsync(searchFocusEvent);
    }
    
    /// <summary>
    ///     Event Listener for SearchFocus.
    /// </summary>
    [Parameter]
    public EventCallback<SearchFocusEvent> OnSearchFocus { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSearchStart(SearchStartEvent searchStartEvent)
    {
        await OnSearchStart.InvokeAsync(searchStartEvent);
    }
    
    /// <summary>
    ///     Event Listener for SearchStart.
    /// </summary>
    [Parameter]
    public EventCallback<SearchStartEvent> OnSearchStart { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSelectResult(SearchSelectResultEvent selectResultEvent)
    {
        await OnSelectResult.InvokeAsync(selectResultEvent);
    }
    
    /// <summary>
    ///     Event Listener for SelectResult.
    /// </summary>
    [Parameter]
    public EventCallback<SearchSelectResultEvent> OnSelectResult { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSuggestComplete(SearchSuggestCompleteEvent suggestCompleteEvent)
    {
        await OnSuggestComplete.InvokeAsync(suggestCompleteEvent);
    }
    
    /// <summary>
    ///     Event Listener for SuggestComplete.
    /// </summary>
    [Parameter]
    public EventCallback<SearchSuggestCompleteEvent> OnSuggestComplete { get; set; }
   
    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsSuggestStart(SearchSuggestStartEvent suggestStartEvent)
    {
        await OnSuggestStart.InvokeAsync(suggestStartEvent);
    }
    
    /// <summary>
    ///     Event Listener for SuggestStart.
    /// </summary>
    [Parameter]
    public EventCallback<SearchSuggestStartEvent> OnSuggestStart { get; set; }
   
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Graphic resultGraphic:
                if (resultGraphic != ResultGraphic)
                {
                    ResultGraphic = resultGraphic;
                    WidgetChanged = true;
                    ModifiedParameters[nameof(ResultGraphic)] = ResultGraphic;
                }
                
                return true;
            case SearchSource sources:
                Sources ??= [];
                if (!Sources.Contains(sources))
                {
                    Sources = [..Sources, sources];
                    WidgetChanged = true;
                    ModifiedParameters[nameof(Sources)] = Sources;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Graphic _:
                ResultGraphic = null;
                WidgetChanged = true;
                ModifiedParameters[nameof(ResultGraphic)] = ResultGraphic;
                return true;
            case SearchSource sources:
                Sources = Sources?.Where(s => s != sources).ToList();
                WidgetChanged = true;
                ModifiedParameters[nameof(Sources)] = Sources;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ResultGraphic?.ValidateRequiredGeneratedChildren();
        if (Sources is not null)
        {
            foreach (SearchSource child in Sources)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
