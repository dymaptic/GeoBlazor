// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.DistanceMeasurement2DViewModel.html">GeoBlazor Docs</a>
///     Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D.html">DistanceMeasurement2D</a> widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class DistanceMeasurement2DViewModel : MapComponent,
    IMeasurementViewModelActiveViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public DistanceMeasurement2DViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="unit">
    ///     Unit system (imperial, metric) or specific unit used for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#unit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="unitOptions">
    ///     List of available units and unit systems (imperial, metric) for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#unitOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public DistanceMeasurement2DViewModel(
        SystemOrLengthUnit? unit = null,
        IReadOnlyList<SystemOrLengthUnit>? unitOptions = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Unit = unit;
        UnitOptions = unitOptions;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The length and geometry of the measurement polyline in meters.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#measurement">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public DistanceMeasurement2DViewModelMeasurement? Measurement { get; protected set; }
    
    /// <summary>
    ///     This property returns the locale specific representation of the length.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#measurementLabel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? MeasurementLabel { get; protected set; }
    
    /// <summary>
    ///     The view model's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public MeasurementViewModelState? State { get; protected set; }
    
    /// <summary>
    ///     Unit system (imperial, metric) or specific unit used for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#unit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SystemOrLengthUnit? Unit { get; set; }
    
    /// <summary>
    ///     List of available units and unit systems (imperial, metric) for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#unitOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SystemOrLengthUnit>? UnitOptions { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Measurement property.
    /// </summary>
    public async Task<DistanceMeasurement2DViewModelMeasurement?> GetMeasurement()
    {
        if (CoreJsModule is null)
        {
            return Measurement;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Measurement;
        }

        DistanceMeasurement2DViewModelMeasurement? result = await JsComponentReference.InvokeAsync<DistanceMeasurement2DViewModelMeasurement?>(
            "getMeasurement", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Measurement = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Measurement)] = Measurement;
        }
        
        return Measurement;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MeasurementLabel property.
    /// </summary>
    public async Task<string?> GetMeasurementLabel()
    {
        if (CoreJsModule is null)
        {
            return MeasurementLabel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MeasurementLabel;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "measurementLabel");
        if (result is not null)
        {
#pragma warning disable BL0005
             MeasurementLabel = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MeasurementLabel)] = MeasurementLabel;
        }
         
        return MeasurementLabel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<MeasurementViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<MeasurementViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<MeasurementViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (MeasurementViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Unit property.
    /// </summary>
    public async Task<SystemOrLengthUnit?> GetUnit()
    {
        if (CoreJsModule is null)
        {
            return Unit;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Unit;
        }

        // get the property value
        JsNullableEnumWrapper<SystemOrLengthUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SystemOrLengthUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "unit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Unit = (SystemOrLengthUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Unit)] = Unit;
        }
         
        return Unit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UnitOptions property.
    /// </summary>
    public async Task<IReadOnlyList<SystemOrLengthUnit>?> GetUnitOptions()
    {
        if (CoreJsModule is null)
        {
            return UnitOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UnitOptions;
        }

        // get the property value
        IReadOnlyList<SystemOrLengthUnit>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<SystemOrLengthUnit>?>("getProperty",
            CancellationTokenSource.Token, "unitOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             UnitOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UnitOptions)] = UnitOptions;
        }
         
        return UnitOptions;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Unit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnit(SystemOrLengthUnit? value)
    {
#pragma warning disable BL0005
        Unit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Unit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "unit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UnitOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnitOptions(IReadOnlyList<SystemOrLengthUnit>? value)
    {
#pragma warning disable BL0005
        UnitOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UnitOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "unitOptions", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the UnitOptions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUnitOptions(params SystemOrLengthUnit[] values)
    {
        SystemOrLengthUnit[] join = UnitOptions is null
            ? values
            : [..UnitOptions, ..values];
        await SetUnitOptions(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the UnitOptions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUnitOptions(params SystemOrLengthUnit[] values)
    {
        if (UnitOptions is null)
        {
            return;
        }
        await SetUnitOptions(UnitOptions.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Clears the current measurement.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#clear">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Clear()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "clear", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Starts a new measurement.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D-DistanceMeasurement2DViewModel.html#start">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Start()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "start", 
            CancellationTokenSource.Token);
    }
    
#endregion

}
