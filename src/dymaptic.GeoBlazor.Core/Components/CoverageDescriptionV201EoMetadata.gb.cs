// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The WCS 2.0 Earth Observation coverage metadata.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoverageDescriptionV201EoMetadata : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoverageDescriptionV201EoMetadata()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="observation">
    ///     Earth observation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoverageDescriptionV201EoMetadata(
        CoverageDescriptionV201EoMetadataObservation? observation = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Observation = observation;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Earth observation.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201EoMetadataObservation? Observation { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Observation property.
    /// </summary>
    public async Task<CoverageDescriptionV201EoMetadataObservation?> GetObservation()
    {
        if (CoreJsModule is null)
        {
            return Observation;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Observation;
        }

        // get the property value
        CoverageDescriptionV201EoMetadataObservation? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201EoMetadataObservation?>("getProperty",
            CancellationTokenSource.Token, "observation");
        if (result is not null)
        {
#pragma warning disable BL0005
             Observation = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Observation)] = Observation;
        }
         
        return Observation;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Observation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetObservation(CoverageDescriptionV201EoMetadataObservation? value)
    {
#pragma warning disable BL0005
        Observation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Observation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setObservation", 
            CancellationTokenSource.Token, value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CoverageDescriptionV201EoMetadataObservation observation:
                if (observation != Observation)
                {
                    Observation = observation;
                    
                    ModifiedParameters[nameof(Observation)] = Observation;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CoverageDescriptionV201EoMetadataObservation _:
                Observation = null;
                
                ModifiedParameters[nameof(Observation)] = Observation;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Observation?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
