// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Object describing the attributes of each vertex of the mesh.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshVertexAttributes : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshVertexAttributes()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="color">
    ///     Since: 4.9  A flat array of the vertex colors (4 elements per vertex ranging from 0 to 255).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normal">
    ///     A flat array of the vertex normals (3 elements per vertex ranging from -1 to 1).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="position">
    ///     A flat array of vertex positions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tangent">
    ///     Since: 4.11  A flat array of the vertex tangents (4 elements per vertex ranging from -1 to 1.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="uv">
    ///     A flat array of vertex uv coordinates (2 elements per vertex).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshVertexAttributes(
        Stream? color = null,
        float[]? normal = null,
        double[]? position = null,
        float[]? tangent = null,
        float[]? uv = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Color = color;
        Normal = normal;
        Position = position;
        Tangent = tangent;
        Uv = uv;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Since: 4.9  A flat array of the vertex colors (4 elements per vertex ranging from 0 to 255).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Stream? Color { get; set; }
    
    /// <summary>
    ///     A flat array of the vertex normals (3 elements per vertex ranging from -1 to 1).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public float[]? Normal { get; set; }
    
    /// <summary>
    ///     A flat array of vertex positions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double[]? Position { get; set; }
    
    /// <summary>
    ///     Since: 4.11  A flat array of the vertex tangents (4 elements per vertex ranging from -1 to 1.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public float[]? Tangent { get; set; }
    
    /// <summary>
    ///     A flat array of vertex uv coordinates (2 elements per vertex).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public float[]? Uv { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Color property.
    /// </summary>
    public async Task<Stream?> GetColor()
    {
        if (CoreJsModule is null)
        {
            return Color;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Color;
        }

        // get the property value
        Stream? result = await JsComponentReference!.InvokeAsync<Stream?>("getProperty",
            CancellationTokenSource.Token, "color");
        if (result is not null)
        {
#pragma warning disable BL0005
             Color = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Color)] = Color;
        }
         
        return Color;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Normal property.
    /// </summary>
    public async Task<float[]?> GetNormal()
    {
        if (CoreJsModule is null)
        {
            return Normal;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Normal;
        }

        // get the property value
        float[]? result = await JsComponentReference!.InvokeAsync<float[]?>("getProperty",
            CancellationTokenSource.Token, "normal");
        if (result is not null)
        {
#pragma warning disable BL0005
             Normal = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Normal)] = Normal;
        }
         
        return Normal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Position property.
    /// </summary>
    public async Task<double[]?> GetPosition()
    {
        if (CoreJsModule is null)
        {
            return Position;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Position;
        }

        // get the property value
        double[]? result = await JsComponentReference!.InvokeAsync<double[]?>("getProperty",
            CancellationTokenSource.Token, "position");
        if (result is not null)
        {
#pragma warning disable BL0005
             Position = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Position)] = Position;
        }
         
        return Position;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Tangent property.
    /// </summary>
    public async Task<float[]?> GetTangent()
    {
        if (CoreJsModule is null)
        {
            return Tangent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Tangent;
        }

        // get the property value
        float[]? result = await JsComponentReference!.InvokeAsync<float[]?>("getProperty",
            CancellationTokenSource.Token, "tangent");
        if (result is not null)
        {
#pragma warning disable BL0005
             Tangent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Tangent)] = Tangent;
        }
         
        return Tangent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Uv property.
    /// </summary>
    public async Task<float[]?> GetUv()
    {
        if (CoreJsModule is null)
        {
            return Uv;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Uv;
        }

        // get the property value
        float[]? result = await JsComponentReference!.InvokeAsync<float[]?>("getProperty",
            CancellationTokenSource.Token, "uv");
        if (result is not null)
        {
#pragma warning disable BL0005
             Uv = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Uv)] = Uv;
        }
         
        return Uv;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Color property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColor(Stream? value)
    {
#pragma warning disable BL0005
        Color = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Color)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "color", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Normal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNormal(float[]? value)
    {
#pragma warning disable BL0005
        Normal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Normal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "normal", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Position property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPosition(double[]? value)
    {
#pragma warning disable BL0005
        Position = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Position)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "position", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Tangent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTangent(float[]? value)
    {
#pragma warning disable BL0005
        Tangent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Tangent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tangent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Uv property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUv(float[]? value)
    {
#pragma warning disable BL0005
        Uv = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Uv)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "uv", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Normal property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToNormal(params float[] values)
    {
        float[] join = Normal is null
            ? values
            : [..Normal, ..values];
        await SetNormal(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Position property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToPosition(params double[] values)
    {
        double[] join = Position is null
            ? values
            : [..Position, ..values];
        await SetPosition(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Tangent property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTangent(params float[] values)
    {
        float[] join = Tangent is null
            ? values
            : [..Tangent, ..values];
        await SetTangent(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Uv property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUv(params float[] values)
    {
        float[] join = Uv is null
            ? values
            : [..Uv, ..values];
        await SetUv(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Normal property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromNormal(params float[] values)
    {
        if (Normal is null)
        {
            return;
        }
        await SetNormal(Normal.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Position property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromPosition(params double[] values)
    {
        if (Position is null)
        {
            return;
        }
        await SetPosition(Position.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Tangent property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTangent(params float[] values)
    {
        if (Tangent is null)
        {
            return;
        }
        await SetTangent(Tangent.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Uv property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUv(params float[] values)
    {
        if (Uv is null)
        {
            return;
        }
        await SetUv(Uv.Except(values).ToArray());
    }
    
#endregion

}
