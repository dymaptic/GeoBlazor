// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LayerListViewModel : MapComponent,
    IViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LayerListViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="checkPublishStatusEnabled">
    ///     Whether to provide an indication if a layer is being published in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#checkPublishStatusEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="listItemCreatedFunction">
    ///     Specifies a function that accesses each <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#listItemCreatedFunction">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="listModeDisabled">
    ///     Specifies whether to ignore the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">listMode</a> property of the layers to display all layers.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#listModeDisabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LayerListViewModel(
        bool? checkPublishStatusEnabled = null,
        LayerListListItemCreatedHandler? listItemCreatedFunction = null,
        bool? listModeDisabled = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        CheckPublishStatusEnabled = checkPublishStatusEnabled;
        ListItemCreatedFunction = listItemCreatedFunction;
        ListModeDisabled = listModeDisabled;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Whether to provide an indication if a layer is being published in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#checkPublishStatusEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CheckPublishStatusEnabled { get; set; }
    
    /// <summary>
    ///     Specifies a function that accesses each <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#listItemCreatedFunction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public LayerListListItemCreatedHandler? ListItemCreatedFunction { get; set; }
    
    /// <summary>
    ///    JS-invokable method that triggers the <see cref="ListItemCreatedFunction"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task OnJsListItemCreatedFunction(string @event)
    {
        if (ListItemCreatedFunction is not null)
        {
            await ListItemCreatedFunction.Invoke(@event);
        }
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="ListItemCreatedFunction" /> function was registered.
    /// </summary>
    public bool HasListItemCreatedFunction => ListItemCreatedFunction is not null;
    
    /// <summary>
    ///     Specifies whether to ignore the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">listMode</a> property of the layers to display all layers.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#listModeDisabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ListModeDisabled { get; set; }
    
    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>s representing operational layers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#operationalItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<ListItem>? OperationalItems { get; protected set; }
    
    /// <summary>
    ///     The view model's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public ViewModelState? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CheckPublishStatusEnabled property.
    /// </summary>
    public async Task<bool?> GetCheckPublishStatusEnabled()
    {
        if (CoreJsModule is null)
        {
            return CheckPublishStatusEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CheckPublishStatusEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "checkPublishStatusEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CheckPublishStatusEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CheckPublishStatusEnabled)] = CheckPublishStatusEnabled;
        }
         
        return CheckPublishStatusEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ListModeDisabled property.
    /// </summary>
    public async Task<bool?> GetListModeDisabled()
    {
        if (CoreJsModule is null)
        {
            return ListModeDisabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ListModeDisabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "listModeDisabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ListModeDisabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ListModeDisabled)] = ListModeDisabled;
        }
         
        return ListModeDisabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OperationalItems property.
    /// </summary>
    public async Task<IReadOnlyList<ListItem>?> GetOperationalItems()
    {
        if (CoreJsModule is null)
        {
            return OperationalItems;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OperationalItems;
        }

        // get the property value
        IReadOnlyList<ListItem>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ListItem>?>("getProperty",
            CancellationTokenSource.Token, "operationalItems");
        if (result is not null)
        {
#pragma warning disable BL0005
             OperationalItems = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OperationalItems)] = OperationalItems;
        }
         
        return OperationalItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<ViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<ViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (ViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CheckPublishStatusEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCheckPublishStatusEnabled(bool? value)
    {
#pragma warning disable BL0005
        CheckPublishStatusEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CheckPublishStatusEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "checkPublishStatusEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ListModeDisabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetListModeDisabled(bool? value)
    {
#pragma warning disable BL0005
        ListModeDisabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ListModeDisabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "listModeDisabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Moves a list item from one position to another in the LayerList widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#moveListItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="targetItem">
    ///     The list item (or layer) to move.
    /// </param>
    /// <param name="fromParentItem">
    ///     If the <code>targetItem</code> is a child of a parent list item and you want to move it out of the parentItem, then use this parameter to indicate the parent item to move from.
    /// </param>
    /// <param name="toParentItem">
    ///     The parent list item to move the <code>targetItem</code> to if moving it as a child to another parent item.
    /// </param>
    /// <param name="newIndex">
    ///     The new index to move the <code>targetItem</code> to. If moving the item as a child to a parent item, then specify the index of the item within that parent.
    /// </param>
    [ArcGISMethod]
    public async Task MoveListItem(ListItem targetItem,
        ListItem fromParentItem,
        ListItem toParentItem,
        int newIndex)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "moveListItem", 
            CancellationTokenSource.Token,
            targetItem,
            fromParentItem,
            toParentItem,
            newIndex);
    }
    
    /// <summary>
    ///     Triggers the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#event-trigger-action">trigger-action</a> event and executes the given <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#triggerAction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="action">
    ///     The action to execute.
    /// </param>
    /// <param name="item">
    ///     An item associated with the action.
    /// </param>
    [ArcGISMethod]
    public async Task TriggerAction(ActionBase action,
        ListItem item)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "triggerAction", 
            CancellationTokenSource.Token,
            action,
            item);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsTriggerAction(LayerListViewModelTriggerActionEvent triggerActionEvent)
    {
        await OnTriggerAction.InvokeAsync(triggerActionEvent);
    }
    
    /// <summary>
    ///     Fires after the user clicks on an <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a> inside the LayerList widget.
    ///     This event may be used to define a custom function to execute when particular
    ///     actions are clicked.
    /// </summary>
    [Parameter]
    public EventCallback<LayerListViewModelTriggerActionEvent> OnTriggerAction { get; set; }
   
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ListItem operationalItems:
                OperationalItems ??= [];
                if (!OperationalItems.Contains(operationalItems))
                {
                    OperationalItems = [..OperationalItems, operationalItems];
                    
                    ModifiedParameters[nameof(OperationalItems)] = OperationalItems;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ListItem operationalItems:
                OperationalItems = OperationalItems?.Where(o => o != operationalItems).ToList();
                
                ModifiedParameters[nameof(OperationalItems)] = OperationalItems;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (OperationalItems is not null)
        {
            foreach (ListItem child in OperationalItems)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
