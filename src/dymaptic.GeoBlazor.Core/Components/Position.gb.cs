// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Position.html">GeoBlazor Docs</a>
///     Describes a point in terms of a location, a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html">Point</a>, and a coordinate, a string.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-CoordinateConversionViewModel.html#Position">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Position : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Position()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="coordinate">
    ///     A string representing the location.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-CoordinateConversionViewModel.html#Position">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="location">
    ///     A point geometry representing the location described by the conversion.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-CoordinateConversionViewModel.html#Position">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Position(
        string? coordinate = null,
        Point? location = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Coordinate = coordinate;
        Location = location;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A string representing the location.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-CoordinateConversionViewModel.html#Position">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Coordinate { get; set; }
    
    /// <summary>
    ///     A point geometry representing the location described by the conversion.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-CoordinateConversionViewModel.html#Position">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Location { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Coordinate property.
    /// </summary>
    public async Task<string?> GetCoordinate()
    {
        if (CoreJsModule is null)
        {
            return Coordinate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Coordinate;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "coordinate");
        if (result is not null)
        {
#pragma warning disable BL0005
             Coordinate = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Coordinate)] = Coordinate;
        }
         
        return Coordinate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Location property.
    /// </summary>
    public async Task<Point?> GetLocation()
    {
        if (CoreJsModule is null)
        {
            return Location;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Location;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getLocation", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Location is not null)
            {
                result.Id = Location.Id;
            }
            
#pragma warning disable BL0005
            Location = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Location)] = Location;
        }
        
        return Location;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Coordinate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCoordinate(string? value)
    {
#pragma warning disable BL0005
        Coordinate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Coordinate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "coordinate", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Location property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocation(Point? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Location = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Location)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "location", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Point location:
                if (location != Location)
                {
                    Location = location;
                    
                    ModifiedParameters[nameof(Location)] = Location;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Point _:
                Location = null;
                
                ModifiedParameters[nameof(Location)] = Location;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Location?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
