// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    ActiveLayerInfo is added to or removed from the collection of activeLayerInfos as layers become visible or invisible in the view.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ActiveLayerInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ActiveLayerInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="hideLayersNotInCurrentView">
    ///     When `true`, layers will only be shown in the legend if they are visible in the view's extent.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#hideLayersNotInCurrentView">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isScaleDriven">
    ///     Indicates if the legend's display of the layer's renderer is driven by the scale of the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#isScaleDriven">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layer">
    ///     The layer represented by the ActiveLayerInfo object.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#layer">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerView">
    ///     The layerView represented by the ActiveLayerInfo object's layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#layerView">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendElements">
    ///     The legendElements is constructed using the layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html">Renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#legendElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="ready">
    ///     Indicates if the activeLayerInfo is ready.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#ready">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="respectLayerVisibility">
    ///     Determines whether to respect the properties of the layers in the map that control the legend's visibility (`minScale`, `maxScale`, `legendEnabled`).
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#respectLayerVisibility">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="scale">
    ///     The scale of the view instance in which the Legend is rendered.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#scale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sublayerIds">
    ///     Only applies if the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#layer">layer</a> is a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html">MapImageLayer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#sublayerIds">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The text string that represents the legend's title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="version">
    ///     The version of the ActiveLayerInfo.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#version">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ActiveLayerInfo(
        bool? hideLayersNotInCurrentView = null,
        bool? isScaleDriven = null,
        Layer? layer = null,
        LayerView? layerView = null,
        IReadOnlyList<ILegendElement>? legendElements = null,
        bool? ready = null,
        bool? respectLayerVisibility = null,
        double? scale = null,
        IReadOnlyList<long>? sublayerIds = null,
        string? title = null,
        double? version = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        HideLayersNotInCurrentView = hideLayersNotInCurrentView;
        IsScaleDriven = isScaleDriven;
        Layer = layer;
        LayerView = layerView;
        LegendElements = legendElements;
        Ready = ready;
        RespectLayerVisibility = respectLayerVisibility;
        Scale = scale;
        SublayerIds = sublayerIds;
        Title = title;
        Version = version;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A collection of child activeLayerInfos.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#children">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ActiveLayerInfo>? Children { get; set; }
    
    /// <summary>
    ///     When `true`, layers will only be shown in the legend if they are visible in the view's extent.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#hideLayersNotInCurrentView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HideLayersNotInCurrentView { get; set; }
    
    /// <summary>
    ///     Indicates if the legend's display of the layer's renderer is driven by the scale of the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#isScaleDriven">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsScaleDriven { get; set; }
    
    /// <summary>
    ///     The layerView represented by the ActiveLayerInfo object's layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#layerView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerView? LayerView { get; set; }
    
    /// <summary>
    ///     The legendElements is constructed using the layer <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html">Renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#legendElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ILegendElement>? LegendElements { get; set; }
    
    /// <summary>
    ///     The opacity of the layer or parent element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#opacity">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Opacity { get; protected set; }
    
    /// <summary>
    ///     Indicates if the activeLayerInfo is ready.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#ready">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Ready { get; set; }
    
    /// <summary>
    ///     Determines whether to respect the properties of the layers in the map that control the legend's visibility (`minScale`, `maxScale`, `legendEnabled`).
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#respectLayerVisibility">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RespectLayerVisibility { get; set; }
    
    /// <summary>
    ///     The scale of the view instance in which the Legend is rendered.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#scale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Scale { get; set; }
    
    /// <summary>
    ///     Only applies if the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#layer">layer</a> is a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html">MapImageLayer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#sublayerIds">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<long>? SublayerIds { get; set; }
    
    /// <summary>
    ///     The text string that represents the legend's title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     The version of the ActiveLayerInfo.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#version">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Version { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the HideLayersNotInCurrentView property.
    /// </summary>
    public async Task<bool?> GetHideLayersNotInCurrentView()
    {
        if (CoreJsModule is null)
        {
            return HideLayersNotInCurrentView;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HideLayersNotInCurrentView;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hideLayersNotInCurrentView");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HideLayersNotInCurrentView = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HideLayersNotInCurrentView)] = HideLayersNotInCurrentView;
        }
         
        return HideLayersNotInCurrentView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsScaleDriven property.
    /// </summary>
    public async Task<bool?> GetIsScaleDriven()
    {
        if (CoreJsModule is null)
        {
            return IsScaleDriven;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IsScaleDriven;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isScaleDriven");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsScaleDriven = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsScaleDriven)] = IsScaleDriven;
        }
         
        return IsScaleDriven;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Layer property.
    /// </summary>
    public async Task<Layer?> GetLayer()
    {
        if (CoreJsModule is null)
        {
            return Layer;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Layer;
        }

        Layer? result = await JsComponentReference.InvokeAsync<Layer?>(
            "getLayer", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Layer is not null)
            {
                result.Id = Layer.Id;
            }
            
#pragma warning disable BL0005
            Layer = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Layer)] = Layer;
        }
        
        return Layer;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerView property.
    /// </summary>
    public async Task<LayerView?> GetLayerView()
    {
        if (CoreJsModule is null)
        {
            return LayerView;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LayerView;
        }

        // get the property value
        LayerView? result = await JsComponentReference!.InvokeAsync<LayerView?>("getProperty",
            CancellationTokenSource.Token, "layerView");
        if (result is not null)
        {
#pragma warning disable BL0005
             LayerView = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LayerView)] = LayerView;
        }
         
        return LayerView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendElements property.
    /// </summary>
    public async Task<IReadOnlyList<ILegendElement>?> GetLegendElements()
    {
        if (CoreJsModule is null)
        {
            return LegendElements;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LegendElements;
        }

        // get the property value
        IReadOnlyList<ILegendElement>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ILegendElement>?>("getProperty",
            CancellationTokenSource.Token, "legendElements");
        if (result is not null)
        {
#pragma warning disable BL0005
             LegendElements = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LegendElements)] = LegendElements;
        }
         
        return LegendElements;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Opacity property.
    /// </summary>
    public async Task<double?> GetOpacity()
    {
        if (CoreJsModule is null)
        {
            return Opacity;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Opacity;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "opacity");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Opacity = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Opacity)] = Opacity;
        }
         
        return Opacity;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Ready property.
    /// </summary>
    public async Task<bool?> GetReady()
    {
        if (CoreJsModule is null)
        {
            return Ready;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Ready;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "ready");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Ready = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Ready)] = Ready;
        }
         
        return Ready;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RespectLayerVisibility property.
    /// </summary>
    public async Task<bool?> GetRespectLayerVisibility()
    {
        if (CoreJsModule is null)
        {
            return RespectLayerVisibility;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RespectLayerVisibility;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "respectLayerVisibility");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RespectLayerVisibility = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RespectLayerVisibility)] = RespectLayerVisibility;
        }
         
        return RespectLayerVisibility;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Scale property.
    /// </summary>
    public async Task<double?> GetScale()
    {
        if (CoreJsModule is null)
        {
            return Scale;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Scale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "scale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Scale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Scale)] = Scale;
        }
         
        return Scale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SublayerIds property.
    /// </summary>
    public async Task<IReadOnlyList<long>?> GetSublayerIds()
    {
        if (CoreJsModule is null)
        {
            return SublayerIds;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SublayerIds;
        }

        // get the property value
        IReadOnlyList<long>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<long>?>("getProperty",
            CancellationTokenSource.Token, "sublayerIds");
        if (result is not null)
        {
#pragma warning disable BL0005
             SublayerIds = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SublayerIds)] = SublayerIds;
        }
         
        return SublayerIds;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Version property.
    /// </summary>
    public async Task<double?> GetVersion()
    {
        if (CoreJsModule is null)
        {
            return Version;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Version;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "version");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Version = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Version)] = Version;
        }
         
        return Version;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the HideLayersNotInCurrentView property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHideLayersNotInCurrentView(bool? value)
    {
#pragma warning disable BL0005
        HideLayersNotInCurrentView = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HideLayersNotInCurrentView)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hideLayersNotInCurrentView", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsScaleDriven property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsScaleDriven(bool? value)
    {
#pragma warning disable BL0005
        IsScaleDriven = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsScaleDriven)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isScaleDriven", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Layer property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayer(Layer? value)
    {
#pragma warning disable BL0005
        Layer = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Layer)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLayer", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerView property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerView(LayerView? value)
    {
#pragma warning disable BL0005
        LayerView = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerView)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerView", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendElements property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendElements(IReadOnlyList<ILegendElement>? value)
    {
#pragma warning disable BL0005
        LegendElements = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendElements)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "legendElements", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Ready property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReady(bool? value)
    {
#pragma warning disable BL0005
        Ready = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Ready)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "ready", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RespectLayerVisibility property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRespectLayerVisibility(bool? value)
    {
#pragma warning disable BL0005
        RespectLayerVisibility = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RespectLayerVisibility)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "respectLayerVisibility", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Scale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScale(double? value)
    {
#pragma warning disable BL0005
        Scale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Scale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "scale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SublayerIds property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSublayerIds(IReadOnlyList<long>? value)
    {
#pragma warning disable BL0005
        SublayerIds = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SublayerIds)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sublayerIds", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Version property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVersion(double? value)
    {
#pragma warning disable BL0005
        Version = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Version)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "version", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the LegendElements property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToLegendElements(params ILegendElement[] values)
    {
        ILegendElement[] join = LegendElements is null
            ? values
            : [..LegendElements, ..values];
        await SetLegendElements(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the SublayerIds property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSublayerIds(params long[] values)
    {
        long[] join = SublayerIds is null
            ? values
            : [..SublayerIds, ..values];
        await SetSublayerIds(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the LegendElements property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromLegendElements(params ILegendElement[] values)
    {
        if (LegendElements is null)
        {
            return;
        }
        await SetLegendElements(LegendElements.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the SublayerIds property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSublayerIds(params long[] values)
    {
        if (SublayerIds is null)
        {
            return;
        }
        await SetSublayerIds(SublayerIds.Except(values).ToArray());
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ActiveLayerInfo children:
                Children ??= [];
                if (!Children.Contains(children))
                {
                    Children = [..Children, children];
                    
                    ModifiedParameters[nameof(Children)] = Children;
                }
                
                return true;
            case LayerView layerView:
                if (layerView != LayerView)
                {
                    LayerView = layerView;
                    
                    ModifiedParameters[nameof(LayerView)] = LayerView;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ActiveLayerInfo children:
                Children = Children?.Where(c => c != children).ToList();
                
                ModifiedParameters[nameof(Children)] = Children;
                return true;
            case LayerView _:
                LayerView = null;
                
                ModifiedParameters[nameof(LayerView)] = LayerView;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Children is not null)
        {
            foreach (ActiveLayerInfo child in Children)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        LayerView?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
