// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A reference to a portal item resource.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PortalItemResource : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PortalItemResource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="path">
    ///     Path of the resource relative to `{ITEM}/resources/`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#path">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItem">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">portal item</a> that owns the resource.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PortalItemResource(
        string? path = null,
        PortalItem? portalItem = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Path = path;
        PortalItem = portalItem;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Path of the resource relative to `{ITEM}/resources/`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#path">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Path { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">portal item</a> that owns the resource.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalItem? PortalItem { get; set; }
    
    /// <summary>
    ///     The absolute url to the item resource.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Path property.
    /// </summary>
    public async Task<string?> GetPath()
    {
        if (CoreJsModule is null)
        {
            return Path;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Path;
        }

        // get the property value
#pragma warning disable BL0005
        Path = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "path");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Path)] = Path;
        return Path;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalItem property.
    /// </summary>
    public async Task<PortalItem?> GetPortalItem()
    {
        if (CoreJsModule is null)
        {
            return PortalItem;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PortalItem;
        }

        // get the JS object reference
        IJSObjectReference? refResult = await CoreJsModule!.InvokeAsync<IJSObjectReference?>(
            "getProperty", CancellationTokenSource.Token, JsComponentReference, 
            "portalItem");
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            PortalItem = await CoreJsModule.InvokeAsync<PortalItem?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(PortalItem)] = PortalItem;
            if (PortalItem is not null)
            {
                PortalItem.Parent = this;
                PortalItem.View = View;
                PortalItem.JsComponentReference = refResult;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, refResult, PortalItem.Id);
                return PortalItem;
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize PortalItem");
        }
#pragma warning disable BL0005
        PortalItem = new PortalItem();
#pragma warning restore BL0005
         ModifiedParameters[nameof(PortalItem)] = PortalItem;
        PortalItem.Parent = this;
        PortalItem.View = View;
        PortalItem.JsComponentReference = refResult;
        // register this type in JS
        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
            CancellationTokenSource.Token, refResult, PortalItem.Id);
        await PortalItem.GetProperty<PortalItemAccess>(nameof(PortalItem.Access));
        await PortalItem.GetProperty<string>(nameof(PortalItem.AccessInformation));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ApiKey));
        await PortalItem.GetProperty<IReadOnlyList<PortalItemApplicationProxies>>(nameof(PortalItem.ApplicationProxies));
        await PortalItem.GetProperty<double>(nameof(PortalItem.AvgRating));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.Categories));
        await PortalItem.GetProperty<DateTime>(nameof(PortalItem.Created));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Culture));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Description));
        await PortalItem.GetProperty<Extent>(nameof(PortalItem.Extent));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.GroupCategories));
        await PortalItem.GetProperty<bool>(nameof(PortalItem.IsLayer));
        await PortalItem.GetProperty<bool>(nameof(PortalItem.IsOrgItem));
        await PortalItem.GetProperty<ItemControl>(nameof(PortalItem.ItemControl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ItemPageUrl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ItemUrl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.LicenseInfo));
        await PortalItem.GetProperty<bool>(nameof(PortalItem.Loaded));
        await PortalItem.GetProperty<DateTime>(nameof(PortalItem.Modified));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Name));
        await PortalItem.GetProperty<double>(nameof(PortalItem.NumComments));
        await PortalItem.GetProperty<double>(nameof(PortalItem.NumRatings));
        await PortalItem.GetProperty<double>(nameof(PortalItem.NumViews));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Owner));
        await PortalItem.GetProperty<string>(nameof(PortalItem.OwnerFolder));
        await PortalItem.GetProperty<Portal>(nameof(PortalItem.Portal));
        await PortalItem.GetProperty<string>(nameof(PortalItem.PortalItemId));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.Screenshots));
        await PortalItem.GetProperty<int>(nameof(PortalItem.Size));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Snippet));
        await PortalItem.GetProperty<string>(nameof(PortalItem.SourceJSON));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.Tags));
        await PortalItem.GetProperty<string>(nameof(PortalItem.ThumbnailUrl));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Title));
        await PortalItem.GetProperty<IReadOnlyList<string>>(nameof(PortalItem.TypeKeywords));
        await PortalItem.GetProperty<string>(nameof(PortalItem.Url));
        return PortalItem;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
#pragma warning disable BL0005
        Url = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "url");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Url)] = Url;
        return Url;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Path property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPath(string value)
    {
#pragma warning disable BL0005
        Path = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Path)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "path", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalItem property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalItem(PortalItem value)
    {
#pragma warning disable BL0005
        PortalItem = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalItem)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        PortalItem.Parent = this;
        PortalItem.View = View;
        
        if (PortalItem.JsComponentReference is null)
        {
            // new MapComponent, needs to be built and registered in JS
            // this also calls back to OnJsComponentCreated
            IJSObjectReference jsObjectReference = await CoreJsModule.InvokeAsync<IJSObjectReference>(
                $"buildJsPortalItem", CancellationTokenSource.Token, 
                    PortalItem, View?.Id);
            // in case the fallback failed, set this here.
            PortalItem.JsComponentReference ??= jsObjectReference;
            
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference, "portalItem", jsObjectReference);
        }
        else
        {
            // this component has already been registered, but we'll call setProperty to make sure
            // it is attached to the parent
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference,
                "portalItem", PortalItem.JsComponentReference);
        }
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     Requests the PortalItemResource data in the format specified for the `responseType`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#fetch">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="responseType">
    ///     The format of the response.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> Fetch(ResponseType responseType,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "fetch", 
            CancellationTokenSource.Token,
            responseType,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Updates an existing resource with new content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html#update">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="content">
    ///     The resource content.
    /// </param>
    /// <param name="options">
    ///     An object wih the following properties.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> Update(Stream content,
        PortalItemResourceUpdateOptions options,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "update", 
            CancellationTokenSource.Token,
            content,
            new { access = options.Access, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion




    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PortalItem portalItem:
                if (portalItem != PortalItem)
                {
                    PortalItem = portalItem;
                    
                    ModifiedParameters[nameof(PortalItem)] = PortalItem;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PortalItem _:
                PortalItem = null;
                
                ModifiedParameters[nameof(PortalItem)] = PortalItem;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        PortalItem?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
