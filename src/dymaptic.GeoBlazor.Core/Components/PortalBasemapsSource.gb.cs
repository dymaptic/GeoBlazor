// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The PortalBasemapsSource class is a Portal-driven <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a> <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#source">source</a> in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html">BasemapGalleryViewModel</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PortalBasemapsSource : IBasemapGalleryWidgetSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PortalBasemapsSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="basemaps">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a>s.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-LocalBasemapsSource.html#basemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filterFunction">
    ///     Function used to filter basemaps after being fetched from the Portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#filterFunction">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portal">
    ///     The Portal from which to fetch basemaps.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="query">
    ///     An object with key-value pairs used to create a custom basemap gallery group query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#query">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="updateBasemapsCallback">
    ///     Callback for updating basemaps after being fetched and filtered.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#updateBasemapsCallback">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PortalBasemapsSource(
        IReadOnlyList<Basemap>? basemaps = null,
        BasemapFilter? filterFunction = null,
        Portal? portal = null,
        string? query = null,
        UpdateBasemapsCallback? updateBasemapsCallback = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Basemaps = basemaps;
        FilterFunction = filterFunction;
        Portal = portal;
        Query = query;
        UpdateBasemapsCallback = updateBasemapsCallback;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Function used to filter basemaps after being fetched from the Portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#filterFunction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public BasemapFilter? FilterFunction { get; set; }
    
    /// <summary>
    ///     JS-invokable method that triggers the <see cref="FilterFunction"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task<bool?> OnJsFilterFunction(Basemap item,
        int index,
        IReadOnlyCollection<Basemap> array)
    {
        bool? result = null;
    
        if (FilterFunction is not null)
        {
            result = await FilterFunction.Invoke(item,
                index,
                array);
        }
        
        return result;
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="FilterFunction" /> function was registered.
    /// </summary>
    public bool HasFilterFunction => FilterFunction is not null;
    
    /// <summary>
    ///     The Portal from which to fetch basemaps.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Portal? Portal { get; set; }
    
    /// <summary>
    ///     An object with key-value pairs used to create a custom basemap gallery group query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#query">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Query { get; set; }
    
    /// <summary>
    ///     Callback for updating basemaps after being fetched and filtered.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-PortalBasemapsSource.html#updateBasemapsCallback">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore]
    public UpdateBasemapsCallback? UpdateBasemapsCallback { get; set; }
    
    /// <summary>
    ///     JS-invokable method that triggers the <see cref="UpdateBasemapsCallback"/> function.
    ///     Should not be called by consuming code.
    /// </summary>
    [JSInvokable]
    public async Task<Basemap[]?> OnJsUpdateBasemapsCallback(IReadOnlyCollection<Basemap> items)
    {
        Basemap[]? result = null;
    
        if (UpdateBasemapsCallback is not null)
        {
            result = await UpdateBasemapsCallback.Invoke(items);
        }
        
        return result;
    }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="UpdateBasemapsCallback" /> function was registered.
    /// </summary>
    public bool HasUpdateBasemapsCallback => UpdateBasemapsCallback is not null;
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Portal property.
    /// </summary>
    public async Task<Portal?> GetPortal()
    {
        if (CoreJsModule is null)
        {
            return Portal;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Portal;
        }

        Portal? result = await JsComponentReference.InvokeAsync<Portal?>(
            "getPortal", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Portal is not null)
            {
                result.Id = Portal.Id;
            }
            
#pragma warning disable BL0005
            Portal = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Portal)] = Portal;
        }
        
        return Portal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Query property.
    /// </summary>
    public async Task<string?> GetQuery()
    {
        if (CoreJsModule is null)
        {
            return Query;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Query;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "query");
        if (result is not null)
        {
#pragma warning disable BL0005
             Query = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Query)] = Query;
        }
         
        return Query;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Portal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortal(Portal? value)
    {
#pragma warning disable BL0005
        Portal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Portal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPortal", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Query property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQuery(string? value)
    {
#pragma warning disable BL0005
        Query = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Query)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "query", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Portal portal:
                if (portal != Portal)
                {
                    Portal = portal;
                    
                    ModifiedParameters[nameof(Portal)] = Portal;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Portal _:
                Portal = null;
                
                ModifiedParameters[nameof(Portal)] = Portal;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Portal?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
