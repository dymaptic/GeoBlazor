// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.LocatorSearchSource.html">GeoBlazor Docs</a>
///     The following properties define a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#sources">source</a> pointing to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#url">url</a> that represents a locator service, which may be used to geocode locations with a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html">Search</a> widget instance.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LocatorSearchSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LocatorSearchSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="url">
    ///     URL to the ArcGIS Server REST resource that represents a locator service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="apiKey">
    ///     An authorization string used to access a resource or service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#apiKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="autoNavigate">
    ///     Indicates whether to automatically navigate to the selected result once selected.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#autoNavigate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="categories">
    ///     A string array which limits the results to one or more categories.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#categories">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="countryCode">
    ///     Constricts search results to a specified country code.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#countryCode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultZoomScale">
    ///     Sets the scale of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#scale">MapView</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#scale">SceneView</a> for the resulting search result, if the locator service doesnâ€™t return an extent with a scale.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#defaultZoomScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     For filtering suggests or search results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="getResultsHandler">
    ///     Function used to get search results.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#getResults">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="getSuggestionsHandler">
    ///     Function used to get search suggestions.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#getSuggestions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="localSearchDisabled">
    ///     This property controls prioritization of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html">Search</a> widget result candidates depending on the view scale.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#localSearchDisabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="locationType">
    ///     Defines the type of location, either `street` or `rooftop`, of the point returned from the <a target="_blank" href="https://developers.arcgis.com/rest/geocode/api-reference/geocoding-category-filtering.htm">World Geocoding Service</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#locationType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxResults">
    ///     Indicates the maximum number of search results to return.
    ///     default 6
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#maxResults">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxSuggestions">
    ///     Indicates the maximum number of suggestions to return for the widget's input.
    ///     default 6
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#maxSuggestions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minSuggestCharacters">
    ///     Indicates the minimum number of characters required before querying for a suggestion.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#minSuggestCharacters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     The name of the source for display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="outFields">
    ///     Specifies the fields returned with the search results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#outFields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="placeholder">
    ///     Used as a hint for the source input text.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#placeholder">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupEnabled">
    ///     Indicates whether to display a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">Popup</a> when a selected result is clicked.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#popupEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupTemplate">
    ///     The popup template used to display search results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="prefix">
    ///     Specify this to prefix the user's input of the search text.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#prefix">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resultGraphicEnabled">
    ///     Indicates whether to show a graphic on the map for the selected source using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#resultSymbol">resultSymbol</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#resultGraphicEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resultSymbol">
    ///     The symbol used to display the result.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#resultSymbol">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="searchTemplate">
    ///     A template string used to display multiple fields in a defined order when results are displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#searchTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="singleLineFieldName">
    ///     The field name of the Single Line Address Field in the REST services directory for the locator service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#singleLineFieldName">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="suffix">
    ///     Specify this to add a suffix to the user's input for the search value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#suffix">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="suggestionsEnabled">
    ///     Indicates whether to display suggestions as the user enters input text in the widget.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#suggestionsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="withinViewEnabled">
    ///     Indicates whether to constrain the search results to the view's extent.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#withinViewEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="zoomScale">
    ///     The set zoom scale for the resulting search result.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-SearchSource.html#zoomScale">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LocatorSearchSource(
        string? url = null,
        string? apiKey = null,
        bool? autoNavigate = null,
        IReadOnlyList<string>? categories = null,
        string? countryCode = null,
        double? defaultZoomScale = null,
        SearchSourceFilter? filter = null,
        GetResultsHandler? getResultsHandler = null,
        GetSuggestionsHandler? getSuggestionsHandler = null,
        bool? localSearchDisabled = null,
        LocatorSearchLocationType? locationType = null,
        int? maxResults = null,
        double? maxSuggestions = null,
        int? minSuggestCharacters = null,
        string? name = null,
        IReadOnlyList<string>? outFields = null,
        string? placeholder = null,
        bool? popupEnabled = null,
        PopupTemplate? popupTemplate = null,
        string? prefix = null,
        bool? resultGraphicEnabled = null,
        Symbol? resultSymbol = null,
        string? searchTemplate = null,
        string? singleLineFieldName = null,
        string? suffix = null,
        bool? suggestionsEnabled = null,
        bool? withinViewEnabled = null,
        double? zoomScale = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        if (url is not null)
        {
            Url = url;
        }
        ApiKey = apiKey;
        AutoNavigate = autoNavigate;
        Categories = categories;
        CountryCode = countryCode;
        DefaultZoomScale = defaultZoomScale;
        Filter = filter;
        GetResultsHandler = getResultsHandler;
        GetSuggestionsHandler = getSuggestionsHandler;
        LocalSearchDisabled = localSearchDisabled;
        LocationType = locationType;
        MaxResults = maxResults;
        MaxSuggestions = maxSuggestions;
        MinSuggestCharacters = minSuggestCharacters;
        Name = name;
        OutFields = outFields;
        Placeholder = placeholder;
        PopupEnabled = popupEnabled;
        PopupTemplate = popupTemplate;
        Prefix = prefix;
        ResultGraphicEnabled = resultGraphicEnabled;
        ResultSymbol = resultSymbol;
        SearchTemplate = searchTemplate;
        SingleLineFieldName = singleLineFieldName;
        Suffix = suffix;
        SuggestionsEnabled = suggestionsEnabled;
        WithinViewEnabled = withinViewEnabled;
        ZoomScale = zoomScale;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A string array which limits the results to one or more categories.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#categories">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Categories { get; set; }
    
    /// <summary>
    ///     The name of the source for display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     A template string used to display multiple fields in a defined order when results are displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#searchTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SearchTemplate { get; set; }
    
    /// <summary>
    ///     URL to the ArcGIS Server REST resource that represents a locator service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search-LocatorSearchSource.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string Url { get; set; } = null!;
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ApiKey property.
    /// </summary>
    public async Task<string?> GetApiKey()
    {
        if (CoreJsModule is null)
        {
            return ApiKey;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ApiKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "apiKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             ApiKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ApiKey)] = ApiKey;
        }
         
        return ApiKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Categories property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetCategories()
    {
        if (CoreJsModule is null)
        {
            return Categories;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Categories;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "categories");
        if (result is not null)
        {
#pragma warning disable BL0005
             Categories = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Categories)] = Categories;
        }
         
        return Categories;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CountryCode property.
    /// </summary>
    public async Task<string?> GetCountryCode()
    {
        if (CoreJsModule is null)
        {
            return CountryCode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CountryCode;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "countryCode");
        if (result is not null)
        {
#pragma warning disable BL0005
             CountryCode = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CountryCode)] = CountryCode;
        }
         
        return CountryCode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultZoomScale property.
    /// </summary>
    public async Task<double?> GetDefaultZoomScale()
    {
        if (CoreJsModule is null)
        {
            return DefaultZoomScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultZoomScale;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "defaultZoomScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DefaultZoomScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultZoomScale)] = DefaultZoomScale;
        }
         
        return DefaultZoomScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LocalSearchDisabled property.
    /// </summary>
    public async Task<bool?> GetLocalSearchDisabled()
    {
        if (CoreJsModule is null)
        {
            return LocalSearchDisabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LocalSearchDisabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "localSearchDisabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LocalSearchDisabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LocalSearchDisabled)] = LocalSearchDisabled;
        }
         
        return LocalSearchDisabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LocationType property.
    /// </summary>
    public async Task<LocatorSearchLocationType?> GetLocationType()
    {
        if (CoreJsModule is null)
        {
            return LocationType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LocationType;
        }

        // get the property value
        JsNullableEnumWrapper<LocatorSearchLocationType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<LocatorSearchLocationType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "locationType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LocationType = (LocatorSearchLocationType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LocationType)] = LocationType;
        }
         
        return LocationType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "name");
        if (result is not null)
        {
#pragma warning disable BL0005
             Name = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Name)] = Name;
        }
         
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SearchTemplate property.
    /// </summary>
    public async Task<string?> GetSearchTemplate()
    {
        if (CoreJsModule is null)
        {
            return SearchTemplate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SearchTemplate;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "searchTemplate");
        if (result is not null)
        {
#pragma warning disable BL0005
             SearchTemplate = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SearchTemplate)] = SearchTemplate;
        }
         
        return SearchTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SingleLineFieldName property.
    /// </summary>
    public async Task<string?> GetSingleLineFieldName()
    {
        if (CoreJsModule is null)
        {
            return SingleLineFieldName;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SingleLineFieldName;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "singleLineFieldName");
        if (result is not null)
        {
#pragma warning disable BL0005
             SingleLineFieldName = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SingleLineFieldName)] = SingleLineFieldName;
        }
         
        return SingleLineFieldName;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "url");
        if (result is not null)
        {
#pragma warning disable BL0005
             Url = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Url)] = Url;
        }
         
        return Url;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ApiKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetApiKey(string? value)
    {
#pragma warning disable BL0005
        ApiKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ApiKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "apiKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Categories property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCategories(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        Categories = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Categories)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "categories", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CountryCode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCountryCode(string? value)
    {
#pragma warning disable BL0005
        CountryCode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CountryCode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "countryCode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultZoomScale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultZoomScale(double? value)
    {
#pragma warning disable BL0005
        DefaultZoomScale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultZoomScale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultZoomScale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LocalSearchDisabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocalSearchDisabled(bool? value)
    {
#pragma warning disable BL0005
        LocalSearchDisabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LocalSearchDisabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "localSearchDisabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LocationType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocationType(LocatorSearchLocationType? value)
    {
#pragma warning disable BL0005
        LocationType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LocationType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "locationType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string? value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SearchTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSearchTemplate(string? value)
    {
#pragma warning disable BL0005
        SearchTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SearchTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "searchTemplate", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SingleLineFieldName property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSingleLineFieldName(string? value)
    {
#pragma warning disable BL0005
        SingleLineFieldName = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SingleLineFieldName)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "singleLineFieldName", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Categories property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToCategories(params string[] values)
    {
        string[] join = Categories is null
            ? values
            : [..Categories, ..values];
        await SetCategories(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Categories property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromCategories(params string[] values)
    {
        if (Categories is null)
        {
            return;
        }
        await SetCategories(Categories.Except(values).ToArray());
    }
    
#endregion

    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Url is null)
        {
            throw new MissingRequiredChildElementException(nameof(LocatorSearchSource), nameof(Url));
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
